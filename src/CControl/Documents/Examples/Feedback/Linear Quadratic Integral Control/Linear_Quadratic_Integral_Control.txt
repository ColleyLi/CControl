/*
 ============================================================================
 Name        : Linear_Quadratic_Integral_Control.c
 Author      : Daniel MÃ¥rtensson
 Version     : 1.0
 Copyright   : MIT
 Description : Linear Quadratic Integral Control
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>

#include "CControl/Headers/Configurations.h"
#include "CControl/Headers/Functions.h"

int main() {

	/*
	 * In this example we have selected the following configuration inside Confiugration.h
	 * SELECTED_CONTROL_STRATEGY MANUAL
	 * ADIM 2 // Matrix A will be [A]
	 * YDIM 1 // Matrix B will be [C]
	 * RDIM 1 // Matrix C will be [B]
	 * HORIZON 20
	 * ALPHA 0.1 // Prevent deadbeat control for MPC and GPC
	 * ITERATION_LIMIT 100 // This is for MPC
	 * ANTI_WINDUP ALWAYS_INTEGRATE // The integral function for LQR
	 */

	// Model A, B, C, D
	float A[ADIM * ADIM] = { 0.89559,   0.37735,
		                    -0.37735,   0.51825};

	float B[ADIM * RDIM] ={  0.20881,
		                     0.75469};

	float C[YDIM * ADIM] = {1, 0};

	// Kalman steady state matrix K
	float K[ADIM * YDIM] = {0.58006,
			               -0.22391};

	// Control law L
	float L[RDIM * ADIM] = {1.56766, 0.85103};

	// Integral law Li
	float Li[RDIM] = {0.50135};

	// Initial states - Normally set to zero
	float x[ADIM] = {0};
	float xi[1] = {0};

	// Input signal, reference signal, output signal and state vector x and xi
	float qi = 0.1;		 // <-- Tune this in between 0->1, but qi =/= 1.
	float u[RDIM] = {0}; // <-- This is our input value we want to have
	float r[RDIM] = {25}; // <-- This is what we want to see.
	float y[YDIM] = {0}; // <-- This is our measurement. Set it.

	//Control LQI
	lqi(y, u, qi, r, L, Li, x, xi);

	// Estimate the state x
	kalman(A, B, C, K, u, x, y);

	// Check the inputs
	for(int i = 0; i < RDIM; i++){
		printf("u%d = %f\n", i, *(u+i));
	}

	return EXIT_SUCCESS;
}
