/*
 ============================================================================
 Name        : Generalized_Predictive_Control.c
 Author      : Daniel MÃ¥rtensson
 Version     : 1.0
 Copyright   : MIT
 Description : Generalized Predictive Control
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>

#include "CControl/Headers/Configurations.h"
#include "CControl/Headers/Functions.h"

int main() {

	/*
	 * In this example we have selected the following configuration inside Confiugration.h
	 * SELECTED_CONTROL_STRATEGY AUTOMATIC
	 * q 1000 // Initial diagonal values for P matrix for system identification. 1000 is a good number
	 * LAMBDA 1 // Forgetting factor for system identification. Lambda Should not be less than zero
	 * POLY_LENGTH 6 // Length of polynomials A(q), B(q) and C(q) in Recursive least squares

	 * HORIZON 50 // How long we want to look in the future
	 * ALPHA 0.1 // This will prevent dead-beat control and gives more smooth input values
	 * INTEGRATION TRUE // Enable integral action inside model - Recommended
	 * ITERATION_LIMIT 100 // This is for MPC
	 * ANTI_WINDUP ALWAYS_INTEGRATE // The integral function for MRAC
	 * LEARNING 0.0001 // For MRAC
	 */

	/*
	 * Assume that we reading input(k), and output(k) from an ADC. In this case, we have
	 * a vector of inputs and outputs, but in real time running, we will not have this vector.
	 */
	float input[200] = { 0, 0.301, 0.59896, 0.89088, 1.1738, 1.4449, 1.7014,
			1.9407, 2.1605, 2.3584, 2.5325, 2.6811, 2.8026, 2.8959, 2.9599,
			2.994, 2.9979, 2.9716, 2.9153, 2.8295, 2.7152, 2.5735, 2.4058,
			2.2139, 1.9996, 1.7651, 1.5128, 1.2452, 0.96509, 0.67522, 0.37854,
			0.078035, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.14536, 0.44528, 0.74069,
			1.0286, 1.3062, 1.5706, 1.8191, 2.0493, 2.2588, 2.4455, 2.6075,
			2.7432, 2.8512, 2.9304, 2.9801, 2.9997, 2.989, 2.9481, 2.8775,
			2.7779, 2.6502, 2.4958, 2.3162, 2.1132, 1.8888, 1.6455, 1.3855,
			1.1115, 0.82633, 0.5328, 0.2339, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0.29038,
			0.5885, 0.88069, 1.164, 1.4355, 1.6926, 1.9326, 2.153, 2.3518,
			2.5268, 2.6763, 2.7988, 2.8931, 2.9581, 2.9933, 2.9983, 2.973,
			2.9178, 2.833, 2.7197, 2.579, 2.4122, 2.2211, 2.0075, 1.7737, 1.522,
			1.2549, 0.97519, 0.68562, 0.38912, 0.088701, 0, 0, 0, 0, 0, 0, 0, 0,
			0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0, 0,
			0.1347, 0.43472, 0.73035, 1.0186, 1.2966, 1.5615, 1.8106, 2.0415,
			2.2517, 2.4393, 2.6022, 2.7388 }; // Input signal

	float output[200] = { -0.04552, -0.0165, 0.085475, 0.019568, 0.11068,
			0.0598, 0.1571, 0.18685, 0.35442, 0.44509, 0.55725, 0.5358, 0.76435,
			1.0528, 1.0671, 1.3307, 1.4482, 1.603, 1.7769, 1.9334, 2.0141,
			2.0975, 2.2853, 2.3138, 2.3917, 2.506, 2.5354, 2.5602, 2.549,
			2.5327, 2.454, 2.3975, 2.2674, 2.1012, 2.0725, 1.8941, 1.6603,
			1.5191, 1.424, 1.1534, 1.0729, 0.94439, 0.77628, 0.6572, 0.59315,
			0.52384, 0.4301, 0.2388, 0.21832, 0.28819, 0.21504, 0.10726,
			0.070551, 0.030428, -0.0835, -0.0066687, -0.081236, -0.1047,
			-0.14515, -0.054172, -0.065246, -0.032249, -0.088997, -0.067871,
			-0.1843, -0.032239, -0.051803, -0.086567, 0.035398, 0.073955,
			0.23771, 0.3101, 0.38775, 0.54786, 0.75382, 0.83328, 1.0851, 1.1429,
			1.3623, 1.5523, 1.6241, 1.8171, 1.9946, 2.0576, 2.2116, 2.3411,
			2.4211, 2.5231, 2.5987, 2.5913, 2.494, 2.5811, 2.4805, 2.4325,
			2.3342, 2.1725, 2.039, 1.9755, 1.769, 1.6103, 1.5545, 1.285, 1.2745,
			1.0114, 0.88629, 0.78561, 0.69989, 0.58963, 0.51357, 0.32812,
			0.31543, 0.18278, 0.15214, 0.086851, 0.038574, 0.0083312, -0.072085,
			-0.064131, -0.063439, -0.027732, 0.027438, -0.05693, -0.068153,
			-0.072999, -0.044924, -0.030444, -0.058941, -0.10416, -0.066146,
			-0.055518, -0.043112, 0.057859, 0.056989, 0.23076, 0.29821, 0.41664,
			0.71968, 0.73916, 0.86019, 1.0902, 1.2529, 1.3887, 1.5891, 1.8334,
			1.8945, 1.975, 2.1505, 2.2909, 2.4045, 2.4882, 2.5202, 2.5859,
			2.6672, 2.5406, 2.6217, 2.4861, 2.3249, 2.3365, 2.1005, 1.938,
			1.9047, 1.7013, 1.5264, 1.2792, 1.287, 1.0839, 0.83944, 0.83517,
			0.57546, 0.71296, 0.51052, 0.45367, 0.3014, 0.26835, 0.1508, 0.1112,
			0.1699, 0.077508, -0.15853, 0.042067, 0.022826, -0.12765, -0.10696,
			0.0030943, -0.17429, -0.15757, -0.078971, -0.034756, -0.11623,
			-0.023793, -0.035641, -0.054247, 0.069901, -0.064378, 0.1327,
			0.14298, 0.24953, 0.36484, 0.49754, 0.65969 }; // Noisy output data

	/*
	 * Estimation SISO model - Assume that this this is inside the microprocessor's while(1) loop
	 */
	float past_e; // The past e
	float past_y; // The past y
	float past_u; // The past u
	float phi[NP + NZ + NZE];
	float P[(NP + NZ + NZE)*(NP + NZ + NZE)];
	float theta[NP + NZ + NZE]; // Remember that total length is POLY_LENGTH*3 - ALWAYS have these dimensions
	int count = 0; // Initial set to 0. Will be counted to 2 then stop. Set count = 0 again and the algorithm starts over
	for (int i = 0; i < sizeof(output) / sizeof(output[0]); i++) {
		rls(theta, input[i], output[i], &count, &past_e, &past_y, &past_u, phi, P);
	}

	/*
	 * Find our state space model with kalman gain matrix from theta - ALWAYS have these dimensions
	 */
	float A[ADIM * ADIM];
	float B[ADIM * RDIM];
	float C[YDIM * ADIM];
	float K[ADIM * YDIM]; 
	theta2ss(A, B, C, theta, K);

	/*
	 * Print our state space matrix
	 */
	printf("System matrix: A\n");
	print(A, ADIM, ADIM);

	printf("Input matrix: B\n");
	print(B, ADIM, RDIM);

	printf("Output matrix: C\n");
	print(C, YDIM, ADIM);

	printf("Kalman gain matrix: K\n");
	print(K, ADIM, YDIM);

	/*
	 * Create our state vector.
	 * Notice that our state vector is [x; y] if INTEGRATION is true, else it's just a normal vector without output y
	 */
	float x[ADIM];
	memset(x, 0, ADIM * sizeof(float));
	if(INTEGRATION == TRUE)
		x[ADIM - 1] = output[sizeof(output) / sizeof(output[0]) - 1]; // Get the last of y and set it to last row of x

	// Create our reference vector
	float r[RDIM] = { 12.5 }; // RDIM and YDIM is always 1 for Generalized Predictive Control

	// Create our input vector
	float u[RDIM] = { 0 };

	// Find the input value
	gpc(A, B, C, x, u, r);

	// Saturate input u
	saturation(&u[0], 0, 25);

	// Print u
	printf("Our best input value is: %f\n", u[0]);

	// Create our output vector - We can borrow the xy state from [x; xy] vector
	float y[YDIM] = { x[ADIM - 1] };

	// Update our state vector x
	printf("Our current state is:\n");
	print(x, ADIM, 1);
	kalman(A, B, C, K, u, x, y);
	printf("Our estimated state is:\n");
	print(x, ADIM, 1);

	return EXIT_SUCCESS;
}
