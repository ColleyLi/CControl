/*
 ============================================================================
 Name        : movingaverage.c
 Author      : Daniel MÃ¥rtensson
 Version     : 1.0
 Copyright   : MIT
 Description : Filter the y array with moving average
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include "CControl/Headers/Configurations.h"
#include "CControl/Headers/Functions.h"

int main() {


	float y[200] = { 0.617539, 1.028475, 0.445100, 2.426892, 3.003556, 1.284424,
					 1.634385, 1.094658, 2.063409, 2.302256, 1.114905, 0.717539,
					 2.164316, 1.173670, 0.966067, 0.491422, 0.901125, 0.739359,
					 1.827684, 0.824443, 0.914027, 0.031570, 0.079461, 0.557278,
					 0.332166, -0.134207, -0.113463, 1.048432, 0.570787, -0.258758,
					 0.668848, 0.918858, 2.199463, 1.676553, 1.798289, 2.636453,
					 1.504219, 2.277600, 3.435341, 3.482287, 2.745272, 3.843153,
					 3.948057, 4.651335, 4.099512, 4.267839, 4.493643, 4.502839,
					 4.510511, 4.567472, 4.057472, 4.329842, 3.500597, 3.816383,
					 4.548933, 3.419981, 3.528016, 2.534171, 3.184913, 2.882132,
					 2.853088, 1.416848, 2.218883, 1.864105, 2.120065, 1.662808,
					 1.969469, 1.618076, 1.705711, 1.901269, 0.830370, 1.466004,
					 0.948841, 0.646716, 2.214201, 1.271740, 1.341792, 0.852088,
					 0.542659, 1.497970, 1.376282, 1.948665, 2.041536, 1.427984,
					 2.278097, 3.981288, 2.624346, 2.504809, 2.863307, 3.598106,
					 3.968712, 3.634259, 4.365091, 3.631477, 4.441140, 4.897651,
					 2.926064, 5.082753, 4.698239, 3.925215, 4.383070, 5.109399,
					 4.132062, 4.002568, 3.973967, 3.583076, 2.936097, 4.290131,
					 3.279233, 2.709634, 2.278463, 2.511152, 3.089469, 2.866449,
					 2.365374, 1.500408, 1.328811, 1.050513, 0.910931, 0.986059,
					 1.256646, 0.834690, 0.775594, 2.027391, 0.937032, 1.020894,
					 -0.096812, 1.068304, 1.107658, 0.959530, 2.051962, 1.019987,
					 0.795723, 1.869110, 2.468712, 1.571600, 2.504450, 2.976196,
					 2.410539, 3.630605, 3.441588, 3.815942, 2.254325, 3.831404,
					 4.893219, 4.050683, 4.120972, 3.829610, 4.290881, 5.153772,
					 4.931739, 3.843602, 3.345247, 4.095655, 3.694815, 3.770360,
					 4.158290, 3.321636, 2.673428, 3.076478, 3.109121, 2.028935,
					 1.127911, 1.350461, 1.703192, 1.421422, 1.432985, 1.596315,
					 1.359065, 1.762822, 0.196490, 1.232378, 0.401499, 0.331293,
					 0.281032, 0.595987, 0.141382, 0.883180, 0.634049, 1.661099,
					 1.683392, 1.905622, 1.030473, 2.767184, 1.969807, 2.349649,
					 2.458252, 2.520356, 3.326381, 2.561036, 3.753933, 3.630594,
					 3.814775, 5.106769, 2.618015, 3.917382, 4.557809, 4.583474,
					 4.210896, 5.295380};

	clock_t start, end;
	float cpu_time_used;
	start = clock();

	movingaverage(y, 200, 10); // 200 = length of y array, 10 = tuning parameter
	print(y, 200, 1);

	end = clock();
	cpu_time_used = ((float) (end - start)) / CLOCKS_PER_SEC;
	printf("\nTotal speed  was %f\n", cpu_time_used);
	return EXIT_SUCCESS;
}
