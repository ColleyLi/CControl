/*
 ============================================================================
 Name        : chol.c
 Author      : Daniel MÃ¥rtensson
 Version     : 1.0
 Copyright   : MIT
 Description : Solve Ax=b with Cholesky decomposition
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include "CControl/Headers/Configurations.h"
#include "CControl/Headers/Functions.h"

int main() {


	// Hermitian  positive matrix
	float A[2*2] = {25,   32,
			   	    32,   41};

	float b[2] = {3,
				  5};

	// L1y = b, L2x = y
	float x[2];
	float y[2];

	// Cholesky matrix
	float L1[2*2];
	float L2[2*2];

	clock_t start, end;
	float cpu_time_used;
	start = clock();

	chol(A, L1, 2); // L1 will be lower traingular
	linsolve_lower_triangular(L1, y, b, 2);
	memcpy(L2, L1, 2*2*sizeof(float));
	tran(L2, 2, 2);
	linsolve_upper_triangular(L2, x, y, 2); // Now solve the system

	end = clock();
	cpu_time_used = ((float) (end - start)) / CLOCKS_PER_SEC;
	printf("\nTotal speed  was %f\n", cpu_time_used);

	// Print x
	printf("x\n");
	print(x, 2, 1);

	return EXIT_SUCCESS;
}

/*
 * GNU Octave code:
 * A = [25,   32,
		32,   41];

	b = [3,
	     5];

	x = linsolve(A, b)
 */
