/*
 ============================================================================
 Name        : linsolve_upper_triangular.c
 Author      : Daniel MÃ¥rtensson
 Version     : 1.0
 Copyright   : MIT
 Description : Solve a system Ax=b with back substitution
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>
#include <time.h>
#include "CControl/Headers/Functions.h"

int main() {

	// Matrix A
	float A[4*4] = {0.649587,   0.320520,   0.274275,   0.821053,
				    0.424608,   0.996594,   0.638315,   0.636367,
				    0.719499,   0.017284,   0.321835,   0.060467,
				    0.859543,   0.243554,   0.402577,   0.753847};

	// Vector b
	float b[4] = {0.091799,
				  0.202273,
				  0.269783,
				  0.580578};

	// Solution that need to have the same rows and columns from A
	float x[4];

	// Do upper triangular
	clock_t start, end;
	float cpu_time_used;
	start = clock();
	triu(A, b, 4); // Important to do this first
	linsolve_upper_triangular(A, x, b, 4);
	end = clock();
	cpu_time_used = ((float) (end - start)) / CLOCKS_PER_SEC;
	printf("\nTotal speed  was %f\n", cpu_time_used);

	// Print x
	printf("x\n");
	print(x, 4, 1);

	return EXIT_SUCCESS;
}

/*
 * GNU Octave code:
 * A = [0.649587,   0.320520,   0.274275,   0.821053,
	    0.424608,   0.996594,   0.638315,   0.636367,
	    0.719499,   0.017284,   0.321835,   0.060467,
		0.859543,   0.243554,   0.402577,   0.753847];

	b = [0.091799,
		 0.202273,
		 0.269783,
		 0.580578];

	x = linsolve(A, b)
 */
