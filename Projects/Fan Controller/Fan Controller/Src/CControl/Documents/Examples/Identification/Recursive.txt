/*
 ============================================================================
 Name        : Recursive.c
 Author      : Daniel MÃ¥rtensson
 Version     : 1.0
 Copyright   : MIT
 Description : System identification example
 ============================================================================
 */

#include <stdio.h>
#include <stdlib.h>

#include "CControl/Headers/Configurations.h"
#include "CControl/Headers/Functions.h"

int main() {
	
	/*
	 * In this example we have selected the following configuration inside Confiugration.h
	 * SELECTED_CONTROL_STRATEGY AUTOMATIC
	 * q 1000
	 * LAMBDA 1
	 * POLY_LENGTH 5
	 * HORIZON 50
	 * ALPHA 0.1
	 * INTEGRATION TRUE
	 */
	
	/*
	 * Assume that we reading u(k), and y(k) from an ADC. In this case, we have
	 * a vector of u's and y's, but in real time running, we will not have this vector.
	 */
	float u[100] = { 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1, 1,
			1, 1, 1, 1, 1, 1, 1, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
			2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2,
			2, 2, 2, 2, 2, 2, 2, 2, 2, 2, 2 }; // Input signal

	float y[100] = { -0.0445137, -0.0032672, 0.0856559, 0.1004473, 0.2113512,
			0.2604174, 0.3894188, 0.4583728, 0.5023350, 0.5022329, 0.6228566,
			0.6713991, 0.6192597, 0.6774358, 0.7754895, 0.7998662, 0.8251695,
			0.8806162, 0.8874140, 0.8677128, 0.9239047, 0.9119708, 0.9597855,
			0.9371063, 0.9497233, 0.9542075, 0.9446634, 1.0046191, 0.9908820,
			0.9590703, 0.9658689, 0.9551398, 1.0028202, 1.0429445, 1.0425436,
			1.0025594, 0.9755645, 0.9827501, 1.0474129, 1.0084872, 0.9585376,
			1.0016099, 0.9911550, 1.0273311, 0.9688484, 0.9876398, 0.9833694,
			0.9364632, 1.0294010, 0.9677917, 0.9523802, 0.9895869, 1.0310688,
			1.1066686, 1.2078568, 1.2710572, 1.3314962, 1.3870464, 1.5050087,
			1.5257710, 1.6308239, 1.6460163, 1.6373430, 1.7442911, 1.7672607,
			1.8119922, 1.8337272, 1.8371462, 1.8741673, 1.8634503, 1.8902928,
			1.9868593, 1.9795181, 1.9690910, 1.9691797, 1.9583880, 1.9538823,
			1.9862903, 2.0117289, 1.9215172, 2.0157408, 1.9881570, 1.9677584,
			1.9686822, 1.9725636, 1.9691901, 2.0187294, 2.0107059, 2.0180077,
			2.0046820, 1.9681369, 1.9917905, 1.9549249, 1.9753211, 1.9886218,
			1.9850324, 2.0585506, 1.9724063, 1.9940184, 2.0406771}; // Noisy output data

	/*
	 * Estimation SISO model - Assume that this this is inside the microprocessor's while(1) loop
	 */
	float theta[NP + NZ + NZE]; // Remember that total length is POLY_LENGTH*3 - ALWAYS have these dimensions
	int count = 0; // Initial set to 0. Will be counted to 2 then stop. Set count = 0 again and the algorithm starts over
	for (int i = 0; i < 100; i++) {
		rls(theta, u[i], y[i], &count);
	}

	/*
	 * Find our state space model with kalman gain matrix from theta - ALWAYS have these dimensions
	 */
	float A[ADIM * ADIM];
	float B[ADIM * RDIM];
	float C[YDIM * ADIM];
	float K[(ADIM-1) * YDIM]; // (ADIM-1) only if we have INTEGRATION TRUE, else ADIM
	theta2ss(A, B, C, theta, K);

	/*
	 * Print our state space matrix
	 */
	printf("System matrix: A\n");
	print(A, ADIM, ADIM);

	printf("Input matrix: B\n");
	print(B, ADIM, RDIM);

	printf("Output matrix: C\n");
	print(C, YDIM, ADIM);

	printf("Kalman gain matrix: K\n");
	print(K, (ADIM-1), YDIM);

	return EXIT_SUCCESS;
}
