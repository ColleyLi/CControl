
Model Predictive Integral Temperature Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c4  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000fdb8  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00034e78  0800ff88  0800ff88  0001ff88  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08044e00  08044e00  000601e8  2**0
                  CONTENTS
  4 .ARM          00000008  08044e00  08044e00  00054e00  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08044e08  08044e08  000601e8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08044e08  08044e08  00054e08  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08044e0c  08044e0c  00054e0c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e8  20000000  08044e10  00060000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000504c  200001e8  08044ff8  000601e8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20005234  08044ff8  00065234  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000601e8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0002729b  00000000  00000000  00060218  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00005272  00000000  00000000  000874b3  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001ae0  00000000  00000000  0008c728  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001878  00000000  00000000  0008e208  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0002559a  00000000  00000000  0008fa80  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018f14  00000000  00000000  000b501a  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000de1e9  00000000  00000000  000cdf2e  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001ac117  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000078cc  00000000  00000000  001ac194  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200001e8 	.word	0x200001e8
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0800ff70 	.word	0x0800ff70

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200001ec 	.word	0x200001ec
 800020c:	0800ff70 	.word	0x0800ff70

08000210 <strlen>:
 8000210:	4603      	mov	r3, r0
 8000212:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000216:	2a00      	cmp	r2, #0
 8000218:	d1fb      	bne.n	8000212 <strlen+0x2>
 800021a:	1a18      	subs	r0, r3, r0
 800021c:	3801      	subs	r0, #1
 800021e:	4770      	bx	lr

08000220 <__aeabi_drsub>:
 8000220:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000224:	e002      	b.n	800022c <__adddf3>
 8000226:	bf00      	nop

08000228 <__aeabi_dsub>:
 8000228:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800022c <__adddf3>:
 800022c:	b530      	push	{r4, r5, lr}
 800022e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000232:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000236:	ea94 0f05 	teq	r4, r5
 800023a:	bf08      	it	eq
 800023c:	ea90 0f02 	teqeq	r0, r2
 8000240:	bf1f      	itttt	ne
 8000242:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000246:	ea55 0c02 	orrsne.w	ip, r5, r2
 800024a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800024e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000252:	f000 80e2 	beq.w	800041a <__adddf3+0x1ee>
 8000256:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800025a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800025e:	bfb8      	it	lt
 8000260:	426d      	neglt	r5, r5
 8000262:	dd0c      	ble.n	800027e <__adddf3+0x52>
 8000264:	442c      	add	r4, r5
 8000266:	ea80 0202 	eor.w	r2, r0, r2
 800026a:	ea81 0303 	eor.w	r3, r1, r3
 800026e:	ea82 0000 	eor.w	r0, r2, r0
 8000272:	ea83 0101 	eor.w	r1, r3, r1
 8000276:	ea80 0202 	eor.w	r2, r0, r2
 800027a:	ea81 0303 	eor.w	r3, r1, r3
 800027e:	2d36      	cmp	r5, #54	; 0x36
 8000280:	bf88      	it	hi
 8000282:	bd30      	pophi	{r4, r5, pc}
 8000284:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000288:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800028c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000290:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000294:	d002      	beq.n	800029c <__adddf3+0x70>
 8000296:	4240      	negs	r0, r0
 8000298:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800029c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 80002a0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80002a4:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 80002a8:	d002      	beq.n	80002b0 <__adddf3+0x84>
 80002aa:	4252      	negs	r2, r2
 80002ac:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 80002b0:	ea94 0f05 	teq	r4, r5
 80002b4:	f000 80a7 	beq.w	8000406 <__adddf3+0x1da>
 80002b8:	f1a4 0401 	sub.w	r4, r4, #1
 80002bc:	f1d5 0e20 	rsbs	lr, r5, #32
 80002c0:	db0d      	blt.n	80002de <__adddf3+0xb2>
 80002c2:	fa02 fc0e 	lsl.w	ip, r2, lr
 80002c6:	fa22 f205 	lsr.w	r2, r2, r5
 80002ca:	1880      	adds	r0, r0, r2
 80002cc:	f141 0100 	adc.w	r1, r1, #0
 80002d0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002d4:	1880      	adds	r0, r0, r2
 80002d6:	fa43 f305 	asr.w	r3, r3, r5
 80002da:	4159      	adcs	r1, r3
 80002dc:	e00e      	b.n	80002fc <__adddf3+0xd0>
 80002de:	f1a5 0520 	sub.w	r5, r5, #32
 80002e2:	f10e 0e20 	add.w	lr, lr, #32
 80002e6:	2a01      	cmp	r2, #1
 80002e8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002ec:	bf28      	it	cs
 80002ee:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002f2:	fa43 f305 	asr.w	r3, r3, r5
 80002f6:	18c0      	adds	r0, r0, r3
 80002f8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002fc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000300:	d507      	bpl.n	8000312 <__adddf3+0xe6>
 8000302:	f04f 0e00 	mov.w	lr, #0
 8000306:	f1dc 0c00 	rsbs	ip, ip, #0
 800030a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800030e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000312:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000316:	d31b      	bcc.n	8000350 <__adddf3+0x124>
 8000318:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800031c:	d30c      	bcc.n	8000338 <__adddf3+0x10c>
 800031e:	0849      	lsrs	r1, r1, #1
 8000320:	ea5f 0030 	movs.w	r0, r0, rrx
 8000324:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000328:	f104 0401 	add.w	r4, r4, #1
 800032c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000330:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000334:	f080 809a 	bcs.w	800046c <__adddf3+0x240>
 8000338:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800033c:	bf08      	it	eq
 800033e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000342:	f150 0000 	adcs.w	r0, r0, #0
 8000346:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800034a:	ea41 0105 	orr.w	r1, r1, r5
 800034e:	bd30      	pop	{r4, r5, pc}
 8000350:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000354:	4140      	adcs	r0, r0
 8000356:	eb41 0101 	adc.w	r1, r1, r1
 800035a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800035e:	f1a4 0401 	sub.w	r4, r4, #1
 8000362:	d1e9      	bne.n	8000338 <__adddf3+0x10c>
 8000364:	f091 0f00 	teq	r1, #0
 8000368:	bf04      	itt	eq
 800036a:	4601      	moveq	r1, r0
 800036c:	2000      	moveq	r0, #0
 800036e:	fab1 f381 	clz	r3, r1
 8000372:	bf08      	it	eq
 8000374:	3320      	addeq	r3, #32
 8000376:	f1a3 030b 	sub.w	r3, r3, #11
 800037a:	f1b3 0220 	subs.w	r2, r3, #32
 800037e:	da0c      	bge.n	800039a <__adddf3+0x16e>
 8000380:	320c      	adds	r2, #12
 8000382:	dd08      	ble.n	8000396 <__adddf3+0x16a>
 8000384:	f102 0c14 	add.w	ip, r2, #20
 8000388:	f1c2 020c 	rsb	r2, r2, #12
 800038c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000390:	fa21 f102 	lsr.w	r1, r1, r2
 8000394:	e00c      	b.n	80003b0 <__adddf3+0x184>
 8000396:	f102 0214 	add.w	r2, r2, #20
 800039a:	bfd8      	it	le
 800039c:	f1c2 0c20 	rsble	ip, r2, #32
 80003a0:	fa01 f102 	lsl.w	r1, r1, r2
 80003a4:	fa20 fc0c 	lsr.w	ip, r0, ip
 80003a8:	bfdc      	itt	le
 80003aa:	ea41 010c 	orrle.w	r1, r1, ip
 80003ae:	4090      	lslle	r0, r2
 80003b0:	1ae4      	subs	r4, r4, r3
 80003b2:	bfa2      	ittt	ge
 80003b4:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 80003b8:	4329      	orrge	r1, r5
 80003ba:	bd30      	popge	{r4, r5, pc}
 80003bc:	ea6f 0404 	mvn.w	r4, r4
 80003c0:	3c1f      	subs	r4, #31
 80003c2:	da1c      	bge.n	80003fe <__adddf3+0x1d2>
 80003c4:	340c      	adds	r4, #12
 80003c6:	dc0e      	bgt.n	80003e6 <__adddf3+0x1ba>
 80003c8:	f104 0414 	add.w	r4, r4, #20
 80003cc:	f1c4 0220 	rsb	r2, r4, #32
 80003d0:	fa20 f004 	lsr.w	r0, r0, r4
 80003d4:	fa01 f302 	lsl.w	r3, r1, r2
 80003d8:	ea40 0003 	orr.w	r0, r0, r3
 80003dc:	fa21 f304 	lsr.w	r3, r1, r4
 80003e0:	ea45 0103 	orr.w	r1, r5, r3
 80003e4:	bd30      	pop	{r4, r5, pc}
 80003e6:	f1c4 040c 	rsb	r4, r4, #12
 80003ea:	f1c4 0220 	rsb	r2, r4, #32
 80003ee:	fa20 f002 	lsr.w	r0, r0, r2
 80003f2:	fa01 f304 	lsl.w	r3, r1, r4
 80003f6:	ea40 0003 	orr.w	r0, r0, r3
 80003fa:	4629      	mov	r1, r5
 80003fc:	bd30      	pop	{r4, r5, pc}
 80003fe:	fa21 f004 	lsr.w	r0, r1, r4
 8000402:	4629      	mov	r1, r5
 8000404:	bd30      	pop	{r4, r5, pc}
 8000406:	f094 0f00 	teq	r4, #0
 800040a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800040e:	bf06      	itte	eq
 8000410:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000414:	3401      	addeq	r4, #1
 8000416:	3d01      	subne	r5, #1
 8000418:	e74e      	b.n	80002b8 <__adddf3+0x8c>
 800041a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800041e:	bf18      	it	ne
 8000420:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000424:	d029      	beq.n	800047a <__adddf3+0x24e>
 8000426:	ea94 0f05 	teq	r4, r5
 800042a:	bf08      	it	eq
 800042c:	ea90 0f02 	teqeq	r0, r2
 8000430:	d005      	beq.n	800043e <__adddf3+0x212>
 8000432:	ea54 0c00 	orrs.w	ip, r4, r0
 8000436:	bf04      	itt	eq
 8000438:	4619      	moveq	r1, r3
 800043a:	4610      	moveq	r0, r2
 800043c:	bd30      	pop	{r4, r5, pc}
 800043e:	ea91 0f03 	teq	r1, r3
 8000442:	bf1e      	ittt	ne
 8000444:	2100      	movne	r1, #0
 8000446:	2000      	movne	r0, #0
 8000448:	bd30      	popne	{r4, r5, pc}
 800044a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800044e:	d105      	bne.n	800045c <__adddf3+0x230>
 8000450:	0040      	lsls	r0, r0, #1
 8000452:	4149      	adcs	r1, r1
 8000454:	bf28      	it	cs
 8000456:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800045a:	bd30      	pop	{r4, r5, pc}
 800045c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000460:	bf3c      	itt	cc
 8000462:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000466:	bd30      	popcc	{r4, r5, pc}
 8000468:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800046c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000470:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000474:	f04f 0000 	mov.w	r0, #0
 8000478:	bd30      	pop	{r4, r5, pc}
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf1a      	itte	ne
 8000480:	4619      	movne	r1, r3
 8000482:	4610      	movne	r0, r2
 8000484:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000488:	bf1c      	itt	ne
 800048a:	460b      	movne	r3, r1
 800048c:	4602      	movne	r2, r0
 800048e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000492:	bf06      	itte	eq
 8000494:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000498:	ea91 0f03 	teqeq	r1, r3
 800049c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 80004a0:	bd30      	pop	{r4, r5, pc}
 80004a2:	bf00      	nop

080004a4 <__aeabi_ui2d>:
 80004a4:	f090 0f00 	teq	r0, #0
 80004a8:	bf04      	itt	eq
 80004aa:	2100      	moveq	r1, #0
 80004ac:	4770      	bxeq	lr
 80004ae:	b530      	push	{r4, r5, lr}
 80004b0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004b4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004b8:	f04f 0500 	mov.w	r5, #0
 80004bc:	f04f 0100 	mov.w	r1, #0
 80004c0:	e750      	b.n	8000364 <__adddf3+0x138>
 80004c2:	bf00      	nop

080004c4 <__aeabi_i2d>:
 80004c4:	f090 0f00 	teq	r0, #0
 80004c8:	bf04      	itt	eq
 80004ca:	2100      	moveq	r1, #0
 80004cc:	4770      	bxeq	lr
 80004ce:	b530      	push	{r4, r5, lr}
 80004d0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004d4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004d8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004dc:	bf48      	it	mi
 80004de:	4240      	negmi	r0, r0
 80004e0:	f04f 0100 	mov.w	r1, #0
 80004e4:	e73e      	b.n	8000364 <__adddf3+0x138>
 80004e6:	bf00      	nop

080004e8 <__aeabi_f2d>:
 80004e8:	0042      	lsls	r2, r0, #1
 80004ea:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004ee:	ea4f 0131 	mov.w	r1, r1, rrx
 80004f2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004f6:	bf1f      	itttt	ne
 80004f8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004fc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000500:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000504:	4770      	bxne	lr
 8000506:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800050a:	bf08      	it	eq
 800050c:	4770      	bxeq	lr
 800050e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000512:	bf04      	itt	eq
 8000514:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000518:	4770      	bxeq	lr
 800051a:	b530      	push	{r4, r5, lr}
 800051c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000520:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000524:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000528:	e71c      	b.n	8000364 <__adddf3+0x138>
 800052a:	bf00      	nop

0800052c <__aeabi_ul2d>:
 800052c:	ea50 0201 	orrs.w	r2, r0, r1
 8000530:	bf08      	it	eq
 8000532:	4770      	bxeq	lr
 8000534:	b530      	push	{r4, r5, lr}
 8000536:	f04f 0500 	mov.w	r5, #0
 800053a:	e00a      	b.n	8000552 <__aeabi_l2d+0x16>

0800053c <__aeabi_l2d>:
 800053c:	ea50 0201 	orrs.w	r2, r0, r1
 8000540:	bf08      	it	eq
 8000542:	4770      	bxeq	lr
 8000544:	b530      	push	{r4, r5, lr}
 8000546:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800054a:	d502      	bpl.n	8000552 <__aeabi_l2d+0x16>
 800054c:	4240      	negs	r0, r0
 800054e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000552:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000556:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800055a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800055e:	f43f aed8 	beq.w	8000312 <__adddf3+0xe6>
 8000562:	f04f 0203 	mov.w	r2, #3
 8000566:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800056a:	bf18      	it	ne
 800056c:	3203      	addne	r2, #3
 800056e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000572:	bf18      	it	ne
 8000574:	3203      	addne	r2, #3
 8000576:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800057a:	f1c2 0320 	rsb	r3, r2, #32
 800057e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000582:	fa20 f002 	lsr.w	r0, r0, r2
 8000586:	fa01 fe03 	lsl.w	lr, r1, r3
 800058a:	ea40 000e 	orr.w	r0, r0, lr
 800058e:	fa21 f102 	lsr.w	r1, r1, r2
 8000592:	4414      	add	r4, r2
 8000594:	e6bd      	b.n	8000312 <__adddf3+0xe6>
 8000596:	bf00      	nop

08000598 <__aeabi_dmul>:
 8000598:	b570      	push	{r4, r5, r6, lr}
 800059a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800059e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80005a2:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80005a6:	bf1d      	ittte	ne
 80005a8:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80005ac:	ea94 0f0c 	teqne	r4, ip
 80005b0:	ea95 0f0c 	teqne	r5, ip
 80005b4:	f000 f8de 	bleq	8000774 <__aeabi_dmul+0x1dc>
 80005b8:	442c      	add	r4, r5
 80005ba:	ea81 0603 	eor.w	r6, r1, r3
 80005be:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 80005c2:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 80005c6:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 80005ca:	bf18      	it	ne
 80005cc:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005d0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005d8:	d038      	beq.n	800064c <__aeabi_dmul+0xb4>
 80005da:	fba0 ce02 	umull	ip, lr, r0, r2
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005e6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ea:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005ee:	f04f 0600 	mov.w	r6, #0
 80005f2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005f6:	f09c 0f00 	teq	ip, #0
 80005fa:	bf18      	it	ne
 80005fc:	f04e 0e01 	orrne.w	lr, lr, #1
 8000600:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000604:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000608:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800060c:	d204      	bcs.n	8000618 <__aeabi_dmul+0x80>
 800060e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000612:	416d      	adcs	r5, r5
 8000614:	eb46 0606 	adc.w	r6, r6, r6
 8000618:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800061c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000620:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000624:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000628:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800062c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000630:	bf88      	it	hi
 8000632:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000636:	d81e      	bhi.n	8000676 <__aeabi_dmul+0xde>
 8000638:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800063c:	bf08      	it	eq
 800063e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000642:	f150 0000 	adcs.w	r0, r0, #0
 8000646:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800064a:	bd70      	pop	{r4, r5, r6, pc}
 800064c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000650:	ea46 0101 	orr.w	r1, r6, r1
 8000654:	ea40 0002 	orr.w	r0, r0, r2
 8000658:	ea81 0103 	eor.w	r1, r1, r3
 800065c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000660:	bfc2      	ittt	gt
 8000662:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000666:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800066a:	bd70      	popgt	{r4, r5, r6, pc}
 800066c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000670:	f04f 0e00 	mov.w	lr, #0
 8000674:	3c01      	subs	r4, #1
 8000676:	f300 80ab 	bgt.w	80007d0 <__aeabi_dmul+0x238>
 800067a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800067e:	bfde      	ittt	le
 8000680:	2000      	movle	r0, #0
 8000682:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000686:	bd70      	pople	{r4, r5, r6, pc}
 8000688:	f1c4 0400 	rsb	r4, r4, #0
 800068c:	3c20      	subs	r4, #32
 800068e:	da35      	bge.n	80006fc <__aeabi_dmul+0x164>
 8000690:	340c      	adds	r4, #12
 8000692:	dc1b      	bgt.n	80006cc <__aeabi_dmul+0x134>
 8000694:	f104 0414 	add.w	r4, r4, #20
 8000698:	f1c4 0520 	rsb	r5, r4, #32
 800069c:	fa00 f305 	lsl.w	r3, r0, r5
 80006a0:	fa20 f004 	lsr.w	r0, r0, r4
 80006a4:	fa01 f205 	lsl.w	r2, r1, r5
 80006a8:	ea40 0002 	orr.w	r0, r0, r2
 80006ac:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 80006b0:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80006b4:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006b8:	fa21 f604 	lsr.w	r6, r1, r4
 80006bc:	eb42 0106 	adc.w	r1, r2, r6
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 040c 	rsb	r4, r4, #12
 80006d0:	f1c4 0520 	rsb	r5, r4, #32
 80006d4:	fa00 f304 	lsl.w	r3, r0, r4
 80006d8:	fa20 f005 	lsr.w	r0, r0, r5
 80006dc:	fa01 f204 	lsl.w	r2, r1, r4
 80006e0:	ea40 0002 	orr.w	r0, r0, r2
 80006e4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006e8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006ec:	f141 0100 	adc.w	r1, r1, #0
 80006f0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006f4:	bf08      	it	eq
 80006f6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006fa:	bd70      	pop	{r4, r5, r6, pc}
 80006fc:	f1c4 0520 	rsb	r5, r4, #32
 8000700:	fa00 f205 	lsl.w	r2, r0, r5
 8000704:	ea4e 0e02 	orr.w	lr, lr, r2
 8000708:	fa20 f304 	lsr.w	r3, r0, r4
 800070c:	fa01 f205 	lsl.w	r2, r1, r5
 8000710:	ea43 0302 	orr.w	r3, r3, r2
 8000714:	fa21 f004 	lsr.w	r0, r1, r4
 8000718:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800071c:	fa21 f204 	lsr.w	r2, r1, r4
 8000720:	ea20 0002 	bic.w	r0, r0, r2
 8000724:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000728:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800072c:	bf08      	it	eq
 800072e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000732:	bd70      	pop	{r4, r5, r6, pc}
 8000734:	f094 0f00 	teq	r4, #0
 8000738:	d10f      	bne.n	800075a <__aeabi_dmul+0x1c2>
 800073a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800073e:	0040      	lsls	r0, r0, #1
 8000740:	eb41 0101 	adc.w	r1, r1, r1
 8000744:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000748:	bf08      	it	eq
 800074a:	3c01      	subeq	r4, #1
 800074c:	d0f7      	beq.n	800073e <__aeabi_dmul+0x1a6>
 800074e:	ea41 0106 	orr.w	r1, r1, r6
 8000752:	f095 0f00 	teq	r5, #0
 8000756:	bf18      	it	ne
 8000758:	4770      	bxne	lr
 800075a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800075e:	0052      	lsls	r2, r2, #1
 8000760:	eb43 0303 	adc.w	r3, r3, r3
 8000764:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000768:	bf08      	it	eq
 800076a:	3d01      	subeq	r5, #1
 800076c:	d0f7      	beq.n	800075e <__aeabi_dmul+0x1c6>
 800076e:	ea43 0306 	orr.w	r3, r3, r6
 8000772:	4770      	bx	lr
 8000774:	ea94 0f0c 	teq	r4, ip
 8000778:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800077c:	bf18      	it	ne
 800077e:	ea95 0f0c 	teqne	r5, ip
 8000782:	d00c      	beq.n	800079e <__aeabi_dmul+0x206>
 8000784:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000788:	bf18      	it	ne
 800078a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800078e:	d1d1      	bne.n	8000734 <__aeabi_dmul+0x19c>
 8000790:	ea81 0103 	eor.w	r1, r1, r3
 8000794:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000798:	f04f 0000 	mov.w	r0, #0
 800079c:	bd70      	pop	{r4, r5, r6, pc}
 800079e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007a2:	bf06      	itte	eq
 80007a4:	4610      	moveq	r0, r2
 80007a6:	4619      	moveq	r1, r3
 80007a8:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ac:	d019      	beq.n	80007e2 <__aeabi_dmul+0x24a>
 80007ae:	ea94 0f0c 	teq	r4, ip
 80007b2:	d102      	bne.n	80007ba <__aeabi_dmul+0x222>
 80007b4:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 80007b8:	d113      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007ba:	ea95 0f0c 	teq	r5, ip
 80007be:	d105      	bne.n	80007cc <__aeabi_dmul+0x234>
 80007c0:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 80007c4:	bf1c      	itt	ne
 80007c6:	4610      	movne	r0, r2
 80007c8:	4619      	movne	r1, r3
 80007ca:	d10a      	bne.n	80007e2 <__aeabi_dmul+0x24a>
 80007cc:	ea81 0103 	eor.w	r1, r1, r3
 80007d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007d4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007d8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007dc:	f04f 0000 	mov.w	r0, #0
 80007e0:	bd70      	pop	{r4, r5, r6, pc}
 80007e2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007e6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ea:	bd70      	pop	{r4, r5, r6, pc}

080007ec <__aeabi_ddiv>:
 80007ec:	b570      	push	{r4, r5, r6, lr}
 80007ee:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007f2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007f6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007fa:	bf1d      	ittte	ne
 80007fc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000800:	ea94 0f0c 	teqne	r4, ip
 8000804:	ea95 0f0c 	teqne	r5, ip
 8000808:	f000 f8a7 	bleq	800095a <__aeabi_ddiv+0x16e>
 800080c:	eba4 0405 	sub.w	r4, r4, r5
 8000810:	ea81 0e03 	eor.w	lr, r1, r3
 8000814:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000818:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800081c:	f000 8088 	beq.w	8000930 <__aeabi_ddiv+0x144>
 8000820:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000824:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000828:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800082c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000830:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000834:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000838:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800083c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000840:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000844:	429d      	cmp	r5, r3
 8000846:	bf08      	it	eq
 8000848:	4296      	cmpeq	r6, r2
 800084a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800084e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000852:	d202      	bcs.n	800085a <__aeabi_ddiv+0x6e>
 8000854:	085b      	lsrs	r3, r3, #1
 8000856:	ea4f 0232 	mov.w	r2, r2, rrx
 800085a:	1ab6      	subs	r6, r6, r2
 800085c:	eb65 0503 	sbc.w	r5, r5, r3
 8000860:	085b      	lsrs	r3, r3, #1
 8000862:	ea4f 0232 	mov.w	r2, r2, rrx
 8000866:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800086a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000898:	085b      	lsrs	r3, r3, #1
 800089a:	ea4f 0232 	mov.w	r2, r2, rrx
 800089e:	ebb6 0e02 	subs.w	lr, r6, r2
 80008a2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008a6:	bf22      	ittt	cs
 80008a8:	1ab6      	subcs	r6, r6, r2
 80008aa:	4675      	movcs	r5, lr
 80008ac:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 80008b0:	085b      	lsrs	r3, r3, #1
 80008b2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008b6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ba:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008be:	bf22      	ittt	cs
 80008c0:	1ab6      	subcs	r6, r6, r2
 80008c2:	4675      	movcs	r5, lr
 80008c4:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 80008c8:	ea55 0e06 	orrs.w	lr, r5, r6
 80008cc:	d018      	beq.n	8000900 <__aeabi_ddiv+0x114>
 80008ce:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008d2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008d6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008da:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008de:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008e2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008e6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ea:	d1c0      	bne.n	800086e <__aeabi_ddiv+0x82>
 80008ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008f0:	d10b      	bne.n	800090a <__aeabi_ddiv+0x11e>
 80008f2:	ea41 0100 	orr.w	r1, r1, r0
 80008f6:	f04f 0000 	mov.w	r0, #0
 80008fa:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008fe:	e7b6      	b.n	800086e <__aeabi_ddiv+0x82>
 8000900:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000904:	bf04      	itt	eq
 8000906:	4301      	orreq	r1, r0
 8000908:	2000      	moveq	r0, #0
 800090a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800090e:	bf88      	it	hi
 8000910:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000914:	f63f aeaf 	bhi.w	8000676 <__aeabi_dmul+0xde>
 8000918:	ebb5 0c03 	subs.w	ip, r5, r3
 800091c:	bf04      	itt	eq
 800091e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000922:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000926:	f150 0000 	adcs.w	r0, r0, #0
 800092a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800092e:	bd70      	pop	{r4, r5, r6, pc}
 8000930:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000934:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000938:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800093c:	bfc2      	ittt	gt
 800093e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000942:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000946:	bd70      	popgt	{r4, r5, r6, pc}
 8000948:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800094c:	f04f 0e00 	mov.w	lr, #0
 8000950:	3c01      	subs	r4, #1
 8000952:	e690      	b.n	8000676 <__aeabi_dmul+0xde>
 8000954:	ea45 0e06 	orr.w	lr, r5, r6
 8000958:	e68d      	b.n	8000676 <__aeabi_dmul+0xde>
 800095a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800095e:	ea94 0f0c 	teq	r4, ip
 8000962:	bf08      	it	eq
 8000964:	ea95 0f0c 	teqeq	r5, ip
 8000968:	f43f af3b 	beq.w	80007e2 <__aeabi_dmul+0x24a>
 800096c:	ea94 0f0c 	teq	r4, ip
 8000970:	d10a      	bne.n	8000988 <__aeabi_ddiv+0x19c>
 8000972:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000976:	f47f af34 	bne.w	80007e2 <__aeabi_dmul+0x24a>
 800097a:	ea95 0f0c 	teq	r5, ip
 800097e:	f47f af25 	bne.w	80007cc <__aeabi_dmul+0x234>
 8000982:	4610      	mov	r0, r2
 8000984:	4619      	mov	r1, r3
 8000986:	e72c      	b.n	80007e2 <__aeabi_dmul+0x24a>
 8000988:	ea95 0f0c 	teq	r5, ip
 800098c:	d106      	bne.n	800099c <__aeabi_ddiv+0x1b0>
 800098e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000992:	f43f aefd 	beq.w	8000790 <__aeabi_dmul+0x1f8>
 8000996:	4610      	mov	r0, r2
 8000998:	4619      	mov	r1, r3
 800099a:	e722      	b.n	80007e2 <__aeabi_dmul+0x24a>
 800099c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80009a0:	bf18      	it	ne
 80009a2:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80009a6:	f47f aec5 	bne.w	8000734 <__aeabi_dmul+0x19c>
 80009aa:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 80009ae:	f47f af0d 	bne.w	80007cc <__aeabi_dmul+0x234>
 80009b2:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 80009b6:	f47f aeeb 	bne.w	8000790 <__aeabi_dmul+0x1f8>
 80009ba:	e712      	b.n	80007e2 <__aeabi_dmul+0x24a>

080009bc <__gedf2>:
 80009bc:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 80009c0:	e006      	b.n	80009d0 <__cmpdf2+0x4>
 80009c2:	bf00      	nop

080009c4 <__ledf2>:
 80009c4:	f04f 0c01 	mov.w	ip, #1
 80009c8:	e002      	b.n	80009d0 <__cmpdf2+0x4>
 80009ca:	bf00      	nop

080009cc <__cmpdf2>:
 80009cc:	f04f 0c01 	mov.w	ip, #1
 80009d0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009d4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009d8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009dc:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009e0:	bf18      	it	ne
 80009e2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009e6:	d01b      	beq.n	8000a20 <__cmpdf2+0x54>
 80009e8:	b001      	add	sp, #4
 80009ea:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009ee:	bf0c      	ite	eq
 80009f0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009f4:	ea91 0f03 	teqne	r1, r3
 80009f8:	bf02      	ittt	eq
 80009fa:	ea90 0f02 	teqeq	r0, r2
 80009fe:	2000      	moveq	r0, #0
 8000a00:	4770      	bxeq	lr
 8000a02:	f110 0f00 	cmn.w	r0, #0
 8000a06:	ea91 0f03 	teq	r1, r3
 8000a0a:	bf58      	it	pl
 8000a0c:	4299      	cmppl	r1, r3
 8000a0e:	bf08      	it	eq
 8000a10:	4290      	cmpeq	r0, r2
 8000a12:	bf2c      	ite	cs
 8000a14:	17d8      	asrcs	r0, r3, #31
 8000a16:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a1a:	f040 0001 	orr.w	r0, r0, #1
 8000a1e:	4770      	bx	lr
 8000a20:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a24:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a28:	d102      	bne.n	8000a30 <__cmpdf2+0x64>
 8000a2a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a2e:	d107      	bne.n	8000a40 <__cmpdf2+0x74>
 8000a30:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a34:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a38:	d1d6      	bne.n	80009e8 <__cmpdf2+0x1c>
 8000a3a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a3e:	d0d3      	beq.n	80009e8 <__cmpdf2+0x1c>
 8000a40:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a44:	4770      	bx	lr
 8000a46:	bf00      	nop

08000a48 <__aeabi_cdrcmple>:
 8000a48:	4684      	mov	ip, r0
 8000a4a:	4610      	mov	r0, r2
 8000a4c:	4662      	mov	r2, ip
 8000a4e:	468c      	mov	ip, r1
 8000a50:	4619      	mov	r1, r3
 8000a52:	4663      	mov	r3, ip
 8000a54:	e000      	b.n	8000a58 <__aeabi_cdcmpeq>
 8000a56:	bf00      	nop

08000a58 <__aeabi_cdcmpeq>:
 8000a58:	b501      	push	{r0, lr}
 8000a5a:	f7ff ffb7 	bl	80009cc <__cmpdf2>
 8000a5e:	2800      	cmp	r0, #0
 8000a60:	bf48      	it	mi
 8000a62:	f110 0f00 	cmnmi.w	r0, #0
 8000a66:	bd01      	pop	{r0, pc}

08000a68 <__aeabi_dcmpeq>:
 8000a68:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a6c:	f7ff fff4 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a70:	bf0c      	ite	eq
 8000a72:	2001      	moveq	r0, #1
 8000a74:	2000      	movne	r0, #0
 8000a76:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a7a:	bf00      	nop

08000a7c <__aeabi_dcmplt>:
 8000a7c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a80:	f7ff ffea 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a84:	bf34      	ite	cc
 8000a86:	2001      	movcc	r0, #1
 8000a88:	2000      	movcs	r0, #0
 8000a8a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a8e:	bf00      	nop

08000a90 <__aeabi_dcmple>:
 8000a90:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a94:	f7ff ffe0 	bl	8000a58 <__aeabi_cdcmpeq>
 8000a98:	bf94      	ite	ls
 8000a9a:	2001      	movls	r0, #1
 8000a9c:	2000      	movhi	r0, #0
 8000a9e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aa2:	bf00      	nop

08000aa4 <__aeabi_dcmpge>:
 8000aa4:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000aa8:	f7ff ffce 	bl	8000a48 <__aeabi_cdrcmple>
 8000aac:	bf94      	ite	ls
 8000aae:	2001      	movls	r0, #1
 8000ab0:	2000      	movhi	r0, #0
 8000ab2:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_dcmpgt>:
 8000ab8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000abc:	f7ff ffc4 	bl	8000a48 <__aeabi_cdrcmple>
 8000ac0:	bf34      	ite	cc
 8000ac2:	2001      	movcc	r0, #1
 8000ac4:	2000      	movcs	r0, #0
 8000ac6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aca:	bf00      	nop

08000acc <__aeabi_d2iz>:
 8000acc:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ad0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ad4:	d215      	bcs.n	8000b02 <__aeabi_d2iz+0x36>
 8000ad6:	d511      	bpl.n	8000afc <__aeabi_d2iz+0x30>
 8000ad8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000adc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ae0:	d912      	bls.n	8000b08 <__aeabi_d2iz+0x3c>
 8000ae2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ae6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aea:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000aee:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000af2:	fa23 f002 	lsr.w	r0, r3, r2
 8000af6:	bf18      	it	ne
 8000af8:	4240      	negne	r0, r0
 8000afa:	4770      	bx	lr
 8000afc:	f04f 0000 	mov.w	r0, #0
 8000b00:	4770      	bx	lr
 8000b02:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b06:	d105      	bne.n	8000b14 <__aeabi_d2iz+0x48>
 8000b08:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b0c:	bf08      	it	eq
 8000b0e:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	bf00      	nop

08000b1c <__aeabi_d2uiz>:
 8000b1c:	004a      	lsls	r2, r1, #1
 8000b1e:	d211      	bcs.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b20:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b24:	d211      	bcs.n	8000b4a <__aeabi_d2uiz+0x2e>
 8000b26:	d50d      	bpl.n	8000b44 <__aeabi_d2uiz+0x28>
 8000b28:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b2c:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b30:	d40e      	bmi.n	8000b50 <__aeabi_d2uiz+0x34>
 8000b32:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b36:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b3a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b3e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b42:	4770      	bx	lr
 8000b44:	f04f 0000 	mov.w	r0, #0
 8000b48:	4770      	bx	lr
 8000b4a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b4e:	d102      	bne.n	8000b56 <__aeabi_d2uiz+0x3a>
 8000b50:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b54:	4770      	bx	lr
 8000b56:	f04f 0000 	mov.w	r0, #0
 8000b5a:	4770      	bx	lr

08000b5c <__aeabi_d2f>:
 8000b5c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b60:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b64:	bf24      	itt	cs
 8000b66:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b6a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b6e:	d90d      	bls.n	8000b8c <__aeabi_d2f+0x30>
 8000b70:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b74:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b78:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b7c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b80:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b84:	bf08      	it	eq
 8000b86:	f020 0001 	biceq.w	r0, r0, #1
 8000b8a:	4770      	bx	lr
 8000b8c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b90:	d121      	bne.n	8000bd6 <__aeabi_d2f+0x7a>
 8000b92:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b96:	bfbc      	itt	lt
 8000b98:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b9c:	4770      	bxlt	lr
 8000b9e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000ba2:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000ba6:	f1c2 0218 	rsb	r2, r2, #24
 8000baa:	f1c2 0c20 	rsb	ip, r2, #32
 8000bae:	fa10 f30c 	lsls.w	r3, r0, ip
 8000bb2:	fa20 f002 	lsr.w	r0, r0, r2
 8000bb6:	bf18      	it	ne
 8000bb8:	f040 0001 	orrne.w	r0, r0, #1
 8000bbc:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc0:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000bc4:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000bc8:	ea40 000c 	orr.w	r0, r0, ip
 8000bcc:	fa23 f302 	lsr.w	r3, r3, r2
 8000bd0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000bd4:	e7cc      	b.n	8000b70 <__aeabi_d2f+0x14>
 8000bd6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000bda:	d107      	bne.n	8000bec <__aeabi_d2f+0x90>
 8000bdc:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000be0:	bf1e      	ittt	ne
 8000be2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000be6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bea:	4770      	bxne	lr
 8000bec:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bf0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bf4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bf8:	4770      	bx	lr
 8000bfa:	bf00      	nop

08000bfc <__aeabi_uldivmod>:
 8000bfc:	b953      	cbnz	r3, 8000c14 <__aeabi_uldivmod+0x18>
 8000bfe:	b94a      	cbnz	r2, 8000c14 <__aeabi_uldivmod+0x18>
 8000c00:	2900      	cmp	r1, #0
 8000c02:	bf08      	it	eq
 8000c04:	2800      	cmpeq	r0, #0
 8000c06:	bf1c      	itt	ne
 8000c08:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000c0c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000c10:	f000 b972 	b.w	8000ef8 <__aeabi_idiv0>
 8000c14:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c18:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c1c:	f000 f806 	bl	8000c2c <__udivmoddi4>
 8000c20:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c24:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c28:	b004      	add	sp, #16
 8000c2a:	4770      	bx	lr

08000c2c <__udivmoddi4>:
 8000c2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c30:	9e08      	ldr	r6, [sp, #32]
 8000c32:	4604      	mov	r4, r0
 8000c34:	4688      	mov	r8, r1
 8000c36:	2b00      	cmp	r3, #0
 8000c38:	d14b      	bne.n	8000cd2 <__udivmoddi4+0xa6>
 8000c3a:	428a      	cmp	r2, r1
 8000c3c:	4615      	mov	r5, r2
 8000c3e:	d967      	bls.n	8000d10 <__udivmoddi4+0xe4>
 8000c40:	fab2 f282 	clz	r2, r2
 8000c44:	b14a      	cbz	r2, 8000c5a <__udivmoddi4+0x2e>
 8000c46:	f1c2 0720 	rsb	r7, r2, #32
 8000c4a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c4e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c52:	4095      	lsls	r5, r2
 8000c54:	ea47 0803 	orr.w	r8, r7, r3
 8000c58:	4094      	lsls	r4, r2
 8000c5a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c5e:	0c23      	lsrs	r3, r4, #16
 8000c60:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c64:	fa1f fc85 	uxth.w	ip, r5
 8000c68:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c6c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c70:	fb07 f10c 	mul.w	r1, r7, ip
 8000c74:	4299      	cmp	r1, r3
 8000c76:	d909      	bls.n	8000c8c <__udivmoddi4+0x60>
 8000c78:	18eb      	adds	r3, r5, r3
 8000c7a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c7e:	f080 811b 	bcs.w	8000eb8 <__udivmoddi4+0x28c>
 8000c82:	4299      	cmp	r1, r3
 8000c84:	f240 8118 	bls.w	8000eb8 <__udivmoddi4+0x28c>
 8000c88:	3f02      	subs	r7, #2
 8000c8a:	442b      	add	r3, r5
 8000c8c:	1a5b      	subs	r3, r3, r1
 8000c8e:	b2a4      	uxth	r4, r4
 8000c90:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c94:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c98:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c9c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000ca0:	45a4      	cmp	ip, r4
 8000ca2:	d909      	bls.n	8000cb8 <__udivmoddi4+0x8c>
 8000ca4:	192c      	adds	r4, r5, r4
 8000ca6:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000caa:	f080 8107 	bcs.w	8000ebc <__udivmoddi4+0x290>
 8000cae:	45a4      	cmp	ip, r4
 8000cb0:	f240 8104 	bls.w	8000ebc <__udivmoddi4+0x290>
 8000cb4:	3802      	subs	r0, #2
 8000cb6:	442c      	add	r4, r5
 8000cb8:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000cbc:	eba4 040c 	sub.w	r4, r4, ip
 8000cc0:	2700      	movs	r7, #0
 8000cc2:	b11e      	cbz	r6, 8000ccc <__udivmoddi4+0xa0>
 8000cc4:	40d4      	lsrs	r4, r2
 8000cc6:	2300      	movs	r3, #0
 8000cc8:	e9c6 4300 	strd	r4, r3, [r6]
 8000ccc:	4639      	mov	r1, r7
 8000cce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cd2:	428b      	cmp	r3, r1
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0xbe>
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	f000 80eb 	beq.w	8000eb2 <__udivmoddi4+0x286>
 8000cdc:	2700      	movs	r7, #0
 8000cde:	e9c6 0100 	strd	r0, r1, [r6]
 8000ce2:	4638      	mov	r0, r7
 8000ce4:	4639      	mov	r1, r7
 8000ce6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cea:	fab3 f783 	clz	r7, r3
 8000cee:	2f00      	cmp	r7, #0
 8000cf0:	d147      	bne.n	8000d82 <__udivmoddi4+0x156>
 8000cf2:	428b      	cmp	r3, r1
 8000cf4:	d302      	bcc.n	8000cfc <__udivmoddi4+0xd0>
 8000cf6:	4282      	cmp	r2, r0
 8000cf8:	f200 80fa 	bhi.w	8000ef0 <__udivmoddi4+0x2c4>
 8000cfc:	1a84      	subs	r4, r0, r2
 8000cfe:	eb61 0303 	sbc.w	r3, r1, r3
 8000d02:	2001      	movs	r0, #1
 8000d04:	4698      	mov	r8, r3
 8000d06:	2e00      	cmp	r6, #0
 8000d08:	d0e0      	beq.n	8000ccc <__udivmoddi4+0xa0>
 8000d0a:	e9c6 4800 	strd	r4, r8, [r6]
 8000d0e:	e7dd      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000d10:	b902      	cbnz	r2, 8000d14 <__udivmoddi4+0xe8>
 8000d12:	deff      	udf	#255	; 0xff
 8000d14:	fab2 f282 	clz	r2, r2
 8000d18:	2a00      	cmp	r2, #0
 8000d1a:	f040 808f 	bne.w	8000e3c <__udivmoddi4+0x210>
 8000d1e:	1b49      	subs	r1, r1, r5
 8000d20:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000d24:	fa1f f885 	uxth.w	r8, r5
 8000d28:	2701      	movs	r7, #1
 8000d2a:	fbb1 fcfe 	udiv	ip, r1, lr
 8000d2e:	0c23      	lsrs	r3, r4, #16
 8000d30:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d34:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d38:	fb08 f10c 	mul.w	r1, r8, ip
 8000d3c:	4299      	cmp	r1, r3
 8000d3e:	d907      	bls.n	8000d50 <__udivmoddi4+0x124>
 8000d40:	18eb      	adds	r3, r5, r3
 8000d42:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d46:	d202      	bcs.n	8000d4e <__udivmoddi4+0x122>
 8000d48:	4299      	cmp	r1, r3
 8000d4a:	f200 80cd 	bhi.w	8000ee8 <__udivmoddi4+0x2bc>
 8000d4e:	4684      	mov	ip, r0
 8000d50:	1a59      	subs	r1, r3, r1
 8000d52:	b2a3      	uxth	r3, r4
 8000d54:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d58:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d5c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d60:	fb08 f800 	mul.w	r8, r8, r0
 8000d64:	45a0      	cmp	r8, r4
 8000d66:	d907      	bls.n	8000d78 <__udivmoddi4+0x14c>
 8000d68:	192c      	adds	r4, r5, r4
 8000d6a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d6e:	d202      	bcs.n	8000d76 <__udivmoddi4+0x14a>
 8000d70:	45a0      	cmp	r8, r4
 8000d72:	f200 80b6 	bhi.w	8000ee2 <__udivmoddi4+0x2b6>
 8000d76:	4618      	mov	r0, r3
 8000d78:	eba4 0408 	sub.w	r4, r4, r8
 8000d7c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d80:	e79f      	b.n	8000cc2 <__udivmoddi4+0x96>
 8000d82:	f1c7 0c20 	rsb	ip, r7, #32
 8000d86:	40bb      	lsls	r3, r7
 8000d88:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d8c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d90:	fa01 f407 	lsl.w	r4, r1, r7
 8000d94:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d98:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d9c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000da0:	4325      	orrs	r5, r4
 8000da2:	fbb3 f9f8 	udiv	r9, r3, r8
 8000da6:	0c2c      	lsrs	r4, r5, #16
 8000da8:	fb08 3319 	mls	r3, r8, r9, r3
 8000dac:	fa1f fa8e 	uxth.w	sl, lr
 8000db0:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000db4:	fb09 f40a 	mul.w	r4, r9, sl
 8000db8:	429c      	cmp	r4, r3
 8000dba:	fa02 f207 	lsl.w	r2, r2, r7
 8000dbe:	fa00 f107 	lsl.w	r1, r0, r7
 8000dc2:	d90b      	bls.n	8000ddc <__udivmoddi4+0x1b0>
 8000dc4:	eb1e 0303 	adds.w	r3, lr, r3
 8000dc8:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000dcc:	f080 8087 	bcs.w	8000ede <__udivmoddi4+0x2b2>
 8000dd0:	429c      	cmp	r4, r3
 8000dd2:	f240 8084 	bls.w	8000ede <__udivmoddi4+0x2b2>
 8000dd6:	f1a9 0902 	sub.w	r9, r9, #2
 8000dda:	4473      	add	r3, lr
 8000ddc:	1b1b      	subs	r3, r3, r4
 8000dde:	b2ad      	uxth	r5, r5
 8000de0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000de4:	fb08 3310 	mls	r3, r8, r0, r3
 8000de8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dec:	fb00 fa0a 	mul.w	sl, r0, sl
 8000df0:	45a2      	cmp	sl, r4
 8000df2:	d908      	bls.n	8000e06 <__udivmoddi4+0x1da>
 8000df4:	eb1e 0404 	adds.w	r4, lr, r4
 8000df8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dfc:	d26b      	bcs.n	8000ed6 <__udivmoddi4+0x2aa>
 8000dfe:	45a2      	cmp	sl, r4
 8000e00:	d969      	bls.n	8000ed6 <__udivmoddi4+0x2aa>
 8000e02:	3802      	subs	r0, #2
 8000e04:	4474      	add	r4, lr
 8000e06:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000e0a:	fba0 8902 	umull	r8, r9, r0, r2
 8000e0e:	eba4 040a 	sub.w	r4, r4, sl
 8000e12:	454c      	cmp	r4, r9
 8000e14:	46c2      	mov	sl, r8
 8000e16:	464b      	mov	r3, r9
 8000e18:	d354      	bcc.n	8000ec4 <__udivmoddi4+0x298>
 8000e1a:	d051      	beq.n	8000ec0 <__udivmoddi4+0x294>
 8000e1c:	2e00      	cmp	r6, #0
 8000e1e:	d069      	beq.n	8000ef4 <__udivmoddi4+0x2c8>
 8000e20:	ebb1 050a 	subs.w	r5, r1, sl
 8000e24:	eb64 0403 	sbc.w	r4, r4, r3
 8000e28:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000e2c:	40fd      	lsrs	r5, r7
 8000e2e:	40fc      	lsrs	r4, r7
 8000e30:	ea4c 0505 	orr.w	r5, ip, r5
 8000e34:	e9c6 5400 	strd	r5, r4, [r6]
 8000e38:	2700      	movs	r7, #0
 8000e3a:	e747      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000e3c:	f1c2 0320 	rsb	r3, r2, #32
 8000e40:	fa20 f703 	lsr.w	r7, r0, r3
 8000e44:	4095      	lsls	r5, r2
 8000e46:	fa01 f002 	lsl.w	r0, r1, r2
 8000e4a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e4e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e52:	4338      	orrs	r0, r7
 8000e54:	0c01      	lsrs	r1, r0, #16
 8000e56:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e5a:	fa1f f885 	uxth.w	r8, r5
 8000e5e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e62:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e66:	fb07 f308 	mul.w	r3, r7, r8
 8000e6a:	428b      	cmp	r3, r1
 8000e6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e70:	d907      	bls.n	8000e82 <__udivmoddi4+0x256>
 8000e72:	1869      	adds	r1, r5, r1
 8000e74:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e78:	d22f      	bcs.n	8000eda <__udivmoddi4+0x2ae>
 8000e7a:	428b      	cmp	r3, r1
 8000e7c:	d92d      	bls.n	8000eda <__udivmoddi4+0x2ae>
 8000e7e:	3f02      	subs	r7, #2
 8000e80:	4429      	add	r1, r5
 8000e82:	1acb      	subs	r3, r1, r3
 8000e84:	b281      	uxth	r1, r0
 8000e86:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e8a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e8e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e92:	fb00 f308 	mul.w	r3, r0, r8
 8000e96:	428b      	cmp	r3, r1
 8000e98:	d907      	bls.n	8000eaa <__udivmoddi4+0x27e>
 8000e9a:	1869      	adds	r1, r5, r1
 8000e9c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000ea0:	d217      	bcs.n	8000ed2 <__udivmoddi4+0x2a6>
 8000ea2:	428b      	cmp	r3, r1
 8000ea4:	d915      	bls.n	8000ed2 <__udivmoddi4+0x2a6>
 8000ea6:	3802      	subs	r0, #2
 8000ea8:	4429      	add	r1, r5
 8000eaa:	1ac9      	subs	r1, r1, r3
 8000eac:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000eb0:	e73b      	b.n	8000d2a <__udivmoddi4+0xfe>
 8000eb2:	4637      	mov	r7, r6
 8000eb4:	4630      	mov	r0, r6
 8000eb6:	e709      	b.n	8000ccc <__udivmoddi4+0xa0>
 8000eb8:	4607      	mov	r7, r0
 8000eba:	e6e7      	b.n	8000c8c <__udivmoddi4+0x60>
 8000ebc:	4618      	mov	r0, r3
 8000ebe:	e6fb      	b.n	8000cb8 <__udivmoddi4+0x8c>
 8000ec0:	4541      	cmp	r1, r8
 8000ec2:	d2ab      	bcs.n	8000e1c <__udivmoddi4+0x1f0>
 8000ec4:	ebb8 0a02 	subs.w	sl, r8, r2
 8000ec8:	eb69 020e 	sbc.w	r2, r9, lr
 8000ecc:	3801      	subs	r0, #1
 8000ece:	4613      	mov	r3, r2
 8000ed0:	e7a4      	b.n	8000e1c <__udivmoddi4+0x1f0>
 8000ed2:	4660      	mov	r0, ip
 8000ed4:	e7e9      	b.n	8000eaa <__udivmoddi4+0x27e>
 8000ed6:	4618      	mov	r0, r3
 8000ed8:	e795      	b.n	8000e06 <__udivmoddi4+0x1da>
 8000eda:	4667      	mov	r7, ip
 8000edc:	e7d1      	b.n	8000e82 <__udivmoddi4+0x256>
 8000ede:	4681      	mov	r9, r0
 8000ee0:	e77c      	b.n	8000ddc <__udivmoddi4+0x1b0>
 8000ee2:	3802      	subs	r0, #2
 8000ee4:	442c      	add	r4, r5
 8000ee6:	e747      	b.n	8000d78 <__udivmoddi4+0x14c>
 8000ee8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000eec:	442b      	add	r3, r5
 8000eee:	e72f      	b.n	8000d50 <__udivmoddi4+0x124>
 8000ef0:	4638      	mov	r0, r7
 8000ef2:	e708      	b.n	8000d06 <__udivmoddi4+0xda>
 8000ef4:	4637      	mov	r7, r6
 8000ef6:	e6e9      	b.n	8000ccc <__udivmoddi4+0xa0>

08000ef8 <__aeabi_idiv0>:
 8000ef8:	4770      	bx	lr
 8000efa:	bf00      	nop

08000efc <c2d>:

/*
 * Continuous to discrete
 * Turn A and B into discrete form
 */
void c2d(float A[], float B[], uint8_t ADIM, uint8_t RDIM, float sampleTime) {
 8000efc:	b5b0      	push	{r4, r5, r7, lr}
 8000efe:	b088      	sub	sp, #32
 8000f00:	af00      	add	r7, sp, #0
 8000f02:	60f8      	str	r0, [r7, #12]
 8000f04:	60b9      	str	r1, [r7, #8]
 8000f06:	4611      	mov	r1, r2
 8000f08:	461a      	mov	r2, r3
 8000f0a:	ed87 0a00 	vstr	s0, [r7]
 8000f0e:	460b      	mov	r3, r1
 8000f10:	71fb      	strb	r3, [r7, #7]
 8000f12:	4613      	mov	r3, r2
 8000f14:	71bb      	strb	r3, [r7, #6]
 8000f16:	466b      	mov	r3, sp
 8000f18:	461d      	mov	r5, r3
	float M[(ADIM + RDIM) * (ADIM + RDIM)];
 8000f1a:	79fa      	ldrb	r2, [r7, #7]
 8000f1c:	79bb      	ldrb	r3, [r7, #6]
 8000f1e:	4413      	add	r3, r2
 8000f20:	79f9      	ldrb	r1, [r7, #7]
 8000f22:	79ba      	ldrb	r2, [r7, #6]
 8000f24:	440a      	add	r2, r1
 8000f26:	fb02 f003 	mul.w	r0, r2, r3
 8000f2a:	1e43      	subs	r3, r0, #1
 8000f2c:	617b      	str	r3, [r7, #20]
 8000f2e:	4603      	mov	r3, r0
 8000f30:	4619      	mov	r1, r3
 8000f32:	f04f 0200 	mov.w	r2, #0
 8000f36:	f04f 0300 	mov.w	r3, #0
 8000f3a:	f04f 0400 	mov.w	r4, #0
 8000f3e:	0154      	lsls	r4, r2, #5
 8000f40:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000f44:	014b      	lsls	r3, r1, #5
 8000f46:	4603      	mov	r3, r0
 8000f48:	4619      	mov	r1, r3
 8000f4a:	f04f 0200 	mov.w	r2, #0
 8000f4e:	f04f 0300 	mov.w	r3, #0
 8000f52:	f04f 0400 	mov.w	r4, #0
 8000f56:	0154      	lsls	r4, r2, #5
 8000f58:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000f5c:	014b      	lsls	r3, r1, #5
 8000f5e:	4603      	mov	r3, r0
 8000f60:	009b      	lsls	r3, r3, #2
 8000f62:	3303      	adds	r3, #3
 8000f64:	3307      	adds	r3, #7
 8000f66:	08db      	lsrs	r3, r3, #3
 8000f68:	00db      	lsls	r3, r3, #3
 8000f6a:	ebad 0d03 	sub.w	sp, sp, r3
 8000f6e:	466b      	mov	r3, sp
 8000f70:	3303      	adds	r3, #3
 8000f72:	089b      	lsrs	r3, r3, #2
 8000f74:	009b      	lsls	r3, r3, #2
 8000f76:	613b      	str	r3, [r7, #16]
	memset(M, 0, sizeof(M));
 8000f78:	693b      	ldr	r3, [r7, #16]
 8000f7a:	4602      	mov	r2, r0
 8000f7c:	0092      	lsls	r2, r2, #2
 8000f7e:	2100      	movs	r1, #0
 8000f80:	4618      	mov	r0, r3
 8000f82:	f00d f9ec 	bl	800e35e <memset>
	// Create M = [A B; zeros(RDIM, ADIM) zeros(RDIM, RDIM)]
	for (uint8_t i = 0; i < ADIM; i++) {
 8000f86:	2300      	movs	r3, #0
 8000f88:	76fb      	strb	r3, [r7, #27]
 8000f8a:	e050      	b.n	800102e <c2d+0x132>
		// For A row
		for (uint8_t j = 0; j < ADIM; j++) {
 8000f8c:	2300      	movs	r3, #0
 8000f8e:	773b      	strb	r3, [r7, #28]
 8000f90:	e01e      	b.n	8000fd0 <c2d+0xd4>
			M[i * (ADIM + RDIM) + j] = A[i * ADIM + j] * sampleTime;
 8000f92:	7efb      	ldrb	r3, [r7, #27]
 8000f94:	79fa      	ldrb	r2, [r7, #7]
 8000f96:	fb02 f203 	mul.w	r2, r2, r3
 8000f9a:	7f3b      	ldrb	r3, [r7, #28]
 8000f9c:	4413      	add	r3, r2
 8000f9e:	009b      	lsls	r3, r3, #2
 8000fa0:	68fa      	ldr	r2, [r7, #12]
 8000fa2:	4413      	add	r3, r2
 8000fa4:	ed93 7a00 	vldr	s14, [r3]
 8000fa8:	7efb      	ldrb	r3, [r7, #27]
 8000faa:	79f9      	ldrb	r1, [r7, #7]
 8000fac:	79ba      	ldrb	r2, [r7, #6]
 8000fae:	440a      	add	r2, r1
 8000fb0:	fb02 f203 	mul.w	r2, r2, r3
 8000fb4:	7f3b      	ldrb	r3, [r7, #28]
 8000fb6:	4413      	add	r3, r2
 8000fb8:	edd7 7a00 	vldr	s15, [r7]
 8000fbc:	ee67 7a27 	vmul.f32	s15, s14, s15
 8000fc0:	693a      	ldr	r2, [r7, #16]
 8000fc2:	009b      	lsls	r3, r3, #2
 8000fc4:	4413      	add	r3, r2
 8000fc6:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t j = 0; j < ADIM; j++) {
 8000fca:	7f3b      	ldrb	r3, [r7, #28]
 8000fcc:	3301      	adds	r3, #1
 8000fce:	773b      	strb	r3, [r7, #28]
 8000fd0:	7f3a      	ldrb	r2, [r7, #28]
 8000fd2:	79fb      	ldrb	r3, [r7, #7]
 8000fd4:	429a      	cmp	r2, r3
 8000fd6:	d3dc      	bcc.n	8000f92 <c2d+0x96>
		}
		// For B row
		for (uint8_t j = 0; j < RDIM; j++) {
 8000fd8:	2300      	movs	r3, #0
 8000fda:	777b      	strb	r3, [r7, #29]
 8000fdc:	e020      	b.n	8001020 <c2d+0x124>
			M[i * (ADIM + RDIM) + j + ADIM] = B[i * RDIM + j] * sampleTime;
 8000fde:	7efb      	ldrb	r3, [r7, #27]
 8000fe0:	79ba      	ldrb	r2, [r7, #6]
 8000fe2:	fb02 f203 	mul.w	r2, r2, r3
 8000fe6:	7f7b      	ldrb	r3, [r7, #29]
 8000fe8:	4413      	add	r3, r2
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	68ba      	ldr	r2, [r7, #8]
 8000fee:	4413      	add	r3, r2
 8000ff0:	ed93 7a00 	vldr	s14, [r3]
 8000ff4:	7efb      	ldrb	r3, [r7, #27]
 8000ff6:	79f9      	ldrb	r1, [r7, #7]
 8000ff8:	79ba      	ldrb	r2, [r7, #6]
 8000ffa:	440a      	add	r2, r1
 8000ffc:	fb02 f203 	mul.w	r2, r2, r3
 8001000:	7f7b      	ldrb	r3, [r7, #29]
 8001002:	441a      	add	r2, r3
 8001004:	79fb      	ldrb	r3, [r7, #7]
 8001006:	4413      	add	r3, r2
 8001008:	edd7 7a00 	vldr	s15, [r7]
 800100c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001010:	693a      	ldr	r2, [r7, #16]
 8001012:	009b      	lsls	r3, r3, #2
 8001014:	4413      	add	r3, r2
 8001016:	edc3 7a00 	vstr	s15, [r3]
		for (uint8_t j = 0; j < RDIM; j++) {
 800101a:	7f7b      	ldrb	r3, [r7, #29]
 800101c:	3301      	adds	r3, #1
 800101e:	777b      	strb	r3, [r7, #29]
 8001020:	7f7a      	ldrb	r2, [r7, #29]
 8001022:	79bb      	ldrb	r3, [r7, #6]
 8001024:	429a      	cmp	r2, r3
 8001026:	d3da      	bcc.n	8000fde <c2d+0xe2>
	for (uint8_t i = 0; i < ADIM; i++) {
 8001028:	7efb      	ldrb	r3, [r7, #27]
 800102a:	3301      	adds	r3, #1
 800102c:	76fb      	strb	r3, [r7, #27]
 800102e:	7efa      	ldrb	r2, [r7, #27]
 8001030:	79fb      	ldrb	r3, [r7, #7]
 8001032:	429a      	cmp	r2, r3
 8001034:	d3aa      	bcc.n	8000f8c <c2d+0x90>
		}
	}
	expm(M, ADIM + RDIM);
 8001036:	6938      	ldr	r0, [r7, #16]
 8001038:	79fa      	ldrb	r2, [r7, #7]
 800103a:	79bb      	ldrb	r3, [r7, #6]
 800103c:	4413      	add	r3, r2
 800103e:	4619      	mov	r1, r3
 8001040:	f000 fde9 	bl	8001c16 <expm>
	for (uint8_t i = 0; i < ADIM; i++) {
 8001044:	2300      	movs	r3, #0
 8001046:	77bb      	strb	r3, [r7, #30]
 8001048:	e044      	b.n	80010d4 <c2d+0x1d8>
		// For A row
		for (uint8_t j = 0; j < ADIM; j++) {
 800104a:	2300      	movs	r3, #0
 800104c:	77fb      	strb	r3, [r7, #31]
 800104e:	e018      	b.n	8001082 <c2d+0x186>
			A[i * ADIM + j] = M[i * (ADIM + RDIM) + j];
 8001050:	7fbb      	ldrb	r3, [r7, #30]
 8001052:	79f9      	ldrb	r1, [r7, #7]
 8001054:	79ba      	ldrb	r2, [r7, #6]
 8001056:	440a      	add	r2, r1
 8001058:	fb02 f203 	mul.w	r2, r2, r3
 800105c:	7ffb      	ldrb	r3, [r7, #31]
 800105e:	441a      	add	r2, r3
 8001060:	7fbb      	ldrb	r3, [r7, #30]
 8001062:	79f9      	ldrb	r1, [r7, #7]
 8001064:	fb01 f103 	mul.w	r1, r1, r3
 8001068:	7ffb      	ldrb	r3, [r7, #31]
 800106a:	440b      	add	r3, r1
 800106c:	009b      	lsls	r3, r3, #2
 800106e:	68f9      	ldr	r1, [r7, #12]
 8001070:	440b      	add	r3, r1
 8001072:	6939      	ldr	r1, [r7, #16]
 8001074:	0092      	lsls	r2, r2, #2
 8001076:	440a      	add	r2, r1
 8001078:	6812      	ldr	r2, [r2, #0]
 800107a:	601a      	str	r2, [r3, #0]
		for (uint8_t j = 0; j < ADIM; j++) {
 800107c:	7ffb      	ldrb	r3, [r7, #31]
 800107e:	3301      	adds	r3, #1
 8001080:	77fb      	strb	r3, [r7, #31]
 8001082:	7ffa      	ldrb	r2, [r7, #31]
 8001084:	79fb      	ldrb	r3, [r7, #7]
 8001086:	429a      	cmp	r2, r3
 8001088:	d3e2      	bcc.n	8001050 <c2d+0x154>
		}
		// For B row
		for (uint8_t j = 0; j < RDIM; j++) {
 800108a:	2300      	movs	r3, #0
 800108c:	76bb      	strb	r3, [r7, #26]
 800108e:	e01a      	b.n	80010c6 <c2d+0x1ca>
			B[i * RDIM + j] = M[i * (ADIM + RDIM) + j + ADIM];
 8001090:	7fbb      	ldrb	r3, [r7, #30]
 8001092:	79f9      	ldrb	r1, [r7, #7]
 8001094:	79ba      	ldrb	r2, [r7, #6]
 8001096:	440a      	add	r2, r1
 8001098:	fb02 f203 	mul.w	r2, r2, r3
 800109c:	7ebb      	ldrb	r3, [r7, #26]
 800109e:	441a      	add	r2, r3
 80010a0:	79fb      	ldrb	r3, [r7, #7]
 80010a2:	441a      	add	r2, r3
 80010a4:	7fbb      	ldrb	r3, [r7, #30]
 80010a6:	79b9      	ldrb	r1, [r7, #6]
 80010a8:	fb01 f103 	mul.w	r1, r1, r3
 80010ac:	7ebb      	ldrb	r3, [r7, #26]
 80010ae:	440b      	add	r3, r1
 80010b0:	009b      	lsls	r3, r3, #2
 80010b2:	68b9      	ldr	r1, [r7, #8]
 80010b4:	440b      	add	r3, r1
 80010b6:	6939      	ldr	r1, [r7, #16]
 80010b8:	0092      	lsls	r2, r2, #2
 80010ba:	440a      	add	r2, r1
 80010bc:	6812      	ldr	r2, [r2, #0]
 80010be:	601a      	str	r2, [r3, #0]
		for (uint8_t j = 0; j < RDIM; j++) {
 80010c0:	7ebb      	ldrb	r3, [r7, #26]
 80010c2:	3301      	adds	r3, #1
 80010c4:	76bb      	strb	r3, [r7, #26]
 80010c6:	7eba      	ldrb	r2, [r7, #26]
 80010c8:	79bb      	ldrb	r3, [r7, #6]
 80010ca:	429a      	cmp	r2, r3
 80010cc:	d3e0      	bcc.n	8001090 <c2d+0x194>
	for (uint8_t i = 0; i < ADIM; i++) {
 80010ce:	7fbb      	ldrb	r3, [r7, #30]
 80010d0:	3301      	adds	r3, #1
 80010d2:	77bb      	strb	r3, [r7, #30]
 80010d4:	7fba      	ldrb	r2, [r7, #30]
 80010d6:	79fb      	ldrb	r3, [r7, #7]
 80010d8:	429a      	cmp	r2, r3
 80010da:	d3b6      	bcc.n	800104a <c2d+0x14e>
 80010dc:	46ad      	mov	sp, r5
		}
	}
}
 80010de:	bf00      	nop
 80010e0:	3720      	adds	r7, #32
 80010e2:	46bd      	mov	sp, r7
 80010e4:	bdb0      	pop	{r4, r5, r7, pc}

080010e6 <mpc>:

/*
 * Model predictive control
 * Hint: Look up lmpc.m in Matavecontrol
 */
void mpc(float* A, float* B, float* C, float* x, float* u, float* r, uint8_t ADIM, uint8_t YDIM, uint8_t RDIM, uint8_t HORIZON, uint8_t ITERATION_LIMIT, bool has_integration){
 80010e6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80010ea:	b0a4      	sub	sp, #144	; 0x90
 80010ec:	af06      	add	r7, sp, #24
 80010ee:	60f8      	str	r0, [r7, #12]
 80010f0:	60b9      	str	r1, [r7, #8]
 80010f2:	607a      	str	r2, [r7, #4]
 80010f4:	603b      	str	r3, [r7, #0]
 80010f6:	466b      	mov	r3, sp
 80010f8:	4698      	mov	r8, r3
	// Create the extended observability matrix

	float PHI[HORIZON*YDIM*ADIM];
 80010fa:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80010fe:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 8001102:	fb02 f303 	mul.w	r3, r2, r3
 8001106:	f897 20a0 	ldrb.w	r2, [r7, #160]	; 0xa0
 800110a:	fb02 f003 	mul.w	r0, r2, r3
 800110e:	1e43      	subs	r3, r0, #1
 8001110:	65fb      	str	r3, [r7, #92]	; 0x5c
 8001112:	4603      	mov	r3, r0
 8001114:	4619      	mov	r1, r3
 8001116:	f04f 0200 	mov.w	r2, #0
 800111a:	f04f 0300 	mov.w	r3, #0
 800111e:	f04f 0400 	mov.w	r4, #0
 8001122:	0154      	lsls	r4, r2, #5
 8001124:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001128:	014b      	lsls	r3, r1, #5
 800112a:	4603      	mov	r3, r0
 800112c:	4619      	mov	r1, r3
 800112e:	f04f 0200 	mov.w	r2, #0
 8001132:	f04f 0300 	mov.w	r3, #0
 8001136:	f04f 0400 	mov.w	r4, #0
 800113a:	0154      	lsls	r4, r2, #5
 800113c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001140:	014b      	lsls	r3, r1, #5
 8001142:	4603      	mov	r3, r0
 8001144:	009b      	lsls	r3, r3, #2
 8001146:	3303      	adds	r3, #3
 8001148:	3307      	adds	r3, #7
 800114a:	08db      	lsrs	r3, r3, #3
 800114c:	00db      	lsls	r3, r3, #3
 800114e:	ebad 0d03 	sub.w	sp, sp, r3
 8001152:	ab06      	add	r3, sp, #24
 8001154:	3303      	adds	r3, #3
 8001156:	089b      	lsrs	r3, r3, #2
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	663b      	str	r3, [r7, #96]	; 0x60
	//memset(PHI, 0, HORIZON*YDIM*ADIM*sizeof(float));
	obsv(PHI, A, C, ADIM, YDIM, RDIM, HORIZON);
 800115c:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800115e:	f897 20a0 	ldrb.w	r2, [r7, #160]	; 0xa0
 8001162:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001166:	9302      	str	r3, [sp, #8]
 8001168:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 800116c:	9301      	str	r3, [sp, #4]
 800116e:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8001172:	9300      	str	r3, [sp, #0]
 8001174:	4613      	mov	r3, r2
 8001176:	687a      	ldr	r2, [r7, #4]
 8001178:	68f9      	ldr	r1, [r7, #12]
 800117a:	f000 fb33 	bl	80017e4 <obsv>

	//print(PHI, HORIZON*YDIM, ADIM);

	// Create the lower triangular toeplitz matrix
	float GAMMA[HORIZON*YDIM*HORIZON*RDIM];
 800117e:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001182:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 8001186:	fb02 f303 	mul.w	r3, r2, r3
 800118a:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 800118e:	fb02 f303 	mul.w	r3, r2, r3
 8001192:	f897 20a8 	ldrb.w	r2, [r7, #168]	; 0xa8
 8001196:	fb02 f003 	mul.w	r0, r2, r3
 800119a:	1e43      	subs	r3, r0, #1
 800119c:	667b      	str	r3, [r7, #100]	; 0x64
 800119e:	4603      	mov	r3, r0
 80011a0:	4619      	mov	r1, r3
 80011a2:	f04f 0200 	mov.w	r2, #0
 80011a6:	f04f 0300 	mov.w	r3, #0
 80011aa:	f04f 0400 	mov.w	r4, #0
 80011ae:	0154      	lsls	r4, r2, #5
 80011b0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011b4:	014b      	lsls	r3, r1, #5
 80011b6:	4603      	mov	r3, r0
 80011b8:	4619      	mov	r1, r3
 80011ba:	f04f 0200 	mov.w	r2, #0
 80011be:	f04f 0300 	mov.w	r3, #0
 80011c2:	f04f 0400 	mov.w	r4, #0
 80011c6:	0154      	lsls	r4, r2, #5
 80011c8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80011cc:	014b      	lsls	r3, r1, #5
 80011ce:	4603      	mov	r3, r0
 80011d0:	009b      	lsls	r3, r3, #2
 80011d2:	3303      	adds	r3, #3
 80011d4:	3307      	adds	r3, #7
 80011d6:	08db      	lsrs	r3, r3, #3
 80011d8:	00db      	lsls	r3, r3, #3
 80011da:	ebad 0d03 	sub.w	sp, sp, r3
 80011de:	ab06      	add	r3, sp, #24
 80011e0:	3303      	adds	r3, #3
 80011e2:	089b      	lsrs	r3, r3, #2
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	66bb      	str	r3, [r7, #104]	; 0x68
	memset(GAMMA, 0, HORIZON*YDIM*HORIZON*RDIM*sizeof(float)); // We need memset here
 80011e8:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 80011ea:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80011ee:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 80011f2:	fb02 f303 	mul.w	r3, r2, r3
 80011f6:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 80011fa:	fb02 f303 	mul.w	r3, r2, r3
 80011fe:	f897 20a8 	ldrb.w	r2, [r7, #168]	; 0xa8
 8001202:	fb02 f303 	mul.w	r3, r2, r3
 8001206:	009b      	lsls	r3, r3, #2
 8001208:	461a      	mov	r2, r3
 800120a:	2100      	movs	r1, #0
 800120c:	f00d f8a7 	bl	800e35e <memset>
	cab(GAMMA, PHI, A, B, C, ADIM, YDIM, RDIM, HORIZON);
 8001210:	6eb8      	ldr	r0, [r7, #104]	; 0x68
 8001212:	6e39      	ldr	r1, [r7, #96]	; 0x60
 8001214:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001218:	9304      	str	r3, [sp, #16]
 800121a:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 800121e:	9303      	str	r3, [sp, #12]
 8001220:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 8001224:	9302      	str	r3, [sp, #8]
 8001226:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 800122a:	9301      	str	r3, [sp, #4]
 800122c:	687b      	ldr	r3, [r7, #4]
 800122e:	9300      	str	r3, [sp, #0]
 8001230:	68bb      	ldr	r3, [r7, #8]
 8001232:	68fa      	ldr	r2, [r7, #12]
 8001234:	f000 fbcb 	bl	80019ce <cab>

	//print(GAMMA, HORIZON*YDIM, HORIZON*RDIM);

	// Find the input value from GAMMA and PHI
	// R_vec = R*r
	float R_vec[HORIZON * YDIM];
 8001238:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 800123c:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 8001240:	fb02 f003 	mul.w	r0, r2, r3
 8001244:	1e43      	subs	r3, r0, #1
 8001246:	66fb      	str	r3, [r7, #108]	; 0x6c
 8001248:	4603      	mov	r3, r0
 800124a:	4619      	mov	r1, r3
 800124c:	f04f 0200 	mov.w	r2, #0
 8001250:	f04f 0300 	mov.w	r3, #0
 8001254:	f04f 0400 	mov.w	r4, #0
 8001258:	0154      	lsls	r4, r2, #5
 800125a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800125e:	014b      	lsls	r3, r1, #5
 8001260:	4603      	mov	r3, r0
 8001262:	4619      	mov	r1, r3
 8001264:	f04f 0200 	mov.w	r2, #0
 8001268:	f04f 0300 	mov.w	r3, #0
 800126c:	f04f 0400 	mov.w	r4, #0
 8001270:	0154      	lsls	r4, r2, #5
 8001272:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001276:	014b      	lsls	r3, r1, #5
 8001278:	4603      	mov	r3, r0
 800127a:	009b      	lsls	r3, r3, #2
 800127c:	3303      	adds	r3, #3
 800127e:	3307      	adds	r3, #7
 8001280:	08db      	lsrs	r3, r3, #3
 8001282:	00db      	lsls	r3, r3, #3
 8001284:	ebad 0d03 	sub.w	sp, sp, r3
 8001288:	ab06      	add	r3, sp, #24
 800128a:	3303      	adds	r3, #3
 800128c:	089b      	lsrs	r3, r3, #2
 800128e:	009b      	lsls	r3, r3, #2
 8001290:	673b      	str	r3, [r7, #112]	; 0x70
	//memset(R_vec, 0, HORIZON * YDIM * sizeof(float));
	for (int i = 0; i < HORIZON * YDIM; i++) {
 8001292:	2300      	movs	r3, #0
 8001294:	677b      	str	r3, [r7, #116]	; 0x74
 8001296:	e020      	b.n	80012da <mpc+0x1f4>
		for (int j = 0; j < YDIM; j++) {
 8001298:	2300      	movs	r3, #0
 800129a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800129c:	e00f      	b.n	80012be <mpc+0x1d8>
			*(R_vec + i + j) = *(r + j);
 800129e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012a0:	009b      	lsls	r3, r3, #2
 80012a2:	f8d7 209c 	ldr.w	r2, [r7, #156]	; 0x9c
 80012a6:	441a      	add	r2, r3
 80012a8:	6f39      	ldr	r1, [r7, #112]	; 0x70
 80012aa:	6f78      	ldr	r0, [r7, #116]	; 0x74
 80012ac:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012ae:	4403      	add	r3, r0
 80012b0:	009b      	lsls	r3, r3, #2
 80012b2:	440b      	add	r3, r1
 80012b4:	6812      	ldr	r2, [r2, #0]
 80012b6:	601a      	str	r2, [r3, #0]
		for (int j = 0; j < YDIM; j++) {
 80012b8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80012ba:	3301      	adds	r3, #1
 80012bc:	64fb      	str	r3, [r7, #76]	; 0x4c
 80012be:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 80012c2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80012c4:	429a      	cmp	r2, r3
 80012c6:	dbea      	blt.n	800129e <mpc+0x1b8>
		}
		i += YDIM - 1;
 80012c8:	f897 30a4 	ldrb.w	r3, [r7, #164]	; 0xa4
 80012cc:	3b01      	subs	r3, #1
 80012ce:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80012d0:	4413      	add	r3, r2
 80012d2:	677b      	str	r3, [r7, #116]	; 0x74
	for (int i = 0; i < HORIZON * YDIM; i++) {
 80012d4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80012d6:	3301      	adds	r3, #1
 80012d8:	677b      	str	r3, [r7, #116]	; 0x74
 80012da:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80012de:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 80012e2:	fb02 f303 	mul.w	r3, r2, r3
 80012e6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 80012e8:	429a      	cmp	r2, r3
 80012ea:	dbd5      	blt.n	8001298 <mpc+0x1b2>
	}

	// PHI_vec = PHI*x
	float PHI_vec[HORIZON * YDIM];
 80012ec:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80012f0:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 80012f4:	fb02 f003 	mul.w	r0, r2, r3
 80012f8:	466b      	mov	r3, sp
 80012fa:	4699      	mov	r9, r3
 80012fc:	1e43      	subs	r3, r0, #1
 80012fe:	64bb      	str	r3, [r7, #72]	; 0x48
 8001300:	4603      	mov	r3, r0
 8001302:	4619      	mov	r1, r3
 8001304:	f04f 0200 	mov.w	r2, #0
 8001308:	f04f 0300 	mov.w	r3, #0
 800130c:	f04f 0400 	mov.w	r4, #0
 8001310:	0154      	lsls	r4, r2, #5
 8001312:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001316:	014b      	lsls	r3, r1, #5
 8001318:	4603      	mov	r3, r0
 800131a:	4619      	mov	r1, r3
 800131c:	f04f 0200 	mov.w	r2, #0
 8001320:	f04f 0300 	mov.w	r3, #0
 8001324:	f04f 0400 	mov.w	r4, #0
 8001328:	0154      	lsls	r4, r2, #5
 800132a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800132e:	014b      	lsls	r3, r1, #5
 8001330:	4603      	mov	r3, r0
 8001332:	009b      	lsls	r3, r3, #2
 8001334:	3303      	adds	r3, #3
 8001336:	3307      	adds	r3, #7
 8001338:	08db      	lsrs	r3, r3, #3
 800133a:	00db      	lsls	r3, r3, #3
 800133c:	ebad 0d03 	sub.w	sp, sp, r3
 8001340:	ab06      	add	r3, sp, #24
 8001342:	3303      	adds	r3, #3
 8001344:	089b      	lsrs	r3, r3, #2
 8001346:	009b      	lsls	r3, r3, #2
 8001348:	647b      	str	r3, [r7, #68]	; 0x44
	//memset(PHI_vec, 0, HORIZON * YDIM * sizeof(float));
	mul(PHI, x, PHI_vec, HORIZON * YDIM, ADIM, 1);
 800134a:	6e38      	ldr	r0, [r7, #96]	; 0x60
 800134c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800134e:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001352:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 8001356:	fb02 f403 	mul.w	r4, r2, r3
 800135a:	f897 30a0 	ldrb.w	r3, [r7, #160]	; 0xa0
 800135e:	2201      	movs	r2, #1
 8001360:	9201      	str	r2, [sp, #4]
 8001362:	9300      	str	r3, [sp, #0]
 8001364:	4623      	mov	r3, r4
 8001366:	460a      	mov	r2, r1
 8001368:	6839      	ldr	r1, [r7, #0]
 800136a:	f000 fda3 	bl	8001eb4 <mul>

	// R_PHI_vec = R_vec - PHI_vec
	float R_PHI_vec[HORIZON * YDIM];
 800136e:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001372:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 8001376:	fb02 f003 	mul.w	r0, r2, r3
 800137a:	1e43      	subs	r3, r0, #1
 800137c:	643b      	str	r3, [r7, #64]	; 0x40
 800137e:	4603      	mov	r3, r0
 8001380:	4619      	mov	r1, r3
 8001382:	f04f 0200 	mov.w	r2, #0
 8001386:	f04f 0300 	mov.w	r3, #0
 800138a:	f04f 0400 	mov.w	r4, #0
 800138e:	0154      	lsls	r4, r2, #5
 8001390:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001394:	014b      	lsls	r3, r1, #5
 8001396:	4603      	mov	r3, r0
 8001398:	4619      	mov	r1, r3
 800139a:	f04f 0200 	mov.w	r2, #0
 800139e:	f04f 0300 	mov.w	r3, #0
 80013a2:	f04f 0400 	mov.w	r4, #0
 80013a6:	0154      	lsls	r4, r2, #5
 80013a8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80013ac:	014b      	lsls	r3, r1, #5
 80013ae:	4603      	mov	r3, r0
 80013b0:	009b      	lsls	r3, r3, #2
 80013b2:	3303      	adds	r3, #3
 80013b4:	3307      	adds	r3, #7
 80013b6:	08db      	lsrs	r3, r3, #3
 80013b8:	00db      	lsls	r3, r3, #3
 80013ba:	ebad 0d03 	sub.w	sp, sp, r3
 80013be:	ab06      	add	r3, sp, #24
 80013c0:	3303      	adds	r3, #3
 80013c2:	089b      	lsrs	r3, r3, #2
 80013c4:	009b      	lsls	r3, r3, #2
 80013c6:	63fb      	str	r3, [r7, #60]	; 0x3c
	//memset(R_PHI_vec, 0, HORIZON * YDIM*sizeof(float));
	for(int i = 0; i < HORIZON * YDIM; i++){
 80013c8:	2300      	movs	r3, #0
 80013ca:	653b      	str	r3, [r7, #80]	; 0x50
 80013cc:	e016      	b.n	80013fc <mpc+0x316>
		*(R_PHI_vec + i) = *(R_vec + i) - *(PHI_vec + i);
 80013ce:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 80013d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013d2:	009b      	lsls	r3, r3, #2
 80013d4:	4413      	add	r3, r2
 80013d6:	ed93 7a00 	vldr	s14, [r3]
 80013da:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80013dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013de:	009b      	lsls	r3, r3, #2
 80013e0:	4413      	add	r3, r2
 80013e2:	edd3 7a00 	vldr	s15, [r3]
 80013e6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80013e8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013ea:	009b      	lsls	r3, r3, #2
 80013ec:	4413      	add	r3, r2
 80013ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80013f2:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < HORIZON * YDIM; i++){
 80013f6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80013f8:	3301      	adds	r3, #1
 80013fa:	653b      	str	r3, [r7, #80]	; 0x50
 80013fc:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001400:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 8001404:	fb02 f303 	mul.w	r3, r2, r3
 8001408:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800140a:	429a      	cmp	r2, r3
 800140c:	dbdf      	blt.n	80013ce <mpc+0x2e8>
	}

	// Transpose gamma
	float GAMMAT[HORIZON*YDIM*HORIZON*RDIM];
 800140e:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001412:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 8001416:	fb02 f303 	mul.w	r3, r2, r3
 800141a:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 800141e:	fb02 f303 	mul.w	r3, r2, r3
 8001422:	f897 20a8 	ldrb.w	r2, [r7, #168]	; 0xa8
 8001426:	fb02 f003 	mul.w	r0, r2, r3
 800142a:	466b      	mov	r3, sp
 800142c:	469a      	mov	sl, r3
 800142e:	1e43      	subs	r3, r0, #1
 8001430:	63bb      	str	r3, [r7, #56]	; 0x38
 8001432:	4603      	mov	r3, r0
 8001434:	4619      	mov	r1, r3
 8001436:	f04f 0200 	mov.w	r2, #0
 800143a:	f04f 0300 	mov.w	r3, #0
 800143e:	f04f 0400 	mov.w	r4, #0
 8001442:	0154      	lsls	r4, r2, #5
 8001444:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001448:	014b      	lsls	r3, r1, #5
 800144a:	4603      	mov	r3, r0
 800144c:	4619      	mov	r1, r3
 800144e:	f04f 0200 	mov.w	r2, #0
 8001452:	f04f 0300 	mov.w	r3, #0
 8001456:	f04f 0400 	mov.w	r4, #0
 800145a:	0154      	lsls	r4, r2, #5
 800145c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001460:	014b      	lsls	r3, r1, #5
 8001462:	4603      	mov	r3, r0
 8001464:	009b      	lsls	r3, r3, #2
 8001466:	3303      	adds	r3, #3
 8001468:	3307      	adds	r3, #7
 800146a:	08db      	lsrs	r3, r3, #3
 800146c:	00db      	lsls	r3, r3, #3
 800146e:	ebad 0d03 	sub.w	sp, sp, r3
 8001472:	ab06      	add	r3, sp, #24
 8001474:	3303      	adds	r3, #3
 8001476:	089b      	lsrs	r3, r3, #2
 8001478:	009b      	lsls	r3, r3, #2
 800147a:	637b      	str	r3, [r7, #52]	; 0x34
	memcpy(GAMMAT, GAMMA, HORIZON*YDIM*HORIZON*RDIM*sizeof(float)); // GAMMA -> GAMMAT
 800147c:	6b78      	ldr	r0, [r7, #52]	; 0x34
 800147e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8001480:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001484:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 8001488:	fb02 f303 	mul.w	r3, r2, r3
 800148c:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 8001490:	fb02 f303 	mul.w	r3, r2, r3
 8001494:	f897 20a8 	ldrb.w	r2, [r7, #168]	; 0xa8
 8001498:	fb02 f303 	mul.w	r3, r2, r3
 800149c:	009b      	lsls	r3, r3, #2
 800149e:	461a      	mov	r2, r3
 80014a0:	f00c ff52 	bl	800e348 <memcpy>
	tran(GAMMAT, HORIZON*YDIM, HORIZON*RDIM);
 80014a4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80014a6:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80014aa:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 80014ae:	fb02 f103 	mul.w	r1, r2, r3
 80014b2:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80014b6:	f897 20a8 	ldrb.w	r2, [r7, #168]	; 0xa8
 80014ba:	fb02 f303 	mul.w	r3, r2, r3
 80014be:	461a      	mov	r2, r3
 80014c0:	f000 fdb5 	bl	800202e <tran>

	// b = GAMMAT*R_PHI_vec
	float b[HORIZON * YDIM];
 80014c4:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80014c8:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 80014cc:	fb02 f003 	mul.w	r0, r2, r3
 80014d0:	1e43      	subs	r3, r0, #1
 80014d2:	633b      	str	r3, [r7, #48]	; 0x30
 80014d4:	4603      	mov	r3, r0
 80014d6:	4619      	mov	r1, r3
 80014d8:	f04f 0200 	mov.w	r2, #0
 80014dc:	f04f 0300 	mov.w	r3, #0
 80014e0:	f04f 0400 	mov.w	r4, #0
 80014e4:	0154      	lsls	r4, r2, #5
 80014e6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80014ea:	014b      	lsls	r3, r1, #5
 80014ec:	4603      	mov	r3, r0
 80014ee:	4619      	mov	r1, r3
 80014f0:	f04f 0200 	mov.w	r2, #0
 80014f4:	f04f 0300 	mov.w	r3, #0
 80014f8:	f04f 0400 	mov.w	r4, #0
 80014fc:	0154      	lsls	r4, r2, #5
 80014fe:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001502:	014b      	lsls	r3, r1, #5
 8001504:	4603      	mov	r3, r0
 8001506:	009b      	lsls	r3, r3, #2
 8001508:	3303      	adds	r3, #3
 800150a:	3307      	adds	r3, #7
 800150c:	08db      	lsrs	r3, r3, #3
 800150e:	00db      	lsls	r3, r3, #3
 8001510:	ebad 0d03 	sub.w	sp, sp, r3
 8001514:	ab06      	add	r3, sp, #24
 8001516:	3303      	adds	r3, #3
 8001518:	089b      	lsrs	r3, r3, #2
 800151a:	009b      	lsls	r3, r3, #2
 800151c:	62fb      	str	r3, [r7, #44]	; 0x2c
	//memset(b, 0, HORIZON * YDIM * sizeof(float));
	mul(GAMMAT, R_PHI_vec, b, HORIZON * RDIM, HORIZON*YDIM, 1);
 800151e:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001520:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8001522:	6afc      	ldr	r4, [r7, #44]	; 0x2c
 8001524:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001528:	f897 20a8 	ldrb.w	r2, [r7, #168]	; 0xa8
 800152c:	fb02 f503 	mul.w	r5, r2, r3
 8001530:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001534:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 8001538:	fb02 f303 	mul.w	r3, r2, r3
 800153c:	2201      	movs	r2, #1
 800153e:	9201      	str	r2, [sp, #4]
 8001540:	9300      	str	r3, [sp, #0]
 8001542:	462b      	mov	r3, r5
 8001544:	4622      	mov	r2, r4
 8001546:	f000 fcb5 	bl	8001eb4 <mul>

	// GAMMATGAMMA = GAMMAT*GAMMA = A
	float GAMMATGAMMA[HORIZON * RDIM*HORIZON * RDIM];
 800154a:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 800154e:	f897 20a8 	ldrb.w	r2, [r7, #168]	; 0xa8
 8001552:	fb02 f303 	mul.w	r3, r2, r3
 8001556:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 800155a:	fb02 f303 	mul.w	r3, r2, r3
 800155e:	f897 20a8 	ldrb.w	r2, [r7, #168]	; 0xa8
 8001562:	fb02 f003 	mul.w	r0, r2, r3
 8001566:	1e43      	subs	r3, r0, #1
 8001568:	62bb      	str	r3, [r7, #40]	; 0x28
 800156a:	4603      	mov	r3, r0
 800156c:	4619      	mov	r1, r3
 800156e:	f04f 0200 	mov.w	r2, #0
 8001572:	f04f 0300 	mov.w	r3, #0
 8001576:	f04f 0400 	mov.w	r4, #0
 800157a:	0154      	lsls	r4, r2, #5
 800157c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001580:	014b      	lsls	r3, r1, #5
 8001582:	4603      	mov	r3, r0
 8001584:	4619      	mov	r1, r3
 8001586:	f04f 0200 	mov.w	r2, #0
 800158a:	f04f 0300 	mov.w	r3, #0
 800158e:	f04f 0400 	mov.w	r4, #0
 8001592:	0154      	lsls	r4, r2, #5
 8001594:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001598:	014b      	lsls	r3, r1, #5
 800159a:	4603      	mov	r3, r0
 800159c:	009b      	lsls	r3, r3, #2
 800159e:	3303      	adds	r3, #3
 80015a0:	3307      	adds	r3, #7
 80015a2:	08db      	lsrs	r3, r3, #3
 80015a4:	00db      	lsls	r3, r3, #3
 80015a6:	ebad 0d03 	sub.w	sp, sp, r3
 80015aa:	ab06      	add	r3, sp, #24
 80015ac:	3303      	adds	r3, #3
 80015ae:	089b      	lsrs	r3, r3, #2
 80015b0:	009b      	lsls	r3, r3, #2
 80015b2:	627b      	str	r3, [r7, #36]	; 0x24
	//memset(GAMMATGAMMA, 0, HORIZON * RDIM*HORIZON * RDIM * sizeof(float));
	mul(GAMMAT, GAMMA, GAMMATGAMMA, HORIZON * RDIM, HORIZON*YDIM, HORIZON * RDIM);
 80015b4:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80015b6:	6ebc      	ldr	r4, [r7, #104]	; 0x68
 80015b8:	6a7d      	ldr	r5, [r7, #36]	; 0x24
 80015ba:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80015be:	f897 20a8 	ldrb.w	r2, [r7, #168]	; 0xa8
 80015c2:	fb02 f603 	mul.w	r6, r2, r3
 80015c6:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80015ca:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 80015ce:	fb02 f303 	mul.w	r3, r2, r3
 80015d2:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 80015d6:	f897 10a8 	ldrb.w	r1, [r7, #168]	; 0xa8
 80015da:	fb01 f202 	mul.w	r2, r1, r2
 80015de:	9201      	str	r2, [sp, #4]
 80015e0:	9300      	str	r3, [sp, #0]
 80015e2:	4633      	mov	r3, r6
 80015e4:	462a      	mov	r2, r5
 80015e6:	4621      	mov	r1, r4
 80015e8:	f000 fc64 	bl	8001eb4 <mul>

	// Copy A and call it AT
	float AT[HORIZON * RDIM*HORIZON * RDIM];
 80015ec:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80015f0:	f897 20a8 	ldrb.w	r2, [r7, #168]	; 0xa8
 80015f4:	fb02 f303 	mul.w	r3, r2, r3
 80015f8:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 80015fc:	fb02 f303 	mul.w	r3, r2, r3
 8001600:	f897 20a8 	ldrb.w	r2, [r7, #168]	; 0xa8
 8001604:	fb02 f003 	mul.w	r0, r2, r3
 8001608:	1e43      	subs	r3, r0, #1
 800160a:	623b      	str	r3, [r7, #32]
 800160c:	4603      	mov	r3, r0
 800160e:	4619      	mov	r1, r3
 8001610:	f04f 0200 	mov.w	r2, #0
 8001614:	f04f 0300 	mov.w	r3, #0
 8001618:	f04f 0400 	mov.w	r4, #0
 800161c:	0154      	lsls	r4, r2, #5
 800161e:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001622:	014b      	lsls	r3, r1, #5
 8001624:	4603      	mov	r3, r0
 8001626:	4619      	mov	r1, r3
 8001628:	f04f 0200 	mov.w	r2, #0
 800162c:	f04f 0300 	mov.w	r3, #0
 8001630:	f04f 0400 	mov.w	r4, #0
 8001634:	0154      	lsls	r4, r2, #5
 8001636:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800163a:	014b      	lsls	r3, r1, #5
 800163c:	4603      	mov	r3, r0
 800163e:	009b      	lsls	r3, r3, #2
 8001640:	3303      	adds	r3, #3
 8001642:	3307      	adds	r3, #7
 8001644:	08db      	lsrs	r3, r3, #3
 8001646:	00db      	lsls	r3, r3, #3
 8001648:	ebad 0d03 	sub.w	sp, sp, r3
 800164c:	ab06      	add	r3, sp, #24
 800164e:	3303      	adds	r3, #3
 8001650:	089b      	lsrs	r3, r3, #2
 8001652:	009b      	lsls	r3, r3, #2
 8001654:	61fb      	str	r3, [r7, #28]
	memcpy(AT, GAMMATGAMMA, HORIZON * RDIM*HORIZON * RDIM*sizeof(float)); // A -> AT
 8001656:	69f8      	ldr	r0, [r7, #28]
 8001658:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800165a:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 800165e:	f897 20a8 	ldrb.w	r2, [r7, #168]	; 0xa8
 8001662:	fb02 f303 	mul.w	r3, r2, r3
 8001666:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 800166a:	fb02 f303 	mul.w	r3, r2, r3
 800166e:	f897 20a8 	ldrb.w	r2, [r7, #168]	; 0xa8
 8001672:	fb02 f303 	mul.w	r3, r2, r3
 8001676:	009b      	lsls	r3, r3, #2
 8001678:	461a      	mov	r2, r3
 800167a:	f00c fe65 	bl	800e348 <memcpy>
	tran(AT, HORIZON*RDIM, HORIZON*RDIM);
 800167e:	69f8      	ldr	r0, [r7, #28]
 8001680:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001684:	f897 20a8 	ldrb.w	r2, [r7, #168]	; 0xa8
 8001688:	fb02 f103 	mul.w	r1, r2, r3
 800168c:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001690:	f897 20a8 	ldrb.w	r2, [r7, #168]	; 0xa8
 8001694:	fb02 f303 	mul.w	r3, r2, r3
 8001698:	461a      	mov	r2, r3
 800169a:	f000 fcc8 	bl	800202e <tran>

	// Now create c = AT*R_PHI_vec
	float c[HORIZON * YDIM];
 800169e:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 80016a2:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 80016a6:	fb02 f003 	mul.w	r0, r2, r3
 80016aa:	1e43      	subs	r3, r0, #1
 80016ac:	61bb      	str	r3, [r7, #24]
 80016ae:	4603      	mov	r3, r0
 80016b0:	4619      	mov	r1, r3
 80016b2:	f04f 0200 	mov.w	r2, #0
 80016b6:	f04f 0300 	mov.w	r3, #0
 80016ba:	f04f 0400 	mov.w	r4, #0
 80016be:	0154      	lsls	r4, r2, #5
 80016c0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016c4:	014b      	lsls	r3, r1, #5
 80016c6:	4603      	mov	r3, r0
 80016c8:	4619      	mov	r1, r3
 80016ca:	f04f 0200 	mov.w	r2, #0
 80016ce:	f04f 0300 	mov.w	r3, #0
 80016d2:	f04f 0400 	mov.w	r4, #0
 80016d6:	0154      	lsls	r4, r2, #5
 80016d8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80016dc:	014b      	lsls	r3, r1, #5
 80016de:	4603      	mov	r3, r0
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	3303      	adds	r3, #3
 80016e4:	3307      	adds	r3, #7
 80016e6:	08db      	lsrs	r3, r3, #3
 80016e8:	00db      	lsls	r3, r3, #3
 80016ea:	ebad 0d03 	sub.w	sp, sp, r3
 80016ee:	ab06      	add	r3, sp, #24
 80016f0:	3303      	adds	r3, #3
 80016f2:	089b      	lsrs	r3, r3, #2
 80016f4:	009b      	lsls	r3, r3, #2
 80016f6:	617b      	str	r3, [r7, #20]
	//memset(c, 0, HORIZON * YDIM*sizeof(float));
	mul(AT, R_PHI_vec, c, HORIZON*RDIM, HORIZON*RDIM, 1);
 80016f8:	69f8      	ldr	r0, [r7, #28]
 80016fa:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80016fc:	697c      	ldr	r4, [r7, #20]
 80016fe:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001702:	f897 20a8 	ldrb.w	r2, [r7, #168]	; 0xa8
 8001706:	fb02 f503 	mul.w	r5, r2, r3
 800170a:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 800170e:	f897 20a8 	ldrb.w	r2, [r7, #168]	; 0xa8
 8001712:	fb02 f303 	mul.w	r3, r2, r3
 8001716:	2201      	movs	r2, #1
 8001718:	9201      	str	r2, [sp, #4]
 800171a:	9300      	str	r3, [sp, #0]
 800171c:	462b      	mov	r3, r5
 800171e:	4622      	mov	r2, r4
 8001720:	f000 fbc8 	bl	8001eb4 <mul>

	// Do linear programming now
	linprog(c, GAMMATGAMMA, b, R_vec, HORIZON*YDIM, HORIZON*RDIM, 0, ITERATION_LIMIT);
 8001724:	6978      	ldr	r0, [r7, #20]
 8001726:	6a7c      	ldr	r4, [r7, #36]	; 0x24
 8001728:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800172a:	6f3e      	ldr	r6, [r7, #112]	; 0x70
 800172c:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 8001730:	f897 20a4 	ldrb.w	r2, [r7, #164]	; 0xa4
 8001734:	fb02 f303 	mul.w	r3, r2, r3
 8001738:	f897 20ac 	ldrb.w	r2, [r7, #172]	; 0xac
 800173c:	f897 10a8 	ldrb.w	r1, [r7, #168]	; 0xa8
 8001740:	fb01 f202 	mul.w	r2, r1, r2
 8001744:	f897 10b0 	ldrb.w	r1, [r7, #176]	; 0xb0
 8001748:	9103      	str	r1, [sp, #12]
 800174a:	2100      	movs	r1, #0
 800174c:	9102      	str	r1, [sp, #8]
 800174e:	9201      	str	r2, [sp, #4]
 8001750:	9300      	str	r3, [sp, #0]
 8001752:	4633      	mov	r3, r6
 8001754:	462a      	mov	r2, r5
 8001756:	4621      	mov	r1, r4
 8001758:	f000 fcd2 	bl	8002100 <linprog>

	// We select the best input values, depending on if we have integration behavior or not in our model
	if(has_integration == true){
 800175c:	f897 30b4 	ldrb.w	r3, [r7, #180]	; 0xb4
 8001760:	2b00      	cmp	r3, #0
 8001762:	d016      	beq.n	8001792 <mpc+0x6ac>
		// Set first R_vec to u - Done
		for(int i = 0; i < RDIM; i++){
 8001764:	2300      	movs	r3, #0
 8001766:	657b      	str	r3, [r7, #84]	; 0x54
 8001768:	e00d      	b.n	8001786 <mpc+0x6a0>
			*(u + i) = *(R_vec + i);
 800176a:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800176c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800176e:	009b      	lsls	r3, r3, #2
 8001770:	441a      	add	r2, r3
 8001772:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001774:	009b      	lsls	r3, r3, #2
 8001776:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 800177a:	440b      	add	r3, r1
 800177c:	6812      	ldr	r2, [r2, #0]
 800177e:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < RDIM; i++){
 8001780:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8001782:	3301      	adds	r3, #1
 8001784:	657b      	str	r3, [r7, #84]	; 0x54
 8001786:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 800178a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800178c:	429a      	cmp	r2, r3
 800178e:	dbec      	blt.n	800176a <mpc+0x684>
 8001790:	e020      	b.n	80017d4 <mpc+0x6ee>
		}
	}else{
		// Set last R_vec to u - Done
		for(int i = 0; i < RDIM; i++){
 8001792:	2300      	movs	r3, #0
 8001794:	65bb      	str	r3, [r7, #88]	; 0x58
 8001796:	e018      	b.n	80017ca <mpc+0x6e4>
			*(u + i) = *(R_vec + HORIZON * RDIM - RDIM + i);
 8001798:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800179a:	f897 30ac 	ldrb.w	r3, [r7, #172]	; 0xac
 800179e:	f897 10a8 	ldrb.w	r1, [r7, #168]	; 0xa8
 80017a2:	fb01 f303 	mul.w	r3, r1, r3
 80017a6:	4619      	mov	r1, r3
 80017a8:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 80017ac:	1ac9      	subs	r1, r1, r3
 80017ae:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017b0:	440b      	add	r3, r1
 80017b2:	009b      	lsls	r3, r3, #2
 80017b4:	441a      	add	r2, r3
 80017b6:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017b8:	009b      	lsls	r3, r3, #2
 80017ba:	f8d7 1098 	ldr.w	r1, [r7, #152]	; 0x98
 80017be:	440b      	add	r3, r1
 80017c0:	6812      	ldr	r2, [r2, #0]
 80017c2:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < RDIM; i++){
 80017c4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80017c6:	3301      	adds	r3, #1
 80017c8:	65bb      	str	r3, [r7, #88]	; 0x58
 80017ca:	f897 30a8 	ldrb.w	r3, [r7, #168]	; 0xa8
 80017ce:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80017d0:	429a      	cmp	r2, r3
 80017d2:	dbe1      	blt.n	8001798 <mpc+0x6b2>
 80017d4:	46d5      	mov	sp, sl
 80017d6:	46cd      	mov	sp, r9
 80017d8:	46c5      	mov	sp, r8
		}
	}

	// Show the whole input vector
	//print(R_vec, HORIZON, YDIM);
}
 80017da:	bf00      	nop
 80017dc:	3778      	adds	r7, #120	; 0x78
 80017de:	46bd      	mov	sp, r7
 80017e0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}

080017e4 <obsv>:


/*
 * [C*A^1; C*A^2; C*A^3; ... ; C*A^HORIZON] % Extended observability matrix
 */
static void obsv(float* PHI, float* A, float* C, uint8_t ADIM, uint8_t YDIM, uint8_t RDIM, uint8_t HORIZON) {
 80017e4:	b5b0      	push	{r4, r5, r7, lr}
 80017e6:	b08e      	sub	sp, #56	; 0x38
 80017e8:	af02      	add	r7, sp, #8
 80017ea:	60f8      	str	r0, [r7, #12]
 80017ec:	60b9      	str	r1, [r7, #8]
 80017ee:	607a      	str	r2, [r7, #4]
 80017f0:	70fb      	strb	r3, [r7, #3]
 80017f2:	466b      	mov	r3, sp
 80017f4:	461d      	mov	r5, r3

	// This matrix will A^(i+1) all the time
	float A_pow[ADIM*ADIM];
 80017f6:	78fb      	ldrb	r3, [r7, #3]
 80017f8:	78fa      	ldrb	r2, [r7, #3]
 80017fa:	fb02 f003 	mul.w	r0, r2, r3
 80017fe:	1e43      	subs	r3, r0, #1
 8001800:	62bb      	str	r3, [r7, #40]	; 0x28
 8001802:	4603      	mov	r3, r0
 8001804:	4619      	mov	r1, r3
 8001806:	f04f 0200 	mov.w	r2, #0
 800180a:	f04f 0300 	mov.w	r3, #0
 800180e:	f04f 0400 	mov.w	r4, #0
 8001812:	0154      	lsls	r4, r2, #5
 8001814:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001818:	014b      	lsls	r3, r1, #5
 800181a:	4603      	mov	r3, r0
 800181c:	4619      	mov	r1, r3
 800181e:	f04f 0200 	mov.w	r2, #0
 8001822:	f04f 0300 	mov.w	r3, #0
 8001826:	f04f 0400 	mov.w	r4, #0
 800182a:	0154      	lsls	r4, r2, #5
 800182c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001830:	014b      	lsls	r3, r1, #5
 8001832:	4603      	mov	r3, r0
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	3303      	adds	r3, #3
 8001838:	3307      	adds	r3, #7
 800183a:	08db      	lsrs	r3, r3, #3
 800183c:	00db      	lsls	r3, r3, #3
 800183e:	ebad 0d03 	sub.w	sp, sp, r3
 8001842:	ab02      	add	r3, sp, #8
 8001844:	3303      	adds	r3, #3
 8001846:	089b      	lsrs	r3, r3, #2
 8001848:	009b      	lsls	r3, r3, #2
 800184a:	62fb      	str	r3, [r7, #44]	; 0x2c
	//memset(A_pow, 0, ADIM * ADIM * sizeof(float));
	float A_copy[ADIM*ADIM];
 800184c:	78fb      	ldrb	r3, [r7, #3]
 800184e:	78fa      	ldrb	r2, [r7, #3]
 8001850:	fb02 f003 	mul.w	r0, r2, r3
 8001854:	1e43      	subs	r3, r0, #1
 8001856:	623b      	str	r3, [r7, #32]
 8001858:	4603      	mov	r3, r0
 800185a:	4619      	mov	r1, r3
 800185c:	f04f 0200 	mov.w	r2, #0
 8001860:	f04f 0300 	mov.w	r3, #0
 8001864:	f04f 0400 	mov.w	r4, #0
 8001868:	0154      	lsls	r4, r2, #5
 800186a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800186e:	014b      	lsls	r3, r1, #5
 8001870:	4603      	mov	r3, r0
 8001872:	4619      	mov	r1, r3
 8001874:	f04f 0200 	mov.w	r2, #0
 8001878:	f04f 0300 	mov.w	r3, #0
 800187c:	f04f 0400 	mov.w	r4, #0
 8001880:	0154      	lsls	r4, r2, #5
 8001882:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001886:	014b      	lsls	r3, r1, #5
 8001888:	4603      	mov	r3, r0
 800188a:	009b      	lsls	r3, r3, #2
 800188c:	3303      	adds	r3, #3
 800188e:	3307      	adds	r3, #7
 8001890:	08db      	lsrs	r3, r3, #3
 8001892:	00db      	lsls	r3, r3, #3
 8001894:	ebad 0d03 	sub.w	sp, sp, r3
 8001898:	ab02      	add	r3, sp, #8
 800189a:	3303      	adds	r3, #3
 800189c:	089b      	lsrs	r3, r3, #2
 800189e:	009b      	lsls	r3, r3, #2
 80018a0:	61fb      	str	r3, [r7, #28]
	memcpy(A_copy, A, ADIM * ADIM * sizeof(float));
 80018a2:	69f8      	ldr	r0, [r7, #28]
 80018a4:	78fb      	ldrb	r3, [r7, #3]
 80018a6:	78fa      	ldrb	r2, [r7, #3]
 80018a8:	fb02 f303 	mul.w	r3, r2, r3
 80018ac:	009b      	lsls	r3, r3, #2
 80018ae:	461a      	mov	r2, r3
 80018b0:	68b9      	ldr	r1, [r7, #8]
 80018b2:	f00c fd49 	bl	800e348 <memcpy>

	// Temporary matrix
	float T[YDIM*ADIM];
 80018b6:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80018ba:	78fa      	ldrb	r2, [r7, #3]
 80018bc:	fb02 f003 	mul.w	r0, r2, r3
 80018c0:	1e43      	subs	r3, r0, #1
 80018c2:	61bb      	str	r3, [r7, #24]
 80018c4:	4603      	mov	r3, r0
 80018c6:	4619      	mov	r1, r3
 80018c8:	f04f 0200 	mov.w	r2, #0
 80018cc:	f04f 0300 	mov.w	r3, #0
 80018d0:	f04f 0400 	mov.w	r4, #0
 80018d4:	0154      	lsls	r4, r2, #5
 80018d6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018da:	014b      	lsls	r3, r1, #5
 80018dc:	4603      	mov	r3, r0
 80018de:	4619      	mov	r1, r3
 80018e0:	f04f 0200 	mov.w	r2, #0
 80018e4:	f04f 0300 	mov.w	r3, #0
 80018e8:	f04f 0400 	mov.w	r4, #0
 80018ec:	0154      	lsls	r4, r2, #5
 80018ee:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80018f2:	014b      	lsls	r3, r1, #5
 80018f4:	4603      	mov	r3, r0
 80018f6:	009b      	lsls	r3, r3, #2
 80018f8:	3303      	adds	r3, #3
 80018fa:	3307      	adds	r3, #7
 80018fc:	08db      	lsrs	r3, r3, #3
 80018fe:	00db      	lsls	r3, r3, #3
 8001900:	ebad 0d03 	sub.w	sp, sp, r3
 8001904:	ab02      	add	r3, sp, #8
 8001906:	3303      	adds	r3, #3
 8001908:	089b      	lsrs	r3, r3, #2
 800190a:	009b      	lsls	r3, r3, #2
 800190c:	617b      	str	r3, [r7, #20]
	//memset(T, 0, YDIM * ADIM * sizeof(float));

	// Regular T = C*A^(1+i)
	mul(C, A, T, YDIM, ADIM, ADIM);
 800190e:	6979      	ldr	r1, [r7, #20]
 8001910:	f897 0040 	ldrb.w	r0, [r7, #64]	; 0x40
 8001914:	78fb      	ldrb	r3, [r7, #3]
 8001916:	78fa      	ldrb	r2, [r7, #3]
 8001918:	9201      	str	r2, [sp, #4]
 800191a:	9300      	str	r3, [sp, #0]
 800191c:	4603      	mov	r3, r0
 800191e:	460a      	mov	r2, r1
 8001920:	68b9      	ldr	r1, [r7, #8]
 8001922:	6878      	ldr	r0, [r7, #4]
 8001924:	f000 fac6 	bl	8001eb4 <mul>

	// Insert temporary T into PHI
	memcpy(PHI, T, YDIM*ADIM*sizeof(float));
 8001928:	6979      	ldr	r1, [r7, #20]
 800192a:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800192e:	78fa      	ldrb	r2, [r7, #3]
 8001930:	fb02 f303 	mul.w	r3, r2, r3
 8001934:	009b      	lsls	r3, r3, #2
 8001936:	461a      	mov	r2, r3
 8001938:	68f8      	ldr	r0, [r7, #12]
 800193a:	f00c fd05 	bl	800e348 <memcpy>

	// Do the rest C*A^(i+1) because we have already done i = 0
	for(int i = 1; i < HORIZON; i++){
 800193e:	2301      	movs	r3, #1
 8001940:	627b      	str	r3, [r7, #36]	; 0x24
 8001942:	e03a      	b.n	80019ba <obsv+0x1d6>
		mul(A, A_copy, A_pow, ADIM, ADIM, ADIM); //  Matrix power A_pow = A*A_copy
 8001944:	69f9      	ldr	r1, [r7, #28]
 8001946:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8001948:	78fc      	ldrb	r4, [r7, #3]
 800194a:	78fb      	ldrb	r3, [r7, #3]
 800194c:	78fa      	ldrb	r2, [r7, #3]
 800194e:	9201      	str	r2, [sp, #4]
 8001950:	9300      	str	r3, [sp, #0]
 8001952:	4623      	mov	r3, r4
 8001954:	4602      	mov	r2, r0
 8001956:	68b8      	ldr	r0, [r7, #8]
 8001958:	f000 faac 	bl	8001eb4 <mul>
		mul(C, A_pow, T, YDIM, ADIM, ADIM); // T = C*A^(1+i)
 800195c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800195e:	6978      	ldr	r0, [r7, #20]
 8001960:	f897 4040 	ldrb.w	r4, [r7, #64]	; 0x40
 8001964:	78fb      	ldrb	r3, [r7, #3]
 8001966:	78fa      	ldrb	r2, [r7, #3]
 8001968:	9201      	str	r2, [sp, #4]
 800196a:	9300      	str	r3, [sp, #0]
 800196c:	4623      	mov	r3, r4
 800196e:	4602      	mov	r2, r0
 8001970:	6878      	ldr	r0, [r7, #4]
 8001972:	f000 fa9f 	bl	8001eb4 <mul>
		memcpy(PHI + i*YDIM*ADIM, T, YDIM*ADIM*sizeof(float)); // Insert temporary T into PHI
 8001976:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800197a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800197c:	fb02 f303 	mul.w	r3, r2, r3
 8001980:	78fa      	ldrb	r2, [r7, #3]
 8001982:	fb02 f303 	mul.w	r3, r2, r3
 8001986:	009b      	lsls	r3, r3, #2
 8001988:	68fa      	ldr	r2, [r7, #12]
 800198a:	18d0      	adds	r0, r2, r3
 800198c:	6979      	ldr	r1, [r7, #20]
 800198e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001992:	78fa      	ldrb	r2, [r7, #3]
 8001994:	fb02 f303 	mul.w	r3, r2, r3
 8001998:	009b      	lsls	r3, r3, #2
 800199a:	461a      	mov	r2, r3
 800199c:	f00c fcd4 	bl	800e348 <memcpy>
		memcpy(A_copy, A_pow, ADIM * ADIM * sizeof(float)); // A_copy <- A_pow
 80019a0:	69f8      	ldr	r0, [r7, #28]
 80019a2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80019a4:	78fb      	ldrb	r3, [r7, #3]
 80019a6:	78fa      	ldrb	r2, [r7, #3]
 80019a8:	fb02 f303 	mul.w	r3, r2, r3
 80019ac:	009b      	lsls	r3, r3, #2
 80019ae:	461a      	mov	r2, r3
 80019b0:	f00c fcca 	bl	800e348 <memcpy>
	for(int i = 1; i < HORIZON; i++){
 80019b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80019b6:	3301      	adds	r3, #1
 80019b8:	627b      	str	r3, [r7, #36]	; 0x24
 80019ba:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80019be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80019c0:	429a      	cmp	r2, r3
 80019c2:	dbbf      	blt.n	8001944 <obsv+0x160>
 80019c4:	46ad      	mov	sp, r5
	}
}
 80019c6:	bf00      	nop
 80019c8:	3730      	adds	r7, #48	; 0x30
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bdb0      	pop	{r4, r5, r7, pc}

080019ce <cab>:

/*
 * Lower triangular toeplitz of extended observability matrix
 * CAB stands for C*A^i*B because every element is C*A*B
 */
static void cab(float* GAMMA, float* PHI, float* A, float* B, float* C, uint8_t ADIM, uint8_t YDIM, uint8_t RDIM, uint8_t HORIZON){
 80019ce:	b5b0      	push	{r4, r5, r7, lr}
 80019d0:	b08c      	sub	sp, #48	; 0x30
 80019d2:	af02      	add	r7, sp, #8
 80019d4:	60f8      	str	r0, [r7, #12]
 80019d6:	60b9      	str	r1, [r7, #8]
 80019d8:	607a      	str	r2, [r7, #4]
 80019da:	603b      	str	r3, [r7, #0]
 80019dc:	466b      	mov	r3, sp
 80019de:	461d      	mov	r5, r3

	// First create the initial C*A^0*B == C*I*B == C*B
	float CB[YDIM*RDIM];
 80019e0:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 80019e4:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 80019e8:	fb02 f003 	mul.w	r0, r2, r3
 80019ec:	1e43      	subs	r3, r0, #1
 80019ee:	61fb      	str	r3, [r7, #28]
 80019f0:	4603      	mov	r3, r0
 80019f2:	4619      	mov	r1, r3
 80019f4:	f04f 0200 	mov.w	r2, #0
 80019f8:	f04f 0300 	mov.w	r3, #0
 80019fc:	f04f 0400 	mov.w	r4, #0
 8001a00:	0154      	lsls	r4, r2, #5
 8001a02:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a06:	014b      	lsls	r3, r1, #5
 8001a08:	4603      	mov	r3, r0
 8001a0a:	4619      	mov	r1, r3
 8001a0c:	f04f 0200 	mov.w	r2, #0
 8001a10:	f04f 0300 	mov.w	r3, #0
 8001a14:	f04f 0400 	mov.w	r4, #0
 8001a18:	0154      	lsls	r4, r2, #5
 8001a1a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a1e:	014b      	lsls	r3, r1, #5
 8001a20:	4603      	mov	r3, r0
 8001a22:	009b      	lsls	r3, r3, #2
 8001a24:	3303      	adds	r3, #3
 8001a26:	3307      	adds	r3, #7
 8001a28:	08db      	lsrs	r3, r3, #3
 8001a2a:	00db      	lsls	r3, r3, #3
 8001a2c:	ebad 0d03 	sub.w	sp, sp, r3
 8001a30:	ab02      	add	r3, sp, #8
 8001a32:	3303      	adds	r3, #3
 8001a34:	089b      	lsrs	r3, r3, #2
 8001a36:	009b      	lsls	r3, r3, #2
 8001a38:	61bb      	str	r3, [r7, #24]
	//memset(CB, 0, YDIM*RDIM*sizeof(float));
	mul(C, B, CB, YDIM, ADIM, RDIM);
 8001a3a:	69b9      	ldr	r1, [r7, #24]
 8001a3c:	f897 0040 	ldrb.w	r0, [r7, #64]	; 0x40
 8001a40:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001a44:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001a48:	9201      	str	r2, [sp, #4]
 8001a4a:	9300      	str	r3, [sp, #0]
 8001a4c:	4603      	mov	r3, r0
 8001a4e:	460a      	mov	r2, r1
 8001a50:	6839      	ldr	r1, [r7, #0]
 8001a52:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001a54:	f000 fa2e 	bl	8001eb4 <mul>

	// Take the transpose of CB so it will have dimension RDIM*YDIM instead
	tran(CB, YDIM, RDIM);
 8001a58:	69bb      	ldr	r3, [r7, #24]
 8001a5a:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 8001a5e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001a62:	4618      	mov	r0, r3
 8001a64:	f000 fae3 	bl	800202e <tran>

	// Create the CAB matrix from PHI*B
	float PHIB[HORIZON*YDIM*RDIM];
 8001a68:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001a6c:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001a70:	fb02 f303 	mul.w	r3, r2, r3
 8001a74:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001a78:	fb02 f003 	mul.w	r0, r2, r3
 8001a7c:	1e43      	subs	r3, r0, #1
 8001a7e:	617b      	str	r3, [r7, #20]
 8001a80:	4603      	mov	r3, r0
 8001a82:	4619      	mov	r1, r3
 8001a84:	f04f 0200 	mov.w	r2, #0
 8001a88:	f04f 0300 	mov.w	r3, #0
 8001a8c:	f04f 0400 	mov.w	r4, #0
 8001a90:	0154      	lsls	r4, r2, #5
 8001a92:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001a96:	014b      	lsls	r3, r1, #5
 8001a98:	4603      	mov	r3, r0
 8001a9a:	4619      	mov	r1, r3
 8001a9c:	f04f 0200 	mov.w	r2, #0
 8001aa0:	f04f 0300 	mov.w	r3, #0
 8001aa4:	f04f 0400 	mov.w	r4, #0
 8001aa8:	0154      	lsls	r4, r2, #5
 8001aaa:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001aae:	014b      	lsls	r3, r1, #5
 8001ab0:	4603      	mov	r3, r0
 8001ab2:	009b      	lsls	r3, r3, #2
 8001ab4:	3303      	adds	r3, #3
 8001ab6:	3307      	adds	r3, #7
 8001ab8:	08db      	lsrs	r3, r3, #3
 8001aba:	00db      	lsls	r3, r3, #3
 8001abc:	ebad 0d03 	sub.w	sp, sp, r3
 8001ac0:	ab02      	add	r3, sp, #8
 8001ac2:	3303      	adds	r3, #3
 8001ac4:	089b      	lsrs	r3, r3, #2
 8001ac6:	009b      	lsls	r3, r3, #2
 8001ac8:	613b      	str	r3, [r7, #16]
	mul(PHI, B, PHIB, HORIZON*YDIM, ADIM, RDIM); // CAB = PHI*B
 8001aca:	6939      	ldr	r1, [r7, #16]
 8001acc:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001ad0:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001ad4:	fb02 f003 	mul.w	r0, r2, r3
 8001ad8:	f897 303c 	ldrb.w	r3, [r7, #60]	; 0x3c
 8001adc:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001ae0:	9201      	str	r2, [sp, #4]
 8001ae2:	9300      	str	r3, [sp, #0]
 8001ae4:	4603      	mov	r3, r0
 8001ae6:	460a      	mov	r2, r1
 8001ae8:	6839      	ldr	r1, [r7, #0]
 8001aea:	68b8      	ldr	r0, [r7, #8]
 8001aec:	f000 f9e2 	bl	8001eb4 <mul>
	tran(PHIB, HORIZON*YDIM, RDIM);
 8001af0:	6938      	ldr	r0, [r7, #16]
 8001af2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001af6:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001afa:	fb02 f303 	mul.w	r3, r2, r3
 8001afe:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001b02:	4619      	mov	r1, r3
 8001b04:	f000 fa93 	bl	800202e <tran>
	 * We insert GAMMA = [CB PHI;
	 *                    0  CB PHI;
	 *            		  0   0  CB PHI;
	 *            		  0   0   0  CB PHI] from left to right
	 */
	for(int i = 0; i < HORIZON; i++) {
 8001b08:	2300      	movs	r3, #0
 8001b0a:	623b      	str	r3, [r7, #32]
 8001b0c:	e069      	b.n	8001be2 <cab+0x214>
		for(int j = 0; j < RDIM; j++) {
 8001b0e:	2300      	movs	r3, #0
 8001b10:	627b      	str	r3, [r7, #36]	; 0x24
 8001b12:	e05e      	b.n	8001bd2 <cab+0x204>
			memcpy(GAMMA + HORIZON*YDIM*(i*RDIM+j) + YDIM*i, CB + YDIM*j, YDIM*sizeof(float)); // Add CB
 8001b14:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001b18:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001b1c:	fb02 f303 	mul.w	r3, r2, r3
 8001b20:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001b24:	6a39      	ldr	r1, [r7, #32]
 8001b26:	fb01 f102 	mul.w	r1, r1, r2
 8001b2a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b2c:	440a      	add	r2, r1
 8001b2e:	fb02 f303 	mul.w	r3, r2, r3
 8001b32:	4619      	mov	r1, r3
 8001b34:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001b38:	6a3a      	ldr	r2, [r7, #32]
 8001b3a:	fb02 f303 	mul.w	r3, r2, r3
 8001b3e:	440b      	add	r3, r1
 8001b40:	009b      	lsls	r3, r3, #2
 8001b42:	68fa      	ldr	r2, [r7, #12]
 8001b44:	18d0      	adds	r0, r2, r3
 8001b46:	69ba      	ldr	r2, [r7, #24]
 8001b48:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001b4c:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001b4e:	fb01 f303 	mul.w	r3, r1, r3
 8001b52:	009b      	lsls	r3, r3, #2
 8001b54:	18d1      	adds	r1, r2, r3
 8001b56:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001b5a:	009b      	lsls	r3, r3, #2
 8001b5c:	461a      	mov	r2, r3
 8001b5e:	f00c fbf3 	bl	800e348 <memcpy>
			memcpy(GAMMA + HORIZON*YDIM*(i*RDIM+j) + YDIM*i + YDIM, PHIB + HORIZON*YDIM*j, (HORIZON-i-1)*YDIM*sizeof(float)); // Add PHI*B
 8001b62:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001b66:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001b6a:	fb02 f303 	mul.w	r3, r2, r3
 8001b6e:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001b72:	6a39      	ldr	r1, [r7, #32]
 8001b74:	fb01 f102 	mul.w	r1, r1, r2
 8001b78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001b7a:	440a      	add	r2, r1
 8001b7c:	fb02 f303 	mul.w	r3, r2, r3
 8001b80:	4619      	mov	r1, r3
 8001b82:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001b86:	6a3a      	ldr	r2, [r7, #32]
 8001b88:	fb02 f303 	mul.w	r3, r2, r3
 8001b8c:	18ca      	adds	r2, r1, r3
 8001b8e:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 8001b92:	4413      	add	r3, r2
 8001b94:	009b      	lsls	r3, r3, #2
 8001b96:	68fa      	ldr	r2, [r7, #12]
 8001b98:	18d0      	adds	r0, r2, r3
 8001b9a:	693a      	ldr	r2, [r7, #16]
 8001b9c:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001ba0:	f897 1040 	ldrb.w	r1, [r7, #64]	; 0x40
 8001ba4:	fb01 f303 	mul.w	r3, r1, r3
 8001ba8:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8001baa:	fb01 f303 	mul.w	r3, r1, r3
 8001bae:	009b      	lsls	r3, r3, #2
 8001bb0:	18d1      	adds	r1, r2, r3
 8001bb2:	f897 2048 	ldrb.w	r2, [r7, #72]	; 0x48
 8001bb6:	6a3b      	ldr	r3, [r7, #32]
 8001bb8:	1ad3      	subs	r3, r2, r3
 8001bba:	3b01      	subs	r3, #1
 8001bbc:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001bc0:	fb02 f303 	mul.w	r3, r2, r3
 8001bc4:	009b      	lsls	r3, r3, #2
 8001bc6:	461a      	mov	r2, r3
 8001bc8:	f00c fbbe 	bl	800e348 <memcpy>
		for(int j = 0; j < RDIM; j++) {
 8001bcc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001bce:	3301      	adds	r3, #1
 8001bd0:	627b      	str	r3, [r7, #36]	; 0x24
 8001bd2:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8001bd6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001bd8:	429a      	cmp	r2, r3
 8001bda:	db9b      	blt.n	8001b14 <cab+0x146>
	for(int i = 0; i < HORIZON; i++) {
 8001bdc:	6a3b      	ldr	r3, [r7, #32]
 8001bde:	3301      	adds	r3, #1
 8001be0:	623b      	str	r3, [r7, #32]
 8001be2:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001be6:	6a3a      	ldr	r2, [r7, #32]
 8001be8:	429a      	cmp	r2, r3
 8001bea:	db90      	blt.n	8001b0e <cab+0x140>
		}
	}

	// Transpose of gamma
	tran(GAMMA, HORIZON*RDIM, HORIZON*YDIM);
 8001bec:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001bf0:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8001bf4:	fb02 f103 	mul.w	r1, r2, r3
 8001bf8:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 8001bfc:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 8001c00:	fb02 f303 	mul.w	r3, r2, r3
 8001c04:	461a      	mov	r2, r3
 8001c06:	68f8      	ldr	r0, [r7, #12]
 8001c08:	f000 fa11 	bl	800202e <tran>
 8001c0c:	46ad      	mov	sp, r5

}
 8001c0e:	bf00      	nop
 8001c10:	3728      	adds	r7, #40	; 0x28
 8001c12:	46bd      	mov	sp, r7
 8001c14:	bdb0      	pop	{r4, r5, r7, pc}

08001c16 <expm>:
/*
 * Find matrix exponential, return A as A = expm(A)
 * A[m*n]
 * m == n
 */
void expm(float A[], uint32_t row){
 8001c16:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8001c1a:	b090      	sub	sp, #64	; 0x40
 8001c1c:	af02      	add	r7, sp, #8
 8001c1e:	6078      	str	r0, [r7, #4]
 8001c20:	6039      	str	r1, [r7, #0]
 8001c22:	466b      	mov	r3, sp
 8001c24:	4698      	mov	r8, r3
	// Create zero matrix
	float E[row*row];
 8001c26:	683b      	ldr	r3, [r7, #0]
 8001c28:	683a      	ldr	r2, [r7, #0]
 8001c2a:	fb02 f503 	mul.w	r5, r2, r3
 8001c2e:	462b      	mov	r3, r5
 8001c30:	3b01      	subs	r3, #1
 8001c32:	623b      	str	r3, [r7, #32]
 8001c34:	4629      	mov	r1, r5
 8001c36:	f04f 0200 	mov.w	r2, #0
 8001c3a:	f04f 0300 	mov.w	r3, #0
 8001c3e:	f04f 0400 	mov.w	r4, #0
 8001c42:	0154      	lsls	r4, r2, #5
 8001c44:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c48:	014b      	lsls	r3, r1, #5
 8001c4a:	4629      	mov	r1, r5
 8001c4c:	f04f 0200 	mov.w	r2, #0
 8001c50:	f04f 0300 	mov.w	r3, #0
 8001c54:	f04f 0400 	mov.w	r4, #0
 8001c58:	0154      	lsls	r4, r2, #5
 8001c5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001c5e:	014b      	lsls	r3, r1, #5
 8001c60:	00ab      	lsls	r3, r5, #2
 8001c62:	3303      	adds	r3, #3
 8001c64:	3307      	adds	r3, #7
 8001c66:	08db      	lsrs	r3, r3, #3
 8001c68:	00db      	lsls	r3, r3, #3
 8001c6a:	ebad 0d03 	sub.w	sp, sp, r3
 8001c6e:	ab02      	add	r3, sp, #8
 8001c70:	3303      	adds	r3, #3
 8001c72:	089b      	lsrs	r3, r3, #2
 8001c74:	009b      	lsls	r3, r3, #2
 8001c76:	61fb      	str	r3, [r7, #28]
	memset(E, 0, sizeof(E));
 8001c78:	69fb      	ldr	r3, [r7, #28]
 8001c7a:	00aa      	lsls	r2, r5, #2
 8001c7c:	2100      	movs	r1, #0
 8001c7e:	4618      	mov	r0, r3
 8001c80:	f00c fb6d 	bl	800e35e <memset>
	// Create identity matrices
	float F[row*row];
 8001c84:	683b      	ldr	r3, [r7, #0]
 8001c86:	683a      	ldr	r2, [r7, #0]
 8001c88:	fb02 f003 	mul.w	r0, r2, r3
 8001c8c:	4603      	mov	r3, r0
 8001c8e:	3b01      	subs	r3, #1
 8001c90:	61bb      	str	r3, [r7, #24]
 8001c92:	4601      	mov	r1, r0
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	f04f 0300 	mov.w	r3, #0
 8001c9c:	f04f 0400 	mov.w	r4, #0
 8001ca0:	0154      	lsls	r4, r2, #5
 8001ca2:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001ca6:	014b      	lsls	r3, r1, #5
 8001ca8:	4601      	mov	r1, r0
 8001caa:	f04f 0200 	mov.w	r2, #0
 8001cae:	f04f 0300 	mov.w	r3, #0
 8001cb2:	f04f 0400 	mov.w	r4, #0
 8001cb6:	0154      	lsls	r4, r2, #5
 8001cb8:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cbc:	014b      	lsls	r3, r1, #5
 8001cbe:	0083      	lsls	r3, r0, #2
 8001cc0:	3303      	adds	r3, #3
 8001cc2:	3307      	adds	r3, #7
 8001cc4:	08db      	lsrs	r3, r3, #3
 8001cc6:	00db      	lsls	r3, r3, #3
 8001cc8:	ebad 0d03 	sub.w	sp, sp, r3
 8001ccc:	ab02      	add	r3, sp, #8
 8001cce:	3303      	adds	r3, #3
 8001cd0:	089b      	lsrs	r3, r3, #2
 8001cd2:	009b      	lsls	r3, r3, #2
 8001cd4:	617b      	str	r3, [r7, #20]
	float T[row*row];
 8001cd6:	683b      	ldr	r3, [r7, #0]
 8001cd8:	683a      	ldr	r2, [r7, #0]
 8001cda:	fb02 f603 	mul.w	r6, r2, r3
 8001cde:	4633      	mov	r3, r6
 8001ce0:	3b01      	subs	r3, #1
 8001ce2:	613b      	str	r3, [r7, #16]
 8001ce4:	4631      	mov	r1, r6
 8001ce6:	f04f 0200 	mov.w	r2, #0
 8001cea:	f04f 0300 	mov.w	r3, #0
 8001cee:	f04f 0400 	mov.w	r4, #0
 8001cf2:	0154      	lsls	r4, r2, #5
 8001cf4:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001cf8:	014b      	lsls	r3, r1, #5
 8001cfa:	4631      	mov	r1, r6
 8001cfc:	f04f 0200 	mov.w	r2, #0
 8001d00:	f04f 0300 	mov.w	r3, #0
 8001d04:	f04f 0400 	mov.w	r4, #0
 8001d08:	0154      	lsls	r4, r2, #5
 8001d0a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8001d0e:	014b      	lsls	r3, r1, #5
 8001d10:	00b3      	lsls	r3, r6, #2
 8001d12:	3303      	adds	r3, #3
 8001d14:	3307      	adds	r3, #7
 8001d16:	08db      	lsrs	r3, r3, #3
 8001d18:	00db      	lsls	r3, r3, #3
 8001d1a:	ebad 0d03 	sub.w	sp, sp, r3
 8001d1e:	ab02      	add	r3, sp, #8
 8001d20:	3303      	adds	r3, #3
 8001d22:	089b      	lsrs	r3, r3, #2
 8001d24:	009b      	lsls	r3, r3, #2
 8001d26:	60fb      	str	r3, [r7, #12]
	memset(F, 0, sizeof(F));
 8001d28:	697b      	ldr	r3, [r7, #20]
 8001d2a:	0082      	lsls	r2, r0, #2
 8001d2c:	2100      	movs	r1, #0
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f00c fb15 	bl	800e35e <memset>
	memset(T, 0, sizeof(T));
 8001d34:	68fb      	ldr	r3, [r7, #12]
 8001d36:	00b2      	lsls	r2, r6, #2
 8001d38:	2100      	movs	r1, #0
 8001d3a:	4618      	mov	r0, r3
 8001d3c:	f00c fb0f 	bl	800e35e <memset>
	for(uint32_t i = 0; i < row; i++){
 8001d40:	2300      	movs	r3, #0
 8001d42:	627b      	str	r3, [r7, #36]	; 0x24
 8001d44:	e018      	b.n	8001d78 <expm+0x162>
		F[i*row + i] = 1;
 8001d46:	683b      	ldr	r3, [r7, #0]
 8001d48:	3301      	adds	r3, #1
 8001d4a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d4c:	fb02 f303 	mul.w	r3, r2, r3
 8001d50:	697a      	ldr	r2, [r7, #20]
 8001d52:	009b      	lsls	r3, r3, #2
 8001d54:	4413      	add	r3, r2
 8001d56:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d5a:	601a      	str	r2, [r3, #0]
		T[i*row + i] = 1;
 8001d5c:	683b      	ldr	r3, [r7, #0]
 8001d5e:	3301      	adds	r3, #1
 8001d60:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d62:	fb02 f303 	mul.w	r3, r2, r3
 8001d66:	68fa      	ldr	r2, [r7, #12]
 8001d68:	009b      	lsls	r3, r3, #2
 8001d6a:	4413      	add	r3, r2
 8001d6c:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001d70:	601a      	str	r2, [r3, #0]
	for(uint32_t i = 0; i < row; i++){
 8001d72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001d74:	3301      	adds	r3, #1
 8001d76:	627b      	str	r3, [r7, #36]	; 0x24
 8001d78:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001d7a:	683b      	ldr	r3, [r7, #0]
 8001d7c:	429a      	cmp	r2, r3
 8001d7e:	d3e2      	bcc.n	8001d46 <expm+0x130>
	}
	uint8_t k = 1;
 8001d80:	2301      	movs	r3, #1
 8001d82:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	while (norm(T, row, row, 1) > 0){
 8001d86:	e07b      	b.n	8001e80 <expm+0x26a>
		// E = E + F
		for(uint32_t i = 0; i < row*row; i++){
 8001d88:	2300      	movs	r3, #0
 8001d8a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001d8c:	e016      	b.n	8001dbc <expm+0x1a6>
			E[i] = E[i] + F[i];
 8001d8e:	69fa      	ldr	r2, [r7, #28]
 8001d90:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d92:	009b      	lsls	r3, r3, #2
 8001d94:	4413      	add	r3, r2
 8001d96:	ed93 7a00 	vldr	s14, [r3]
 8001d9a:	697a      	ldr	r2, [r7, #20]
 8001d9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001d9e:	009b      	lsls	r3, r3, #2
 8001da0:	4413      	add	r3, r2
 8001da2:	edd3 7a00 	vldr	s15, [r3]
 8001da6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001daa:	69fa      	ldr	r2, [r7, #28]
 8001dac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001dae:	009b      	lsls	r3, r3, #2
 8001db0:	4413      	add	r3, r2
 8001db2:	edc3 7a00 	vstr	s15, [r3]
		for(uint32_t i = 0; i < row*row; i++){
 8001db6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001db8:	3301      	adds	r3, #1
 8001dba:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001dbc:	683b      	ldr	r3, [r7, #0]
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	fb02 f303 	mul.w	r3, r2, r3
 8001dc4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001dc6:	429a      	cmp	r2, r3
 8001dc8:	d3e1      	bcc.n	8001d8e <expm+0x178>
		}
		// F = A*F/k (we are borrowing T)
		mul(A, F, T, row, row, row);
 8001dca:	6979      	ldr	r1, [r7, #20]
 8001dcc:	68f8      	ldr	r0, [r7, #12]
 8001dce:	683c      	ldr	r4, [r7, #0]
 8001dd0:	683b      	ldr	r3, [r7, #0]
 8001dd2:	683a      	ldr	r2, [r7, #0]
 8001dd4:	9201      	str	r2, [sp, #4]
 8001dd6:	9300      	str	r3, [sp, #0]
 8001dd8:	4623      	mov	r3, r4
 8001dda:	4602      	mov	r2, r0
 8001ddc:	6878      	ldr	r0, [r7, #4]
 8001dde:	f000 f869 	bl	8001eb4 <mul>
		for(uint32_t i = 0; i < row*row; i++){
 8001de2:	2300      	movs	r3, #0
 8001de4:	633b      	str	r3, [r7, #48]	; 0x30
 8001de6:	e016      	b.n	8001e16 <expm+0x200>
			F[i] = T[i]/k;
 8001de8:	68fa      	ldr	r2, [r7, #12]
 8001dea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001dec:	009b      	lsls	r3, r3, #2
 8001dee:	4413      	add	r3, r2
 8001df0:	edd3 6a00 	vldr	s13, [r3]
 8001df4:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001df8:	ee07 3a90 	vmov	s15, r3
 8001dfc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e00:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001e04:	697a      	ldr	r2, [r7, #20]
 8001e06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e08:	009b      	lsls	r3, r3, #2
 8001e0a:	4413      	add	r3, r2
 8001e0c:	edc3 7a00 	vstr	s15, [r3]
		for(uint32_t i = 0; i < row*row; i++){
 8001e10:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001e12:	3301      	adds	r3, #1
 8001e14:	633b      	str	r3, [r7, #48]	; 0x30
 8001e16:	683b      	ldr	r3, [r7, #0]
 8001e18:	683a      	ldr	r2, [r7, #0]
 8001e1a:	fb02 f303 	mul.w	r3, r2, r3
 8001e1e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001e20:	429a      	cmp	r2, r3
 8001e22:	d3e1      	bcc.n	8001de8 <expm+0x1d2>
		}
		// T = E + F - E ( This is faster than T = F)
		for(uint32_t i = 0; i < row*row; i++){
 8001e24:	2300      	movs	r3, #0
 8001e26:	637b      	str	r3, [r7, #52]	; 0x34
 8001e28:	e01e      	b.n	8001e68 <expm+0x252>
			T[i] = E[i] + F[i] - E[i];
 8001e2a:	69fa      	ldr	r2, [r7, #28]
 8001e2c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e2e:	009b      	lsls	r3, r3, #2
 8001e30:	4413      	add	r3, r2
 8001e32:	ed93 7a00 	vldr	s14, [r3]
 8001e36:	697a      	ldr	r2, [r7, #20]
 8001e38:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e3a:	009b      	lsls	r3, r3, #2
 8001e3c:	4413      	add	r3, r2
 8001e3e:	edd3 7a00 	vldr	s15, [r3]
 8001e42:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e46:	69fa      	ldr	r2, [r7, #28]
 8001e48:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e4a:	009b      	lsls	r3, r3, #2
 8001e4c:	4413      	add	r3, r2
 8001e4e:	edd3 7a00 	vldr	s15, [r3]
 8001e52:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e56:	68fa      	ldr	r2, [r7, #12]
 8001e58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e5a:	009b      	lsls	r3, r3, #2
 8001e5c:	4413      	add	r3, r2
 8001e5e:	edc3 7a00 	vstr	s15, [r3]
		for(uint32_t i = 0; i < row*row; i++){
 8001e62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001e64:	3301      	adds	r3, #1
 8001e66:	637b      	str	r3, [r7, #52]	; 0x34
 8001e68:	683b      	ldr	r3, [r7, #0]
 8001e6a:	683a      	ldr	r2, [r7, #0]
 8001e6c:	fb02 f303 	mul.w	r3, r2, r3
 8001e70:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8001e72:	429a      	cmp	r2, r3
 8001e74:	d3d9      	bcc.n	8001e2a <expm+0x214>
		}
		k++;
 8001e76:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8001e7a:	3301      	adds	r3, #1
 8001e7c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
	while (norm(T, row, row, 1) > 0){
 8001e80:	68f8      	ldr	r0, [r7, #12]
 8001e82:	2301      	movs	r3, #1
 8001e84:	683a      	ldr	r2, [r7, #0]
 8001e86:	6839      	ldr	r1, [r7, #0]
 8001e88:	f000 f86b 	bl	8001f62 <norm>
 8001e8c:	eef0 7a40 	vmov.f32	s15, s0
 8001e90:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e98:	f73f af76 	bgt.w	8001d88 <expm+0x172>
	}
	memcpy(A, E, sizeof(E));
 8001e9c:	69fb      	ldr	r3, [r7, #28]
 8001e9e:	00aa      	lsls	r2, r5, #2
 8001ea0:	4619      	mov	r1, r3
 8001ea2:	6878      	ldr	r0, [r7, #4]
 8001ea4:	f00c fa50 	bl	800e348 <memcpy>
 8001ea8:	46c5      	mov	sp, r8
}
 8001eaa:	bf00      	nop
 8001eac:	3738      	adds	r7, #56	; 0x38
 8001eae:	46bd      	mov	sp, r7
 8001eb0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08001eb4 <mul>:
 * C = A*B
 * A [row_a*column_a]
 * B [row_a*column_b]
 * C [row_a*column_b]
 */
void mul(float* A, float* B, float* C, int row_a, int column_a, int column_b) {
 8001eb4:	b480      	push	{r7}
 8001eb6:	b08b      	sub	sp, #44	; 0x2c
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	60f8      	str	r0, [r7, #12]
 8001ebc:	60b9      	str	r1, [r7, #8]
 8001ebe:	607a      	str	r2, [r7, #4]
 8001ec0:	603b      	str	r3, [r7, #0]

	// Data matrix
	float* data_a;
	float* data_b;

	for (int i = 0; i < row_a; i++) {
 8001ec2:	2300      	movs	r3, #0
 8001ec4:	61fb      	str	r3, [r7, #28]
 8001ec6:	e042      	b.n	8001f4e <mul+0x9a>
		// Then we go through every column of b
		for (int j = 0; j < column_b; j++) {
 8001ec8:	2300      	movs	r3, #0
 8001eca:	61bb      	str	r3, [r7, #24]
 8001ecc:	e038      	b.n	8001f40 <mul+0x8c>
			data_a = &A[i * column_a];
 8001ece:	69fb      	ldr	r3, [r7, #28]
 8001ed0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8001ed2:	fb02 f303 	mul.w	r3, r2, r3
 8001ed6:	009b      	lsls	r3, r3, #2
 8001ed8:	68fa      	ldr	r2, [r7, #12]
 8001eda:	4413      	add	r3, r2
 8001edc:	627b      	str	r3, [r7, #36]	; 0x24
			data_b = &B[j];
 8001ede:	69bb      	ldr	r3, [r7, #24]
 8001ee0:	009b      	lsls	r3, r3, #2
 8001ee2:	68ba      	ldr	r2, [r7, #8]
 8001ee4:	4413      	add	r3, r2
 8001ee6:	623b      	str	r3, [r7, #32]

			*C = 0; // Reset
 8001ee8:	687b      	ldr	r3, [r7, #4]
 8001eea:	f04f 0200 	mov.w	r2, #0
 8001eee:	601a      	str	r2, [r3, #0]
			// And we multiply rows from a with columns of b
			for (int k = 0; k < column_a; k++) {
 8001ef0:	2300      	movs	r3, #0
 8001ef2:	617b      	str	r3, [r7, #20]
 8001ef4:	e01a      	b.n	8001f2c <mul+0x78>
				*C += *data_a * *data_b;
 8001ef6:	687b      	ldr	r3, [r7, #4]
 8001ef8:	ed93 7a00 	vldr	s14, [r3]
 8001efc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001efe:	edd3 6a00 	vldr	s13, [r3]
 8001f02:	6a3b      	ldr	r3, [r7, #32]
 8001f04:	edd3 7a00 	vldr	s15, [r3]
 8001f08:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f0c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f10:	687b      	ldr	r3, [r7, #4]
 8001f12:	edc3 7a00 	vstr	s15, [r3]
				data_a++;
 8001f16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f18:	3304      	adds	r3, #4
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
				data_b += column_b;
 8001f1c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f1e:	009b      	lsls	r3, r3, #2
 8001f20:	6a3a      	ldr	r2, [r7, #32]
 8001f22:	4413      	add	r3, r2
 8001f24:	623b      	str	r3, [r7, #32]
			for (int k = 0; k < column_a; k++) {
 8001f26:	697b      	ldr	r3, [r7, #20]
 8001f28:	3301      	adds	r3, #1
 8001f2a:	617b      	str	r3, [r7, #20]
 8001f2c:	697a      	ldr	r2, [r7, #20]
 8001f2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8001f30:	429a      	cmp	r2, r3
 8001f32:	dbe0      	blt.n	8001ef6 <mul+0x42>
			}
			C++; // ;)
 8001f34:	687b      	ldr	r3, [r7, #4]
 8001f36:	3304      	adds	r3, #4
 8001f38:	607b      	str	r3, [r7, #4]
		for (int j = 0; j < column_b; j++) {
 8001f3a:	69bb      	ldr	r3, [r7, #24]
 8001f3c:	3301      	adds	r3, #1
 8001f3e:	61bb      	str	r3, [r7, #24]
 8001f40:	69ba      	ldr	r2, [r7, #24]
 8001f42:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8001f44:	429a      	cmp	r2, r3
 8001f46:	dbc2      	blt.n	8001ece <mul+0x1a>
	for (int i = 0; i < row_a; i++) {
 8001f48:	69fb      	ldr	r3, [r7, #28]
 8001f4a:	3301      	adds	r3, #1
 8001f4c:	61fb      	str	r3, [r7, #28]
 8001f4e:	69fa      	ldr	r2, [r7, #28]
 8001f50:	683b      	ldr	r3, [r7, #0]
 8001f52:	429a      	cmp	r2, r3
 8001f54:	dbb8      	blt.n	8001ec8 <mul+0x14>
		}
	}
}
 8001f56:	bf00      	nop
 8001f58:	372c      	adds	r7, #44	; 0x2c
 8001f5a:	46bd      	mov	sp, r7
 8001f5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f60:	4770      	bx	lr

08001f62 <norm>:
/*
 * Find the norm of A
 * A[m*n]
 * l = 1 - 1-norm, the largest column sum of the absolute values of A.
 */
float norm(float A[], uint32_t row, uint32_t column, uint8_t l){
 8001f62:	b480      	push	{r7}
 8001f64:	b089      	sub	sp, #36	; 0x24
 8001f66:	af00      	add	r7, sp, #0
 8001f68:	60f8      	str	r0, [r7, #12]
 8001f6a:	60b9      	str	r1, [r7, #8]
 8001f6c:	607a      	str	r2, [r7, #4]
 8001f6e:	70fb      	strb	r3, [r7, #3]
	if(l == 1){
 8001f70:	78fb      	ldrb	r3, [r7, #3]
 8001f72:	2b01      	cmp	r3, #1
 8001f74:	d150      	bne.n	8002018 <norm+0xb6>
		// MATLAB: sum(A, 1)
		for (uint32_t i = 1; i < row; i++) {
 8001f76:	2301      	movs	r3, #1
 8001f78:	61fb      	str	r3, [r7, #28]
 8001f7a:	e027      	b.n	8001fcc <norm+0x6a>
			for (uint32_t j = 0; j < column; j++) {
 8001f7c:	2300      	movs	r3, #0
 8001f7e:	61bb      	str	r3, [r7, #24]
 8001f80:	e01d      	b.n	8001fbe <norm+0x5c>
				A[j] += fabsf(A[i * column + j]);
 8001f82:	69bb      	ldr	r3, [r7, #24]
 8001f84:	009b      	lsls	r3, r3, #2
 8001f86:	68fa      	ldr	r2, [r7, #12]
 8001f88:	4413      	add	r3, r2
 8001f8a:	ed93 7a00 	vldr	s14, [r3]
 8001f8e:	69fb      	ldr	r3, [r7, #28]
 8001f90:	687a      	ldr	r2, [r7, #4]
 8001f92:	fb02 f203 	mul.w	r2, r2, r3
 8001f96:	69bb      	ldr	r3, [r7, #24]
 8001f98:	4413      	add	r3, r2
 8001f9a:	009b      	lsls	r3, r3, #2
 8001f9c:	68fa      	ldr	r2, [r7, #12]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	edd3 7a00 	vldr	s15, [r3]
 8001fa4:	eef0 7ae7 	vabs.f32	s15, s15
 8001fa8:	69bb      	ldr	r3, [r7, #24]
 8001faa:	009b      	lsls	r3, r3, #2
 8001fac:	68fa      	ldr	r2, [r7, #12]
 8001fae:	4413      	add	r3, r2
 8001fb0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fb4:	edc3 7a00 	vstr	s15, [r3]
			for (uint32_t j = 0; j < column; j++) {
 8001fb8:	69bb      	ldr	r3, [r7, #24]
 8001fba:	3301      	adds	r3, #1
 8001fbc:	61bb      	str	r3, [r7, #24]
 8001fbe:	69ba      	ldr	r2, [r7, #24]
 8001fc0:	687b      	ldr	r3, [r7, #4]
 8001fc2:	429a      	cmp	r2, r3
 8001fc4:	d3dd      	bcc.n	8001f82 <norm+0x20>
		for (uint32_t i = 1; i < row; i++) {
 8001fc6:	69fb      	ldr	r3, [r7, #28]
 8001fc8:	3301      	adds	r3, #1
 8001fca:	61fb      	str	r3, [r7, #28]
 8001fcc:	69fa      	ldr	r2, [r7, #28]
 8001fce:	68bb      	ldr	r3, [r7, #8]
 8001fd0:	429a      	cmp	r2, r3
 8001fd2:	d3d3      	bcc.n	8001f7c <norm+0x1a>
			}
		}
		// Find the largest value on row 0
		float maxValue = A[0];
 8001fd4:	68fb      	ldr	r3, [r7, #12]
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	617b      	str	r3, [r7, #20]
		for (uint32_t j = 1; j < column; j++) {
 8001fda:	2301      	movs	r3, #1
 8001fdc:	613b      	str	r3, [r7, #16]
 8001fde:	e015      	b.n	800200c <norm+0xaa>
			if(A[j] > maxValue){
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	009b      	lsls	r3, r3, #2
 8001fe4:	68fa      	ldr	r2, [r7, #12]
 8001fe6:	4413      	add	r3, r2
 8001fe8:	edd3 7a00 	vldr	s15, [r3]
 8001fec:	ed97 7a05 	vldr	s14, [r7, #20]
 8001ff0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ff4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ff8:	d505      	bpl.n	8002006 <norm+0xa4>
				maxValue = A[j];
 8001ffa:	693b      	ldr	r3, [r7, #16]
 8001ffc:	009b      	lsls	r3, r3, #2
 8001ffe:	68fa      	ldr	r2, [r7, #12]
 8002000:	4413      	add	r3, r2
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	617b      	str	r3, [r7, #20]
		for (uint32_t j = 1; j < column; j++) {
 8002006:	693b      	ldr	r3, [r7, #16]
 8002008:	3301      	adds	r3, #1
 800200a:	613b      	str	r3, [r7, #16]
 800200c:	693a      	ldr	r2, [r7, #16]
 800200e:	687b      	ldr	r3, [r7, #4]
 8002010:	429a      	cmp	r2, r3
 8002012:	d3e5      	bcc.n	8001fe0 <norm+0x7e>
			}
		}
		return maxValue;
 8002014:	697b      	ldr	r3, [r7, #20]
 8002016:	e001      	b.n	800201c <norm+0xba>
	}
	return 0;
 8002018:	f04f 0300 	mov.w	r3, #0
 800201c:	ee07 3a90 	vmov	s15, r3
	/* add more norms here */
}
 8002020:	eeb0 0a67 	vmov.f32	s0, s15
 8002024:	3724      	adds	r7, #36	; 0x24
 8002026:	46bd      	mov	sp, r7
 8002028:	f85d 7b04 	ldr.w	r7, [sp], #4
 800202c:	4770      	bx	lr

0800202e <tran>:
#include "../../Headers/Functions.h"

/*
 * Turn A into transponse A^T
 */
void tran(float* A, int row, int column) {
 800202e:	b5b0      	push	{r4, r5, r7, lr}
 8002030:	b08a      	sub	sp, #40	; 0x28
 8002032:	af00      	add	r7, sp, #0
 8002034:	60f8      	str	r0, [r7, #12]
 8002036:	60b9      	str	r1, [r7, #8]
 8002038:	607a      	str	r2, [r7, #4]
 800203a:	466b      	mov	r3, sp
 800203c:	461d      	mov	r5, r3

	float B[row*column];
 800203e:	68bb      	ldr	r3, [r7, #8]
 8002040:	687a      	ldr	r2, [r7, #4]
 8002042:	fb02 f003 	mul.w	r0, r2, r3
 8002046:	1e43      	subs	r3, r0, #1
 8002048:	617b      	str	r3, [r7, #20]
 800204a:	4603      	mov	r3, r0
 800204c:	4619      	mov	r1, r3
 800204e:	f04f 0200 	mov.w	r2, #0
 8002052:	f04f 0300 	mov.w	r3, #0
 8002056:	f04f 0400 	mov.w	r4, #0
 800205a:	0154      	lsls	r4, r2, #5
 800205c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002060:	014b      	lsls	r3, r1, #5
 8002062:	4603      	mov	r3, r0
 8002064:	4619      	mov	r1, r3
 8002066:	f04f 0200 	mov.w	r2, #0
 800206a:	f04f 0300 	mov.w	r3, #0
 800206e:	f04f 0400 	mov.w	r4, #0
 8002072:	0154      	lsls	r4, r2, #5
 8002074:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8002078:	014b      	lsls	r3, r1, #5
 800207a:	4603      	mov	r3, r0
 800207c:	009b      	lsls	r3, r3, #2
 800207e:	3303      	adds	r3, #3
 8002080:	3307      	adds	r3, #7
 8002082:	08db      	lsrs	r3, r3, #3
 8002084:	00db      	lsls	r3, r3, #3
 8002086:	ebad 0d03 	sub.w	sp, sp, r3
 800208a:	466b      	mov	r3, sp
 800208c:	3303      	adds	r3, #3
 800208e:	089b      	lsrs	r3, r3, #2
 8002090:	009b      	lsls	r3, r3, #2
 8002092:	613b      	str	r3, [r7, #16]
	float* transpose;
	float* ptr_A = A;
 8002094:	68fb      	ldr	r3, [r7, #12]
 8002096:	61fb      	str	r3, [r7, #28]

	for (int i = 0; i < row; i++) {
 8002098:	2300      	movs	r3, #0
 800209a:	623b      	str	r3, [r7, #32]
 800209c:	e01d      	b.n	80020da <tran+0xac>
		transpose = &B[i];
 800209e:	6a3b      	ldr	r3, [r7, #32]
 80020a0:	009b      	lsls	r3, r3, #2
 80020a2:	693a      	ldr	r2, [r7, #16]
 80020a4:	4413      	add	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
		for (int j = 0; j < column; j++) {
 80020a8:	2300      	movs	r3, #0
 80020aa:	627b      	str	r3, [r7, #36]	; 0x24
 80020ac:	e00e      	b.n	80020cc <tran+0x9e>
			*transpose = *ptr_A;
 80020ae:	69fb      	ldr	r3, [r7, #28]
 80020b0:	681a      	ldr	r2, [r3, #0]
 80020b2:	69bb      	ldr	r3, [r7, #24]
 80020b4:	601a      	str	r2, [r3, #0]
			ptr_A++;
 80020b6:	69fb      	ldr	r3, [r7, #28]
 80020b8:	3304      	adds	r3, #4
 80020ba:	61fb      	str	r3, [r7, #28]
			transpose += row;
 80020bc:	68bb      	ldr	r3, [r7, #8]
 80020be:	009b      	lsls	r3, r3, #2
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	4413      	add	r3, r2
 80020c4:	61bb      	str	r3, [r7, #24]
		for (int j = 0; j < column; j++) {
 80020c6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80020c8:	3301      	adds	r3, #1
 80020ca:	627b      	str	r3, [r7, #36]	; 0x24
 80020cc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80020ce:	687b      	ldr	r3, [r7, #4]
 80020d0:	429a      	cmp	r2, r3
 80020d2:	dbec      	blt.n	80020ae <tran+0x80>
	for (int i = 0; i < row; i++) {
 80020d4:	6a3b      	ldr	r3, [r7, #32]
 80020d6:	3301      	adds	r3, #1
 80020d8:	623b      	str	r3, [r7, #32]
 80020da:	6a3a      	ldr	r2, [r7, #32]
 80020dc:	68bb      	ldr	r3, [r7, #8]
 80020de:	429a      	cmp	r2, r3
 80020e0:	dbdd      	blt.n	800209e <tran+0x70>
		}
	}

	// Copy!
	memcpy(A, B, row*column*sizeof(float));
 80020e2:	6939      	ldr	r1, [r7, #16]
 80020e4:	68bb      	ldr	r3, [r7, #8]
 80020e6:	687a      	ldr	r2, [r7, #4]
 80020e8:	fb02 f303 	mul.w	r3, r2, r3
 80020ec:	009b      	lsls	r3, r3, #2
 80020ee:	461a      	mov	r2, r3
 80020f0:	68f8      	ldr	r0, [r7, #12]
 80020f2:	f00c f929 	bl	800e348 <memcpy>
 80020f6:	46ad      	mov	sp, r5
}
 80020f8:	bf00      	nop
 80020fa:	3728      	adds	r7, #40	; 0x28
 80020fc:	46bd      	mov	sp, r7
 80020fe:	bdb0      	pop	{r4, r5, r7, pc}

08002100 <linprog>:
 * max_or_min == 1 -> Minimization
 *
 * Source Simplex method: https://www.youtube.com/watch?v=yL7JByLlfrw
 * Source Simplex Dual method: https://www.youtube.com/watch?v=8_D3gkrgeK8
 */
void linprog(float* c, float* A, float* b, float* x, int row_a, int column_a, uint8_t max_or_min, int iteration_limit){
 8002100:	b580      	push	{r7, lr}
 8002102:	b088      	sub	sp, #32
 8002104:	af04      	add	r7, sp, #16
 8002106:	60f8      	str	r0, [r7, #12]
 8002108:	60b9      	str	r1, [r7, #8]
 800210a:	607a      	str	r2, [r7, #4]
 800210c:	603b      	str	r3, [r7, #0]

	if(max_or_min == 0){
 800210e:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002112:	2b00      	cmp	r3, #0
 8002114:	d10f      	bne.n	8002136 <linprog+0x36>
		// Maximization
		opti(c, A, b, x, row_a, column_a, max_or_min, iteration_limit);
 8002116:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002118:	9303      	str	r3, [sp, #12]
 800211a:	f897 3020 	ldrb.w	r3, [r7, #32]
 800211e:	9302      	str	r3, [sp, #8]
 8002120:	69fb      	ldr	r3, [r7, #28]
 8002122:	9301      	str	r3, [sp, #4]
 8002124:	69bb      	ldr	r3, [r7, #24]
 8002126:	9300      	str	r3, [sp, #0]
 8002128:	683b      	ldr	r3, [r7, #0]
 800212a:	687a      	ldr	r2, [r7, #4]
 800212c:	68b9      	ldr	r1, [r7, #8]
 800212e:	68f8      	ldr	r0, [r7, #12]
 8002130:	f000 f81a 	bl	8002168 <opti>
		tran(A, row_a, column_a);

		opti(b, A, c, x, column_a, row_a, max_or_min, iteration_limit);
	}

}
 8002134:	e013      	b.n	800215e <linprog+0x5e>
		tran(A, row_a, column_a);
 8002136:	69fa      	ldr	r2, [r7, #28]
 8002138:	69b9      	ldr	r1, [r7, #24]
 800213a:	68b8      	ldr	r0, [r7, #8]
 800213c:	f7ff ff77 	bl	800202e <tran>
		opti(b, A, c, x, column_a, row_a, max_or_min, iteration_limit);
 8002140:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002142:	9303      	str	r3, [sp, #12]
 8002144:	f897 3020 	ldrb.w	r3, [r7, #32]
 8002148:	9302      	str	r3, [sp, #8]
 800214a:	69bb      	ldr	r3, [r7, #24]
 800214c:	9301      	str	r3, [sp, #4]
 800214e:	69fb      	ldr	r3, [r7, #28]
 8002150:	9300      	str	r3, [sp, #0]
 8002152:	683b      	ldr	r3, [r7, #0]
 8002154:	68fa      	ldr	r2, [r7, #12]
 8002156:	68b9      	ldr	r1, [r7, #8]
 8002158:	6878      	ldr	r0, [r7, #4]
 800215a:	f000 f805 	bl	8002168 <opti>
}
 800215e:	bf00      	nop
 8002160:	3710      	adds	r7, #16
 8002162:	46bd      	mov	sp, r7
 8002164:	bd80      	pop	{r7, pc}
	...

08002168 <opti>:
// This is Simplex method with the Dual included
static void opti(float* c, float* A, float* b, float* x, int row_a, int column_a, uint8_t max_or_min, int iteration_limit){
 8002168:	b5b0      	push	{r4, r5, r7, lr}
 800216a:	b09a      	sub	sp, #104	; 0x68
 800216c:	af00      	add	r7, sp, #0
 800216e:	60f8      	str	r0, [r7, #12]
 8002170:	60b9      	str	r1, [r7, #8]
 8002172:	607a      	str	r2, [r7, #4]
 8002174:	603b      	str	r3, [r7, #0]
 8002176:	466b      	mov	r3, sp
 8002178:	461d      	mov	r5, r3

	// Clear the solution
	if(max_or_min == 0)
 800217a:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 800217e:	2b00      	cmp	r3, #0
 8002180:	d107      	bne.n	8002192 <opti+0x2a>
		memset(x, 0, column_a*sizeof(float));
 8002182:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002184:	009b      	lsls	r3, r3, #2
 8002186:	461a      	mov	r2, r3
 8002188:	2100      	movs	r1, #0
 800218a:	6838      	ldr	r0, [r7, #0]
 800218c:	f00c f8e7 	bl	800e35e <memset>
 8002190:	e006      	b.n	80021a0 <opti+0x38>
	else
		memset(x, 0, row_a*sizeof(float));
 8002192:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002194:	009b      	lsls	r3, r3, #2
 8002196:	461a      	mov	r2, r3
 8002198:	2100      	movs	r1, #0
 800219a:	6838      	ldr	r0, [r7, #0]
 800219c:	f00c f8df 	bl	800e35e <memset>

	// Create the tableau with space for the slack variables s and p as well
	float tableau[(row_a+1)*(column_a+row_a+2)]; // +1 because the extra row for objective function and +2 for the b vector and slackvariable for objective function
 80021a0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80021a2:	3301      	adds	r3, #1
 80021a4:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80021a6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80021a8:	440a      	add	r2, r1
 80021aa:	3202      	adds	r2, #2
 80021ac:	fb02 f003 	mul.w	r0, r2, r3
 80021b0:	1e43      	subs	r3, r0, #1
 80021b2:	623b      	str	r3, [r7, #32]
 80021b4:	4603      	mov	r3, r0
 80021b6:	4619      	mov	r1, r3
 80021b8:	f04f 0200 	mov.w	r2, #0
 80021bc:	f04f 0300 	mov.w	r3, #0
 80021c0:	f04f 0400 	mov.w	r4, #0
 80021c4:	0154      	lsls	r4, r2, #5
 80021c6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021ca:	014b      	lsls	r3, r1, #5
 80021cc:	4603      	mov	r3, r0
 80021ce:	4619      	mov	r1, r3
 80021d0:	f04f 0200 	mov.w	r2, #0
 80021d4:	f04f 0300 	mov.w	r3, #0
 80021d8:	f04f 0400 	mov.w	r4, #0
 80021dc:	0154      	lsls	r4, r2, #5
 80021de:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 80021e2:	014b      	lsls	r3, r1, #5
 80021e4:	4603      	mov	r3, r0
 80021e6:	009b      	lsls	r3, r3, #2
 80021e8:	3303      	adds	r3, #3
 80021ea:	3307      	adds	r3, #7
 80021ec:	08db      	lsrs	r3, r3, #3
 80021ee:	00db      	lsls	r3, r3, #3
 80021f0:	ebad 0d03 	sub.w	sp, sp, r3
 80021f4:	466b      	mov	r3, sp
 80021f6:	3303      	adds	r3, #3
 80021f8:	089b      	lsrs	r3, r3, #2
 80021fa:	009b      	lsls	r3, r3, #2
 80021fc:	61fb      	str	r3, [r7, #28]
	memset(tableau, 0, (row_a+1)*(column_a+row_a+2)*sizeof(float));
 80021fe:	69f8      	ldr	r0, [r7, #28]
 8002200:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002202:	3301      	adds	r3, #1
 8002204:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002206:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8002208:	440a      	add	r2, r1
 800220a:	3202      	adds	r2, #2
 800220c:	fb02 f303 	mul.w	r3, r2, r3
 8002210:	009b      	lsls	r3, r3, #2
 8002212:	461a      	mov	r2, r3
 8002214:	2100      	movs	r1, #0
 8002216:	f00c f8a2 	bl	800e35e <memset>

	// Load the constraints
	int j = 0;
 800221a:	2300      	movs	r3, #0
 800221c:	61bb      	str	r3, [r7, #24]
	for(int i = 0; i < row_a; i++){
 800221e:	2300      	movs	r3, #0
 8002220:	65bb      	str	r3, [r7, #88]	; 0x58
 8002222:	e040      	b.n	80022a6 <opti+0x13e>
		// First row
		memcpy(tableau + i*(column_a+row_a+2), A + i*column_a, column_a*sizeof(float));
 8002224:	69fa      	ldr	r2, [r7, #28]
 8002226:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002228:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800222a:	440b      	add	r3, r1
 800222c:	3302      	adds	r3, #2
 800222e:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002230:	fb01 f303 	mul.w	r3, r1, r3
 8002234:	009b      	lsls	r3, r3, #2
 8002236:	18d0      	adds	r0, r2, r3
 8002238:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800223a:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800223c:	fb02 f303 	mul.w	r3, r2, r3
 8002240:	009b      	lsls	r3, r3, #2
 8002242:	68ba      	ldr	r2, [r7, #8]
 8002244:	18d1      	adds	r1, r2, r3
 8002246:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002248:	009b      	lsls	r3, r3, #2
 800224a:	461a      	mov	r2, r3
 800224c:	f00c f87c 	bl	800e348 <memcpy>

		// Slack variable s
		j = column_a + i;
 8002250:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002252:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002254:	4413      	add	r3, r2
 8002256:	61bb      	str	r3, [r7, #24]
		tableau[i*(column_a+row_a+2) + j] = 1;
 8002258:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800225a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800225c:	4413      	add	r3, r2
 800225e:	3302      	adds	r3, #2
 8002260:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002262:	fb02 f203 	mul.w	r2, r2, r3
 8002266:	69bb      	ldr	r3, [r7, #24]
 8002268:	4413      	add	r3, r2
 800226a:	69fa      	ldr	r2, [r7, #28]
 800226c:	009b      	lsls	r3, r3, #2
 800226e:	4413      	add	r3, r2
 8002270:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8002274:	601a      	str	r2, [r3, #0]

		// Add b vector
		tableau[i*(column_a+row_a+2) + (column_a+row_a+2-1)] = *(b+i);
 8002276:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8002278:	009b      	lsls	r3, r3, #2
 800227a:	687a      	ldr	r2, [r7, #4]
 800227c:	441a      	add	r2, r3
 800227e:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002280:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002282:	440b      	add	r3, r1
 8002284:	3302      	adds	r3, #2
 8002286:	6db9      	ldr	r1, [r7, #88]	; 0x58
 8002288:	fb01 f103 	mul.w	r1, r1, r3
 800228c:	6ff8      	ldr	r0, [r7, #124]	; 0x7c
 800228e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002290:	4403      	add	r3, r0
 8002292:	3301      	adds	r3, #1
 8002294:	440b      	add	r3, r1
 8002296:	6812      	ldr	r2, [r2, #0]
 8002298:	69f9      	ldr	r1, [r7, #28]
 800229a:	009b      	lsls	r3, r3, #2
 800229c:	440b      	add	r3, r1
 800229e:	601a      	str	r2, [r3, #0]
	for(int i = 0; i < row_a; i++){
 80022a0:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 80022a2:	3301      	adds	r3, #1
 80022a4:	65bb      	str	r3, [r7, #88]	; 0x58
 80022a6:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80022a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022aa:	429a      	cmp	r2, r3
 80022ac:	dbba      	blt.n	8002224 <opti+0xbc>
	}

	// Negative objective function
	for(int i = 0; i < column_a; i++){
 80022ae:	2300      	movs	r3, #0
 80022b0:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022b2:	e018      	b.n	80022e6 <opti+0x17e>
		tableau[(row_a+1-1)*(column_a+row_a+2) + i] = -*(c +i);
 80022b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022b6:	009b      	lsls	r3, r3, #2
 80022b8:	68fa      	ldr	r2, [r7, #12]
 80022ba:	4413      	add	r3, r2
 80022bc:	edd3 7a00 	vldr	s15, [r3]
 80022c0:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80022c2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022c4:	4413      	add	r3, r2
 80022c6:	3302      	adds	r3, #2
 80022c8:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80022ca:	fb02 f203 	mul.w	r2, r2, r3
 80022ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022d0:	4413      	add	r3, r2
 80022d2:	eef1 7a67 	vneg.f32	s15, s15
 80022d6:	69fa      	ldr	r2, [r7, #28]
 80022d8:	009b      	lsls	r3, r3, #2
 80022da:	4413      	add	r3, r2
 80022dc:	edc3 7a00 	vstr	s15, [r3]
	for(int i = 0; i < column_a; i++){
 80022e0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80022e2:	3301      	adds	r3, #1
 80022e4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80022e6:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80022e8:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80022ea:	429a      	cmp	r2, r3
 80022ec:	dbe2      	blt.n	80022b4 <opti+0x14c>
	}
	// Slack variable for the objective function
	tableau[(row_a+1-1)*(column_a+row_a+2) + (column_a+row_a+2-2)] = 1;
 80022ee:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80022f0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80022f2:	4413      	add	r3, r2
 80022f4:	3302      	adds	r3, #2
 80022f6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 80022f8:	fb02 f203 	mul.w	r2, r2, r3
 80022fc:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80022fe:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002300:	440b      	add	r3, r1
 8002302:	4413      	add	r3, r2
 8002304:	69fa      	ldr	r2, [r7, #28]
 8002306:	009b      	lsls	r3, r3, #2
 8002308:	4413      	add	r3, r2
 800230a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 800230e:	601a      	str	r2, [r3, #0]

	// Print tableau
	//print(tableau,(row_a+1),(column_a+row_a+2));

	// Do row operations
	float entry = 0.0;
 8002310:	f04f 0300 	mov.w	r3, #0
 8002314:	663b      	str	r3, [r7, #96]	; 0x60
	int pivotColumIndex = 0;
 8002316:	2300      	movs	r3, #0
 8002318:	667b      	str	r3, [r7, #100]	; 0x64
	int pivotRowIndex = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	657b      	str	r3, [r7, #84]	; 0x54
	float pivot = 0.0;
 800231e:	f04f 0300 	mov.w	r3, #0
 8002322:	653b      	str	r3, [r7, #80]	; 0x50
	float value1 = 0.0;
 8002324:	f04f 0300 	mov.w	r3, #0
 8002328:	64fb      	str	r3, [r7, #76]	; 0x4c
	float value2 = 0.0;
 800232a:	f04f 0300 	mov.w	r3, #0
 800232e:	617b      	str	r3, [r7, #20]
	float value3 = 0.0;
 8002330:	f04f 0300 	mov.w	r3, #0
 8002334:	613b      	str	r3, [r7, #16]
	float smallest = 0.0;
 8002336:	f04f 0300 	mov.w	r3, #0
 800233a:	64bb      	str	r3, [r7, #72]	; 0x48
	int count = 0;
 800233c:	2300      	movs	r3, #0
 800233e:	647b      	str	r3, [r7, #68]	; 0x44
	do{
		// Find our pivot column
		pivotColumIndex = 0;
 8002340:	2300      	movs	r3, #0
 8002342:	667b      	str	r3, [r7, #100]	; 0x64
		entry = 0.0;
 8002344:	f04f 0300 	mov.w	r3, #0
 8002348:	663b      	str	r3, [r7, #96]	; 0x60
		for(int i = 0; i < (column_a+row_a+2) -1; i++){ // -1 because we don't want to count with the last column
 800234a:	2300      	movs	r3, #0
 800234c:	643b      	str	r3, [r7, #64]	; 0x40
 800234e:	e01e      	b.n	800238e <opti+0x226>
			value1 = *(tableau + (row_a+1-1)*(column_a+row_a+2) + i); // Bottom row
 8002350:	69fa      	ldr	r2, [r7, #28]
 8002352:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002354:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002356:	440b      	add	r3, r1
 8002358:	3302      	adds	r3, #2
 800235a:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 800235c:	fb01 f303 	mul.w	r3, r1, r3
 8002360:	4619      	mov	r1, r3
 8002362:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002364:	440b      	add	r3, r1
 8002366:	009b      	lsls	r3, r3, #2
 8002368:	4413      	add	r3, r2
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	64fb      	str	r3, [r7, #76]	; 0x4c
			if(value1 < entry){
 800236e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002372:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002376:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800237a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237e:	d503      	bpl.n	8002388 <opti+0x220>
				entry = value1;
 8002380:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8002382:	663b      	str	r3, [r7, #96]	; 0x60
				pivotColumIndex = i;
 8002384:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8002386:	667b      	str	r3, [r7, #100]	; 0x64
		for(int i = 0; i < (column_a+row_a+2) -1; i++){ // -1 because we don't want to count with the last column
 8002388:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800238a:	3301      	adds	r3, #1
 800238c:	643b      	str	r3, [r7, #64]	; 0x40
 800238e:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002390:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002392:	4413      	add	r3, r2
 8002394:	3301      	adds	r3, #1
 8002396:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8002398:	429a      	cmp	r2, r3
 800239a:	dbd9      	blt.n	8002350 <opti+0x1e8>
			}
		}
		//printf("Entry = %f\n", entry);
		// If the smallest entry is equal to 0 or larger than 0, break
		if(entry >= 0.0 || count >= iteration_limit)
 800239c:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 80023a0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80023a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023a8:	f280 813a 	bge.w	8002620 <opti+0x4b8>
 80023ac:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80023ae:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80023b2:	429a      	cmp	r2, r3
 80023b4:	f280 8134 	bge.w	8002620 <opti+0x4b8>
			break;

		// Find our pivot row
		pivotRowIndex = 0;
 80023b8:	2300      	movs	r3, #0
 80023ba:	657b      	str	r3, [r7, #84]	; 0x54
		value1 = *(tableau + 0*(column_a+row_a+2) + pivotColumIndex); // Value in pivot column
 80023bc:	69fa      	ldr	r2, [r7, #28]
 80023be:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	4413      	add	r3, r2
 80023c4:	681b      	ldr	r3, [r3, #0]
 80023c6:	64fb      	str	r3, [r7, #76]	; 0x4c
		if(value1 == 0) value1 = FLT_EPSILON; // Make sure that we don't divide by zero
 80023c8:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80023cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80023d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023d4:	d102      	bne.n	80023dc <opti+0x274>
 80023d6:	f04f 5350 	mov.w	r3, #872415232	; 0x34000000
 80023da:	64fb      	str	r3, [r7, #76]	; 0x4c
		value2 = *(tableau + 0*(column_a+row_a+2) + (column_a+row_a+2-1)); // Value in the b vector
 80023dc:	69fa      	ldr	r2, [r7, #28]
 80023de:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80023e0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80023e2:	440b      	add	r3, r1
 80023e4:	3301      	adds	r3, #1
 80023e6:	009b      	lsls	r3, r3, #2
 80023e8:	4413      	add	r3, r2
 80023ea:	681b      	ldr	r3, [r3, #0]
 80023ec:	617b      	str	r3, [r7, #20]
		smallest = value2/value1; // Initial smallest value
 80023ee:	edd7 6a05 	vldr	s13, [r7, #20]
 80023f2:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 80023f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80023fa:	edc7 7a12 	vstr	s15, [r7, #72]	; 0x48
		for(int i = 1; i < row_a; i++){
 80023fe:	2301      	movs	r3, #1
 8002400:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002402:	e050      	b.n	80024a6 <opti+0x33e>
			value1 = *(tableau + i*(column_a+row_a+2) + pivotColumIndex); // Value in pivot column
 8002404:	69fa      	ldr	r2, [r7, #28]
 8002406:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002408:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800240a:	440b      	add	r3, r1
 800240c:	3302      	adds	r3, #2
 800240e:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002410:	fb01 f303 	mul.w	r3, r1, r3
 8002414:	4619      	mov	r1, r3
 8002416:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002418:	440b      	add	r3, r1
 800241a:	009b      	lsls	r3, r3, #2
 800241c:	4413      	add	r3, r2
 800241e:	681b      	ldr	r3, [r3, #0]
 8002420:	64fb      	str	r3, [r7, #76]	; 0x4c
			if(value1 == 0) value1 = FLT_EPSILON;
 8002422:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002426:	eef5 7a40 	vcmp.f32	s15, #0.0
 800242a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800242e:	d102      	bne.n	8002436 <opti+0x2ce>
 8002430:	f04f 5350 	mov.w	r3, #872415232	; 0x34000000
 8002434:	64fb      	str	r3, [r7, #76]	; 0x4c
			value2 = *(tableau + i*(column_a+row_a+2) + (column_a+row_a+2-1)); // Value in the b vector
 8002436:	69fa      	ldr	r2, [r7, #28]
 8002438:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800243a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800243c:	440b      	add	r3, r1
 800243e:	3302      	adds	r3, #2
 8002440:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8002442:	fb01 f303 	mul.w	r3, r1, r3
 8002446:	4618      	mov	r0, r3
 8002448:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800244a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800244c:	440b      	add	r3, r1
 800244e:	4403      	add	r3, r0
 8002450:	3301      	adds	r3, #1
 8002452:	009b      	lsls	r3, r3, #2
 8002454:	4413      	add	r3, r2
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	617b      	str	r3, [r7, #20]
			value3 = value2/value1;
 800245a:	edd7 6a05 	vldr	s13, [r7, #20]
 800245e:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 8002462:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002466:	edc7 7a04 	vstr	s15, [r7, #16]
			if( (value3 > 0  && value3 < smallest ) || smallest < 0 ){
 800246a:	edd7 7a04 	vldr	s15, [r7, #16]
 800246e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002472:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002476:	dd08      	ble.n	800248a <opti+0x322>
 8002478:	ed97 7a04 	vldr	s14, [r7, #16]
 800247c:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 8002480:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002484:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002488:	d406      	bmi.n	8002498 <opti+0x330>
 800248a:	edd7 7a12 	vldr	s15, [r7, #72]	; 0x48
 800248e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002492:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002496:	d503      	bpl.n	80024a0 <opti+0x338>
				smallest = value3;
 8002498:	693b      	ldr	r3, [r7, #16]
 800249a:	64bb      	str	r3, [r7, #72]	; 0x48
				pivotRowIndex = i;
 800249c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800249e:	657b      	str	r3, [r7, #84]	; 0x54
		for(int i = 1; i < row_a; i++){
 80024a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80024a2:	3301      	adds	r3, #1
 80024a4:	63fb      	str	r3, [r7, #60]	; 0x3c
 80024a6:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80024a8:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024aa:	429a      	cmp	r2, r3
 80024ac:	dbaa      	blt.n	8002404 <opti+0x29c>
			}
		}

		// We know where our pivot is. Turn the pivot into 1
		// 1/pivot * PIVOT_ROW -> PIVOT_ROW
		pivot = *(tableau + pivotRowIndex*(column_a+row_a+2) + pivotColumIndex); // Our pivot value
 80024ae:	69fa      	ldr	r2, [r7, #28]
 80024b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80024b2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024b4:	440b      	add	r3, r1
 80024b6:	3302      	adds	r3, #2
 80024b8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80024ba:	fb01 f303 	mul.w	r3, r1, r3
 80024be:	4619      	mov	r1, r3
 80024c0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80024c2:	440b      	add	r3, r1
 80024c4:	009b      	lsls	r3, r3, #2
 80024c6:	4413      	add	r3, r2
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	653b      	str	r3, [r7, #80]	; 0x50
		if(pivot == 0) pivot = FLT_EPSILON;
 80024cc:	edd7 7a14 	vldr	s15, [r7, #80]	; 0x50
 80024d0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d8:	d102      	bne.n	80024e0 <opti+0x378>
 80024da:	f04f 5350 	mov.w	r3, #872415232	; 0x34000000
 80024de:	653b      	str	r3, [r7, #80]	; 0x50
		//printf("pivotRowIndex = %i, pivotColumIndex = %i, pivot = %f\n", pivotRowIndex, pivotColumIndex, pivot);
		for(int i = 0; i < (column_a+row_a+2); i++){
 80024e0:	2300      	movs	r3, #0
 80024e2:	63bb      	str	r3, [r7, #56]	; 0x38
 80024e4:	e026      	b.n	8002534 <opti+0x3cc>
			value1 = *(tableau + pivotRowIndex*(column_a+row_a+2) + i); // Our row value at pivot row
 80024e6:	69fa      	ldr	r2, [r7, #28]
 80024e8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80024ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80024ec:	440b      	add	r3, r1
 80024ee:	3302      	adds	r3, #2
 80024f0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80024f2:	fb01 f303 	mul.w	r3, r1, r3
 80024f6:	4619      	mov	r1, r3
 80024f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80024fa:	440b      	add	r3, r1
 80024fc:	009b      	lsls	r3, r3, #2
 80024fe:	4413      	add	r3, r2
 8002500:	681b      	ldr	r3, [r3, #0]
 8002502:	64fb      	str	r3, [r7, #76]	; 0x4c
			*(tableau + pivotRowIndex*(column_a+row_a+2) + i) = value1 * 1/pivot; // When value1 = pivot, then pivot will be 1
 8002504:	69fa      	ldr	r2, [r7, #28]
 8002506:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002508:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800250a:	440b      	add	r3, r1
 800250c:	3302      	adds	r3, #2
 800250e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002510:	fb01 f303 	mul.w	r3, r1, r3
 8002514:	4619      	mov	r1, r3
 8002516:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002518:	440b      	add	r3, r1
 800251a:	009b      	lsls	r3, r3, #2
 800251c:	4413      	add	r3, r2
 800251e:	edd7 6a13 	vldr	s13, [r7, #76]	; 0x4c
 8002522:	ed97 7a14 	vldr	s14, [r7, #80]	; 0x50
 8002526:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800252a:	edc3 7a00 	vstr	s15, [r3]
		for(int i = 0; i < (column_a+row_a+2); i++){
 800252e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8002530:	3301      	adds	r3, #1
 8002532:	63bb      	str	r3, [r7, #56]	; 0x38
 8002534:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 8002536:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002538:	4413      	add	r3, r2
 800253a:	3302      	adds	r3, #2
 800253c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800253e:	429a      	cmp	r2, r3
 8002540:	dbd1      	blt.n	80024e6 <opti+0x37e>
		//printf("Set to 1\n");
		//print(tableau,(row_a+1),(column_a+row_a+2));

		// Turn all other values in pivot column into 0. Jump over pivot row
		// -value1* PIVOT_ROW + ROW -> ROW
		for(int i = 0; i < row_a + 1; i++){
 8002542:	2300      	movs	r3, #0
 8002544:	637b      	str	r3, [r7, #52]	; 0x34
 8002546:	e05b      	b.n	8002600 <opti+0x498>
			if(i != pivotRowIndex){
 8002548:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800254a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800254c:	429a      	cmp	r2, r3
 800254e:	d054      	beq.n	80025fa <opti+0x492>
				value1 = *(tableau + i*(column_a+row_a+2) + pivotColumIndex); // This is at pivot column
 8002550:	69fa      	ldr	r2, [r7, #28]
 8002552:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002554:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002556:	440b      	add	r3, r1
 8002558:	3302      	adds	r3, #2
 800255a:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800255c:	fb01 f303 	mul.w	r3, r1, r3
 8002560:	4619      	mov	r1, r3
 8002562:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8002564:	440b      	add	r3, r1
 8002566:	009b      	lsls	r3, r3, #2
 8002568:	4413      	add	r3, r2
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	64fb      	str	r3, [r7, #76]	; 0x4c
				for(int j = 0; j < (column_a+row_a+2); j++){
 800256e:	2300      	movs	r3, #0
 8002570:	633b      	str	r3, [r7, #48]	; 0x30
 8002572:	e03b      	b.n	80025ec <opti+0x484>
					value2 = *(tableau + pivotRowIndex*(column_a+row_a+2) + j); // This is at pivot row
 8002574:	69fa      	ldr	r2, [r7, #28]
 8002576:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002578:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800257a:	440b      	add	r3, r1
 800257c:	3302      	adds	r3, #2
 800257e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8002580:	fb01 f303 	mul.w	r3, r1, r3
 8002584:	4619      	mov	r1, r3
 8002586:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8002588:	440b      	add	r3, r1
 800258a:	009b      	lsls	r3, r3, #2
 800258c:	4413      	add	r3, r2
 800258e:	681b      	ldr	r3, [r3, #0]
 8002590:	617b      	str	r3, [r7, #20]
					value3 = *(tableau + i*(column_a+row_a+2) + j); // This is at the row we want to be 0 at pivot column
 8002592:	69fa      	ldr	r2, [r7, #28]
 8002594:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002596:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002598:	440b      	add	r3, r1
 800259a:	3302      	adds	r3, #2
 800259c:	6b79      	ldr	r1, [r7, #52]	; 0x34
 800259e:	fb01 f303 	mul.w	r3, r1, r3
 80025a2:	4619      	mov	r1, r3
 80025a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025a6:	440b      	add	r3, r1
 80025a8:	009b      	lsls	r3, r3, #2
 80025aa:	4413      	add	r3, r2
 80025ac:	681b      	ldr	r3, [r3, #0]
 80025ae:	613b      	str	r3, [r7, #16]
					*(tableau + i*(column_a+row_a+2) + j) = -value1*value2 + value3;
 80025b0:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 80025b4:	eeb1 7a67 	vneg.f32	s14, s15
 80025b8:	edd7 7a05 	vldr	s15, [r7, #20]
 80025bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80025c0:	69fa      	ldr	r2, [r7, #28]
 80025c2:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80025c4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025c6:	440b      	add	r3, r1
 80025c8:	3302      	adds	r3, #2
 80025ca:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80025cc:	fb01 f303 	mul.w	r3, r1, r3
 80025d0:	4619      	mov	r1, r3
 80025d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025d4:	440b      	add	r3, r1
 80025d6:	009b      	lsls	r3, r3, #2
 80025d8:	4413      	add	r3, r2
 80025da:	edd7 7a04 	vldr	s15, [r7, #16]
 80025de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025e2:	edc3 7a00 	vstr	s15, [r3]
				for(int j = 0; j < (column_a+row_a+2); j++){
 80025e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80025e8:	3301      	adds	r3, #1
 80025ea:	633b      	str	r3, [r7, #48]	; 0x30
 80025ec:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 80025ee:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80025f0:	4413      	add	r3, r2
 80025f2:	3302      	adds	r3, #2
 80025f4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80025f6:	429a      	cmp	r2, r3
 80025f8:	dbbc      	blt.n	8002574 <opti+0x40c>
		for(int i = 0; i < row_a + 1; i++){
 80025fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80025fc:	3301      	adds	r3, #1
 80025fe:	637b      	str	r3, [r7, #52]	; 0x34
 8002600:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002602:	3301      	adds	r3, #1
 8002604:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8002606:	429a      	cmp	r2, r3
 8002608:	db9e      	blt.n	8002548 <opti+0x3e0>
		}
		//printf("Set to 0\n");
		//print(tableau,(row_a+1),(column_a+row_a+2));

		// Count for the iteration
		count++;
 800260a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800260c:	3301      	adds	r3, #1
 800260e:	647b      	str	r3, [r7, #68]	; 0x44

	}while(entry < 0); // Continue if we have still negative entries
 8002610:	edd7 7a18 	vldr	s15, [r7, #96]	; 0x60
 8002614:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002618:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800261c:	f53f ae90 	bmi.w	8002340 <opti+0x1d8>

	// If max_or_min == 0 -> Maximization problem
	if(max_or_min == 0){
 8002620:	f897 3080 	ldrb.w	r3, [r7, #128]	; 0x80
 8002624:	2b00      	cmp	r3, #0
 8002626:	d16d      	bne.n	8002704 <opti+0x59c>
		// Now when we have shaped our tableau. Let's find the optimal solution. Sum the columns
		for(int i = 0; i < column_a; i++){
 8002628:	2300      	movs	r3, #0
 800262a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800262c:	e065      	b.n	80026fa <opti+0x592>
			value1 = 0; // Reset
 800262e:	f04f 0300 	mov.w	r3, #0
 8002632:	64fb      	str	r3, [r7, #76]	; 0x4c
			for(int j = 0; j < row_a + 1; j++){
 8002634:	2300      	movs	r3, #0
 8002636:	62bb      	str	r3, [r7, #40]	; 0x28
 8002638:	e057      	b.n	80026ea <opti+0x582>
				value1 += *(tableau + j*(column_a+row_a+2) + i); // Summary
 800263a:	69fa      	ldr	r2, [r7, #28]
 800263c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800263e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002640:	440b      	add	r3, r1
 8002642:	3302      	adds	r3, #2
 8002644:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002646:	fb01 f303 	mul.w	r3, r1, r3
 800264a:	4619      	mov	r1, r3
 800264c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800264e:	440b      	add	r3, r1
 8002650:	009b      	lsls	r3, r3, #2
 8002652:	4413      	add	r3, r2
 8002654:	edd3 7a00 	vldr	s15, [r3]
 8002658:	ed97 7a13 	vldr	s14, [r7, #76]	; 0x4c
 800265c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002660:	edc7 7a13 	vstr	s15, [r7, #76]	; 0x4c
				value2 = *(tableau + j*(column_a+row_a+2) + i); // If this is 1 then we are on the selected
 8002664:	69fa      	ldr	r2, [r7, #28]
 8002666:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8002668:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800266a:	440b      	add	r3, r1
 800266c:	3302      	adds	r3, #2
 800266e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8002670:	fb01 f303 	mul.w	r3, r1, r3
 8002674:	4619      	mov	r1, r3
 8002676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002678:	440b      	add	r3, r1
 800267a:	009b      	lsls	r3, r3, #2
 800267c:	4413      	add	r3, r2
 800267e:	681b      	ldr	r3, [r3, #0]
 8002680:	617b      	str	r3, [r7, #20]

				// Check if we have a value that are very close to 1
				if(value1 < 1 + FLT_EPSILON && value1 > 1 - FLT_EPSILON && value2 > 1 - FLT_EPSILON){
 8002682:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002686:	ed9f 7a31 	vldr	s14, [pc, #196]	; 800274c <opti+0x5e4>
 800268a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800268e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002692:	d527      	bpl.n	80026e4 <opti+0x57c>
 8002694:	edd7 7a13 	vldr	s15, [r7, #76]	; 0x4c
 8002698:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8002750 <opti+0x5e8>
 800269c:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026a0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a4:	dd1e      	ble.n	80026e4 <opti+0x57c>
 80026a6:	edd7 7a05 	vldr	s15, [r7, #20]
 80026aa:	ed9f 7a29 	vldr	s14, [pc, #164]	; 8002750 <opti+0x5e8>
 80026ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b6:	dd15      	ble.n	80026e4 <opti+0x57c>
					*(x + i) = *(tableau + j*(column_a+row_a+2) + (column_a+row_a+2-1));
 80026b8:	69fa      	ldr	r2, [r7, #28]
 80026ba:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80026bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026be:	440b      	add	r3, r1
 80026c0:	3302      	adds	r3, #2
 80026c2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80026c4:	fb01 f303 	mul.w	r3, r1, r3
 80026c8:	4618      	mov	r0, r3
 80026ca:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80026cc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026ce:	440b      	add	r3, r1
 80026d0:	4403      	add	r3, r0
 80026d2:	3301      	adds	r3, #1
 80026d4:	009b      	lsls	r3, r3, #2
 80026d6:	441a      	add	r2, r3
 80026d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026da:	009b      	lsls	r3, r3, #2
 80026dc:	6839      	ldr	r1, [r7, #0]
 80026de:	440b      	add	r3, r1
 80026e0:	6812      	ldr	r2, [r2, #0]
 80026e2:	601a      	str	r2, [r3, #0]
			for(int j = 0; j < row_a + 1; j++){
 80026e4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80026e6:	3301      	adds	r3, #1
 80026e8:	62bb      	str	r3, [r7, #40]	; 0x28
 80026ea:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80026ec:	3301      	adds	r3, #1
 80026ee:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80026f0:	429a      	cmp	r2, r3
 80026f2:	dba2      	blt.n	800263a <opti+0x4d2>
		for(int i = 0; i < column_a; i++){
 80026f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80026f6:	3301      	adds	r3, #1
 80026f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80026fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80026fc:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80026fe:	429a      	cmp	r2, r3
 8002700:	db95      	blt.n	800262e <opti+0x4c6>
 8002702:	e01e      	b.n	8002742 <opti+0x5da>
			}
			//printf("value1 = %f, value2 = %f\n", value1, value2);
		}
	}else{
		// Minimization (The Dual method) - Only take the bottom rows on the slack variables
		for(int i = 0; i < row_a; i++){
 8002704:	2300      	movs	r3, #0
 8002706:	627b      	str	r3, [r7, #36]	; 0x24
 8002708:	e017      	b.n	800273a <opti+0x5d2>
			*(x + i) = *(tableau + row_a*(column_a+row_a+2) + i + column_a); // We take only the bottom row at start index column_a
 800270a:	69fa      	ldr	r2, [r7, #28]
 800270c:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800270e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8002710:	440b      	add	r3, r1
 8002712:	3302      	adds	r3, #2
 8002714:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8002716:	fb01 f303 	mul.w	r3, r1, r3
 800271a:	4619      	mov	r1, r3
 800271c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800271e:	4419      	add	r1, r3
 8002720:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 8002722:	440b      	add	r3, r1
 8002724:	009b      	lsls	r3, r3, #2
 8002726:	441a      	add	r2, r3
 8002728:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800272a:	009b      	lsls	r3, r3, #2
 800272c:	6839      	ldr	r1, [r7, #0]
 800272e:	440b      	add	r3, r1
 8002730:	6812      	ldr	r2, [r2, #0]
 8002732:	601a      	str	r2, [r3, #0]
		for(int i = 0; i < row_a; i++){
 8002734:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002736:	3301      	adds	r3, #1
 8002738:	627b      	str	r3, [r7, #36]	; 0x24
 800273a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800273c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800273e:	429a      	cmp	r2, r3
 8002740:	dbe3      	blt.n	800270a <opti+0x5a2>
 8002742:	46ad      	mov	sp, r5
		}
	}

	//print(tableau,(row_a+1),(column_a+row_a+2));
}
 8002744:	bf00      	nop
 8002746:	3768      	adds	r7, #104	; 0x68
 8002748:	46bd      	mov	sp, r7
 800274a:	bdb0      	pop	{r4, r5, r7, pc}
 800274c:	3f800001 	.word	0x3f800001
 8002750:	3f7ffffe 	.word	0x3f7ffffe

08002754 <FlashEraseSector>:
static uint32_t SectorAddrs;
static uint8_t SectorNum;

//functions definitions
//1. Erase Sector
void FlashEraseSector() {
 8002754:	b580      	push	{r7, lr}
 8002756:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 8002758:	f005 fd60 	bl	800821c <HAL_FLASH_Unlock>
	//Erase the required Flash sector
	FLASH_Erase_Sector(SectorNum, FLASH_VOLTAGE_RANGE_3);
 800275c:	4b04      	ldr	r3, [pc, #16]	; (8002770 <FlashEraseSector+0x1c>)
 800275e:	781b      	ldrb	r3, [r3, #0]
 8002760:	2102      	movs	r1, #2
 8002762:	4618      	mov	r0, r3
 8002764:	f005 feca 	bl	80084fc <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 8002768:	f005 fd7a 	bl	8008260 <HAL_FLASH_Lock>
}
 800276c:	bf00      	nop
 800276e:	bd80      	pop	{r7, pc}
 8002770:	20000208 	.word	0x20000208

08002774 <FlashSetSectorAddrs>:

//2. Set Sector Adress
void FlashSetSectorAddrs(uint8_t sector, uint32_t addrs) {
 8002774:	b480      	push	{r7}
 8002776:	b083      	sub	sp, #12
 8002778:	af00      	add	r7, sp, #0
 800277a:	4603      	mov	r3, r0
 800277c:	6039      	str	r1, [r7, #0]
 800277e:	71fb      	strb	r3, [r7, #7]
	SectorNum = sector;
 8002780:	4a05      	ldr	r2, [pc, #20]	; (8002798 <FlashSetSectorAddrs+0x24>)
 8002782:	79fb      	ldrb	r3, [r7, #7]
 8002784:	7013      	strb	r3, [r2, #0]
	SectorAddrs = addrs;
 8002786:	4a05      	ldr	r2, [pc, #20]	; (800279c <FlashSetSectorAddrs+0x28>)
 8002788:	683b      	ldr	r3, [r7, #0]
 800278a:	6013      	str	r3, [r2, #0]
}
 800278c:	bf00      	nop
 800278e:	370c      	adds	r7, #12
 8002790:	46bd      	mov	sp, r7
 8002792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002796:	4770      	bx	lr
 8002798:	20000208 	.word	0x20000208
 800279c:	20000204 	.word	0x20000204

080027a0 <FlashWriteN>:

//3. Write Flash
void FlashWriteN(uint32_t idx, void *wrBuf, uint32_t Nsize, DataTypeDef dataType) {
 80027a0:	b590      	push	{r4, r7, lr}
 80027a2:	b08d      	sub	sp, #52	; 0x34
 80027a4:	af00      	add	r7, sp, #0
 80027a6:	60f8      	str	r0, [r7, #12]
 80027a8:	60b9      	str	r1, [r7, #8]
 80027aa:	607a      	str	r2, [r7, #4]
 80027ac:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = SectorAddrs + idx;
 80027ae:	4b48      	ldr	r3, [pc, #288]	; (80028d0 <FlashWriteN+0x130>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	68fa      	ldr	r2, [r7, #12]
 80027b4:	4413      	add	r3, r2
 80027b6:	62fb      	str	r3, [r7, #44]	; 0x2c
	// Converter
	Convert convert;
	uint8_t wrBuf2[4];

	//Unlock Flash
	HAL_FLASH_Unlock();
 80027b8:	f005 fd30 	bl	800821c <HAL_FLASH_Unlock>
	//Write to Flash
	switch (dataType) {
 80027bc:	78fb      	ldrb	r3, [r7, #3]
 80027be:	2b03      	cmp	r3, #3
 80027c0:	d87f      	bhi.n	80028c2 <FlashWriteN+0x122>
 80027c2:	a201      	add	r2, pc, #4	; (adr r2, 80027c8 <FlashWriteN+0x28>)
 80027c4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80027c8:	080027d9 	.word	0x080027d9
 80027cc:	0800280f 	.word	0x0800280f
 80027d0:	08002847 	.word	0x08002847
 80027d4:	0800287d 	.word	0x0800287d
	case DATA_TYPE_U8:
		for (uint32_t i = 0; i < Nsize; i++) {
 80027d8:	2300      	movs	r3, #0
 80027da:	62bb      	str	r3, [r7, #40]	; 0x28
 80027dc:	e012      	b.n	8002804 <FlashWriteN+0x64>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddress, ((uint8_t*) wrBuf)[i]);
 80027de:	68ba      	ldr	r2, [r7, #8]
 80027e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80027e2:	4413      	add	r3, r2
 80027e4:	781b      	ldrb	r3, [r3, #0]
 80027e6:	b2db      	uxtb	r3, r3
 80027e8:	f04f 0400 	mov.w	r4, #0
 80027ec:	461a      	mov	r2, r3
 80027ee:	4623      	mov	r3, r4
 80027f0:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80027f2:	2000      	movs	r0, #0
 80027f4:	f005 fcbe 	bl	8008174 <HAL_FLASH_Program>
			flashAddress++;
 80027f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80027fa:	3301      	adds	r3, #1
 80027fc:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 0; i < Nsize; i++) {
 80027fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002800:	3301      	adds	r3, #1
 8002802:	62bb      	str	r3, [r7, #40]	; 0x28
 8002804:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002806:	687b      	ldr	r3, [r7, #4]
 8002808:	429a      	cmp	r2, r3
 800280a:	d3e8      	bcc.n	80027de <FlashWriteN+0x3e>
		}
		break;
 800280c:	e059      	b.n	80028c2 <FlashWriteN+0x122>

	case DATA_TYPE_U16:
		for (uint32_t i = 0; i < Nsize; i++) {
 800280e:	2300      	movs	r3, #0
 8002810:	627b      	str	r3, [r7, #36]	; 0x24
 8002812:	e013      	b.n	800283c <FlashWriteN+0x9c>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress, ((uint16_t*) wrBuf)[i]);
 8002814:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002816:	005b      	lsls	r3, r3, #1
 8002818:	68ba      	ldr	r2, [r7, #8]
 800281a:	4413      	add	r3, r2
 800281c:	881b      	ldrh	r3, [r3, #0]
 800281e:	b29b      	uxth	r3, r3
 8002820:	f04f 0400 	mov.w	r4, #0
 8002824:	461a      	mov	r2, r3
 8002826:	4623      	mov	r3, r4
 8002828:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800282a:	2001      	movs	r0, #1
 800282c:	f005 fca2 	bl	8008174 <HAL_FLASH_Program>
			flashAddress += 2;
 8002830:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002832:	3302      	adds	r3, #2
 8002834:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 0; i < Nsize; i++) {
 8002836:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002838:	3301      	adds	r3, #1
 800283a:	627b      	str	r3, [r7, #36]	; 0x24
 800283c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	429a      	cmp	r2, r3
 8002842:	d3e7      	bcc.n	8002814 <FlashWriteN+0x74>
		}
		break;
 8002844:	e03d      	b.n	80028c2 <FlashWriteN+0x122>

	case DATA_TYPE_U32:
		for (uint32_t i = 0; i < Nsize; i++) {
 8002846:	2300      	movs	r3, #0
 8002848:	623b      	str	r3, [r7, #32]
 800284a:	e012      	b.n	8002872 <FlashWriteN+0xd2>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress, ((uint32_t*) wrBuf)[i]);
 800284c:	6a3b      	ldr	r3, [r7, #32]
 800284e:	009b      	lsls	r3, r3, #2
 8002850:	68ba      	ldr	r2, [r7, #8]
 8002852:	4413      	add	r3, r2
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	f04f 0400 	mov.w	r4, #0
 800285a:	461a      	mov	r2, r3
 800285c:	4623      	mov	r3, r4
 800285e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8002860:	2002      	movs	r0, #2
 8002862:	f005 fc87 	bl	8008174 <HAL_FLASH_Program>
			flashAddress += 4;
 8002866:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002868:	3304      	adds	r3, #4
 800286a:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 0; i < Nsize; i++) {
 800286c:	6a3b      	ldr	r3, [r7, #32]
 800286e:	3301      	adds	r3, #1
 8002870:	623b      	str	r3, [r7, #32]
 8002872:	6a3a      	ldr	r2, [r7, #32]
 8002874:	687b      	ldr	r3, [r7, #4]
 8002876:	429a      	cmp	r2, r3
 8002878:	d3e8      	bcc.n	800284c <FlashWriteN+0xac>
		}
		break;
 800287a:	e022      	b.n	80028c2 <FlashWriteN+0x122>

	case DATA_TYPE_FLOAT:
		for (uint32_t i = 0; i < Nsize; i++) {
 800287c:	2300      	movs	r3, #0
 800287e:	61fb      	str	r3, [r7, #28]
 8002880:	e01a      	b.n	80028b8 <FlashWriteN+0x118>
			// Convert float -> uint8_t
			convert.float_value = ((float*) wrBuf)[i];
 8002882:	69fb      	ldr	r3, [r7, #28]
 8002884:	009b      	lsls	r3, r3, #2
 8002886:	68ba      	ldr	r2, [r7, #8]
 8002888:	4413      	add	r3, r2
 800288a:	681b      	ldr	r3, [r3, #0]
 800288c:	61bb      	str	r3, [r7, #24]
			wrBuf2[0] = convert.uint8_values[0];
 800288e:	7e3b      	ldrb	r3, [r7, #24]
 8002890:	753b      	strb	r3, [r7, #20]
			wrBuf2[1] = convert.uint8_values[1];
 8002892:	7e7b      	ldrb	r3, [r7, #25]
 8002894:	757b      	strb	r3, [r7, #21]
			wrBuf2[2] = convert.uint8_values[2];
 8002896:	7ebb      	ldrb	r3, [r7, #26]
 8002898:	75bb      	strb	r3, [r7, #22]
			wrBuf2[3] = convert.uint8_values[3];
 800289a:	7efb      	ldrb	r3, [r7, #27]
 800289c:	75fb      	strb	r3, [r7, #23]
			// Write the uint8_t bytes
			FlashWriteN(idx + 4*i, wrBuf2, 4, DATA_TYPE_U8);
 800289e:	69fb      	ldr	r3, [r7, #28]
 80028a0:	009a      	lsls	r2, r3, #2
 80028a2:	68fb      	ldr	r3, [r7, #12]
 80028a4:	18d0      	adds	r0, r2, r3
 80028a6:	f107 0114 	add.w	r1, r7, #20
 80028aa:	2300      	movs	r3, #0
 80028ac:	2204      	movs	r2, #4
 80028ae:	f7ff ff77 	bl	80027a0 <FlashWriteN>
		for (uint32_t i = 0; i < Nsize; i++) {
 80028b2:	69fb      	ldr	r3, [r7, #28]
 80028b4:	3301      	adds	r3, #1
 80028b6:	61fb      	str	r3, [r7, #28]
 80028b8:	69fa      	ldr	r2, [r7, #28]
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	429a      	cmp	r2, r3
 80028be:	d3e0      	bcc.n	8002882 <FlashWriteN+0xe2>
		}
		break;
 80028c0:	bf00      	nop
	}
	//Lock the Flash space
	HAL_FLASH_Lock();
 80028c2:	f005 fccd 	bl	8008260 <HAL_FLASH_Lock>
}
 80028c6:	bf00      	nop
 80028c8:	3734      	adds	r7, #52	; 0x34
 80028ca:	46bd      	mov	sp, r7
 80028cc:	bd90      	pop	{r4, r7, pc}
 80028ce:	bf00      	nop
 80028d0:	20000204 	.word	0x20000204

080028d4 <FlashReadN>:
//4. Read Flash
void FlashReadN(uint32_t idx, void *rdBuf, uint32_t Nsize, DataTypeDef dataType) {
 80028d4:	b580      	push	{r7, lr}
 80028d6:	b08c      	sub	sp, #48	; 0x30
 80028d8:	af00      	add	r7, sp, #0
 80028da:	60f8      	str	r0, [r7, #12]
 80028dc:	60b9      	str	r1, [r7, #8]
 80028de:	607a      	str	r2, [r7, #4]
 80028e0:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = SectorAddrs + idx;
 80028e2:	4b3c      	ldr	r3, [pc, #240]	; (80029d4 <FlashReadN+0x100>)
 80028e4:	681b      	ldr	r3, [r3, #0]
 80028e6:	68fa      	ldr	r2, [r7, #12]
 80028e8:	4413      	add	r3, r2
 80028ea:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Converter
	Convert convert;
	uint8_t rdBuf2[4];

	switch (dataType) {
 80028ec:	78fb      	ldrb	r3, [r7, #3]
 80028ee:	2b03      	cmp	r3, #3
 80028f0:	d86b      	bhi.n	80029ca <FlashReadN+0xf6>
 80028f2:	a201      	add	r2, pc, #4	; (adr r2, 80028f8 <FlashReadN+0x24>)
 80028f4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80028f8:	08002909 	.word	0x08002909
 80028fc:	08002931 	.word	0x08002931
 8002900:	0800295b 	.word	0x0800295b
 8002904:	08002985 	.word	0x08002985
	case DATA_TYPE_U8:
		for (uint32_t i = 0; i < Nsize; i++) {
 8002908:	2300      	movs	r3, #0
 800290a:	62bb      	str	r3, [r7, #40]	; 0x28
 800290c:	e00b      	b.n	8002926 <FlashReadN+0x52>
			*((uint8_t*) rdBuf + i) = *(uint8_t*) flashAddress;
 800290e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002910:	68b9      	ldr	r1, [r7, #8]
 8002912:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002914:	440b      	add	r3, r1
 8002916:	7812      	ldrb	r2, [r2, #0]
 8002918:	701a      	strb	r2, [r3, #0]
			flashAddress++;
 800291a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800291c:	3301      	adds	r3, #1
 800291e:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 0; i < Nsize; i++) {
 8002920:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002922:	3301      	adds	r3, #1
 8002924:	62bb      	str	r3, [r7, #40]	; 0x28
 8002926:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002928:	687b      	ldr	r3, [r7, #4]
 800292a:	429a      	cmp	r2, r3
 800292c:	d3ef      	bcc.n	800290e <FlashReadN+0x3a>
		}
		break;
 800292e:	e04c      	b.n	80029ca <FlashReadN+0xf6>

	case DATA_TYPE_U16:
		for (uint32_t i = 0; i < Nsize; i++) {
 8002930:	2300      	movs	r3, #0
 8002932:	627b      	str	r3, [r7, #36]	; 0x24
 8002934:	e00c      	b.n	8002950 <FlashReadN+0x7c>
			*((uint16_t*) rdBuf + i) = *(uint16_t*) flashAddress;
 8002936:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002938:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800293a:	005b      	lsls	r3, r3, #1
 800293c:	68b9      	ldr	r1, [r7, #8]
 800293e:	440b      	add	r3, r1
 8002940:	8812      	ldrh	r2, [r2, #0]
 8002942:	801a      	strh	r2, [r3, #0]
			flashAddress += 2;
 8002944:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002946:	3302      	adds	r3, #2
 8002948:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 0; i < Nsize; i++) {
 800294a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800294c:	3301      	adds	r3, #1
 800294e:	627b      	str	r3, [r7, #36]	; 0x24
 8002950:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002952:	687b      	ldr	r3, [r7, #4]
 8002954:	429a      	cmp	r2, r3
 8002956:	d3ee      	bcc.n	8002936 <FlashReadN+0x62>
		}
		break;
 8002958:	e037      	b.n	80029ca <FlashReadN+0xf6>

	case DATA_TYPE_U32:
		for (uint32_t i = 0; i < Nsize; i++) {
 800295a:	2300      	movs	r3, #0
 800295c:	623b      	str	r3, [r7, #32]
 800295e:	e00c      	b.n	800297a <FlashReadN+0xa6>
			*((uint32_t*) rdBuf + i) = *(uint32_t*) flashAddress;
 8002960:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002962:	6a3b      	ldr	r3, [r7, #32]
 8002964:	009b      	lsls	r3, r3, #2
 8002966:	68b9      	ldr	r1, [r7, #8]
 8002968:	440b      	add	r3, r1
 800296a:	6812      	ldr	r2, [r2, #0]
 800296c:	601a      	str	r2, [r3, #0]
			flashAddress += 4;
 800296e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002970:	3304      	adds	r3, #4
 8002972:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 0; i < Nsize; i++) {
 8002974:	6a3b      	ldr	r3, [r7, #32]
 8002976:	3301      	adds	r3, #1
 8002978:	623b      	str	r3, [r7, #32]
 800297a:	6a3a      	ldr	r2, [r7, #32]
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	429a      	cmp	r2, r3
 8002980:	d3ee      	bcc.n	8002960 <FlashReadN+0x8c>
		}
		break;
 8002982:	e022      	b.n	80029ca <FlashReadN+0xf6>

	case DATA_TYPE_FLOAT:
		for (uint32_t i = 0; i < Nsize; i++) {
 8002984:	2300      	movs	r3, #0
 8002986:	61fb      	str	r3, [r7, #28]
 8002988:	e01a      	b.n	80029c0 <FlashReadN+0xec>
			// Read the uint8_t bytes
			FlashReadN(idx + 4*i, rdBuf2, 4, DATA_TYPE_U8);
 800298a:	69fb      	ldr	r3, [r7, #28]
 800298c:	009a      	lsls	r2, r3, #2
 800298e:	68fb      	ldr	r3, [r7, #12]
 8002990:	18d0      	adds	r0, r2, r3
 8002992:	f107 0114 	add.w	r1, r7, #20
 8002996:	2300      	movs	r3, #0
 8002998:	2204      	movs	r2, #4
 800299a:	f7ff ff9b 	bl	80028d4 <FlashReadN>
			// Convert uint8_t -> float
			convert.uint8_values[0] = rdBuf2[0];
 800299e:	7d3b      	ldrb	r3, [r7, #20]
 80029a0:	763b      	strb	r3, [r7, #24]
			convert.uint8_values[1] = rdBuf2[1];
 80029a2:	7d7b      	ldrb	r3, [r7, #21]
 80029a4:	767b      	strb	r3, [r7, #25]
			convert.uint8_values[2] = rdBuf2[2];
 80029a6:	7dbb      	ldrb	r3, [r7, #22]
 80029a8:	76bb      	strb	r3, [r7, #26]
			convert.uint8_values[3] = rdBuf2[3];
 80029aa:	7dfb      	ldrb	r3, [r7, #23]
 80029ac:	76fb      	strb	r3, [r7, #27]
			*((float*) rdBuf + i) = convert.float_value;
 80029ae:	69fb      	ldr	r3, [r7, #28]
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	68ba      	ldr	r2, [r7, #8]
 80029b4:	4413      	add	r3, r2
 80029b6:	69ba      	ldr	r2, [r7, #24]
 80029b8:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < Nsize; i++) {
 80029ba:	69fb      	ldr	r3, [r7, #28]
 80029bc:	3301      	adds	r3, #1
 80029be:	61fb      	str	r3, [r7, #28]
 80029c0:	69fa      	ldr	r2, [r7, #28]
 80029c2:	687b      	ldr	r3, [r7, #4]
 80029c4:	429a      	cmp	r2, r3
 80029c6:	d3e0      	bcc.n	800298a <FlashReadN+0xb6>
		}
		break;
 80029c8:	bf00      	nop
	}
}
 80029ca:	bf00      	nop
 80029cc:	3730      	adds	r7, #48	; 0x30
 80029ce:	46bd      	mov	sp, r7
 80029d0:	bd80      	pop	{r7, pc}
 80029d2:	bf00      	nop
 80029d4:	20000204 	.word	0x20000204

080029d8 <fillCircleHelper>:
			ILI9341_DrawPixel(spi, x0 - y, y0 - x, color);
			ILI9341_DrawPixel(spi, x0 - x, y0 - y, color);
		}
	}
}
static void fillCircleHelper(ILI9341_SPI *spi, int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color) {
 80029d8:	b580      	push	{r7, lr}
 80029da:	b08a      	sub	sp, #40	; 0x28
 80029dc:	af02      	add	r7, sp, #8
 80029de:	60f8      	str	r0, [r7, #12]
 80029e0:	4608      	mov	r0, r1
 80029e2:	4611      	mov	r1, r2
 80029e4:	461a      	mov	r2, r3
 80029e6:	4603      	mov	r3, r0
 80029e8:	817b      	strh	r3, [r7, #10]
 80029ea:	460b      	mov	r3, r1
 80029ec:	813b      	strh	r3, [r7, #8]
 80029ee:	4613      	mov	r3, r2
 80029f0:	80fb      	strh	r3, [r7, #6]
	int16_t f = 1 - r;
 80029f2:	88fb      	ldrh	r3, [r7, #6]
 80029f4:	f1c3 0301 	rsb	r3, r3, #1
 80029f8:	b29b      	uxth	r3, r3
 80029fa:	83fb      	strh	r3, [r7, #30]
	int16_t ddF_x = 1;
 80029fc:	2301      	movs	r3, #1
 80029fe:	83bb      	strh	r3, [r7, #28]
	int16_t ddF_y = -2 * r;
 8002a00:	88fb      	ldrh	r3, [r7, #6]
 8002a02:	461a      	mov	r2, r3
 8002a04:	03d2      	lsls	r2, r2, #15
 8002a06:	1ad3      	subs	r3, r2, r3
 8002a08:	005b      	lsls	r3, r3, #1
 8002a0a:	b29b      	uxth	r3, r3
 8002a0c:	837b      	strh	r3, [r7, #26]
	int16_t x = 0;
 8002a0e:	2300      	movs	r3, #0
 8002a10:	833b      	strh	r3, [r7, #24]
	int16_t y = r;
 8002a12:	88fb      	ldrh	r3, [r7, #6]
 8002a14:	82fb      	strh	r3, [r7, #22]

	while (x < y) {
 8002a16:	e095      	b.n	8002b44 <fillCircleHelper+0x16c>
		if (f >= 0) {
 8002a18:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8002a1c:	2b00      	cmp	r3, #0
 8002a1e:	db0e      	blt.n	8002a3e <fillCircleHelper+0x66>
			y--;
 8002a20:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002a24:	b29b      	uxth	r3, r3
 8002a26:	3b01      	subs	r3, #1
 8002a28:	b29b      	uxth	r3, r3
 8002a2a:	82fb      	strh	r3, [r7, #22]
			ddF_y += 2;
 8002a2c:	8b7b      	ldrh	r3, [r7, #26]
 8002a2e:	3302      	adds	r3, #2
 8002a30:	b29b      	uxth	r3, r3
 8002a32:	837b      	strh	r3, [r7, #26]
			f += ddF_y;
 8002a34:	8bfa      	ldrh	r2, [r7, #30]
 8002a36:	8b7b      	ldrh	r3, [r7, #26]
 8002a38:	4413      	add	r3, r2
 8002a3a:	b29b      	uxth	r3, r3
 8002a3c:	83fb      	strh	r3, [r7, #30]
		}
		x++;
 8002a3e:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002a42:	b29b      	uxth	r3, r3
 8002a44:	3301      	adds	r3, #1
 8002a46:	b29b      	uxth	r3, r3
 8002a48:	833b      	strh	r3, [r7, #24]
		ddF_x += 2;
 8002a4a:	8bbb      	ldrh	r3, [r7, #28]
 8002a4c:	3302      	adds	r3, #2
 8002a4e:	b29b      	uxth	r3, r3
 8002a50:	83bb      	strh	r3, [r7, #28]
		f += ddF_x;
 8002a52:	8bfa      	ldrh	r2, [r7, #30]
 8002a54:	8bbb      	ldrh	r3, [r7, #28]
 8002a56:	4413      	add	r3, r2
 8002a58:	b29b      	uxth	r3, r3
 8002a5a:	83fb      	strh	r3, [r7, #30]

		if (cornername & 0x1) {
 8002a5c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002a60:	f003 0301 	and.w	r3, r3, #1
 8002a64:	2b00      	cmp	r3, #0
 8002a66:	d033      	beq.n	8002ad0 <fillCircleHelper+0xf8>
			ILI9341_drawFastVLine(spi, x0 + x, y0 - y, 2 * y + 1 + delta, color);
 8002a68:	897a      	ldrh	r2, [r7, #10]
 8002a6a:	8b3b      	ldrh	r3, [r7, #24]
 8002a6c:	4413      	add	r3, r2
 8002a6e:	b29b      	uxth	r3, r3
 8002a70:	b219      	sxth	r1, r3
 8002a72:	893a      	ldrh	r2, [r7, #8]
 8002a74:	8afb      	ldrh	r3, [r7, #22]
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	b29b      	uxth	r3, r3
 8002a7a:	b218      	sxth	r0, r3
 8002a7c:	8afb      	ldrh	r3, [r7, #22]
 8002a7e:	005b      	lsls	r3, r3, #1
 8002a80:	b29a      	uxth	r2, r3
 8002a82:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002a84:	4413      	add	r3, r2
 8002a86:	b29b      	uxth	r3, r3
 8002a88:	3301      	adds	r3, #1
 8002a8a:	b29b      	uxth	r3, r3
 8002a8c:	b21a      	sxth	r2, r3
 8002a8e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002a90:	9300      	str	r3, [sp, #0]
 8002a92:	4613      	mov	r3, r2
 8002a94:	4602      	mov	r2, r0
 8002a96:	68f8      	ldr	r0, [r7, #12]
 8002a98:	f000 faac 	bl	8002ff4 <ILI9341_drawFastVLine>
			ILI9341_drawFastVLine(spi, x0 + y, y0 - x, 2 * x + 1 + delta, color);
 8002a9c:	897a      	ldrh	r2, [r7, #10]
 8002a9e:	8afb      	ldrh	r3, [r7, #22]
 8002aa0:	4413      	add	r3, r2
 8002aa2:	b29b      	uxth	r3, r3
 8002aa4:	b219      	sxth	r1, r3
 8002aa6:	893a      	ldrh	r2, [r7, #8]
 8002aa8:	8b3b      	ldrh	r3, [r7, #24]
 8002aaa:	1ad3      	subs	r3, r2, r3
 8002aac:	b29b      	uxth	r3, r3
 8002aae:	b218      	sxth	r0, r3
 8002ab0:	8b3b      	ldrh	r3, [r7, #24]
 8002ab2:	005b      	lsls	r3, r3, #1
 8002ab4:	b29a      	uxth	r2, r3
 8002ab6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002ab8:	4413      	add	r3, r2
 8002aba:	b29b      	uxth	r3, r3
 8002abc:	3301      	adds	r3, #1
 8002abe:	b29b      	uxth	r3, r3
 8002ac0:	b21a      	sxth	r2, r3
 8002ac2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002ac4:	9300      	str	r3, [sp, #0]
 8002ac6:	4613      	mov	r3, r2
 8002ac8:	4602      	mov	r2, r0
 8002aca:	68f8      	ldr	r0, [r7, #12]
 8002acc:	f000 fa92 	bl	8002ff4 <ILI9341_drawFastVLine>
		}
		if (cornername & 0x2) {
 8002ad0:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8002ad4:	f003 0302 	and.w	r3, r3, #2
 8002ad8:	2b00      	cmp	r3, #0
 8002ada:	d033      	beq.n	8002b44 <fillCircleHelper+0x16c>
			ILI9341_drawFastVLine(spi, x0 - x, y0 - y, 2 * y + 1 + delta, color);
 8002adc:	897a      	ldrh	r2, [r7, #10]
 8002ade:	8b3b      	ldrh	r3, [r7, #24]
 8002ae0:	1ad3      	subs	r3, r2, r3
 8002ae2:	b29b      	uxth	r3, r3
 8002ae4:	b219      	sxth	r1, r3
 8002ae6:	893a      	ldrh	r2, [r7, #8]
 8002ae8:	8afb      	ldrh	r3, [r7, #22]
 8002aea:	1ad3      	subs	r3, r2, r3
 8002aec:	b29b      	uxth	r3, r3
 8002aee:	b218      	sxth	r0, r3
 8002af0:	8afb      	ldrh	r3, [r7, #22]
 8002af2:	005b      	lsls	r3, r3, #1
 8002af4:	b29a      	uxth	r2, r3
 8002af6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002af8:	4413      	add	r3, r2
 8002afa:	b29b      	uxth	r3, r3
 8002afc:	3301      	adds	r3, #1
 8002afe:	b29b      	uxth	r3, r3
 8002b00:	b21a      	sxth	r2, r3
 8002b02:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002b04:	9300      	str	r3, [sp, #0]
 8002b06:	4613      	mov	r3, r2
 8002b08:	4602      	mov	r2, r0
 8002b0a:	68f8      	ldr	r0, [r7, #12]
 8002b0c:	f000 fa72 	bl	8002ff4 <ILI9341_drawFastVLine>
			ILI9341_drawFastVLine(spi, x0 - y, y0 - x, 2 * x + 1 + delta, color);
 8002b10:	897a      	ldrh	r2, [r7, #10]
 8002b12:	8afb      	ldrh	r3, [r7, #22]
 8002b14:	1ad3      	subs	r3, r2, r3
 8002b16:	b29b      	uxth	r3, r3
 8002b18:	b219      	sxth	r1, r3
 8002b1a:	893a      	ldrh	r2, [r7, #8]
 8002b1c:	8b3b      	ldrh	r3, [r7, #24]
 8002b1e:	1ad3      	subs	r3, r2, r3
 8002b20:	b29b      	uxth	r3, r3
 8002b22:	b218      	sxth	r0, r3
 8002b24:	8b3b      	ldrh	r3, [r7, #24]
 8002b26:	005b      	lsls	r3, r3, #1
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8002b2c:	4413      	add	r3, r2
 8002b2e:	b29b      	uxth	r3, r3
 8002b30:	3301      	adds	r3, #1
 8002b32:	b29b      	uxth	r3, r3
 8002b34:	b21a      	sxth	r2, r3
 8002b36:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002b38:	9300      	str	r3, [sp, #0]
 8002b3a:	4613      	mov	r3, r2
 8002b3c:	4602      	mov	r2, r0
 8002b3e:	68f8      	ldr	r0, [r7, #12]
 8002b40:	f000 fa58 	bl	8002ff4 <ILI9341_drawFastVLine>
	while (x < y) {
 8002b44:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 8002b48:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8002b4c:	429a      	cmp	r2, r3
 8002b4e:	f6ff af63 	blt.w	8002a18 <fillCircleHelper+0x40>
		}
	}
}
 8002b52:	bf00      	nop
 8002b54:	3720      	adds	r7, #32
 8002b56:	46bd      	mov	sp, r7
 8002b58:	bd80      	pop	{r7, pc}

08002b5a <ILI9341_SendCommand>:

// Write Command to LCD
static void ILI9341_SendCommand(ILI9341_SPI *spi, uint8_t com) {
 8002b5a:	b580      	push	{r7, lr}
 8002b5c:	b084      	sub	sp, #16
 8002b5e:	af00      	add	r7, sp, #0
 8002b60:	6078      	str	r0, [r7, #4]
 8002b62:	460b      	mov	r3, r1
 8002b64:	70fb      	strb	r3, [r7, #3]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 8002b66:	78fb      	ldrb	r3, [r7, #3]
 8002b68:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(spi->DC_PORT, spi->DC_PIN, GPIO_PIN_RESET);
 8002b6a:	687b      	ldr	r3, [r7, #4]
 8002b6c:	6918      	ldr	r0, [r3, #16]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	8a9b      	ldrh	r3, [r3, #20]
 8002b72:	2200      	movs	r2, #0
 8002b74:	4619      	mov	r1, r3
 8002b76:	f005 feb3 	bl	80088e0 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(spi->LCD_CS_PORT, spi->LCD_CS_PIN, GPIO_PIN_RESET);
 8002b7a:	687b      	ldr	r3, [r7, #4]
 8002b7c:	6898      	ldr	r0, [r3, #8]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	899b      	ldrh	r3, [r3, #12]
 8002b82:	2200      	movs	r2, #0
 8002b84:	4619      	mov	r1, r3
 8002b86:	f005 feab 	bl	80088e0 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(spi->lcdHandle, &tmpCmd, 1, 5);
 8002b8a:	687b      	ldr	r3, [r7, #4]
 8002b8c:	6858      	ldr	r0, [r3, #4]
 8002b8e:	f107 010f 	add.w	r1, r7, #15
 8002b92:	2305      	movs	r3, #5
 8002b94:	2201      	movs	r2, #1
 8002b96:	f006 fc67 	bl	8009468 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(spi->LCD_CS_PORT, spi->LCD_CS_PIN, GPIO_PIN_SET);
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	6898      	ldr	r0, [r3, #8]
 8002b9e:	687b      	ldr	r3, [r7, #4]
 8002ba0:	899b      	ldrh	r3, [r3, #12]
 8002ba2:	2201      	movs	r2, #1
 8002ba4:	4619      	mov	r1, r3
 8002ba6:	f005 fe9b 	bl	80088e0 <HAL_GPIO_WritePin>
}
 8002baa:	bf00      	nop
 8002bac:	3710      	adds	r7, #16
 8002bae:	46bd      	mov	sp, r7
 8002bb0:	bd80      	pop	{r7, pc}

08002bb2 <ILI9341_SendData>:

// Write data to LCD
static void ILI9341_SendData(ILI9341_SPI *spi, uint8_t data) {
 8002bb2:	b580      	push	{r7, lr}
 8002bb4:	b084      	sub	sp, #16
 8002bb6:	af00      	add	r7, sp, #0
 8002bb8:	6078      	str	r0, [r7, #4]
 8002bba:	460b      	mov	r3, r1
 8002bbc:	70fb      	strb	r3, [r7, #3]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 8002bbe:	78fb      	ldrb	r3, [r7, #3]
 8002bc0:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(spi->DC_PORT, spi->DC_PIN, GPIO_PIN_SET);
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	6918      	ldr	r0, [r3, #16]
 8002bc6:	687b      	ldr	r3, [r7, #4]
 8002bc8:	8a9b      	ldrh	r3, [r3, #20]
 8002bca:	2201      	movs	r2, #1
 8002bcc:	4619      	mov	r1, r3
 8002bce:	f005 fe87 	bl	80088e0 <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(spi->LCD_CS_PORT, spi->LCD_CS_PIN, GPIO_PIN_RESET);
 8002bd2:	687b      	ldr	r3, [r7, #4]
 8002bd4:	6898      	ldr	r0, [r3, #8]
 8002bd6:	687b      	ldr	r3, [r7, #4]
 8002bd8:	899b      	ldrh	r3, [r3, #12]
 8002bda:	2200      	movs	r2, #0
 8002bdc:	4619      	mov	r1, r3
 8002bde:	f005 fe7f 	bl	80088e0 <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(spi->lcdHandle, &tmpCmd, 1, 5);
 8002be2:	687b      	ldr	r3, [r7, #4]
 8002be4:	6858      	ldr	r0, [r3, #4]
 8002be6:	f107 010f 	add.w	r1, r7, #15
 8002bea:	2305      	movs	r3, #5
 8002bec:	2201      	movs	r2, #1
 8002bee:	f006 fc3b 	bl	8009468 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(spi->LCD_CS_PORT, spi->LCD_CS_PIN, GPIO_PIN_SET);
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	6898      	ldr	r0, [r3, #8]
 8002bf6:	687b      	ldr	r3, [r7, #4]
 8002bf8:	899b      	ldrh	r3, [r3, #12]
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	4619      	mov	r1, r3
 8002bfe:	f005 fe6f 	bl	80088e0 <HAL_GPIO_WritePin>
}
 8002c02:	bf00      	nop
 8002c04:	3710      	adds	r7, #16
 8002c06:	46bd      	mov	sp, r7
 8002c08:	bd80      	pop	{r7, pc}

08002c0a <ILI9341_SetCursorPosition>:
	//Bring CS HIGH
	HAL_GPIO_WritePin(spi->LCD_CS_PORT, spi->LCD_CS_PIN, GPIO_PIN_SET);
}

// Set cursor position
void ILI9341_SetCursorPosition(ILI9341_SPI *spi, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 8002c0a:	b580      	push	{r7, lr}
 8002c0c:	b084      	sub	sp, #16
 8002c0e:	af00      	add	r7, sp, #0
 8002c10:	60f8      	str	r0, [r7, #12]
 8002c12:	4608      	mov	r0, r1
 8002c14:	4611      	mov	r1, r2
 8002c16:	461a      	mov	r2, r3
 8002c18:	4603      	mov	r3, r0
 8002c1a:	817b      	strh	r3, [r7, #10]
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	813b      	strh	r3, [r7, #8]
 8002c20:	4613      	mov	r3, r2
 8002c22:	80fb      	strh	r3, [r7, #6]
	ILI9341_SendCommand(spi, ILI9341_COLUMN_ADDR);
 8002c24:	212a      	movs	r1, #42	; 0x2a
 8002c26:	68f8      	ldr	r0, [r7, #12]
 8002c28:	f7ff ff97 	bl	8002b5a <ILI9341_SendCommand>
	ILI9341_SendData(spi, x1 >> 8);
 8002c2c:	897b      	ldrh	r3, [r7, #10]
 8002c2e:	0a1b      	lsrs	r3, r3, #8
 8002c30:	b29b      	uxth	r3, r3
 8002c32:	b2db      	uxtb	r3, r3
 8002c34:	4619      	mov	r1, r3
 8002c36:	68f8      	ldr	r0, [r7, #12]
 8002c38:	f7ff ffbb 	bl	8002bb2 <ILI9341_SendData>
	ILI9341_SendData(spi, x1 & 0xFF);
 8002c3c:	897b      	ldrh	r3, [r7, #10]
 8002c3e:	b2db      	uxtb	r3, r3
 8002c40:	4619      	mov	r1, r3
 8002c42:	68f8      	ldr	r0, [r7, #12]
 8002c44:	f7ff ffb5 	bl	8002bb2 <ILI9341_SendData>
	ILI9341_SendData(spi, x2 >> 8);
 8002c48:	88fb      	ldrh	r3, [r7, #6]
 8002c4a:	0a1b      	lsrs	r3, r3, #8
 8002c4c:	b29b      	uxth	r3, r3
 8002c4e:	b2db      	uxtb	r3, r3
 8002c50:	4619      	mov	r1, r3
 8002c52:	68f8      	ldr	r0, [r7, #12]
 8002c54:	f7ff ffad 	bl	8002bb2 <ILI9341_SendData>
	ILI9341_SendData(spi, x2 & 0xFF);
 8002c58:	88fb      	ldrh	r3, [r7, #6]
 8002c5a:	b2db      	uxtb	r3, r3
 8002c5c:	4619      	mov	r1, r3
 8002c5e:	68f8      	ldr	r0, [r7, #12]
 8002c60:	f7ff ffa7 	bl	8002bb2 <ILI9341_SendData>

	ILI9341_SendCommand(spi, ILI9341_PAGE_ADDR);
 8002c64:	212b      	movs	r1, #43	; 0x2b
 8002c66:	68f8      	ldr	r0, [r7, #12]
 8002c68:	f7ff ff77 	bl	8002b5a <ILI9341_SendCommand>
	ILI9341_SendData(spi, y1 >> 8);
 8002c6c:	893b      	ldrh	r3, [r7, #8]
 8002c6e:	0a1b      	lsrs	r3, r3, #8
 8002c70:	b29b      	uxth	r3, r3
 8002c72:	b2db      	uxtb	r3, r3
 8002c74:	4619      	mov	r1, r3
 8002c76:	68f8      	ldr	r0, [r7, #12]
 8002c78:	f7ff ff9b 	bl	8002bb2 <ILI9341_SendData>
	ILI9341_SendData(spi, y1 & 0xFF);
 8002c7c:	893b      	ldrh	r3, [r7, #8]
 8002c7e:	b2db      	uxtb	r3, r3
 8002c80:	4619      	mov	r1, r3
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f7ff ff95 	bl	8002bb2 <ILI9341_SendData>
	ILI9341_SendData(spi, y2 >> 8);
 8002c88:	8b3b      	ldrh	r3, [r7, #24]
 8002c8a:	0a1b      	lsrs	r3, r3, #8
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	b2db      	uxtb	r3, r3
 8002c90:	4619      	mov	r1, r3
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f7ff ff8d 	bl	8002bb2 <ILI9341_SendData>
	ILI9341_SendData(spi, y2 & 0xFF);
 8002c98:	8b3b      	ldrh	r3, [r7, #24]
 8002c9a:	b2db      	uxtb	r3, r3
 8002c9c:	4619      	mov	r1, r3
 8002c9e:	68f8      	ldr	r0, [r7, #12]
 8002ca0:	f7ff ff87 	bl	8002bb2 <ILI9341_SendData>
	ILI9341_SendCommand(spi, ILI9341_GRAM);
 8002ca4:	212c      	movs	r1, #44	; 0x2c
 8002ca6:	68f8      	ldr	r0, [r7, #12]
 8002ca8:	f7ff ff57 	bl	8002b5a <ILI9341_SendCommand>
}
 8002cac:	bf00      	nop
 8002cae:	3710      	adds	r7, #16
 8002cb0:	46bd      	mov	sp, r7
 8002cb2:	bd80      	pop	{r7, pc}

08002cb4 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(ILI9341_SPI *spi, uint16_t x, uint16_t y, uint16_t color) {
 8002cb4:	b580      	push	{r7, lr}
 8002cb6:	b086      	sub	sp, #24
 8002cb8:	af02      	add	r7, sp, #8
 8002cba:	60f8      	str	r0, [r7, #12]
 8002cbc:	4608      	mov	r0, r1
 8002cbe:	4611      	mov	r1, r2
 8002cc0:	461a      	mov	r2, r3
 8002cc2:	4603      	mov	r3, r0
 8002cc4:	817b      	strh	r3, [r7, #10]
 8002cc6:	460b      	mov	r3, r1
 8002cc8:	813b      	strh	r3, [r7, #8]
 8002cca:	4613      	mov	r3, r2
 8002ccc:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetCursorPosition(spi, x, y, x, y);
 8002cce:	8978      	ldrh	r0, [r7, #10]
 8002cd0:	893a      	ldrh	r2, [r7, #8]
 8002cd2:	8979      	ldrh	r1, [r7, #10]
 8002cd4:	893b      	ldrh	r3, [r7, #8]
 8002cd6:	9300      	str	r3, [sp, #0]
 8002cd8:	4603      	mov	r3, r0
 8002cda:	68f8      	ldr	r0, [r7, #12]
 8002cdc:	f7ff ff95 	bl	8002c0a <ILI9341_SetCursorPosition>
	ILI9341_SendData(spi, color >> 8);
 8002ce0:	88fb      	ldrh	r3, [r7, #6]
 8002ce2:	0a1b      	lsrs	r3, r3, #8
 8002ce4:	b29b      	uxth	r3, r3
 8002ce6:	b2db      	uxtb	r3, r3
 8002ce8:	4619      	mov	r1, r3
 8002cea:	68f8      	ldr	r0, [r7, #12]
 8002cec:	f7ff ff61 	bl	8002bb2 <ILI9341_SendData>
	ILI9341_SendData(spi, color & 0xFF);
 8002cf0:	88fb      	ldrh	r3, [r7, #6]
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	4619      	mov	r1, r3
 8002cf6:	68f8      	ldr	r0, [r7, #12]
 8002cf8:	f7ff ff5b 	bl	8002bb2 <ILI9341_SendData>
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}

08002d04 <ILI9341_Fill>:

//6. Fill the entire screen with a background color
void ILI9341_Fill(ILI9341_SPI *spi, uint16_t color) {
 8002d04:	b580      	push	{r7, lr}
 8002d06:	b086      	sub	sp, #24
 8002d08:	af02      	add	r7, sp, #8
 8002d0a:	6078      	str	r0, [r7, #4]
 8002d0c:	460b      	mov	r3, r1
 8002d0e:	807b      	strh	r3, [r7, #2]
	uint32_t n = ILI9341_PIXEL_COUNT;
 8002d10:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002d14:	60fb      	str	r3, [r7, #12]
	//uint16_t myColor = 0xFF;

	if (spi->rotationNum == 1 || spi->rotationNum == 3) {
 8002d16:	687b      	ldr	r3, [r7, #4]
 8002d18:	781b      	ldrb	r3, [r3, #0]
 8002d1a:	2b01      	cmp	r3, #1
 8002d1c:	d003      	beq.n	8002d26 <ILI9341_Fill+0x22>
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	781b      	ldrb	r3, [r3, #0]
 8002d22:	2b03      	cmp	r3, #3
 8002d24:	d109      	bne.n	8002d3a <ILI9341_Fill+0x36>
		ILI9341_SetCursorPosition(spi, 0, 0, ILI9341_WIDTH - 1, ILI9341_HEIGHT - 1);
 8002d26:	f240 133f 	movw	r3, #319	; 0x13f
 8002d2a:	9300      	str	r3, [sp, #0]
 8002d2c:	23ef      	movs	r3, #239	; 0xef
 8002d2e:	2200      	movs	r2, #0
 8002d30:	2100      	movs	r1, #0
 8002d32:	6878      	ldr	r0, [r7, #4]
 8002d34:	f7ff ff69 	bl	8002c0a <ILI9341_SetCursorPosition>
 8002d38:	e010      	b.n	8002d5c <ILI9341_Fill+0x58>
	} else if (spi->rotationNum == 2 || spi->rotationNum == 4) {
 8002d3a:	687b      	ldr	r3, [r7, #4]
 8002d3c:	781b      	ldrb	r3, [r3, #0]
 8002d3e:	2b02      	cmp	r3, #2
 8002d40:	d003      	beq.n	8002d4a <ILI9341_Fill+0x46>
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	781b      	ldrb	r3, [r3, #0]
 8002d46:	2b04      	cmp	r3, #4
 8002d48:	d11a      	bne.n	8002d80 <ILI9341_Fill+0x7c>
		ILI9341_SetCursorPosition(spi, 0, 0, ILI9341_HEIGHT - 1, ILI9341_WIDTH - 1);
 8002d4a:	23ef      	movs	r3, #239	; 0xef
 8002d4c:	9300      	str	r3, [sp, #0]
 8002d4e:	f240 133f 	movw	r3, #319	; 0x13f
 8002d52:	2200      	movs	r2, #0
 8002d54:	2100      	movs	r1, #0
 8002d56:	6878      	ldr	r0, [r7, #4]
 8002d58:	f7ff ff57 	bl	8002c0a <ILI9341_SetCursorPosition>
	}

	while (n) {
 8002d5c:	e010      	b.n	8002d80 <ILI9341_Fill+0x7c>
		n--;
 8002d5e:	68fb      	ldr	r3, [r7, #12]
 8002d60:	3b01      	subs	r3, #1
 8002d62:	60fb      	str	r3, [r7, #12]
		ILI9341_SendData(spi, color >> 8);
 8002d64:	887b      	ldrh	r3, [r7, #2]
 8002d66:	0a1b      	lsrs	r3, r3, #8
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	b2db      	uxtb	r3, r3
 8002d6c:	4619      	mov	r1, r3
 8002d6e:	6878      	ldr	r0, [r7, #4]
 8002d70:	f7ff ff1f 	bl	8002bb2 <ILI9341_SendData>
		ILI9341_SendData(spi, color & 0xff);
 8002d74:	887b      	ldrh	r3, [r7, #2]
 8002d76:	b2db      	uxtb	r3, r3
 8002d78:	4619      	mov	r1, r3
 8002d7a:	6878      	ldr	r0, [r7, #4]
 8002d7c:	f7ff ff19 	bl	8002bb2 <ILI9341_SendData>
	while (n) {
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	2b00      	cmp	r3, #0
 8002d84:	d1eb      	bne.n	8002d5e <ILI9341_Fill+0x5a>
	}
}
 8002d86:	bf00      	nop
 8002d88:	3710      	adds	r7, #16
 8002d8a:	46bd      	mov	sp, r7
 8002d8c:	bd80      	pop	{r7, pc}

08002d8e <ILI9341_Fill_Rect>:
//7. Rectangle drawing functions
void ILI9341_Fill_Rect(ILI9341_SPI *spi, unsigned int x0, unsigned int y0, unsigned int x1, unsigned int y1, uint16_t color) {
 8002d8e:	b580      	push	{r7, lr}
 8002d90:	b088      	sub	sp, #32
 8002d92:	af02      	add	r7, sp, #8
 8002d94:	60f8      	str	r0, [r7, #12]
 8002d96:	60b9      	str	r1, [r7, #8]
 8002d98:	607a      	str	r2, [r7, #4]
 8002d9a:	603b      	str	r3, [r7, #0]
	uint32_t n = ((x1 + 1) - x0) * ((y1 + 1) - y0);
 8002d9c:	683a      	ldr	r2, [r7, #0]
 8002d9e:	68bb      	ldr	r3, [r7, #8]
 8002da0:	1ad3      	subs	r3, r2, r3
 8002da2:	3301      	adds	r3, #1
 8002da4:	6a39      	ldr	r1, [r7, #32]
 8002da6:	687a      	ldr	r2, [r7, #4]
 8002da8:	1a8a      	subs	r2, r1, r2
 8002daa:	3201      	adds	r2, #1
 8002dac:	fb02 f303 	mul.w	r3, r2, r3
 8002db0:	617b      	str	r3, [r7, #20]
	if (n > ILI9341_PIXEL_COUNT)
 8002db2:	697b      	ldr	r3, [r7, #20]
 8002db4:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 8002db8:	d902      	bls.n	8002dc0 <ILI9341_Fill_Rect+0x32>
		n = ILI9341_PIXEL_COUNT;
 8002dba:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8002dbe:	617b      	str	r3, [r7, #20]
	ILI9341_SetCursorPosition(spi, x0, y0, x1, y1);
 8002dc0:	68bb      	ldr	r3, [r7, #8]
 8002dc2:	b299      	uxth	r1, r3
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	b29a      	uxth	r2, r3
 8002dc8:	683b      	ldr	r3, [r7, #0]
 8002dca:	b298      	uxth	r0, r3
 8002dcc:	6a3b      	ldr	r3, [r7, #32]
 8002dce:	b29b      	uxth	r3, r3
 8002dd0:	9300      	str	r3, [sp, #0]
 8002dd2:	4603      	mov	r3, r0
 8002dd4:	68f8      	ldr	r0, [r7, #12]
 8002dd6:	f7ff ff18 	bl	8002c0a <ILI9341_SetCursorPosition>
	while (n) {
 8002dda:	e010      	b.n	8002dfe <ILI9341_Fill_Rect+0x70>
		n--;
 8002ddc:	697b      	ldr	r3, [r7, #20]
 8002dde:	3b01      	subs	r3, #1
 8002de0:	617b      	str	r3, [r7, #20]
		ILI9341_SendData(spi, color >> 8);
 8002de2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002de4:	0a1b      	lsrs	r3, r3, #8
 8002de6:	b29b      	uxth	r3, r3
 8002de8:	b2db      	uxtb	r3, r3
 8002dea:	4619      	mov	r1, r3
 8002dec:	68f8      	ldr	r0, [r7, #12]
 8002dee:	f7ff fee0 	bl	8002bb2 <ILI9341_SendData>
		ILI9341_SendData(spi, color & 0xff);
 8002df2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002df4:	b2db      	uxtb	r3, r3
 8002df6:	4619      	mov	r1, r3
 8002df8:	68f8      	ldr	r0, [r7, #12]
 8002dfa:	f7ff feda 	bl	8002bb2 <ILI9341_SendData>
	while (n) {
 8002dfe:	697b      	ldr	r3, [r7, #20]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	d1eb      	bne.n	8002ddc <ILI9341_Fill_Rect+0x4e>
	}
}
 8002e04:	bf00      	nop
 8002e06:	3718      	adds	r7, #24
 8002e08:	46bd      	mov	sp, r7
 8002e0a:	bd80      	pop	{r7, pc}

08002e0c <ILI9341_fillCircle>:
		ILI9341_DrawPixel(spi, x0 + y, y0 - x, color);
		ILI9341_DrawPixel(spi, x0 - y, y0 - x, color);
	}
}

void ILI9341_fillCircle(ILI9341_SPI *spi, int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8002e0c:	b580      	push	{r7, lr}
 8002e0e:	b088      	sub	sp, #32
 8002e10:	af04      	add	r7, sp, #16
 8002e12:	60f8      	str	r0, [r7, #12]
 8002e14:	4608      	mov	r0, r1
 8002e16:	4611      	mov	r1, r2
 8002e18:	461a      	mov	r2, r3
 8002e1a:	4603      	mov	r3, r0
 8002e1c:	817b      	strh	r3, [r7, #10]
 8002e1e:	460b      	mov	r3, r1
 8002e20:	813b      	strh	r3, [r7, #8]
 8002e22:	4613      	mov	r3, r2
 8002e24:	80fb      	strh	r3, [r7, #6]
	ILI9341_drawFastVLine(spi, x0, y0 - r, 2 * r + 1, color);
 8002e26:	893a      	ldrh	r2, [r7, #8]
 8002e28:	88fb      	ldrh	r3, [r7, #6]
 8002e2a:	1ad3      	subs	r3, r2, r3
 8002e2c:	b29b      	uxth	r3, r3
 8002e2e:	b21a      	sxth	r2, r3
 8002e30:	88fb      	ldrh	r3, [r7, #6]
 8002e32:	005b      	lsls	r3, r3, #1
 8002e34:	b29b      	uxth	r3, r3
 8002e36:	3301      	adds	r3, #1
 8002e38:	b29b      	uxth	r3, r3
 8002e3a:	b218      	sxth	r0, r3
 8002e3c:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002e40:	8b3b      	ldrh	r3, [r7, #24]
 8002e42:	9300      	str	r3, [sp, #0]
 8002e44:	4603      	mov	r3, r0
 8002e46:	68f8      	ldr	r0, [r7, #12]
 8002e48:	f000 f8d4 	bl	8002ff4 <ILI9341_drawFastVLine>
	fillCircleHelper(spi, x0, y0, r, 3, 0, color);
 8002e4c:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8002e50:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002e54:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002e58:	8b3b      	ldrh	r3, [r7, #24]
 8002e5a:	9302      	str	r3, [sp, #8]
 8002e5c:	2300      	movs	r3, #0
 8002e5e:	9301      	str	r3, [sp, #4]
 8002e60:	2303      	movs	r3, #3
 8002e62:	9300      	str	r3, [sp, #0]
 8002e64:	4603      	mov	r3, r0
 8002e66:	68f8      	ldr	r0, [r7, #12]
 8002e68:	f7ff fdb6 	bl	80029d8 <fillCircleHelper>
}
 8002e6c:	bf00      	nop
 8002e6e:	3710      	adds	r7, #16
 8002e70:	46bd      	mov	sp, r7
 8002e72:	bd80      	pop	{r7, pc}

08002e74 <ILI9341_drawLine>:

//9. Line drawing functions
void ILI9341_drawLine(ILI9341_SPI *spi, int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8002e74:	b580      	push	{r7, lr}
 8002e76:	b08a      	sub	sp, #40	; 0x28
 8002e78:	af00      	add	r7, sp, #0
 8002e7a:	60f8      	str	r0, [r7, #12]
 8002e7c:	4608      	mov	r0, r1
 8002e7e:	4611      	mov	r1, r2
 8002e80:	461a      	mov	r2, r3
 8002e82:	4603      	mov	r3, r0
 8002e84:	817b      	strh	r3, [r7, #10]
 8002e86:	460b      	mov	r3, r1
 8002e88:	813b      	strh	r3, [r7, #8]
 8002e8a:	4613      	mov	r3, r2
 8002e8c:	80fb      	strh	r3, [r7, #6]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8002e8e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8002e92:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002e96:	1ad3      	subs	r3, r2, r3
 8002e98:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002e9c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002ea0:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8002ea4:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002ea8:	1acb      	subs	r3, r1, r3
 8002eaa:	2b00      	cmp	r3, #0
 8002eac:	bfb8      	it	lt
 8002eae:	425b      	neglt	r3, r3
 8002eb0:	429a      	cmp	r2, r3
 8002eb2:	bfcc      	ite	gt
 8002eb4:	2301      	movgt	r3, #1
 8002eb6:	2300      	movle	r3, #0
 8002eb8:	b2db      	uxtb	r3, r3
 8002eba:	847b      	strh	r3, [r7, #34]	; 0x22
	if (steep) {
 8002ebc:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d00b      	beq.n	8002edc <ILI9341_drawLine+0x68>
		swap_ILI9341(x0, y0);
 8002ec4:	897b      	ldrh	r3, [r7, #10]
 8002ec6:	843b      	strh	r3, [r7, #32]
 8002ec8:	893b      	ldrh	r3, [r7, #8]
 8002eca:	817b      	strh	r3, [r7, #10]
 8002ecc:	8c3b      	ldrh	r3, [r7, #32]
 8002ece:	813b      	strh	r3, [r7, #8]
		swap_ILI9341(x1, y1);
 8002ed0:	88fb      	ldrh	r3, [r7, #6]
 8002ed2:	83fb      	strh	r3, [r7, #30]
 8002ed4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002ed6:	80fb      	strh	r3, [r7, #6]
 8002ed8:	8bfb      	ldrh	r3, [r7, #30]
 8002eda:	863b      	strh	r3, [r7, #48]	; 0x30
	}

	if (x0 > x1) {
 8002edc:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002ee0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002ee4:	429a      	cmp	r2, r3
 8002ee6:	dd0b      	ble.n	8002f00 <ILI9341_drawLine+0x8c>
		swap_ILI9341(x0, x1);
 8002ee8:	897b      	ldrh	r3, [r7, #10]
 8002eea:	83bb      	strh	r3, [r7, #28]
 8002eec:	88fb      	ldrh	r3, [r7, #6]
 8002eee:	817b      	strh	r3, [r7, #10]
 8002ef0:	8bbb      	ldrh	r3, [r7, #28]
 8002ef2:	80fb      	strh	r3, [r7, #6]
		swap_ILI9341(y0, y1);
 8002ef4:	893b      	ldrh	r3, [r7, #8]
 8002ef6:	837b      	strh	r3, [r7, #26]
 8002ef8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8002efa:	813b      	strh	r3, [r7, #8]
 8002efc:	8b7b      	ldrh	r3, [r7, #26]
 8002efe:	863b      	strh	r3, [r7, #48]	; 0x30
	}

	int16_t dx, dy;
	dx = x1 - x0;
 8002f00:	88fa      	ldrh	r2, [r7, #6]
 8002f02:	897b      	ldrh	r3, [r7, #10]
 8002f04:	1ad3      	subs	r3, r2, r3
 8002f06:	b29b      	uxth	r3, r3
 8002f08:	833b      	strh	r3, [r7, #24]
	dy = abs(y1 - y0);
 8002f0a:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8002f0e:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002f12:	1ad3      	subs	r3, r2, r3
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	bfb8      	it	lt
 8002f18:	425b      	neglt	r3, r3
 8002f1a:	82fb      	strh	r3, [r7, #22]

	int16_t err = dx / 2;
 8002f1c:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8002f20:	0fda      	lsrs	r2, r3, #31
 8002f22:	4413      	add	r3, r2
 8002f24:	105b      	asrs	r3, r3, #1
 8002f26:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t ystep;

	if (y0 < y1) {
 8002f28:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002f2c:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8002f30:	429a      	cmp	r2, r3
 8002f32:	da02      	bge.n	8002f3a <ILI9341_drawLine+0xc6>
		ystep = 1;
 8002f34:	2301      	movs	r3, #1
 8002f36:	84bb      	strh	r3, [r7, #36]	; 0x24
 8002f38:	e02d      	b.n	8002f96 <ILI9341_drawLine+0x122>
	} else {
		ystep = -1;
 8002f3a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8002f3e:	84bb      	strh	r3, [r7, #36]	; 0x24
	}

	for (; x0 <= x1; x0++) {
 8002f40:	e029      	b.n	8002f96 <ILI9341_drawLine+0x122>
		if (steep) {
 8002f42:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8002f46:	2b00      	cmp	r3, #0
 8002f48:	d006      	beq.n	8002f58 <ILI9341_drawLine+0xe4>
			ILI9341_DrawPixel(spi, y0, x0, color);
 8002f4a:	8939      	ldrh	r1, [r7, #8]
 8002f4c:	897a      	ldrh	r2, [r7, #10]
 8002f4e:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002f50:	68f8      	ldr	r0, [r7, #12]
 8002f52:	f7ff feaf 	bl	8002cb4 <ILI9341_DrawPixel>
 8002f56:	e005      	b.n	8002f64 <ILI9341_drawLine+0xf0>
		} else {
			ILI9341_DrawPixel(spi, x0, y0, color);
 8002f58:	8979      	ldrh	r1, [r7, #10]
 8002f5a:	893a      	ldrh	r2, [r7, #8]
 8002f5c:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002f5e:	68f8      	ldr	r0, [r7, #12]
 8002f60:	f7ff fea8 	bl	8002cb4 <ILI9341_DrawPixel>
		}
		err -= dy;
 8002f64:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002f66:	8afb      	ldrh	r3, [r7, #22]
 8002f68:	1ad3      	subs	r3, r2, r3
 8002f6a:	b29b      	uxth	r3, r3
 8002f6c:	84fb      	strh	r3, [r7, #38]	; 0x26
		if (err < 0) {
 8002f6e:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	da09      	bge.n	8002f8a <ILI9341_drawLine+0x116>
			y0 += ystep;
 8002f76:	893a      	ldrh	r2, [r7, #8]
 8002f78:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8002f7a:	4413      	add	r3, r2
 8002f7c:	b29b      	uxth	r3, r3
 8002f7e:	813b      	strh	r3, [r7, #8]
			err += dx;
 8002f80:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8002f82:	8b3b      	ldrh	r3, [r7, #24]
 8002f84:	4413      	add	r3, r2
 8002f86:	b29b      	uxth	r3, r3
 8002f88:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (; x0 <= x1; x0++) {
 8002f8a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8002f8e:	b29b      	uxth	r3, r3
 8002f90:	3301      	adds	r3, #1
 8002f92:	b29b      	uxth	r3, r3
 8002f94:	817b      	strh	r3, [r7, #10]
 8002f96:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8002f9a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8002f9e:	429a      	cmp	r2, r3
 8002fa0:	ddcf      	ble.n	8002f42 <ILI9341_drawLine+0xce>
		}
	}
}
 8002fa2:	bf00      	nop
 8002fa4:	3728      	adds	r7, #40	; 0x28
 8002fa6:	46bd      	mov	sp, r7
 8002fa8:	bd80      	pop	{r7, pc}

08002faa <ILI9341_drawFastHLine>:

void ILI9341_drawFastHLine(ILI9341_SPI *spi, int16_t x, int16_t y, int16_t w, uint16_t color) {
 8002faa:	b580      	push	{r7, lr}
 8002fac:	b086      	sub	sp, #24
 8002fae:	af02      	add	r7, sp, #8
 8002fb0:	60f8      	str	r0, [r7, #12]
 8002fb2:	4608      	mov	r0, r1
 8002fb4:	4611      	mov	r1, r2
 8002fb6:	461a      	mov	r2, r3
 8002fb8:	4603      	mov	r3, r0
 8002fba:	817b      	strh	r3, [r7, #10]
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	813b      	strh	r3, [r7, #8]
 8002fc0:	4613      	mov	r3, r2
 8002fc2:	80fb      	strh	r3, [r7, #6]
	ILI9341_drawLine(spi, x, y, x + w - 1, y, color);
 8002fc4:	897a      	ldrh	r2, [r7, #10]
 8002fc6:	88fb      	ldrh	r3, [r7, #6]
 8002fc8:	4413      	add	r3, r2
 8002fca:	b29b      	uxth	r3, r3
 8002fcc:	3b01      	subs	r3, #1
 8002fce:	b29b      	uxth	r3, r3
 8002fd0:	b218      	sxth	r0, r3
 8002fd2:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8002fd6:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8002fda:	8b3b      	ldrh	r3, [r7, #24]
 8002fdc:	9301      	str	r3, [sp, #4]
 8002fde:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8002fe2:	9300      	str	r3, [sp, #0]
 8002fe4:	4603      	mov	r3, r0
 8002fe6:	68f8      	ldr	r0, [r7, #12]
 8002fe8:	f7ff ff44 	bl	8002e74 <ILI9341_drawLine>
}
 8002fec:	bf00      	nop
 8002fee:	3710      	adds	r7, #16
 8002ff0:	46bd      	mov	sp, r7
 8002ff2:	bd80      	pop	{r7, pc}

08002ff4 <ILI9341_drawFastVLine>:

void ILI9341_drawFastVLine(ILI9341_SPI *spi, int16_t x, int16_t y, int16_t h, uint16_t color) {
 8002ff4:	b590      	push	{r4, r7, lr}
 8002ff6:	b087      	sub	sp, #28
 8002ff8:	af02      	add	r7, sp, #8
 8002ffa:	60f8      	str	r0, [r7, #12]
 8002ffc:	4608      	mov	r0, r1
 8002ffe:	4611      	mov	r1, r2
 8003000:	461a      	mov	r2, r3
 8003002:	4603      	mov	r3, r0
 8003004:	817b      	strh	r3, [r7, #10]
 8003006:	460b      	mov	r3, r1
 8003008:	813b      	strh	r3, [r7, #8]
 800300a:	4613      	mov	r3, r2
 800300c:	80fb      	strh	r3, [r7, #6]
	ILI9341_drawLine(spi, x, y, x, y + h - 1, color);
 800300e:	893a      	ldrh	r2, [r7, #8]
 8003010:	88fb      	ldrh	r3, [r7, #6]
 8003012:	4413      	add	r3, r2
 8003014:	b29b      	uxth	r3, r3
 8003016:	3b01      	subs	r3, #1
 8003018:	b29b      	uxth	r3, r3
 800301a:	b21b      	sxth	r3, r3
 800301c:	f9b7 400a 	ldrsh.w	r4, [r7, #10]
 8003020:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8003024:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003028:	8c3a      	ldrh	r2, [r7, #32]
 800302a:	9201      	str	r2, [sp, #4]
 800302c:	9300      	str	r3, [sp, #0]
 800302e:	4623      	mov	r3, r4
 8003030:	4602      	mov	r2, r0
 8003032:	68f8      	ldr	r0, [r7, #12]
 8003034:	f7ff ff1e 	bl	8002e74 <ILI9341_drawLine>
}
 8003038:	bf00      	nop
 800303a:	3714      	adds	r7, #20
 800303c:	46bd      	mov	sp, r7
 800303e:	bd90      	pop	{r4, r7, pc}

08003040 <ILI9341_drawChar>:
		ILI9341_drawFastHLine(spi, a, y, b - a + 1, color);
	}
}

// Text printing functions
void ILI9341_drawChar(ILI9341_SPI *spi, int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size) {
 8003040:	b5b0      	push	{r4, r5, r7, lr}
 8003042:	b088      	sub	sp, #32
 8003044:	af02      	add	r7, sp, #8
 8003046:	60f8      	str	r0, [r7, #12]
 8003048:	4608      	mov	r0, r1
 800304a:	4611      	mov	r1, r2
 800304c:	461a      	mov	r2, r3
 800304e:	4603      	mov	r3, r0
 8003050:	817b      	strh	r3, [r7, #10]
 8003052:	460b      	mov	r3, r1
 8003054:	813b      	strh	r3, [r7, #8]
 8003056:	4613      	mov	r3, r2
 8003058:	71fb      	strb	r3, [r7, #7]
	if (spi->rotationNum == 1 || spi->rotationNum == 3) {
 800305a:	68fb      	ldr	r3, [r7, #12]
 800305c:	781b      	ldrb	r3, [r3, #0]
 800305e:	2b01      	cmp	r3, #1
 8003060:	d003      	beq.n	800306a <ILI9341_drawChar+0x2a>
 8003062:	68fb      	ldr	r3, [r7, #12]
 8003064:	781b      	ldrb	r3, [r3, #0]
 8003066:	2b03      	cmp	r3, #3
 8003068:	d121      	bne.n	80030ae <ILI9341_drawChar+0x6e>
		if ((x >= ILI9341_WIDTH) || // Clip right
 800306a:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 800306e:	2bef      	cmp	r3, #239	; 0xef
 8003070:	f300 8122 	bgt.w	80032b8 <ILI9341_drawChar+0x278>
 8003074:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003078:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 800307c:	f280 811c 	bge.w	80032b8 <ILI9341_drawChar+0x278>
				(y >= ILI9341_HEIGHT) || // Clip bottom
				((x + 6 * size - 1) < 0) || // Clip left
 8003080:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8003084:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8003088:	4613      	mov	r3, r2
 800308a:	005b      	lsls	r3, r3, #1
 800308c:	4413      	add	r3, r2
 800308e:	005b      	lsls	r3, r3, #1
 8003090:	440b      	add	r3, r1
 8003092:	3b01      	subs	r3, #1
				(y >= ILI9341_HEIGHT) || // Clip bottom
 8003094:	2b00      	cmp	r3, #0
 8003096:	f2c0 810f 	blt.w	80032b8 <ILI9341_drawChar+0x278>
				((y + 8 * size - 1) < 0))   // Clip top
 800309a:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800309e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80030a2:	00db      	lsls	r3, r3, #3
 80030a4:	4413      	add	r3, r2
 80030a6:	3b01      	subs	r3, #1
				((x + 6 * size - 1) < 0) || // Clip left
 80030a8:	2b00      	cmp	r3, #0
 80030aa:	da23      	bge.n	80030f4 <ILI9341_drawChar+0xb4>
			return;
 80030ac:	e104      	b.n	80032b8 <ILI9341_drawChar+0x278>
	} else {
		if ((y >= ILI9341_WIDTH) || // Clip right
 80030ae:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80030b2:	2bef      	cmp	r3, #239	; 0xef
 80030b4:	f300 8102 	bgt.w	80032bc <ILI9341_drawChar+0x27c>
 80030b8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80030bc:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 80030c0:	f280 80fc 	bge.w	80032bc <ILI9341_drawChar+0x27c>
				(x >= ILI9341_HEIGHT) || // Clip bottom
				((y + 6 * size - 1) < 0) || // Clip left
 80030c4:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 80030c8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 80030cc:	4613      	mov	r3, r2
 80030ce:	005b      	lsls	r3, r3, #1
 80030d0:	4413      	add	r3, r2
 80030d2:	005b      	lsls	r3, r3, #1
 80030d4:	440b      	add	r3, r1
 80030d6:	3b01      	subs	r3, #1
				(x >= ILI9341_HEIGHT) || // Clip bottom
 80030d8:	2b00      	cmp	r3, #0
 80030da:	f2c0 80ef 	blt.w	80032bc <ILI9341_drawChar+0x27c>
				((x + 8 * size - 1) < 0))   // Clip top
 80030de:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 80030e2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80030e6:	00db      	lsls	r3, r3, #3
 80030e8:	4413      	add	r3, r2
 80030ea:	3b01      	subs	r3, #1
				((y + 6 * size - 1) < 0) || // Clip left
 80030ec:	2b00      	cmp	r3, #0
 80030ee:	f2c0 80e5 	blt.w	80032bc <ILI9341_drawChar+0x27c>
 80030f2:	e000      	b.n	80030f6 <ILI9341_drawChar+0xb6>
		if ((x >= ILI9341_WIDTH) || // Clip right
 80030f4:	bf00      	nop
			return;
	}

	if (!spi->_cp437 && (c >= 176))
 80030f6:	68fb      	ldr	r3, [r7, #12]
 80030f8:	785b      	ldrb	r3, [r3, #1]
 80030fa:	2b00      	cmp	r3, #0
 80030fc:	d105      	bne.n	800310a <ILI9341_drawChar+0xca>
 80030fe:	79fb      	ldrb	r3, [r7, #7]
 8003100:	2baf      	cmp	r3, #175	; 0xaf
 8003102:	d902      	bls.n	800310a <ILI9341_drawChar+0xca>
		c++; // Handle 'classic' charset behavior
 8003104:	79fb      	ldrb	r3, [r7, #7]
 8003106:	3301      	adds	r3, #1
 8003108:	71fb      	strb	r3, [r7, #7]

	for (int8_t i = 0; i < 6; i++) {
 800310a:	2300      	movs	r3, #0
 800310c:	75fb      	strb	r3, [r7, #23]
 800310e:	e0cd      	b.n	80032ac <ILI9341_drawChar+0x26c>
		uint8_t line;
		if (i == 5)
 8003110:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003114:	2b05      	cmp	r3, #5
 8003116:	d102      	bne.n	800311e <ILI9341_drawChar+0xde>
			line = 0x0;
 8003118:	2300      	movs	r3, #0
 800311a:	75bb      	strb	r3, [r7, #22]
 800311c:	e00b      	b.n	8003136 <ILI9341_drawChar+0xf6>
		else
			line = pgm_read_byte_ILI9341(font1 + (c * 5) + i);
 800311e:	79fa      	ldrb	r2, [r7, #7]
 8003120:	4613      	mov	r3, r2
 8003122:	009b      	lsls	r3, r3, #2
 8003124:	4413      	add	r3, r2
 8003126:	461a      	mov	r2, r3
 8003128:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800312c:	4413      	add	r3, r2
 800312e:	4a65      	ldr	r2, [pc, #404]	; (80032c4 <ILI9341_drawChar+0x284>)
 8003130:	4413      	add	r3, r2
 8003132:	781b      	ldrb	r3, [r3, #0]
 8003134:	75bb      	strb	r3, [r7, #22]
		for (int8_t j = 0; j < 8; j++) {
 8003136:	2300      	movs	r3, #0
 8003138:	757b      	strb	r3, [r7, #21]
 800313a:	e0ac      	b.n	8003296 <ILI9341_drawChar+0x256>
			if (line & 0x1) {
 800313c:	7dbb      	ldrb	r3, [r7, #22]
 800313e:	f003 0301 	and.w	r3, r3, #1
 8003142:	2b00      	cmp	r3, #0
 8003144:	d04d      	beq.n	80031e2 <ILI9341_drawChar+0x1a2>
				if (size == 1) // default size
 8003146:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800314a:	2b01      	cmp	r3, #1
 800314c:	d110      	bne.n	8003170 <ILI9341_drawChar+0x130>
					ILI9341_DrawPixel(spi, x + i, y + j, color);
 800314e:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003152:	b29a      	uxth	r2, r3
 8003154:	897b      	ldrh	r3, [r7, #10]
 8003156:	4413      	add	r3, r2
 8003158:	b299      	uxth	r1, r3
 800315a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800315e:	b29a      	uxth	r2, r3
 8003160:	893b      	ldrh	r3, [r7, #8]
 8003162:	4413      	add	r3, r2
 8003164:	b29a      	uxth	r2, r3
 8003166:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8003168:	68f8      	ldr	r0, [r7, #12]
 800316a:	f7ff fda3 	bl	8002cb4 <ILI9341_DrawPixel>
 800316e:	e089      	b.n	8003284 <ILI9341_drawChar+0x244>
				else {  // big size
					ILI9341_Fill_Rect(spi, x + (i * size), y + (j * size), size + x + (i * size), size + 1 + y + (j * size), color);
 8003170:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003174:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8003178:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800317c:	fb01 f303 	mul.w	r3, r1, r3
 8003180:	4413      	add	r3, r2
 8003182:	4618      	mov	r0, r3
 8003184:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8003188:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800318c:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8003190:	fb01 f303 	mul.w	r3, r1, r3
 8003194:	4413      	add	r3, r2
 8003196:	461c      	mov	r4, r3
 8003198:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 800319c:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 80031a0:	441a      	add	r2, r3
 80031a2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80031a6:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 80031aa:	fb01 f303 	mul.w	r3, r1, r3
 80031ae:	4413      	add	r3, r2
 80031b0:	461d      	mov	r5, r3
 80031b2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80031b6:	1c5a      	adds	r2, r3, #1
 80031b8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80031bc:	441a      	add	r2, r3
 80031be:	f997 3015 	ldrsb.w	r3, [r7, #21]
 80031c2:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 80031c6:	fb01 f303 	mul.w	r3, r1, r3
 80031ca:	4413      	add	r3, r2
 80031cc:	461a      	mov	r2, r3
 80031ce:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80031d0:	9301      	str	r3, [sp, #4]
 80031d2:	9200      	str	r2, [sp, #0]
 80031d4:	462b      	mov	r3, r5
 80031d6:	4622      	mov	r2, r4
 80031d8:	4601      	mov	r1, r0
 80031da:	68f8      	ldr	r0, [r7, #12]
 80031dc:	f7ff fdd7 	bl	8002d8e <ILI9341_Fill_Rect>
 80031e0:	e050      	b.n	8003284 <ILI9341_drawChar+0x244>
				}
			} else if (bg != color) {
 80031e2:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 80031e4:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 80031e6:	429a      	cmp	r2, r3
 80031e8:	d04c      	beq.n	8003284 <ILI9341_drawChar+0x244>
				if (size == 1) // default size
 80031ea:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80031ee:	2b01      	cmp	r3, #1
 80031f0:	d110      	bne.n	8003214 <ILI9341_drawChar+0x1d4>
					ILI9341_DrawPixel(spi, x + i, y + j, bg);
 80031f2:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80031f6:	b29a      	uxth	r2, r3
 80031f8:	897b      	ldrh	r3, [r7, #10]
 80031fa:	4413      	add	r3, r2
 80031fc:	b299      	uxth	r1, r3
 80031fe:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003202:	b29a      	uxth	r2, r3
 8003204:	893b      	ldrh	r3, [r7, #8]
 8003206:	4413      	add	r3, r2
 8003208:	b29a      	uxth	r2, r3
 800320a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800320c:	68f8      	ldr	r0, [r7, #12]
 800320e:	f7ff fd51 	bl	8002cb4 <ILI9341_DrawPixel>
 8003212:	e037      	b.n	8003284 <ILI9341_drawChar+0x244>
				else {  // big size
					ILI9341_Fill_Rect(spi, x + i * size, y + j * size, size + x + i * size, size + 1 + y + j * size, bg);
 8003214:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8003218:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800321c:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8003220:	fb01 f303 	mul.w	r3, r1, r3
 8003224:	4413      	add	r3, r2
 8003226:	4618      	mov	r0, r3
 8003228:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 800322c:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003230:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8003234:	fb01 f303 	mul.w	r3, r1, r3
 8003238:	4413      	add	r3, r2
 800323a:	461c      	mov	r4, r3
 800323c:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8003240:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8003244:	441a      	add	r2, r3
 8003246:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800324a:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800324e:	fb01 f303 	mul.w	r3, r1, r3
 8003252:	4413      	add	r3, r2
 8003254:	461d      	mov	r5, r3
 8003256:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800325a:	1c5a      	adds	r2, r3, #1
 800325c:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8003260:	441a      	add	r2, r3
 8003262:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8003266:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 800326a:	fb01 f303 	mul.w	r3, r1, r3
 800326e:	4413      	add	r3, r2
 8003270:	461a      	mov	r2, r3
 8003272:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8003274:	9301      	str	r3, [sp, #4]
 8003276:	9200      	str	r2, [sp, #0]
 8003278:	462b      	mov	r3, r5
 800327a:	4622      	mov	r2, r4
 800327c:	4601      	mov	r1, r0
 800327e:	68f8      	ldr	r0, [r7, #12]
 8003280:	f7ff fd85 	bl	8002d8e <ILI9341_Fill_Rect>
				}
			}
			line >>= 1;
 8003284:	7dbb      	ldrb	r3, [r7, #22]
 8003286:	085b      	lsrs	r3, r3, #1
 8003288:	75bb      	strb	r3, [r7, #22]
		for (int8_t j = 0; j < 8; j++) {
 800328a:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800328e:	b2db      	uxtb	r3, r3
 8003290:	3301      	adds	r3, #1
 8003292:	b2db      	uxtb	r3, r3
 8003294:	757b      	strb	r3, [r7, #21]
 8003296:	f997 3015 	ldrsb.w	r3, [r7, #21]
 800329a:	2b07      	cmp	r3, #7
 800329c:	f77f af4e 	ble.w	800313c <ILI9341_drawChar+0xfc>
	for (int8_t i = 0; i < 6; i++) {
 80032a0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	3301      	adds	r3, #1
 80032a8:	b2db      	uxtb	r3, r3
 80032aa:	75fb      	strb	r3, [r7, #23]
 80032ac:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80032b0:	2b05      	cmp	r3, #5
 80032b2:	f77f af2d 	ble.w	8003110 <ILI9341_drawChar+0xd0>
 80032b6:	e002      	b.n	80032be <ILI9341_drawChar+0x27e>
			return;
 80032b8:	bf00      	nop
 80032ba:	e000      	b.n	80032be <ILI9341_drawChar+0x27e>
			return;
 80032bc:	bf00      	nop
		}
	}
}
 80032be:	3718      	adds	r7, #24
 80032c0:	46bd      	mov	sp, r7
 80032c2:	bdb0      	pop	{r4, r5, r7, pc}
 80032c4:	08010058 	.word	0x08010058

080032c8 <ILI9341_printText>:
void ILI9341_printText(ILI9341_SPI *spi, char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size) {
 80032c8:	b580      	push	{r7, lr}
 80032ca:	b08a      	sub	sp, #40	; 0x28
 80032cc:	af04      	add	r7, sp, #16
 80032ce:	60f8      	str	r0, [r7, #12]
 80032d0:	60b9      	str	r1, [r7, #8]
 80032d2:	4611      	mov	r1, r2
 80032d4:	461a      	mov	r2, r3
 80032d6:	460b      	mov	r3, r1
 80032d8:	80fb      	strh	r3, [r7, #6]
 80032da:	4613      	mov	r3, r2
 80032dc:	80bb      	strh	r3, [r7, #4]
	int16_t offset;
	offset = size * 6;
 80032de:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80032e2:	b29b      	uxth	r3, r3
 80032e4:	461a      	mov	r2, r3
 80032e6:	0052      	lsls	r2, r2, #1
 80032e8:	4413      	add	r3, r2
 80032ea:	005b      	lsls	r3, r3, #1
 80032ec:	b29b      	uxth	r3, r3
 80032ee:	82bb      	strh	r3, [r7, #20]
	for (uint16_t i = 0; i < 40 && text[i] != NULL; i++) {
 80032f0:	2300      	movs	r3, #0
 80032f2:	82fb      	strh	r3, [r7, #22]
 80032f4:	e01c      	b.n	8003330 <ILI9341_printText+0x68>
		ILI9341_drawChar(spi, x + (offset * i), y, text[i], color, bg, size);
 80032f6:	8abb      	ldrh	r3, [r7, #20]
 80032f8:	8afa      	ldrh	r2, [r7, #22]
 80032fa:	fb12 f303 	smulbb	r3, r2, r3
 80032fe:	b29a      	uxth	r2, r3
 8003300:	88fb      	ldrh	r3, [r7, #6]
 8003302:	4413      	add	r3, r2
 8003304:	b29b      	uxth	r3, r3
 8003306:	b219      	sxth	r1, r3
 8003308:	8afb      	ldrh	r3, [r7, #22]
 800330a:	68ba      	ldr	r2, [r7, #8]
 800330c:	4413      	add	r3, r2
 800330e:	7818      	ldrb	r0, [r3, #0]
 8003310:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8003314:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8003318:	9302      	str	r3, [sp, #8]
 800331a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800331c:	9301      	str	r3, [sp, #4]
 800331e:	8c3b      	ldrh	r3, [r7, #32]
 8003320:	9300      	str	r3, [sp, #0]
 8003322:	4603      	mov	r3, r0
 8003324:	68f8      	ldr	r0, [r7, #12]
 8003326:	f7ff fe8b 	bl	8003040 <ILI9341_drawChar>
	for (uint16_t i = 0; i < 40 && text[i] != NULL; i++) {
 800332a:	8afb      	ldrh	r3, [r7, #22]
 800332c:	3301      	adds	r3, #1
 800332e:	82fb      	strh	r3, [r7, #22]
 8003330:	8afb      	ldrh	r3, [r7, #22]
 8003332:	2b27      	cmp	r3, #39	; 0x27
 8003334:	d805      	bhi.n	8003342 <ILI9341_printText+0x7a>
 8003336:	8afb      	ldrh	r3, [r7, #22]
 8003338:	68ba      	ldr	r2, [r7, #8]
 800333a:	4413      	add	r3, r2
 800333c:	781b      	ldrb	r3, [r3, #0]
 800333e:	2b00      	cmp	r3, #0
 8003340:	d1d9      	bne.n	80032f6 <ILI9341_printText+0x2e>
	}
}
 8003342:	bf00      	nop
 8003344:	3718      	adds	r7, #24
 8003346:	46bd      	mov	sp, r7
 8003348:	bd80      	pop	{r7, pc}

0800334a <ILI9341_printImage>:

// Image print (RGB 565, 2 bytes per pixel)
void ILI9341_printImage(ILI9341_SPI *spi, uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint8_t *data, uint32_t size) {
 800334a:	b580      	push	{r7, lr}
 800334c:	b088      	sub	sp, #32
 800334e:	af02      	add	r7, sp, #8
 8003350:	60f8      	str	r0, [r7, #12]
 8003352:	4608      	mov	r0, r1
 8003354:	4611      	mov	r1, r2
 8003356:	461a      	mov	r2, r3
 8003358:	4603      	mov	r3, r0
 800335a:	817b      	strh	r3, [r7, #10]
 800335c:	460b      	mov	r3, r1
 800335e:	813b      	strh	r3, [r7, #8]
 8003360:	4613      	mov	r3, r2
 8003362:	80fb      	strh	r3, [r7, #6]
	uint32_t n = size;
 8003364:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8003366:	613b      	str	r3, [r7, #16]
	ILI9341_SetCursorPosition(spi, x, y, w + x - 1, h + y - 1);
 8003368:	88fa      	ldrh	r2, [r7, #6]
 800336a:	897b      	ldrh	r3, [r7, #10]
 800336c:	4413      	add	r3, r2
 800336e:	b29b      	uxth	r3, r3
 8003370:	3b01      	subs	r3, #1
 8003372:	b298      	uxth	r0, r3
 8003374:	8c3a      	ldrh	r2, [r7, #32]
 8003376:	893b      	ldrh	r3, [r7, #8]
 8003378:	4413      	add	r3, r2
 800337a:	b29b      	uxth	r3, r3
 800337c:	3b01      	subs	r3, #1
 800337e:	b29b      	uxth	r3, r3
 8003380:	893a      	ldrh	r2, [r7, #8]
 8003382:	8979      	ldrh	r1, [r7, #10]
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	4603      	mov	r3, r0
 8003388:	68f8      	ldr	r0, [r7, #12]
 800338a:	f7ff fc3e 	bl	8002c0a <ILI9341_SetCursorPosition>
	for (uint32_t i = 0; i < n; i++) {
 800338e:	2300      	movs	r3, #0
 8003390:	617b      	str	r3, [r7, #20]
 8003392:	e00a      	b.n	80033aa <ILI9341_printImage+0x60>
		ILI9341_SendData(spi, data[i]);
 8003394:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8003396:	697b      	ldr	r3, [r7, #20]
 8003398:	4413      	add	r3, r2
 800339a:	781b      	ldrb	r3, [r3, #0]
 800339c:	4619      	mov	r1, r3
 800339e:	68f8      	ldr	r0, [r7, #12]
 80033a0:	f7ff fc07 	bl	8002bb2 <ILI9341_SendData>
	for (uint32_t i = 0; i < n; i++) {
 80033a4:	697b      	ldr	r3, [r7, #20]
 80033a6:	3301      	adds	r3, #1
 80033a8:	617b      	str	r3, [r7, #20]
 80033aa:	697a      	ldr	r2, [r7, #20]
 80033ac:	693b      	ldr	r3, [r7, #16]
 80033ae:	429a      	cmp	r2, r3
 80033b0:	d3f0      	bcc.n	8003394 <ILI9341_printImage+0x4a>
	}
}
 80033b2:	bf00      	nop
 80033b4:	3718      	adds	r7, #24
 80033b6:	46bd      	mov	sp, r7
 80033b8:	bd80      	pop	{r7, pc}
	...

080033bc <ILI9341_setRotation>:

// Set screen rotation
void ILI9341_setRotation(ILI9341_SPI *spi, uint8_t rotate) {
 80033bc:	b580      	push	{r7, lr}
 80033be:	b082      	sub	sp, #8
 80033c0:	af00      	add	r7, sp, #0
 80033c2:	6078      	str	r0, [r7, #4]
 80033c4:	460b      	mov	r3, r1
 80033c6:	70fb      	strb	r3, [r7, #3]
	if(spi->ScreenOrientation == rotate)
 80033c8:	687b      	ldr	r3, [r7, #4]
 80033ca:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 80033ce:	78fa      	ldrb	r2, [r7, #3]
 80033d0:	429a      	cmp	r2, r3
 80033d2:	d050      	beq.n	8003476 <ILI9341_setRotation+0xba>
		return; // No action

	spi->ScreenOrientation = rotate;
 80033d4:	687b      	ldr	r3, [r7, #4]
 80033d6:	78fa      	ldrb	r2, [r7, #3]
 80033d8:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	switch (rotate) {
 80033dc:	78fb      	ldrb	r3, [r7, #3]
 80033de:	3b01      	subs	r3, #1
 80033e0:	2b03      	cmp	r3, #3
 80033e2:	d83b      	bhi.n	800345c <ILI9341_setRotation+0xa0>
 80033e4:	a201      	add	r2, pc, #4	; (adr r2, 80033ec <ILI9341_setRotation+0x30>)
 80033e6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80033ea:	bf00      	nop
 80033ec:	080033fd 	.word	0x080033fd
 80033f0:	08003415 	.word	0x08003415
 80033f4:	0800342d 	.word	0x0800342d
 80033f8:	08003445 	.word	0x08003445
	case 1:
		spi->rotationNum = 1;
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	2201      	movs	r2, #1
 8003400:	701a      	strb	r2, [r3, #0]
		ILI9341_SendCommand(spi, ILI9341_MEMCONTROL);
 8003402:	2136      	movs	r1, #54	; 0x36
 8003404:	6878      	ldr	r0, [r7, #4]
 8003406:	f7ff fba8 	bl	8002b5a <ILI9341_SendCommand>
		ILI9341_SendData(spi, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 800340a:	2188      	movs	r1, #136	; 0x88
 800340c:	6878      	ldr	r0, [r7, #4]
 800340e:	f7ff fbd0 	bl	8002bb2 <ILI9341_SendData>
		break;
 8003412:	e031      	b.n	8003478 <ILI9341_setRotation+0xbc>
	case 2:
		spi->rotationNum = 2;
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	2202      	movs	r2, #2
 8003418:	701a      	strb	r2, [r3, #0]
		ILI9341_SendCommand(spi, ILI9341_MEMCONTROL);
 800341a:	2136      	movs	r1, #54	; 0x36
 800341c:	6878      	ldr	r0, [r7, #4]
 800341e:	f7ff fb9c 	bl	8002b5a <ILI9341_SendCommand>
		ILI9341_SendData(spi, ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8003422:	2128      	movs	r1, #40	; 0x28
 8003424:	6878      	ldr	r0, [r7, #4]
 8003426:	f7ff fbc4 	bl	8002bb2 <ILI9341_SendData>
		break;
 800342a:	e025      	b.n	8003478 <ILI9341_setRotation+0xbc>
	case 3:
		spi->rotationNum = 3;
 800342c:	687b      	ldr	r3, [r7, #4]
 800342e:	2203      	movs	r2, #3
 8003430:	701a      	strb	r2, [r3, #0]
		ILI9341_SendCommand(spi, ILI9341_MEMCONTROL);
 8003432:	2136      	movs	r1, #54	; 0x36
 8003434:	6878      	ldr	r0, [r7, #4]
 8003436:	f7ff fb90 	bl	8002b5a <ILI9341_SendCommand>
		ILI9341_SendData(spi, ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 800343a:	2148      	movs	r1, #72	; 0x48
 800343c:	6878      	ldr	r0, [r7, #4]
 800343e:	f7ff fbb8 	bl	8002bb2 <ILI9341_SendData>
		break;
 8003442:	e019      	b.n	8003478 <ILI9341_setRotation+0xbc>
	case 4:
		spi->rotationNum = 4;
 8003444:	687b      	ldr	r3, [r7, #4]
 8003446:	2204      	movs	r2, #4
 8003448:	701a      	strb	r2, [r3, #0]
		ILI9341_SendCommand(spi, ILI9341_MEMCONTROL);
 800344a:	2136      	movs	r1, #54	; 0x36
 800344c:	6878      	ldr	r0, [r7, #4]
 800344e:	f7ff fb84 	bl	8002b5a <ILI9341_SendCommand>
		ILI9341_SendData(spi, ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8003452:	21e8      	movs	r1, #232	; 0xe8
 8003454:	6878      	ldr	r0, [r7, #4]
 8003456:	f7ff fbac 	bl	8002bb2 <ILI9341_SendData>
		break;
 800345a:	e00d      	b.n	8003478 <ILI9341_setRotation+0xbc>
	default:
		spi->rotationNum = 1;
 800345c:	687b      	ldr	r3, [r7, #4]
 800345e:	2201      	movs	r2, #1
 8003460:	701a      	strb	r2, [r3, #0]
		ILI9341_SendCommand(spi, ILI9341_MEMCONTROL);
 8003462:	2136      	movs	r1, #54	; 0x36
 8003464:	6878      	ldr	r0, [r7, #4]
 8003466:	f7ff fb78 	bl	8002b5a <ILI9341_SendCommand>
		ILI9341_SendData(spi, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 800346a:	2188      	movs	r1, #136	; 0x88
 800346c:	6878      	ldr	r0, [r7, #4]
 800346e:	f7ff fba0 	bl	8002bb2 <ILI9341_SendData>
		break;
 8003472:	bf00      	nop
 8003474:	e000      	b.n	8003478 <ILI9341_setRotation+0xbc>
		return; // No action
 8003476:	bf00      	nop
	}
}
 8003478:	3708      	adds	r7, #8
 800347a:	46bd      	mov	sp, r7
 800347c:	bd80      	pop	{r7, pc}
 800347e:	bf00      	nop

08003480 <ILI9341_Init>:
 * CPHA = 1 Edge
 * Prescaler = 8 (be careful for this. Lower than 8 can cause trouble with the touch)
 * First bit = MBS first
 * CPOL = Low
 */
void ILI9341_Init(ILI9341_SPI *spi, SPI_HandleTypeDef *lcdHandle, GPIO_TypeDef *LCD_CS_PORT, uint16_t LCD_CS_PIN, GPIO_TypeDef *DC_PORT, uint16_t DC_PIN, GPIO_TypeDef *RESET_PORT, uint16_t RESET_PIN, GPIO_TypeDef *CS_PORT_TOUCH, uint16_t CS_PIN_TOUCH) {
 8003480:	b5b0      	push	{r4, r5, r7, lr}
 8003482:	b08e      	sub	sp, #56	; 0x38
 8003484:	af00      	add	r7, sp, #0
 8003486:	60f8      	str	r0, [r7, #12]
 8003488:	60b9      	str	r1, [r7, #8]
 800348a:	607a      	str	r2, [r7, #4]
 800348c:	807b      	strh	r3, [r7, #2]
	//Copy SPI settings
	spi->lcdHandle = lcdHandle;
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	68ba      	ldr	r2, [r7, #8]
 8003492:	605a      	str	r2, [r3, #4]
	//CS pin
	spi->LCD_CS_PORT = LCD_CS_PORT;
 8003494:	68fb      	ldr	r3, [r7, #12]
 8003496:	687a      	ldr	r2, [r7, #4]
 8003498:	609a      	str	r2, [r3, #8]
	spi->LCD_CS_PIN = LCD_CS_PIN;
 800349a:	68fb      	ldr	r3, [r7, #12]
 800349c:	887a      	ldrh	r2, [r7, #2]
 800349e:	819a      	strh	r2, [r3, #12]
	//DC pin
	spi->DC_PORT = DC_PORT;
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80034a4:	611a      	str	r2, [r3, #16]
	spi->DC_PIN = DC_PIN;
 80034a6:	68fb      	ldr	r3, [r7, #12]
 80034a8:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80034ac:	829a      	strh	r2, [r3, #20]
	HAL_GPIO_WritePin(spi->DC_PORT, spi->DC_PIN, GPIO_PIN_SET);
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	6918      	ldr	r0, [r3, #16]
 80034b2:	68fb      	ldr	r3, [r7, #12]
 80034b4:	8a9b      	ldrh	r3, [r3, #20]
 80034b6:	2201      	movs	r2, #1
 80034b8:	4619      	mov	r1, r3
 80034ba:	f005 fa11 	bl	80088e0 <HAL_GPIO_WritePin>
	//RESET pin
	spi->RESET_PORT = RESET_PORT;
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80034c2:	619a      	str	r2, [r3, #24]
	spi->RESET_PIN = RESET_PIN;
 80034c4:	68fb      	ldr	r3, [r7, #12]
 80034c6:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80034ca:	839a      	strh	r2, [r3, #28]
	HAL_GPIO_WritePin(spi->RESET_PORT, spi->RESET_PIN, GPIO_PIN_SET); //Turn LCD ON
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6998      	ldr	r0, [r3, #24]
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	8b9b      	ldrh	r3, [r3, #28]
 80034d4:	2201      	movs	r2, #1
 80034d6:	4619      	mov	r1, r3
 80034d8:	f005 fa02 	bl	80088e0 <HAL_GPIO_WritePin>
	// Initial parameters
	spi->_cp437 = 0; // False
 80034dc:	68fb      	ldr	r3, [r7, #12]
 80034de:	2200      	movs	r2, #0
 80034e0:	705a      	strb	r2, [r3, #1]
	spi->rotationNum = 1;
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	2201      	movs	r2, #1
 80034e6:	701a      	strb	r2, [r3, #0]

	ILI9341_SendCommand(spi, ILI9341_RESET); // software reset comand
 80034e8:	2101      	movs	r1, #1
 80034ea:	68f8      	ldr	r0, [r7, #12]
 80034ec:	f7ff fb35 	bl	8002b5a <ILI9341_SendCommand>
	HAL_Delay(100);
 80034f0:	2064      	movs	r0, #100	; 0x64
 80034f2:	f004 f9cd 	bl	8007890 <HAL_Delay>
	ILI9341_SendCommand(spi, ILI9341_DISPLAY_OFF); // display off
 80034f6:	2128      	movs	r1, #40	; 0x28
 80034f8:	68f8      	ldr	r0, [r7, #12]
 80034fa:	f7ff fb2e 	bl	8002b5a <ILI9341_SendCommand>
	//------------power control------------------------------
	ILI9341_SendCommand(spi, ILI9341_POWER1); // power control
 80034fe:	21c0      	movs	r1, #192	; 0xc0
 8003500:	68f8      	ldr	r0, [r7, #12]
 8003502:	f7ff fb2a 	bl	8002b5a <ILI9341_SendCommand>
	ILI9341_SendData(spi, 0x26); // GVDD = 4.75v
 8003506:	2126      	movs	r1, #38	; 0x26
 8003508:	68f8      	ldr	r0, [r7, #12]
 800350a:	f7ff fb52 	bl	8002bb2 <ILI9341_SendData>
	ILI9341_SendCommand(spi, ILI9341_POWER2); // power control
 800350e:	21c1      	movs	r1, #193	; 0xc1
 8003510:	68f8      	ldr	r0, [r7, #12]
 8003512:	f7ff fb22 	bl	8002b5a <ILI9341_SendCommand>
	ILI9341_SendData(spi, 0x11); // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3
 8003516:	2111      	movs	r1, #17
 8003518:	68f8      	ldr	r0, [r7, #12]
 800351a:	f7ff fb4a 	bl	8002bb2 <ILI9341_SendData>
	//--------------VCOM-------------------------------------
	ILI9341_SendCommand(spi, ILI9341_VCOM1); // vcom control
 800351e:	21c5      	movs	r1, #197	; 0xc5
 8003520:	68f8      	ldr	r0, [r7, #12]
 8003522:	f7ff fb1a 	bl	8002b5a <ILI9341_SendCommand>
	ILI9341_SendData(spi, 0x35); // Set the VCOMH voltage (0x35 = 4.025v)
 8003526:	2135      	movs	r1, #53	; 0x35
 8003528:	68f8      	ldr	r0, [r7, #12]
 800352a:	f7ff fb42 	bl	8002bb2 <ILI9341_SendData>
	ILI9341_SendData(spi, 0x3e); // Set the VCOML voltage (0x3E = -0.950v)
 800352e:	213e      	movs	r1, #62	; 0x3e
 8003530:	68f8      	ldr	r0, [r7, #12]
 8003532:	f7ff fb3e 	bl	8002bb2 <ILI9341_SendData>
	ILI9341_SendCommand(spi, ILI9341_VCOM2); // vcom control
 8003536:	21c7      	movs	r1, #199	; 0xc7
 8003538:	68f8      	ldr	r0, [r7, #12]
 800353a:	f7ff fb0e 	bl	8002b5a <ILI9341_SendCommand>
	ILI9341_SendData(spi, 0xbe);
 800353e:	21be      	movs	r1, #190	; 0xbe
 8003540:	68f8      	ldr	r0, [r7, #12]
 8003542:	f7ff fb36 	bl	8002bb2 <ILI9341_SendData>

	//------------memory access control------------------------
	ILI9341_SendCommand(spi, ILI9341_MAC); // memory access control
 8003546:	2136      	movs	r1, #54	; 0x36
 8003548:	68f8      	ldr	r0, [r7, #12]
 800354a:	f7ff fb06 	bl	8002b5a <ILI9341_SendCommand>
	ILI9341_SendData(spi, 0x48);
 800354e:	2148      	movs	r1, #72	; 0x48
 8003550:	68f8      	ldr	r0, [r7, #12]
 8003552:	f7ff fb2e 	bl	8002bb2 <ILI9341_SendData>

	ILI9341_SendCommand(spi, ILI9341_PIXEL_FORMAT); // pixel format set
 8003556:	213a      	movs	r1, #58	; 0x3a
 8003558:	68f8      	ldr	r0, [r7, #12]
 800355a:	f7ff fafe 	bl	8002b5a <ILI9341_SendCommand>
	ILI9341_SendData(spi, 0x55); // 16bit /pixel
 800355e:	2155      	movs	r1, #85	; 0x55
 8003560:	68f8      	ldr	r0, [r7, #12]
 8003562:	f7ff fb26 	bl	8002bb2 <ILI9341_SendData>

	ILI9341_SendCommand(spi, ILI9341_FRC);
 8003566:	21b1      	movs	r1, #177	; 0xb1
 8003568:	68f8      	ldr	r0, [r7, #12]
 800356a:	f7ff faf6 	bl	8002b5a <ILI9341_SendCommand>
	ILI9341_SendData(spi, 0);
 800356e:	2100      	movs	r1, #0
 8003570:	68f8      	ldr	r0, [r7, #12]
 8003572:	f7ff fb1e 	bl	8002bb2 <ILI9341_SendData>
	ILI9341_SendData(spi, 0x1F);
 8003576:	211f      	movs	r1, #31
 8003578:	68f8      	ldr	r0, [r7, #12]
 800357a:	f7ff fb1a 	bl	8002bb2 <ILI9341_SendData>
	//-------------ddram ----------------------------
	ILI9341_SendCommand(spi, ILI9341_COLUMN_ADDR); // column set
 800357e:	212a      	movs	r1, #42	; 0x2a
 8003580:	68f8      	ldr	r0, [r7, #12]
 8003582:	f7ff faea 	bl	8002b5a <ILI9341_SendCommand>
	ILI9341_SendData(spi, 0x00); // x0_HIGH---0
 8003586:	2100      	movs	r1, #0
 8003588:	68f8      	ldr	r0, [r7, #12]
 800358a:	f7ff fb12 	bl	8002bb2 <ILI9341_SendData>
	ILI9341_SendData(spi, 0x00); // x0_LOW----0
 800358e:	2100      	movs	r1, #0
 8003590:	68f8      	ldr	r0, [r7, #12]
 8003592:	f7ff fb0e 	bl	8002bb2 <ILI9341_SendData>
	ILI9341_SendData(spi, 0x00); // x1_HIGH---240
 8003596:	2100      	movs	r1, #0
 8003598:	68f8      	ldr	r0, [r7, #12]
 800359a:	f7ff fb0a 	bl	8002bb2 <ILI9341_SendData>
	ILI9341_SendData(spi, 0xEF); // x1_LOW----240
 800359e:	21ef      	movs	r1, #239	; 0xef
 80035a0:	68f8      	ldr	r0, [r7, #12]
 80035a2:	f7ff fb06 	bl	8002bb2 <ILI9341_SendData>
	ILI9341_SendCommand(spi, ILI9341_PAGE_ADDR); // page address set
 80035a6:	212b      	movs	r1, #43	; 0x2b
 80035a8:	68f8      	ldr	r0, [r7, #12]
 80035aa:	f7ff fad6 	bl	8002b5a <ILI9341_SendCommand>
	ILI9341_SendData(spi, 0x00); // y0_HIGH---0
 80035ae:	2100      	movs	r1, #0
 80035b0:	68f8      	ldr	r0, [r7, #12]
 80035b2:	f7ff fafe 	bl	8002bb2 <ILI9341_SendData>
	ILI9341_SendData(spi, 0x00); // y0_LOW----0
 80035b6:	2100      	movs	r1, #0
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f7ff fafa 	bl	8002bb2 <ILI9341_SendData>
	ILI9341_SendData(spi, 0x01); // y1_HIGH---320
 80035be:	2101      	movs	r1, #1
 80035c0:	68f8      	ldr	r0, [r7, #12]
 80035c2:	f7ff faf6 	bl	8002bb2 <ILI9341_SendData>
	ILI9341_SendData(spi, 0x3F); // y1_LOW----320
 80035c6:	213f      	movs	r1, #63	; 0x3f
 80035c8:	68f8      	ldr	r0, [r7, #12]
 80035ca:	f7ff faf2 	bl	8002bb2 <ILI9341_SendData>

	ILI9341_SendCommand(spi, ILI9341_TEARING_OFF); // tearing effect off
 80035ce:	2134      	movs	r1, #52	; 0x34
 80035d0:	68f8      	ldr	r0, [r7, #12]
 80035d2:	f7ff fac2 	bl	8002b5a <ILI9341_SendCommand>
	//LCD_write_cmd(ILI9341_TEARING_ON); // tearing effect on
	//LCD_write_cmd(ILI9341_DISPLAY_INVERSION); // display inversion
	ILI9341_SendCommand(spi, ILI9341_Entry_Mode_Set); // entry mode set
 80035d6:	21b7      	movs	r1, #183	; 0xb7
 80035d8:	68f8      	ldr	r0, [r7, #12]
 80035da:	f7ff fabe 	bl	8002b5a <ILI9341_SendCommand>
	// Deep Standby Mode: OFF
	// Set the output level of gate driver G1-G320: Normal display
	// Low voltage detection: Disable
	ILI9341_SendData(spi, 0x07);
 80035de:	2107      	movs	r1, #7
 80035e0:	68f8      	ldr	r0, [r7, #12]
 80035e2:	f7ff fae6 	bl	8002bb2 <ILI9341_SendData>
	//-----------------display------------------------
	ILI9341_SendCommand(spi, ILI9341_DFC); // display function control
 80035e6:	21b6      	movs	r1, #182	; 0xb6
 80035e8:	68f8      	ldr	r0, [r7, #12]
 80035ea:	f7ff fab6 	bl	8002b5a <ILI9341_SendCommand>
	//Set the scan mode in non-display area
	//Determine source/VCOM output in a non-display area in the partial display mode
	ILI9341_SendData(spi, 0x0a);
 80035ee:	210a      	movs	r1, #10
 80035f0:	68f8      	ldr	r0, [r7, #12]
 80035f2:	f7ff fade 	bl	8002bb2 <ILI9341_SendData>
	//Select whether the liquid crystal type is normally white type or normally black type
	//Sets the direction of scan by the gate driver in the range determined by SCN and NL
	//Select the shift direction of outputs from the source driver
	//Sets the gate driver pin arrangement in combination with the GS bit to select the optimal scan mode for the module
	//Specify the scan cycle interval of gate driver in non-display area when PTG to select interval scan
	ILI9341_SendData(spi, 0x82);
 80035f6:	2182      	movs	r1, #130	; 0x82
 80035f8:	68f8      	ldr	r0, [r7, #12]
 80035fa:	f7ff fada 	bl	8002bb2 <ILI9341_SendData>
	// Sets the number of lines to drive the LCD at an interval of 8 lines
	ILI9341_SendData(spi, 0x27);
 80035fe:	2127      	movs	r1, #39	; 0x27
 8003600:	68f8      	ldr	r0, [r7, #12]
 8003602:	f7ff fad6 	bl	8002bb2 <ILI9341_SendData>
	ILI9341_SendData(spi, 0x00); // clock divisor
 8003606:	2100      	movs	r1, #0
 8003608:	68f8      	ldr	r0, [r7, #12]
 800360a:	f7ff fad2 	bl	8002bb2 <ILI9341_SendData>

	ILI9341_SendCommand(spi, ILI9341_SLEEP_OUT); // sleep out
 800360e:	2111      	movs	r1, #17
 8003610:	68f8      	ldr	r0, [r7, #12]
 8003612:	f7ff faa2 	bl	8002b5a <ILI9341_SendCommand>
	HAL_Delay(100);
 8003616:	2064      	movs	r0, #100	; 0x64
 8003618:	f004 f93a 	bl	8007890 <HAL_Delay>
	ILI9341_SendCommand(spi, ILI9341_DISPLAY_ON); // display on
 800361c:	2129      	movs	r1, #41	; 0x29
 800361e:	68f8      	ldr	r0, [r7, #12]
 8003620:	f7ff fa9b 	bl	8002b5a <ILI9341_SendCommand>
	HAL_Delay(100);
 8003624:	2064      	movs	r0, #100	; 0x64
 8003626:	f004 f933 	bl	8007890 <HAL_Delay>
	ILI9341_SendCommand(spi, ILI9341_GRAM); // memory write
 800362a:	212c      	movs	r1, #44	; 0x2c
 800362c:	68f8      	ldr	r0, [r7, #12]
 800362e:	f7ff fa94 	bl	8002b5a <ILI9341_SendCommand>
	HAL_Delay(5);
 8003632:	2005      	movs	r0, #5
 8003634:	f004 f92c 	bl	8007890 <HAL_Delay>
	//Touch Screen SPI
	// Declare structures - uninitialized
	TS_TOUCH_RAW_Def myRawTouchDef;
	TS_TOUCH_RAW_Def localRawTouch;
	TS_CALIBRATE_Def myTS_Calibrate;
	spi->myTS_Calibrate = myTS_Calibrate;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 800363e:	f107 0514 	add.w	r5, r7, #20
 8003642:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8003644:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8003646:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800364a:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	spi->localRawTouch = localRawTouch;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8003652:	62da      	str	r2, [r3, #44]	; 0x2c
	spi->myRawTouchDef = myRawTouchDef;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8003658:	631a      	str	r2, [r3, #48]	; 0x30

	//Chip-Select Port and Pin
	spi->CS_PORT_TOUCH = CS_PORT_TOUCH;
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800365e:	621a      	str	r2, [r3, #32]
	spi->CS_PIN_TOUCH = CS_PIN_TOUCH;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 8003666:	849a      	strh	r2, [r3, #36]	; 0x24
	// Initial parameters
	spi->CMD_Default = 0x84;
 8003668:	68fb      	ldr	r3, [r7, #12]
 800366a:	2284      	movs	r2, #132	; 0x84
 800366c:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

}
 8003670:	bf00      	nop
 8003672:	3738      	adds	r7, #56	; 0x38
 8003674:	46bd      	mov	sp, r7
 8003676:	bdb0      	pop	{r4, r5, r7, pc}

08003678 <TSC2046_SendCommand>:

#include "LCD_ILI9341.h"

//Functions definitions
// Send TSC2046 Command and wait for a response
static uint16_t TSC2046_SendCommand(ILI9341_SPI *spi, uint8_t cmd) {
 8003678:	b580      	push	{r7, lr}
 800367a:	b084      	sub	sp, #16
 800367c:	af00      	add	r7, sp, #0
 800367e:	6078      	str	r0, [r7, #4]
 8003680:	460b      	mov	r3, r1
 8003682:	70fb      	strb	r3, [r7, #3]
	uint8_t spiBuf[3] = { 0, 0, 0 };
 8003684:	2300      	movs	r3, #0
 8003686:	723b      	strb	r3, [r7, #8]
 8003688:	2300      	movs	r3, #0
 800368a:	727b      	strb	r3, [r7, #9]
 800368c:	2300      	movs	r3, #0
 800368e:	72bb      	strb	r3, [r7, #10]
	uint16_t return16 = 0;
 8003690:	2300      	movs	r3, #0
 8003692:	81fb      	strh	r3, [r7, #14]

	HAL_GPIO_WritePin(spi->CS_PORT_TOUCH, spi->CS_PIN_TOUCH, GPIO_PIN_RESET);
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	6a18      	ldr	r0, [r3, #32]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800369c:	2200      	movs	r2, #0
 800369e:	4619      	mov	r1, r3
 80036a0:	f005 f91e 	bl	80088e0 <HAL_GPIO_WritePin>
	spiBuf[0] = cmd;
 80036a4:	78fb      	ldrb	r3, [r7, #3]
 80036a6:	723b      	strb	r3, [r7, #8]
	HAL_SPI_Transmit(spi->lcdHandle, spiBuf, 1, 10);
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	6858      	ldr	r0, [r3, #4]
 80036ac:	f107 0108 	add.w	r1, r7, #8
 80036b0:	230a      	movs	r3, #10
 80036b2:	2201      	movs	r2, #1
 80036b4:	f005 fed8 	bl	8009468 <HAL_SPI_Transmit>
	//Wait for response (3 ms)
	//HAL_Delay(3);
	if (HAL_SPI_Receive(spi->lcdHandle, &spiBuf[1], 2, 10) == HAL_OK){
 80036b8:	687b      	ldr	r3, [r7, #4]
 80036ba:	6858      	ldr	r0, [r3, #4]
 80036bc:	f107 0308 	add.w	r3, r7, #8
 80036c0:	1c59      	adds	r1, r3, #1
 80036c2:	230a      	movs	r3, #10
 80036c4:	2202      	movs	r2, #2
 80036c6:	f006 f803 	bl	80096d0 <HAL_SPI_Receive>
 80036ca:	4603      	mov	r3, r0
 80036cc:	2b00      	cmp	r3, #0
 80036ce:	d10a      	bne.n	80036e6 <TSC2046_SendCommand+0x6e>
		return16 = (spiBuf[1] << 4) + (spiBuf[2] >> 4);
 80036d0:	7a7b      	ldrb	r3, [r7, #9]
 80036d2:	b29b      	uxth	r3, r3
 80036d4:	011b      	lsls	r3, r3, #4
 80036d6:	b29a      	uxth	r2, r3
 80036d8:	7abb      	ldrb	r3, [r7, #10]
 80036da:	091b      	lsrs	r3, r3, #4
 80036dc:	b2db      	uxtb	r3, r3
 80036de:	b29b      	uxth	r3, r3
 80036e0:	4413      	add	r3, r2
 80036e2:	81fb      	strh	r3, [r7, #14]
 80036e4:	e001      	b.n	80036ea <TSC2046_SendCommand+0x72>
	}else{
		return16 = 0;
 80036e6:	2300      	movs	r3, #0
 80036e8:	81fb      	strh	r3, [r7, #14]
	}
	HAL_GPIO_WritePin(spi->CS_PORT_TOUCH, spi->CS_PIN_TOUCH, GPIO_PIN_SET);
 80036ea:	687b      	ldr	r3, [r7, #4]
 80036ec:	6a18      	ldr	r0, [r3, #32]
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80036f2:	2201      	movs	r2, #1
 80036f4:	4619      	mov	r1, r3
 80036f6:	f005 f8f3 	bl	80088e0 <HAL_GPIO_WritePin>

	return return16;
 80036fa:	89fb      	ldrh	r3, [r7, #14]
}
 80036fc:	4618      	mov	r0, r3
 80036fe:	3710      	adds	r7, #16
 8003700:	46bd      	mov	sp, r7
 8003702:	bd80      	pop	{r7, pc}

08003704 <TSC2046_getRaw_X>:

// Get raw touch data
//i. get x-axis raw touch 12-bit value
static uint16_t TSC2046_getRaw_X(ILI9341_SPI *spi) {
 8003704:	b580      	push	{r7, lr}
 8003706:	b082      	sub	sp, #8
 8003708:	af00      	add	r7, sp, #0
 800370a:	6078      	str	r0, [r7, #4]
	return TSC2046_SendCommand(spi, CMD_X_AXIS | spi->CMD_Default);
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003712:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 8003716:	b2db      	uxtb	r3, r3
 8003718:	4619      	mov	r1, r3
 800371a:	6878      	ldr	r0, [r7, #4]
 800371c:	f7ff ffac 	bl	8003678 <TSC2046_SendCommand>
 8003720:	4603      	mov	r3, r0
}
 8003722:	4618      	mov	r0, r3
 8003724:	3708      	adds	r7, #8
 8003726:	46bd      	mov	sp, r7
 8003728:	bd80      	pop	{r7, pc}

0800372a <TSC2046_getRaw_Y>:
//ii. get y-axis raw touch 12-bit value
static uint16_t TSC2046_getRaw_Y(ILI9341_SPI *spi) {
 800372a:	b580      	push	{r7, lr}
 800372c:	b082      	sub	sp, #8
 800372e:	af00      	add	r7, sp, #0
 8003730:	6078      	str	r0, [r7, #4]
	return TSC2046_SendCommand(spi, CMD_Y_AXIS | spi->CMD_Default);
 8003732:	687b      	ldr	r3, [r7, #4]
 8003734:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8003738:	f043 0310 	orr.w	r3, r3, #16
 800373c:	b2db      	uxtb	r3, r3
 800373e:	4619      	mov	r1, r3
 8003740:	6878      	ldr	r0, [r7, #4]
 8003742:	f7ff ff99 	bl	8003678 <TSC2046_SendCommand>
 8003746:	4603      	mov	r3, r0
}
 8003748:	4618      	mov	r0, r3
 800374a:	3708      	adds	r7, #8
 800374c:	46bd      	mov	sp, r7
 800374e:	bd80      	pop	{r7, pc}

08003750 <TSC2046_getRaw_Z>:
//iii. get z-axis raw touch 12-bit value
static uint16_t TSC2046_getRaw_Z(ILI9341_SPI *spi) {
 8003750:	b580      	push	{r7, lr}
 8003752:	b082      	sub	sp, #8
 8003754:	af00      	add	r7, sp, #0
 8003756:	6078      	str	r0, [r7, #4]
	return TSC2046_SendCommand(spi, CMD_Z_AXIS | spi->CMD_Default);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800375e:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8003762:	b2db      	uxtb	r3, r3
 8003764:	4619      	mov	r1, r3
 8003766:	6878      	ldr	r0, [r7, #4]
 8003768:	f7ff ff86 	bl	8003678 <TSC2046_SendCommand>
 800376c:	4603      	mov	r3, r0
}
 800376e:	4618      	mov	r0, r3
 8003770:	3708      	adds	r7, #8
 8003772:	46bd      	mov	sp, r7
 8003774:	bd80      	pop	{r7, pc}
	...

08003778 <TSC2046_TL_point>:

// Print calibration points
//i. Top-Left corner point
static void TSC2046_TL_point(ILI9341_SPI *spi) {
 8003778:	b580      	push	{r7, lr}
 800377a:	b086      	sub	sp, #24
 800377c:	af04      	add	r7, sp, #16
 800377e:	6078      	str	r0, [r7, #4]
	ILI9341_fillCircle(spi, 1, 1, 3, COLOR_RED);
 8003780:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003784:	9300      	str	r3, [sp, #0]
 8003786:	2303      	movs	r3, #3
 8003788:	2201      	movs	r2, #1
 800378a:	2101      	movs	r1, #1
 800378c:	6878      	ldr	r0, [r7, #4]
 800378e:	f7ff fb3d 	bl	8002e0c <ILI9341_fillCircle>
	ILI9341_printText(spi, "Press here", 20, 30, COLOR_RED, COLOR_RED, 1);
 8003792:	2301      	movs	r3, #1
 8003794:	9302      	str	r3, [sp, #8]
 8003796:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800379a:	9301      	str	r3, [sp, #4]
 800379c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80037a0:	9300      	str	r3, [sp, #0]
 80037a2:	231e      	movs	r3, #30
 80037a4:	2214      	movs	r2, #20
 80037a6:	4904      	ldr	r1, [pc, #16]	; (80037b8 <TSC2046_TL_point+0x40>)
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f7ff fd8d 	bl	80032c8 <ILI9341_printText>
}
 80037ae:	bf00      	nop
 80037b0:	3708      	adds	r7, #8
 80037b2:	46bd      	mov	sp, r7
 80037b4:	bd80      	pop	{r7, pc}
 80037b6:	bf00      	nop
 80037b8:	0800ff88 	.word	0x0800ff88

080037bc <TSC2046_BR_point>:
//ii. Bottom-Right corner point
static void TSC2046_BR_point(ILI9341_SPI *spi) {
 80037bc:	b580      	push	{r7, lr}
 80037be:	b086      	sub	sp, #24
 80037c0:	af04      	add	r7, sp, #16
 80037c2:	6078      	str	r0, [r7, #4]
	ILI9341_fillCircle(spi, spi->myTS_Calibrate.Width - 1, spi->myTS_Calibrate.Height - 1, 3, COLOR_RED);
 80037c4:	687b      	ldr	r3, [r7, #4]
 80037c6:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80037ca:	3b01      	subs	r3, #1
 80037cc:	b29b      	uxth	r3, r3
 80037ce:	b219      	sxth	r1, r3
 80037d0:	687b      	ldr	r3, [r7, #4]
 80037d2:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80037d6:	3b01      	subs	r3, #1
 80037d8:	b29b      	uxth	r3, r3
 80037da:	b21a      	sxth	r2, r3
 80037dc:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80037e0:	9300      	str	r3, [sp, #0]
 80037e2:	2303      	movs	r3, #3
 80037e4:	6878      	ldr	r0, [r7, #4]
 80037e6:	f7ff fb11 	bl	8002e0c <ILI9341_fillCircle>
	ILI9341_printText(spi, "Press here", spi->myTS_Calibrate.Width - 80, spi->myTS_Calibrate.Height - 40, COLOR_RED, COLOR_RED, 1);
 80037ea:	687b      	ldr	r3, [r7, #4]
 80037ec:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80037f0:	3b50      	subs	r3, #80	; 0x50
 80037f2:	b29b      	uxth	r3, r3
 80037f4:	b21a      	sxth	r2, r3
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 80037fc:	3b28      	subs	r3, #40	; 0x28
 80037fe:	b29b      	uxth	r3, r3
 8003800:	b219      	sxth	r1, r3
 8003802:	2301      	movs	r3, #1
 8003804:	9302      	str	r3, [sp, #8]
 8003806:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800380a:	9301      	str	r3, [sp, #4]
 800380c:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8003810:	9300      	str	r3, [sp, #0]
 8003812:	460b      	mov	r3, r1
 8003814:	4903      	ldr	r1, [pc, #12]	; (8003824 <TSC2046_BR_point+0x68>)
 8003816:	6878      	ldr	r0, [r7, #4]
 8003818:	f7ff fd56 	bl	80032c8 <ILI9341_printText>
}
 800381c:	bf00      	nop
 800381e:	3708      	adds	r7, #8
 8003820:	46bd      	mov	sp, r7
 8003822:	bd80      	pop	{r7, pc}
 8003824:	0800ff88 	.word	0x0800ff88

08003828 <TSC2046_GetRawTouch>:
static uint8_t TSC2046_getOrientation(ILI9341_SPI *spi) {
	return ILI9341_getRotation(spi);
}

// Poll for touch status
static void TSC2046_GetRawTouch(ILI9341_SPI *spi) {
 8003828:	b580      	push	{r7, lr}
 800382a:	b082      	sub	sp, #8
 800382c:	af00      	add	r7, sp, #0
 800382e:	6078      	str	r0, [r7, #4]

	//Assign raw touch based on orientation
	switch (spi->ScreenOrientation) {
 8003830:	687b      	ldr	r3, [r7, #4]
 8003832:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8003836:	3b01      	subs	r3, #1
 8003838:	2b03      	cmp	r3, #3
 800383a:	d877      	bhi.n	800392c <TSC2046_GetRawTouch+0x104>
 800383c:	a201      	add	r2, pc, #4	; (adr r2, 8003844 <TSC2046_GetRawTouch+0x1c>)
 800383e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003842:	bf00      	nop
 8003844:	08003855 	.word	0x08003855
 8003848:	0800388b 	.word	0x0800388b
 800384c:	080038c7 	.word	0x080038c7
 8003850:	080038fd 	.word	0x080038fd
	case 1:
		spi->localRawTouch.x_touch = 4095 - TSC2046_getRaw_X(spi);
 8003854:	6878      	ldr	r0, [r7, #4]
 8003856:	f7ff ff55 	bl	8003704 <TSC2046_getRaw_X>
 800385a:	4603      	mov	r3, r0
 800385c:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8003860:	330f      	adds	r3, #15
 8003862:	b29a      	uxth	r2, r3
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	859a      	strh	r2, [r3, #44]	; 0x2c
		spi->localRawTouch.y_touch = TSC2046_getRaw_Y(spi);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f7ff ff5e 	bl	800372a <TSC2046_getRaw_Y>
 800386e:	4603      	mov	r3, r0
 8003870:	461a      	mov	r2, r3
 8003872:	687b      	ldr	r3, [r7, #4]
 8003874:	85da      	strh	r2, [r3, #46]	; 0x2e
		spi->myTS_Calibrate.Width = 230;
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	22e6      	movs	r2, #230	; 0xe6
 800387a:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		spi->myTS_Calibrate.Height = 320;
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8003884:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		break;
 8003888:	e050      	b.n	800392c <TSC2046_GetRawTouch+0x104>

	case 2:
		spi->localRawTouch.x_touch = 4095 - TSC2046_getRaw_Y(spi);
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f7ff ff4d 	bl	800372a <TSC2046_getRaw_Y>
 8003890:	4603      	mov	r3, r0
 8003892:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8003896:	330f      	adds	r3, #15
 8003898:	b29a      	uxth	r2, r3
 800389a:	687b      	ldr	r3, [r7, #4]
 800389c:	859a      	strh	r2, [r3, #44]	; 0x2c
		spi->localRawTouch.y_touch = 4095 - TSC2046_getRaw_X(spi);
 800389e:	6878      	ldr	r0, [r7, #4]
 80038a0:	f7ff ff30 	bl	8003704 <TSC2046_getRaw_X>
 80038a4:	4603      	mov	r3, r0
 80038a6:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80038aa:	330f      	adds	r3, #15
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	85da      	strh	r2, [r3, #46]	; 0x2e
		spi->myTS_Calibrate.Width = 320;
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80038b8:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		spi->myTS_Calibrate.Height = 240;
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	22f0      	movs	r2, #240	; 0xf0
 80038c0:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		break;
 80038c4:	e032      	b.n	800392c <TSC2046_GetRawTouch+0x104>

	case 3:
		spi->localRawTouch.x_touch = TSC2046_getRaw_X(spi);
 80038c6:	6878      	ldr	r0, [r7, #4]
 80038c8:	f7ff ff1c 	bl	8003704 <TSC2046_getRaw_X>
 80038cc:	4603      	mov	r3, r0
 80038ce:	461a      	mov	r2, r3
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	859a      	strh	r2, [r3, #44]	; 0x2c
		spi->localRawTouch.y_touch = 4095 - TSC2046_getRaw_Y(spi);
 80038d4:	6878      	ldr	r0, [r7, #4]
 80038d6:	f7ff ff28 	bl	800372a <TSC2046_getRaw_Y>
 80038da:	4603      	mov	r3, r0
 80038dc:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80038e0:	330f      	adds	r3, #15
 80038e2:	b29a      	uxth	r2, r3
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	85da      	strh	r2, [r3, #46]	; 0x2e
		spi->myTS_Calibrate.Width = 230;
 80038e8:	687b      	ldr	r3, [r7, #4]
 80038ea:	22e6      	movs	r2, #230	; 0xe6
 80038ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		spi->myTS_Calibrate.Height = 320;
 80038f0:	687b      	ldr	r3, [r7, #4]
 80038f2:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80038f6:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		break;
 80038fa:	e017      	b.n	800392c <TSC2046_GetRawTouch+0x104>

	case 4:
		spi->localRawTouch.x_touch = TSC2046_getRaw_Y(spi);
 80038fc:	6878      	ldr	r0, [r7, #4]
 80038fe:	f7ff ff14 	bl	800372a <TSC2046_getRaw_Y>
 8003902:	4603      	mov	r3, r0
 8003904:	461a      	mov	r2, r3
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	859a      	strh	r2, [r3, #44]	; 0x2c
		spi->localRawTouch.y_touch = TSC2046_getRaw_X(spi);
 800390a:	6878      	ldr	r0, [r7, #4]
 800390c:	f7ff fefa 	bl	8003704 <TSC2046_getRaw_X>
 8003910:	4603      	mov	r3, r0
 8003912:	461a      	mov	r2, r3
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	85da      	strh	r2, [r3, #46]	; 0x2e
		spi->myTS_Calibrate.Width = 320;
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800391e:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		spi->myTS_Calibrate.Height = 240;
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	22f0      	movs	r2, #240	; 0xf0
 8003926:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		break;
 800392a:	bf00      	nop
	}
	// These are for the calibration
	spi->myRawTouchDef.x_touch = spi->localRawTouch.x_touch;
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	861a      	strh	r2, [r3, #48]	; 0x30
	spi->myRawTouchDef.y_touch = spi->localRawTouch.y_touch;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	865a      	strh	r2, [r3, #50]	; 0x32
}
 800393c:	bf00      	nop
 800393e:	3708      	adds	r7, #8
 8003940:	46bd      	mov	sp, r7
 8003942:	bd80      	pop	{r7, pc}
 8003944:	0000      	movs	r0, r0
	...

08003948 <TSC2046_Calibrate>:

// Calibrate resistive touch panel
void TSC2046_Calibrate(ILI9341_SPI *spi) {
 8003948:	b590      	push	{r4, r7, lr}
 800394a:	b085      	sub	sp, #20
 800394c:	af00      	add	r7, sp, #0
 800394e:	6078      	str	r0, [r7, #4]
	// Set rotation
	ILI9341_setRotation(spi, 2);
 8003950:	2102      	movs	r1, #2
 8003952:	6878      	ldr	r0, [r7, #4]
 8003954:	f7ff fd32 	bl	80033bc <ILI9341_setRotation>

	uint16_t watchVar1 = 0;
 8003958:	2300      	movs	r3, #0
 800395a:	81bb      	strh	r3, [r7, #12]
	//Get Top-Left corner calibration coordinate
	TSC2046_TL_point(spi);
 800395c:	6878      	ldr	r0, [r7, #4]
 800395e:	f7ff ff0b 	bl	8003778 <TSC2046_TL_point>
	spi->myTS_Calibrate.TL_X = 0;
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	2200      	movs	r2, #0
 8003966:	879a      	strh	r2, [r3, #60]	; 0x3c
	spi->myTS_Calibrate.TL_Y = 0;
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	2200      	movs	r2, #0
 800396c:	87da      	strh	r2, [r3, #62]	; 0x3e
	spi->myTS_Calibrate.BR_X = 0;
 800396e:	687b      	ldr	r3, [r7, #4]
 8003970:	2200      	movs	r2, #0
 8003972:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	spi->myTS_Calibrate.BR_Y = 0;
 8003976:	687b      	ldr	r3, [r7, #4]
 8003978:	2200      	movs	r2, #0
 800397a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	spi->myRawTouchDef.y_touch = 0;
 800397e:	687b      	ldr	r3, [r7, #4]
 8003980:	2200      	movs	r2, #0
 8003982:	865a      	strh	r2, [r3, #50]	; 0x32
	spi->myRawTouchDef.x_touch = 0;
 8003984:	687b      	ldr	r3, [r7, #4]
 8003986:	2200      	movs	r2, #0
 8003988:	861a      	strh	r2, [r3, #48]	; 0x30

	while (1) {
		watchVar1 = TSC2046_getRaw_Z(spi);
 800398a:	6878      	ldr	r0, [r7, #4]
 800398c:	f7ff fee0 	bl	8003750 <TSC2046_getRaw_Z>
 8003990:	4603      	mov	r3, r0
 8003992:	81bb      	strh	r3, [r7, #12]
		if (watchVar1 > 50) {
 8003994:	89bb      	ldrh	r3, [r7, #12]
 8003996:	2b32      	cmp	r3, #50	; 0x32
 8003998:	d91c      	bls.n	80039d4 <TSC2046_Calibrate+0x8c>
			for (uint8_t i = 0; i < 10; i++) {
 800399a:	2300      	movs	r3, #0
 800399c:	73fb      	strb	r3, [r7, #15]
 800399e:	e015      	b.n	80039cc <TSC2046_Calibrate+0x84>

				TSC2046_GetRawTouch(spi);
 80039a0:	6878      	ldr	r0, [r7, #4]
 80039a2:	f7ff ff41 	bl	8003828 <TSC2046_GetRawTouch>
				spi->myTS_Calibrate.TL_X += spi->myRawTouchDef.x_touch;
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80039ae:	4413      	add	r3, r2
 80039b0:	b29a      	uxth	r2, r3
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	879a      	strh	r2, [r3, #60]	; 0x3c
				spi->myTS_Calibrate.TL_Y += spi->myRawTouchDef.y_touch;
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80039be:	4413      	add	r3, r2
 80039c0:	b29a      	uxth	r2, r3
 80039c2:	687b      	ldr	r3, [r7, #4]
 80039c4:	87da      	strh	r2, [r3, #62]	; 0x3e
			for (uint8_t i = 0; i < 10; i++) {
 80039c6:	7bfb      	ldrb	r3, [r7, #15]
 80039c8:	3301      	adds	r3, #1
 80039ca:	73fb      	strb	r3, [r7, #15]
 80039cc:	7bfb      	ldrb	r3, [r7, #15]
 80039ce:	2b09      	cmp	r3, #9
 80039d0:	d9e6      	bls.n	80039a0 <TSC2046_Calibrate+0x58>
			}

			break;
 80039d2:	e003      	b.n	80039dc <TSC2046_Calibrate+0x94>
		}
		HAL_Delay(10);
 80039d4:	200a      	movs	r0, #10
 80039d6:	f003 ff5b 	bl	8007890 <HAL_Delay>
		watchVar1 = TSC2046_getRaw_Z(spi);
 80039da:	e7d6      	b.n	800398a <TSC2046_Calibrate+0x42>
	}
	HAL_Delay(1000);
 80039dc:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80039e0:	f003 ff56 	bl	8007890 <HAL_Delay>
	//Get Bottom-Right corner calibration coordinate
	TSC2046_BR_point(spi);
 80039e4:	6878      	ldr	r0, [r7, #4]
 80039e6:	f7ff fee9 	bl	80037bc <TSC2046_BR_point>
	while (1) {
		watchVar1 = TSC2046_getRaw_Z(spi);
 80039ea:	6878      	ldr	r0, [r7, #4]
 80039ec:	f7ff feb0 	bl	8003750 <TSC2046_getRaw_Z>
 80039f0:	4603      	mov	r3, r0
 80039f2:	81bb      	strh	r3, [r7, #12]
		if (watchVar1 > 50) {
 80039f4:	89bb      	ldrh	r3, [r7, #12]
 80039f6:	2b32      	cmp	r3, #50	; 0x32
 80039f8:	d920      	bls.n	8003a3c <TSC2046_Calibrate+0xf4>
			for (uint8_t i = 0; i < 10; i++) {
 80039fa:	2300      	movs	r3, #0
 80039fc:	73bb      	strb	r3, [r7, #14]
 80039fe:	e019      	b.n	8003a34 <TSC2046_Calibrate+0xec>
				TSC2046_GetRawTouch(spi);
 8003a00:	6878      	ldr	r0, [r7, #4]
 8003a02:	f7ff ff11 	bl	8003828 <TSC2046_GetRawTouch>
				spi->myTS_Calibrate.BR_X += spi->myRawTouchDef.x_touch;
 8003a06:	687b      	ldr	r3, [r7, #4]
 8003a08:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8003a10:	4413      	add	r3, r2
 8003a12:	b29a      	uxth	r2, r3
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
				spi->myTS_Calibrate.BR_Y += spi->myRawTouchDef.y_touch;
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8003a24:	4413      	add	r3, r2
 8003a26:	b29a      	uxth	r2, r3
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			for (uint8_t i = 0; i < 10; i++) {
 8003a2e:	7bbb      	ldrb	r3, [r7, #14]
 8003a30:	3301      	adds	r3, #1
 8003a32:	73bb      	strb	r3, [r7, #14]
 8003a34:	7bbb      	ldrb	r3, [r7, #14]
 8003a36:	2b09      	cmp	r3, #9
 8003a38:	d9e2      	bls.n	8003a00 <TSC2046_Calibrate+0xb8>
			}
			break;
 8003a3a:	e003      	b.n	8003a44 <TSC2046_Calibrate+0xfc>
		}
		HAL_Delay(10);
 8003a3c:	200a      	movs	r0, #10
 8003a3e:	f003 ff27 	bl	8007890 <HAL_Delay>
		watchVar1 = TSC2046_getRaw_Z(spi);
 8003a42:	e7d2      	b.n	80039ea <TSC2046_Calibrate+0xa2>
	}

	spi->myTS_Calibrate.TL_X *= 0.1;
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003a48:	4618      	mov	r0, r3
 8003a4a:	f7fc fd3b 	bl	80004c4 <__aeabi_i2d>
 8003a4e:	a35b      	add	r3, pc, #364	; (adr r3, 8003bbc <TSC2046_Calibrate+0x274>)
 8003a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a54:	f7fc fda0 	bl	8000598 <__aeabi_dmul>
 8003a58:	4603      	mov	r3, r0
 8003a5a:	460c      	mov	r4, r1
 8003a5c:	4618      	mov	r0, r3
 8003a5e:	4621      	mov	r1, r4
 8003a60:	f7fd f85c 	bl	8000b1c <__aeabi_d2uiz>
 8003a64:	4603      	mov	r3, r0
 8003a66:	b29a      	uxth	r2, r3
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	879a      	strh	r2, [r3, #60]	; 0x3c
	spi->myTS_Calibrate.TL_Y *= 0.1;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003a70:	4618      	mov	r0, r3
 8003a72:	f7fc fd27 	bl	80004c4 <__aeabi_i2d>
 8003a76:	a351      	add	r3, pc, #324	; (adr r3, 8003bbc <TSC2046_Calibrate+0x274>)
 8003a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a7c:	f7fc fd8c 	bl	8000598 <__aeabi_dmul>
 8003a80:	4603      	mov	r3, r0
 8003a82:	460c      	mov	r4, r1
 8003a84:	4618      	mov	r0, r3
 8003a86:	4621      	mov	r1, r4
 8003a88:	f7fd f848 	bl	8000b1c <__aeabi_d2uiz>
 8003a8c:	4603      	mov	r3, r0
 8003a8e:	b29a      	uxth	r2, r3
 8003a90:	687b      	ldr	r3, [r7, #4]
 8003a92:	87da      	strh	r2, [r3, #62]	; 0x3e

	spi->myTS_Calibrate.BR_X *= 0.1;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003a9a:	4618      	mov	r0, r3
 8003a9c:	f7fc fd12 	bl	80004c4 <__aeabi_i2d>
 8003aa0:	a346      	add	r3, pc, #280	; (adr r3, 8003bbc <TSC2046_Calibrate+0x274>)
 8003aa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003aa6:	f7fc fd77 	bl	8000598 <__aeabi_dmul>
 8003aaa:	4603      	mov	r3, r0
 8003aac:	460c      	mov	r4, r1
 8003aae:	4618      	mov	r0, r3
 8003ab0:	4621      	mov	r1, r4
 8003ab2:	f7fd f833 	bl	8000b1c <__aeabi_d2uiz>
 8003ab6:	4603      	mov	r3, r0
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	spi->myTS_Calibrate.BR_Y *= 0.1;
 8003ac0:	687b      	ldr	r3, [r7, #4]
 8003ac2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003ac6:	4618      	mov	r0, r3
 8003ac8:	f7fc fcfc 	bl	80004c4 <__aeabi_i2d>
 8003acc:	a33b      	add	r3, pc, #236	; (adr r3, 8003bbc <TSC2046_Calibrate+0x274>)
 8003ace:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ad2:	f7fc fd61 	bl	8000598 <__aeabi_dmul>
 8003ad6:	4603      	mov	r3, r0
 8003ad8:	460c      	mov	r4, r1
 8003ada:	4618      	mov	r0, r3
 8003adc:	4621      	mov	r1, r4
 8003ade:	f7fd f81d 	bl	8000b1c <__aeabi_d2uiz>
 8003ae2:	4603      	mov	r3, r0
 8003ae4:	b29a      	uxth	r2, r3
 8003ae6:	687b      	ldr	r3, [r7, #4]
 8003ae8:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	//1. Calculate X_Diff, Y_Diff
	spi->myTS_Calibrate.Scale_X = (spi->myTS_Calibrate.Width + 0.0f) / (spi->myTS_Calibrate.BR_X - spi->myTS_Calibrate.TL_X + 0.0f);
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8003af2:	ee07 3a90 	vmov	s15, r3
 8003af6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003afa:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 8003bb8 <TSC2046_Calibrate+0x270>
 8003afe:	ee77 6a87 	vadd.f32	s13, s15, s14
 8003b02:	687b      	ldr	r3, [r7, #4]
 8003b04:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8003b08:	461a      	mov	r2, r3
 8003b0a:	687b      	ldr	r3, [r7, #4]
 8003b0c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003b0e:	1ad3      	subs	r3, r2, r3
 8003b10:	ee07 3a90 	vmov	s15, r3
 8003b14:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b18:	ed9f 7a27 	vldr	s14, [pc, #156]	; 8003bb8 <TSC2046_Calibrate+0x270>
 8003b1c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b20:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	spi->myTS_Calibrate.Scale_Y = (spi->myTS_Calibrate.Height + 0.0f) / (spi->myTS_Calibrate.BR_Y - spi->myTS_Calibrate.TL_Y + 0.0f);
 8003b2a:	687b      	ldr	r3, [r7, #4]
 8003b2c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8003b30:	ee07 3a90 	vmov	s15, r3
 8003b34:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b38:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 8003bb8 <TSC2046_Calibrate+0x270>
 8003b3c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8003b46:	461a      	mov	r2, r3
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b4c:	1ad3      	subs	r3, r2, r3
 8003b4e:	ee07 3a90 	vmov	s15, r3
 8003b52:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b56:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8003bb8 <TSC2046_Calibrate+0x270>
 8003b5a:	ee37 7a87 	vadd.f32	s14, s15, s14
 8003b5e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003b62:	687b      	ldr	r3, [r7, #4]
 8003b64:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	//2. Calculate Scalling ()
	spi->myTS_Calibrate.Bias_X = -1 - spi->myTS_Calibrate.Scale_X * spi->myTS_Calibrate.TL_X; // -1 is for bias. Change this so you have 100% accuracy at center of the LCD
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8003b72:	ee07 3a90 	vmov	s15, r3
 8003b76:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b7a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b7e:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003b82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	spi->myTS_Calibrate.Bias_Y = -1 - spi->myTS_Calibrate.Scale_Y * spi->myTS_Calibrate.TL_Y; // -1 is for bias. Change this so you have 100% accuracy at center of the LCD
 8003b8c:	687b      	ldr	r3, [r7, #4]
 8003b8e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003b96:	ee07 3a90 	vmov	s15, r3
 8003b9a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003b9e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003ba2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 8003ba6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

}
 8003bb0:	bf00      	nop
 8003bb2:	3714      	adds	r7, #20
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd90      	pop	{r4, r7, pc}
 8003bb8:	00000000 	.word	0x00000000
 8003bbc:	9999999a 	.word	0x9999999a
 8003bc0:	3fb99999 	.word	0x3fb99999
 8003bc4:	00000000 	.word	0x00000000

08003bc8 <TSC2046_GetTouchData>:

// Get touch sccreen data
void TSC2046_GetTouchData(ILI9341_SPI *spi) {
 8003bc8:	b590      	push	{r4, r7, lr}
 8003bca:	b085      	sub	sp, #20
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]

	uint16_t temp16x = 0, temp16y = 0;
 8003bd0:	2300      	movs	r3, #0
 8003bd2:	81fb      	strh	r3, [r7, #14]
 8003bd4:	2300      	movs	r3, #0
 8003bd6:	81bb      	strh	r3, [r7, #12]
	//Is screen pressed
	if (TSC2046_getRaw_Z(spi) > 50) {
 8003bd8:	6878      	ldr	r0, [r7, #4]
 8003bda:	f7ff fdb9 	bl	8003750 <TSC2046_getRaw_Z>
 8003bde:	4603      	mov	r3, r0
 8003be0:	2b32      	cmp	r3, #50	; 0x32
 8003be2:	d940      	bls.n	8003c66 <TSC2046_GetTouchData+0x9e>
		spi->myTsData.isPressed = 1; // True
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2201      	movs	r2, #1
 8003be8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		//Read touch data
		for (uint8_t i = 0; i < 10; i++) {
 8003bec:	2300      	movs	r3, #0
 8003bee:	72fb      	strb	r3, [r7, #11]
 8003bf0:	e00f      	b.n	8003c12 <TSC2046_GetTouchData+0x4a>
			TSC2046_GetRawTouch(spi);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff fe18 	bl	8003828 <TSC2046_GetRawTouch>
			temp16x += spi->localRawTouch.x_touch;
 8003bf8:	687b      	ldr	r3, [r7, #4]
 8003bfa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8003bfc:	89fb      	ldrh	r3, [r7, #14]
 8003bfe:	4413      	add	r3, r2
 8003c00:	81fb      	strh	r3, [r7, #14]
			temp16y += spi->localRawTouch.y_touch;
 8003c02:	687b      	ldr	r3, [r7, #4]
 8003c04:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8003c06:	89bb      	ldrh	r3, [r7, #12]
 8003c08:	4413      	add	r3, r2
 8003c0a:	81bb      	strh	r3, [r7, #12]
		for (uint8_t i = 0; i < 10; i++) {
 8003c0c:	7afb      	ldrb	r3, [r7, #11]
 8003c0e:	3301      	adds	r3, #1
 8003c10:	72fb      	strb	r3, [r7, #11]
 8003c12:	7afb      	ldrb	r3, [r7, #11]
 8003c14:	2b09      	cmp	r3, #9
 8003c16:	d9ec      	bls.n	8003bf2 <TSC2046_GetTouchData+0x2a>
		}
		spi->localRawTouch.x_touch = temp16x * 0.1;
 8003c18:	89fb      	ldrh	r3, [r7, #14]
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fc fc52 	bl	80004c4 <__aeabi_i2d>
 8003c20:	a32d      	add	r3, pc, #180	; (adr r3, 8003cd8 <TSC2046_GetTouchData+0x110>)
 8003c22:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c26:	f7fc fcb7 	bl	8000598 <__aeabi_dmul>
 8003c2a:	4603      	mov	r3, r0
 8003c2c:	460c      	mov	r4, r1
 8003c2e:	4618      	mov	r0, r3
 8003c30:	4621      	mov	r1, r4
 8003c32:	f7fc ff73 	bl	8000b1c <__aeabi_d2uiz>
 8003c36:	4603      	mov	r3, r0
 8003c38:	b29a      	uxth	r2, r3
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	859a      	strh	r2, [r3, #44]	; 0x2c
		spi->localRawTouch.y_touch = temp16y * 0.1;
 8003c3e:	89bb      	ldrh	r3, [r7, #12]
 8003c40:	4618      	mov	r0, r3
 8003c42:	f7fc fc3f 	bl	80004c4 <__aeabi_i2d>
 8003c46:	a324      	add	r3, pc, #144	; (adr r3, 8003cd8 <TSC2046_GetTouchData+0x110>)
 8003c48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c4c:	f7fc fca4 	bl	8000598 <__aeabi_dmul>
 8003c50:	4603      	mov	r3, r0
 8003c52:	460c      	mov	r4, r1
 8003c54:	4618      	mov	r0, r3
 8003c56:	4621      	mov	r1, r4
 8003c58:	f7fc ff60 	bl	8000b1c <__aeabi_d2uiz>
 8003c5c:	4603      	mov	r3, r0
 8003c5e:	b29a      	uxth	r2, r3
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	85da      	strh	r2, [r3, #46]	; 0x2e
 8003c64:	e003      	b.n	8003c6e <TSC2046_GetTouchData+0xa6>
	} else
		spi->myTsData.isPressed = 0; // false
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	2200      	movs	r2, #0
 8003c6a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	//X_Touch value
	spi->myTsData.X = spi->myTS_Calibrate.Scale_X * spi->localRawTouch.x_touch + spi->myTS_Calibrate.Bias_X;
 8003c6e:	687b      	ldr	r3, [r7, #4]
 8003c70:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 8003c74:	687b      	ldr	r3, [r7, #4]
 8003c76:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8003c78:	ee07 3a90 	vmov	s15, r3
 8003c7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003c80:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 8003c8a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003c8e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003c92:	ee17 3a90 	vmov	r3, s15
 8003c96:	b29a      	uxth	r2, r3
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	86da      	strh	r2, [r3, #54]	; 0x36

	//Y_Touch value
	spi->myTsData.Y = spi->myTS_Calibrate.Scale_Y * spi->localRawTouch.y_touch + spi->myTS_Calibrate.Bias_Y;
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 8003ca2:	687b      	ldr	r3, [r7, #4]
 8003ca4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8003ca6:	ee07 3a90 	vmov	s15, r3
 8003caa:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003cae:	ee27 7a27 	vmul.f32	s14, s14, s15
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 8003cb8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003cbc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003cc0:	ee17 3a90 	vmov	r3, s15
 8003cc4:	b29a      	uxth	r2, r3
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	871a      	strh	r2, [r3, #56]	; 0x38
}
 8003cca:	bf00      	nop
 8003ccc:	3714      	adds	r7, #20
 8003cce:	46bd      	mov	sp, r7
 8003cd0:	bd90      	pop	{r4, r7, pc}
 8003cd2:	bf00      	nop
 8003cd4:	f3af 8000 	nop.w
 8003cd8:	9999999a 	.word	0x9999999a
 8003cdc:	3fb99999 	.word	0x3fb99999

08003ce0 <show_main_frame>:
 */

#include "LCDTools.h"

// Create the main frame
void show_main_frame(ILI9341_SPI* spi, bool closedloop_on, bool update_main_frame){
 8003ce0:	b580      	push	{r7, lr}
 8003ce2:	b086      	sub	sp, #24
 8003ce4:	af04      	add	r7, sp, #16
 8003ce6:	6078      	str	r0, [r7, #4]
 8003ce8:	460b      	mov	r3, r1
 8003cea:	70fb      	strb	r3, [r7, #3]
 8003cec:	4613      	mov	r3, r2
 8003cee:	70bb      	strb	r3, [r7, #2]
	// Set rotation
	ILI9341_setRotation(spi, 2);
 8003cf0:	2102      	movs	r1, #2
 8003cf2:	6878      	ldr	r0, [r7, #4]
 8003cf4:	f7ff fb62 	bl	80033bc <ILI9341_setRotation>

	if(update_main_frame == true){
 8003cf8:	78bb      	ldrb	r3, [r7, #2]
 8003cfa:	2b00      	cmp	r3, #0
 8003cfc:	f000 809f 	beq.w	8003e3e <show_main_frame+0x15e>
		// Set background
		ILI9341_Fill(spi, COLOR_NAVY);
 8003d00:	210f      	movs	r1, #15
 8003d02:	6878      	ldr	r0, [r7, #4]
 8003d04:	f7fe fffe 	bl	8002d04 <ILI9341_Fill>

		// Print frame - large square
		ILI9341_drawFastHLine(spi, 5, 235, 310, COLOR_GREEN);
 8003d08:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d0c:	9300      	str	r3, [sp, #0]
 8003d0e:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003d12:	22eb      	movs	r2, #235	; 0xeb
 8003d14:	2105      	movs	r1, #5
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f7ff f947 	bl	8002faa <ILI9341_drawFastHLine>
		ILI9341_drawFastHLine(spi, 5, 5, 310, COLOR_GREEN);
 8003d1c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d20:	9300      	str	r3, [sp, #0]
 8003d22:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003d26:	2205      	movs	r2, #5
 8003d28:	2105      	movs	r1, #5
 8003d2a:	6878      	ldr	r0, [r7, #4]
 8003d2c:	f7ff f93d 	bl	8002faa <ILI9341_drawFastHLine>
		ILI9341_drawFastVLine(spi, 5, 5, 230, COLOR_GREEN);
 8003d30:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d34:	9300      	str	r3, [sp, #0]
 8003d36:	23e6      	movs	r3, #230	; 0xe6
 8003d38:	2205      	movs	r2, #5
 8003d3a:	2105      	movs	r1, #5
 8003d3c:	6878      	ldr	r0, [r7, #4]
 8003d3e:	f7ff f959 	bl	8002ff4 <ILI9341_drawFastVLine>
		ILI9341_drawFastVLine(spi, 315, 5, 230, COLOR_GREEN);
 8003d42:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d46:	9300      	str	r3, [sp, #0]
 8003d48:	23e6      	movs	r3, #230	; 0xe6
 8003d4a:	2205      	movs	r2, #5
 8003d4c:	f240 113b 	movw	r1, #315	; 0x13b
 8003d50:	6878      	ldr	r0, [r7, #4]
 8003d52:	f7ff f94f 	bl	8002ff4 <ILI9341_drawFastVLine>

		// Print buttons - Small squares
		ILI9341_drawFastVLine(spi, 50, 5, 230, COLOR_GREEN);
 8003d56:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d5a:	9300      	str	r3, [sp, #0]
 8003d5c:	23e6      	movs	r3, #230	; 0xe6
 8003d5e:	2205      	movs	r2, #5
 8003d60:	2132      	movs	r1, #50	; 0x32
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f7ff f946 	bl	8002ff4 <ILI9341_drawFastVLine>
		ILI9341_drawFastHLine(spi, 5, 49, 45, COLOR_GREEN);
 8003d68:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d6c:	9300      	str	r3, [sp, #0]
 8003d6e:	232d      	movs	r3, #45	; 0x2d
 8003d70:	2231      	movs	r2, #49	; 0x31
 8003d72:	2105      	movs	r1, #5
 8003d74:	6878      	ldr	r0, [r7, #4]
 8003d76:	f7ff f918 	bl	8002faa <ILI9341_drawFastHLine>
		ILI9341_drawFastHLine(spi, 5, 96, 45, COLOR_GREEN);
 8003d7a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d7e:	9300      	str	r3, [sp, #0]
 8003d80:	232d      	movs	r3, #45	; 0x2d
 8003d82:	2260      	movs	r2, #96	; 0x60
 8003d84:	2105      	movs	r1, #5
 8003d86:	6878      	ldr	r0, [r7, #4]
 8003d88:	f7ff f90f 	bl	8002faa <ILI9341_drawFastHLine>
		ILI9341_drawFastHLine(spi, 5, 143, 45, COLOR_GREEN);
 8003d8c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003d90:	9300      	str	r3, [sp, #0]
 8003d92:	232d      	movs	r3, #45	; 0x2d
 8003d94:	228f      	movs	r2, #143	; 0x8f
 8003d96:	2105      	movs	r1, #5
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff f906 	bl	8002faa <ILI9341_drawFastHLine>
		ILI9341_drawFastHLine(spi, 5, 190, 45, COLOR_GREEN);
 8003d9e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003da2:	9300      	str	r3, [sp, #0]
 8003da4:	232d      	movs	r3, #45	; 0x2d
 8003da6:	22be      	movs	r2, #190	; 0xbe
 8003da8:	2105      	movs	r1, #5
 8003daa:	6878      	ldr	r0, [r7, #4]
 8003dac:	f7ff f8fd 	bl	8002faa <ILI9341_drawFastHLine>
		ILI9341_drawFastHLine(spi, 5, 235, 45, COLOR_GREEN);
 8003db0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003db4:	9300      	str	r3, [sp, #0]
 8003db6:	232d      	movs	r3, #45	; 0x2d
 8003db8:	22eb      	movs	r2, #235	; 0xeb
 8003dba:	2105      	movs	r1, #5
 8003dbc:	6878      	ldr	r0, [r7, #4]
 8003dbe:	f7ff f8f4 	bl	8002faa <ILI9341_drawFastHLine>

		// This line is for the input and output text
		ILI9341_drawFastHLine(spi, 50, 30, 265, COLOR_GREEN);
 8003dc2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003dc6:	9300      	str	r3, [sp, #0]
 8003dc8:	f240 1309 	movw	r3, #265	; 0x109
 8003dcc:	221e      	movs	r2, #30
 8003dce:	2132      	movs	r1, #50	; 0x32
 8003dd0:	6878      	ldr	r0, [r7, #4]
 8003dd2:	f7ff f8ea 	bl	8002faa <ILI9341_drawFastHLine>

		// Apply them
		ILI9341_printImage(spi, 8, 8, 40, 40, setpoint_icon, 40*80*sizeof(uint8_t));
 8003dd6:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8003dda:	9302      	str	r3, [sp, #8]
 8003ddc:	4b29      	ldr	r3, [pc, #164]	; (8003e84 <show_main_frame+0x1a4>)
 8003dde:	9301      	str	r3, [sp, #4]
 8003de0:	2328      	movs	r3, #40	; 0x28
 8003de2:	9300      	str	r3, [sp, #0]
 8003de4:	2328      	movs	r3, #40	; 0x28
 8003de6:	2208      	movs	r2, #8
 8003de8:	2108      	movs	r1, #8
 8003dea:	6878      	ldr	r0, [r7, #4]
 8003dec:	f7ff faad 	bl	800334a <ILI9341_printImage>
		ILI9341_printImage(spi, 8, 55, 40, 40, horizon_icon, 40*80*sizeof(uint8_t));
 8003df0:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8003df4:	9302      	str	r3, [sp, #8]
 8003df6:	4b24      	ldr	r3, [pc, #144]	; (8003e88 <show_main_frame+0x1a8>)
 8003df8:	9301      	str	r3, [sp, #4]
 8003dfa:	2328      	movs	r3, #40	; 0x28
 8003dfc:	9300      	str	r3, [sp, #0]
 8003dfe:	2328      	movs	r3, #40	; 0x28
 8003e00:	2237      	movs	r2, #55	; 0x37
 8003e02:	2108      	movs	r1, #8
 8003e04:	6878      	ldr	r0, [r7, #4]
 8003e06:	f7ff faa0 	bl	800334a <ILI9341_printImage>
		ILI9341_printImage(spi,  8, 100, 40, 40, time_constant_icon, 40*80*sizeof(uint8_t));
 8003e0a:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8003e0e:	9302      	str	r3, [sp, #8]
 8003e10:	4b1e      	ldr	r3, [pc, #120]	; (8003e8c <show_main_frame+0x1ac>)
 8003e12:	9301      	str	r3, [sp, #4]
 8003e14:	2328      	movs	r3, #40	; 0x28
 8003e16:	9300      	str	r3, [sp, #0]
 8003e18:	2328      	movs	r3, #40	; 0x28
 8003e1a:	2264      	movs	r2, #100	; 0x64
 8003e1c:	2108      	movs	r1, #8
 8003e1e:	6878      	ldr	r0, [r7, #4]
 8003e20:	f7ff fa93 	bl	800334a <ILI9341_printImage>
		ILI9341_printImage(spi, 8, 193, 40, 40, save_icon, 40*80*sizeof(uint8_t));
 8003e24:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8003e28:	9302      	str	r3, [sp, #8]
 8003e2a:	4b19      	ldr	r3, [pc, #100]	; (8003e90 <show_main_frame+0x1b0>)
 8003e2c:	9301      	str	r3, [sp, #4]
 8003e2e:	2328      	movs	r3, #40	; 0x28
 8003e30:	9300      	str	r3, [sp, #0]
 8003e32:	2328      	movs	r3, #40	; 0x28
 8003e34:	22c1      	movs	r2, #193	; 0xc1
 8003e36:	2108      	movs	r1, #8
 8003e38:	6878      	ldr	r0, [r7, #4]
 8003e3a:	f7ff fa86 	bl	800334a <ILI9341_printImage>
	}

	// Change the icon if we are in control mode, or open loop mode
	if(closedloop_on == true)
 8003e3e:	78fb      	ldrb	r3, [r7, #3]
 8003e40:	2b00      	cmp	r3, #0
 8003e42:	d00d      	beq.n	8003e60 <show_main_frame+0x180>
		ILI9341_printImage(spi, 8, 146, 40, 40, closedloop_icon, 40*80*sizeof(uint8_t));
 8003e44:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8003e48:	9302      	str	r3, [sp, #8]
 8003e4a:	4b12      	ldr	r3, [pc, #72]	; (8003e94 <show_main_frame+0x1b4>)
 8003e4c:	9301      	str	r3, [sp, #4]
 8003e4e:	2328      	movs	r3, #40	; 0x28
 8003e50:	9300      	str	r3, [sp, #0]
 8003e52:	2328      	movs	r3, #40	; 0x28
 8003e54:	2292      	movs	r2, #146	; 0x92
 8003e56:	2108      	movs	r1, #8
 8003e58:	6878      	ldr	r0, [r7, #4]
 8003e5a:	f7ff fa76 	bl	800334a <ILI9341_printImage>
	else
		ILI9341_printImage(spi, 8, 146, 40, 40, openloop_icon, 40*80*sizeof(uint8_t));

}
 8003e5e:	e00c      	b.n	8003e7a <show_main_frame+0x19a>
		ILI9341_printImage(spi, 8, 146, 40, 40, openloop_icon, 40*80*sizeof(uint8_t));
 8003e60:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8003e64:	9302      	str	r3, [sp, #8]
 8003e66:	4b0c      	ldr	r3, [pc, #48]	; (8003e98 <show_main_frame+0x1b8>)
 8003e68:	9301      	str	r3, [sp, #4]
 8003e6a:	2328      	movs	r3, #40	; 0x28
 8003e6c:	9300      	str	r3, [sp, #0]
 8003e6e:	2328      	movs	r3, #40	; 0x28
 8003e70:	2292      	movs	r2, #146	; 0x92
 8003e72:	2108      	movs	r1, #8
 8003e74:	6878      	ldr	r0, [r7, #4]
 8003e76:	f7ff fa68 	bl	800334a <ILI9341_printImage>
}
 8003e7a:	bf00      	nop
 8003e7c:	3708      	adds	r7, #8
 8003e7e:	46bd      	mov	sp, r7
 8003e80:	bd80      	pop	{r7, pc}
 8003e82:	bf00      	nop
 8003e84:	08010558 	.word	0x08010558
 8003e88:	080111d8 	.word	0x080111d8
 8003e8c:	08011e58 	.word	0x08011e58
 8003e90:	08012ad8 	.word	0x08012ad8
 8003e94:	08013758 	.word	0x08013758
 8003e98:	080143d8 	.word	0x080143d8

08003e9c <show_num_pad_frame>:

// Create numpad
uint8_t show_num_pad_frame(ILI9341_SPI* spi, bool decimalbutton_show, bool minusbutton_show, float* number_value, char* title){
 8003e9c:	b590      	push	{r4, r7, lr}
 8003e9e:	b093      	sub	sp, #76	; 0x4c
 8003ea0:	af04      	add	r7, sp, #16
 8003ea2:	60f8      	str	r0, [r7, #12]
 8003ea4:	607b      	str	r3, [r7, #4]
 8003ea6:	460b      	mov	r3, r1
 8003ea8:	72fb      	strb	r3, [r7, #11]
 8003eaa:	4613      	mov	r3, r2
 8003eac:	72bb      	strb	r3, [r7, #10]
	// Set background
	ILI9341_Fill(spi, COLOR_BLACK);
 8003eae:	2100      	movs	r1, #0
 8003eb0:	68f8      	ldr	r0, [r7, #12]
 8003eb2:	f7fe ff27 	bl	8002d04 <ILI9341_Fill>

	// Set rotation
	ILI9341_setRotation(spi, 2);
 8003eb6:	2102      	movs	r1, #2
 8003eb8:	68f8      	ldr	r0, [r7, #12]
 8003eba:	f7ff fa7f 	bl	80033bc <ILI9341_setRotation>

	// Print frame - large square
	ILI9341_drawFastHLine(spi, 5, 235, 310, COLOR_GREEN);
 8003ebe:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ec2:	9300      	str	r3, [sp, #0]
 8003ec4:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003ec8:	22eb      	movs	r2, #235	; 0xeb
 8003eca:	2105      	movs	r1, #5
 8003ecc:	68f8      	ldr	r0, [r7, #12]
 8003ece:	f7ff f86c 	bl	8002faa <ILI9341_drawFastHLine>
	ILI9341_drawFastHLine(spi, 5, 5, 310, COLOR_GREEN);
 8003ed2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ed6:	9300      	str	r3, [sp, #0]
 8003ed8:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003edc:	2205      	movs	r2, #5
 8003ede:	2105      	movs	r1, #5
 8003ee0:	68f8      	ldr	r0, [r7, #12]
 8003ee2:	f7ff f862 	bl	8002faa <ILI9341_drawFastHLine>
	ILI9341_drawFastVLine(spi, 5, 5, 230, COLOR_GREEN);
 8003ee6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003eea:	9300      	str	r3, [sp, #0]
 8003eec:	23e6      	movs	r3, #230	; 0xe6
 8003eee:	2205      	movs	r2, #5
 8003ef0:	2105      	movs	r1, #5
 8003ef2:	68f8      	ldr	r0, [r7, #12]
 8003ef4:	f7ff f87e 	bl	8002ff4 <ILI9341_drawFastVLine>
	ILI9341_drawFastVLine(spi, 315, 5, 230, COLOR_GREEN);
 8003ef8:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003efc:	9300      	str	r3, [sp, #0]
 8003efe:	23e6      	movs	r3, #230	; 0xe6
 8003f00:	2205      	movs	r2, #5
 8003f02:	f240 113b 	movw	r1, #315	; 0x13b
 8003f06:	68f8      	ldr	r0, [r7, #12]
 8003f08:	f7ff f874 	bl	8002ff4 <ILI9341_drawFastVLine>

	// Create gray, white square
	ILI9341_Fill_Rect(spi, 6, 6, 314, 55, COLOR_DGRAY);
 8003f0c:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f10:	9301      	str	r3, [sp, #4]
 8003f12:	2337      	movs	r3, #55	; 0x37
 8003f14:	9300      	str	r3, [sp, #0]
 8003f16:	f44f 739d 	mov.w	r3, #314	; 0x13a
 8003f1a:	2206      	movs	r2, #6
 8003f1c:	2106      	movs	r1, #6
 8003f1e:	68f8      	ldr	r0, [r7, #12]
 8003f20:	f7fe ff35 	bl	8002d8e <ILI9341_Fill_Rect>
	ILI9341_Fill_Rect(spi, 12, 24, 308, 50, COLOR_WHITE);
 8003f24:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f28:	9301      	str	r3, [sp, #4]
 8003f2a:	2332      	movs	r3, #50	; 0x32
 8003f2c:	9300      	str	r3, [sp, #0]
 8003f2e:	f44f 739a 	mov.w	r3, #308	; 0x134
 8003f32:	2218      	movs	r2, #24
 8003f34:	210c      	movs	r1, #12
 8003f36:	68f8      	ldr	r0, [r7, #12]
 8003f38:	f7fe ff29 	bl	8002d8e <ILI9341_Fill_Rect>

	// Set title
	ILI9341_printText(spi, title, 12, 12, COLOR_WHITE, COLOR_DGRAY, 1);
 8003f3c:	2301      	movs	r3, #1
 8003f3e:	9302      	str	r3, [sp, #8]
 8003f40:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f44:	9301      	str	r3, [sp, #4]
 8003f46:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f4a:	9300      	str	r3, [sp, #0]
 8003f4c:	230c      	movs	r3, #12
 8003f4e:	220c      	movs	r2, #12
 8003f50:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003f52:	68f8      	ldr	r0, [r7, #12]
 8003f54:	f7ff f9b8 	bl	80032c8 <ILI9341_printText>

	// Create buttons
	uint16_t x = 0;
 8003f58:	2300      	movs	r3, #0
 8003f5a:	86fb      	strh	r3, [r7, #54]	; 0x36
	char number[3];
	for(uint8_t i = 0; i < 5; i++){
 8003f5c:	2300      	movs	r3, #0
 8003f5e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8003f62:	e182      	b.n	800426a <show_num_pad_frame+0x3ce>
		x += 23;
 8003f64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f66:	3317      	adds	r3, #23
 8003f68:	86fb      	strh	r3, [r7, #54]	; 0x36
		// Upper numbers
		ILI9341_Fill_Rect(spi, x, 70, x+40, 110, COLOR_DGRAY);
 8003f6a:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8003f6c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f6e:	3328      	adds	r3, #40	; 0x28
 8003f70:	461a      	mov	r2, r3
 8003f72:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003f76:	9301      	str	r3, [sp, #4]
 8003f78:	236e      	movs	r3, #110	; 0x6e
 8003f7a:	9300      	str	r3, [sp, #0]
 8003f7c:	4613      	mov	r3, r2
 8003f7e:	2246      	movs	r2, #70	; 0x46
 8003f80:	68f8      	ldr	r0, [r7, #12]
 8003f82:	f7fe ff04 	bl	8002d8e <ILI9341_Fill_Rect>
		ILI9341_Fill_Rect(spi, x+5, 75, x+35, 105, COLOR_WHITE);
 8003f86:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f88:	3305      	adds	r3, #5
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003f8e:	3323      	adds	r3, #35	; 0x23
 8003f90:	461a      	mov	r2, r3
 8003f92:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003f96:	9301      	str	r3, [sp, #4]
 8003f98:	2369      	movs	r3, #105	; 0x69
 8003f9a:	9300      	str	r3, [sp, #0]
 8003f9c:	4613      	mov	r3, r2
 8003f9e:	224b      	movs	r2, #75	; 0x4b
 8003fa0:	68f8      	ldr	r0, [r7, #12]
 8003fa2:	f7fe fef4 	bl	8002d8e <ILI9341_Fill_Rect>
		sprintf_(number, "%d", i);
 8003fa6:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8003faa:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003fae:	4998      	ldr	r1, [pc, #608]	; (8004210 <show_num_pad_frame+0x374>)
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f002 f99b 	bl	80062ec <sprintf_>
		ILI9341_printText(spi, number, x+16, 83, COLOR_BLACK, COLOR_WHITE, 2);
 8003fb6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003fb8:	3310      	adds	r3, #16
 8003fba:	b29b      	uxth	r3, r3
 8003fbc:	b21a      	sxth	r2, r3
 8003fbe:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003fc2:	2302      	movs	r3, #2
 8003fc4:	9302      	str	r3, [sp, #8]
 8003fc6:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003fca:	9301      	str	r3, [sp, #4]
 8003fcc:	2300      	movs	r3, #0
 8003fce:	9300      	str	r3, [sp, #0]
 8003fd0:	2353      	movs	r3, #83	; 0x53
 8003fd2:	68f8      	ldr	r0, [r7, #12]
 8003fd4:	f7ff f978 	bl	80032c8 <ILI9341_printText>

		// Lower numbers
		ILI9341_Fill_Rect(spi, x, 125, x+40, 165, COLOR_DGRAY);
 8003fd8:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8003fda:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003fdc:	3328      	adds	r3, #40	; 0x28
 8003fde:	461a      	mov	r2, r3
 8003fe0:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003fe4:	9301      	str	r3, [sp, #4]
 8003fe6:	23a5      	movs	r3, #165	; 0xa5
 8003fe8:	9300      	str	r3, [sp, #0]
 8003fea:	4613      	mov	r3, r2
 8003fec:	227d      	movs	r2, #125	; 0x7d
 8003fee:	68f8      	ldr	r0, [r7, #12]
 8003ff0:	f7fe fecd 	bl	8002d8e <ILI9341_Fill_Rect>
		ILI9341_Fill_Rect(spi, x+5, 130, x+35, 160, COLOR_WHITE);
 8003ff4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ff6:	3305      	adds	r3, #5
 8003ff8:	4619      	mov	r1, r3
 8003ffa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ffc:	3323      	adds	r3, #35	; 0x23
 8003ffe:	461a      	mov	r2, r3
 8004000:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004004:	9301      	str	r3, [sp, #4]
 8004006:	23a0      	movs	r3, #160	; 0xa0
 8004008:	9300      	str	r3, [sp, #0]
 800400a:	4613      	mov	r3, r2
 800400c:	2282      	movs	r2, #130	; 0x82
 800400e:	68f8      	ldr	r0, [r7, #12]
 8004010:	f7fe febd 	bl	8002d8e <ILI9341_Fill_Rect>
		sprintf_(number, "%d", i+5);
 8004014:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004018:	1d5a      	adds	r2, r3, #5
 800401a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800401e:	497c      	ldr	r1, [pc, #496]	; (8004210 <show_num_pad_frame+0x374>)
 8004020:	4618      	mov	r0, r3
 8004022:	f002 f963 	bl	80062ec <sprintf_>
		ILI9341_printText(spi, number, x+16, 138, COLOR_BLACK, COLOR_WHITE, 2);
 8004026:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004028:	3310      	adds	r3, #16
 800402a:	b29b      	uxth	r3, r3
 800402c:	b21a      	sxth	r2, r3
 800402e:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004032:	2302      	movs	r3, #2
 8004034:	9302      	str	r3, [sp, #8]
 8004036:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800403a:	9301      	str	r3, [sp, #4]
 800403c:	2300      	movs	r3, #0
 800403e:	9300      	str	r3, [sp, #0]
 8004040:	238a      	movs	r3, #138	; 0x8a
 8004042:	68f8      	ldr	r0, [r7, #12]
 8004044:	f7ff f940 	bl	80032c8 <ILI9341_printText>

		// This hide or show the buttons
		if(i == 0 && minusbutton_show == true){
 8004048:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800404c:	2b00      	cmp	r3, #0
 800404e:	d121      	bne.n	8004094 <show_num_pad_frame+0x1f8>
 8004050:	7abb      	ldrb	r3, [r7, #10]
 8004052:	2b00      	cmp	r3, #0
 8004054:	d01e      	beq.n	8004094 <show_num_pad_frame+0x1f8>
			ILI9341_Fill_Rect(spi, x, 180, x+40, 220, COLOR_DGRAY);
 8004056:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8004058:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800405a:	3328      	adds	r3, #40	; 0x28
 800405c:	461a      	mov	r2, r3
 800405e:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8004062:	9301      	str	r3, [sp, #4]
 8004064:	23dc      	movs	r3, #220	; 0xdc
 8004066:	9300      	str	r3, [sp, #0]
 8004068:	4613      	mov	r3, r2
 800406a:	22b4      	movs	r2, #180	; 0xb4
 800406c:	68f8      	ldr	r0, [r7, #12]
 800406e:	f7fe fe8e 	bl	8002d8e <ILI9341_Fill_Rect>
			ILI9341_Fill_Rect(spi, x+5, 185, x+35, 215, COLOR_WHITE);
 8004072:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004074:	3305      	adds	r3, #5
 8004076:	4619      	mov	r1, r3
 8004078:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800407a:	3323      	adds	r3, #35	; 0x23
 800407c:	461a      	mov	r2, r3
 800407e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004082:	9301      	str	r3, [sp, #4]
 8004084:	23d7      	movs	r3, #215	; 0xd7
 8004086:	9300      	str	r3, [sp, #0]
 8004088:	4613      	mov	r3, r2
 800408a:	22b9      	movs	r2, #185	; 0xb9
 800408c:	68f8      	ldr	r0, [r7, #12]
 800408e:	f7fe fe7e 	bl	8002d8e <ILI9341_Fill_Rect>
 8004092:	e024      	b.n	80040de <show_num_pad_frame+0x242>
		}else if(i == 1 && decimalbutton_show == true){
 8004094:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004098:	2b01      	cmp	r3, #1
 800409a:	d120      	bne.n	80040de <show_num_pad_frame+0x242>
 800409c:	7afb      	ldrb	r3, [r7, #11]
 800409e:	2b00      	cmp	r3, #0
 80040a0:	d01d      	beq.n	80040de <show_num_pad_frame+0x242>
			ILI9341_Fill_Rect(spi, x, 180, x+40, 220, COLOR_DGRAY);
 80040a2:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 80040a4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040a6:	3328      	adds	r3, #40	; 0x28
 80040a8:	461a      	mov	r2, r3
 80040aa:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80040ae:	9301      	str	r3, [sp, #4]
 80040b0:	23dc      	movs	r3, #220	; 0xdc
 80040b2:	9300      	str	r3, [sp, #0]
 80040b4:	4613      	mov	r3, r2
 80040b6:	22b4      	movs	r2, #180	; 0xb4
 80040b8:	68f8      	ldr	r0, [r7, #12]
 80040ba:	f7fe fe68 	bl	8002d8e <ILI9341_Fill_Rect>
			ILI9341_Fill_Rect(spi, x+5, 185, x+35, 215, COLOR_WHITE);
 80040be:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040c0:	3305      	adds	r3, #5
 80040c2:	4619      	mov	r1, r3
 80040c4:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040c6:	3323      	adds	r3, #35	; 0x23
 80040c8:	461a      	mov	r2, r3
 80040ca:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80040ce:	9301      	str	r3, [sp, #4]
 80040d0:	23d7      	movs	r3, #215	; 0xd7
 80040d2:	9300      	str	r3, [sp, #0]
 80040d4:	4613      	mov	r3, r2
 80040d6:	22b9      	movs	r2, #185	; 0xb9
 80040d8:	68f8      	ldr	r0, [r7, #12]
 80040da:	f7fe fe58 	bl	8002d8e <ILI9341_Fill_Rect>
		}
		if(i > 1){
 80040de:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80040e2:	2b01      	cmp	r3, #1
 80040e4:	d91d      	bls.n	8004122 <show_num_pad_frame+0x286>
			ILI9341_Fill_Rect(spi, x, 180, x+40, 220, COLOR_DGRAY);
 80040e6:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 80040e8:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80040ea:	3328      	adds	r3, #40	; 0x28
 80040ec:	461a      	mov	r2, r3
 80040ee:	f647 33ef 	movw	r3, #31727	; 0x7bef
 80040f2:	9301      	str	r3, [sp, #4]
 80040f4:	23dc      	movs	r3, #220	; 0xdc
 80040f6:	9300      	str	r3, [sp, #0]
 80040f8:	4613      	mov	r3, r2
 80040fa:	22b4      	movs	r2, #180	; 0xb4
 80040fc:	68f8      	ldr	r0, [r7, #12]
 80040fe:	f7fe fe46 	bl	8002d8e <ILI9341_Fill_Rect>
			ILI9341_Fill_Rect(spi, x+5, 185, x+35, 215, COLOR_WHITE);
 8004102:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8004104:	3305      	adds	r3, #5
 8004106:	4619      	mov	r1, r3
 8004108:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800410a:	3323      	adds	r3, #35	; 0x23
 800410c:	461a      	mov	r2, r3
 800410e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004112:	9301      	str	r3, [sp, #4]
 8004114:	23d7      	movs	r3, #215	; 0xd7
 8004116:	9300      	str	r3, [sp, #0]
 8004118:	4613      	mov	r3, r2
 800411a:	22b9      	movs	r2, #185	; 0xb9
 800411c:	68f8      	ldr	r0, [r7, #12]
 800411e:	f7fe fe36 	bl	8002d8e <ILI9341_Fill_Rect>
		}

		// Give the buttons a text
		if(i == 0 && minusbutton_show == true){
 8004122:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004126:	2b00      	cmp	r3, #0
 8004128:	d11a      	bne.n	8004160 <show_num_pad_frame+0x2c4>
 800412a:	7abb      	ldrb	r3, [r7, #10]
 800412c:	2b00      	cmp	r3, #0
 800412e:	d017      	beq.n	8004160 <show_num_pad_frame+0x2c4>
			sprintf_(number, "-");
 8004130:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004134:	4937      	ldr	r1, [pc, #220]	; (8004214 <show_num_pad_frame+0x378>)
 8004136:	4618      	mov	r0, r3
 8004138:	f002 f8d8 	bl	80062ec <sprintf_>
			ILI9341_printText(spi, number, x+15, 193, COLOR_BLACK, COLOR_WHITE, 2);
 800413c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800413e:	330f      	adds	r3, #15
 8004140:	b29b      	uxth	r3, r3
 8004142:	b21a      	sxth	r2, r3
 8004144:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004148:	2302      	movs	r3, #2
 800414a:	9302      	str	r3, [sp, #8]
 800414c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004150:	9301      	str	r3, [sp, #4]
 8004152:	2300      	movs	r3, #0
 8004154:	9300      	str	r3, [sp, #0]
 8004156:	23c1      	movs	r3, #193	; 0xc1
 8004158:	68f8      	ldr	r0, [r7, #12]
 800415a:	f7ff f8b5 	bl	80032c8 <ILI9341_printText>
 800415e:	e07c      	b.n	800425a <show_num_pad_frame+0x3be>
		}else if(i == 1 && decimalbutton_show == true){
 8004160:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004164:	2b01      	cmp	r3, #1
 8004166:	d11a      	bne.n	800419e <show_num_pad_frame+0x302>
 8004168:	7afb      	ldrb	r3, [r7, #11]
 800416a:	2b00      	cmp	r3, #0
 800416c:	d017      	beq.n	800419e <show_num_pad_frame+0x302>
			sprintf_(number, ".");
 800416e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004172:	4929      	ldr	r1, [pc, #164]	; (8004218 <show_num_pad_frame+0x37c>)
 8004174:	4618      	mov	r0, r3
 8004176:	f002 f8b9 	bl	80062ec <sprintf_>
			ILI9341_printText(spi, number, x+15, 193, COLOR_BLACK, COLOR_WHITE, 2);
 800417a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800417c:	330f      	adds	r3, #15
 800417e:	b29b      	uxth	r3, r3
 8004180:	b21a      	sxth	r2, r3
 8004182:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004186:	2302      	movs	r3, #2
 8004188:	9302      	str	r3, [sp, #8]
 800418a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800418e:	9301      	str	r3, [sp, #4]
 8004190:	2300      	movs	r3, #0
 8004192:	9300      	str	r3, [sp, #0]
 8004194:	23c1      	movs	r3, #193	; 0xc1
 8004196:	68f8      	ldr	r0, [r7, #12]
 8004198:	f7ff f896 	bl	80032c8 <ILI9341_printText>
 800419c:	e05d      	b.n	800425a <show_num_pad_frame+0x3be>
		}else if(i == 2){
 800419e:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80041a2:	2b02      	cmp	r3, #2
 80041a4:	d117      	bne.n	80041d6 <show_num_pad_frame+0x33a>
			sprintf_(number, "C");
 80041a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041aa:	491c      	ldr	r1, [pc, #112]	; (800421c <show_num_pad_frame+0x380>)
 80041ac:	4618      	mov	r0, r3
 80041ae:	f002 f89d 	bl	80062ec <sprintf_>
			ILI9341_printText(spi, number, x+15, 193, COLOR_BLACK, COLOR_WHITE, 2);
 80041b2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041b4:	330f      	adds	r3, #15
 80041b6:	b29b      	uxth	r3, r3
 80041b8:	b21a      	sxth	r2, r3
 80041ba:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80041be:	2302      	movs	r3, #2
 80041c0:	9302      	str	r3, [sp, #8]
 80041c2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041c6:	9301      	str	r3, [sp, #4]
 80041c8:	2300      	movs	r3, #0
 80041ca:	9300      	str	r3, [sp, #0]
 80041cc:	23c1      	movs	r3, #193	; 0xc1
 80041ce:	68f8      	ldr	r0, [r7, #12]
 80041d0:	f7ff f87a 	bl	80032c8 <ILI9341_printText>
 80041d4:	e041      	b.n	800425a <show_num_pad_frame+0x3be>
		}else if(i == 3){
 80041d6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 80041da:	2b03      	cmp	r3, #3
 80041dc:	d122      	bne.n	8004224 <show_num_pad_frame+0x388>
			sprintf_(number, "<-");
 80041de:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80041e2:	490f      	ldr	r1, [pc, #60]	; (8004220 <show_num_pad_frame+0x384>)
 80041e4:	4618      	mov	r0, r3
 80041e6:	f002 f881 	bl	80062ec <sprintf_>
			ILI9341_printText(spi, number, x+9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 80041ea:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 80041ec:	3309      	adds	r3, #9
 80041ee:	b29b      	uxth	r3, r3
 80041f0:	b21a      	sxth	r2, r3
 80041f2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 80041f6:	2302      	movs	r3, #2
 80041f8:	9302      	str	r3, [sp, #8]
 80041fa:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80041fe:	9301      	str	r3, [sp, #4]
 8004200:	2300      	movs	r3, #0
 8004202:	9300      	str	r3, [sp, #0]
 8004204:	23c1      	movs	r3, #193	; 0xc1
 8004206:	68f8      	ldr	r0, [r7, #12]
 8004208:	f7ff f85e 	bl	80032c8 <ILI9341_printText>
 800420c:	e025      	b.n	800425a <show_num_pad_frame+0x3be>
 800420e:	bf00      	nop
 8004210:	0800ff94 	.word	0x0800ff94
 8004214:	0800ff98 	.word	0x0800ff98
 8004218:	0800ff9c 	.word	0x0800ff9c
 800421c:	0800ffa0 	.word	0x0800ffa0
 8004220:	0800ffa4 	.word	0x0800ffa4
		}else if(i == 4){
 8004224:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004228:	2b04      	cmp	r3, #4
 800422a:	d116      	bne.n	800425a <show_num_pad_frame+0x3be>
			sprintf_(number, "OK");
 800422c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8004230:	49c0      	ldr	r1, [pc, #768]	; (8004534 <show_num_pad_frame+0x698>)
 8004232:	4618      	mov	r0, r3
 8004234:	f002 f85a 	bl	80062ec <sprintf_>
			ILI9341_printText(spi, number, x+9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8004238:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800423a:	3309      	adds	r3, #9
 800423c:	b29b      	uxth	r3, r3
 800423e:	b21a      	sxth	r2, r3
 8004240:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8004244:	2302      	movs	r3, #2
 8004246:	9302      	str	r3, [sp, #8]
 8004248:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800424c:	9301      	str	r3, [sp, #4]
 800424e:	2300      	movs	r3, #0
 8004250:	9300      	str	r3, [sp, #0]
 8004252:	23c1      	movs	r3, #193	; 0xc1
 8004254:	68f8      	ldr	r0, [r7, #12]
 8004256:	f7ff f837 	bl	80032c8 <ILI9341_printText>
		}
		x += 35; // Space between buttons
 800425a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 800425c:	3323      	adds	r3, #35	; 0x23
 800425e:	86fb      	strh	r3, [r7, #54]	; 0x36
	for(uint8_t i = 0; i < 5; i++){
 8004260:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8004264:	3301      	adds	r3, #1
 8004266:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800426a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 800426e:	2b04      	cmp	r3, #4
 8004270:	f67f ae78 	bls.w	8003f64 <show_num_pad_frame+0xc8>
	}

	// Here is the logic
	char text[17];
	bool haveDot = false;
 8004274:	2300      	movs	r3, #0
 8004276:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t k = 0;
 800427a:	2300      	movs	r3, #0
 800427c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	// Display the current value
	sprintf_(text, "%f", *number_value); // Float value to text
 8004280:	687b      	ldr	r3, [r7, #4]
 8004282:	681b      	ldr	r3, [r3, #0]
 8004284:	4618      	mov	r0, r3
 8004286:	f7fc f92f 	bl	80004e8 <__aeabi_f2d>
 800428a:	4603      	mov	r3, r0
 800428c:	460c      	mov	r4, r1
 800428e:	f107 0014 	add.w	r0, r7, #20
 8004292:	461a      	mov	r2, r3
 8004294:	4623      	mov	r3, r4
 8004296:	49a8      	ldr	r1, [pc, #672]	; (8004538 <show_num_pad_frame+0x69c>)
 8004298:	f002 f828 	bl	80062ec <sprintf_>
	ILI9341_printText(spi, text, 15, 25, COLOR_BLACK, COLOR_WHITE, 3);
 800429c:	f107 0114 	add.w	r1, r7, #20
 80042a0:	2303      	movs	r3, #3
 80042a2:	9302      	str	r3, [sp, #8]
 80042a4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042a8:	9301      	str	r3, [sp, #4]
 80042aa:	2300      	movs	r3, #0
 80042ac:	9300      	str	r3, [sp, #0]
 80042ae:	2319      	movs	r3, #25
 80042b0:	220f      	movs	r2, #15
 80042b2:	68f8      	ldr	r0, [r7, #12]
 80042b4:	f7ff f808 	bl	80032c8 <ILI9341_printText>
	HAL_Delay(2000);
 80042b8:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80042bc:	f003 fae8 	bl	8007890 <HAL_Delay>
	ILI9341_Fill_Rect(spi, 12, 24, 308, 50, COLOR_WHITE); // Clear
 80042c0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042c4:	9301      	str	r3, [sp, #4]
 80042c6:	2332      	movs	r3, #50	; 0x32
 80042c8:	9300      	str	r3, [sp, #0]
 80042ca:	f44f 739a 	mov.w	r3, #308	; 0x134
 80042ce:	2218      	movs	r2, #24
 80042d0:	210c      	movs	r1, #12
 80042d2:	68f8      	ldr	r0, [r7, #12]
 80042d4:	f7fe fd5b 	bl	8002d8e <ILI9341_Fill_Rect>
	memset(text, 0, sizeof(text));
 80042d8:	f107 0314 	add.w	r3, r7, #20
 80042dc:	2211      	movs	r2, #17
 80042de:	2100      	movs	r1, #0
 80042e0:	4618      	mov	r0, r3
 80042e2:	f00a f83c 	bl	800e35e <memset>

	// Select numbers
	while (1) {
		TSC2046_GetTouchData(spi);
 80042e6:	68f8      	ldr	r0, [r7, #12]
 80042e8:	f7ff fc6e 	bl	8003bc8 <TSC2046_GetTouchData>
		uint8_t isPressed = spi->myTsData.isPressed;
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80042f2:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		uint16_t X = spi->myTsData.X;
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042fa:	863b      	strh	r3, [r7, #48]	; 0x30
		uint16_t Y = spi->myTsData.Y;
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004300:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (isPressed == true) {
 8004302:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8004306:	2b01      	cmp	r3, #1
 8004308:	f040 81ec 	bne.w	80046e4 <show_num_pad_frame+0x848>
			if (X >= 23 && X <= 63 && Y >= 70 && Y <= 110) {
 800430c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800430e:	2b16      	cmp	r3, #22
 8004310:	d91b      	bls.n	800434a <show_num_pad_frame+0x4ae>
 8004312:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004314:	2b3f      	cmp	r3, #63	; 0x3f
 8004316:	d818      	bhi.n	800434a <show_num_pad_frame+0x4ae>
 8004318:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800431a:	2b45      	cmp	r3, #69	; 0x45
 800431c:	d915      	bls.n	800434a <show_num_pad_frame+0x4ae>
 800431e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004320:	2b6e      	cmp	r3, #110	; 0x6e
 8004322:	d812      	bhi.n	800434a <show_num_pad_frame+0x4ae>
				// 0
				if (k >= 0 && k < 16) {
 8004324:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004328:	2b0f      	cmp	r3, #15
 800432a:	f200 81cd 	bhi.w	80046c8 <show_num_pad_frame+0x82c>
					text[k] = '0';
 800432e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004332:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004336:	4413      	add	r3, r2
 8004338:	2230      	movs	r2, #48	; 0x30
 800433a:	f803 2c24 	strb.w	r2, [r3, #-36]
					k++;
 800433e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004342:	3301      	adds	r3, #1
 8004344:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if (k >= 0 && k < 16) {
 8004348:	e1be      	b.n	80046c8 <show_num_pad_frame+0x82c>
				}
			} else if (X >= 81 && X <= 121 && Y >= 70 && Y <= 110) {
 800434a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800434c:	2b50      	cmp	r3, #80	; 0x50
 800434e:	d91b      	bls.n	8004388 <show_num_pad_frame+0x4ec>
 8004350:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004352:	2b79      	cmp	r3, #121	; 0x79
 8004354:	d818      	bhi.n	8004388 <show_num_pad_frame+0x4ec>
 8004356:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004358:	2b45      	cmp	r3, #69	; 0x45
 800435a:	d915      	bls.n	8004388 <show_num_pad_frame+0x4ec>
 800435c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800435e:	2b6e      	cmp	r3, #110	; 0x6e
 8004360:	d812      	bhi.n	8004388 <show_num_pad_frame+0x4ec>
				// 1
				if(k < 16){
 8004362:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004366:	2b0f      	cmp	r3, #15
 8004368:	f200 81ae 	bhi.w	80046c8 <show_num_pad_frame+0x82c>
					text[k] = '1';
 800436c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004370:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004374:	4413      	add	r3, r2
 8004376:	2231      	movs	r2, #49	; 0x31
 8004378:	f803 2c24 	strb.w	r2, [r3, #-36]
					k++;
 800437c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004380:	3301      	adds	r3, #1
 8004382:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if(k < 16){
 8004386:	e19f      	b.n	80046c8 <show_num_pad_frame+0x82c>
				}
			} else if (X >= 139 && X <= 179 && Y >= 70 && Y <= 110) {
 8004388:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800438a:	2b8a      	cmp	r3, #138	; 0x8a
 800438c:	d91b      	bls.n	80043c6 <show_num_pad_frame+0x52a>
 800438e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004390:	2bb3      	cmp	r3, #179	; 0xb3
 8004392:	d818      	bhi.n	80043c6 <show_num_pad_frame+0x52a>
 8004394:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004396:	2b45      	cmp	r3, #69	; 0x45
 8004398:	d915      	bls.n	80043c6 <show_num_pad_frame+0x52a>
 800439a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800439c:	2b6e      	cmp	r3, #110	; 0x6e
 800439e:	d812      	bhi.n	80043c6 <show_num_pad_frame+0x52a>
				// 2
				if(k < 16){
 80043a0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80043a4:	2b0f      	cmp	r3, #15
 80043a6:	f200 818f 	bhi.w	80046c8 <show_num_pad_frame+0x82c>
					text[k] = '2';
 80043aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80043ae:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80043b2:	4413      	add	r3, r2
 80043b4:	2232      	movs	r2, #50	; 0x32
 80043b6:	f803 2c24 	strb.w	r2, [r3, #-36]
					k++;
 80043ba:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80043be:	3301      	adds	r3, #1
 80043c0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if(k < 16){
 80043c4:	e180      	b.n	80046c8 <show_num_pad_frame+0x82c>
				}
			} else if (X >= 197 && X <= 237 && Y >= 70 && Y <= 110) {
 80043c6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80043c8:	2bc4      	cmp	r3, #196	; 0xc4
 80043ca:	d91b      	bls.n	8004404 <show_num_pad_frame+0x568>
 80043cc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80043ce:	2bed      	cmp	r3, #237	; 0xed
 80043d0:	d818      	bhi.n	8004404 <show_num_pad_frame+0x568>
 80043d2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80043d4:	2b45      	cmp	r3, #69	; 0x45
 80043d6:	d915      	bls.n	8004404 <show_num_pad_frame+0x568>
 80043d8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80043da:	2b6e      	cmp	r3, #110	; 0x6e
 80043dc:	d812      	bhi.n	8004404 <show_num_pad_frame+0x568>
				// 3
				if(k < 16){
 80043de:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80043e2:	2b0f      	cmp	r3, #15
 80043e4:	f200 8170 	bhi.w	80046c8 <show_num_pad_frame+0x82c>
					text[k] = '3';
 80043e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80043ec:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80043f0:	4413      	add	r3, r2
 80043f2:	2233      	movs	r2, #51	; 0x33
 80043f4:	f803 2c24 	strb.w	r2, [r3, #-36]
					k++;
 80043f8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80043fc:	3301      	adds	r3, #1
 80043fe:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if(k < 16){
 8004402:	e161      	b.n	80046c8 <show_num_pad_frame+0x82c>
				}
			} else if (X >= 255 && X <= 295 && Y >= 70 && Y <= 110) {
 8004404:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004406:	2bfe      	cmp	r3, #254	; 0xfe
 8004408:	d917      	bls.n	800443a <show_num_pad_frame+0x59e>
 800440a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800440c:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 8004410:	d213      	bcs.n	800443a <show_num_pad_frame+0x59e>
 8004412:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004414:	2b45      	cmp	r3, #69	; 0x45
 8004416:	d910      	bls.n	800443a <show_num_pad_frame+0x59e>
 8004418:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800441a:	2b6e      	cmp	r3, #110	; 0x6e
 800441c:	d80d      	bhi.n	800443a <show_num_pad_frame+0x59e>
				// 4
				text[k] = '4';
 800441e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004422:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004426:	4413      	add	r3, r2
 8004428:	2234      	movs	r2, #52	; 0x34
 800442a:	f803 2c24 	strb.w	r2, [r3, #-36]
				k++;
 800442e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004432:	3301      	adds	r3, #1
 8004434:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004438:	e146      	b.n	80046c8 <show_num_pad_frame+0x82c>
			} else if (X >= 23 && X <= 63 && Y >= 125 && Y <= 165) {
 800443a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800443c:	2b16      	cmp	r3, #22
 800443e:	d91b      	bls.n	8004478 <show_num_pad_frame+0x5dc>
 8004440:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004442:	2b3f      	cmp	r3, #63	; 0x3f
 8004444:	d818      	bhi.n	8004478 <show_num_pad_frame+0x5dc>
 8004446:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004448:	2b7c      	cmp	r3, #124	; 0x7c
 800444a:	d915      	bls.n	8004478 <show_num_pad_frame+0x5dc>
 800444c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800444e:	2ba5      	cmp	r3, #165	; 0xa5
 8004450:	d812      	bhi.n	8004478 <show_num_pad_frame+0x5dc>
				// 5
				if(k < 16){
 8004452:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004456:	2b0f      	cmp	r3, #15
 8004458:	f200 8136 	bhi.w	80046c8 <show_num_pad_frame+0x82c>
					text[k] = '5';
 800445c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004460:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004464:	4413      	add	r3, r2
 8004466:	2235      	movs	r2, #53	; 0x35
 8004468:	f803 2c24 	strb.w	r2, [r3, #-36]
					k++;
 800446c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004470:	3301      	adds	r3, #1
 8004472:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if(k < 16){
 8004476:	e127      	b.n	80046c8 <show_num_pad_frame+0x82c>
				}
			} else if (X >= 81 && X <= 121 && Y >= 125 && Y <= 165) {
 8004478:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800447a:	2b50      	cmp	r3, #80	; 0x50
 800447c:	d91b      	bls.n	80044b6 <show_num_pad_frame+0x61a>
 800447e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004480:	2b79      	cmp	r3, #121	; 0x79
 8004482:	d818      	bhi.n	80044b6 <show_num_pad_frame+0x61a>
 8004484:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004486:	2b7c      	cmp	r3, #124	; 0x7c
 8004488:	d915      	bls.n	80044b6 <show_num_pad_frame+0x61a>
 800448a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800448c:	2ba5      	cmp	r3, #165	; 0xa5
 800448e:	d812      	bhi.n	80044b6 <show_num_pad_frame+0x61a>
				// 6
				if(k < 16){
 8004490:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004494:	2b0f      	cmp	r3, #15
 8004496:	f200 8117 	bhi.w	80046c8 <show_num_pad_frame+0x82c>
					text[k] = '6';
 800449a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800449e:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80044a2:	4413      	add	r3, r2
 80044a4:	2236      	movs	r2, #54	; 0x36
 80044a6:	f803 2c24 	strb.w	r2, [r3, #-36]
					k++;
 80044aa:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80044ae:	3301      	adds	r3, #1
 80044b0:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if(k < 16){
 80044b4:	e108      	b.n	80046c8 <show_num_pad_frame+0x82c>
				}
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 80044b6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80044b8:	2b8a      	cmp	r3, #138	; 0x8a
 80044ba:	d91b      	bls.n	80044f4 <show_num_pad_frame+0x658>
 80044bc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80044be:	2bb3      	cmp	r3, #179	; 0xb3
 80044c0:	d818      	bhi.n	80044f4 <show_num_pad_frame+0x658>
 80044c2:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80044c4:	2b7c      	cmp	r3, #124	; 0x7c
 80044c6:	d915      	bls.n	80044f4 <show_num_pad_frame+0x658>
 80044c8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80044ca:	2ba5      	cmp	r3, #165	; 0xa5
 80044cc:	d812      	bhi.n	80044f4 <show_num_pad_frame+0x658>
				// 7
				if(k < 16){
 80044ce:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80044d2:	2b0f      	cmp	r3, #15
 80044d4:	f200 80f8 	bhi.w	80046c8 <show_num_pad_frame+0x82c>
					text[k] = '7';
 80044d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80044dc:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80044e0:	4413      	add	r3, r2
 80044e2:	2237      	movs	r2, #55	; 0x37
 80044e4:	f803 2c24 	strb.w	r2, [r3, #-36]
					k++;
 80044e8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80044ec:	3301      	adds	r3, #1
 80044ee:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if(k < 16){
 80044f2:	e0e9      	b.n	80046c8 <show_num_pad_frame+0x82c>
				}
			} else if (X >= 197 && X <= 237 && Y >= 125 && Y <= 165) {
 80044f4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80044f6:	2bc4      	cmp	r3, #196	; 0xc4
 80044f8:	d920      	bls.n	800453c <show_num_pad_frame+0x6a0>
 80044fa:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80044fc:	2bed      	cmp	r3, #237	; 0xed
 80044fe:	d81d      	bhi.n	800453c <show_num_pad_frame+0x6a0>
 8004500:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004502:	2b7c      	cmp	r3, #124	; 0x7c
 8004504:	d91a      	bls.n	800453c <show_num_pad_frame+0x6a0>
 8004506:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004508:	2ba5      	cmp	r3, #165	; 0xa5
 800450a:	d817      	bhi.n	800453c <show_num_pad_frame+0x6a0>
				// 8
				if(k < 16){
 800450c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004510:	2b0f      	cmp	r3, #15
 8004512:	f200 80d9 	bhi.w	80046c8 <show_num_pad_frame+0x82c>
					text[k] = '8';
 8004516:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800451a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800451e:	4413      	add	r3, r2
 8004520:	2238      	movs	r2, #56	; 0x38
 8004522:	f803 2c24 	strb.w	r2, [r3, #-36]
					k++;
 8004526:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800452a:	3301      	adds	r3, #1
 800452c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if(k < 16){
 8004530:	e0ca      	b.n	80046c8 <show_num_pad_frame+0x82c>
 8004532:	bf00      	nop
 8004534:	0800ffa8 	.word	0x0800ffa8
 8004538:	0800ffac 	.word	0x0800ffac
				}
			} else if (X >= 255 && X <= 295 && Y >= 125 && Y <= 165) {
 800453c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800453e:	2bfe      	cmp	r3, #254	; 0xfe
 8004540:	d91c      	bls.n	800457c <show_num_pad_frame+0x6e0>
 8004542:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004544:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 8004548:	d218      	bcs.n	800457c <show_num_pad_frame+0x6e0>
 800454a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800454c:	2b7c      	cmp	r3, #124	; 0x7c
 800454e:	d915      	bls.n	800457c <show_num_pad_frame+0x6e0>
 8004550:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004552:	2ba5      	cmp	r3, #165	; 0xa5
 8004554:	d812      	bhi.n	800457c <show_num_pad_frame+0x6e0>
				// 9
				if(k < 16){
 8004556:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800455a:	2b0f      	cmp	r3, #15
 800455c:	f200 80b4 	bhi.w	80046c8 <show_num_pad_frame+0x82c>
					text[k] = '9';
 8004560:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004564:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004568:	4413      	add	r3, r2
 800456a:	2239      	movs	r2, #57	; 0x39
 800456c:	f803 2c24 	strb.w	r2, [r3, #-36]
					k++;
 8004570:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004574:	3301      	adds	r3, #1
 8004576:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if(k < 16){
 800457a:	e0a5      	b.n	80046c8 <show_num_pad_frame+0x82c>
				}
			} else if (X >= 23 && X <= 63 && Y >= 180 && Y <= 220) {
 800457c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800457e:	2b16      	cmp	r3, #22
 8004580:	d91f      	bls.n	80045c2 <show_num_pad_frame+0x726>
 8004582:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004584:	2b3f      	cmp	r3, #63	; 0x3f
 8004586:	d81c      	bhi.n	80045c2 <show_num_pad_frame+0x726>
 8004588:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800458a:	2bb3      	cmp	r3, #179	; 0xb3
 800458c:	d919      	bls.n	80045c2 <show_num_pad_frame+0x726>
 800458e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004590:	2bdc      	cmp	r3, #220	; 0xdc
 8004592:	d816      	bhi.n	80045c2 <show_num_pad_frame+0x726>
				// -
				if (minusbutton_show == true && k == 0) {
 8004594:	7abb      	ldrb	r3, [r7, #10]
 8004596:	2b00      	cmp	r3, #0
 8004598:	f000 8093 	beq.w	80046c2 <show_num_pad_frame+0x826>
 800459c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	f040 808e 	bne.w	80046c2 <show_num_pad_frame+0x826>
					text[k] = '-';
 80045a6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80045aa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80045ae:	4413      	add	r3, r2
 80045b0:	222d      	movs	r2, #45	; 0x2d
 80045b2:	f803 2c24 	strb.w	r2, [r3, #-36]
					k++;
 80045b6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80045ba:	3301      	adds	r3, #1
 80045bc:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if (minusbutton_show == true && k == 0) {
 80045c0:	e07f      	b.n	80046c2 <show_num_pad_frame+0x826>
				}
			} else if (X >= 81 && X <= 121 && Y >= 180 && Y <= 220) {
 80045c2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80045c4:	2b50      	cmp	r3, #80	; 0x50
 80045c6:	d92b      	bls.n	8004620 <show_num_pad_frame+0x784>
 80045c8:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80045ca:	2b79      	cmp	r3, #121	; 0x79
 80045cc:	d828      	bhi.n	8004620 <show_num_pad_frame+0x784>
 80045ce:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80045d0:	2bb3      	cmp	r3, #179	; 0xb3
 80045d2:	d925      	bls.n	8004620 <show_num_pad_frame+0x784>
 80045d4:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80045d6:	2bdc      	cmp	r3, #220	; 0xdc
 80045d8:	d822      	bhi.n	8004620 <show_num_pad_frame+0x784>
				// .
				if (decimalbutton_show == true && k > 0 && haveDot == false && k < 16) {
 80045da:	7afb      	ldrb	r3, [r7, #11]
 80045dc:	2b00      	cmp	r3, #0
 80045de:	d072      	beq.n	80046c6 <show_num_pad_frame+0x82a>
 80045e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80045e4:	2b00      	cmp	r3, #0
 80045e6:	d06e      	beq.n	80046c6 <show_num_pad_frame+0x82a>
 80045e8:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80045ec:	f083 0301 	eor.w	r3, r3, #1
 80045f0:	b2db      	uxtb	r3, r3
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d067      	beq.n	80046c6 <show_num_pad_frame+0x82a>
 80045f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80045fa:	2b0f      	cmp	r3, #15
 80045fc:	d863      	bhi.n	80046c6 <show_num_pad_frame+0x82a>
					text[k] = '.';
 80045fe:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004602:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004606:	4413      	add	r3, r2
 8004608:	222e      	movs	r2, #46	; 0x2e
 800460a:	f803 2c24 	strb.w	r2, [r3, #-36]
					k++;
 800460e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004612:	3301      	adds	r3, #1
 8004614:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					haveDot = true;
 8004618:	2301      	movs	r3, #1
 800461a:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				if (decimalbutton_show == true && k > 0 && haveDot == false && k < 16) {
 800461e:	e052      	b.n	80046c6 <show_num_pad_frame+0x82a>
				}
			} else if (X >= 139 && X <= 179 && Y >= 180 && Y <= 220) {
 8004620:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004622:	2b8a      	cmp	r3, #138	; 0x8a
 8004624:	d922      	bls.n	800466c <show_num_pad_frame+0x7d0>
 8004626:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004628:	2bb3      	cmp	r3, #179	; 0xb3
 800462a:	d81f      	bhi.n	800466c <show_num_pad_frame+0x7d0>
 800462c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800462e:	2bb3      	cmp	r3, #179	; 0xb3
 8004630:	d91c      	bls.n	800466c <show_num_pad_frame+0x7d0>
 8004632:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004634:	2bdc      	cmp	r3, #220	; 0xdc
 8004636:	d819      	bhi.n	800466c <show_num_pad_frame+0x7d0>
				// C
				memset(text, 0, sizeof(text));
 8004638:	f107 0314 	add.w	r3, r7, #20
 800463c:	2211      	movs	r2, #17
 800463e:	2100      	movs	r1, #0
 8004640:	4618      	mov	r0, r3
 8004642:	f009 fe8c 	bl	800e35e <memset>
				k = 0;
 8004646:	2300      	movs	r3, #0
 8004648:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				haveDot = false;
 800464c:	2300      	movs	r3, #0
 800464e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				ILI9341_Fill_Rect(spi, 12, 24, 308, 50, COLOR_WHITE); // Clear
 8004652:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8004656:	9301      	str	r3, [sp, #4]
 8004658:	2332      	movs	r3, #50	; 0x32
 800465a:	9300      	str	r3, [sp, #0]
 800465c:	f44f 739a 	mov.w	r3, #308	; 0x134
 8004660:	2218      	movs	r2, #24
 8004662:	210c      	movs	r1, #12
 8004664:	68f8      	ldr	r0, [r7, #12]
 8004666:	f7fe fb92 	bl	8002d8e <ILI9341_Fill_Rect>
 800466a:	e02d      	b.n	80046c8 <show_num_pad_frame+0x82c>
			} else if (X >= 197 && X <= 237 && Y >= 180 && Y <= 220) {
 800466c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800466e:	2bc4      	cmp	r3, #196	; 0xc4
 8004670:	d90a      	bls.n	8004688 <show_num_pad_frame+0x7ec>
 8004672:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004674:	2bed      	cmp	r3, #237	; 0xed
 8004676:	d807      	bhi.n	8004688 <show_num_pad_frame+0x7ec>
 8004678:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800467a:	2bb3      	cmp	r3, #179	; 0xb3
 800467c:	d904      	bls.n	8004688 <show_num_pad_frame+0x7ec>
 800467e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004680:	2bdc      	cmp	r3, #220	; 0xdc
 8004682:	d801      	bhi.n	8004688 <show_num_pad_frame+0x7ec>
				// <-
				return 0;
 8004684:	2300      	movs	r3, #0
 8004686:	e031      	b.n	80046ec <show_num_pad_frame+0x850>
			} else if (X >= 255 && X <= 295 && Y >= 180 && Y <= 220) {
 8004688:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800468a:	2bfe      	cmp	r3, #254	; 0xfe
 800468c:	d91c      	bls.n	80046c8 <show_num_pad_frame+0x82c>
 800468e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004690:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 8004694:	d218      	bcs.n	80046c8 <show_num_pad_frame+0x82c>
 8004696:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004698:	2bb3      	cmp	r3, #179	; 0xb3
 800469a:	d915      	bls.n	80046c8 <show_num_pad_frame+0x82c>
 800469c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800469e:	2bdc      	cmp	r3, #220	; 0xdc
 80046a0:	d812      	bhi.n	80046c8 <show_num_pad_frame+0x82c>
				// OK
				*number_value = (float)atof(text); // char array to float
 80046a2:	f107 0314 	add.w	r3, r7, #20
 80046a6:	4618      	mov	r0, r3
 80046a8:	f009 fe20 	bl	800e2ec <atof>
 80046ac:	ec54 3b10 	vmov	r3, r4, d0
 80046b0:	4618      	mov	r0, r3
 80046b2:	4621      	mov	r1, r4
 80046b4:	f7fc fa52 	bl	8000b5c <__aeabi_d2f>
 80046b8:	4602      	mov	r2, r0
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	601a      	str	r2, [r3, #0]
				return 1;
 80046be:	2301      	movs	r3, #1
 80046c0:	e014      	b.n	80046ec <show_num_pad_frame+0x850>
				if (minusbutton_show == true && k == 0) {
 80046c2:	bf00      	nop
 80046c4:	e000      	b.n	80046c8 <show_num_pad_frame+0x82c>
				if (decimalbutton_show == true && k > 0 && haveDot == false && k < 16) {
 80046c6:	bf00      	nop
			}
			// Display the selected number text
			ILI9341_printText(spi, text, 15, 25, COLOR_BLACK, COLOR_WHITE, 3);
 80046c8:	f107 0114 	add.w	r1, r7, #20
 80046cc:	2303      	movs	r3, #3
 80046ce:	9302      	str	r3, [sp, #8]
 80046d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80046d4:	9301      	str	r3, [sp, #4]
 80046d6:	2300      	movs	r3, #0
 80046d8:	9300      	str	r3, [sp, #0]
 80046da:	2319      	movs	r3, #25
 80046dc:	220f      	movs	r2, #15
 80046de:	68f8      	ldr	r0, [r7, #12]
 80046e0:	f7fe fdf2 	bl	80032c8 <ILI9341_printText>
		}
		osDelay(100); // Wait 100 ms so we don't double click
 80046e4:	2064      	movs	r0, #100	; 0x64
 80046e6:	f007 f9d7 	bl	800ba98 <osDelay>
	while (1) {
 80046ea:	e5fc      	b.n	80042e6 <show_num_pad_frame+0x44a>
	}
}
 80046ec:	4618      	mov	r0, r3
 80046ee:	373c      	adds	r7, #60	; 0x3c
 80046f0:	46bd      	mov	sp, r7
 80046f2:	bd90      	pop	{r4, r7, pc}

080046f4 <show_question_save_settings_dialog>:

uint8_t show_question_save_settings_dialog(ILI9341_SPI *spi){
 80046f4:	b580      	push	{r7, lr}
 80046f6:	b088      	sub	sp, #32
 80046f8:	af04      	add	r7, sp, #16
 80046fa:	6078      	str	r0, [r7, #4]
	ILI9341_printImage(spi, 40, 80, 250, 83, question_save_settings_dialog, 500*83*sizeof(uint8_t));
 80046fc:	f24a 231c 	movw	r3, #41500	; 0xa21c
 8004700:	9302      	str	r3, [sp, #8]
 8004702:	4b43      	ldr	r3, [pc, #268]	; (8004810 <show_question_save_settings_dialog+0x11c>)
 8004704:	9301      	str	r3, [sp, #4]
 8004706:	2353      	movs	r3, #83	; 0x53
 8004708:	9300      	str	r3, [sp, #0]
 800470a:	23fa      	movs	r3, #250	; 0xfa
 800470c:	2250      	movs	r2, #80	; 0x50
 800470e:	2128      	movs	r1, #40	; 0x28
 8004710:	6878      	ldr	r0, [r7, #4]
 8004712:	f7fe fe1a 	bl	800334a <ILI9341_printImage>
	// Select numbers
	while (1) {
		TSC2046_GetTouchData(spi);
 8004716:	6878      	ldr	r0, [r7, #4]
 8004718:	f7ff fa56 	bl	8003bc8 <TSC2046_GetTouchData>
		uint8_t isPressed = spi->myTsData.isPressed;
 800471c:	687b      	ldr	r3, [r7, #4]
 800471e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8004722:	73fb      	strb	r3, [r7, #15]
		uint16_t X = spi->myTsData.X;
 8004724:	687b      	ldr	r3, [r7, #4]
 8004726:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004728:	81bb      	strh	r3, [r7, #12]
		uint16_t Y = spi->myTsData.Y;
 800472a:	687b      	ldr	r3, [r7, #4]
 800472c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800472e:	817b      	strh	r3, [r7, #10]
		if (isPressed == true) {
 8004730:	7bfb      	ldrb	r3, [r7, #15]
 8004732:	2b01      	cmp	r3, #1
 8004734:	d163      	bne.n	80047fe <show_question_save_settings_dialog+0x10a>
			if (X >= 120 && X <= 155 && Y >= 140 && Y <= 155) {
 8004736:	89bb      	ldrh	r3, [r7, #12]
 8004738:	2b77      	cmp	r3, #119	; 0x77
 800473a:	d92e      	bls.n	800479a <show_question_save_settings_dialog+0xa6>
 800473c:	89bb      	ldrh	r3, [r7, #12]
 800473e:	2b9b      	cmp	r3, #155	; 0x9b
 8004740:	d82b      	bhi.n	800479a <show_question_save_settings_dialog+0xa6>
 8004742:	897b      	ldrh	r3, [r7, #10]
 8004744:	2b8b      	cmp	r3, #139	; 0x8b
 8004746:	d928      	bls.n	800479a <show_question_save_settings_dialog+0xa6>
 8004748:	897b      	ldrh	r3, [r7, #10]
 800474a:	2b9b      	cmp	r3, #155	; 0x9b
 800474c:	d825      	bhi.n	800479a <show_question_save_settings_dialog+0xa6>
				ILI9341_drawFastHLine(spi, 123, 136, 37, COLOR_MAGENTA);
 800474e:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8004752:	9300      	str	r3, [sp, #0]
 8004754:	2325      	movs	r3, #37	; 0x25
 8004756:	2288      	movs	r2, #136	; 0x88
 8004758:	217b      	movs	r1, #123	; 0x7b
 800475a:	6878      	ldr	r0, [r7, #4]
 800475c:	f7fe fc25 	bl	8002faa <ILI9341_drawFastHLine>
				ILI9341_drawFastHLine(spi, 123, 154, 37, COLOR_MAGENTA);
 8004760:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8004764:	9300      	str	r3, [sp, #0]
 8004766:	2325      	movs	r3, #37	; 0x25
 8004768:	229a      	movs	r2, #154	; 0x9a
 800476a:	217b      	movs	r1, #123	; 0x7b
 800476c:	6878      	ldr	r0, [r7, #4]
 800476e:	f7fe fc1c 	bl	8002faa <ILI9341_drawFastHLine>
				ILI9341_drawFastVLine(spi, 123, 137, 17, COLOR_MAGENTA);
 8004772:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8004776:	9300      	str	r3, [sp, #0]
 8004778:	2311      	movs	r3, #17
 800477a:	2289      	movs	r2, #137	; 0x89
 800477c:	217b      	movs	r1, #123	; 0x7b
 800477e:	6878      	ldr	r0, [r7, #4]
 8004780:	f7fe fc38 	bl	8002ff4 <ILI9341_drawFastVLine>
				ILI9341_drawFastVLine(spi, 160, 137, 17, COLOR_MAGENTA);
 8004784:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8004788:	9300      	str	r3, [sp, #0]
 800478a:	2311      	movs	r3, #17
 800478c:	2289      	movs	r2, #137	; 0x89
 800478e:	21a0      	movs	r1, #160	; 0xa0
 8004790:	6878      	ldr	r0, [r7, #4]
 8004792:	f7fe fc2f 	bl	8002ff4 <ILI9341_drawFastVLine>
				return 1; // Yes
 8004796:	2301      	movs	r3, #1
 8004798:	e035      	b.n	8004806 <show_question_save_settings_dialog+0x112>
			}else if(X >= 170 && X <= 205 && Y >= 140 && Y <= 155){
 800479a:	89bb      	ldrh	r3, [r7, #12]
 800479c:	2ba9      	cmp	r3, #169	; 0xa9
 800479e:	d92e      	bls.n	80047fe <show_question_save_settings_dialog+0x10a>
 80047a0:	89bb      	ldrh	r3, [r7, #12]
 80047a2:	2bcd      	cmp	r3, #205	; 0xcd
 80047a4:	d82b      	bhi.n	80047fe <show_question_save_settings_dialog+0x10a>
 80047a6:	897b      	ldrh	r3, [r7, #10]
 80047a8:	2b8b      	cmp	r3, #139	; 0x8b
 80047aa:	d928      	bls.n	80047fe <show_question_save_settings_dialog+0x10a>
 80047ac:	897b      	ldrh	r3, [r7, #10]
 80047ae:	2b9b      	cmp	r3, #155	; 0x9b
 80047b0:	d825      	bhi.n	80047fe <show_question_save_settings_dialog+0x10a>
				ILI9341_drawFastHLine(spi, 170, 136, 38, COLOR_MAGENTA);
 80047b2:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80047b6:	9300      	str	r3, [sp, #0]
 80047b8:	2326      	movs	r3, #38	; 0x26
 80047ba:	2288      	movs	r2, #136	; 0x88
 80047bc:	21aa      	movs	r1, #170	; 0xaa
 80047be:	6878      	ldr	r0, [r7, #4]
 80047c0:	f7fe fbf3 	bl	8002faa <ILI9341_drawFastHLine>
				ILI9341_drawFastHLine(spi, 170, 154, 38, COLOR_MAGENTA);
 80047c4:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80047c8:	9300      	str	r3, [sp, #0]
 80047ca:	2326      	movs	r3, #38	; 0x26
 80047cc:	229a      	movs	r2, #154	; 0x9a
 80047ce:	21aa      	movs	r1, #170	; 0xaa
 80047d0:	6878      	ldr	r0, [r7, #4]
 80047d2:	f7fe fbea 	bl	8002faa <ILI9341_drawFastHLine>
				ILI9341_drawFastVLine(spi, 170, 137, 17, COLOR_MAGENTA);
 80047d6:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80047da:	9300      	str	r3, [sp, #0]
 80047dc:	2311      	movs	r3, #17
 80047de:	2289      	movs	r2, #137	; 0x89
 80047e0:	21aa      	movs	r1, #170	; 0xaa
 80047e2:	6878      	ldr	r0, [r7, #4]
 80047e4:	f7fe fc06 	bl	8002ff4 <ILI9341_drawFastVLine>
				ILI9341_drawFastVLine(spi, 207, 137, 17, COLOR_MAGENTA);
 80047e8:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80047ec:	9300      	str	r3, [sp, #0]
 80047ee:	2311      	movs	r3, #17
 80047f0:	2289      	movs	r2, #137	; 0x89
 80047f2:	21cf      	movs	r1, #207	; 0xcf
 80047f4:	6878      	ldr	r0, [r7, #4]
 80047f6:	f7fe fbfd 	bl	8002ff4 <ILI9341_drawFastVLine>
				return 0; // NO
 80047fa:	2300      	movs	r3, #0
 80047fc:	e003      	b.n	8004806 <show_question_save_settings_dialog+0x112>
			}
		}
		osDelay(100); // Wait 100 ms so we don't double click
 80047fe:	2064      	movs	r0, #100	; 0x64
 8004800:	f007 f94a 	bl	800ba98 <osDelay>
	while (1) {
 8004804:	e787      	b.n	8004716 <show_question_save_settings_dialog+0x22>
	}
}
 8004806:	4618      	mov	r0, r3
 8004808:	3710      	adds	r7, #16
 800480a:	46bd      	mov	sp, r7
 800480c:	bd80      	pop	{r7, pc}
 800480e:	bf00      	nop
 8004810:	08015058 	.word	0x08015058

08004814 <show_plot_frame>:

static void move(uint16_t i, uint16_t inputs[], uint16_t outputs[], uint16_t new_input, uint16_t new_output);

void show_plot_frame(ILI9341_SPI *spi, float new_input_float, float new_output_float, uint16_t new_input_uint, uint16_t new_output_uint, bool only_move_array, bool clear_plot) {
 8004814:	b590      	push	{r4, r7, lr}
 8004816:	b091      	sub	sp, #68	; 0x44
 8004818:	af04      	add	r7, sp, #16
 800481a:	6178      	str	r0, [r7, #20]
 800481c:	ed87 0a04 	vstr	s0, [r7, #16]
 8004820:	edc7 0a03 	vstr	s1, [r7, #12]
 8004824:	4608      	mov	r0, r1
 8004826:	4611      	mov	r1, r2
 8004828:	461a      	mov	r2, r3
 800482a:	4603      	mov	r3, r0
 800482c:	817b      	strh	r3, [r7, #10]
 800482e:	460b      	mov	r3, r1
 8004830:	813b      	strh	r3, [r7, #8]
 8004832:	4613      	mov	r3, r2
 8004834:	71fb      	strb	r3, [r7, #7]
	static uint16_t inputs[264];
	static uint16_t outputs[264];
	// Add more static arrays here

	// If we want to clear the plot for some reason
	if(clear_plot == true){
 8004836:	f897 3040 	ldrb.w	r3, [r7, #64]	; 0x40
 800483a:	2b00      	cmp	r3, #0
 800483c:	d00b      	beq.n	8004856 <show_plot_frame+0x42>
		memset(inputs, 0, sizeof(inputs));
 800483e:	f44f 7204 	mov.w	r2, #528	; 0x210
 8004842:	2100      	movs	r1, #0
 8004844:	4858      	ldr	r0, [pc, #352]	; (80049a8 <show_plot_frame+0x194>)
 8004846:	f009 fd8a 	bl	800e35e <memset>
		memset(outputs, 0, sizeof(outputs));
 800484a:	f44f 7204 	mov.w	r2, #528	; 0x210
 800484e:	2100      	movs	r1, #0
 8004850:	4856      	ldr	r0, [pc, #344]	; (80049ac <show_plot_frame+0x198>)
 8004852:	f009 fd84 	bl	800e35e <memset>
		// Add here
	}

	if (only_move_array == false) {
 8004856:	79fb      	ldrb	r3, [r7, #7]
 8004858:	f083 0301 	eor.w	r3, r3, #1
 800485c:	b2db      	uxtb	r3, r3
 800485e:	2b00      	cmp	r3, #0
 8004860:	f000 8086 	beq.w	8004970 <show_plot_frame+0x15c>
		// Update the text
		char text[20];
		sprintf_(text, "Input:%0.2f    ", new_input_float);
 8004864:	6938      	ldr	r0, [r7, #16]
 8004866:	f7fb fe3f 	bl	80004e8 <__aeabi_f2d>
 800486a:	4603      	mov	r3, r0
 800486c:	460c      	mov	r4, r1
 800486e:	f107 0018 	add.w	r0, r7, #24
 8004872:	461a      	mov	r2, r3
 8004874:	4623      	mov	r3, r4
 8004876:	494e      	ldr	r1, [pc, #312]	; (80049b0 <show_plot_frame+0x19c>)
 8004878:	f001 fd38 	bl	80062ec <sprintf_>
		ILI9341_printText(spi, text, 55, 10, COLOR_RED, COLOR_NAVY, 1);
 800487c:	f107 0118 	add.w	r1, r7, #24
 8004880:	2301      	movs	r3, #1
 8004882:	9302      	str	r3, [sp, #8]
 8004884:	230f      	movs	r3, #15
 8004886:	9301      	str	r3, [sp, #4]
 8004888:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800488c:	9300      	str	r3, [sp, #0]
 800488e:	230a      	movs	r3, #10
 8004890:	2237      	movs	r2, #55	; 0x37
 8004892:	6978      	ldr	r0, [r7, #20]
 8004894:	f7fe fd18 	bl	80032c8 <ILI9341_printText>
		sprintf_(text, "Output:%0.2f    ", new_output_float);
 8004898:	68f8      	ldr	r0, [r7, #12]
 800489a:	f7fb fe25 	bl	80004e8 <__aeabi_f2d>
 800489e:	4603      	mov	r3, r0
 80048a0:	460c      	mov	r4, r1
 80048a2:	f107 0018 	add.w	r0, r7, #24
 80048a6:	461a      	mov	r2, r3
 80048a8:	4623      	mov	r3, r4
 80048aa:	4942      	ldr	r1, [pc, #264]	; (80049b4 <show_plot_frame+0x1a0>)
 80048ac:	f001 fd1e 	bl	80062ec <sprintf_>
		ILI9341_printText(spi, text, 55, 20, COLOR_CYAN, COLOR_NAVY, 1);
 80048b0:	f107 0118 	add.w	r1, r7, #24
 80048b4:	2301      	movs	r3, #1
 80048b6:	9302      	str	r3, [sp, #8]
 80048b8:	230f      	movs	r3, #15
 80048ba:	9301      	str	r3, [sp, #4]
 80048bc:	f240 73ff 	movw	r3, #2047	; 0x7ff
 80048c0:	9300      	str	r3, [sp, #0]
 80048c2:	2314      	movs	r3, #20
 80048c4:	2237      	movs	r2, #55	; 0x37
 80048c6:	6978      	ldr	r0, [r7, #20]
 80048c8:	f7fe fcfe 	bl	80032c8 <ILI9341_printText>
		// Add more printText functions here

		// Change
		for (int16_t i = 51; i < 315; i++) {
 80048cc:	2333      	movs	r3, #51	; 0x33
 80048ce:	85fb      	strh	r3, [r7, #46]	; 0x2e
 80048d0:	e048      	b.n	8004964 <show_plot_frame+0x150>
			// Clear
			ILI9341_DrawPixel(spi, i, -inputs[i - 51] + 234, COLOR_NAVY);
 80048d2:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80048d4:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80048d8:	3b33      	subs	r3, #51	; 0x33
 80048da:	4a33      	ldr	r2, [pc, #204]	; (80049a8 <show_plot_frame+0x194>)
 80048dc:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048e0:	f1c3 03ea 	rsb	r3, r3, #234	; 0xea
 80048e4:	b29a      	uxth	r2, r3
 80048e6:	230f      	movs	r3, #15
 80048e8:	6978      	ldr	r0, [r7, #20]
 80048ea:	f7fe f9e3 	bl	8002cb4 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(spi, i, -outputs[i - 51] + 234, COLOR_NAVY);
 80048ee:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 80048f0:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 80048f4:	3b33      	subs	r3, #51	; 0x33
 80048f6:	4a2d      	ldr	r2, [pc, #180]	; (80049ac <show_plot_frame+0x198>)
 80048f8:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80048fc:	f1c3 03ea 	rsb	r3, r3, #234	; 0xea
 8004900:	b29a      	uxth	r2, r3
 8004902:	230f      	movs	r3, #15
 8004904:	6978      	ldr	r0, [r7, #20]
 8004906:	f7fe f9d5 	bl	8002cb4 <ILI9341_DrawPixel>
			// Add more clear pixels here

			// Move
			move(i, inputs, outputs, new_input_uint, new_output_uint);
 800490a:	8df8      	ldrh	r0, [r7, #46]	; 0x2e
 800490c:	897a      	ldrh	r2, [r7, #10]
 800490e:	893b      	ldrh	r3, [r7, #8]
 8004910:	9300      	str	r3, [sp, #0]
 8004912:	4613      	mov	r3, r2
 8004914:	4a25      	ldr	r2, [pc, #148]	; (80049ac <show_plot_frame+0x198>)
 8004916:	4924      	ldr	r1, [pc, #144]	; (80049a8 <show_plot_frame+0x194>)
 8004918:	f000 f84e 	bl	80049b8 <move>
			// Add more move arrays here

			// Fill
			ILI9341_DrawPixel(spi, i, -inputs[i - 51] + 234, COLOR_RED);
 800491c:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800491e:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004922:	3b33      	subs	r3, #51	; 0x33
 8004924:	4a20      	ldr	r2, [pc, #128]	; (80049a8 <show_plot_frame+0x194>)
 8004926:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800492a:	f1c3 03ea 	rsb	r3, r3, #234	; 0xea
 800492e:	b29a      	uxth	r2, r3
 8004930:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8004934:	6978      	ldr	r0, [r7, #20]
 8004936:	f7fe f9bd 	bl	8002cb4 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(spi, i, -outputs[i - 51] + 234, COLOR_CYAN);
 800493a:	8df9      	ldrh	r1, [r7, #46]	; 0x2e
 800493c:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004940:	3b33      	subs	r3, #51	; 0x33
 8004942:	4a1a      	ldr	r2, [pc, #104]	; (80049ac <show_plot_frame+0x198>)
 8004944:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004948:	f1c3 03ea 	rsb	r3, r3, #234	; 0xea
 800494c:	b29a      	uxth	r2, r3
 800494e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004952:	6978      	ldr	r0, [r7, #20]
 8004954:	f7fe f9ae 	bl	8002cb4 <ILI9341_DrawPixel>
		for (int16_t i = 51; i < 315; i++) {
 8004958:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 800495c:	b29b      	uxth	r3, r3
 800495e:	3301      	adds	r3, #1
 8004960:	b29b      	uxth	r3, r3
 8004962:	85fb      	strh	r3, [r7, #46]	; 0x2e
 8004964:	f9b7 302e 	ldrsh.w	r3, [r7, #46]	; 0x2e
 8004968:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800496c:	ddb1      	ble.n	80048d2 <show_plot_frame+0xbe>
		for (int16_t i = 51; i < 315; i++) {
			move(i, inputs, outputs, new_input_uint, new_output_uint);
			// Add more move arrays here
		}
	}
}
 800496e:	e016      	b.n	800499e <show_plot_frame+0x18a>
		for (int16_t i = 51; i < 315; i++) {
 8004970:	2333      	movs	r3, #51	; 0x33
 8004972:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004974:	e00e      	b.n	8004994 <show_plot_frame+0x180>
			move(i, inputs, outputs, new_input_uint, new_output_uint);
 8004976:	8db8      	ldrh	r0, [r7, #44]	; 0x2c
 8004978:	897a      	ldrh	r2, [r7, #10]
 800497a:	893b      	ldrh	r3, [r7, #8]
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	4613      	mov	r3, r2
 8004980:	4a0a      	ldr	r2, [pc, #40]	; (80049ac <show_plot_frame+0x198>)
 8004982:	4909      	ldr	r1, [pc, #36]	; (80049a8 <show_plot_frame+0x194>)
 8004984:	f000 f818 	bl	80049b8 <move>
		for (int16_t i = 51; i < 315; i++) {
 8004988:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 800498c:	b29b      	uxth	r3, r3
 800498e:	3301      	adds	r3, #1
 8004990:	b29b      	uxth	r3, r3
 8004992:	85bb      	strh	r3, [r7, #44]	; 0x2c
 8004994:	f9b7 302c 	ldrsh.w	r3, [r7, #44]	; 0x2c
 8004998:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 800499c:	ddeb      	ble.n	8004976 <show_plot_frame+0x162>
}
 800499e:	bf00      	nop
 80049a0:	3734      	adds	r7, #52	; 0x34
 80049a2:	46bd      	mov	sp, r7
 80049a4:	bd90      	pop	{r4, r7, pc}
 80049a6:	bf00      	nop
 80049a8:	2000020c 	.word	0x2000020c
 80049ac:	2000041c 	.word	0x2000041c
 80049b0:	0800ffb0 	.word	0x0800ffb0
 80049b4:	0800ffc0 	.word	0x0800ffc0

080049b8 <move>:

static void move(uint16_t i, uint16_t inputs[], uint16_t outputs[], uint16_t new_input, uint16_t new_output) {
 80049b8:	b480      	push	{r7}
 80049ba:	b085      	sub	sp, #20
 80049bc:	af00      	add	r7, sp, #0
 80049be:	60b9      	str	r1, [r7, #8]
 80049c0:	607a      	str	r2, [r7, #4]
 80049c2:	461a      	mov	r2, r3
 80049c4:	4603      	mov	r3, r0
 80049c6:	81fb      	strh	r3, [r7, #14]
 80049c8:	4613      	mov	r3, r2
 80049ca:	81bb      	strh	r3, [r7, #12]
	if (i < 314) {
 80049cc:	89fb      	ldrh	r3, [r7, #14]
 80049ce:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80049d2:	d220      	bcs.n	8004a16 <move+0x5e>
		// We can only move values that have a next element
		inputs[i - 51] = inputs[i - 50];
 80049d4:	89fb      	ldrh	r3, [r7, #14]
 80049d6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80049da:	3b32      	subs	r3, #50	; 0x32
 80049dc:	005b      	lsls	r3, r3, #1
 80049de:	68ba      	ldr	r2, [r7, #8]
 80049e0:	441a      	add	r2, r3
 80049e2:	89fb      	ldrh	r3, [r7, #14]
 80049e4:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80049e8:	3b33      	subs	r3, #51	; 0x33
 80049ea:	005b      	lsls	r3, r3, #1
 80049ec:	68b9      	ldr	r1, [r7, #8]
 80049ee:	440b      	add	r3, r1
 80049f0:	8812      	ldrh	r2, [r2, #0]
 80049f2:	801a      	strh	r2, [r3, #0]
		outputs[i - 51] = outputs[i - 50];
 80049f4:	89fb      	ldrh	r3, [r7, #14]
 80049f6:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80049fa:	3b32      	subs	r3, #50	; 0x32
 80049fc:	005b      	lsls	r3, r3, #1
 80049fe:	687a      	ldr	r2, [r7, #4]
 8004a00:	441a      	add	r2, r3
 8004a02:	89fb      	ldrh	r3, [r7, #14]
 8004a04:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004a08:	3b33      	subs	r3, #51	; 0x33
 8004a0a:	005b      	lsls	r3, r3, #1
 8004a0c:	6879      	ldr	r1, [r7, #4]
 8004a0e:	440b      	add	r3, r1
 8004a10:	8812      	ldrh	r2, [r2, #0]
 8004a12:	801a      	strh	r2, [r3, #0]
			outputs[i - 51] = new_output;
		} else {
			outputs[i - 51] = 203;
		}
	}
}
 8004a14:	e02b      	b.n	8004a6e <move+0xb6>
		if (new_input < 203) {
 8004a16:	89bb      	ldrh	r3, [r7, #12]
 8004a18:	2bca      	cmp	r3, #202	; 0xca
 8004a1a:	d809      	bhi.n	8004a30 <move+0x78>
			inputs[i - 51] = new_input;
 8004a1c:	89fb      	ldrh	r3, [r7, #14]
 8004a1e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004a22:	3b33      	subs	r3, #51	; 0x33
 8004a24:	005b      	lsls	r3, r3, #1
 8004a26:	68ba      	ldr	r2, [r7, #8]
 8004a28:	4413      	add	r3, r2
 8004a2a:	89ba      	ldrh	r2, [r7, #12]
 8004a2c:	801a      	strh	r2, [r3, #0]
 8004a2e:	e008      	b.n	8004a42 <move+0x8a>
			inputs[i - 51] = 203;
 8004a30:	89fb      	ldrh	r3, [r7, #14]
 8004a32:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004a36:	3b33      	subs	r3, #51	; 0x33
 8004a38:	005b      	lsls	r3, r3, #1
 8004a3a:	68ba      	ldr	r2, [r7, #8]
 8004a3c:	4413      	add	r3, r2
 8004a3e:	22cb      	movs	r2, #203	; 0xcb
 8004a40:	801a      	strh	r2, [r3, #0]
		if (new_output < 203) {
 8004a42:	8b3b      	ldrh	r3, [r7, #24]
 8004a44:	2bca      	cmp	r3, #202	; 0xca
 8004a46:	d809      	bhi.n	8004a5c <move+0xa4>
			outputs[i - 51] = new_output;
 8004a48:	89fb      	ldrh	r3, [r7, #14]
 8004a4a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004a4e:	3b33      	subs	r3, #51	; 0x33
 8004a50:	005b      	lsls	r3, r3, #1
 8004a52:	687a      	ldr	r2, [r7, #4]
 8004a54:	4413      	add	r3, r2
 8004a56:	8b3a      	ldrh	r2, [r7, #24]
 8004a58:	801a      	strh	r2, [r3, #0]
}
 8004a5a:	e008      	b.n	8004a6e <move+0xb6>
			outputs[i - 51] = 203;
 8004a5c:	89fb      	ldrh	r3, [r7, #14]
 8004a5e:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004a62:	3b33      	subs	r3, #51	; 0x33
 8004a64:	005b      	lsls	r3, r3, #1
 8004a66:	687a      	ldr	r2, [r7, #4]
 8004a68:	4413      	add	r3, r2
 8004a6a:	22cb      	movs	r2, #203	; 0xcb
 8004a6c:	801a      	strh	r2, [r3, #0]
}
 8004a6e:	bf00      	nop
 8004a70:	3714      	adds	r7, #20
 8004a72:	46bd      	mov	sp, r7
 8004a74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a78:	4770      	bx	lr

08004a7a <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004a7a:	b480      	push	{r7}
 8004a7c:	b085      	sub	sp, #20
 8004a7e:	af00      	add	r7, sp, #0
 8004a80:	60b9      	str	r1, [r7, #8]
 8004a82:	607a      	str	r2, [r7, #4]
 8004a84:	603b      	str	r3, [r7, #0]
 8004a86:	4603      	mov	r3, r0
 8004a88:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8004a8a:	687a      	ldr	r2, [r7, #4]
 8004a8c:	683b      	ldr	r3, [r7, #0]
 8004a8e:	429a      	cmp	r2, r3
 8004a90:	d204      	bcs.n	8004a9c <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 8004a92:	68ba      	ldr	r2, [r7, #8]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	4413      	add	r3, r2
 8004a98:	7bfa      	ldrb	r2, [r7, #15]
 8004a9a:	701a      	strb	r2, [r3, #0]
  }
}
 8004a9c:	bf00      	nop
 8004a9e:	3714      	adds	r7, #20
 8004aa0:	46bd      	mov	sp, r7
 8004aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aa6:	4770      	bx	lr

08004aa8 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004aa8:	b480      	push	{r7}
 8004aaa:	b085      	sub	sp, #20
 8004aac:	af00      	add	r7, sp, #0
 8004aae:	60b9      	str	r1, [r7, #8]
 8004ab0:	607a      	str	r2, [r7, #4]
 8004ab2:	603b      	str	r3, [r7, #0]
 8004ab4:	4603      	mov	r3, r0
 8004ab6:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8004ab8:	bf00      	nop
 8004aba:	3714      	adds	r7, #20
 8004abc:	46bd      	mov	sp, r7
 8004abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ac2:	4770      	bx	lr

08004ac4 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8004ac4:	b480      	push	{r7}
 8004ac6:	b085      	sub	sp, #20
 8004ac8:	af00      	add	r7, sp, #0
 8004aca:	6078      	str	r0, [r7, #4]
 8004acc:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	60fb      	str	r3, [r7, #12]
 8004ad2:	e002      	b.n	8004ada <_strnlen_s+0x16>
 8004ad4:	68fb      	ldr	r3, [r7, #12]
 8004ad6:	3301      	adds	r3, #1
 8004ad8:	60fb      	str	r3, [r7, #12]
 8004ada:	68fb      	ldr	r3, [r7, #12]
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d004      	beq.n	8004aec <_strnlen_s+0x28>
 8004ae2:	683b      	ldr	r3, [r7, #0]
 8004ae4:	1e5a      	subs	r2, r3, #1
 8004ae6:	603a      	str	r2, [r7, #0]
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	d1f3      	bne.n	8004ad4 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 8004aec:	68fa      	ldr	r2, [r7, #12]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	1ad3      	subs	r3, r2, r3
}
 8004af2:	4618      	mov	r0, r3
 8004af4:	3714      	adds	r7, #20
 8004af6:	46bd      	mov	sp, r7
 8004af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004afc:	4770      	bx	lr

08004afe <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 8004afe:	b480      	push	{r7}
 8004b00:	b083      	sub	sp, #12
 8004b02:	af00      	add	r7, sp, #0
 8004b04:	4603      	mov	r3, r0
 8004b06:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 8004b08:	79fb      	ldrb	r3, [r7, #7]
 8004b0a:	2b2f      	cmp	r3, #47	; 0x2f
 8004b0c:	d904      	bls.n	8004b18 <_is_digit+0x1a>
 8004b0e:	79fb      	ldrb	r3, [r7, #7]
 8004b10:	2b39      	cmp	r3, #57	; 0x39
 8004b12:	d801      	bhi.n	8004b18 <_is_digit+0x1a>
 8004b14:	2301      	movs	r3, #1
 8004b16:	e000      	b.n	8004b1a <_is_digit+0x1c>
 8004b18:	2300      	movs	r3, #0
 8004b1a:	f003 0301 	and.w	r3, r3, #1
 8004b1e:	b2db      	uxtb	r3, r3
}
 8004b20:	4618      	mov	r0, r3
 8004b22:	370c      	adds	r7, #12
 8004b24:	46bd      	mov	sp, r7
 8004b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b2a:	4770      	bx	lr

08004b2c <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 8004b2c:	b580      	push	{r7, lr}
 8004b2e:	b084      	sub	sp, #16
 8004b30:	af00      	add	r7, sp, #0
 8004b32:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 8004b34:	2300      	movs	r3, #0
 8004b36:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8004b38:	e00e      	b.n	8004b58 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 8004b3a:	68fa      	ldr	r2, [r7, #12]
 8004b3c:	4613      	mov	r3, r2
 8004b3e:	009b      	lsls	r3, r3, #2
 8004b40:	4413      	add	r3, r2
 8004b42:	005b      	lsls	r3, r3, #1
 8004b44:	4618      	mov	r0, r3
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	681b      	ldr	r3, [r3, #0]
 8004b4a:	1c59      	adds	r1, r3, #1
 8004b4c:	687a      	ldr	r2, [r7, #4]
 8004b4e:	6011      	str	r1, [r2, #0]
 8004b50:	781b      	ldrb	r3, [r3, #0]
 8004b52:	4403      	add	r3, r0
 8004b54:	3b30      	subs	r3, #48	; 0x30
 8004b56:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	781b      	ldrb	r3, [r3, #0]
 8004b5e:	4618      	mov	r0, r3
 8004b60:	f7ff ffcd 	bl	8004afe <_is_digit>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d1e7      	bne.n	8004b3a <_atoi+0xe>
  }
  return i;
 8004b6a:	68fb      	ldr	r3, [r7, #12]
}
 8004b6c:	4618      	mov	r0, r3
 8004b6e:	3710      	adds	r7, #16
 8004b70:	46bd      	mov	sp, r7
 8004b72:	bd80      	pop	{r7, pc}

08004b74 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8004b74:	b590      	push	{r4, r7, lr}
 8004b76:	b087      	sub	sp, #28
 8004b78:	af00      	add	r7, sp, #0
 8004b7a:	60f8      	str	r0, [r7, #12]
 8004b7c:	60b9      	str	r1, [r7, #8]
 8004b7e:	607a      	str	r2, [r7, #4]
 8004b80:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8004b86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b88:	f003 0302 	and.w	r3, r3, #2
 8004b8c:	2b00      	cmp	r3, #0
 8004b8e:	d125      	bne.n	8004bdc <_out_rev+0x68>
 8004b90:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004b92:	f003 0301 	and.w	r3, r3, #1
 8004b96:	2b00      	cmp	r3, #0
 8004b98:	d120      	bne.n	8004bdc <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8004b9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b9c:	617b      	str	r3, [r7, #20]
 8004b9e:	e00a      	b.n	8004bb6 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 8004ba0:	687a      	ldr	r2, [r7, #4]
 8004ba2:	1c53      	adds	r3, r2, #1
 8004ba4:	607b      	str	r3, [r7, #4]
 8004ba6:	68fc      	ldr	r4, [r7, #12]
 8004ba8:	683b      	ldr	r3, [r7, #0]
 8004baa:	68b9      	ldr	r1, [r7, #8]
 8004bac:	2020      	movs	r0, #32
 8004bae:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 8004bb0:	697b      	ldr	r3, [r7, #20]
 8004bb2:	3301      	adds	r3, #1
 8004bb4:	617b      	str	r3, [r7, #20]
 8004bb6:	697a      	ldr	r2, [r7, #20]
 8004bb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004bba:	429a      	cmp	r2, r3
 8004bbc:	d3f0      	bcc.n	8004ba0 <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 8004bbe:	e00d      	b.n	8004bdc <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 8004bc0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bc2:	3b01      	subs	r3, #1
 8004bc4:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004bc6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004bc8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bca:	4413      	add	r3, r2
 8004bcc:	7818      	ldrb	r0, [r3, #0]
 8004bce:	687a      	ldr	r2, [r7, #4]
 8004bd0:	1c53      	adds	r3, r2, #1
 8004bd2:	607b      	str	r3, [r7, #4]
 8004bd4:	68fc      	ldr	r4, [r7, #12]
 8004bd6:	683b      	ldr	r3, [r7, #0]
 8004bd8:	68b9      	ldr	r1, [r7, #8]
 8004bda:	47a0      	blx	r4
  while (len) {
 8004bdc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d1ee      	bne.n	8004bc0 <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 8004be2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004be4:	f003 0302 	and.w	r3, r3, #2
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d00e      	beq.n	8004c0a <_out_rev+0x96>
    while (idx - start_idx < width) {
 8004bec:	e007      	b.n	8004bfe <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 8004bee:	687a      	ldr	r2, [r7, #4]
 8004bf0:	1c53      	adds	r3, r2, #1
 8004bf2:	607b      	str	r3, [r7, #4]
 8004bf4:	68fc      	ldr	r4, [r7, #12]
 8004bf6:	683b      	ldr	r3, [r7, #0]
 8004bf8:	68b9      	ldr	r1, [r7, #8]
 8004bfa:	2020      	movs	r0, #32
 8004bfc:	47a0      	blx	r4
    while (idx - start_idx < width) {
 8004bfe:	687a      	ldr	r2, [r7, #4]
 8004c00:	693b      	ldr	r3, [r7, #16]
 8004c02:	1ad3      	subs	r3, r2, r3
 8004c04:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8004c06:	429a      	cmp	r2, r3
 8004c08:	d8f1      	bhi.n	8004bee <_out_rev+0x7a>
    }
  }

  return idx;
 8004c0a:	687b      	ldr	r3, [r7, #4]
}
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	371c      	adds	r7, #28
 8004c10:	46bd      	mov	sp, r7
 8004c12:	bd90      	pop	{r4, r7, pc}

08004c14 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004c14:	b580      	push	{r7, lr}
 8004c16:	b088      	sub	sp, #32
 8004c18:	af04      	add	r7, sp, #16
 8004c1a:	60f8      	str	r0, [r7, #12]
 8004c1c:	60b9      	str	r1, [r7, #8]
 8004c1e:	607a      	str	r2, [r7, #4]
 8004c20:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 8004c22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c24:	f003 0302 	and.w	r3, r3, #2
 8004c28:	2b00      	cmp	r3, #0
 8004c2a:	d136      	bne.n	8004c9a <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8004c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c2e:	2b00      	cmp	r3, #0
 8004c30:	d018      	beq.n	8004c64 <_ntoa_format+0x50>
 8004c32:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c34:	f003 0301 	and.w	r3, r3, #1
 8004c38:	2b00      	cmp	r3, #0
 8004c3a:	d013      	beq.n	8004c64 <_ntoa_format+0x50>
 8004c3c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004c40:	2b00      	cmp	r3, #0
 8004c42:	d104      	bne.n	8004c4e <_ntoa_format+0x3a>
 8004c44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c46:	f003 030c 	and.w	r3, r3, #12
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d00a      	beq.n	8004c64 <_ntoa_format+0x50>
      width--;
 8004c4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c50:	3b01      	subs	r3, #1
 8004c52:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004c54:	e006      	b.n	8004c64 <_ntoa_format+0x50>
      buf[len++] = '0';
 8004c56:	69fb      	ldr	r3, [r7, #28]
 8004c58:	1c5a      	adds	r2, r3, #1
 8004c5a:	61fa      	str	r2, [r7, #28]
 8004c5c:	69ba      	ldr	r2, [r7, #24]
 8004c5e:	4413      	add	r3, r2
 8004c60:	2230      	movs	r2, #48	; 0x30
 8004c62:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004c64:	69fa      	ldr	r2, [r7, #28]
 8004c66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004c68:	429a      	cmp	r2, r3
 8004c6a:	d20a      	bcs.n	8004c82 <_ntoa_format+0x6e>
 8004c6c:	69fb      	ldr	r3, [r7, #28]
 8004c6e:	2b1f      	cmp	r3, #31
 8004c70:	d9f1      	bls.n	8004c56 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004c72:	e006      	b.n	8004c82 <_ntoa_format+0x6e>
      buf[len++] = '0';
 8004c74:	69fb      	ldr	r3, [r7, #28]
 8004c76:	1c5a      	adds	r2, r3, #1
 8004c78:	61fa      	str	r2, [r7, #28]
 8004c7a:	69ba      	ldr	r2, [r7, #24]
 8004c7c:	4413      	add	r3, r2
 8004c7e:	2230      	movs	r2, #48	; 0x30
 8004c80:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004c82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c84:	f003 0301 	and.w	r3, r3, #1
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d006      	beq.n	8004c9a <_ntoa_format+0x86>
 8004c8c:	69fa      	ldr	r2, [r7, #28]
 8004c8e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004c90:	429a      	cmp	r2, r3
 8004c92:	d202      	bcs.n	8004c9a <_ntoa_format+0x86>
 8004c94:	69fb      	ldr	r3, [r7, #28]
 8004c96:	2b1f      	cmp	r3, #31
 8004c98:	d9ec      	bls.n	8004c74 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8004c9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004c9c:	f003 0310 	and.w	r3, r3, #16
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d058      	beq.n	8004d56 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8004ca4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ca6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004caa:	2b00      	cmp	r3, #0
 8004cac:	d116      	bne.n	8004cdc <_ntoa_format+0xc8>
 8004cae:	69fb      	ldr	r3, [r7, #28]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	d013      	beq.n	8004cdc <_ntoa_format+0xc8>
 8004cb4:	69fa      	ldr	r2, [r7, #28]
 8004cb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004cb8:	429a      	cmp	r2, r3
 8004cba:	d003      	beq.n	8004cc4 <_ntoa_format+0xb0>
 8004cbc:	69fa      	ldr	r2, [r7, #28]
 8004cbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004cc0:	429a      	cmp	r2, r3
 8004cc2:	d10b      	bne.n	8004cdc <_ntoa_format+0xc8>
      len--;
 8004cc4:	69fb      	ldr	r3, [r7, #28]
 8004cc6:	3b01      	subs	r3, #1
 8004cc8:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8004cca:	69fb      	ldr	r3, [r7, #28]
 8004ccc:	2b00      	cmp	r3, #0
 8004cce:	d005      	beq.n	8004cdc <_ntoa_format+0xc8>
 8004cd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cd2:	2b10      	cmp	r3, #16
 8004cd4:	d102      	bne.n	8004cdc <_ntoa_format+0xc8>
        len--;
 8004cd6:	69fb      	ldr	r3, [r7, #28]
 8004cd8:	3b01      	subs	r3, #1
 8004cda:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004cde:	2b10      	cmp	r3, #16
 8004ce0:	d10f      	bne.n	8004d02 <_ntoa_format+0xee>
 8004ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ce4:	f003 0320 	and.w	r3, r3, #32
 8004ce8:	2b00      	cmp	r3, #0
 8004cea:	d10a      	bne.n	8004d02 <_ntoa_format+0xee>
 8004cec:	69fb      	ldr	r3, [r7, #28]
 8004cee:	2b1f      	cmp	r3, #31
 8004cf0:	d807      	bhi.n	8004d02 <_ntoa_format+0xee>
      buf[len++] = 'x';
 8004cf2:	69fb      	ldr	r3, [r7, #28]
 8004cf4:	1c5a      	adds	r2, r3, #1
 8004cf6:	61fa      	str	r2, [r7, #28]
 8004cf8:	69ba      	ldr	r2, [r7, #24]
 8004cfa:	4413      	add	r3, r2
 8004cfc:	2278      	movs	r2, #120	; 0x78
 8004cfe:	701a      	strb	r2, [r3, #0]
 8004d00:	e01f      	b.n	8004d42 <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004d02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d04:	2b10      	cmp	r3, #16
 8004d06:	d10f      	bne.n	8004d28 <_ntoa_format+0x114>
 8004d08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d0a:	f003 0320 	and.w	r3, r3, #32
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d00a      	beq.n	8004d28 <_ntoa_format+0x114>
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	2b1f      	cmp	r3, #31
 8004d16:	d807      	bhi.n	8004d28 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8004d18:	69fb      	ldr	r3, [r7, #28]
 8004d1a:	1c5a      	adds	r2, r3, #1
 8004d1c:	61fa      	str	r2, [r7, #28]
 8004d1e:	69ba      	ldr	r2, [r7, #24]
 8004d20:	4413      	add	r3, r2
 8004d22:	2258      	movs	r2, #88	; 0x58
 8004d24:	701a      	strb	r2, [r3, #0]
 8004d26:	e00c      	b.n	8004d42 <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004d28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004d2a:	2b02      	cmp	r3, #2
 8004d2c:	d109      	bne.n	8004d42 <_ntoa_format+0x12e>
 8004d2e:	69fb      	ldr	r3, [r7, #28]
 8004d30:	2b1f      	cmp	r3, #31
 8004d32:	d806      	bhi.n	8004d42 <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8004d34:	69fb      	ldr	r3, [r7, #28]
 8004d36:	1c5a      	adds	r2, r3, #1
 8004d38:	61fa      	str	r2, [r7, #28]
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	4413      	add	r3, r2
 8004d3e:	2262      	movs	r2, #98	; 0x62
 8004d40:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8004d42:	69fb      	ldr	r3, [r7, #28]
 8004d44:	2b1f      	cmp	r3, #31
 8004d46:	d806      	bhi.n	8004d56 <_ntoa_format+0x142>
      buf[len++] = '0';
 8004d48:	69fb      	ldr	r3, [r7, #28]
 8004d4a:	1c5a      	adds	r2, r3, #1
 8004d4c:	61fa      	str	r2, [r7, #28]
 8004d4e:	69ba      	ldr	r2, [r7, #24]
 8004d50:	4413      	add	r3, r2
 8004d52:	2230      	movs	r2, #48	; 0x30
 8004d54:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8004d56:	69fb      	ldr	r3, [r7, #28]
 8004d58:	2b1f      	cmp	r3, #31
 8004d5a:	d824      	bhi.n	8004da6 <_ntoa_format+0x192>
    if (negative) {
 8004d5c:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d007      	beq.n	8004d74 <_ntoa_format+0x160>
      buf[len++] = '-';
 8004d64:	69fb      	ldr	r3, [r7, #28]
 8004d66:	1c5a      	adds	r2, r3, #1
 8004d68:	61fa      	str	r2, [r7, #28]
 8004d6a:	69ba      	ldr	r2, [r7, #24]
 8004d6c:	4413      	add	r3, r2
 8004d6e:	222d      	movs	r2, #45	; 0x2d
 8004d70:	701a      	strb	r2, [r3, #0]
 8004d72:	e018      	b.n	8004da6 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8004d74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d76:	f003 0304 	and.w	r3, r3, #4
 8004d7a:	2b00      	cmp	r3, #0
 8004d7c:	d007      	beq.n	8004d8e <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8004d7e:	69fb      	ldr	r3, [r7, #28]
 8004d80:	1c5a      	adds	r2, r3, #1
 8004d82:	61fa      	str	r2, [r7, #28]
 8004d84:	69ba      	ldr	r2, [r7, #24]
 8004d86:	4413      	add	r3, r2
 8004d88:	222b      	movs	r2, #43	; 0x2b
 8004d8a:	701a      	strb	r2, [r3, #0]
 8004d8c:	e00b      	b.n	8004da6 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8004d8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004d90:	f003 0308 	and.w	r3, r3, #8
 8004d94:	2b00      	cmp	r3, #0
 8004d96:	d006      	beq.n	8004da6 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	1c5a      	adds	r2, r3, #1
 8004d9c:	61fa      	str	r2, [r7, #28]
 8004d9e:	69ba      	ldr	r2, [r7, #24]
 8004da0:	4413      	add	r3, r2
 8004da2:	2220      	movs	r2, #32
 8004da4:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8004da6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004da8:	9303      	str	r3, [sp, #12]
 8004daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004dac:	9302      	str	r3, [sp, #8]
 8004dae:	69fb      	ldr	r3, [r7, #28]
 8004db0:	9301      	str	r3, [sp, #4]
 8004db2:	69bb      	ldr	r3, [r7, #24]
 8004db4:	9300      	str	r3, [sp, #0]
 8004db6:	683b      	ldr	r3, [r7, #0]
 8004db8:	687a      	ldr	r2, [r7, #4]
 8004dba:	68b9      	ldr	r1, [r7, #8]
 8004dbc:	68f8      	ldr	r0, [r7, #12]
 8004dbe:	f7ff fed9 	bl	8004b74 <_out_rev>
 8004dc2:	4603      	mov	r3, r0
}
 8004dc4:	4618      	mov	r0, r3
 8004dc6:	3710      	adds	r7, #16
 8004dc8:	46bd      	mov	sp, r7
 8004dca:	bd80      	pop	{r7, pc}

08004dcc <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004dcc:	b580      	push	{r7, lr}
 8004dce:	b096      	sub	sp, #88	; 0x58
 8004dd0:	af08      	add	r7, sp, #32
 8004dd2:	60f8      	str	r0, [r7, #12]
 8004dd4:	60b9      	str	r1, [r7, #8]
 8004dd6:	607a      	str	r2, [r7, #4]
 8004dd8:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8004dda:	2300      	movs	r3, #0
 8004ddc:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8004dde:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004de0:	2b00      	cmp	r3, #0
 8004de2:	d103      	bne.n	8004dec <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8004de4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004de6:	f023 0310 	bic.w	r3, r3, #16
 8004dea:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8004dec:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004dee:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004df2:	2b00      	cmp	r3, #0
 8004df4:	d002      	beq.n	8004dfc <_ntoa_long+0x30>
 8004df6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004df8:	2b00      	cmp	r3, #0
 8004dfa:	d033      	beq.n	8004e64 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 8004dfc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004dfe:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004e00:	fbb3 f2f2 	udiv	r2, r3, r2
 8004e04:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004e06:	fb01 f202 	mul.w	r2, r1, r2
 8004e0a:	1a9b      	subs	r3, r3, r2
 8004e0c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8004e10:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e14:	2b09      	cmp	r3, #9
 8004e16:	d804      	bhi.n	8004e22 <_ntoa_long+0x56>
 8004e18:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e1c:	3330      	adds	r3, #48	; 0x30
 8004e1e:	b2da      	uxtb	r2, r3
 8004e20:	e00d      	b.n	8004e3e <_ntoa_long+0x72>
 8004e22:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e24:	f003 0320 	and.w	r3, r3, #32
 8004e28:	2b00      	cmp	r3, #0
 8004e2a:	d001      	beq.n	8004e30 <_ntoa_long+0x64>
 8004e2c:	2241      	movs	r2, #65	; 0x41
 8004e2e:	e000      	b.n	8004e32 <_ntoa_long+0x66>
 8004e30:	2261      	movs	r2, #97	; 0x61
 8004e32:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004e36:	4413      	add	r3, r2
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	3b0a      	subs	r3, #10
 8004e3c:	b2da      	uxtb	r2, r3
 8004e3e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e40:	1c59      	adds	r1, r3, #1
 8004e42:	6379      	str	r1, [r7, #52]	; 0x34
 8004e44:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004e48:	440b      	add	r3, r1
 8004e4a:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8004e4e:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004e50:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e52:	fbb2 f3f3 	udiv	r3, r2, r3
 8004e56:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8004e58:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	d002      	beq.n	8004e64 <_ntoa_long+0x98>
 8004e5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e60:	2b1f      	cmp	r3, #31
 8004e62:	d9cb      	bls.n	8004dfc <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8004e64:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004e66:	9306      	str	r3, [sp, #24]
 8004e68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004e6a:	9305      	str	r3, [sp, #20]
 8004e6c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004e6e:	9304      	str	r3, [sp, #16]
 8004e70:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004e72:	9303      	str	r3, [sp, #12]
 8004e74:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004e78:	9302      	str	r3, [sp, #8]
 8004e7a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004e7c:	9301      	str	r3, [sp, #4]
 8004e7e:	f107 0310 	add.w	r3, r7, #16
 8004e82:	9300      	str	r3, [sp, #0]
 8004e84:	683b      	ldr	r3, [r7, #0]
 8004e86:	687a      	ldr	r2, [r7, #4]
 8004e88:	68b9      	ldr	r1, [r7, #8]
 8004e8a:	68f8      	ldr	r0, [r7, #12]
 8004e8c:	f7ff fec2 	bl	8004c14 <_ntoa_format>
 8004e90:	4603      	mov	r3, r0
}
 8004e92:	4618      	mov	r0, r3
 8004e94:	3738      	adds	r7, #56	; 0x38
 8004e96:	46bd      	mov	sp, r7
 8004e98:	bd80      	pop	{r7, pc}

08004e9a <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004e9a:	b590      	push	{r4, r7, lr}
 8004e9c:	b097      	sub	sp, #92	; 0x5c
 8004e9e:	af08      	add	r7, sp, #32
 8004ea0:	60f8      	str	r0, [r7, #12]
 8004ea2:	60b9      	str	r1, [r7, #8]
 8004ea4:	607a      	str	r2, [r7, #4]
 8004ea6:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8004ea8:	2300      	movs	r3, #0
 8004eaa:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8004eac:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004eb0:	4323      	orrs	r3, r4
 8004eb2:	d103      	bne.n	8004ebc <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8004eb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004eb6:	f023 0310 	bic.w	r3, r3, #16
 8004eba:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8004ebc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ebe:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d003      	beq.n	8004ece <_ntoa_long_long+0x34>
 8004ec6:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004eca:	4323      	orrs	r3, r4
 8004ecc:	d039      	beq.n	8004f42 <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
 8004ece:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004ed2:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ed6:	f7fb fe91 	bl	8000bfc <__aeabi_uldivmod>
 8004eda:	461c      	mov	r4, r3
 8004edc:	4613      	mov	r3, r2
 8004ede:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8004ee2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ee6:	2b09      	cmp	r3, #9
 8004ee8:	d804      	bhi.n	8004ef4 <_ntoa_long_long+0x5a>
 8004eea:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004eee:	3330      	adds	r3, #48	; 0x30
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	e00d      	b.n	8004f10 <_ntoa_long_long+0x76>
 8004ef4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004ef6:	f003 0320 	and.w	r3, r3, #32
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d001      	beq.n	8004f02 <_ntoa_long_long+0x68>
 8004efe:	2241      	movs	r2, #65	; 0x41
 8004f00:	e000      	b.n	8004f04 <_ntoa_long_long+0x6a>
 8004f02:	2261      	movs	r2, #97	; 0x61
 8004f04:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004f08:	4413      	add	r3, r2
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	3b0a      	subs	r3, #10
 8004f0e:	b2da      	uxtb	r2, r3
 8004f10:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f12:	1c59      	adds	r1, r3, #1
 8004f14:	6379      	str	r1, [r7, #52]	; 0x34
 8004f16:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004f1a:	440b      	add	r3, r1
 8004f1c:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8004f20:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004f24:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004f28:	f7fb fe68 	bl	8000bfc <__aeabi_uldivmod>
 8004f2c:	4603      	mov	r3, r0
 8004f2e:	460c      	mov	r4, r1
 8004f30:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8004f34:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004f38:	4323      	orrs	r3, r4
 8004f3a:	d002      	beq.n	8004f42 <_ntoa_long_long+0xa8>
 8004f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f3e:	2b1f      	cmp	r3, #31
 8004f40:	d9c5      	bls.n	8004ece <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8004f42:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004f44:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004f46:	9206      	str	r2, [sp, #24]
 8004f48:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004f4a:	9205      	str	r2, [sp, #20]
 8004f4c:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004f4e:	9204      	str	r2, [sp, #16]
 8004f50:	9303      	str	r3, [sp, #12]
 8004f52:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004f56:	9302      	str	r3, [sp, #8]
 8004f58:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004f5a:	9301      	str	r3, [sp, #4]
 8004f5c:	f107 0310 	add.w	r3, r7, #16
 8004f60:	9300      	str	r3, [sp, #0]
 8004f62:	683b      	ldr	r3, [r7, #0]
 8004f64:	687a      	ldr	r2, [r7, #4]
 8004f66:	68b9      	ldr	r1, [r7, #8]
 8004f68:	68f8      	ldr	r0, [r7, #12]
 8004f6a:	f7ff fe53 	bl	8004c14 <_ntoa_format>
 8004f6e:	4603      	mov	r3, r0
}
 8004f70:	4618      	mov	r0, r3
 8004f72:	373c      	adds	r7, #60	; 0x3c
 8004f74:	46bd      	mov	sp, r7
 8004f76:	bd90      	pop	{r4, r7, pc}

08004f78 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004f78:	b590      	push	{r4, r7, lr}
 8004f7a:	b09d      	sub	sp, #116	; 0x74
 8004f7c:	af04      	add	r7, sp, #16
 8004f7e:	6178      	str	r0, [r7, #20]
 8004f80:	6139      	str	r1, [r7, #16]
 8004f82:	60fa      	str	r2, [r7, #12]
 8004f84:	60bb      	str	r3, [r7, #8]
 8004f86:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8004f8a:	2300      	movs	r3, #0
 8004f8c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8004f8e:	f04f 0300 	mov.w	r3, #0
 8004f92:	f04f 0400 	mov.w	r4, #0
 8004f96:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8004f9a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004f9e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fa2:	f7fb fd61 	bl	8000a68 <__aeabi_dcmpeq>
 8004fa6:	4603      	mov	r3, r0
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	d10f      	bne.n	8004fcc <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8004fac:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fae:	9303      	str	r3, [sp, #12]
 8004fb0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fb2:	9302      	str	r3, [sp, #8]
 8004fb4:	2303      	movs	r3, #3
 8004fb6:	9301      	str	r3, [sp, #4]
 8004fb8:	4baf      	ldr	r3, [pc, #700]	; (8005278 <_ftoa+0x300>)
 8004fba:	9300      	str	r3, [sp, #0]
 8004fbc:	68bb      	ldr	r3, [r7, #8]
 8004fbe:	68fa      	ldr	r2, [r7, #12]
 8004fc0:	6939      	ldr	r1, [r7, #16]
 8004fc2:	6978      	ldr	r0, [r7, #20]
 8004fc4:	f7ff fdd6 	bl	8004b74 <_out_rev>
 8004fc8:	4603      	mov	r3, r0
 8004fca:	e237      	b.n	800543c <_ftoa+0x4c4>
  if (value < -DBL_MAX)
 8004fcc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004fd0:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8004fd4:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fd8:	f7fb fd50 	bl	8000a7c <__aeabi_dcmplt>
 8004fdc:	4603      	mov	r3, r0
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d00f      	beq.n	8005002 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8004fe2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004fe4:	9303      	str	r3, [sp, #12]
 8004fe6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004fe8:	9302      	str	r3, [sp, #8]
 8004fea:	2304      	movs	r3, #4
 8004fec:	9301      	str	r3, [sp, #4]
 8004fee:	4ba3      	ldr	r3, [pc, #652]	; (800527c <_ftoa+0x304>)
 8004ff0:	9300      	str	r3, [sp, #0]
 8004ff2:	68bb      	ldr	r3, [r7, #8]
 8004ff4:	68fa      	ldr	r2, [r7, #12]
 8004ff6:	6939      	ldr	r1, [r7, #16]
 8004ff8:	6978      	ldr	r0, [r7, #20]
 8004ffa:	f7ff fdbb 	bl	8004b74 <_out_rev>
 8004ffe:	4603      	mov	r3, r0
 8005000:	e21c      	b.n	800543c <_ftoa+0x4c4>
  if (value > DBL_MAX)
 8005002:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8005006:	4b9e      	ldr	r3, [pc, #632]	; (8005280 <_ftoa+0x308>)
 8005008:	e9d7 0100 	ldrd	r0, r1, [r7]
 800500c:	f7fb fd54 	bl	8000ab8 <__aeabi_dcmpgt>
 8005010:	4603      	mov	r3, r0
 8005012:	2b00      	cmp	r3, #0
 8005014:	d01d      	beq.n	8005052 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8005016:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	d001      	beq.n	8005024 <_ftoa+0xac>
 8005020:	4b98      	ldr	r3, [pc, #608]	; (8005284 <_ftoa+0x30c>)
 8005022:	e000      	b.n	8005026 <_ftoa+0xae>
 8005024:	4b98      	ldr	r3, [pc, #608]	; (8005288 <_ftoa+0x310>)
 8005026:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8005028:	f002 0204 	and.w	r2, r2, #4
 800502c:	2a00      	cmp	r2, #0
 800502e:	d001      	beq.n	8005034 <_ftoa+0xbc>
 8005030:	2204      	movs	r2, #4
 8005032:	e000      	b.n	8005036 <_ftoa+0xbe>
 8005034:	2203      	movs	r2, #3
 8005036:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8005038:	9103      	str	r1, [sp, #12]
 800503a:	6f79      	ldr	r1, [r7, #116]	; 0x74
 800503c:	9102      	str	r1, [sp, #8]
 800503e:	9201      	str	r2, [sp, #4]
 8005040:	9300      	str	r3, [sp, #0]
 8005042:	68bb      	ldr	r3, [r7, #8]
 8005044:	68fa      	ldr	r2, [r7, #12]
 8005046:	6939      	ldr	r1, [r7, #16]
 8005048:	6978      	ldr	r0, [r7, #20]
 800504a:	f7ff fd93 	bl	8004b74 <_out_rev>
 800504e:	4603      	mov	r3, r0
 8005050:	e1f4      	b.n	800543c <_ftoa+0x4c4>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8005052:	a385      	add	r3, pc, #532	; (adr r3, 8005268 <_ftoa+0x2f0>)
 8005054:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005058:	e9d7 0100 	ldrd	r0, r1, [r7]
 800505c:	f7fb fd2c 	bl	8000ab8 <__aeabi_dcmpgt>
 8005060:	4603      	mov	r3, r0
 8005062:	2b00      	cmp	r3, #0
 8005064:	d109      	bne.n	800507a <_ftoa+0x102>
 8005066:	a382      	add	r3, pc, #520	; (adr r3, 8005270 <_ftoa+0x2f8>)
 8005068:	e9d3 2300 	ldrd	r2, r3, [r3]
 800506c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005070:	f7fb fd04 	bl	8000a7c <__aeabi_dcmplt>
 8005074:	4603      	mov	r3, r0
 8005076:	2b00      	cmp	r3, #0
 8005078:	d00f      	beq.n	800509a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 800507a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800507c:	9302      	str	r3, [sp, #8]
 800507e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005080:	9301      	str	r3, [sp, #4]
 8005082:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005084:	9300      	str	r3, [sp, #0]
 8005086:	ed97 0b00 	vldr	d0, [r7]
 800508a:	68bb      	ldr	r3, [r7, #8]
 800508c:	68fa      	ldr	r2, [r7, #12]
 800508e:	6939      	ldr	r1, [r7, #16]
 8005090:	6978      	ldr	r0, [r7, #20]
 8005092:	f000 f9dd 	bl	8005450 <_etoa>
 8005096:	4603      	mov	r3, r0
 8005098:	e1d0      	b.n	800543c <_ftoa+0x4c4>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 800509a:	2300      	movs	r3, #0
 800509c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 80050a0:	f04f 0200 	mov.w	r2, #0
 80050a4:	f04f 0300 	mov.w	r3, #0
 80050a8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80050ac:	f7fb fce6 	bl	8000a7c <__aeabi_dcmplt>
 80050b0:	4603      	mov	r3, r0
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d00e      	beq.n	80050d4 <_ftoa+0x15c>
    negative = true;
 80050b6:	2301      	movs	r3, #1
 80050b8:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 80050bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80050c0:	f04f 0000 	mov.w	r0, #0
 80050c4:	f04f 0100 	mov.w	r1, #0
 80050c8:	f7fb f8ae 	bl	8000228 <__aeabi_dsub>
 80050cc:	4603      	mov	r3, r0
 80050ce:	460c      	mov	r4, r1
 80050d0:	e9c7 3400 	strd	r3, r4, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 80050d4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80050d6:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80050da:	2b00      	cmp	r3, #0
 80050dc:	d10e      	bne.n	80050fc <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80050de:	2306      	movs	r3, #6
 80050e0:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80050e2:	e00b      	b.n	80050fc <_ftoa+0x184>
    buf[len++] = '0';
 80050e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050e6:	1c5a      	adds	r2, r3, #1
 80050e8:	65fa      	str	r2, [r7, #92]	; 0x5c
 80050ea:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80050ee:	4413      	add	r3, r2
 80050f0:	2230      	movs	r2, #48	; 0x30
 80050f2:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 80050f6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80050f8:	3b01      	subs	r3, #1
 80050fa:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 80050fc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050fe:	2b1f      	cmp	r3, #31
 8005100:	d802      	bhi.n	8005108 <_ftoa+0x190>
 8005102:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005104:	2b09      	cmp	r3, #9
 8005106:	d8ed      	bhi.n	80050e4 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8005108:	e9d7 0100 	ldrd	r0, r1, [r7]
 800510c:	f7fb fcde 	bl	8000acc <__aeabi_d2iz>
 8005110:	4603      	mov	r3, r0
 8005112:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8005114:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005116:	f7fb f9d5 	bl	80004c4 <__aeabi_i2d>
 800511a:	4603      	mov	r3, r0
 800511c:	460c      	mov	r4, r1
 800511e:	461a      	mov	r2, r3
 8005120:	4623      	mov	r3, r4
 8005122:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005126:	f7fb f87f 	bl	8000228 <__aeabi_dsub>
 800512a:	4603      	mov	r3, r0
 800512c:	460c      	mov	r4, r1
 800512e:	4618      	mov	r0, r3
 8005130:	4621      	mov	r1, r4
 8005132:	4a56      	ldr	r2, [pc, #344]	; (800528c <_ftoa+0x314>)
 8005134:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005136:	00db      	lsls	r3, r3, #3
 8005138:	4413      	add	r3, r2
 800513a:	e9d3 3400 	ldrd	r3, r4, [r3]
 800513e:	461a      	mov	r2, r3
 8005140:	4623      	mov	r3, r4
 8005142:	f7fb fa29 	bl	8000598 <__aeabi_dmul>
 8005146:	4603      	mov	r3, r0
 8005148:	460c      	mov	r4, r1
 800514a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 800514e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005152:	f7fb fce3 	bl	8000b1c <__aeabi_d2uiz>
 8005156:	4603      	mov	r3, r0
 8005158:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 800515a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 800515c:	f7fb f9a2 	bl	80004a4 <__aeabi_ui2d>
 8005160:	4603      	mov	r3, r0
 8005162:	460c      	mov	r4, r1
 8005164:	461a      	mov	r2, r3
 8005166:	4623      	mov	r3, r4
 8005168:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 800516c:	f7fb f85c 	bl	8000228 <__aeabi_dsub>
 8005170:	4603      	mov	r3, r0
 8005172:	460c      	mov	r4, r1
 8005174:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8005178:	f04f 0200 	mov.w	r2, #0
 800517c:	4b44      	ldr	r3, [pc, #272]	; (8005290 <_ftoa+0x318>)
 800517e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8005182:	f7fb fc99 	bl	8000ab8 <__aeabi_dcmpgt>
 8005186:	4603      	mov	r3, r0
 8005188:	2b00      	cmp	r3, #0
 800518a:	d018      	beq.n	80051be <_ftoa+0x246>
    ++frac;
 800518c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800518e:	3301      	adds	r3, #1
 8005190:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8005192:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005194:	f7fb f986 	bl	80004a4 <__aeabi_ui2d>
 8005198:	4a3c      	ldr	r2, [pc, #240]	; (800528c <_ftoa+0x314>)
 800519a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800519c:	00db      	lsls	r3, r3, #3
 800519e:	4413      	add	r3, r2
 80051a0:	e9d3 3400 	ldrd	r3, r4, [r3]
 80051a4:	461a      	mov	r2, r3
 80051a6:	4623      	mov	r3, r4
 80051a8:	f7fb fc7c 	bl	8000aa4 <__aeabi_dcmpge>
 80051ac:	4603      	mov	r3, r0
 80051ae:	2b00      	cmp	r3, #0
 80051b0:	d01a      	beq.n	80051e8 <_ftoa+0x270>
      frac = 0;
 80051b2:	2300      	movs	r3, #0
 80051b4:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 80051b6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80051b8:	3301      	adds	r3, #1
 80051ba:	657b      	str	r3, [r7, #84]	; 0x54
 80051bc:	e014      	b.n	80051e8 <_ftoa+0x270>
    }
  }
  else if (diff < 0.5) {
 80051be:	f04f 0200 	mov.w	r2, #0
 80051c2:	4b33      	ldr	r3, [pc, #204]	; (8005290 <_ftoa+0x318>)
 80051c4:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 80051c8:	f7fb fc58 	bl	8000a7c <__aeabi_dcmplt>
 80051cc:	4603      	mov	r3, r0
 80051ce:	2b00      	cmp	r3, #0
 80051d0:	d10a      	bne.n	80051e8 <_ftoa+0x270>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 80051d2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051d4:	2b00      	cmp	r3, #0
 80051d6:	d004      	beq.n	80051e2 <_ftoa+0x26a>
 80051d8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051da:	f003 0301 	and.w	r3, r3, #1
 80051de:	2b00      	cmp	r3, #0
 80051e0:	d002      	beq.n	80051e8 <_ftoa+0x270>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 80051e2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80051e4:	3301      	adds	r3, #1
 80051e6:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 80051e8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d136      	bne.n	800525c <_ftoa+0x2e4>
    diff = value - (double)whole;
 80051ee:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80051f0:	f7fb f968 	bl	80004c4 <__aeabi_i2d>
 80051f4:	4603      	mov	r3, r0
 80051f6:	460c      	mov	r4, r1
 80051f8:	461a      	mov	r2, r3
 80051fa:	4623      	mov	r3, r4
 80051fc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005200:	f7fb f812 	bl	8000228 <__aeabi_dsub>
 8005204:	4603      	mov	r3, r0
 8005206:	460c      	mov	r4, r1
 8005208:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 800520c:	2301      	movs	r3, #1
 800520e:	461c      	mov	r4, r3
 8005210:	f04f 0200 	mov.w	r2, #0
 8005214:	4b1e      	ldr	r3, [pc, #120]	; (8005290 <_ftoa+0x318>)
 8005216:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800521a:	f7fb fc2f 	bl	8000a7c <__aeabi_dcmplt>
 800521e:	4603      	mov	r3, r0
 8005220:	2b00      	cmp	r3, #0
 8005222:	d101      	bne.n	8005228 <_ftoa+0x2b0>
 8005224:	2300      	movs	r3, #0
 8005226:	461c      	mov	r4, r3
 8005228:	b2e3      	uxtb	r3, r4
 800522a:	f083 0301 	eor.w	r3, r3, #1
 800522e:	b2db      	uxtb	r3, r3
 8005230:	2b00      	cmp	r3, #0
 8005232:	d109      	bne.n	8005248 <_ftoa+0x2d0>
 8005234:	f04f 0200 	mov.w	r2, #0
 8005238:	4b15      	ldr	r3, [pc, #84]	; (8005290 <_ftoa+0x318>)
 800523a:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 800523e:	f7fb fc3b 	bl	8000ab8 <__aeabi_dcmpgt>
 8005242:	4603      	mov	r3, r0
 8005244:	2b00      	cmp	r3, #0
 8005246:	d069      	beq.n	800531c <_ftoa+0x3a4>
 8005248:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800524a:	f003 0301 	and.w	r3, r3, #1
 800524e:	2b00      	cmp	r3, #0
 8005250:	f000 8087 	beq.w	8005362 <_ftoa+0x3ea>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8005254:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005256:	3301      	adds	r3, #1
 8005258:	657b      	str	r3, [r7, #84]	; 0x54
 800525a:	e082      	b.n	8005362 <_ftoa+0x3ea>
    }
  }
  else {
    unsigned int count = prec;
 800525c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800525e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005260:	e039      	b.n	80052d6 <_ftoa+0x35e>
 8005262:	bf00      	nop
 8005264:	f3af 8000 	nop.w
 8005268:	00000000 	.word	0x00000000
 800526c:	41cdcd65 	.word	0x41cdcd65
 8005270:	00000000 	.word	0x00000000
 8005274:	c1cdcd65 	.word	0xc1cdcd65
 8005278:	0800ffd4 	.word	0x0800ffd4
 800527c:	0800ffd8 	.word	0x0800ffd8
 8005280:	7fefffff 	.word	0x7fefffff
 8005284:	0800ffe0 	.word	0x0800ffe0
 8005288:	0800ffe8 	.word	0x0800ffe8
 800528c:	0801f278 	.word	0x0801f278
 8005290:	3fe00000 	.word	0x3fe00000
      --count;
 8005294:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005296:	3b01      	subs	r3, #1
 8005298:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800529a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800529c:	4b69      	ldr	r3, [pc, #420]	; (8005444 <_ftoa+0x4cc>)
 800529e:	fba3 2301 	umull	r2, r3, r3, r1
 80052a2:	08da      	lsrs	r2, r3, #3
 80052a4:	4613      	mov	r3, r2
 80052a6:	009b      	lsls	r3, r3, #2
 80052a8:	4413      	add	r3, r2
 80052aa:	005b      	lsls	r3, r3, #1
 80052ac:	1aca      	subs	r2, r1, r3
 80052ae:	b2d2      	uxtb	r2, r2
 80052b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052b2:	1c59      	adds	r1, r3, #1
 80052b4:	65f9      	str	r1, [r7, #92]	; 0x5c
 80052b6:	3230      	adds	r2, #48	; 0x30
 80052b8:	b2d2      	uxtb	r2, r2
 80052ba:	f107 0160 	add.w	r1, r7, #96	; 0x60
 80052be:	440b      	add	r3, r1
 80052c0:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 80052c4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052c6:	4a5f      	ldr	r2, [pc, #380]	; (8005444 <_ftoa+0x4cc>)
 80052c8:	fba2 2303 	umull	r2, r3, r2, r3
 80052cc:	08db      	lsrs	r3, r3, #3
 80052ce:	653b      	str	r3, [r7, #80]	; 0x50
 80052d0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80052d2:	2b00      	cmp	r3, #0
 80052d4:	d003      	beq.n	80052de <_ftoa+0x366>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80052d6:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052d8:	2b1f      	cmp	r3, #31
 80052da:	d9db      	bls.n	8005294 <_ftoa+0x31c>
 80052dc:	e00a      	b.n	80052f4 <_ftoa+0x37c>
        break;
 80052de:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80052e0:	e008      	b.n	80052f4 <_ftoa+0x37c>
      buf[len++] = '0';
 80052e2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052e4:	1c5a      	adds	r2, r3, #1
 80052e6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80052e8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80052ec:	4413      	add	r3, r2
 80052ee:	2230      	movs	r2, #48	; 0x30
 80052f0:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80052f4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80052f6:	2b1f      	cmp	r3, #31
 80052f8:	d804      	bhi.n	8005304 <_ftoa+0x38c>
 80052fa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80052fc:	1e5a      	subs	r2, r3, #1
 80052fe:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005300:	2b00      	cmp	r3, #0
 8005302:	d1ee      	bne.n	80052e2 <_ftoa+0x36a>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005304:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005306:	2b1f      	cmp	r3, #31
 8005308:	d82b      	bhi.n	8005362 <_ftoa+0x3ea>
      // add decimal
      buf[len++] = '.';
 800530a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800530c:	1c5a      	adds	r2, r3, #1
 800530e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005310:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005314:	4413      	add	r3, r2
 8005316:	222e      	movs	r2, #46	; 0x2e
 8005318:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 800531c:	e021      	b.n	8005362 <_ftoa+0x3ea>
    buf[len++] = (char)(48 + (whole % 10));
 800531e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005320:	4b49      	ldr	r3, [pc, #292]	; (8005448 <_ftoa+0x4d0>)
 8005322:	fb83 1302 	smull	r1, r3, r3, r2
 8005326:	1099      	asrs	r1, r3, #2
 8005328:	17d3      	asrs	r3, r2, #31
 800532a:	1ac9      	subs	r1, r1, r3
 800532c:	460b      	mov	r3, r1
 800532e:	009b      	lsls	r3, r3, #2
 8005330:	440b      	add	r3, r1
 8005332:	005b      	lsls	r3, r3, #1
 8005334:	1ad1      	subs	r1, r2, r3
 8005336:	b2ca      	uxtb	r2, r1
 8005338:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800533a:	1c59      	adds	r1, r3, #1
 800533c:	65f9      	str	r1, [r7, #92]	; 0x5c
 800533e:	3230      	adds	r2, #48	; 0x30
 8005340:	b2d2      	uxtb	r2, r2
 8005342:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005346:	440b      	add	r3, r1
 8005348:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800534c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800534e:	4a3e      	ldr	r2, [pc, #248]	; (8005448 <_ftoa+0x4d0>)
 8005350:	fb82 1203 	smull	r1, r2, r2, r3
 8005354:	1092      	asrs	r2, r2, #2
 8005356:	17db      	asrs	r3, r3, #31
 8005358:	1ad3      	subs	r3, r2, r3
 800535a:	657b      	str	r3, [r7, #84]	; 0x54
 800535c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800535e:	2b00      	cmp	r3, #0
 8005360:	d003      	beq.n	800536a <_ftoa+0x3f2>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005362:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005364:	2b1f      	cmp	r3, #31
 8005366:	d9da      	bls.n	800531e <_ftoa+0x3a6>
 8005368:	e000      	b.n	800536c <_ftoa+0x3f4>
      break;
 800536a:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800536c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800536e:	f003 0302 	and.w	r3, r3, #2
 8005372:	2b00      	cmp	r3, #0
 8005374:	d124      	bne.n	80053c0 <_ftoa+0x448>
 8005376:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005378:	f003 0301 	and.w	r3, r3, #1
 800537c:	2b00      	cmp	r3, #0
 800537e:	d01f      	beq.n	80053c0 <_ftoa+0x448>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8005380:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005382:	2b00      	cmp	r3, #0
 8005384:	d015      	beq.n	80053b2 <_ftoa+0x43a>
 8005386:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800538a:	2b00      	cmp	r3, #0
 800538c:	d104      	bne.n	8005398 <_ftoa+0x420>
 800538e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005390:	f003 030c 	and.w	r3, r3, #12
 8005394:	2b00      	cmp	r3, #0
 8005396:	d00c      	beq.n	80053b2 <_ftoa+0x43a>
      width--;
 8005398:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800539a:	3b01      	subs	r3, #1
 800539c:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800539e:	e008      	b.n	80053b2 <_ftoa+0x43a>
      buf[len++] = '0';
 80053a0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053a2:	1c5a      	adds	r2, r3, #1
 80053a4:	65fa      	str	r2, [r7, #92]	; 0x5c
 80053a6:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80053aa:	4413      	add	r3, r2
 80053ac:	2230      	movs	r2, #48	; 0x30
 80053ae:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 80053b2:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 80053b4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d202      	bcs.n	80053c0 <_ftoa+0x448>
 80053ba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053bc:	2b1f      	cmp	r3, #31
 80053be:	d9ef      	bls.n	80053a0 <_ftoa+0x428>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80053c0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053c2:	2b1f      	cmp	r3, #31
 80053c4:	d82a      	bhi.n	800541c <_ftoa+0x4a4>
    if (negative) {
 80053c6:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d009      	beq.n	80053e2 <_ftoa+0x46a>
      buf[len++] = '-';
 80053ce:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053d0:	1c5a      	adds	r2, r3, #1
 80053d2:	65fa      	str	r2, [r7, #92]	; 0x5c
 80053d4:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80053d8:	4413      	add	r3, r2
 80053da:	222d      	movs	r2, #45	; 0x2d
 80053dc:	f803 2c48 	strb.w	r2, [r3, #-72]
 80053e0:	e01c      	b.n	800541c <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_PLUS) {
 80053e2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d009      	beq.n	8005400 <_ftoa+0x488>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80053ec:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80053ee:	1c5a      	adds	r2, r3, #1
 80053f0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80053f2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80053f6:	4413      	add	r3, r2
 80053f8:	222b      	movs	r2, #43	; 0x2b
 80053fa:	f803 2c48 	strb.w	r2, [r3, #-72]
 80053fe:	e00d      	b.n	800541c <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_SPACE) {
 8005400:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005402:	f003 0308 	and.w	r3, r3, #8
 8005406:	2b00      	cmp	r3, #0
 8005408:	d008      	beq.n	800541c <_ftoa+0x4a4>
      buf[len++] = ' ';
 800540a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800540c:	1c5a      	adds	r2, r3, #1
 800540e:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005410:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005414:	4413      	add	r3, r2
 8005416:	2220      	movs	r2, #32
 8005418:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 800541c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800541e:	9303      	str	r3, [sp, #12]
 8005420:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005422:	9302      	str	r3, [sp, #8]
 8005424:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005426:	9301      	str	r3, [sp, #4]
 8005428:	f107 0318 	add.w	r3, r7, #24
 800542c:	9300      	str	r3, [sp, #0]
 800542e:	68bb      	ldr	r3, [r7, #8]
 8005430:	68fa      	ldr	r2, [r7, #12]
 8005432:	6939      	ldr	r1, [r7, #16]
 8005434:	6978      	ldr	r0, [r7, #20]
 8005436:	f7ff fb9d 	bl	8004b74 <_out_rev>
 800543a:	4603      	mov	r3, r0
}
 800543c:	4618      	mov	r0, r3
 800543e:	3764      	adds	r7, #100	; 0x64
 8005440:	46bd      	mov	sp, r7
 8005442:	bd90      	pop	{r4, r7, pc}
 8005444:	cccccccd 	.word	0xcccccccd
 8005448:	66666667 	.word	0x66666667
 800544c:	00000000 	.word	0x00000000

08005450 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005450:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005454:	b09d      	sub	sp, #116	; 0x74
 8005456:	af06      	add	r7, sp, #24
 8005458:	61f8      	str	r0, [r7, #28]
 800545a:	61b9      	str	r1, [r7, #24]
 800545c:	617a      	str	r2, [r7, #20]
 800545e:	613b      	str	r3, [r7, #16]
 8005460:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8005464:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005468:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800546c:	f7fb fafc 	bl	8000a68 <__aeabi_dcmpeq>
 8005470:	4603      	mov	r3, r0
 8005472:	2b00      	cmp	r3, #0
 8005474:	d014      	beq.n	80054a0 <_etoa+0x50>
 8005476:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800547a:	4bc9      	ldr	r3, [pc, #804]	; (80057a0 <_etoa+0x350>)
 800547c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005480:	f7fb fb1a 	bl	8000ab8 <__aeabi_dcmpgt>
 8005484:	4603      	mov	r3, r0
 8005486:	2b00      	cmp	r3, #0
 8005488:	d10a      	bne.n	80054a0 <_etoa+0x50>
 800548a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800548e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8005492:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005496:	f7fb faf1 	bl	8000a7c <__aeabi_dcmplt>
 800549a:	4603      	mov	r3, r0
 800549c:	2b00      	cmp	r3, #0
 800549e:	d012      	beq.n	80054c6 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 80054a0:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80054a4:	9302      	str	r3, [sp, #8]
 80054a6:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80054aa:	9301      	str	r3, [sp, #4]
 80054ac:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80054b0:	9300      	str	r3, [sp, #0]
 80054b2:	ed97 0b02 	vldr	d0, [r7, #8]
 80054b6:	693b      	ldr	r3, [r7, #16]
 80054b8:	697a      	ldr	r2, [r7, #20]
 80054ba:	69b9      	ldr	r1, [r7, #24]
 80054bc:	69f8      	ldr	r0, [r7, #28]
 80054be:	f7ff fd5b 	bl	8004f78 <_ftoa>
 80054c2:	4603      	mov	r3, r0
 80054c4:	e24f      	b.n	8005966 <_etoa+0x516>
  }

  // determine the sign
  const bool negative = value < 0;
 80054c6:	2301      	movs	r3, #1
 80054c8:	461c      	mov	r4, r3
 80054ca:	f04f 0200 	mov.w	r2, #0
 80054ce:	f04f 0300 	mov.w	r3, #0
 80054d2:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054d6:	f7fb fad1 	bl	8000a7c <__aeabi_dcmplt>
 80054da:	4603      	mov	r3, r0
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d101      	bne.n	80054e4 <_etoa+0x94>
 80054e0:	2300      	movs	r3, #0
 80054e2:	461c      	mov	r4, r3
 80054e4:	f887 404b 	strb.w	r4, [r7, #75]	; 0x4b
  if (negative) {
 80054e8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d005      	beq.n	80054fc <_etoa+0xac>
    value = -value;
 80054f0:	68bb      	ldr	r3, [r7, #8]
 80054f2:	60bb      	str	r3, [r7, #8]
 80054f4:	68fb      	ldr	r3, [r7, #12]
 80054f6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80054fa:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 80054fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005500:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005504:	2b00      	cmp	r3, #0
 8005506:	d102      	bne.n	800550e <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8005508:	2306      	movs	r3, #6
 800550a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 800550e:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 8005512:	e9c7 3408 	strd	r3, r4, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 8005516:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	f04f 0400 	mov.w	r4, #0
 8005522:	0d13      	lsrs	r3, r2, #20
 8005524:	2400      	movs	r4, #0
 8005526:	f3c3 030a 	ubfx	r3, r3, #0, #11
 800552a:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800552e:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 8005530:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005534:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8005538:	4a9a      	ldr	r2, [pc, #616]	; (80057a4 <_etoa+0x354>)
 800553a:	ea03 0801 	and.w	r8, r3, r1
 800553e:	ea04 0902 	and.w	r9, r4, r2
 8005542:	f04f 0100 	mov.w	r1, #0
 8005546:	4a98      	ldr	r2, [pc, #608]	; (80057a8 <_etoa+0x358>)
 8005548:	ea48 0301 	orr.w	r3, r8, r1
 800554c:	ea49 0402 	orr.w	r4, r9, r2
 8005550:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8005554:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005556:	f7fa ffb5 	bl	80004c4 <__aeabi_i2d>
 800555a:	a385      	add	r3, pc, #532	; (adr r3, 8005770 <_etoa+0x320>)
 800555c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005560:	f7fb f81a 	bl	8000598 <__aeabi_dmul>
 8005564:	4603      	mov	r3, r0
 8005566:	460c      	mov	r4, r1
 8005568:	4618      	mov	r0, r3
 800556a:	4621      	mov	r1, r4
 800556c:	a382      	add	r3, pc, #520	; (adr r3, 8005778 <_etoa+0x328>)
 800556e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005572:	f7fa fe5b 	bl	800022c <__adddf3>
 8005576:	4603      	mov	r3, r0
 8005578:	460c      	mov	r4, r1
 800557a:	4698      	mov	r8, r3
 800557c:	46a1      	mov	r9, r4
 800557e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005582:	f04f 0200 	mov.w	r2, #0
 8005586:	4b89      	ldr	r3, [pc, #548]	; (80057ac <_etoa+0x35c>)
 8005588:	f7fa fe4e 	bl	8000228 <__aeabi_dsub>
 800558c:	4603      	mov	r3, r0
 800558e:	460c      	mov	r4, r1
 8005590:	4618      	mov	r0, r3
 8005592:	4621      	mov	r1, r4
 8005594:	a37a      	add	r3, pc, #488	; (adr r3, 8005780 <_etoa+0x330>)
 8005596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800559a:	f7fa fffd 	bl	8000598 <__aeabi_dmul>
 800559e:	4603      	mov	r3, r0
 80055a0:	460c      	mov	r4, r1
 80055a2:	461a      	mov	r2, r3
 80055a4:	4623      	mov	r3, r4
 80055a6:	4640      	mov	r0, r8
 80055a8:	4649      	mov	r1, r9
 80055aa:	f7fa fe3f 	bl	800022c <__adddf3>
 80055ae:	4603      	mov	r3, r0
 80055b0:	460c      	mov	r4, r1
 80055b2:	4618      	mov	r0, r3
 80055b4:	4621      	mov	r1, r4
 80055b6:	f7fb fa89 	bl	8000acc <__aeabi_d2iz>
 80055ba:	4603      	mov	r3, r0
 80055bc:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 80055be:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80055c0:	f7fa ff80 	bl	80004c4 <__aeabi_i2d>
 80055c4:	a370      	add	r3, pc, #448	; (adr r3, 8005788 <_etoa+0x338>)
 80055c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ca:	f7fa ffe5 	bl	8000598 <__aeabi_dmul>
 80055ce:	4603      	mov	r3, r0
 80055d0:	460c      	mov	r4, r1
 80055d2:	4618      	mov	r0, r3
 80055d4:	4621      	mov	r1, r4
 80055d6:	f04f 0200 	mov.w	r2, #0
 80055da:	4b75      	ldr	r3, [pc, #468]	; (80057b0 <_etoa+0x360>)
 80055dc:	f7fa fe26 	bl	800022c <__adddf3>
 80055e0:	4603      	mov	r3, r0
 80055e2:	460c      	mov	r4, r1
 80055e4:	4618      	mov	r0, r3
 80055e6:	4621      	mov	r1, r4
 80055e8:	f7fb fa70 	bl	8000acc <__aeabi_d2iz>
 80055ec:	4603      	mov	r3, r0
 80055ee:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80055f0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80055f2:	f7fa ff67 	bl	80004c4 <__aeabi_i2d>
 80055f6:	a366      	add	r3, pc, #408	; (adr r3, 8005790 <_etoa+0x340>)
 80055f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055fc:	f7fa ffcc 	bl	8000598 <__aeabi_dmul>
 8005600:	4603      	mov	r3, r0
 8005602:	460c      	mov	r4, r1
 8005604:	4698      	mov	r8, r3
 8005606:	46a1      	mov	r9, r4
 8005608:	6c78      	ldr	r0, [r7, #68]	; 0x44
 800560a:	f7fa ff5b 	bl	80004c4 <__aeabi_i2d>
 800560e:	a362      	add	r3, pc, #392	; (adr r3, 8005798 <_etoa+0x348>)
 8005610:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005614:	f7fa ffc0 	bl	8000598 <__aeabi_dmul>
 8005618:	4603      	mov	r3, r0
 800561a:	460c      	mov	r4, r1
 800561c:	461a      	mov	r2, r3
 800561e:	4623      	mov	r3, r4
 8005620:	4640      	mov	r0, r8
 8005622:	4649      	mov	r1, r9
 8005624:	f7fa fe00 	bl	8000228 <__aeabi_dsub>
 8005628:	4603      	mov	r3, r0
 800562a:	460c      	mov	r4, r1
 800562c:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  const double z2 = z * z;
 8005630:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8005634:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005638:	f7fa ffae 	bl	8000598 <__aeabi_dmul>
 800563c:	4603      	mov	r3, r0
 800563e:	460c      	mov	r4, r1
 8005640:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8005644:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005646:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800564a:	4619      	mov	r1, r3
 800564c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8005650:	f04f 0300 	mov.w	r3, #0
 8005654:	f04f 0400 	mov.w	r4, #0
 8005658:	050c      	lsls	r4, r1, #20
 800565a:	2300      	movs	r3, #0
 800565c:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8005660:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005664:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005668:	4602      	mov	r2, r0
 800566a:	460b      	mov	r3, r1
 800566c:	f7fa fdde 	bl	800022c <__adddf3>
 8005670:	4603      	mov	r3, r0
 8005672:	460c      	mov	r4, r1
 8005674:	469a      	mov	sl, r3
 8005676:	46a3      	mov	fp, r4
 8005678:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800567c:	f04f 0000 	mov.w	r0, #0
 8005680:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005684:	f7fa fdd0 	bl	8000228 <__aeabi_dsub>
 8005688:	4603      	mov	r3, r0
 800568a:	460c      	mov	r4, r1
 800568c:	e9c7 3400 	strd	r3, r4, [r7]
 8005690:	f04f 0200 	mov.w	r2, #0
 8005694:	4b47      	ldr	r3, [pc, #284]	; (80057b4 <_etoa+0x364>)
 8005696:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800569a:	f7fb f8a7 	bl	80007ec <__aeabi_ddiv>
 800569e:	4603      	mov	r3, r0
 80056a0:	460c      	mov	r4, r1
 80056a2:	4618      	mov	r0, r3
 80056a4:	4621      	mov	r1, r4
 80056a6:	f04f 0200 	mov.w	r2, #0
 80056aa:	4b43      	ldr	r3, [pc, #268]	; (80057b8 <_etoa+0x368>)
 80056ac:	f7fa fdbe 	bl	800022c <__adddf3>
 80056b0:	4603      	mov	r3, r0
 80056b2:	460c      	mov	r4, r1
 80056b4:	461a      	mov	r2, r3
 80056b6:	4623      	mov	r3, r4
 80056b8:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80056bc:	f7fb f896 	bl	80007ec <__aeabi_ddiv>
 80056c0:	4603      	mov	r3, r0
 80056c2:	460c      	mov	r4, r1
 80056c4:	4618      	mov	r0, r3
 80056c6:	4621      	mov	r1, r4
 80056c8:	f04f 0200 	mov.w	r2, #0
 80056cc:	4b3b      	ldr	r3, [pc, #236]	; (80057bc <_etoa+0x36c>)
 80056ce:	f7fa fdad 	bl	800022c <__adddf3>
 80056d2:	4603      	mov	r3, r0
 80056d4:	460c      	mov	r4, r1
 80056d6:	461a      	mov	r2, r3
 80056d8:	4623      	mov	r3, r4
 80056da:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 80056de:	f7fb f885 	bl	80007ec <__aeabi_ddiv>
 80056e2:	4603      	mov	r3, r0
 80056e4:	460c      	mov	r4, r1
 80056e6:	461a      	mov	r2, r3
 80056e8:	4623      	mov	r3, r4
 80056ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80056ee:	f7fa fd9d 	bl	800022c <__adddf3>
 80056f2:	4603      	mov	r3, r0
 80056f4:	460c      	mov	r4, r1
 80056f6:	461a      	mov	r2, r3
 80056f8:	4623      	mov	r3, r4
 80056fa:	4650      	mov	r0, sl
 80056fc:	4659      	mov	r1, fp
 80056fe:	f7fb f875 	bl	80007ec <__aeabi_ddiv>
 8005702:	4603      	mov	r3, r0
 8005704:	460c      	mov	r4, r1
 8005706:	4618      	mov	r0, r3
 8005708:	4621      	mov	r1, r4
 800570a:	f04f 0200 	mov.w	r2, #0
 800570e:	4b26      	ldr	r3, [pc, #152]	; (80057a8 <_etoa+0x358>)
 8005710:	f7fa fd8c 	bl	800022c <__adddf3>
 8005714:	4603      	mov	r3, r0
 8005716:	460c      	mov	r4, r1
 8005718:	461a      	mov	r2, r3
 800571a:	4623      	mov	r3, r4
 800571c:	4640      	mov	r0, r8
 800571e:	4649      	mov	r1, r9
 8005720:	f7fa ff3a 	bl	8000598 <__aeabi_dmul>
 8005724:	4603      	mov	r3, r0
 8005726:	460c      	mov	r4, r1
 8005728:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 800572c:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 8005730:	461a      	mov	r2, r3
 8005732:	4623      	mov	r3, r4
 8005734:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005738:	f7fb f9a0 	bl	8000a7c <__aeabi_dcmplt>
 800573c:	4603      	mov	r3, r0
 800573e:	2b00      	cmp	r3, #0
 8005740:	d00d      	beq.n	800575e <_etoa+0x30e>
    expval--;
 8005742:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005744:	3b01      	subs	r3, #1
 8005746:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 8005748:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800574c:	f04f 0200 	mov.w	r2, #0
 8005750:	4b19      	ldr	r3, [pc, #100]	; (80057b8 <_etoa+0x368>)
 8005752:	f7fb f84b 	bl	80007ec <__aeabi_ddiv>
 8005756:	4603      	mov	r3, r0
 8005758:	460c      	mov	r4, r1
 800575a:	e9c7 3408 	strd	r3, r4, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800575e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005760:	2b63      	cmp	r3, #99	; 0x63
 8005762:	dc2d      	bgt.n	80057c0 <_etoa+0x370>
 8005764:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005766:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800576a:	db29      	blt.n	80057c0 <_etoa+0x370>
 800576c:	2304      	movs	r3, #4
 800576e:	e028      	b.n	80057c2 <_etoa+0x372>
 8005770:	509f79fb 	.word	0x509f79fb
 8005774:	3fd34413 	.word	0x3fd34413
 8005778:	8b60c8b3 	.word	0x8b60c8b3
 800577c:	3fc68a28 	.word	0x3fc68a28
 8005780:	636f4361 	.word	0x636f4361
 8005784:	3fd287a7 	.word	0x3fd287a7
 8005788:	0979a371 	.word	0x0979a371
 800578c:	400a934f 	.word	0x400a934f
 8005790:	bbb55516 	.word	0xbbb55516
 8005794:	40026bb1 	.word	0x40026bb1
 8005798:	fefa39ef 	.word	0xfefa39ef
 800579c:	3fe62e42 	.word	0x3fe62e42
 80057a0:	7fefffff 	.word	0x7fefffff
 80057a4:	000fffff 	.word	0x000fffff
 80057a8:	3ff00000 	.word	0x3ff00000
 80057ac:	3ff80000 	.word	0x3ff80000
 80057b0:	3fe00000 	.word	0x3fe00000
 80057b4:	402c0000 	.word	0x402c0000
 80057b8:	40240000 	.word	0x40240000
 80057bc:	40180000 	.word	0x40180000
 80057c0:	2305      	movs	r3, #5
 80057c2:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 80057c4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80057c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80057cc:	2b00      	cmp	r3, #0
 80057ce:	d03d      	beq.n	800584c <_etoa+0x3fc>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 80057d0:	a367      	add	r3, pc, #412	; (adr r3, 8005970 <_etoa+0x520>)
 80057d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057d6:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057da:	f7fb f963 	bl	8000aa4 <__aeabi_dcmpge>
 80057de:	4603      	mov	r3, r0
 80057e0:	2b00      	cmp	r3, #0
 80057e2:	d024      	beq.n	800582e <_etoa+0x3de>
 80057e4:	a364      	add	r3, pc, #400	; (adr r3, 8005978 <_etoa+0x528>)
 80057e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80057ea:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80057ee:	f7fb f945 	bl	8000a7c <__aeabi_dcmplt>
 80057f2:	4603      	mov	r3, r0
 80057f4:	2b00      	cmp	r3, #0
 80057f6:	d01a      	beq.n	800582e <_etoa+0x3de>
      if ((int)prec > expval) {
 80057f8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80057fc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80057fe:	429a      	cmp	r2, r3
 8005800:	da07      	bge.n	8005812 <_etoa+0x3c2>
        prec = (unsigned)((int)prec - expval - 1);
 8005802:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8005806:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005808:	1ad3      	subs	r3, r2, r3
 800580a:	3b01      	subs	r3, #1
 800580c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8005810:	e002      	b.n	8005818 <_etoa+0x3c8>
      }
      else {
        prec = 0;
 8005812:	2300      	movs	r3, #0
 8005814:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 8005818:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800581c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005820:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 8005828:	2300      	movs	r3, #0
 800582a:	657b      	str	r3, [r7, #84]	; 0x54
 800582c:	e00e      	b.n	800584c <_etoa+0x3fc>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 800582e:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005832:	2b00      	cmp	r3, #0
 8005834:	d00a      	beq.n	800584c <_etoa+0x3fc>
 8005836:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800583a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800583e:	2b00      	cmp	r3, #0
 8005840:	d004      	beq.n	800584c <_etoa+0x3fc>
        --prec;
 8005842:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005846:	3b01      	subs	r3, #1
 8005848:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800584c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005850:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 8005852:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005856:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005858:	429a      	cmp	r2, r3
 800585a:	d904      	bls.n	8005866 <_etoa+0x416>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800585c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800585e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005860:	1ad3      	subs	r3, r2, r3
 8005862:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005864:	e001      	b.n	800586a <_etoa+0x41a>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8005866:	2300      	movs	r3, #0
 8005868:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800586a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800586e:	f003 0302 	and.w	r3, r3, #2
 8005872:	2b00      	cmp	r3, #0
 8005874:	d004      	beq.n	8005880 <_etoa+0x430>
 8005876:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005878:	2b00      	cmp	r3, #0
 800587a:	d001      	beq.n	8005880 <_etoa+0x430>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800587c:	2300      	movs	r3, #0
 800587e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8005880:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005882:	2b00      	cmp	r3, #0
 8005884:	d00b      	beq.n	800589e <_etoa+0x44e>
    value /= conv.F;
 8005886:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800588a:	461a      	mov	r2, r3
 800588c:	4623      	mov	r3, r4
 800588e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005892:	f7fa ffab 	bl	80007ec <__aeabi_ddiv>
 8005896:	4603      	mov	r3, r0
 8005898:	460c      	mov	r4, r1
 800589a:	e9c7 3402 	strd	r3, r4, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 800589e:	697b      	ldr	r3, [r7, #20]
 80058a0:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 80058a2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80058a6:	2b00      	cmp	r3, #0
 80058a8:	d004      	beq.n	80058b4 <_etoa+0x464>
 80058aa:	68bd      	ldr	r5, [r7, #8]
 80058ac:	68fb      	ldr	r3, [r7, #12]
 80058ae:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 80058b2:	e001      	b.n	80058b8 <_etoa+0x468>
 80058b4:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 80058b8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058bc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80058c0:	9302      	str	r3, [sp, #8]
 80058c2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80058c4:	9301      	str	r3, [sp, #4]
 80058c6:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80058ca:	9300      	str	r3, [sp, #0]
 80058cc:	ec46 5b10 	vmov	d0, r5, r6
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	697a      	ldr	r2, [r7, #20]
 80058d4:	69b9      	ldr	r1, [r7, #24]
 80058d6:	69f8      	ldr	r0, [r7, #28]
 80058d8:	f7ff fb4e 	bl	8004f78 <_ftoa>
 80058dc:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 80058de:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80058e0:	2b00      	cmp	r3, #0
 80058e2:	d03f      	beq.n	8005964 <_etoa+0x514>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80058e4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80058e8:	f003 0320 	and.w	r3, r3, #32
 80058ec:	2b00      	cmp	r3, #0
 80058ee:	d001      	beq.n	80058f4 <_etoa+0x4a4>
 80058f0:	2045      	movs	r0, #69	; 0x45
 80058f2:	e000      	b.n	80058f6 <_etoa+0x4a6>
 80058f4:	2065      	movs	r0, #101	; 0x65
 80058f6:	697a      	ldr	r2, [r7, #20]
 80058f8:	1c53      	adds	r3, r2, #1
 80058fa:	617b      	str	r3, [r7, #20]
 80058fc:	69fc      	ldr	r4, [r7, #28]
 80058fe:	693b      	ldr	r3, [r7, #16]
 8005900:	69b9      	ldr	r1, [r7, #24]
 8005902:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 8005904:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005906:	2b00      	cmp	r3, #0
 8005908:	bfb8      	it	lt
 800590a:	425b      	neglt	r3, r3
 800590c:	4618      	mov	r0, r3
 800590e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005910:	0fdb      	lsrs	r3, r3, #31
 8005912:	b2db      	uxtb	r3, r3
 8005914:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005916:	3a01      	subs	r2, #1
 8005918:	2105      	movs	r1, #5
 800591a:	9105      	str	r1, [sp, #20]
 800591c:	9204      	str	r2, [sp, #16]
 800591e:	2200      	movs	r2, #0
 8005920:	9203      	str	r2, [sp, #12]
 8005922:	220a      	movs	r2, #10
 8005924:	9202      	str	r2, [sp, #8]
 8005926:	9301      	str	r3, [sp, #4]
 8005928:	9000      	str	r0, [sp, #0]
 800592a:	693b      	ldr	r3, [r7, #16]
 800592c:	697a      	ldr	r2, [r7, #20]
 800592e:	69b9      	ldr	r1, [r7, #24]
 8005930:	69f8      	ldr	r0, [r7, #28]
 8005932:	f7ff fa4b 	bl	8004dcc <_ntoa_long>
 8005936:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 8005938:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800593c:	f003 0302 	and.w	r3, r3, #2
 8005940:	2b00      	cmp	r3, #0
 8005942:	d00f      	beq.n	8005964 <_etoa+0x514>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8005944:	e007      	b.n	8005956 <_etoa+0x506>
 8005946:	697a      	ldr	r2, [r7, #20]
 8005948:	1c53      	adds	r3, r2, #1
 800594a:	617b      	str	r3, [r7, #20]
 800594c:	69fc      	ldr	r4, [r7, #28]
 800594e:	693b      	ldr	r3, [r7, #16]
 8005950:	69b9      	ldr	r1, [r7, #24]
 8005952:	2020      	movs	r0, #32
 8005954:	47a0      	blx	r4
 8005956:	697a      	ldr	r2, [r7, #20]
 8005958:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800595a:	1ad3      	subs	r3, r2, r3
 800595c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005960:	429a      	cmp	r2, r3
 8005962:	d8f0      	bhi.n	8005946 <_etoa+0x4f6>
    }
  }
  return idx;
 8005964:	697b      	ldr	r3, [r7, #20]
}
 8005966:	4618      	mov	r0, r3
 8005968:	375c      	adds	r7, #92	; 0x5c
 800596a:	46bd      	mov	sp, r7
 800596c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005970:	eb1c432d 	.word	0xeb1c432d
 8005974:	3f1a36e2 	.word	0x3f1a36e2
 8005978:	00000000 	.word	0x00000000
 800597c:	412e8480 	.word	0x412e8480

08005980 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8005980:	b5b0      	push	{r4, r5, r7, lr}
 8005982:	b0a0      	sub	sp, #128	; 0x80
 8005984:	af0a      	add	r7, sp, #40	; 0x28
 8005986:	60f8      	str	r0, [r7, #12]
 8005988:	60b9      	str	r1, [r7, #8]
 800598a:	607a      	str	r2, [r7, #4]
 800598c:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800598e:	2300      	movs	r3, #0
 8005990:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 8005992:	68bb      	ldr	r3, [r7, #8]
 8005994:	2b00      	cmp	r3, #0
 8005996:	f040 8492 	bne.w	80062be <_vsnprintf+0x93e>
    // use null output function
    out = _out_null;
 800599a:	4ba0      	ldr	r3, [pc, #640]	; (8005c1c <_vsnprintf+0x29c>)
 800599c:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800599e:	f000 bc8e 	b.w	80062be <_vsnprintf+0x93e>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 80059a2:	683b      	ldr	r3, [r7, #0]
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	2b25      	cmp	r3, #37	; 0x25
 80059a8:	d00d      	beq.n	80059c6 <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 80059aa:	683b      	ldr	r3, [r7, #0]
 80059ac:	7818      	ldrb	r0, [r3, #0]
 80059ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80059b0:	1c53      	adds	r3, r2, #1
 80059b2:	647b      	str	r3, [r7, #68]	; 0x44
 80059b4:	68fc      	ldr	r4, [r7, #12]
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	68b9      	ldr	r1, [r7, #8]
 80059ba:	47a0      	blx	r4
      format++;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	3301      	adds	r3, #1
 80059c0:	603b      	str	r3, [r7, #0]
      continue;
 80059c2:	f000 bc7c 	b.w	80062be <_vsnprintf+0x93e>
    }
    else {
      // yes, evaluate it
      format++;
 80059c6:	683b      	ldr	r3, [r7, #0]
 80059c8:	3301      	adds	r3, #1
 80059ca:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 80059cc:	2300      	movs	r3, #0
 80059ce:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 80059d0:	683b      	ldr	r3, [r7, #0]
 80059d2:	781b      	ldrb	r3, [r3, #0]
 80059d4:	3b20      	subs	r3, #32
 80059d6:	2b10      	cmp	r3, #16
 80059d8:	d856      	bhi.n	8005a88 <_vsnprintf+0x108>
 80059da:	a201      	add	r2, pc, #4	; (adr r2, 80059e0 <_vsnprintf+0x60>)
 80059dc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059e0:	08005a61 	.word	0x08005a61
 80059e4:	08005a89 	.word	0x08005a89
 80059e8:	08005a89 	.word	0x08005a89
 80059ec:	08005a75 	.word	0x08005a75
 80059f0:	08005a89 	.word	0x08005a89
 80059f4:	08005a89 	.word	0x08005a89
 80059f8:	08005a89 	.word	0x08005a89
 80059fc:	08005a89 	.word	0x08005a89
 8005a00:	08005a89 	.word	0x08005a89
 8005a04:	08005a89 	.word	0x08005a89
 8005a08:	08005a89 	.word	0x08005a89
 8005a0c:	08005a4d 	.word	0x08005a4d
 8005a10:	08005a89 	.word	0x08005a89
 8005a14:	08005a39 	.word	0x08005a39
 8005a18:	08005a89 	.word	0x08005a89
 8005a1c:	08005a89 	.word	0x08005a89
 8005a20:	08005a25 	.word	0x08005a25
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 8005a24:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a26:	f043 0301 	orr.w	r3, r3, #1
 8005a2a:	657b      	str	r3, [r7, #84]	; 0x54
 8005a2c:	683b      	ldr	r3, [r7, #0]
 8005a2e:	3301      	adds	r3, #1
 8005a30:	603b      	str	r3, [r7, #0]
 8005a32:	2301      	movs	r3, #1
 8005a34:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a36:	e02a      	b.n	8005a8e <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 8005a38:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a3a:	f043 0302 	orr.w	r3, r3, #2
 8005a3e:	657b      	str	r3, [r7, #84]	; 0x54
 8005a40:	683b      	ldr	r3, [r7, #0]
 8005a42:	3301      	adds	r3, #1
 8005a44:	603b      	str	r3, [r7, #0]
 8005a46:	2301      	movs	r3, #1
 8005a48:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a4a:	e020      	b.n	8005a8e <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 8005a4c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a4e:	f043 0304 	orr.w	r3, r3, #4
 8005a52:	657b      	str	r3, [r7, #84]	; 0x54
 8005a54:	683b      	ldr	r3, [r7, #0]
 8005a56:	3301      	adds	r3, #1
 8005a58:	603b      	str	r3, [r7, #0]
 8005a5a:	2301      	movs	r3, #1
 8005a5c:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a5e:	e016      	b.n	8005a8e <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8005a60:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a62:	f043 0308 	orr.w	r3, r3, #8
 8005a66:	657b      	str	r3, [r7, #84]	; 0x54
 8005a68:	683b      	ldr	r3, [r7, #0]
 8005a6a:	3301      	adds	r3, #1
 8005a6c:	603b      	str	r3, [r7, #0]
 8005a6e:	2301      	movs	r3, #1
 8005a70:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a72:	e00c      	b.n	8005a8e <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8005a74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005a76:	f043 0310 	orr.w	r3, r3, #16
 8005a7a:	657b      	str	r3, [r7, #84]	; 0x54
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	3301      	adds	r3, #1
 8005a80:	603b      	str	r3, [r7, #0]
 8005a82:	2301      	movs	r3, #1
 8005a84:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a86:	e002      	b.n	8005a8e <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 8005a88:	2300      	movs	r3, #0
 8005a8a:	64bb      	str	r3, [r7, #72]	; 0x48
 8005a8c:	bf00      	nop
      }
    } while (n);
 8005a8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005a90:	2b00      	cmp	r3, #0
 8005a92:	d19d      	bne.n	80059d0 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 8005a94:	2300      	movs	r3, #0
 8005a96:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 8005a98:	683b      	ldr	r3, [r7, #0]
 8005a9a:	781b      	ldrb	r3, [r3, #0]
 8005a9c:	4618      	mov	r0, r3
 8005a9e:	f7ff f82e 	bl	8004afe <_is_digit>
 8005aa2:	4603      	mov	r3, r0
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d005      	beq.n	8005ab4 <_vsnprintf+0x134>
      width = _atoi(&format);
 8005aa8:	463b      	mov	r3, r7
 8005aaa:	4618      	mov	r0, r3
 8005aac:	f7ff f83e 	bl	8004b2c <_atoi>
 8005ab0:	6538      	str	r0, [r7, #80]	; 0x50
 8005ab2:	e018      	b.n	8005ae6 <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 8005ab4:	683b      	ldr	r3, [r7, #0]
 8005ab6:	781b      	ldrb	r3, [r3, #0]
 8005ab8:	2b2a      	cmp	r3, #42	; 0x2a
 8005aba:	d114      	bne.n	8005ae6 <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 8005abc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005abe:	1d1a      	adds	r2, r3, #4
 8005ac0:	66ba      	str	r2, [r7, #104]	; 0x68
 8005ac2:	681b      	ldr	r3, [r3, #0]
 8005ac4:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 8005ac6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	da07      	bge.n	8005adc <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 8005acc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ace:	f043 0302 	orr.w	r3, r3, #2
 8005ad2:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 8005ad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ad6:	425b      	negs	r3, r3
 8005ad8:	653b      	str	r3, [r7, #80]	; 0x50
 8005ada:	e001      	b.n	8005ae0 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 8005adc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005ade:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 8005ae0:	683b      	ldr	r3, [r7, #0]
 8005ae2:	3301      	adds	r3, #1
 8005ae4:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 8005ae6:	2300      	movs	r3, #0
 8005ae8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 8005aea:	683b      	ldr	r3, [r7, #0]
 8005aec:	781b      	ldrb	r3, [r3, #0]
 8005aee:	2b2e      	cmp	r3, #46	; 0x2e
 8005af0:	d124      	bne.n	8005b3c <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 8005af2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005af4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8005af8:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 8005afa:	683b      	ldr	r3, [r7, #0]
 8005afc:	3301      	adds	r3, #1
 8005afe:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 8005b00:	683b      	ldr	r3, [r7, #0]
 8005b02:	781b      	ldrb	r3, [r3, #0]
 8005b04:	4618      	mov	r0, r3
 8005b06:	f7fe fffa 	bl	8004afe <_is_digit>
 8005b0a:	4603      	mov	r3, r0
 8005b0c:	2b00      	cmp	r3, #0
 8005b0e:	d005      	beq.n	8005b1c <_vsnprintf+0x19c>
        precision = _atoi(&format);
 8005b10:	463b      	mov	r3, r7
 8005b12:	4618      	mov	r0, r3
 8005b14:	f7ff f80a 	bl	8004b2c <_atoi>
 8005b18:	64f8      	str	r0, [r7, #76]	; 0x4c
 8005b1a:	e00f      	b.n	8005b3c <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 8005b1c:	683b      	ldr	r3, [r7, #0]
 8005b1e:	781b      	ldrb	r3, [r3, #0]
 8005b20:	2b2a      	cmp	r3, #42	; 0x2a
 8005b22:	d10b      	bne.n	8005b3c <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 8005b24:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005b26:	1d1a      	adds	r2, r3, #4
 8005b28:	66ba      	str	r2, [r7, #104]	; 0x68
 8005b2a:	681b      	ldr	r3, [r3, #0]
 8005b2c:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 8005b2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005b30:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8005b34:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 8005b36:	683b      	ldr	r3, [r7, #0]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 8005b3c:	683b      	ldr	r3, [r7, #0]
 8005b3e:	781b      	ldrb	r3, [r3, #0]
 8005b40:	3b68      	subs	r3, #104	; 0x68
 8005b42:	2b12      	cmp	r3, #18
 8005b44:	d866      	bhi.n	8005c14 <_vsnprintf+0x294>
 8005b46:	a201      	add	r2, pc, #4	; (adr r2, 8005b4c <_vsnprintf+0x1cc>)
 8005b48:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005b4c:	08005bbf 	.word	0x08005bbf
 8005b50:	08005c15 	.word	0x08005c15
 8005b54:	08005bf5 	.word	0x08005bf5
 8005b58:	08005c15 	.word	0x08005c15
 8005b5c:	08005b99 	.word	0x08005b99
 8005b60:	08005c15 	.word	0x08005c15
 8005b64:	08005c15 	.word	0x08005c15
 8005b68:	08005c15 	.word	0x08005c15
 8005b6c:	08005c15 	.word	0x08005c15
 8005b70:	08005c15 	.word	0x08005c15
 8005b74:	08005c15 	.word	0x08005c15
 8005b78:	08005c15 	.word	0x08005c15
 8005b7c:	08005be5 	.word	0x08005be5
 8005b80:	08005c15 	.word	0x08005c15
 8005b84:	08005c15 	.word	0x08005c15
 8005b88:	08005c15 	.word	0x08005c15
 8005b8c:	08005c15 	.word	0x08005c15
 8005b90:	08005c15 	.word	0x08005c15
 8005b94:	08005c05 	.word	0x08005c05
      case 'l' :
        flags |= FLAGS_LONG;
 8005b98:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b9a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005b9e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8005ba0:	683b      	ldr	r3, [r7, #0]
 8005ba2:	3301      	adds	r3, #1
 8005ba4:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 8005ba6:	683b      	ldr	r3, [r7, #0]
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	2b6c      	cmp	r3, #108	; 0x6c
 8005bac:	d134      	bne.n	8005c18 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 8005bae:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bb0:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bb4:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8005bb6:	683b      	ldr	r3, [r7, #0]
 8005bb8:	3301      	adds	r3, #1
 8005bba:	603b      	str	r3, [r7, #0]
        }
        break;
 8005bbc:	e02c      	b.n	8005c18 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 8005bbe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bc0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005bc4:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	3301      	adds	r3, #1
 8005bca:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 8005bcc:	683b      	ldr	r3, [r7, #0]
 8005bce:	781b      	ldrb	r3, [r3, #0]
 8005bd0:	2b68      	cmp	r3, #104	; 0x68
 8005bd2:	d125      	bne.n	8005c20 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 8005bd4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bd6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8005bda:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8005bdc:	683b      	ldr	r3, [r7, #0]
 8005bde:	3301      	adds	r3, #1
 8005be0:	603b      	str	r3, [r7, #0]
        }
        break;
 8005be2:	e01d      	b.n	8005c20 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8005be4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005be6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005bea:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8005bec:	683b      	ldr	r3, [r7, #0]
 8005bee:	3301      	adds	r3, #1
 8005bf0:	603b      	str	r3, [r7, #0]
        break;
 8005bf2:	e016      	b.n	8005c22 <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8005bf4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bf6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005bfa:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8005bfc:	683b      	ldr	r3, [r7, #0]
 8005bfe:	3301      	adds	r3, #1
 8005c00:	603b      	str	r3, [r7, #0]
        break;
 8005c02:	e00e      	b.n	8005c22 <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 8005c04:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c06:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005c0a:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8005c0c:	683b      	ldr	r3, [r7, #0]
 8005c0e:	3301      	adds	r3, #1
 8005c10:	603b      	str	r3, [r7, #0]
        break;
 8005c12:	e006      	b.n	8005c22 <_vsnprintf+0x2a2>
      default :
        break;
 8005c14:	bf00      	nop
 8005c16:	e004      	b.n	8005c22 <_vsnprintf+0x2a2>
        break;
 8005c18:	bf00      	nop
 8005c1a:	e002      	b.n	8005c22 <_vsnprintf+0x2a2>
 8005c1c:	08004aa9 	.word	0x08004aa9
        break;
 8005c20:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 8005c22:	683b      	ldr	r3, [r7, #0]
 8005c24:	781b      	ldrb	r3, [r3, #0]
 8005c26:	3b25      	subs	r3, #37	; 0x25
 8005c28:	2b53      	cmp	r3, #83	; 0x53
 8005c2a:	f200 833b 	bhi.w	80062a4 <_vsnprintf+0x924>
 8005c2e:	a201      	add	r2, pc, #4	; (adr r2, 8005c34 <_vsnprintf+0x2b4>)
 8005c30:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c34:	0800628d 	.word	0x0800628d
 8005c38:	080062a5 	.word	0x080062a5
 8005c3c:	080062a5 	.word	0x080062a5
 8005c40:	080062a5 	.word	0x080062a5
 8005c44:	080062a5 	.word	0x080062a5
 8005c48:	080062a5 	.word	0x080062a5
 8005c4c:	080062a5 	.word	0x080062a5
 8005c50:	080062a5 	.word	0x080062a5
 8005c54:	080062a5 	.word	0x080062a5
 8005c58:	080062a5 	.word	0x080062a5
 8005c5c:	080062a5 	.word	0x080062a5
 8005c60:	080062a5 	.word	0x080062a5
 8005c64:	080062a5 	.word	0x080062a5
 8005c68:	080062a5 	.word	0x080062a5
 8005c6c:	080062a5 	.word	0x080062a5
 8005c70:	080062a5 	.word	0x080062a5
 8005c74:	080062a5 	.word	0x080062a5
 8005c78:	080062a5 	.word	0x080062a5
 8005c7c:	080062a5 	.word	0x080062a5
 8005c80:	080062a5 	.word	0x080062a5
 8005c84:	080062a5 	.word	0x080062a5
 8005c88:	080062a5 	.word	0x080062a5
 8005c8c:	080062a5 	.word	0x080062a5
 8005c90:	080062a5 	.word	0x080062a5
 8005c94:	080062a5 	.word	0x080062a5
 8005c98:	080062a5 	.word	0x080062a5
 8005c9c:	080062a5 	.word	0x080062a5
 8005ca0:	080062a5 	.word	0x080062a5
 8005ca4:	080062a5 	.word	0x080062a5
 8005ca8:	080062a5 	.word	0x080062a5
 8005cac:	080062a5 	.word	0x080062a5
 8005cb0:	080062a5 	.word	0x080062a5
 8005cb4:	0800605d 	.word	0x0800605d
 8005cb8:	08006011 	.word	0x08006011
 8005cbc:	0800605d 	.word	0x0800605d
 8005cc0:	080062a5 	.word	0x080062a5
 8005cc4:	080062a5 	.word	0x080062a5
 8005cc8:	080062a5 	.word	0x080062a5
 8005ccc:	080062a5 	.word	0x080062a5
 8005cd0:	080062a5 	.word	0x080062a5
 8005cd4:	080062a5 	.word	0x080062a5
 8005cd8:	080062a5 	.word	0x080062a5
 8005cdc:	080062a5 	.word	0x080062a5
 8005ce0:	080062a5 	.word	0x080062a5
 8005ce4:	080062a5 	.word	0x080062a5
 8005ce8:	080062a5 	.word	0x080062a5
 8005cec:	080062a5 	.word	0x080062a5
 8005cf0:	080062a5 	.word	0x080062a5
 8005cf4:	080062a5 	.word	0x080062a5
 8005cf8:	080062a5 	.word	0x080062a5
 8005cfc:	080062a5 	.word	0x080062a5
 8005d00:	08005d85 	.word	0x08005d85
 8005d04:	080062a5 	.word	0x080062a5
 8005d08:	080062a5 	.word	0x080062a5
 8005d0c:	080062a5 	.word	0x080062a5
 8005d10:	080062a5 	.word	0x080062a5
 8005d14:	080062a5 	.word	0x080062a5
 8005d18:	080062a5 	.word	0x080062a5
 8005d1c:	080062a5 	.word	0x080062a5
 8005d20:	080062a5 	.word	0x080062a5
 8005d24:	080062a5 	.word	0x080062a5
 8005d28:	08005d85 	.word	0x08005d85
 8005d2c:	080060c9 	.word	0x080060c9
 8005d30:	08005d85 	.word	0x08005d85
 8005d34:	0800605d 	.word	0x0800605d
 8005d38:	08006011 	.word	0x08006011
 8005d3c:	0800605d 	.word	0x0800605d
 8005d40:	080062a5 	.word	0x080062a5
 8005d44:	08005d85 	.word	0x08005d85
 8005d48:	080062a5 	.word	0x080062a5
 8005d4c:	080062a5 	.word	0x080062a5
 8005d50:	080062a5 	.word	0x080062a5
 8005d54:	080062a5 	.word	0x080062a5
 8005d58:	080062a5 	.word	0x080062a5
 8005d5c:	08005d85 	.word	0x08005d85
 8005d60:	08006201 	.word	0x08006201
 8005d64:	080062a5 	.word	0x080062a5
 8005d68:	080062a5 	.word	0x080062a5
 8005d6c:	0800613d 	.word	0x0800613d
 8005d70:	080062a5 	.word	0x080062a5
 8005d74:	08005d85 	.word	0x08005d85
 8005d78:	080062a5 	.word	0x080062a5
 8005d7c:	080062a5 	.word	0x080062a5
 8005d80:	08005d85 	.word	0x08005d85
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8005d84:	683b      	ldr	r3, [r7, #0]
 8005d86:	781b      	ldrb	r3, [r3, #0]
 8005d88:	2b78      	cmp	r3, #120	; 0x78
 8005d8a:	d003      	beq.n	8005d94 <_vsnprintf+0x414>
 8005d8c:	683b      	ldr	r3, [r7, #0]
 8005d8e:	781b      	ldrb	r3, [r3, #0]
 8005d90:	2b58      	cmp	r3, #88	; 0x58
 8005d92:	d102      	bne.n	8005d9a <_vsnprintf+0x41a>
          base = 16U;
 8005d94:	2310      	movs	r3, #16
 8005d96:	643b      	str	r3, [r7, #64]	; 0x40
 8005d98:	e013      	b.n	8005dc2 <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 8005d9a:	683b      	ldr	r3, [r7, #0]
 8005d9c:	781b      	ldrb	r3, [r3, #0]
 8005d9e:	2b6f      	cmp	r3, #111	; 0x6f
 8005da0:	d102      	bne.n	8005da8 <_vsnprintf+0x428>
          base =  8U;
 8005da2:	2308      	movs	r3, #8
 8005da4:	643b      	str	r3, [r7, #64]	; 0x40
 8005da6:	e00c      	b.n	8005dc2 <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8005da8:	683b      	ldr	r3, [r7, #0]
 8005daa:	781b      	ldrb	r3, [r3, #0]
 8005dac:	2b62      	cmp	r3, #98	; 0x62
 8005dae:	d102      	bne.n	8005db6 <_vsnprintf+0x436>
          base =  2U;
 8005db0:	2302      	movs	r3, #2
 8005db2:	643b      	str	r3, [r7, #64]	; 0x40
 8005db4:	e005      	b.n	8005dc2 <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 8005db6:	230a      	movs	r3, #10
 8005db8:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8005dba:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dbc:	f023 0310 	bic.w	r3, r3, #16
 8005dc0:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 8005dc2:	683b      	ldr	r3, [r7, #0]
 8005dc4:	781b      	ldrb	r3, [r3, #0]
 8005dc6:	2b58      	cmp	r3, #88	; 0x58
 8005dc8:	d103      	bne.n	8005dd2 <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 8005dca:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dcc:	f043 0320 	orr.w	r3, r3, #32
 8005dd0:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8005dd2:	683b      	ldr	r3, [r7, #0]
 8005dd4:	781b      	ldrb	r3, [r3, #0]
 8005dd6:	2b69      	cmp	r3, #105	; 0x69
 8005dd8:	d007      	beq.n	8005dea <_vsnprintf+0x46a>
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	781b      	ldrb	r3, [r3, #0]
 8005dde:	2b64      	cmp	r3, #100	; 0x64
 8005de0:	d003      	beq.n	8005dea <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8005de2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005de4:	f023 030c 	bic.w	r3, r3, #12
 8005de8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8005dea:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dec:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005df0:	2b00      	cmp	r3, #0
 8005df2:	d003      	beq.n	8005dfc <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 8005df4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005df6:	f023 0301 	bic.w	r3, r3, #1
 8005dfa:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8005dfc:	683b      	ldr	r3, [r7, #0]
 8005dfe:	781b      	ldrb	r3, [r3, #0]
 8005e00:	2b69      	cmp	r3, #105	; 0x69
 8005e02:	d004      	beq.n	8005e0e <_vsnprintf+0x48e>
 8005e04:	683b      	ldr	r3, [r7, #0]
 8005e06:	781b      	ldrb	r3, [r3, #0]
 8005e08:	2b64      	cmp	r3, #100	; 0x64
 8005e0a:	f040 808d 	bne.w	8005f28 <_vsnprintf+0x5a8>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8005e0e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e10:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005e14:	2b00      	cmp	r3, #0
 8005e16:	d02e      	beq.n	8005e76 <_vsnprintf+0x4f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8005e18:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e1a:	3307      	adds	r3, #7
 8005e1c:	f023 0307 	bic.w	r3, r3, #7
 8005e20:	f103 0208 	add.w	r2, r3, #8
 8005e24:	66ba      	str	r2, [r7, #104]	; 0x68
 8005e26:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005e2a:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8005e2e:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005e32:	2b00      	cmp	r3, #0
 8005e34:	f174 0200 	sbcs.w	r2, r4, #0
 8005e38:	da02      	bge.n	8005e40 <_vsnprintf+0x4c0>
 8005e3a:	425b      	negs	r3, r3
 8005e3c:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 8005e40:	4619      	mov	r1, r3
 8005e42:	4622      	mov	r2, r4
 8005e44:	697b      	ldr	r3, [r7, #20]
 8005e46:	0fdb      	lsrs	r3, r3, #31
 8005e48:	b2d8      	uxtb	r0, r3
 8005e4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005e4c:	f04f 0400 	mov.w	r4, #0
 8005e50:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8005e52:	9508      	str	r5, [sp, #32]
 8005e54:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8005e56:	9507      	str	r5, [sp, #28]
 8005e58:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8005e5a:	9506      	str	r5, [sp, #24]
 8005e5c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005e60:	9002      	str	r0, [sp, #8]
 8005e62:	e9cd 1200 	strd	r1, r2, [sp]
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e6a:	68b9      	ldr	r1, [r7, #8]
 8005e6c:	68f8      	ldr	r0, [r7, #12]
 8005e6e:	f7ff f814 	bl	8004e9a <_ntoa_long_long>
 8005e72:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8005e74:	e0c8      	b.n	8006008 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8005e76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e78:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005e7c:	2b00      	cmp	r3, #0
 8005e7e:	d01e      	beq.n	8005ebe <_vsnprintf+0x53e>
            const long value = va_arg(va, long);
 8005e80:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e82:	1d1a      	adds	r2, r3, #4
 8005e84:	66ba      	str	r2, [r7, #104]	; 0x68
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8005e8a:	69fb      	ldr	r3, [r7, #28]
 8005e8c:	2b00      	cmp	r3, #0
 8005e8e:	bfb8      	it	lt
 8005e90:	425b      	neglt	r3, r3
 8005e92:	4619      	mov	r1, r3
 8005e94:	69fb      	ldr	r3, [r7, #28]
 8005e96:	0fdb      	lsrs	r3, r3, #31
 8005e98:	b2db      	uxtb	r3, r3
 8005e9a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005e9c:	9205      	str	r2, [sp, #20]
 8005e9e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ea0:	9204      	str	r2, [sp, #16]
 8005ea2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ea4:	9203      	str	r2, [sp, #12]
 8005ea6:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005ea8:	9202      	str	r2, [sp, #8]
 8005eaa:	9301      	str	r3, [sp, #4]
 8005eac:	9100      	str	r1, [sp, #0]
 8005eae:	687b      	ldr	r3, [r7, #4]
 8005eb0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005eb2:	68b9      	ldr	r1, [r7, #8]
 8005eb4:	68f8      	ldr	r0, [r7, #12]
 8005eb6:	f7fe ff89 	bl	8004dcc <_ntoa_long>
 8005eba:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8005ebc:	e0a4      	b.n	8006008 <_vsnprintf+0x688>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8005ebe:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ec0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d005      	beq.n	8005ed4 <_vsnprintf+0x554>
 8005ec8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005eca:	1d1a      	adds	r2, r3, #4
 8005ecc:	66ba      	str	r2, [r7, #104]	; 0x68
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	b2db      	uxtb	r3, r3
 8005ed2:	e00e      	b.n	8005ef2 <_vsnprintf+0x572>
 8005ed4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ed6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005eda:	2b00      	cmp	r3, #0
 8005edc:	d005      	beq.n	8005eea <_vsnprintf+0x56a>
 8005ede:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ee0:	1d1a      	adds	r2, r3, #4
 8005ee2:	66ba      	str	r2, [r7, #104]	; 0x68
 8005ee4:	681b      	ldr	r3, [r3, #0]
 8005ee6:	b21b      	sxth	r3, r3
 8005ee8:	e003      	b.n	8005ef2 <_vsnprintf+0x572>
 8005eea:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005eec:	1d1a      	adds	r2, r3, #4
 8005eee:	66ba      	str	r2, [r7, #104]	; 0x68
 8005ef0:	681b      	ldr	r3, [r3, #0]
 8005ef2:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8005ef4:	6a3b      	ldr	r3, [r7, #32]
 8005ef6:	2b00      	cmp	r3, #0
 8005ef8:	bfb8      	it	lt
 8005efa:	425b      	neglt	r3, r3
 8005efc:	4619      	mov	r1, r3
 8005efe:	6a3b      	ldr	r3, [r7, #32]
 8005f00:	0fdb      	lsrs	r3, r3, #31
 8005f02:	b2db      	uxtb	r3, r3
 8005f04:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f06:	9205      	str	r2, [sp, #20]
 8005f08:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f0a:	9204      	str	r2, [sp, #16]
 8005f0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f0e:	9203      	str	r2, [sp, #12]
 8005f10:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f12:	9202      	str	r2, [sp, #8]
 8005f14:	9301      	str	r3, [sp, #4]
 8005f16:	9100      	str	r1, [sp, #0]
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f1c:	68b9      	ldr	r1, [r7, #8]
 8005f1e:	68f8      	ldr	r0, [r7, #12]
 8005f20:	f7fe ff54 	bl	8004dcc <_ntoa_long>
 8005f24:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8005f26:	e06f      	b.n	8006008 <_vsnprintf+0x688>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8005f28:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f2a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	d020      	beq.n	8005f74 <_vsnprintf+0x5f4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8005f32:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f34:	3307      	adds	r3, #7
 8005f36:	f023 0307 	bic.w	r3, r3, #7
 8005f3a:	f103 0208 	add.w	r2, r3, #8
 8005f3e:	66ba      	str	r2, [r7, #104]	; 0x68
 8005f40:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005f44:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f46:	4611      	mov	r1, r2
 8005f48:	f04f 0200 	mov.w	r2, #0
 8005f4c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005f4e:	9008      	str	r0, [sp, #32]
 8005f50:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005f52:	9007      	str	r0, [sp, #28]
 8005f54:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005f56:	9006      	str	r0, [sp, #24]
 8005f58:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8005f5c:	2200      	movs	r2, #0
 8005f5e:	9202      	str	r2, [sp, #8]
 8005f60:	e9cd 3400 	strd	r3, r4, [sp]
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f68:	68b9      	ldr	r1, [r7, #8]
 8005f6a:	68f8      	ldr	r0, [r7, #12]
 8005f6c:	f7fe ff95 	bl	8004e9a <_ntoa_long_long>
 8005f70:	6478      	str	r0, [r7, #68]	; 0x44
 8005f72:	e049      	b.n	8006008 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8005f74:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d016      	beq.n	8005fac <_vsnprintf+0x62c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8005f7e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005f80:	1d1a      	adds	r2, r3, #4
 8005f82:	66ba      	str	r2, [r7, #104]	; 0x68
 8005f84:	681b      	ldr	r3, [r3, #0]
 8005f86:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005f88:	9205      	str	r2, [sp, #20]
 8005f8a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f8c:	9204      	str	r2, [sp, #16]
 8005f8e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005f90:	9203      	str	r2, [sp, #12]
 8005f92:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005f94:	9202      	str	r2, [sp, #8]
 8005f96:	2200      	movs	r2, #0
 8005f98:	9201      	str	r2, [sp, #4]
 8005f9a:	9300      	str	r3, [sp, #0]
 8005f9c:	687b      	ldr	r3, [r7, #4]
 8005f9e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005fa0:	68b9      	ldr	r1, [r7, #8]
 8005fa2:	68f8      	ldr	r0, [r7, #12]
 8005fa4:	f7fe ff12 	bl	8004dcc <_ntoa_long>
 8005fa8:	6478      	str	r0, [r7, #68]	; 0x44
 8005faa:	e02d      	b.n	8006008 <_vsnprintf+0x688>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8005fac:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d005      	beq.n	8005fc2 <_vsnprintf+0x642>
 8005fb6:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fb8:	1d1a      	adds	r2, r3, #4
 8005fba:	66ba      	str	r2, [r7, #104]	; 0x68
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	b2db      	uxtb	r3, r3
 8005fc0:	e00e      	b.n	8005fe0 <_vsnprintf+0x660>
 8005fc2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005fc8:	2b00      	cmp	r3, #0
 8005fca:	d005      	beq.n	8005fd8 <_vsnprintf+0x658>
 8005fcc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fce:	1d1a      	adds	r2, r3, #4
 8005fd0:	66ba      	str	r2, [r7, #104]	; 0x68
 8005fd2:	681b      	ldr	r3, [r3, #0]
 8005fd4:	b29b      	uxth	r3, r3
 8005fd6:	e003      	b.n	8005fe0 <_vsnprintf+0x660>
 8005fd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fda:	1d1a      	adds	r2, r3, #4
 8005fdc:	66ba      	str	r2, [r7, #104]	; 0x68
 8005fde:	681b      	ldr	r3, [r3, #0]
 8005fe0:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8005fe2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fe4:	9305      	str	r3, [sp, #20]
 8005fe6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005fe8:	9304      	str	r3, [sp, #16]
 8005fea:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005fec:	9303      	str	r3, [sp, #12]
 8005fee:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005ff0:	9302      	str	r3, [sp, #8]
 8005ff2:	2300      	movs	r3, #0
 8005ff4:	9301      	str	r3, [sp, #4]
 8005ff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005ff8:	9300      	str	r3, [sp, #0]
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ffe:	68b9      	ldr	r1, [r7, #8]
 8006000:	68f8      	ldr	r0, [r7, #12]
 8006002:	f7fe fee3 	bl	8004dcc <_ntoa_long>
 8006006:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	3301      	adds	r3, #1
 800600c:	603b      	str	r3, [r7, #0]
        break;
 800600e:	e156      	b.n	80062be <_vsnprintf+0x93e>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8006010:	683b      	ldr	r3, [r7, #0]
 8006012:	781b      	ldrb	r3, [r3, #0]
 8006014:	2b46      	cmp	r3, #70	; 0x46
 8006016:	d103      	bne.n	8006020 <_vsnprintf+0x6a0>
 8006018:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800601a:	f043 0320 	orr.w	r3, r3, #32
 800601e:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8006020:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006022:	3307      	adds	r3, #7
 8006024:	f023 0307 	bic.w	r3, r3, #7
 8006028:	f103 0208 	add.w	r2, r3, #8
 800602c:	66ba      	str	r2, [r7, #104]	; 0x68
 800602e:	ed93 7b00 	vldr	d7, [r3]
 8006032:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006034:	9302      	str	r3, [sp, #8]
 8006036:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006038:	9301      	str	r3, [sp, #4]
 800603a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800603c:	9300      	str	r3, [sp, #0]
 800603e:	eeb0 0a47 	vmov.f32	s0, s14
 8006042:	eef0 0a67 	vmov.f32	s1, s15
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800604a:	68b9      	ldr	r1, [r7, #8]
 800604c:	68f8      	ldr	r0, [r7, #12]
 800604e:	f7fe ff93 	bl	8004f78 <_ftoa>
 8006052:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8006054:	683b      	ldr	r3, [r7, #0]
 8006056:	3301      	adds	r3, #1
 8006058:	603b      	str	r3, [r7, #0]
        break;
 800605a:	e130      	b.n	80062be <_vsnprintf+0x93e>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	781b      	ldrb	r3, [r3, #0]
 8006060:	2b67      	cmp	r3, #103	; 0x67
 8006062:	d003      	beq.n	800606c <_vsnprintf+0x6ec>
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	781b      	ldrb	r3, [r3, #0]
 8006068:	2b47      	cmp	r3, #71	; 0x47
 800606a:	d103      	bne.n	8006074 <_vsnprintf+0x6f4>
 800606c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800606e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006072:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8006074:	683b      	ldr	r3, [r7, #0]
 8006076:	781b      	ldrb	r3, [r3, #0]
 8006078:	2b45      	cmp	r3, #69	; 0x45
 800607a:	d003      	beq.n	8006084 <_vsnprintf+0x704>
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	781b      	ldrb	r3, [r3, #0]
 8006080:	2b47      	cmp	r3, #71	; 0x47
 8006082:	d103      	bne.n	800608c <_vsnprintf+0x70c>
 8006084:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006086:	f043 0320 	orr.w	r3, r3, #32
 800608a:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 800608c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800608e:	3307      	adds	r3, #7
 8006090:	f023 0307 	bic.w	r3, r3, #7
 8006094:	f103 0208 	add.w	r2, r3, #8
 8006098:	66ba      	str	r2, [r7, #104]	; 0x68
 800609a:	ed93 7b00 	vldr	d7, [r3]
 800609e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060a0:	9302      	str	r3, [sp, #8]
 80060a2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80060a4:	9301      	str	r3, [sp, #4]
 80060a6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80060a8:	9300      	str	r3, [sp, #0]
 80060aa:	eeb0 0a47 	vmov.f32	s0, s14
 80060ae:	eef0 0a67 	vmov.f32	s1, s15
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060b6:	68b9      	ldr	r1, [r7, #8]
 80060b8:	68f8      	ldr	r0, [r7, #12]
 80060ba:	f7ff f9c9 	bl	8005450 <_etoa>
 80060be:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	3301      	adds	r3, #1
 80060c4:	603b      	str	r3, [r7, #0]
        break;
 80060c6:	e0fa      	b.n	80062be <_vsnprintf+0x93e>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 80060c8:	2301      	movs	r3, #1
 80060ca:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 80060cc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80060ce:	f003 0302 	and.w	r3, r3, #2
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d10e      	bne.n	80060f4 <_vsnprintf+0x774>
          while (l++ < width) {
 80060d6:	e007      	b.n	80060e8 <_vsnprintf+0x768>
            out(' ', buffer, idx++, maxlen);
 80060d8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80060da:	1c53      	adds	r3, r2, #1
 80060dc:	647b      	str	r3, [r7, #68]	; 0x44
 80060de:	68fc      	ldr	r4, [r7, #12]
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	68b9      	ldr	r1, [r7, #8]
 80060e4:	2020      	movs	r0, #32
 80060e6:	47a0      	blx	r4
          while (l++ < width) {
 80060e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060ea:	1c5a      	adds	r2, r3, #1
 80060ec:	63fa      	str	r2, [r7, #60]	; 0x3c
 80060ee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d8f1      	bhi.n	80060d8 <_vsnprintf+0x758>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 80060f4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80060f6:	1d1a      	adds	r2, r3, #4
 80060f8:	66ba      	str	r2, [r7, #104]	; 0x68
 80060fa:	681b      	ldr	r3, [r3, #0]
 80060fc:	b2d8      	uxtb	r0, r3
 80060fe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006100:	1c53      	adds	r3, r2, #1
 8006102:	647b      	str	r3, [r7, #68]	; 0x44
 8006104:	68fc      	ldr	r4, [r7, #12]
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	68b9      	ldr	r1, [r7, #8]
 800610a:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 800610c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800610e:	f003 0302 	and.w	r3, r3, #2
 8006112:	2b00      	cmp	r3, #0
 8006114:	d00e      	beq.n	8006134 <_vsnprintf+0x7b4>
          while (l++ < width) {
 8006116:	e007      	b.n	8006128 <_vsnprintf+0x7a8>
            out(' ', buffer, idx++, maxlen);
 8006118:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800611a:	1c53      	adds	r3, r2, #1
 800611c:	647b      	str	r3, [r7, #68]	; 0x44
 800611e:	68fc      	ldr	r4, [r7, #12]
 8006120:	687b      	ldr	r3, [r7, #4]
 8006122:	68b9      	ldr	r1, [r7, #8]
 8006124:	2020      	movs	r0, #32
 8006126:	47a0      	blx	r4
          while (l++ < width) {
 8006128:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800612a:	1c5a      	adds	r2, r3, #1
 800612c:	63fa      	str	r2, [r7, #60]	; 0x3c
 800612e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006130:	429a      	cmp	r2, r3
 8006132:	d8f1      	bhi.n	8006118 <_vsnprintf+0x798>
          }
        }
        format++;
 8006134:	683b      	ldr	r3, [r7, #0]
 8006136:	3301      	adds	r3, #1
 8006138:	603b      	str	r3, [r7, #0]
        break;
 800613a:	e0c0      	b.n	80062be <_vsnprintf+0x93e>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 800613c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800613e:	1d1a      	adds	r2, r3, #4
 8006140:	66ba      	str	r2, [r7, #104]	; 0x68
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8006146:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006148:	2b00      	cmp	r3, #0
 800614a:	d001      	beq.n	8006150 <_vsnprintf+0x7d0>
 800614c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800614e:	e001      	b.n	8006154 <_vsnprintf+0x7d4>
 8006150:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8006154:	4619      	mov	r1, r3
 8006156:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006158:	f7fe fcb4 	bl	8004ac4 <_strnlen_s>
 800615c:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 800615e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006160:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006164:	2b00      	cmp	r3, #0
 8006166:	d005      	beq.n	8006174 <_vsnprintf+0x7f4>
          l = (l < precision ? l : precision);
 8006168:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800616a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800616c:	4293      	cmp	r3, r2
 800616e:	bf28      	it	cs
 8006170:	4613      	movcs	r3, r2
 8006172:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8006174:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006176:	f003 0302 	and.w	r3, r3, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	d11a      	bne.n	80061b4 <_vsnprintf+0x834>
          while (l++ < width) {
 800617e:	e007      	b.n	8006190 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8006180:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006182:	1c53      	adds	r3, r2, #1
 8006184:	647b      	str	r3, [r7, #68]	; 0x44
 8006186:	68fc      	ldr	r4, [r7, #12]
 8006188:	687b      	ldr	r3, [r7, #4]
 800618a:	68b9      	ldr	r1, [r7, #8]
 800618c:	2020      	movs	r0, #32
 800618e:	47a0      	blx	r4
          while (l++ < width) {
 8006190:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006192:	1c5a      	adds	r2, r3, #1
 8006194:	637a      	str	r2, [r7, #52]	; 0x34
 8006196:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8006198:	429a      	cmp	r2, r3
 800619a:	d8f1      	bhi.n	8006180 <_vsnprintf+0x800>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 800619c:	e00a      	b.n	80061b4 <_vsnprintf+0x834>
          out(*(p++), buffer, idx++, maxlen);
 800619e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061a0:	1c5a      	adds	r2, r3, #1
 80061a2:	63ba      	str	r2, [r7, #56]	; 0x38
 80061a4:	7818      	ldrb	r0, [r3, #0]
 80061a6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061a8:	1c53      	adds	r3, r2, #1
 80061aa:	647b      	str	r3, [r7, #68]	; 0x44
 80061ac:	68fc      	ldr	r4, [r7, #12]
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	68b9      	ldr	r1, [r7, #8]
 80061b2:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 80061b4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80061b6:	781b      	ldrb	r3, [r3, #0]
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d009      	beq.n	80061d0 <_vsnprintf+0x850>
 80061bc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061be:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80061c2:	2b00      	cmp	r3, #0
 80061c4:	d0eb      	beq.n	800619e <_vsnprintf+0x81e>
 80061c6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80061c8:	1e5a      	subs	r2, r3, #1
 80061ca:	64fa      	str	r2, [r7, #76]	; 0x4c
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d1e6      	bne.n	800619e <_vsnprintf+0x81e>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 80061d0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80061d2:	f003 0302 	and.w	r3, r3, #2
 80061d6:	2b00      	cmp	r3, #0
 80061d8:	d00e      	beq.n	80061f8 <_vsnprintf+0x878>
          while (l++ < width) {
 80061da:	e007      	b.n	80061ec <_vsnprintf+0x86c>
            out(' ', buffer, idx++, maxlen);
 80061dc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80061de:	1c53      	adds	r3, r2, #1
 80061e0:	647b      	str	r3, [r7, #68]	; 0x44
 80061e2:	68fc      	ldr	r4, [r7, #12]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	68b9      	ldr	r1, [r7, #8]
 80061e8:	2020      	movs	r0, #32
 80061ea:	47a0      	blx	r4
          while (l++ < width) {
 80061ec:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80061ee:	1c5a      	adds	r2, r3, #1
 80061f0:	637a      	str	r2, [r7, #52]	; 0x34
 80061f2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80061f4:	429a      	cmp	r2, r3
 80061f6:	d8f1      	bhi.n	80061dc <_vsnprintf+0x85c>
          }
        }
        format++;
 80061f8:	683b      	ldr	r3, [r7, #0]
 80061fa:	3301      	adds	r3, #1
 80061fc:	603b      	str	r3, [r7, #0]
        break;
 80061fe:	e05e      	b.n	80062be <_vsnprintf+0x93e>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8006200:	2308      	movs	r3, #8
 8006202:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8006204:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006206:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 800620a:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 800620c:	2300      	movs	r3, #0
 800620e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 8006212:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8006216:	2b00      	cmp	r3, #0
 8006218:	d01d      	beq.n	8006256 <_vsnprintf+0x8d6>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 800621a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800621c:	1d1a      	adds	r2, r3, #4
 800621e:	66ba      	str	r2, [r7, #104]	; 0x68
 8006220:	681b      	ldr	r3, [r3, #0]
 8006222:	f04f 0400 	mov.w	r4, #0
 8006226:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8006228:	9208      	str	r2, [sp, #32]
 800622a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800622c:	9207      	str	r2, [sp, #28]
 800622e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006230:	9206      	str	r2, [sp, #24]
 8006232:	f04f 0110 	mov.w	r1, #16
 8006236:	f04f 0200 	mov.w	r2, #0
 800623a:	e9cd 1204 	strd	r1, r2, [sp, #16]
 800623e:	2200      	movs	r2, #0
 8006240:	9202      	str	r2, [sp, #8]
 8006242:	e9cd 3400 	strd	r3, r4, [sp]
 8006246:	687b      	ldr	r3, [r7, #4]
 8006248:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800624a:	68b9      	ldr	r1, [r7, #8]
 800624c:	68f8      	ldr	r0, [r7, #12]
 800624e:	f7fe fe24 	bl	8004e9a <_ntoa_long_long>
 8006252:	6478      	str	r0, [r7, #68]	; 0x44
 8006254:	e016      	b.n	8006284 <_vsnprintf+0x904>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8006256:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006258:	1d1a      	adds	r2, r3, #4
 800625a:	66ba      	str	r2, [r7, #104]	; 0x68
 800625c:	681b      	ldr	r3, [r3, #0]
 800625e:	461a      	mov	r2, r3
 8006260:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006262:	9305      	str	r3, [sp, #20]
 8006264:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006266:	9304      	str	r3, [sp, #16]
 8006268:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800626a:	9303      	str	r3, [sp, #12]
 800626c:	2310      	movs	r3, #16
 800626e:	9302      	str	r3, [sp, #8]
 8006270:	2300      	movs	r3, #0
 8006272:	9301      	str	r3, [sp, #4]
 8006274:	9200      	str	r2, [sp, #0]
 8006276:	687b      	ldr	r3, [r7, #4]
 8006278:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800627a:	68b9      	ldr	r1, [r7, #8]
 800627c:	68f8      	ldr	r0, [r7, #12]
 800627e:	f7fe fda5 	bl	8004dcc <_ntoa_long>
 8006282:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8006284:	683b      	ldr	r3, [r7, #0]
 8006286:	3301      	adds	r3, #1
 8006288:	603b      	str	r3, [r7, #0]
        break;
 800628a:	e018      	b.n	80062be <_vsnprintf+0x93e>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800628c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800628e:	1c53      	adds	r3, r2, #1
 8006290:	647b      	str	r3, [r7, #68]	; 0x44
 8006292:	68fc      	ldr	r4, [r7, #12]
 8006294:	687b      	ldr	r3, [r7, #4]
 8006296:	68b9      	ldr	r1, [r7, #8]
 8006298:	2025      	movs	r0, #37	; 0x25
 800629a:	47a0      	blx	r4
        format++;
 800629c:	683b      	ldr	r3, [r7, #0]
 800629e:	3301      	adds	r3, #1
 80062a0:	603b      	str	r3, [r7, #0]
        break;
 80062a2:	e00c      	b.n	80062be <_vsnprintf+0x93e>

      default :
        out(*format, buffer, idx++, maxlen);
 80062a4:	683b      	ldr	r3, [r7, #0]
 80062a6:	7818      	ldrb	r0, [r3, #0]
 80062a8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062aa:	1c53      	adds	r3, r2, #1
 80062ac:	647b      	str	r3, [r7, #68]	; 0x44
 80062ae:	68fc      	ldr	r4, [r7, #12]
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68b9      	ldr	r1, [r7, #8]
 80062b4:	47a0      	blx	r4
        format++;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	3301      	adds	r3, #1
 80062ba:	603b      	str	r3, [r7, #0]
        break;
 80062bc:	bf00      	nop
  while (*format)
 80062be:	683b      	ldr	r3, [r7, #0]
 80062c0:	781b      	ldrb	r3, [r3, #0]
 80062c2:	2b00      	cmp	r3, #0
 80062c4:	f47f ab6d 	bne.w	80059a2 <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 80062c8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	429a      	cmp	r2, r3
 80062ce:	d302      	bcc.n	80062d6 <_vsnprintf+0x956>
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	1e5a      	subs	r2, r3, #1
 80062d4:	e000      	b.n	80062d8 <_vsnprintf+0x958>
 80062d6:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80062d8:	68fc      	ldr	r4, [r7, #12]
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	68b9      	ldr	r1, [r7, #8]
 80062de:	2000      	movs	r0, #0
 80062e0:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 80062e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80062e4:	4618      	mov	r0, r3
 80062e6:	3758      	adds	r7, #88	; 0x58
 80062e8:	46bd      	mov	sp, r7
 80062ea:	bdb0      	pop	{r4, r5, r7, pc}

080062ec <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 80062ec:	b40e      	push	{r1, r2, r3}
 80062ee:	b580      	push	{r7, lr}
 80062f0:	b087      	sub	sp, #28
 80062f2:	af02      	add	r7, sp, #8
 80062f4:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 80062f6:	f107 0320 	add.w	r3, r7, #32
 80062fa:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 80062fc:	68bb      	ldr	r3, [r7, #8]
 80062fe:	9300      	str	r3, [sp, #0]
 8006300:	69fb      	ldr	r3, [r7, #28]
 8006302:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8006306:	6879      	ldr	r1, [r7, #4]
 8006308:	4805      	ldr	r0, [pc, #20]	; (8006320 <sprintf_+0x34>)
 800630a:	f7ff fb39 	bl	8005980 <_vsnprintf>
 800630e:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 8006310:	68fb      	ldr	r3, [r7, #12]
}
 8006312:	4618      	mov	r0, r3
 8006314:	3714      	adds	r7, #20
 8006316:	46bd      	mov	sp, r7
 8006318:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 800631c:	b003      	add	sp, #12
 800631e:	4770      	bx	lr
 8006320:	08004a7b 	.word	0x08004a7b

08006324 <MAX31865_write>:
#include "MAX31865.h"

/*
 * Write to
 */
static void MAX31865_write(MAX31865_SPI* spi, uint8_t* address, uint8_t* data, uint16_t lenght) {
 8006324:	b580      	push	{r7, lr}
 8006326:	b084      	sub	sp, #16
 8006328:	af00      	add	r7, sp, #0
 800632a:	60f8      	str	r0, [r7, #12]
 800632c:	60b9      	str	r1, [r7, #8]
 800632e:	607a      	str	r2, [r7, #4]
 8006330:	807b      	strh	r3, [r7, #2]

	// Enable CE
	HAL_GPIO_WritePin(spi->CE_PORT, spi->CE_PIN, GPIO_PIN_RESET);
 8006332:	68fb      	ldr	r3, [r7, #12]
 8006334:	6818      	ldr	r0, [r3, #0]
 8006336:	68fb      	ldr	r3, [r7, #12]
 8006338:	889b      	ldrh	r3, [r3, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	4619      	mov	r1, r3
 800633e:	f002 facf 	bl	80088e0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi->hspi, address, 1, 10);
 8006342:	68fb      	ldr	r3, [r7, #12]
 8006344:	6898      	ldr	r0, [r3, #8]
 8006346:	230a      	movs	r3, #10
 8006348:	2201      	movs	r2, #1
 800634a:	68b9      	ldr	r1, [r7, #8]
 800634c:	f003 f88c 	bl	8009468 <HAL_SPI_Transmit>
	HAL_SPI_Transmit(spi->hspi, data, lenght, 10);
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	6898      	ldr	r0, [r3, #8]
 8006354:	887a      	ldrh	r2, [r7, #2]
 8006356:	230a      	movs	r3, #10
 8006358:	6879      	ldr	r1, [r7, #4]
 800635a:	f003 f885 	bl	8009468 <HAL_SPI_Transmit>
	// Disable CE
	HAL_GPIO_WritePin(spi->CE_PORT, spi->CE_PIN, GPIO_PIN_SET);
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	6818      	ldr	r0, [r3, #0]
 8006362:	68fb      	ldr	r3, [r7, #12]
 8006364:	889b      	ldrh	r3, [r3, #4]
 8006366:	2201      	movs	r2, #1
 8006368:	4619      	mov	r1, r3
 800636a:	f002 fab9 	bl	80088e0 <HAL_GPIO_WritePin>
}
 800636e:	bf00      	nop
 8006370:	3710      	adds	r7, #16
 8006372:	46bd      	mov	sp, r7
 8006374:	bd80      	pop	{r7, pc}

08006376 <MAX31865_read>:

/*
 * Read from
 */
static void MAX31865_read(MAX31865_SPI* spi, uint8_t* address, uint8_t* buffer, uint16_t lenght) {
 8006376:	b580      	push	{r7, lr}
 8006378:	b084      	sub	sp, #16
 800637a:	af00      	add	r7, sp, #0
 800637c:	60f8      	str	r0, [r7, #12]
 800637e:	60b9      	str	r1, [r7, #8]
 8006380:	607a      	str	r2, [r7, #4]
 8006382:	807b      	strh	r3, [r7, #2]

	// Enable CE
	HAL_GPIO_WritePin(spi->CE_PORT, spi->CE_PIN, GPIO_PIN_RESET);
 8006384:	68fb      	ldr	r3, [r7, #12]
 8006386:	6818      	ldr	r0, [r3, #0]
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	889b      	ldrh	r3, [r3, #4]
 800638c:	2200      	movs	r2, #0
 800638e:	4619      	mov	r1, r3
 8006390:	f002 faa6 	bl	80088e0 <HAL_GPIO_WritePin>
	HAL_SPI_Transmit(spi->hspi, address, 1, 10);
 8006394:	68fb      	ldr	r3, [r7, #12]
 8006396:	6898      	ldr	r0, [r3, #8]
 8006398:	230a      	movs	r3, #10
 800639a:	2201      	movs	r2, #1
 800639c:	68b9      	ldr	r1, [r7, #8]
 800639e:	f003 f863 	bl	8009468 <HAL_SPI_Transmit>
	HAL_SPI_Receive(spi->hspi, buffer, lenght, 10);
 80063a2:	68fb      	ldr	r3, [r7, #12]
 80063a4:	6898      	ldr	r0, [r3, #8]
 80063a6:	887a      	ldrh	r2, [r7, #2]
 80063a8:	230a      	movs	r3, #10
 80063aa:	6879      	ldr	r1, [r7, #4]
 80063ac:	f003 f990 	bl	80096d0 <HAL_SPI_Receive>
	// Disable CE
	HAL_GPIO_WritePin(spi->CE_PORT, spi->CE_PIN, GPIO_PIN_SET);
 80063b0:	68fb      	ldr	r3, [r7, #12]
 80063b2:	6818      	ldr	r0, [r3, #0]
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	889b      	ldrh	r3, [r3, #4]
 80063b8:	2201      	movs	r2, #1
 80063ba:	4619      	mov	r1, r3
 80063bc:	f002 fa90 	bl	80088e0 <HAL_GPIO_WritePin>

}
 80063c0:	bf00      	nop
 80063c2:	3710      	adds	r7, #16
 80063c4:	46bd      	mov	sp, r7
 80063c6:	bd80      	pop	{r7, pc}

080063c8 <MAX31865_temperature>:

/*
 * Read temperature
 */
float MAX31865_temperature(MAX31865_SPI* spi) {
 80063c8:	b590      	push	{r4, r7, lr}
 80063ca:	b089      	sub	sp, #36	; 0x24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	6078      	str	r0, [r7, #4]

	uint8_t buffer[2];
	uint8_t address = 0x01; // MAX31865_RTD_MSB
 80063d0:	2301      	movs	r3, #1
 80063d2:	73fb      	strb	r3, [r7, #15]
	MAX31865_read(spi, &address, buffer, 2);
 80063d4:	f107 0210 	add.w	r2, r7, #16
 80063d8:	f107 010f 	add.w	r1, r7, #15
 80063dc:	2302      	movs	r3, #2
 80063de:	6878      	ldr	r0, [r7, #4]
 80063e0:	f7ff ffc9 	bl	8006376 <MAX31865_read>

	// Combine 2 bytes into 1 number, and shift 1 down to remove fault bit
	uint16_t data = buffer[0] << 8;
 80063e4:	7c3b      	ldrb	r3, [r7, #16]
 80063e6:	b29b      	uxth	r3, r3
 80063e8:	021b      	lsls	r3, r3, #8
 80063ea:	83fb      	strh	r3, [r7, #30]
	data |= buffer[1];
 80063ec:	7c7b      	ldrb	r3, [r7, #17]
 80063ee:	b29a      	uxth	r2, r3
 80063f0:	8bfb      	ldrh	r3, [r7, #30]
 80063f2:	4313      	orrs	r3, r2
 80063f4:	83fb      	strh	r3, [r7, #30]
	data >>= 1;
 80063f6:	8bfb      	ldrh	r3, [r7, #30]
 80063f8:	085b      	lsrs	r3, r3, #1
 80063fa:	83fb      	strh	r3, [r7, #30]

	// Calculate the actual resistance of the sensor
	float resistance = ((float) data * MAX31865_RREF) / MAX31865_FACTOR;
 80063fc:	8bfb      	ldrh	r3, [r7, #30]
 80063fe:	ee07 3a90 	vmov	s15, r3
 8006402:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8006406:	ed9f 7a18 	vldr	s14, [pc, #96]	; 8006468 <MAX31865_temperature+0xa0>
 800640a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800640e:	eddf 6a17 	vldr	s13, [pc, #92]	; 800646c <MAX31865_temperature+0xa4>
 8006412:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006416:	edc7 7a06 	vstr	s15, [r7, #24]

	// Calculate the temperature from the measured resistance
	float temp = ((resistance / 100) - 1) / MAX31865_ALPHA;
 800641a:	ed97 7a06 	vldr	s14, [r7, #24]
 800641e:	eddf 6a14 	vldr	s13, [pc, #80]	; 8006470 <MAX31865_temperature+0xa8>
 8006422:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006426:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800642a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800642e:	ee17 0a90 	vmov	r0, s15
 8006432:	f7fa f859 	bl	80004e8 <__aeabi_f2d>
 8006436:	a30a      	add	r3, pc, #40	; (adr r3, 8006460 <MAX31865_temperature+0x98>)
 8006438:	e9d3 2300 	ldrd	r2, r3, [r3]
 800643c:	f7fa f9d6 	bl	80007ec <__aeabi_ddiv>
 8006440:	4603      	mov	r3, r0
 8006442:	460c      	mov	r4, r1
 8006444:	4618      	mov	r0, r3
 8006446:	4621      	mov	r1, r4
 8006448:	f7fa fb88 	bl	8000b5c <__aeabi_d2f>
 800644c:	4603      	mov	r3, r0
 800644e:	617b      	str	r3, [r7, #20]

	return temp;
 8006450:	697b      	ldr	r3, [r7, #20]
 8006452:	ee07 3a90 	vmov	s15, r3

}
 8006456:	eeb0 0a67 	vmov.f32	s0, s15
 800645a:	3724      	adds	r7, #36	; 0x24
 800645c:	46bd      	mov	sp, r7
 800645e:	bd90      	pop	{r4, r7, pc}
 8006460:	6defc7a4 	.word	0x6defc7a4
 8006464:	3f6fb3fa 	.word	0x3f6fb3fa
 8006468:	43d90000 	.word	0x43d90000
 800646c:	47000000 	.word	0x47000000
 8006470:	42c80000 	.word	0x42c80000

08006474 <MAX31865_init>:
	uint8_t buffer;
	MAX31865_read(spi, &address, &buffer, 1);
	return buffer;
}

void MAX31865_init(MAX31865_SPI* spi, GPIO_TypeDef* CE_PORT, uint16_t CE_PIN, SPI_HandleTypeDef* hspi, uint8_t WIRES){
 8006474:	b580      	push	{r7, lr}
 8006476:	b086      	sub	sp, #24
 8006478:	af00      	add	r7, sp, #0
 800647a:	60f8      	str	r0, [r7, #12]
 800647c:	60b9      	str	r1, [r7, #8]
 800647e:	603b      	str	r3, [r7, #0]
 8006480:	4613      	mov	r3, r2
 8006482:	80fb      	strh	r3, [r7, #6]
	// Declare structure
	spi->CE_PIN = CE_PIN;
 8006484:	68fb      	ldr	r3, [r7, #12]
 8006486:	88fa      	ldrh	r2, [r7, #6]
 8006488:	809a      	strh	r2, [r3, #4]
	spi->CE_PORT = CE_PORT;
 800648a:	68fb      	ldr	r3, [r7, #12]
 800648c:	68ba      	ldr	r2, [r7, #8]
 800648e:	601a      	str	r2, [r3, #0]
	spi->hspi = hspi;
 8006490:	68fb      	ldr	r3, [r7, #12]
 8006492:	683a      	ldr	r2, [r7, #0]
 8006494:	609a      	str	r2, [r3, #8]
	spi->WIRES = WIRES;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	f897 2020 	ldrb.w	r2, [r7, #32]
 800649c:	731a      	strb	r2, [r3, #12]

	// CE in reset state
	HAL_GPIO_WritePin(spi->CE_PORT, spi->CE_PIN, GPIO_PIN_SET);
 800649e:	68fb      	ldr	r3, [r7, #12]
 80064a0:	6818      	ldr	r0, [r3, #0]
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	889b      	ldrh	r3, [r3, #4]
 80064a6:	2201      	movs	r2, #1
 80064a8:	4619      	mov	r1, r3
 80064aa:	f002 fa19 	bl	80088e0 <HAL_GPIO_WritePin>
	 * 1-shot = Off
	 * Fault detection = No action
	 * Fault Status = Off
	 * Filter = 60 Hz
	 */
	uint8_t data = 0x00;
 80064ae:	2300      	movs	r3, #0
 80064b0:	75fb      	strb	r3, [r7, #23]
	if (spi->WIRES == WIRE3) {
 80064b2:	68fb      	ldr	r3, [r7, #12]
 80064b4:	7b1b      	ldrb	r3, [r3, #12]
 80064b6:	2b03      	cmp	r3, #3
 80064b8:	d102      	bne.n	80064c0 <MAX31865_init+0x4c>
		data = 0b11010000; // 3 wire
 80064ba:	23d0      	movs	r3, #208	; 0xd0
 80064bc:	75fb      	strb	r3, [r7, #23]
 80064be:	e001      	b.n	80064c4 <MAX31865_init+0x50>
	} else {
		data = 0b11000000; // 2 or 4 wire
 80064c0:	23c0      	movs	r3, #192	; 0xc0
 80064c2:	75fb      	strb	r3, [r7, #23]
	}

	// 0x80 will convert to WRITE address
	uint8_t address = 0x00 | 0x80; // MAX31865_CONFIGURATION
 80064c4:	2380      	movs	r3, #128	; 0x80
 80064c6:	75bb      	strb	r3, [r7, #22]
	MAX31865_write(spi, &address, &data, 1);
 80064c8:	f107 0217 	add.w	r2, r7, #23
 80064cc:	f107 0116 	add.w	r1, r7, #22
 80064d0:	2301      	movs	r3, #1
 80064d2:	68f8      	ldr	r0, [r7, #12]
 80064d4:	f7ff ff26 	bl	8006324 <MAX31865_write>


}
 80064d8:	bf00      	nop
 80064da:	3718      	adds	r7, #24
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80064e0:	b580      	push	{r7, lr}
 80064e2:	b08e      	sub	sp, #56	; 0x38
 80064e4:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80064e6:	f001 f991 	bl	800780c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80064ea:	f000 f8dd 	bl	80066a8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80064ee:	f000 fa7f 	bl	80069f0 <MX_GPIO_Init>
  MX_DMA_Init();
 80064f2:	f000 fa5d 	bl	80069b0 <MX_DMA_Init>
  MX_USART2_UART_Init();
 80064f6:	f000 fa31 	bl	800695c <MX_USART2_UART_Init>
  MX_SPI2_Init();
 80064fa:	f000 f943 	bl	8006784 <MX_SPI2_Init>
  MX_SPI3_Init();
 80064fe:	f000 f977 	bl	80067f0 <MX_SPI3_Init>
  MX_TIM3_Init();
 8006502:	f000 f9ab 	bl	800685c <MX_TIM3_Init>
  /* USER CODE BEGIN 2 */

	// Start DMA for UART
	HAL_UART_Receive_DMA(&huart2, UART_RX_DATA, 1);
 8006506:	2201      	movs	r2, #1
 8006508:	4950      	ldr	r1, [pc, #320]	; (800664c <main+0x16c>)
 800650a:	4851      	ldr	r0, [pc, #324]	; (8006650 <main+0x170>)
 800650c:	f004 fc92 	bl	800ae34 <HAL_UART_Receive_DMA>

	// Set the address and sector for F446RE CPU where we are going to store the settings. Look at chapter 3.3 at document RM0390 for STM32F446XX processors
	FlashSetSectorAddrs(7, 0x08060000);
 8006510:	4950      	ldr	r1, [pc, #320]	; (8006654 <main+0x174>)
 8006512:	2007      	movs	r0, #7
 8006514:	f7fc f92e 	bl	8002774 <FlashSetSectorAddrs>

	// Init LCD
	ILI9341_Init(&lcd_spi, &hspi2, LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port, LCD_DC_Pin, LCD_RST_GPIO_Port, LCD_RST_Pin, TS_CS_GPIO_Port, TS_CS_Pin);
 8006518:	f44f 7300 	mov.w	r3, #512	; 0x200
 800651c:	9305      	str	r3, [sp, #20]
 800651e:	4b4e      	ldr	r3, [pc, #312]	; (8006658 <main+0x178>)
 8006520:	9304      	str	r3, [sp, #16]
 8006522:	2310      	movs	r3, #16
 8006524:	9303      	str	r3, [sp, #12]
 8006526:	4b4d      	ldr	r3, [pc, #308]	; (800665c <main+0x17c>)
 8006528:	9302      	str	r3, [sp, #8]
 800652a:	2340      	movs	r3, #64	; 0x40
 800652c:	9301      	str	r3, [sp, #4]
 800652e:	4b4a      	ldr	r3, [pc, #296]	; (8006658 <main+0x178>)
 8006530:	9300      	str	r3, [sp, #0]
 8006532:	2320      	movs	r3, #32
 8006534:	4a49      	ldr	r2, [pc, #292]	; (800665c <main+0x17c>)
 8006536:	494a      	ldr	r1, [pc, #296]	; (8006660 <main+0x180>)
 8006538:	484a      	ldr	r0, [pc, #296]	; (8006664 <main+0x184>)
 800653a:	f7fc ffa1 	bl	8003480 <ILI9341_Init>

	// Show welcome screen
	ILI9341_setRotation(&lcd_spi, 2);
 800653e:	2102      	movs	r1, #2
 8006540:	4848      	ldr	r0, [pc, #288]	; (8006664 <main+0x184>)
 8006542:	f7fc ff3b 	bl	80033bc <ILI9341_setRotation>
	ILI9341_printImage(&lcd_spi, 0, 0, 320, 240, windows95_intro, 640 * 240 * sizeof(uint8_t));
 8006546:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 800654a:	9302      	str	r3, [sp, #8]
 800654c:	4b46      	ldr	r3, [pc, #280]	; (8006668 <main+0x188>)
 800654e:	9301      	str	r3, [sp, #4]
 8006550:	23f0      	movs	r3, #240	; 0xf0
 8006552:	9300      	str	r3, [sp, #0]
 8006554:	f44f 73a0 	mov.w	r3, #320	; 0x140
 8006558:	2200      	movs	r2, #0
 800655a:	2100      	movs	r1, #0
 800655c:	4841      	ldr	r0, [pc, #260]	; (8006664 <main+0x184>)
 800655e:	f7fc fef4 	bl	800334a <ILI9341_printImage>
	HAL_Delay(5000);
 8006562:	f241 3088 	movw	r0, #5000	; 0x1388
 8006566:	f001 f993 	bl	8007890 <HAL_Delay>

	// Load the user configurations
	float rdBuf[7];
	FlashReadN(0, rdBuf, 7, DATA_TYPE_FLOAT);
 800656a:	4639      	mov	r1, r7
 800656c:	2303      	movs	r3, #3
 800656e:	2207      	movs	r2, #7
 8006570:	2000      	movs	r0, #0
 8006572:	f7fc f9af 	bl	80028d4 <FlashReadN>
	lcd_spi.myTS_Calibrate.Scale_X = rdBuf[0];
 8006576:	683b      	ldr	r3, [r7, #0]
 8006578:	4a3a      	ldr	r2, [pc, #232]	; (8006664 <main+0x184>)
 800657a:	6453      	str	r3, [r2, #68]	; 0x44
	lcd_spi.myTS_Calibrate.Scale_Y = rdBuf[1];
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	4a39      	ldr	r2, [pc, #228]	; (8006664 <main+0x184>)
 8006580:	6493      	str	r3, [r2, #72]	; 0x48
	lcd_spi.myTS_Calibrate.Bias_X = rdBuf[2];
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	4a37      	ldr	r2, [pc, #220]	; (8006664 <main+0x184>)
 8006586:	64d3      	str	r3, [r2, #76]	; 0x4c
	lcd_spi.myTS_Calibrate.Bias_Y = rdBuf[3];
 8006588:	68fb      	ldr	r3, [r7, #12]
 800658a:	4a36      	ldr	r2, [pc, #216]	; (8006664 <main+0x184>)
 800658c:	6513      	str	r3, [r2, #80]	; 0x50
	setpoint = isnanf(rdBuf[4]) != 0 ? 0 : rdBuf[4];
 800658e:	edd7 7a04 	vldr	s15, [r7, #16]
 8006592:	eef4 7a67 	vcmp.f32	s15, s15
 8006596:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800659a:	d601      	bvs.n	80065a0 <main+0xc0>
 800659c:	693b      	ldr	r3, [r7, #16]
 800659e:	e001      	b.n	80065a4 <main+0xc4>
 80065a0:	f04f 0300 	mov.w	r3, #0
 80065a4:	4a31      	ldr	r2, [pc, #196]	; (800666c <main+0x18c>)
 80065a6:	6013      	str	r3, [r2, #0]
	horizon = isnanf(rdBuf[5]) != 0 ? 10 : rdBuf[5];
 80065a8:	edd7 7a05 	vldr	s15, [r7, #20]
 80065ac:	eef4 7a67 	vcmp.f32	s15, s15
 80065b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065b4:	d601      	bvs.n	80065ba <main+0xda>
 80065b6:	697b      	ldr	r3, [r7, #20]
 80065b8:	e000      	b.n	80065bc <main+0xdc>
 80065ba:	4b2d      	ldr	r3, [pc, #180]	; (8006670 <main+0x190>)
 80065bc:	4a2d      	ldr	r2, [pc, #180]	; (8006674 <main+0x194>)
 80065be:	6013      	str	r3, [r2, #0]
	time_constant = isnanf(rdBuf[6]) != 0 ? 1 : rdBuf[6];
 80065c0:	edd7 7a06 	vldr	s15, [r7, #24]
 80065c4:	eef4 7a67 	vcmp.f32	s15, s15
 80065c8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80065cc:	d601      	bvs.n	80065d2 <main+0xf2>
 80065ce:	69bb      	ldr	r3, [r7, #24]
 80065d0:	e001      	b.n	80065d6 <main+0xf6>
 80065d2:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80065d6:	4a28      	ldr	r2, [pc, #160]	; (8006678 <main+0x198>)
 80065d8:	6013      	str	r3, [r2, #0]

	// Create model
	create_state_space_model();
 80065da:	f000 fb19 	bl	8006c10 <create_state_space_model>

	// Calibrate the touch if blue Nucleo board button is pressed
	if (HAL_GPIO_ReadPin(CALIBRATE_GPIO_Port, CALIBRATE_Pin) == GPIO_PIN_RESET) {
 80065de:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 80065e2:	481e      	ldr	r0, [pc, #120]	; (800665c <main+0x17c>)
 80065e4:	f002 f964 	bl	80088b0 <HAL_GPIO_ReadPin>
 80065e8:	4603      	mov	r3, r0
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d102      	bne.n	80065f4 <main+0x114>
		TSC2046_Calibrate(&lcd_spi);
 80065ee:	481d      	ldr	r0, [pc, #116]	; (8006664 <main+0x184>)
 80065f0:	f7fd f9aa 	bl	8003948 <TSC2046_Calibrate>
	}

	// Create initial frame
	bool update_main_frame = true;
 80065f4:	2301      	movs	r3, #1
 80065f6:	77fb      	strb	r3, [r7, #31]
	show_main_frame(&lcd_spi, closedloop_on, update_main_frame);
 80065f8:	4b20      	ldr	r3, [pc, #128]	; (800667c <main+0x19c>)
 80065fa:	781b      	ldrb	r3, [r3, #0]
 80065fc:	7ffa      	ldrb	r2, [r7, #31]
 80065fe:	4619      	mov	r1, r3
 8006600:	4818      	ldr	r0, [pc, #96]	; (8006664 <main+0x184>)
 8006602:	f7fd fb6d 	bl	8003ce0 <show_main_frame>

	// Start PWM output for the SSR-relay
	HAL_TIM_PWM_Start(&htim3, TIM_CHANNEL_1);
 8006606:	2100      	movs	r1, #0
 8006608:	481d      	ldr	r0, [pc, #116]	; (8006680 <main+0x1a0>)
 800660a:	f003 fca1 	bl	8009f50 <HAL_TIM_PWM_Start>

	// Init temperature PT100 reader
	MAX31865_init(&temperature_spi, MAX31865_CS_GPIO_Port, MAX31865_CS_Pin, &hspi3, WIRE4);
 800660e:	2304      	movs	r3, #4
 8006610:	9300      	str	r3, [sp, #0]
 8006612:	4b1c      	ldr	r3, [pc, #112]	; (8006684 <main+0x1a4>)
 8006614:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8006618:	491b      	ldr	r1, [pc, #108]	; (8006688 <main+0x1a8>)
 800661a:	481c      	ldr	r0, [pc, #112]	; (800668c <main+0x1ac>)
 800661c:	f7ff ff2a 	bl	8006474 <MAX31865_init>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8006620:	f005 f92a 	bl	800b878 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LCD */
  LCDHandle = osThreadNew(LCD_TASK, NULL, &LCD_attributes);
 8006624:	4a1a      	ldr	r2, [pc, #104]	; (8006690 <main+0x1b0>)
 8006626:	2100      	movs	r1, #0
 8006628:	481a      	ldr	r0, [pc, #104]	; (8006694 <main+0x1b4>)
 800662a:	f005 f98f 	bl	800b94c <osThreadNew>
 800662e:	4602      	mov	r2, r0
 8006630:	4b19      	ldr	r3, [pc, #100]	; (8006698 <main+0x1b8>)
 8006632:	601a      	str	r2, [r3, #0]

  /* creation of CONTROL */
  CONTROLHandle = osThreadNew(CONTROL_TASK, NULL, &CONTROL_attributes);
 8006634:	4a19      	ldr	r2, [pc, #100]	; (800669c <main+0x1bc>)
 8006636:	2100      	movs	r1, #0
 8006638:	4819      	ldr	r0, [pc, #100]	; (80066a0 <main+0x1c0>)
 800663a:	f005 f987 	bl	800b94c <osThreadNew>
 800663e:	4602      	mov	r2, r0
 8006640:	4b18      	ldr	r3, [pc, #96]	; (80066a4 <main+0x1c4>)
 8006642:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 8006644:	f005 f94c 	bl	800b8e0 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 8006648:	e7fe      	b.n	8006648 <main+0x168>
 800664a:	bf00      	nop
 800664c:	20005120 	.word	0x20005120
 8006650:	20005140 	.word	0x20005140
 8006654:	08060000 	.word	0x08060000
 8006658:	40020000 	.word	0x40020000
 800665c:	40020800 	.word	0x40020800
 8006660:	20004fb0 	.word	0x20004fb0
 8006664:	2000500c 	.word	0x2000500c
 8006668:	0801f2c8 	.word	0x0801f2c8
 800666c:	20000630 	.word	0x20000630
 8006670:	41200000 	.word	0x41200000
 8006674:	20000000 	.word	0x20000000
 8006678:	20000004 	.word	0x20000004
 800667c:	2000062c 	.word	0x2000062c
 8006680:	2000507c 	.word	0x2000507c
 8006684:	200050bc 	.word	0x200050bc
 8006688:	40020400 	.word	0x40020400
 800668c:	20005130 	.word	0x20005130
 8006690:	08044ac8 	.word	0x08044ac8
 8006694:	08006cb9 	.word	0x08006cb9
 8006698:	20005124 	.word	0x20005124
 800669c:	08044aec 	.word	0x08044aec
 80066a0:	08007009 	.word	0x08007009
 80066a4:	2000511c 	.word	0x2000511c

080066a8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80066a8:	b580      	push	{r7, lr}
 80066aa:	b094      	sub	sp, #80	; 0x50
 80066ac:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80066ae:	f107 031c 	add.w	r3, r7, #28
 80066b2:	2234      	movs	r2, #52	; 0x34
 80066b4:	2100      	movs	r1, #0
 80066b6:	4618      	mov	r0, r3
 80066b8:	f007 fe51 	bl	800e35e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80066bc:	f107 0308 	add.w	r3, r7, #8
 80066c0:	2200      	movs	r2, #0
 80066c2:	601a      	str	r2, [r3, #0]
 80066c4:	605a      	str	r2, [r3, #4]
 80066c6:	609a      	str	r2, [r3, #8]
 80066c8:	60da      	str	r2, [r3, #12]
 80066ca:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80066cc:	2300      	movs	r3, #0
 80066ce:	607b      	str	r3, [r7, #4]
 80066d0:	4b2a      	ldr	r3, [pc, #168]	; (800677c <SystemClock_Config+0xd4>)
 80066d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066d4:	4a29      	ldr	r2, [pc, #164]	; (800677c <SystemClock_Config+0xd4>)
 80066d6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80066da:	6413      	str	r3, [r2, #64]	; 0x40
 80066dc:	4b27      	ldr	r3, [pc, #156]	; (800677c <SystemClock_Config+0xd4>)
 80066de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80066e0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80066e4:	607b      	str	r3, [r7, #4]
 80066e6:	687b      	ldr	r3, [r7, #4]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE3);
 80066e8:	2300      	movs	r3, #0
 80066ea:	603b      	str	r3, [r7, #0]
 80066ec:	4b24      	ldr	r3, [pc, #144]	; (8006780 <SystemClock_Config+0xd8>)
 80066ee:	681b      	ldr	r3, [r3, #0]
 80066f0:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80066f4:	4a22      	ldr	r2, [pc, #136]	; (8006780 <SystemClock_Config+0xd8>)
 80066f6:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80066fa:	6013      	str	r3, [r2, #0]
 80066fc:	4b20      	ldr	r3, [pc, #128]	; (8006780 <SystemClock_Config+0xd8>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8006704:	603b      	str	r3, [r7, #0]
 8006706:	683b      	ldr	r3, [r7, #0]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8006708:	2302      	movs	r3, #2
 800670a:	61fb      	str	r3, [r7, #28]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 800670c:	2301      	movs	r3, #1
 800670e:	62bb      	str	r3, [r7, #40]	; 0x28
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8006710:	2310      	movs	r3, #16
 8006712:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006714:	2302      	movs	r3, #2
 8006716:	637b      	str	r3, [r7, #52]	; 0x34
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8006718:	2300      	movs	r3, #0
 800671a:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLM = 16;
 800671c:	2310      	movs	r3, #16
 800671e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLN = 336;
 8006720:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8006724:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 8006726:	2304      	movs	r3, #4
 8006728:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLQ = 2;
 800672a:	2302      	movs	r3, #2
 800672c:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLR = 2;
 800672e:	2302      	movs	r3, #2
 8006730:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006732:	f107 031c 	add.w	r3, r7, #28
 8006736:	4618      	mov	r0, r3
 8006738:	f002 fbd8 	bl	8008eec <HAL_RCC_OscConfig>
 800673c:	4603      	mov	r3, r0
 800673e:	2b00      	cmp	r3, #0
 8006740:	d001      	beq.n	8006746 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 8006742:	f000 fd9a 	bl	800727a <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006746:	230f      	movs	r3, #15
 8006748:	60bb      	str	r3, [r7, #8]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800674a:	2302      	movs	r3, #2
 800674c:	60fb      	str	r3, [r7, #12]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800674e:	2300      	movs	r3, #0
 8006750:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8006752:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006756:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8006758:	2300      	movs	r3, #0
 800675a:	61bb      	str	r3, [r7, #24]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800675c:	f107 0308 	add.w	r3, r7, #8
 8006760:	2102      	movs	r1, #2
 8006762:	4618      	mov	r0, r3
 8006764:	f002 f8d6 	bl	8008914 <HAL_RCC_ClockConfig>
 8006768:	4603      	mov	r3, r0
 800676a:	2b00      	cmp	r3, #0
 800676c:	d001      	beq.n	8006772 <SystemClock_Config+0xca>
  {
    Error_Handler();
 800676e:	f000 fd84 	bl	800727a <Error_Handler>
  }
}
 8006772:	bf00      	nop
 8006774:	3750      	adds	r7, #80	; 0x50
 8006776:	46bd      	mov	sp, r7
 8006778:	bd80      	pop	{r7, pc}
 800677a:	bf00      	nop
 800677c:	40023800 	.word	0x40023800
 8006780:	40007000 	.word	0x40007000

08006784 <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 8006784:	b580      	push	{r7, lr}
 8006786:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8006788:	4b17      	ldr	r3, [pc, #92]	; (80067e8 <MX_SPI2_Init+0x64>)
 800678a:	4a18      	ldr	r2, [pc, #96]	; (80067ec <MX_SPI2_Init+0x68>)
 800678c:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800678e:	4b16      	ldr	r3, [pc, #88]	; (80067e8 <MX_SPI2_Init+0x64>)
 8006790:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006794:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8006796:	4b14      	ldr	r3, [pc, #80]	; (80067e8 <MX_SPI2_Init+0x64>)
 8006798:	2200      	movs	r2, #0
 800679a:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 800679c:	4b12      	ldr	r3, [pc, #72]	; (80067e8 <MX_SPI2_Init+0x64>)
 800679e:	2200      	movs	r2, #0
 80067a0:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80067a2:	4b11      	ldr	r3, [pc, #68]	; (80067e8 <MX_SPI2_Init+0x64>)
 80067a4:	2200      	movs	r2, #0
 80067a6:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80067a8:	4b0f      	ldr	r3, [pc, #60]	; (80067e8 <MX_SPI2_Init+0x64>)
 80067aa:	2200      	movs	r2, #0
 80067ac:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80067ae:	4b0e      	ldr	r3, [pc, #56]	; (80067e8 <MX_SPI2_Init+0x64>)
 80067b0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80067b4:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 80067b6:	4b0c      	ldr	r3, [pc, #48]	; (80067e8 <MX_SPI2_Init+0x64>)
 80067b8:	2210      	movs	r2, #16
 80067ba:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80067bc:	4b0a      	ldr	r3, [pc, #40]	; (80067e8 <MX_SPI2_Init+0x64>)
 80067be:	2200      	movs	r2, #0
 80067c0:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80067c2:	4b09      	ldr	r3, [pc, #36]	; (80067e8 <MX_SPI2_Init+0x64>)
 80067c4:	2200      	movs	r2, #0
 80067c6:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80067c8:	4b07      	ldr	r3, [pc, #28]	; (80067e8 <MX_SPI2_Init+0x64>)
 80067ca:	2200      	movs	r2, #0
 80067cc:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80067ce:	4b06      	ldr	r3, [pc, #24]	; (80067e8 <MX_SPI2_Init+0x64>)
 80067d0:	220a      	movs	r2, #10
 80067d2:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80067d4:	4804      	ldr	r0, [pc, #16]	; (80067e8 <MX_SPI2_Init+0x64>)
 80067d6:	f002 fde3 	bl	80093a0 <HAL_SPI_Init>
 80067da:	4603      	mov	r3, r0
 80067dc:	2b00      	cmp	r3, #0
 80067de:	d001      	beq.n	80067e4 <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80067e0:	f000 fd4b 	bl	800727a <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80067e4:	bf00      	nop
 80067e6:	bd80      	pop	{r7, pc}
 80067e8:	20004fb0 	.word	0x20004fb0
 80067ec:	40003800 	.word	0x40003800

080067f0 <MX_SPI3_Init>:
  * @brief SPI3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI3_Init(void)
{
 80067f0:	b580      	push	{r7, lr}
 80067f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  /* SPI3 parameter configuration*/
  hspi3.Instance = SPI3;
 80067f4:	4b17      	ldr	r3, [pc, #92]	; (8006854 <MX_SPI3_Init+0x64>)
 80067f6:	4a18      	ldr	r2, [pc, #96]	; (8006858 <MX_SPI3_Init+0x68>)
 80067f8:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 80067fa:	4b16      	ldr	r3, [pc, #88]	; (8006854 <MX_SPI3_Init+0x64>)
 80067fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8006800:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 8006802:	4b14      	ldr	r3, [pc, #80]	; (8006854 <MX_SPI3_Init+0x64>)
 8006804:	2200      	movs	r2, #0
 8006806:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_8BIT;
 8006808:	4b12      	ldr	r3, [pc, #72]	; (8006854 <MX_SPI3_Init+0x64>)
 800680a:	2200      	movs	r2, #0
 800680c:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_HIGH;
 800680e:	4b11      	ldr	r3, [pc, #68]	; (8006854 <MX_SPI3_Init+0x64>)
 8006810:	2202      	movs	r2, #2
 8006812:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_2EDGE;
 8006814:	4b0f      	ldr	r3, [pc, #60]	; (8006854 <MX_SPI3_Init+0x64>)
 8006816:	2201      	movs	r2, #1
 8006818:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 800681a:	4b0e      	ldr	r3, [pc, #56]	; (8006854 <MX_SPI3_Init+0x64>)
 800681c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006820:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8006822:	4b0c      	ldr	r3, [pc, #48]	; (8006854 <MX_SPI3_Init+0x64>)
 8006824:	2210      	movs	r2, #16
 8006826:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8006828:	4b0a      	ldr	r3, [pc, #40]	; (8006854 <MX_SPI3_Init+0x64>)
 800682a:	2200      	movs	r2, #0
 800682c:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800682e:	4b09      	ldr	r3, [pc, #36]	; (8006854 <MX_SPI3_Init+0x64>)
 8006830:	2200      	movs	r2, #0
 8006832:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8006834:	4b07      	ldr	r3, [pc, #28]	; (8006854 <MX_SPI3_Init+0x64>)
 8006836:	2200      	movs	r2, #0
 8006838:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 10;
 800683a:	4b06      	ldr	r3, [pc, #24]	; (8006854 <MX_SPI3_Init+0x64>)
 800683c:	220a      	movs	r2, #10
 800683e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 8006840:	4804      	ldr	r0, [pc, #16]	; (8006854 <MX_SPI3_Init+0x64>)
 8006842:	f002 fdad 	bl	80093a0 <HAL_SPI_Init>
 8006846:	4603      	mov	r3, r0
 8006848:	2b00      	cmp	r3, #0
 800684a:	d001      	beq.n	8006850 <MX_SPI3_Init+0x60>
  {
    Error_Handler();
 800684c:	f000 fd15 	bl	800727a <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 8006850:	bf00      	nop
 8006852:	bd80      	pop	{r7, pc}
 8006854:	200050bc 	.word	0x200050bc
 8006858:	40003c00 	.word	0x40003c00

0800685c <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 800685c:	b580      	push	{r7, lr}
 800685e:	b08e      	sub	sp, #56	; 0x38
 8006860:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006862:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8006866:	2200      	movs	r2, #0
 8006868:	601a      	str	r2, [r3, #0]
 800686a:	605a      	str	r2, [r3, #4]
 800686c:	609a      	str	r2, [r3, #8]
 800686e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006870:	f107 0320 	add.w	r3, r7, #32
 8006874:	2200      	movs	r2, #0
 8006876:	601a      	str	r2, [r3, #0]
 8006878:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800687a:	1d3b      	adds	r3, r7, #4
 800687c:	2200      	movs	r2, #0
 800687e:	601a      	str	r2, [r3, #0]
 8006880:	605a      	str	r2, [r3, #4]
 8006882:	609a      	str	r2, [r3, #8]
 8006884:	60da      	str	r2, [r3, #12]
 8006886:	611a      	str	r2, [r3, #16]
 8006888:	615a      	str	r2, [r3, #20]
 800688a:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800688c:	4b31      	ldr	r3, [pc, #196]	; (8006954 <MX_TIM3_Init+0xf8>)
 800688e:	4a32      	ldr	r2, [pc, #200]	; (8006958 <MX_TIM3_Init+0xfc>)
 8006890:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 42000;
 8006892:	4b30      	ldr	r3, [pc, #192]	; (8006954 <MX_TIM3_Init+0xf8>)
 8006894:	f24a 4210 	movw	r2, #42000	; 0xa410
 8006898:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800689a:	4b2e      	ldr	r3, [pc, #184]	; (8006954 <MX_TIM3_Init+0xf8>)
 800689c:	2200      	movs	r2, #0
 800689e:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 20000;
 80068a0:	4b2c      	ldr	r3, [pc, #176]	; (8006954 <MX_TIM3_Init+0xf8>)
 80068a2:	f644 6220 	movw	r2, #20000	; 0x4e20
 80068a6:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80068a8:	4b2a      	ldr	r3, [pc, #168]	; (8006954 <MX_TIM3_Init+0xf8>)
 80068aa:	2200      	movs	r2, #0
 80068ac:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80068ae:	4b29      	ldr	r3, [pc, #164]	; (8006954 <MX_TIM3_Init+0xf8>)
 80068b0:	2200      	movs	r2, #0
 80068b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80068b4:	4827      	ldr	r0, [pc, #156]	; (8006954 <MX_TIM3_Init+0xf8>)
 80068b6:	f003 fac7 	bl	8009e48 <HAL_TIM_Base_Init>
 80068ba:	4603      	mov	r3, r0
 80068bc:	2b00      	cmp	r3, #0
 80068be:	d001      	beq.n	80068c4 <MX_TIM3_Init+0x68>
  {
    Error_Handler();
 80068c0:	f000 fcdb 	bl	800727a <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80068c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80068c8:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80068ca:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80068ce:	4619      	mov	r1, r3
 80068d0:	4820      	ldr	r0, [pc, #128]	; (8006954 <MX_TIM3_Init+0xf8>)
 80068d2:	f003 fd49 	bl	800a368 <HAL_TIM_ConfigClockSource>
 80068d6:	4603      	mov	r3, r0
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d001      	beq.n	80068e0 <MX_TIM3_Init+0x84>
  {
    Error_Handler();
 80068dc:	f000 fccd 	bl	800727a <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 80068e0:	481c      	ldr	r0, [pc, #112]	; (8006954 <MX_TIM3_Init+0xf8>)
 80068e2:	f003 fb00 	bl	8009ee6 <HAL_TIM_PWM_Init>
 80068e6:	4603      	mov	r3, r0
 80068e8:	2b00      	cmp	r3, #0
 80068ea:	d001      	beq.n	80068f0 <MX_TIM3_Init+0x94>
  {
    Error_Handler();
 80068ec:	f000 fcc5 	bl	800727a <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80068f0:	2300      	movs	r3, #0
 80068f2:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80068f4:	2300      	movs	r3, #0
 80068f6:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80068f8:	f107 0320 	add.w	r3, r7, #32
 80068fc:	4619      	mov	r1, r3
 80068fe:	4815      	ldr	r0, [pc, #84]	; (8006954 <MX_TIM3_Init+0xf8>)
 8006900:	f004 f922 	bl	800ab48 <HAL_TIMEx_MasterConfigSynchronization>
 8006904:	4603      	mov	r3, r0
 8006906:	2b00      	cmp	r3, #0
 8006908:	d001      	beq.n	800690e <MX_TIM3_Init+0xb2>
  {
    Error_Handler();
 800690a:	f000 fcb6 	bl	800727a <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800690e:	2360      	movs	r3, #96	; 0x60
 8006910:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8006912:	2300      	movs	r3, #0
 8006914:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8006916:	2300      	movs	r3, #0
 8006918:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800691a:	2300      	movs	r3, #0
 800691c:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800691e:	1d3b      	adds	r3, r7, #4
 8006920:	2200      	movs	r2, #0
 8006922:	4619      	mov	r1, r3
 8006924:	480b      	ldr	r0, [pc, #44]	; (8006954 <MX_TIM3_Init+0xf8>)
 8006926:	f003 fc59 	bl	800a1dc <HAL_TIM_PWM_ConfigChannel>
 800692a:	4603      	mov	r3, r0
 800692c:	2b00      	cmp	r3, #0
 800692e:	d001      	beq.n	8006934 <MX_TIM3_Init+0xd8>
  {
    Error_Handler();
 8006930:	f000 fca3 	bl	800727a <Error_Handler>
  }
  __HAL_TIM_DISABLE_OCxPRELOAD(&htim3, TIM_CHANNEL_1);
 8006934:	4b07      	ldr	r3, [pc, #28]	; (8006954 <MX_TIM3_Init+0xf8>)
 8006936:	681b      	ldr	r3, [r3, #0]
 8006938:	699a      	ldr	r2, [r3, #24]
 800693a:	4b06      	ldr	r3, [pc, #24]	; (8006954 <MX_TIM3_Init+0xf8>)
 800693c:	681b      	ldr	r3, [r3, #0]
 800693e:	f022 0208 	bic.w	r2, r2, #8
 8006942:	619a      	str	r2, [r3, #24]
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 8006944:	4803      	ldr	r0, [pc, #12]	; (8006954 <MX_TIM3_Init+0xf8>)
 8006946:	f000 fdb9 	bl	80074bc <HAL_TIM_MspPostInit>

}
 800694a:	bf00      	nop
 800694c:	3738      	adds	r7, #56	; 0x38
 800694e:	46bd      	mov	sp, r7
 8006950:	bd80      	pop	{r7, pc}
 8006952:	bf00      	nop
 8006954:	2000507c 	.word	0x2000507c
 8006958:	40000400 	.word	0x40000400

0800695c <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 800695c:	b580      	push	{r7, lr}
 800695e:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8006960:	4b11      	ldr	r3, [pc, #68]	; (80069a8 <MX_USART2_UART_Init+0x4c>)
 8006962:	4a12      	ldr	r2, [pc, #72]	; (80069ac <MX_USART2_UART_Init+0x50>)
 8006964:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8006966:	4b10      	ldr	r3, [pc, #64]	; (80069a8 <MX_USART2_UART_Init+0x4c>)
 8006968:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800696c:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800696e:	4b0e      	ldr	r3, [pc, #56]	; (80069a8 <MX_USART2_UART_Init+0x4c>)
 8006970:	2200      	movs	r2, #0
 8006972:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8006974:	4b0c      	ldr	r3, [pc, #48]	; (80069a8 <MX_USART2_UART_Init+0x4c>)
 8006976:	2200      	movs	r2, #0
 8006978:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 800697a:	4b0b      	ldr	r3, [pc, #44]	; (80069a8 <MX_USART2_UART_Init+0x4c>)
 800697c:	2200      	movs	r2, #0
 800697e:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8006980:	4b09      	ldr	r3, [pc, #36]	; (80069a8 <MX_USART2_UART_Init+0x4c>)
 8006982:	220c      	movs	r2, #12
 8006984:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006986:	4b08      	ldr	r3, [pc, #32]	; (80069a8 <MX_USART2_UART_Init+0x4c>)
 8006988:	2200      	movs	r2, #0
 800698a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800698c:	4b06      	ldr	r3, [pc, #24]	; (80069a8 <MX_USART2_UART_Init+0x4c>)
 800698e:	2200      	movs	r2, #0
 8006990:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8006992:	4805      	ldr	r0, [pc, #20]	; (80069a8 <MX_USART2_UART_Init+0x4c>)
 8006994:	f004 f968 	bl	800ac68 <HAL_UART_Init>
 8006998:	4603      	mov	r3, r0
 800699a:	2b00      	cmp	r3, #0
 800699c:	d001      	beq.n	80069a2 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800699e:	f000 fc6c 	bl	800727a <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80069a2:	bf00      	nop
 80069a4:	bd80      	pop	{r7, pc}
 80069a6:	bf00      	nop
 80069a8:	20005140 	.word	0x20005140
 80069ac:	40004400 	.word	0x40004400

080069b0 <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 80069b0:	b580      	push	{r7, lr}
 80069b2:	b082      	sub	sp, #8
 80069b4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80069b6:	2300      	movs	r3, #0
 80069b8:	607b      	str	r3, [r7, #4]
 80069ba:	4b0c      	ldr	r3, [pc, #48]	; (80069ec <MX_DMA_Init+0x3c>)
 80069bc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069be:	4a0b      	ldr	r2, [pc, #44]	; (80069ec <MX_DMA_Init+0x3c>)
 80069c0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80069c4:	6313      	str	r3, [r2, #48]	; 0x30
 80069c6:	4b09      	ldr	r3, [pc, #36]	; (80069ec <MX_DMA_Init+0x3c>)
 80069c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80069ca:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80069ce:	607b      	str	r3, [r7, #4]
 80069d0:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 80069d2:	2200      	movs	r2, #0
 80069d4:	2105      	movs	r1, #5
 80069d6:	2010      	movs	r0, #16
 80069d8:	f001 f834 	bl	8007a44 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80069dc:	2010      	movs	r0, #16
 80069de:	f001 f84d 	bl	8007a7c <HAL_NVIC_EnableIRQ>

}
 80069e2:	bf00      	nop
 80069e4:	3708      	adds	r7, #8
 80069e6:	46bd      	mov	sp, r7
 80069e8:	bd80      	pop	{r7, pc}
 80069ea:	bf00      	nop
 80069ec:	40023800 	.word	0x40023800

080069f0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80069f0:	b580      	push	{r7, lr}
 80069f2:	b08a      	sub	sp, #40	; 0x28
 80069f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80069f6:	f107 0314 	add.w	r3, r7, #20
 80069fa:	2200      	movs	r2, #0
 80069fc:	601a      	str	r2, [r3, #0]
 80069fe:	605a      	str	r2, [r3, #4]
 8006a00:	609a      	str	r2, [r3, #8]
 8006a02:	60da      	str	r2, [r3, #12]
 8006a04:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006a06:	2300      	movs	r3, #0
 8006a08:	613b      	str	r3, [r7, #16]
 8006a0a:	4b42      	ldr	r3, [pc, #264]	; (8006b14 <MX_GPIO_Init+0x124>)
 8006a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a0e:	4a41      	ldr	r2, [pc, #260]	; (8006b14 <MX_GPIO_Init+0x124>)
 8006a10:	f043 0304 	orr.w	r3, r3, #4
 8006a14:	6313      	str	r3, [r2, #48]	; 0x30
 8006a16:	4b3f      	ldr	r3, [pc, #252]	; (8006b14 <MX_GPIO_Init+0x124>)
 8006a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a1a:	f003 0304 	and.w	r3, r3, #4
 8006a1e:	613b      	str	r3, [r7, #16]
 8006a20:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006a22:	2300      	movs	r3, #0
 8006a24:	60fb      	str	r3, [r7, #12]
 8006a26:	4b3b      	ldr	r3, [pc, #236]	; (8006b14 <MX_GPIO_Init+0x124>)
 8006a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a2a:	4a3a      	ldr	r2, [pc, #232]	; (8006b14 <MX_GPIO_Init+0x124>)
 8006a2c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006a30:	6313      	str	r3, [r2, #48]	; 0x30
 8006a32:	4b38      	ldr	r3, [pc, #224]	; (8006b14 <MX_GPIO_Init+0x124>)
 8006a34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a3a:	60fb      	str	r3, [r7, #12]
 8006a3c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006a3e:	2300      	movs	r3, #0
 8006a40:	60bb      	str	r3, [r7, #8]
 8006a42:	4b34      	ldr	r3, [pc, #208]	; (8006b14 <MX_GPIO_Init+0x124>)
 8006a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a46:	4a33      	ldr	r2, [pc, #204]	; (8006b14 <MX_GPIO_Init+0x124>)
 8006a48:	f043 0301 	orr.w	r3, r3, #1
 8006a4c:	6313      	str	r3, [r2, #48]	; 0x30
 8006a4e:	4b31      	ldr	r3, [pc, #196]	; (8006b14 <MX_GPIO_Init+0x124>)
 8006a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a52:	f003 0301 	and.w	r3, r3, #1
 8006a56:	60bb      	str	r3, [r7, #8]
 8006a58:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006a5a:	2300      	movs	r3, #0
 8006a5c:	607b      	str	r3, [r7, #4]
 8006a5e:	4b2d      	ldr	r3, [pc, #180]	; (8006b14 <MX_GPIO_Init+0x124>)
 8006a60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a62:	4a2c      	ldr	r2, [pc, #176]	; (8006b14 <MX_GPIO_Init+0x124>)
 8006a64:	f043 0302 	orr.w	r3, r3, #2
 8006a68:	6313      	str	r3, [r2, #48]	; 0x30
 8006a6a:	4b2a      	ldr	r3, [pc, #168]	; (8006b14 <MX_GPIO_Init+0x124>)
 8006a6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006a6e:	f003 0302 	and.w	r3, r3, #2
 8006a72:	607b      	str	r3, [r7, #4]
 8006a74:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, LCD_DC_Pin|TS_CS_Pin, GPIO_PIN_RESET);
 8006a76:	2200      	movs	r2, #0
 8006a78:	f44f 7110 	mov.w	r1, #576	; 0x240
 8006a7c:	4826      	ldr	r0, [pc, #152]	; (8006b18 <MX_GPIO_Init+0x128>)
 8006a7e:	f001 ff2f 	bl	80088e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8006a82:	2200      	movs	r2, #0
 8006a84:	2130      	movs	r1, #48	; 0x30
 8006a86:	4825      	ldr	r0, [pc, #148]	; (8006b1c <MX_GPIO_Init+0x12c>)
 8006a88:	f001 ff2a 	bl	80088e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MAX31865_CS_GPIO_Port, MAX31865_CS_Pin, GPIO_PIN_RESET);
 8006a8c:	2200      	movs	r2, #0
 8006a8e:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8006a92:	4823      	ldr	r0, [pc, #140]	; (8006b20 <MX_GPIO_Init+0x130>)
 8006a94:	f001 ff24 	bl	80088e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CALIBRATE_Pin */
  GPIO_InitStruct.Pin = CALIBRATE_Pin;
 8006a98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8006a9c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8006a9e:	4b21      	ldr	r3, [pc, #132]	; (8006b24 <MX_GPIO_Init+0x134>)
 8006aa0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CALIBRATE_GPIO_Port, &GPIO_InitStruct);
 8006aa6:	f107 0314 	add.w	r3, r7, #20
 8006aaa:	4619      	mov	r1, r3
 8006aac:	481b      	ldr	r0, [pc, #108]	; (8006b1c <MX_GPIO_Init+0x12c>)
 8006aae:	f001 fd6d 	bl	800858c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_DC_Pin TS_CS_Pin */
  GPIO_InitStruct.Pin = LCD_DC_Pin|TS_CS_Pin;
 8006ab2:	f44f 7310 	mov.w	r3, #576	; 0x240
 8006ab6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ab8:	2301      	movs	r3, #1
 8006aba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006abc:	2300      	movs	r3, #0
 8006abe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006ac0:	2300      	movs	r3, #0
 8006ac2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006ac4:	f107 0314 	add.w	r3, r7, #20
 8006ac8:	4619      	mov	r1, r3
 8006aca:	4813      	ldr	r0, [pc, #76]	; (8006b18 <MX_GPIO_Init+0x128>)
 8006acc:	f001 fd5e 	bl	800858c <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_CS_Pin;
 8006ad0:	2330      	movs	r3, #48	; 0x30
 8006ad2:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ad4:	2301      	movs	r3, #1
 8006ad6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ad8:	2300      	movs	r3, #0
 8006ada:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006adc:	2300      	movs	r3, #0
 8006ade:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ae0:	f107 0314 	add.w	r3, r7, #20
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	480d      	ldr	r0, [pc, #52]	; (8006b1c <MX_GPIO_Init+0x12c>)
 8006ae8:	f001 fd50 	bl	800858c <HAL_GPIO_Init>

  /*Configure GPIO pin : MAX31865_CS_Pin */
  GPIO_InitStruct.Pin = MAX31865_CS_Pin;
 8006aec:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8006af0:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006af2:	2301      	movs	r3, #1
 8006af4:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006af6:	2300      	movs	r3, #0
 8006af8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006afa:	2300      	movs	r3, #0
 8006afc:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MAX31865_CS_GPIO_Port, &GPIO_InitStruct);
 8006afe:	f107 0314 	add.w	r3, r7, #20
 8006b02:	4619      	mov	r1, r3
 8006b04:	4806      	ldr	r0, [pc, #24]	; (8006b20 <MX_GPIO_Init+0x130>)
 8006b06:	f001 fd41 	bl	800858c <HAL_GPIO_Init>

}
 8006b0a:	bf00      	nop
 8006b0c:	3728      	adds	r7, #40	; 0x28
 8006b0e:	46bd      	mov	sp, r7
 8006b10:	bd80      	pop	{r7, pc}
 8006b12:	bf00      	nop
 8006b14:	40023800 	.word	0x40023800
 8006b18:	40020000 	.word	0x40020000
 8006b1c:	40020800 	.word	0x40020800
 8006b20:	40020400 	.word	0x40020400
 8006b24:	10210000 	.word	0x10210000

08006b28 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */
// When we get values from USB port, then read it directly
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8006b28:	b580      	push	{r7, lr}
 8006b2a:	b082      	sub	sp, #8
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	6078      	str	r0, [r7, #4]
	/* NOTE: This function should not be modified, when the callback is needed,
	 the HAL_UART_RxCpltCallback could be implemented in the user file
	 */

	// When we get 0x23 = '#', then send back new_output_float and new_input_float
	if (UART_RX_DATA[0] == 0x23) {
 8006b30:	4b1a      	ldr	r3, [pc, #104]	; (8006b9c <HAL_UART_RxCpltCallback+0x74>)
 8006b32:	781b      	ldrb	r3, [r3, #0]
 8006b34:	2b23      	cmp	r3, #35	; 0x23
 8006b36:	d12d      	bne.n	8006b94 <HAL_UART_RxCpltCallback+0x6c>
		convert.float_value = new_input_float;
 8006b38:	4b19      	ldr	r3, [pc, #100]	; (8006ba0 <HAL_UART_RxCpltCallback+0x78>)
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a19      	ldr	r2, [pc, #100]	; (8006ba4 <HAL_UART_RxCpltCallback+0x7c>)
 8006b3e:	6013      	str	r3, [r2, #0]
		UART_TX_DATA[0] = convert.uint8_values[0];
 8006b40:	4b18      	ldr	r3, [pc, #96]	; (8006ba4 <HAL_UART_RxCpltCallback+0x7c>)
 8006b42:	781a      	ldrb	r2, [r3, #0]
 8006b44:	4b18      	ldr	r3, [pc, #96]	; (8006ba8 <HAL_UART_RxCpltCallback+0x80>)
 8006b46:	701a      	strb	r2, [r3, #0]
		UART_TX_DATA[1] = convert.uint8_values[1];
 8006b48:	4b16      	ldr	r3, [pc, #88]	; (8006ba4 <HAL_UART_RxCpltCallback+0x7c>)
 8006b4a:	785a      	ldrb	r2, [r3, #1]
 8006b4c:	4b16      	ldr	r3, [pc, #88]	; (8006ba8 <HAL_UART_RxCpltCallback+0x80>)
 8006b4e:	705a      	strb	r2, [r3, #1]
		UART_TX_DATA[2] = convert.uint8_values[2];
 8006b50:	4b14      	ldr	r3, [pc, #80]	; (8006ba4 <HAL_UART_RxCpltCallback+0x7c>)
 8006b52:	789a      	ldrb	r2, [r3, #2]
 8006b54:	4b14      	ldr	r3, [pc, #80]	; (8006ba8 <HAL_UART_RxCpltCallback+0x80>)
 8006b56:	709a      	strb	r2, [r3, #2]
		UART_TX_DATA[3] = convert.uint8_values[3];
 8006b58:	4b12      	ldr	r3, [pc, #72]	; (8006ba4 <HAL_UART_RxCpltCallback+0x7c>)
 8006b5a:	78da      	ldrb	r2, [r3, #3]
 8006b5c:	4b12      	ldr	r3, [pc, #72]	; (8006ba8 <HAL_UART_RxCpltCallback+0x80>)
 8006b5e:	70da      	strb	r2, [r3, #3]
		convert.float_value = new_output_float;
 8006b60:	4b12      	ldr	r3, [pc, #72]	; (8006bac <HAL_UART_RxCpltCallback+0x84>)
 8006b62:	681b      	ldr	r3, [r3, #0]
 8006b64:	4a0f      	ldr	r2, [pc, #60]	; (8006ba4 <HAL_UART_RxCpltCallback+0x7c>)
 8006b66:	6013      	str	r3, [r2, #0]
		UART_TX_DATA[4] = convert.uint8_values[0];
 8006b68:	4b0e      	ldr	r3, [pc, #56]	; (8006ba4 <HAL_UART_RxCpltCallback+0x7c>)
 8006b6a:	781a      	ldrb	r2, [r3, #0]
 8006b6c:	4b0e      	ldr	r3, [pc, #56]	; (8006ba8 <HAL_UART_RxCpltCallback+0x80>)
 8006b6e:	711a      	strb	r2, [r3, #4]
		UART_TX_DATA[5] = convert.uint8_values[1];
 8006b70:	4b0c      	ldr	r3, [pc, #48]	; (8006ba4 <HAL_UART_RxCpltCallback+0x7c>)
 8006b72:	785a      	ldrb	r2, [r3, #1]
 8006b74:	4b0c      	ldr	r3, [pc, #48]	; (8006ba8 <HAL_UART_RxCpltCallback+0x80>)
 8006b76:	715a      	strb	r2, [r3, #5]
		UART_TX_DATA[6] = convert.uint8_values[2];
 8006b78:	4b0a      	ldr	r3, [pc, #40]	; (8006ba4 <HAL_UART_RxCpltCallback+0x7c>)
 8006b7a:	789a      	ldrb	r2, [r3, #2]
 8006b7c:	4b0a      	ldr	r3, [pc, #40]	; (8006ba8 <HAL_UART_RxCpltCallback+0x80>)
 8006b7e:	719a      	strb	r2, [r3, #6]
		UART_TX_DATA[7] = convert.uint8_values[3];
 8006b80:	4b08      	ldr	r3, [pc, #32]	; (8006ba4 <HAL_UART_RxCpltCallback+0x7c>)
 8006b82:	78da      	ldrb	r2, [r3, #3]
 8006b84:	4b08      	ldr	r3, [pc, #32]	; (8006ba8 <HAL_UART_RxCpltCallback+0x80>)
 8006b86:	71da      	strb	r2, [r3, #7]
		HAL_UART_Transmit(&huart2, UART_TX_DATA, 8, 10);
 8006b88:	230a      	movs	r3, #10
 8006b8a:	2208      	movs	r2, #8
 8006b8c:	4906      	ldr	r1, [pc, #24]	; (8006ba8 <HAL_UART_RxCpltCallback+0x80>)
 8006b8e:	4808      	ldr	r0, [pc, #32]	; (8006bb0 <HAL_UART_RxCpltCallback+0x88>)
 8006b90:	f004 f8b7 	bl	800ad02 <HAL_UART_Transmit>
	}

}
 8006b94:	bf00      	nop
 8006b96:	3708      	adds	r7, #8
 8006b98:	46bd      	mov	sp, r7
 8006b9a:	bd80      	pop	{r7, pc}
 8006b9c:	20005120 	.word	0x20005120
 8006ba0:	20000638 	.word	0x20000638
 8006ba4:	20005188 	.word	0x20005188
 8006ba8:	20005180 	.word	0x20005180
 8006bac:	20000634 	.word	0x20000634
 8006bb0:	20005140 	.word	0x20005140

08006bb4 <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8006bb4:	b480      	push	{r7}
 8006bb6:	b087      	sub	sp, #28
 8006bb8:	af00      	add	r7, sp, #0
 8006bba:	ed87 0a05 	vstr	s0, [r7, #20]
 8006bbe:	edc7 0a04 	vstr	s1, [r7, #16]
 8006bc2:	ed87 1a03 	vstr	s2, [r7, #12]
 8006bc6:	edc7 1a02 	vstr	s3, [r7, #8]
 8006bca:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8006bce:	ed97 7a05 	vldr	s14, [r7, #20]
 8006bd2:	edd7 7a04 	vldr	s15, [r7, #16]
 8006bd6:	ee37 7a67 	vsub.f32	s14, s14, s15
 8006bda:	edd7 6a01 	vldr	s13, [r7, #4]
 8006bde:	edd7 7a02 	vldr	s15, [r7, #8]
 8006be2:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8006be6:	ee67 6a27 	vmul.f32	s13, s14, s15
 8006bea:	ed97 7a03 	vldr	s14, [r7, #12]
 8006bee:	edd7 7a04 	vldr	s15, [r7, #16]
 8006bf2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8006bf6:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8006bfa:	edd7 7a02 	vldr	s15, [r7, #8]
 8006bfe:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8006c02:	eeb0 0a67 	vmov.f32	s0, s15
 8006c06:	371c      	adds	r7, #28
 8006c08:	46bd      	mov	sp, r7
 8006c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c0e:	4770      	bx	lr

08006c10 <create_state_space_model>:

void create_state_space_model(){
 8006c10:	b580      	push	{r7, lr}
 8006c12:	af00      	add	r7, sp, #0
	// Create first order white box model
	A[0] = -1/time_constant;
 8006c14:	4b20      	ldr	r3, [pc, #128]	; (8006c98 <create_state_space_model+0x88>)
 8006c16:	ed93 7a00 	vldr	s14, [r3]
 8006c1a:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8006c1e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c22:	4b1e      	ldr	r3, [pc, #120]	; (8006c9c <create_state_space_model+0x8c>)
 8006c24:	edc3 7a00 	vstr	s15, [r3]
	B[0] = 1/time_constant;
 8006c28:	4b1b      	ldr	r3, [pc, #108]	; (8006c98 <create_state_space_model+0x88>)
 8006c2a:	ed93 7a00 	vldr	s14, [r3]
 8006c2e:	eef7 6a00 	vmov.f32	s13, #112	; 0x3f800000  1.0
 8006c32:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8006c36:	4b1a      	ldr	r3, [pc, #104]	; (8006ca0 <create_state_space_model+0x90>)
 8006c38:	edc3 7a00 	vstr	s15, [r3]
	C[0] = 1;
 8006c3c:	4b19      	ldr	r3, [pc, #100]	; (8006ca4 <create_state_space_model+0x94>)
 8006c3e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006c42:	601a      	str	r2, [r3, #0]
	// Turn it do discrete with sampling time SAMPLING_TIME seconds
	c2d(A, B, 1, 1, SAMPLING_TIME);
 8006c44:	ed9f 0a18 	vldr	s0, [pc, #96]	; 8006ca8 <create_state_space_model+0x98>
 8006c48:	2301      	movs	r3, #1
 8006c4a:	2201      	movs	r2, #1
 8006c4c:	4914      	ldr	r1, [pc, #80]	; (8006ca0 <create_state_space_model+0x90>)
 8006c4e:	4813      	ldr	r0, [pc, #76]	; (8006c9c <create_state_space_model+0x8c>)
 8006c50:	f7fa f954 	bl	8000efc <c2d>
	// Create state space model with integral action
	Ai[0] = A[0];
 8006c54:	4b11      	ldr	r3, [pc, #68]	; (8006c9c <create_state_space_model+0x8c>)
 8006c56:	681b      	ldr	r3, [r3, #0]
 8006c58:	4a14      	ldr	r2, [pc, #80]	; (8006cac <create_state_space_model+0x9c>)
 8006c5a:	6013      	str	r3, [r2, #0]
	Ai[1] = B[0];
 8006c5c:	4b10      	ldr	r3, [pc, #64]	; (8006ca0 <create_state_space_model+0x90>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a12      	ldr	r2, [pc, #72]	; (8006cac <create_state_space_model+0x9c>)
 8006c62:	6053      	str	r3, [r2, #4]
	Ai[2] = 0;
 8006c64:	4b11      	ldr	r3, [pc, #68]	; (8006cac <create_state_space_model+0x9c>)
 8006c66:	f04f 0200 	mov.w	r2, #0
 8006c6a:	609a      	str	r2, [r3, #8]
	Ai[3] = 1;
 8006c6c:	4b0f      	ldr	r3, [pc, #60]	; (8006cac <create_state_space_model+0x9c>)
 8006c6e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006c72:	60da      	str	r2, [r3, #12]
	Bi[0] = 0;
 8006c74:	4b0e      	ldr	r3, [pc, #56]	; (8006cb0 <create_state_space_model+0xa0>)
 8006c76:	f04f 0200 	mov.w	r2, #0
 8006c7a:	601a      	str	r2, [r3, #0]
	Bi[1] = 1;
 8006c7c:	4b0c      	ldr	r3, [pc, #48]	; (8006cb0 <create_state_space_model+0xa0>)
 8006c7e:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006c82:	605a      	str	r2, [r3, #4]
	Ci[0] = C[0];
 8006c84:	4b07      	ldr	r3, [pc, #28]	; (8006ca4 <create_state_space_model+0x94>)
 8006c86:	681b      	ldr	r3, [r3, #0]
 8006c88:	4a0a      	ldr	r2, [pc, #40]	; (8006cb4 <create_state_space_model+0xa4>)
 8006c8a:	6013      	str	r3, [r2, #0]
	Ci[1] = 0;
 8006c8c:	4b09      	ldr	r3, [pc, #36]	; (8006cb4 <create_state_space_model+0xa4>)
 8006c8e:	f04f 0200 	mov.w	r2, #0
 8006c92:	605a      	str	r2, [r3, #4]

}
 8006c94:	bf00      	nop
 8006c96:	bd80      	pop	{r7, pc}
 8006c98:	20000004 	.word	0x20000004
 8006c9c:	20005008 	.word	0x20005008
 8006ca0:	20005114 	.word	0x20005114
 8006ca4:	20005118 	.word	0x20005118
 8006ca8:	42700000 	.word	0x42700000
 8006cac:	2000506c 	.word	0x2000506c
 8006cb0:	20005128 	.word	0x20005128
 8006cb4:	20005064 	.word	0x20005064

08006cb8 <LCD_TASK>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_LCD_TASK */
void LCD_TASK(void *argument)
{
 8006cb8:	b580      	push	{r7, lr}
 8006cba:	b092      	sub	sp, #72	; 0x48
 8006cbc:	af02      	add	r7, sp, #8
 8006cbe:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	for (;;) {
		// Read the LCD touch
		TSC2046_GetTouchData(&lcd_spi);
 8006cc0:	4899      	ldr	r0, [pc, #612]	; (8006f28 <LCD_TASK+0x270>)
 8006cc2:	f7fc ff81 	bl	8003bc8 <TSC2046_GetTouchData>
		uint8_t isPressed = lcd_spi.myTsData.isPressed;
 8006cc6:	4b98      	ldr	r3, [pc, #608]	; (8006f28 <LCD_TASK+0x270>)
 8006cc8:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8006ccc:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
		uint16_t X = lcd_spi.myTsData.X;
 8006cd0:	4b95      	ldr	r3, [pc, #596]	; (8006f28 <LCD_TASK+0x270>)
 8006cd2:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8006cd4:	87bb      	strh	r3, [r7, #60]	; 0x3c
		uint16_t Y = lcd_spi.myTsData.Y;
 8006cd6:	4b94      	ldr	r3, [pc, #592]	; (8006f28 <LCD_TASK+0x270>)
 8006cd8:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8006cda:	877b      	strh	r3, [r7, #58]	; 0x3a
		if (isPressed == true) {
 8006cdc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8006ce0:	2b01      	cmp	r3, #1
 8006ce2:	f040 8139 	bne.w	8006f58 <LCD_TASK+0x2a0>
			// Check which button we are pressing on
			if (X >= 8 && X <= 37 && Y >= 8 && Y <= 37) {
 8006ce6:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006ce8:	2b07      	cmp	r3, #7
 8006cea:	d931      	bls.n	8006d50 <LCD_TASK+0x98>
 8006cec:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006cee:	2b25      	cmp	r3, #37	; 0x25
 8006cf0:	d82e      	bhi.n	8006d50 <LCD_TASK+0x98>
 8006cf2:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006cf4:	2b07      	cmp	r3, #7
 8006cf6:	d92b      	bls.n	8006d50 <LCD_TASK+0x98>
 8006cf8:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006cfa:	2b25      	cmp	r3, #37	; 0x25
 8006cfc:	d828      	bhi.n	8006d50 <LCD_TASK+0x98>
				// Set point
				bool decimalbutton_show = true;
 8006cfe:	2301      	movs	r3, #1
 8006d00:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				bool minusbutton_show = false;
 8006d04:	2300      	movs	r3, #0
 8006d06:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
				show_num_pad_frame(&lcd_spi, decimalbutton_show, minusbutton_show, &setpoint, "Set setpoint <= 100");
 8006d0a:	f897 2032 	ldrb.w	r2, [r7, #50]	; 0x32
 8006d0e:	f897 1033 	ldrb.w	r1, [r7, #51]	; 0x33
 8006d12:	4b86      	ldr	r3, [pc, #536]	; (8006f2c <LCD_TASK+0x274>)
 8006d14:	9300      	str	r3, [sp, #0]
 8006d16:	4b86      	ldr	r3, [pc, #536]	; (8006f30 <LCD_TASK+0x278>)
 8006d18:	4883      	ldr	r0, [pc, #524]	; (8006f28 <LCD_TASK+0x270>)
 8006d1a:	f7fd f8bf 	bl	8003e9c <show_num_pad_frame>
				if (setpoint > 100)
 8006d1e:	4b84      	ldr	r3, [pc, #528]	; (8006f30 <LCD_TASK+0x278>)
 8006d20:	edd3 7a00 	vldr	s15, [r3]
 8006d24:	ed9f 7a83 	vldr	s14, [pc, #524]	; 8006f34 <LCD_TASK+0x27c>
 8006d28:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006d2c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d30:	dd02      	ble.n	8006d38 <LCD_TASK+0x80>
					setpoint = 100;
 8006d32:	4b7f      	ldr	r3, [pc, #508]	; (8006f30 <LCD_TASK+0x278>)
 8006d34:	4a80      	ldr	r2, [pc, #512]	; (8006f38 <LCD_TASK+0x280>)
 8006d36:	601a      	str	r2, [r3, #0]
				bool update_main_frame = true;
 8006d38:	2301      	movs	r3, #1
 8006d3a:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
				show_main_frame(&lcd_spi, closedloop_on, update_main_frame);
 8006d3e:	4b7f      	ldr	r3, [pc, #508]	; (8006f3c <LCD_TASK+0x284>)
 8006d40:	781b      	ldrb	r3, [r3, #0]
 8006d42:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8006d46:	4619      	mov	r1, r3
 8006d48:	4877      	ldr	r0, [pc, #476]	; (8006f28 <LCD_TASK+0x270>)
 8006d4a:	f7fc ffc9 	bl	8003ce0 <show_main_frame>
			if (X >= 8 && X <= 37 && Y >= 8 && Y <= 37) {
 8006d4e:	e14a      	b.n	8006fe6 <LCD_TASK+0x32e>
			} else if (X >= 8 && X <= 37 && Y >= 55 && Y <= 94) {
 8006d50:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006d52:	2b07      	cmp	r3, #7
 8006d54:	d93e      	bls.n	8006dd4 <LCD_TASK+0x11c>
 8006d56:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006d58:	2b25      	cmp	r3, #37	; 0x25
 8006d5a:	d83b      	bhi.n	8006dd4 <LCD_TASK+0x11c>
 8006d5c:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006d5e:	2b36      	cmp	r3, #54	; 0x36
 8006d60:	d938      	bls.n	8006dd4 <LCD_TASK+0x11c>
 8006d62:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006d64:	2b5e      	cmp	r3, #94	; 0x5e
 8006d66:	d835      	bhi.n	8006dd4 <LCD_TASK+0x11c>
				// Set horizon
				bool decimalbutton_show = false;
 8006d68:	2300      	movs	r3, #0
 8006d6a:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
				bool minusbutton_show = false;
 8006d6e:	2300      	movs	r3, #0
 8006d70:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
				show_num_pad_frame(&lcd_spi, decimalbutton_show, minusbutton_show, &horizon, "Set 0 < horizon <= 20");
 8006d74:	f897 202f 	ldrb.w	r2, [r7, #47]	; 0x2f
 8006d78:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8006d7c:	4b70      	ldr	r3, [pc, #448]	; (8006f40 <LCD_TASK+0x288>)
 8006d7e:	9300      	str	r3, [sp, #0]
 8006d80:	4b70      	ldr	r3, [pc, #448]	; (8006f44 <LCD_TASK+0x28c>)
 8006d82:	4869      	ldr	r0, [pc, #420]	; (8006f28 <LCD_TASK+0x270>)
 8006d84:	f7fd f88a 	bl	8003e9c <show_num_pad_frame>
				if(horizon == 0)
 8006d88:	4b6e      	ldr	r3, [pc, #440]	; (8006f44 <LCD_TASK+0x28c>)
 8006d8a:	edd3 7a00 	vldr	s15, [r3]
 8006d8e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8006d92:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006d96:	d104      	bne.n	8006da2 <LCD_TASK+0xea>
					horizon = 1;
 8006d98:	4b6a      	ldr	r3, [pc, #424]	; (8006f44 <LCD_TASK+0x28c>)
 8006d9a:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8006d9e:	601a      	str	r2, [r3, #0]
 8006da0:	e00c      	b.n	8006dbc <LCD_TASK+0x104>
				else if(horizon > 20)
 8006da2:	4b68      	ldr	r3, [pc, #416]	; (8006f44 <LCD_TASK+0x28c>)
 8006da4:	edd3 7a00 	vldr	s15, [r3]
 8006da8:	eeb3 7a04 	vmov.f32	s14, #52	; 0x41a00000  20.0
 8006dac:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006db0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006db4:	dd02      	ble.n	8006dbc <LCD_TASK+0x104>
					horizon = 20;
 8006db6:	4b63      	ldr	r3, [pc, #396]	; (8006f44 <LCD_TASK+0x28c>)
 8006db8:	4a63      	ldr	r2, [pc, #396]	; (8006f48 <LCD_TASK+0x290>)
 8006dba:	601a      	str	r2, [r3, #0]
				bool update_main_frame = true;
 8006dbc:	2301      	movs	r3, #1
 8006dbe:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
				show_main_frame(&lcd_spi, closedloop_on, update_main_frame);
 8006dc2:	4b5e      	ldr	r3, [pc, #376]	; (8006f3c <LCD_TASK+0x284>)
 8006dc4:	781b      	ldrb	r3, [r3, #0]
 8006dc6:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8006dca:	4619      	mov	r1, r3
 8006dcc:	4856      	ldr	r0, [pc, #344]	; (8006f28 <LCD_TASK+0x270>)
 8006dce:	f7fc ff87 	bl	8003ce0 <show_main_frame>
			} else if (X >= 8 && X <= 37 && Y >= 55 && Y <= 94) {
 8006dd2:	e108      	b.n	8006fe6 <LCD_TASK+0x32e>
			} else if (X >= 8 && X <= 37 && Y >= 100 && Y <= 139) {
 8006dd4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006dd6:	2b07      	cmp	r3, #7
 8006dd8:	d936      	bls.n	8006e48 <LCD_TASK+0x190>
 8006dda:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006ddc:	2b25      	cmp	r3, #37	; 0x25
 8006dde:	d833      	bhi.n	8006e48 <LCD_TASK+0x190>
 8006de0:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006de2:	2b63      	cmp	r3, #99	; 0x63
 8006de4:	d930      	bls.n	8006e48 <LCD_TASK+0x190>
 8006de6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006de8:	2b8b      	cmp	r3, #139	; 0x8b
 8006dea:	d82d      	bhi.n	8006e48 <LCD_TASK+0x190>
				// Set time constant
				bool decimalbutton_show = true;
 8006dec:	2301      	movs	r3, #1
 8006dee:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
				bool minusbutton_show = false;
 8006df2:	2300      	movs	r3, #0
 8006df4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
				show_num_pad_frame(&lcd_spi, decimalbutton_show, minusbutton_show, &time_constant, "Set time constant >= 0.01");
 8006df8:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 8006dfc:	f897 102d 	ldrb.w	r1, [r7, #45]	; 0x2d
 8006e00:	4b52      	ldr	r3, [pc, #328]	; (8006f4c <LCD_TASK+0x294>)
 8006e02:	9300      	str	r3, [sp, #0]
 8006e04:	4b52      	ldr	r3, [pc, #328]	; (8006f50 <LCD_TASK+0x298>)
 8006e06:	4848      	ldr	r0, [pc, #288]	; (8006f28 <LCD_TASK+0x270>)
 8006e08:	f7fd f848 	bl	8003e9c <show_num_pad_frame>
				if(time_constant < 0.01)
 8006e0c:	4b50      	ldr	r3, [pc, #320]	; (8006f50 <LCD_TASK+0x298>)
 8006e0e:	681b      	ldr	r3, [r3, #0]
 8006e10:	4618      	mov	r0, r3
 8006e12:	f7f9 fb69 	bl	80004e8 <__aeabi_f2d>
 8006e16:	a342      	add	r3, pc, #264	; (adr r3, 8006f20 <LCD_TASK+0x268>)
 8006e18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006e1c:	f7f9 fe2e 	bl	8000a7c <__aeabi_dcmplt>
 8006e20:	4603      	mov	r3, r0
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d002      	beq.n	8006e2c <LCD_TASK+0x174>
					time_constant = 0.01;
 8006e26:	4b4a      	ldr	r3, [pc, #296]	; (8006f50 <LCD_TASK+0x298>)
 8006e28:	4a4a      	ldr	r2, [pc, #296]	; (8006f54 <LCD_TASK+0x29c>)
 8006e2a:	601a      	str	r2, [r3, #0]
				create_state_space_model();
 8006e2c:	f7ff fef0 	bl	8006c10 <create_state_space_model>
				bool update_main_frame = true;
 8006e30:	2301      	movs	r3, #1
 8006e32:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
				show_main_frame(&lcd_spi, closedloop_on, update_main_frame);
 8006e36:	4b41      	ldr	r3, [pc, #260]	; (8006f3c <LCD_TASK+0x284>)
 8006e38:	781b      	ldrb	r3, [r3, #0]
 8006e3a:	f897 202b 	ldrb.w	r2, [r7, #43]	; 0x2b
 8006e3e:	4619      	mov	r1, r3
 8006e40:	4839      	ldr	r0, [pc, #228]	; (8006f28 <LCD_TASK+0x270>)
 8006e42:	f7fc ff4d 	bl	8003ce0 <show_main_frame>
			} else if (X >= 8 && X <= 37 && Y >= 100 && Y <= 139) {
 8006e46:	e0ce      	b.n	8006fe6 <LCD_TASK+0x32e>
			} else if (X >= 8 && X <= 37 && Y >= 146 && Y <= 185) {
 8006e48:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006e4a:	2b07      	cmp	r3, #7
 8006e4c:	d923      	bls.n	8006e96 <LCD_TASK+0x1de>
 8006e4e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006e50:	2b25      	cmp	r3, #37	; 0x25
 8006e52:	d820      	bhi.n	8006e96 <LCD_TASK+0x1de>
 8006e54:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006e56:	2b91      	cmp	r3, #145	; 0x91
 8006e58:	d91d      	bls.n	8006e96 <LCD_TASK+0x1de>
 8006e5a:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006e5c:	2bb9      	cmp	r3, #185	; 0xb9
 8006e5e:	d81a      	bhi.n	8006e96 <LCD_TASK+0x1de>
				// Open loop or closed loop
				if (closedloop_on == true)
 8006e60:	4b36      	ldr	r3, [pc, #216]	; (8006f3c <LCD_TASK+0x284>)
 8006e62:	781b      	ldrb	r3, [r3, #0]
 8006e64:	2b00      	cmp	r3, #0
 8006e66:	d003      	beq.n	8006e70 <LCD_TASK+0x1b8>
					closedloop_on = false;
 8006e68:	4b34      	ldr	r3, [pc, #208]	; (8006f3c <LCD_TASK+0x284>)
 8006e6a:	2200      	movs	r2, #0
 8006e6c:	701a      	strb	r2, [r3, #0]
 8006e6e:	e002      	b.n	8006e76 <LCD_TASK+0x1be>
				else
					closedloop_on = true;
 8006e70:	4b32      	ldr	r3, [pc, #200]	; (8006f3c <LCD_TASK+0x284>)
 8006e72:	2201      	movs	r2, #1
 8006e74:	701a      	strb	r2, [r3, #0]
				bool update_main_frame = false;
 8006e76:	2300      	movs	r3, #0
 8006e78:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
				osDelay(300); // Prevent double click
 8006e7c:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8006e80:	f004 fe0a 	bl	800ba98 <osDelay>
				show_main_frame(&lcd_spi, closedloop_on, update_main_frame);
 8006e84:	4b2d      	ldr	r3, [pc, #180]	; (8006f3c <LCD_TASK+0x284>)
 8006e86:	781b      	ldrb	r3, [r3, #0]
 8006e88:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8006e8c:	4619      	mov	r1, r3
 8006e8e:	4826      	ldr	r0, [pc, #152]	; (8006f28 <LCD_TASK+0x270>)
 8006e90:	f7fc ff26 	bl	8003ce0 <show_main_frame>
			} else if (X >= 8 && X <= 37 && Y >= 146 && Y <= 185) {
 8006e94:	e0a7      	b.n	8006fe6 <LCD_TASK+0x32e>
			} else if (X >= 8 && X <= 37 && Y >= 193 && Y <= 232) {
 8006e96:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006e98:	2b07      	cmp	r3, #7
 8006e9a:	f240 80a4 	bls.w	8006fe6 <LCD_TASK+0x32e>
 8006e9e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8006ea0:	2b25      	cmp	r3, #37	; 0x25
 8006ea2:	f200 80a0 	bhi.w	8006fe6 <LCD_TASK+0x32e>
 8006ea6:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006ea8:	2bc0      	cmp	r3, #192	; 0xc0
 8006eaa:	f240 809c 	bls.w	8006fe6 <LCD_TASK+0x32e>
 8006eae:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8006eb0:	2be8      	cmp	r3, #232	; 0xe8
 8006eb2:	f200 8098 	bhi.w	8006fe6 <LCD_TASK+0x32e>
				// Question dialog
				uint8_t choice = show_question_save_settings_dialog(&lcd_spi); // Return 1 as YES and 0 as NO
 8006eb6:	481c      	ldr	r0, [pc, #112]	; (8006f28 <LCD_TASK+0x270>)
 8006eb8:	f7fd fc1c 	bl	80046f4 <show_question_save_settings_dialog>
 8006ebc:	4603      	mov	r3, r0
 8006ebe:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				if (choice == 1) {
 8006ec2:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8006ec6:	2b01      	cmp	r3, #1
 8006ec8:	d11d      	bne.n	8006f06 <LCD_TASK+0x24e>
					// Save the touch calibration and the user settings
					float wrBuf[7] = { lcd_spi.myTS_Calibrate.Scale_X, lcd_spi.myTS_Calibrate.Scale_Y, lcd_spi.myTS_Calibrate.Bias_X, lcd_spi.myTS_Calibrate.Bias_Y, setpoint, horizon, time_constant};
 8006eca:	4b17      	ldr	r3, [pc, #92]	; (8006f28 <LCD_TASK+0x270>)
 8006ecc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ece:	60fb      	str	r3, [r7, #12]
 8006ed0:	4b15      	ldr	r3, [pc, #84]	; (8006f28 <LCD_TASK+0x270>)
 8006ed2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ed4:	613b      	str	r3, [r7, #16]
 8006ed6:	4b14      	ldr	r3, [pc, #80]	; (8006f28 <LCD_TASK+0x270>)
 8006ed8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8006eda:	617b      	str	r3, [r7, #20]
 8006edc:	4b12      	ldr	r3, [pc, #72]	; (8006f28 <LCD_TASK+0x270>)
 8006ede:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006ee0:	61bb      	str	r3, [r7, #24]
 8006ee2:	4b13      	ldr	r3, [pc, #76]	; (8006f30 <LCD_TASK+0x278>)
 8006ee4:	681b      	ldr	r3, [r3, #0]
 8006ee6:	61fb      	str	r3, [r7, #28]
 8006ee8:	4b16      	ldr	r3, [pc, #88]	; (8006f44 <LCD_TASK+0x28c>)
 8006eea:	681b      	ldr	r3, [r3, #0]
 8006eec:	623b      	str	r3, [r7, #32]
 8006eee:	4b18      	ldr	r3, [pc, #96]	; (8006f50 <LCD_TASK+0x298>)
 8006ef0:	681b      	ldr	r3, [r3, #0]
 8006ef2:	627b      	str	r3, [r7, #36]	; 0x24
					FlashEraseSector(); // Must clear first
 8006ef4:	f7fb fc2e 	bl	8002754 <FlashEraseSector>
					FlashWriteN(0, wrBuf, 7, DATA_TYPE_FLOAT);
 8006ef8:	f107 010c 	add.w	r1, r7, #12
 8006efc:	2303      	movs	r3, #3
 8006efe:	2207      	movs	r2, #7
 8006f00:	2000      	movs	r0, #0
 8006f02:	f7fb fc4d 	bl	80027a0 <FlashWriteN>
				}

				// Restore to normal again
				bool update_main_frame = true;
 8006f06:	2301      	movs	r3, #1
 8006f08:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
				show_main_frame(&lcd_spi, closedloop_on, update_main_frame);
 8006f0c:	4b0b      	ldr	r3, [pc, #44]	; (8006f3c <LCD_TASK+0x284>)
 8006f0e:	781b      	ldrb	r3, [r3, #0]
 8006f10:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8006f14:	4619      	mov	r1, r3
 8006f16:	4804      	ldr	r0, [pc, #16]	; (8006f28 <LCD_TASK+0x270>)
 8006f18:	f7fc fee2 	bl	8003ce0 <show_main_frame>
 8006f1c:	e063      	b.n	8006fe6 <LCD_TASK+0x32e>
 8006f1e:	bf00      	nop
 8006f20:	47ae147b 	.word	0x47ae147b
 8006f24:	3f847ae1 	.word	0x3f847ae1
 8006f28:	2000500c 	.word	0x2000500c
 8006f2c:	0800fff8 	.word	0x0800fff8
 8006f30:	20000630 	.word	0x20000630
 8006f34:	42c80000 	.word	0x42c80000
 8006f38:	42c80000 	.word	0x42c80000
 8006f3c:	2000062c 	.word	0x2000062c
 8006f40:	0801000c 	.word	0x0801000c
 8006f44:	20000000 	.word	0x20000000
 8006f48:	41a00000 	.word	0x41a00000
 8006f4c:	08010024 	.word	0x08010024
 8006f50:	20000004 	.word	0x20000004
 8006f54:	3c23d70a 	.word	0x3c23d70a
			}
		} else {
			// Maximum plot can show is value 203
			uint16_t new_output_uint = map(new_output_float, 0, 100, 0, 203);
 8006f58:	4b25      	ldr	r3, [pc, #148]	; (8006ff0 <LCD_TASK+0x338>)
 8006f5a:	edd3 7a00 	vldr	s15, [r3]
 8006f5e:	ed9f 2a25 	vldr	s4, [pc, #148]	; 8006ff4 <LCD_TASK+0x33c>
 8006f62:	eddf 1a25 	vldr	s3, [pc, #148]	; 8006ff8 <LCD_TASK+0x340>
 8006f66:	ed9f 1a25 	vldr	s2, [pc, #148]	; 8006ffc <LCD_TASK+0x344>
 8006f6a:	eddf 0a23 	vldr	s1, [pc, #140]	; 8006ff8 <LCD_TASK+0x340>
 8006f6e:	eeb0 0a67 	vmov.f32	s0, s15
 8006f72:	f7ff fe1f 	bl	8006bb4 <map>
 8006f76:	eef0 7a40 	vmov.f32	s15, s0
 8006f7a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006f7e:	ee17 3a90 	vmov	r3, s15
 8006f82:	873b      	strh	r3, [r7, #56]	; 0x38
			uint16_t new_input_uint = map(new_input_float, 0, 100, 0, 203);
 8006f84:	4b1e      	ldr	r3, [pc, #120]	; (8007000 <LCD_TASK+0x348>)
 8006f86:	edd3 7a00 	vldr	s15, [r3]
 8006f8a:	ed9f 2a1a 	vldr	s4, [pc, #104]	; 8006ff4 <LCD_TASK+0x33c>
 8006f8e:	eddf 1a1a 	vldr	s3, [pc, #104]	; 8006ff8 <LCD_TASK+0x340>
 8006f92:	ed9f 1a1a 	vldr	s2, [pc, #104]	; 8006ffc <LCD_TASK+0x344>
 8006f96:	eddf 0a18 	vldr	s1, [pc, #96]	; 8006ff8 <LCD_TASK+0x340>
 8006f9a:	eeb0 0a67 	vmov.f32	s0, s15
 8006f9e:	f7ff fe09 	bl	8006bb4 <map>
 8006fa2:	eef0 7a40 	vmov.f32	s15, s0
 8006fa6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006faa:	ee17 3a90 	vmov	r3, s15
 8006fae:	86fb      	strh	r3, [r7, #54]	; 0x36
			bool only_move_array = false;
 8006fb0:	2300      	movs	r3, #0
 8006fb2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
			bool clear_plot = false;
 8006fb6:	2300      	movs	r3, #0
 8006fb8:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
			show_plot_frame(&lcd_spi, new_input_float, new_output_float, new_input_uint, new_output_uint, only_move_array, clear_plot);
 8006fbc:	4b10      	ldr	r3, [pc, #64]	; (8007000 <LCD_TASK+0x348>)
 8006fbe:	edd3 7a00 	vldr	s15, [r3]
 8006fc2:	4b0b      	ldr	r3, [pc, #44]	; (8006ff0 <LCD_TASK+0x338>)
 8006fc4:	ed93 7a00 	vldr	s14, [r3]
 8006fc8:	f897 0035 	ldrb.w	r0, [r7, #53]	; 0x35
 8006fcc:	8f3a      	ldrh	r2, [r7, #56]	; 0x38
 8006fce:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8006fd0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8006fd4:	9300      	str	r3, [sp, #0]
 8006fd6:	4603      	mov	r3, r0
 8006fd8:	eef0 0a47 	vmov.f32	s1, s14
 8006fdc:	eeb0 0a67 	vmov.f32	s0, s15
 8006fe0:	4808      	ldr	r0, [pc, #32]	; (8007004 <LCD_TASK+0x34c>)
 8006fe2:	f7fd fc17 	bl	8004814 <show_plot_frame>
		}

		osDelay(1);
 8006fe6:	2001      	movs	r0, #1
 8006fe8:	f004 fd56 	bl	800ba98 <osDelay>
	for (;;) {
 8006fec:	e668      	b.n	8006cc0 <LCD_TASK+0x8>
 8006fee:	bf00      	nop
 8006ff0:	20000634 	.word	0x20000634
 8006ff4:	434b0000 	.word	0x434b0000
 8006ff8:	00000000 	.word	0x00000000
 8006ffc:	42c80000 	.word	0x42c80000
 8007000:	20000638 	.word	0x20000638
 8007004:	2000500c 	.word	0x2000500c

08007008 <CONTROL_TASK>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_CONTROL_TASK */
void CONTROL_TASK(void *argument)
{
 8007008:	b590      	push	{r4, r7, lr}
 800700a:	b093      	sub	sp, #76	; 0x4c
 800700c:	af08      	add	r7, sp, #32
 800700e:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN CONTROL_TASK */
	/* Infinite loop */

	/* Vectors */
	float xi[ADIMi] = { 0, 0 }; // Initial state vector with integral action
 8007010:	f04f 0300 	mov.w	r3, #0
 8007014:	61bb      	str	r3, [r7, #24]
 8007016:	f04f 0300 	mov.w	r3, #0
 800701a:	61fb      	str	r3, [r7, #28]
	float u[1] = { 0 }; // Input vector
 800701c:	f04f 0300 	mov.w	r3, #0
 8007020:	617b      	str	r3, [r7, #20]
	float y[1] = { 0 }; // Output vector
 8007022:	f04f 0300 	mov.w	r3, #0
 8007026:	613b      	str	r3, [r7, #16]
	float r[1] = { 0 }; // Reference vector
 8007028:	f04f 0300 	mov.w	r3, #0
 800702c:	60fb      	str	r3, [r7, #12]
	float delta = 0;
 800702e:	f04f 0300 	mov.w	r3, #0
 8007032:	623b      	str	r3, [r7, #32]
	float past = 0;
 8007034:	f04f 0300 	mov.w	r3, #0
 8007038:	627b      	str	r3, [r7, #36]	; 0x24

	for (;;) {
		// Perform control if...
		if (closedloop_on == true) {
 800703a:	4b7b      	ldr	r3, [pc, #492]	; (8007228 <CONTROL_TASK+0x220>)
 800703c:	781b      	ldrb	r3, [r3, #0]
 800703e:	2b00      	cmp	r3, #0
 8007040:	f000 80c9 	beq.w	80071d6 <CONTROL_TASK+0x1ce>
			// Reference
			r[0] = setpoint;
 8007044:	4b79      	ldr	r3, [pc, #484]	; (800722c <CONTROL_TASK+0x224>)
 8007046:	681b      	ldr	r3, [r3, #0]
 8007048:	60fb      	str	r3, [r7, #12]

			// Linear programming with MPC - Here we are using saturation due to non-ideal model
			if(r[0] > y[0]){
 800704a:	ed97 7a03 	vldr	s14, [r7, #12]
 800704e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007052:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8007056:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800705a:	dd22      	ble.n	80070a2 <CONTROL_TASK+0x9a>
				mpc(Ai, Bi, Ci, xi, u, r, ADIMi, YDIM, RDIM, horizon, 200, true); // 200 in iteration limit, true = integral action in the model
 800705c:	4b74      	ldr	r3, [pc, #464]	; (8007230 <CONTROL_TASK+0x228>)
 800705e:	edd3 7a00 	vldr	s15, [r3]
 8007062:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007066:	edc7 7a00 	vstr	s15, [r7]
 800706a:	683b      	ldr	r3, [r7, #0]
 800706c:	b2db      	uxtb	r3, r3
 800706e:	f107 0118 	add.w	r1, r7, #24
 8007072:	2201      	movs	r2, #1
 8007074:	9207      	str	r2, [sp, #28]
 8007076:	22c8      	movs	r2, #200	; 0xc8
 8007078:	9206      	str	r2, [sp, #24]
 800707a:	9305      	str	r3, [sp, #20]
 800707c:	2301      	movs	r3, #1
 800707e:	9304      	str	r3, [sp, #16]
 8007080:	2301      	movs	r3, #1
 8007082:	9303      	str	r3, [sp, #12]
 8007084:	2302      	movs	r3, #2
 8007086:	9302      	str	r3, [sp, #8]
 8007088:	f107 030c 	add.w	r3, r7, #12
 800708c:	9301      	str	r3, [sp, #4]
 800708e:	f107 0314 	add.w	r3, r7, #20
 8007092:	9300      	str	r3, [sp, #0]
 8007094:	460b      	mov	r3, r1
 8007096:	4a67      	ldr	r2, [pc, #412]	; (8007234 <CONTROL_TASK+0x22c>)
 8007098:	4967      	ldr	r1, [pc, #412]	; (8007238 <CONTROL_TASK+0x230>)
 800709a:	4868      	ldr	r0, [pc, #416]	; (800723c <CONTROL_TASK+0x234>)
 800709c:	f7fa f823 	bl	80010e6 <mpc>
 80070a0:	e002      	b.n	80070a8 <CONTROL_TASK+0xa0>
			}else{
				u[0] = 0;
 80070a2:	f04f 0300 	mov.w	r3, #0
 80070a6:	617b      	str	r3, [r7, #20]
			}

			// Integral state update for the model
			delta = u[0] - past;
 80070a8:	ed97 7a05 	vldr	s14, [r7, #20]
 80070ac:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 80070b0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80070b4:	edc7 7a08 	vstr	s15, [r7, #32]
			past = u[0];
 80070b8:	697b      	ldr	r3, [r7, #20]
 80070ba:	627b      	str	r3, [r7, #36]	; 0x24
			xi[0] = Ai[0]*xi[0] + Ai[1]*xi[1] + Bi[0]*delta + (y[0] - Ci[0]*xi[0]);
 80070bc:	4b5f      	ldr	r3, [pc, #380]	; (800723c <CONTROL_TASK+0x234>)
 80070be:	ed93 7a00 	vldr	s14, [r3]
 80070c2:	edd7 7a06 	vldr	s15, [r7, #24]
 80070c6:	ee27 7a27 	vmul.f32	s14, s14, s15
 80070ca:	4b5c      	ldr	r3, [pc, #368]	; (800723c <CONTROL_TASK+0x234>)
 80070cc:	edd3 6a01 	vldr	s13, [r3, #4]
 80070d0:	edd7 7a07 	vldr	s15, [r7, #28]
 80070d4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80070d8:	ee37 7a27 	vadd.f32	s14, s14, s15
 80070dc:	4b56      	ldr	r3, [pc, #344]	; (8007238 <CONTROL_TASK+0x230>)
 80070de:	edd3 6a00 	vldr	s13, [r3]
 80070e2:	edd7 7a08 	vldr	s15, [r7, #32]
 80070e6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80070ea:	ee37 7a27 	vadd.f32	s14, s14, s15
 80070ee:	edd7 6a04 	vldr	s13, [r7, #16]
 80070f2:	4b50      	ldr	r3, [pc, #320]	; (8007234 <CONTROL_TASK+0x22c>)
 80070f4:	ed93 6a00 	vldr	s12, [r3]
 80070f8:	edd7 7a06 	vldr	s15, [r7, #24]
 80070fc:	ee66 7a27 	vmul.f32	s15, s12, s15
 8007100:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007104:	ee77 7a27 	vadd.f32	s15, s14, s15
 8007108:	edc7 7a06 	vstr	s15, [r7, #24]
			xi[1] = Ai[2]*xi[0] + Ai[3]*xi[1] + Bi[1]*delta;
 800710c:	4b4b      	ldr	r3, [pc, #300]	; (800723c <CONTROL_TASK+0x234>)
 800710e:	ed93 7a02 	vldr	s14, [r3, #8]
 8007112:	edd7 7a06 	vldr	s15, [r7, #24]
 8007116:	ee27 7a27 	vmul.f32	s14, s14, s15
 800711a:	4b48      	ldr	r3, [pc, #288]	; (800723c <CONTROL_TASK+0x234>)
 800711c:	edd3 6a03 	vldr	s13, [r3, #12]
 8007120:	edd7 7a07 	vldr	s15, [r7, #28]
 8007124:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8007128:	ee37 7a27 	vadd.f32	s14, s14, s15
 800712c:	4b42      	ldr	r3, [pc, #264]	; (8007238 <CONTROL_TASK+0x230>)
 800712e:	edd3 6a01 	vldr	s13, [r3, #4]
 8007132:	edd7 7a08 	vldr	s15, [r7, #32]
 8007136:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800713a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800713e:	edc7 7a07 	vstr	s15, [r7, #28]

			// We will get very jumpy signals, prevent it
			if(delta < 0){
 8007142:	edd7 7a08 	vldr	s15, [r7, #32]
 8007146:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800714a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800714e:	d507      	bpl.n	8007160 <CONTROL_TASK+0x158>
				u[0] = -delta + u[0]; // past
 8007150:	ed97 7a05 	vldr	s14, [r7, #20]
 8007154:	edd7 7a08 	vldr	s15, [r7, #32]
 8007158:	ee77 7a67 	vsub.f32	s15, s14, s15
 800715c:	edc7 7a05 	vstr	s15, [r7, #20]
			}

			// Saturation and apply the inputs
			if(u[0] >= 100){
 8007160:	edd7 7a05 	vldr	s15, [r7, #20]
 8007164:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8007240 <CONTROL_TASK+0x238>
 8007168:	eef4 7ac7 	vcmpe.f32	s15, s14
 800716c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007170:	db08      	blt.n	8007184 <CONTROL_TASK+0x17c>
				htim3.Instance->CCR1 = 200.0 * 100; // 20000 = 100% PWM
 8007172:	4b34      	ldr	r3, [pc, #208]	; (8007244 <CONTROL_TASK+0x23c>)
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	f644 6220 	movw	r2, #20000	; 0x4e20
 800717a:	635a      	str	r2, [r3, #52]	; 0x34
				new_input_float = 100; // This is for the plot
 800717c:	4b32      	ldr	r3, [pc, #200]	; (8007248 <CONTROL_TASK+0x240>)
 800717e:	4a33      	ldr	r2, [pc, #204]	; (800724c <CONTROL_TASK+0x244>)
 8007180:	601a      	str	r2, [r3, #0]
 8007182:	e042      	b.n	800720a <CONTROL_TASK+0x202>
			}else if(u[0] <= 0){
 8007184:	edd7 7a05 	vldr	s15, [r7, #20]
 8007188:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800718c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007190:	d808      	bhi.n	80071a4 <CONTROL_TASK+0x19c>
				htim3.Instance->CCR1 = 200.0 * 0; // 20000 = 100% PWM
 8007192:	4b2c      	ldr	r3, [pc, #176]	; (8007244 <CONTROL_TASK+0x23c>)
 8007194:	681b      	ldr	r3, [r3, #0]
 8007196:	2200      	movs	r2, #0
 8007198:	635a      	str	r2, [r3, #52]	; 0x34
				new_input_float = 0; // This is for the plot
 800719a:	4b2b      	ldr	r3, [pc, #172]	; (8007248 <CONTROL_TASK+0x240>)
 800719c:	f04f 0200 	mov.w	r2, #0
 80071a0:	601a      	str	r2, [r3, #0]
 80071a2:	e032      	b.n	800720a <CONTROL_TASK+0x202>
			}else{
				htim3.Instance->CCR1 = 200.0 * u[0]; // 20000 = 100% PWM
 80071a4:	697b      	ldr	r3, [r7, #20]
 80071a6:	4618      	mov	r0, r3
 80071a8:	f7f9 f99e 	bl	80004e8 <__aeabi_f2d>
 80071ac:	f04f 0200 	mov.w	r2, #0
 80071b0:	4b27      	ldr	r3, [pc, #156]	; (8007250 <CONTROL_TASK+0x248>)
 80071b2:	f7f9 f9f1 	bl	8000598 <__aeabi_dmul>
 80071b6:	4603      	mov	r3, r0
 80071b8:	460c      	mov	r4, r1
 80071ba:	4619      	mov	r1, r3
 80071bc:	4622      	mov	r2, r4
 80071be:	4b21      	ldr	r3, [pc, #132]	; (8007244 <CONTROL_TASK+0x23c>)
 80071c0:	681c      	ldr	r4, [r3, #0]
 80071c2:	4608      	mov	r0, r1
 80071c4:	4611      	mov	r1, r2
 80071c6:	f7f9 fca9 	bl	8000b1c <__aeabi_d2uiz>
 80071ca:	4603      	mov	r3, r0
 80071cc:	6363      	str	r3, [r4, #52]	; 0x34
				new_input_float = u[0]; // This is for the plot
 80071ce:	697b      	ldr	r3, [r7, #20]
 80071d0:	4a1d      	ldr	r2, [pc, #116]	; (8007248 <CONTROL_TASK+0x240>)
 80071d2:	6013      	str	r3, [r2, #0]
 80071d4:	e019      	b.n	800720a <CONTROL_TASK+0x202>
			}


		} else {
			// Perform open loop control
			htim3.Instance->CCR1 = 200.0 * setpoint; // 20000 = 100% PWM
 80071d6:	4b15      	ldr	r3, [pc, #84]	; (800722c <CONTROL_TASK+0x224>)
 80071d8:	681b      	ldr	r3, [r3, #0]
 80071da:	4618      	mov	r0, r3
 80071dc:	f7f9 f984 	bl	80004e8 <__aeabi_f2d>
 80071e0:	f04f 0200 	mov.w	r2, #0
 80071e4:	4b1a      	ldr	r3, [pc, #104]	; (8007250 <CONTROL_TASK+0x248>)
 80071e6:	f7f9 f9d7 	bl	8000598 <__aeabi_dmul>
 80071ea:	4603      	mov	r3, r0
 80071ec:	460c      	mov	r4, r1
 80071ee:	4619      	mov	r1, r3
 80071f0:	4622      	mov	r2, r4
 80071f2:	4b14      	ldr	r3, [pc, #80]	; (8007244 <CONTROL_TASK+0x23c>)
 80071f4:	681c      	ldr	r4, [r3, #0]
 80071f6:	4608      	mov	r0, r1
 80071f8:	4611      	mov	r1, r2
 80071fa:	f7f9 fc8f 	bl	8000b1c <__aeabi_d2uiz>
 80071fe:	4603      	mov	r3, r0
 8007200:	6363      	str	r3, [r4, #52]	; 0x34
			new_input_float = setpoint; // This is for the plot
 8007202:	4b0a      	ldr	r3, [pc, #40]	; (800722c <CONTROL_TASK+0x224>)
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	4a10      	ldr	r2, [pc, #64]	; (8007248 <CONTROL_TASK+0x240>)
 8007208:	6013      	str	r3, [r2, #0]
		}
		// Read temperature
		y[0] = MAX31865_temperature(&temperature_spi);
 800720a:	4812      	ldr	r0, [pc, #72]	; (8007254 <CONTROL_TASK+0x24c>)
 800720c:	f7ff f8dc 	bl	80063c8 <MAX31865_temperature>
 8007210:	eef0 7a40 	vmov.f32	s15, s0
 8007214:	edc7 7a04 	vstr	s15, [r7, #16]
		new_output_float = y[0]; // This is for the plot
 8007218:	693b      	ldr	r3, [r7, #16]
 800721a:	4a0f      	ldr	r2, [pc, #60]	; (8007258 <CONTROL_TASK+0x250>)
 800721c:	6013      	str	r3, [r2, #0]

		osDelay(1);
 800721e:	2001      	movs	r0, #1
 8007220:	f004 fc3a 	bl	800ba98 <osDelay>
		if (closedloop_on == true) {
 8007224:	e709      	b.n	800703a <CONTROL_TASK+0x32>
 8007226:	bf00      	nop
 8007228:	2000062c 	.word	0x2000062c
 800722c:	20000630 	.word	0x20000630
 8007230:	20000000 	.word	0x20000000
 8007234:	20005064 	.word	0x20005064
 8007238:	20005128 	.word	0x20005128
 800723c:	2000506c 	.word	0x2000506c
 8007240:	42c80000 	.word	0x42c80000
 8007244:	2000507c 	.word	0x2000507c
 8007248:	20000638 	.word	0x20000638
 800724c:	42c80000 	.word	0x42c80000
 8007250:	40690000 	.word	0x40690000
 8007254:	20005130 	.word	0x20005130
 8007258:	20000634 	.word	0x20000634

0800725c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800725c:	b580      	push	{r7, lr}
 800725e:	b082      	sub	sp, #8
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM2) {
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	681b      	ldr	r3, [r3, #0]
 8007268:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800726c:	d101      	bne.n	8007272 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800726e:	f000 faef 	bl	8007850 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8007272:	bf00      	nop
 8007274:	3708      	adds	r7, #8
 8007276:	46bd      	mov	sp, r7
 8007278:	bd80      	pop	{r7, pc}

0800727a <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800727a:	b480      	push	{r7}
 800727c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 800727e:	bf00      	nop
 8007280:	46bd      	mov	sp, r7
 8007282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007286:	4770      	bx	lr

08007288 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8007288:	b580      	push	{r7, lr}
 800728a:	b082      	sub	sp, #8
 800728c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800728e:	2300      	movs	r3, #0
 8007290:	607b      	str	r3, [r7, #4]
 8007292:	4b12      	ldr	r3, [pc, #72]	; (80072dc <HAL_MspInit+0x54>)
 8007294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007296:	4a11      	ldr	r2, [pc, #68]	; (80072dc <HAL_MspInit+0x54>)
 8007298:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800729c:	6453      	str	r3, [r2, #68]	; 0x44
 800729e:	4b0f      	ldr	r3, [pc, #60]	; (80072dc <HAL_MspInit+0x54>)
 80072a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072a2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80072a6:	607b      	str	r3, [r7, #4]
 80072a8:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80072aa:	2300      	movs	r3, #0
 80072ac:	603b      	str	r3, [r7, #0]
 80072ae:	4b0b      	ldr	r3, [pc, #44]	; (80072dc <HAL_MspInit+0x54>)
 80072b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b2:	4a0a      	ldr	r2, [pc, #40]	; (80072dc <HAL_MspInit+0x54>)
 80072b4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80072b8:	6413      	str	r3, [r2, #64]	; 0x40
 80072ba:	4b08      	ldr	r3, [pc, #32]	; (80072dc <HAL_MspInit+0x54>)
 80072bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072be:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80072c2:	603b      	str	r3, [r7, #0]
 80072c4:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 80072c6:	2200      	movs	r2, #0
 80072c8:	210f      	movs	r1, #15
 80072ca:	f06f 0001 	mvn.w	r0, #1
 80072ce:	f000 fbb9 	bl	8007a44 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80072d2:	bf00      	nop
 80072d4:	3708      	adds	r7, #8
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	40023800 	.word	0x40023800

080072e0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80072e0:	b580      	push	{r7, lr}
 80072e2:	b08e      	sub	sp, #56	; 0x38
 80072e4:	af00      	add	r7, sp, #0
 80072e6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072e8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80072ec:	2200      	movs	r2, #0
 80072ee:	601a      	str	r2, [r3, #0]
 80072f0:	605a      	str	r2, [r3, #4]
 80072f2:	609a      	str	r2, [r3, #8]
 80072f4:	60da      	str	r2, [r3, #12]
 80072f6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI2)
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	681b      	ldr	r3, [r3, #0]
 80072fc:	4a59      	ldr	r2, [pc, #356]	; (8007464 <HAL_SPI_MspInit+0x184>)
 80072fe:	4293      	cmp	r3, r2
 8007300:	d15b      	bne.n	80073ba <HAL_SPI_MspInit+0xda>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8007302:	2300      	movs	r3, #0
 8007304:	623b      	str	r3, [r7, #32]
 8007306:	4b58      	ldr	r3, [pc, #352]	; (8007468 <HAL_SPI_MspInit+0x188>)
 8007308:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800730a:	4a57      	ldr	r2, [pc, #348]	; (8007468 <HAL_SPI_MspInit+0x188>)
 800730c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007310:	6413      	str	r3, [r2, #64]	; 0x40
 8007312:	4b55      	ldr	r3, [pc, #340]	; (8007468 <HAL_SPI_MspInit+0x188>)
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800731a:	623b      	str	r3, [r7, #32]
 800731c:	6a3b      	ldr	r3, [r7, #32]
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800731e:	2300      	movs	r3, #0
 8007320:	61fb      	str	r3, [r7, #28]
 8007322:	4b51      	ldr	r3, [pc, #324]	; (8007468 <HAL_SPI_MspInit+0x188>)
 8007324:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007326:	4a50      	ldr	r2, [pc, #320]	; (8007468 <HAL_SPI_MspInit+0x188>)
 8007328:	f043 0304 	orr.w	r3, r3, #4
 800732c:	6313      	str	r3, [r2, #48]	; 0x30
 800732e:	4b4e      	ldr	r3, [pc, #312]	; (8007468 <HAL_SPI_MspInit+0x188>)
 8007330:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007332:	f003 0304 	and.w	r3, r3, #4
 8007336:	61fb      	str	r3, [r7, #28]
 8007338:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800733a:	2300      	movs	r3, #0
 800733c:	61bb      	str	r3, [r7, #24]
 800733e:	4b4a      	ldr	r3, [pc, #296]	; (8007468 <HAL_SPI_MspInit+0x188>)
 8007340:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007342:	4a49      	ldr	r2, [pc, #292]	; (8007468 <HAL_SPI_MspInit+0x188>)
 8007344:	f043 0302 	orr.w	r3, r3, #2
 8007348:	6313      	str	r3, [r2, #48]	; 0x30
 800734a:	4b47      	ldr	r3, [pc, #284]	; (8007468 <HAL_SPI_MspInit+0x188>)
 800734c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734e:	f003 0302 	and.w	r3, r3, #2
 8007352:	61bb      	str	r3, [r7, #24]
 8007354:	69bb      	ldr	r3, [r7, #24]
    /**SPI2 GPIO Configuration    
    PC1     ------> SPI2_MOSI
    PC2     ------> SPI2_MISO
    PB10     ------> SPI2_SCK 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 8007356:	2302      	movs	r3, #2
 8007358:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800735a:	2302      	movs	r3, #2
 800735c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800735e:	2300      	movs	r3, #0
 8007360:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007362:	2303      	movs	r3, #3
 8007364:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI2;
 8007366:	2307      	movs	r3, #7
 8007368:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800736a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800736e:	4619      	mov	r1, r3
 8007370:	483e      	ldr	r0, [pc, #248]	; (800746c <HAL_SPI_MspInit+0x18c>)
 8007372:	f001 f90b 	bl	800858c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8007376:	2304      	movs	r3, #4
 8007378:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800737a:	2302      	movs	r3, #2
 800737c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800737e:	2300      	movs	r3, #0
 8007380:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007382:	2303      	movs	r3, #3
 8007384:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8007386:	2305      	movs	r3, #5
 8007388:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800738a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800738e:	4619      	mov	r1, r3
 8007390:	4836      	ldr	r0, [pc, #216]	; (800746c <HAL_SPI_MspInit+0x18c>)
 8007392:	f001 f8fb 	bl	800858c <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8007396:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800739a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800739c:	2302      	movs	r3, #2
 800739e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073a0:	2300      	movs	r3, #0
 80073a2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073a4:	2303      	movs	r3, #3
 80073a6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80073a8:	2305      	movs	r3, #5
 80073aa:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80073ac:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80073b0:	4619      	mov	r1, r3
 80073b2:	482f      	ldr	r0, [pc, #188]	; (8007470 <HAL_SPI_MspInit+0x190>)
 80073b4:	f001 f8ea 	bl	800858c <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI3_MspInit 1 */

  /* USER CODE END SPI3_MspInit 1 */
  }

}
 80073b8:	e04f      	b.n	800745a <HAL_SPI_MspInit+0x17a>
  else if(hspi->Instance==SPI3)
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	4a2d      	ldr	r2, [pc, #180]	; (8007474 <HAL_SPI_MspInit+0x194>)
 80073c0:	4293      	cmp	r3, r2
 80073c2:	d14a      	bne.n	800745a <HAL_SPI_MspInit+0x17a>
    __HAL_RCC_SPI3_CLK_ENABLE();
 80073c4:	2300      	movs	r3, #0
 80073c6:	617b      	str	r3, [r7, #20]
 80073c8:	4b27      	ldr	r3, [pc, #156]	; (8007468 <HAL_SPI_MspInit+0x188>)
 80073ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073cc:	4a26      	ldr	r2, [pc, #152]	; (8007468 <HAL_SPI_MspInit+0x188>)
 80073ce:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80073d2:	6413      	str	r3, [r2, #64]	; 0x40
 80073d4:	4b24      	ldr	r3, [pc, #144]	; (8007468 <HAL_SPI_MspInit+0x188>)
 80073d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80073dc:	617b      	str	r3, [r7, #20]
 80073de:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80073e0:	2300      	movs	r3, #0
 80073e2:	613b      	str	r3, [r7, #16]
 80073e4:	4b20      	ldr	r3, [pc, #128]	; (8007468 <HAL_SPI_MspInit+0x188>)
 80073e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e8:	4a1f      	ldr	r2, [pc, #124]	; (8007468 <HAL_SPI_MspInit+0x188>)
 80073ea:	f043 0302 	orr.w	r3, r3, #2
 80073ee:	6313      	str	r3, [r2, #48]	; 0x30
 80073f0:	4b1d      	ldr	r3, [pc, #116]	; (8007468 <HAL_SPI_MspInit+0x188>)
 80073f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073f4:	f003 0302 	and.w	r3, r3, #2
 80073f8:	613b      	str	r3, [r7, #16]
 80073fa:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80073fc:	2300      	movs	r3, #0
 80073fe:	60fb      	str	r3, [r7, #12]
 8007400:	4b19      	ldr	r3, [pc, #100]	; (8007468 <HAL_SPI_MspInit+0x188>)
 8007402:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007404:	4a18      	ldr	r2, [pc, #96]	; (8007468 <HAL_SPI_MspInit+0x188>)
 8007406:	f043 0304 	orr.w	r3, r3, #4
 800740a:	6313      	str	r3, [r2, #48]	; 0x30
 800740c:	4b16      	ldr	r3, [pc, #88]	; (8007468 <HAL_SPI_MspInit+0x188>)
 800740e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007410:	f003 0304 	and.w	r3, r3, #4
 8007414:	60fb      	str	r3, [r7, #12]
 8007416:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8007418:	2301      	movs	r3, #1
 800741a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800741c:	2302      	movs	r3, #2
 800741e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007420:	2300      	movs	r3, #0
 8007422:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007424:	2303      	movs	r3, #3
 8007426:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8007428:	2307      	movs	r3, #7
 800742a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800742c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007430:	4619      	mov	r1, r3
 8007432:	480f      	ldr	r0, [pc, #60]	; (8007470 <HAL_SPI_MspInit+0x190>)
 8007434:	f001 f8aa 	bl	800858c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8007438:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800743c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800743e:	2302      	movs	r3, #2
 8007440:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007442:	2300      	movs	r3, #0
 8007444:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007446:	2303      	movs	r3, #3
 8007448:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 800744a:	2306      	movs	r3, #6
 800744c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800744e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8007452:	4619      	mov	r1, r3
 8007454:	4805      	ldr	r0, [pc, #20]	; (800746c <HAL_SPI_MspInit+0x18c>)
 8007456:	f001 f899 	bl	800858c <HAL_GPIO_Init>
}
 800745a:	bf00      	nop
 800745c:	3738      	adds	r7, #56	; 0x38
 800745e:	46bd      	mov	sp, r7
 8007460:	bd80      	pop	{r7, pc}
 8007462:	bf00      	nop
 8007464:	40003800 	.word	0x40003800
 8007468:	40023800 	.word	0x40023800
 800746c:	40020800 	.word	0x40020800
 8007470:	40020400 	.word	0x40020400
 8007474:	40003c00 	.word	0x40003c00

08007478 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8007478:	b480      	push	{r7}
 800747a:	b085      	sub	sp, #20
 800747c:	af00      	add	r7, sp, #0
 800747e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM3)
 8007480:	687b      	ldr	r3, [r7, #4]
 8007482:	681b      	ldr	r3, [r3, #0]
 8007484:	4a0b      	ldr	r2, [pc, #44]	; (80074b4 <HAL_TIM_Base_MspInit+0x3c>)
 8007486:	4293      	cmp	r3, r2
 8007488:	d10d      	bne.n	80074a6 <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM3_MspInit 0 */

  /* USER CODE END TIM3_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM3_CLK_ENABLE();
 800748a:	2300      	movs	r3, #0
 800748c:	60fb      	str	r3, [r7, #12]
 800748e:	4b0a      	ldr	r3, [pc, #40]	; (80074b8 <HAL_TIM_Base_MspInit+0x40>)
 8007490:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007492:	4a09      	ldr	r2, [pc, #36]	; (80074b8 <HAL_TIM_Base_MspInit+0x40>)
 8007494:	f043 0302 	orr.w	r3, r3, #2
 8007498:	6413      	str	r3, [r2, #64]	; 0x40
 800749a:	4b07      	ldr	r3, [pc, #28]	; (80074b8 <HAL_TIM_Base_MspInit+0x40>)
 800749c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800749e:	f003 0302 	and.w	r3, r3, #2
 80074a2:	60fb      	str	r3, [r7, #12]
 80074a4:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80074a6:	bf00      	nop
 80074a8:	3714      	adds	r7, #20
 80074aa:	46bd      	mov	sp, r7
 80074ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074b0:	4770      	bx	lr
 80074b2:	bf00      	nop
 80074b4:	40000400 	.word	0x40000400
 80074b8:	40023800 	.word	0x40023800

080074bc <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80074bc:	b580      	push	{r7, lr}
 80074be:	b088      	sub	sp, #32
 80074c0:	af00      	add	r7, sp, #0
 80074c2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80074c4:	f107 030c 	add.w	r3, r7, #12
 80074c8:	2200      	movs	r2, #0
 80074ca:	601a      	str	r2, [r3, #0]
 80074cc:	605a      	str	r2, [r3, #4]
 80074ce:	609a      	str	r2, [r3, #8]
 80074d0:	60da      	str	r2, [r3, #12]
 80074d2:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	681b      	ldr	r3, [r3, #0]
 80074d8:	4a12      	ldr	r2, [pc, #72]	; (8007524 <HAL_TIM_MspPostInit+0x68>)
 80074da:	4293      	cmp	r3, r2
 80074dc:	d11d      	bne.n	800751a <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */
  
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80074de:	2300      	movs	r3, #0
 80074e0:	60bb      	str	r3, [r7, #8]
 80074e2:	4b11      	ldr	r3, [pc, #68]	; (8007528 <HAL_TIM_MspPostInit+0x6c>)
 80074e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074e6:	4a10      	ldr	r2, [pc, #64]	; (8007528 <HAL_TIM_MspPostInit+0x6c>)
 80074e8:	f043 0304 	orr.w	r3, r3, #4
 80074ec:	6313      	str	r3, [r2, #48]	; 0x30
 80074ee:	4b0e      	ldr	r3, [pc, #56]	; (8007528 <HAL_TIM_MspPostInit+0x6c>)
 80074f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80074f2:	f003 0304 	and.w	r3, r3, #4
 80074f6:	60bb      	str	r3, [r7, #8]
 80074f8:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration    
    PC6     ------> TIM3_CH1 
    */
    GPIO_InitStruct.Pin = RELAY_PWM_Pin;
 80074fa:	2340      	movs	r3, #64	; 0x40
 80074fc:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80074fe:	2302      	movs	r3, #2
 8007500:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007502:	2300      	movs	r3, #0
 8007504:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007506:	2300      	movs	r3, #0
 8007508:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800750a:	2302      	movs	r3, #2
 800750c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(RELAY_PWM_GPIO_Port, &GPIO_InitStruct);
 800750e:	f107 030c 	add.w	r3, r7, #12
 8007512:	4619      	mov	r1, r3
 8007514:	4805      	ldr	r0, [pc, #20]	; (800752c <HAL_TIM_MspPostInit+0x70>)
 8007516:	f001 f839 	bl	800858c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800751a:	bf00      	nop
 800751c:	3720      	adds	r7, #32
 800751e:	46bd      	mov	sp, r7
 8007520:	bd80      	pop	{r7, pc}
 8007522:	bf00      	nop
 8007524:	40000400 	.word	0x40000400
 8007528:	40023800 	.word	0x40023800
 800752c:	40020800 	.word	0x40020800

08007530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007530:	b580      	push	{r7, lr}
 8007532:	b08a      	sub	sp, #40	; 0x28
 8007534:	af00      	add	r7, sp, #0
 8007536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007538:	f107 0314 	add.w	r3, r7, #20
 800753c:	2200      	movs	r2, #0
 800753e:	601a      	str	r2, [r3, #0]
 8007540:	605a      	str	r2, [r3, #4]
 8007542:	609a      	str	r2, [r3, #8]
 8007544:	60da      	str	r2, [r3, #12]
 8007546:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8007548:	687b      	ldr	r3, [r7, #4]
 800754a:	681b      	ldr	r3, [r3, #0]
 800754c:	4a30      	ldr	r2, [pc, #192]	; (8007610 <HAL_UART_MspInit+0xe0>)
 800754e:	4293      	cmp	r3, r2
 8007550:	d15a      	bne.n	8007608 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8007552:	2300      	movs	r3, #0
 8007554:	613b      	str	r3, [r7, #16]
 8007556:	4b2f      	ldr	r3, [pc, #188]	; (8007614 <HAL_UART_MspInit+0xe4>)
 8007558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800755a:	4a2e      	ldr	r2, [pc, #184]	; (8007614 <HAL_UART_MspInit+0xe4>)
 800755c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007560:	6413      	str	r3, [r2, #64]	; 0x40
 8007562:	4b2c      	ldr	r3, [pc, #176]	; (8007614 <HAL_UART_MspInit+0xe4>)
 8007564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007566:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800756a:	613b      	str	r3, [r7, #16]
 800756c:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800756e:	2300      	movs	r3, #0
 8007570:	60fb      	str	r3, [r7, #12]
 8007572:	4b28      	ldr	r3, [pc, #160]	; (8007614 <HAL_UART_MspInit+0xe4>)
 8007574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007576:	4a27      	ldr	r2, [pc, #156]	; (8007614 <HAL_UART_MspInit+0xe4>)
 8007578:	f043 0301 	orr.w	r3, r3, #1
 800757c:	6313      	str	r3, [r2, #48]	; 0x30
 800757e:	4b25      	ldr	r3, [pc, #148]	; (8007614 <HAL_UART_MspInit+0xe4>)
 8007580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007582:	f003 0301 	and.w	r3, r3, #1
 8007586:	60fb      	str	r3, [r7, #12]
 8007588:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800758a:	230c      	movs	r3, #12
 800758c:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800758e:	2302      	movs	r3, #2
 8007590:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007592:	2300      	movs	r3, #0
 8007594:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007596:	2303      	movs	r3, #3
 8007598:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800759a:	2307      	movs	r3, #7
 800759c:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800759e:	f107 0314 	add.w	r3, r7, #20
 80075a2:	4619      	mov	r1, r3
 80075a4:	481c      	ldr	r0, [pc, #112]	; (8007618 <HAL_UART_MspInit+0xe8>)
 80075a6:	f000 fff1 	bl	800858c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 80075aa:	4b1c      	ldr	r3, [pc, #112]	; (800761c <HAL_UART_MspInit+0xec>)
 80075ac:	4a1c      	ldr	r2, [pc, #112]	; (8007620 <HAL_UART_MspInit+0xf0>)
 80075ae:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 80075b0:	4b1a      	ldr	r3, [pc, #104]	; (800761c <HAL_UART_MspInit+0xec>)
 80075b2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80075b6:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80075b8:	4b18      	ldr	r3, [pc, #96]	; (800761c <HAL_UART_MspInit+0xec>)
 80075ba:	2200      	movs	r2, #0
 80075bc:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80075be:	4b17      	ldr	r3, [pc, #92]	; (800761c <HAL_UART_MspInit+0xec>)
 80075c0:	2200      	movs	r2, #0
 80075c2:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80075c4:	4b15      	ldr	r3, [pc, #84]	; (800761c <HAL_UART_MspInit+0xec>)
 80075c6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80075ca:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80075cc:	4b13      	ldr	r3, [pc, #76]	; (800761c <HAL_UART_MspInit+0xec>)
 80075ce:	2200      	movs	r2, #0
 80075d0:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80075d2:	4b12      	ldr	r3, [pc, #72]	; (800761c <HAL_UART_MspInit+0xec>)
 80075d4:	2200      	movs	r2, #0
 80075d6:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 80075d8:	4b10      	ldr	r3, [pc, #64]	; (800761c <HAL_UART_MspInit+0xec>)
 80075da:	f44f 7280 	mov.w	r2, #256	; 0x100
 80075de:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80075e0:	4b0e      	ldr	r3, [pc, #56]	; (800761c <HAL_UART_MspInit+0xec>)
 80075e2:	2200      	movs	r2, #0
 80075e4:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80075e6:	4b0d      	ldr	r3, [pc, #52]	; (800761c <HAL_UART_MspInit+0xec>)
 80075e8:	2200      	movs	r2, #0
 80075ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80075ec:	480b      	ldr	r0, [pc, #44]	; (800761c <HAL_UART_MspInit+0xec>)
 80075ee:	f000 fa53 	bl	8007a98 <HAL_DMA_Init>
 80075f2:	4603      	mov	r3, r0
 80075f4:	2b00      	cmp	r3, #0
 80075f6:	d001      	beq.n	80075fc <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80075f8:	f7ff fe3f 	bl	800727a <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	4a07      	ldr	r2, [pc, #28]	; (800761c <HAL_UART_MspInit+0xec>)
 8007600:	635a      	str	r2, [r3, #52]	; 0x34
 8007602:	4a06      	ldr	r2, [pc, #24]	; (800761c <HAL_UART_MspInit+0xec>)
 8007604:	687b      	ldr	r3, [r7, #4]
 8007606:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 8007608:	bf00      	nop
 800760a:	3728      	adds	r7, #40	; 0x28
 800760c:	46bd      	mov	sp, r7
 800760e:	bd80      	pop	{r7, pc}
 8007610:	40004400 	.word	0x40004400
 8007614:	40023800 	.word	0x40023800
 8007618:	40020000 	.word	0x40020000
 800761c:	20004f50 	.word	0x20004f50
 8007620:	40026088 	.word	0x40026088

08007624 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007624:	b580      	push	{r7, lr}
 8007626:	b08c      	sub	sp, #48	; 0x30
 8007628:	af00      	add	r7, sp, #0
 800762a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 800762c:	2300      	movs	r3, #0
 800762e:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 8007630:	2300      	movs	r3, #0
 8007632:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM2 IRQ priority */
  HAL_NVIC_SetPriority(TIM2_IRQn, TickPriority ,0); 
 8007634:	2200      	movs	r2, #0
 8007636:	6879      	ldr	r1, [r7, #4]
 8007638:	201c      	movs	r0, #28
 800763a:	f000 fa03 	bl	8007a44 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM2 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM2_IRQn); 
 800763e:	201c      	movs	r0, #28
 8007640:	f000 fa1c 	bl	8007a7c <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM2 clock */
  __HAL_RCC_TIM2_CLK_ENABLE();
 8007644:	2300      	movs	r3, #0
 8007646:	60fb      	str	r3, [r7, #12]
 8007648:	4b20      	ldr	r3, [pc, #128]	; (80076cc <HAL_InitTick+0xa8>)
 800764a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800764c:	4a1f      	ldr	r2, [pc, #124]	; (80076cc <HAL_InitTick+0xa8>)
 800764e:	f043 0301 	orr.w	r3, r3, #1
 8007652:	6413      	str	r3, [r2, #64]	; 0x40
 8007654:	4b1d      	ldr	r3, [pc, #116]	; (80076cc <HAL_InitTick+0xa8>)
 8007656:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007658:	f003 0301 	and.w	r3, r3, #1
 800765c:	60fb      	str	r3, [r7, #12]
 800765e:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8007660:	f107 0210 	add.w	r2, r7, #16
 8007664:	f107 0314 	add.w	r3, r7, #20
 8007668:	4611      	mov	r1, r2
 800766a:	4618      	mov	r0, r3
 800766c:	f001 fa6c 	bl	8008b48 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM2 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8007670:	f001 fa42 	bl	8008af8 <HAL_RCC_GetPCLK1Freq>
 8007674:	4603      	mov	r3, r0
 8007676:	005b      	lsls	r3, r3, #1
 8007678:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM2 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 800767a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800767c:	4a14      	ldr	r2, [pc, #80]	; (80076d0 <HAL_InitTick+0xac>)
 800767e:	fba2 2303 	umull	r2, r3, r2, r3
 8007682:	0c9b      	lsrs	r3, r3, #18
 8007684:	3b01      	subs	r3, #1
 8007686:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM2 */
  htim2.Instance = TIM2;
 8007688:	4b12      	ldr	r3, [pc, #72]	; (80076d4 <HAL_InitTick+0xb0>)
 800768a:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800768e:	601a      	str	r2, [r3, #0]
  + Period = [(TIM2CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim2.Init.Period = (1000000 / 1000) - 1;
 8007690:	4b10      	ldr	r3, [pc, #64]	; (80076d4 <HAL_InitTick+0xb0>)
 8007692:	f240 32e7 	movw	r2, #999	; 0x3e7
 8007696:	60da      	str	r2, [r3, #12]
  htim2.Init.Prescaler = uwPrescalerValue;
 8007698:	4a0e      	ldr	r2, [pc, #56]	; (80076d4 <HAL_InitTick+0xb0>)
 800769a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800769c:	6053      	str	r3, [r2, #4]
  htim2.Init.ClockDivision = 0;
 800769e:	4b0d      	ldr	r3, [pc, #52]	; (80076d4 <HAL_InitTick+0xb0>)
 80076a0:	2200      	movs	r2, #0
 80076a2:	611a      	str	r2, [r3, #16]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80076a4:	4b0b      	ldr	r3, [pc, #44]	; (80076d4 <HAL_InitTick+0xb0>)
 80076a6:	2200      	movs	r2, #0
 80076a8:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim2) == HAL_OK)
 80076aa:	480a      	ldr	r0, [pc, #40]	; (80076d4 <HAL_InitTick+0xb0>)
 80076ac:	f002 fbcc 	bl	8009e48 <HAL_TIM_Base_Init>
 80076b0:	4603      	mov	r3, r0
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d104      	bne.n	80076c0 <HAL_InitTick+0x9c>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim2);
 80076b6:	4807      	ldr	r0, [pc, #28]	; (80076d4 <HAL_InitTick+0xb0>)
 80076b8:	f002 fbf1 	bl	8009e9e <HAL_TIM_Base_Start_IT>
 80076bc:	4603      	mov	r3, r0
 80076be:	e000      	b.n	80076c2 <HAL_InitTick+0x9e>
  }
  
  /* Return function status */
  return HAL_ERROR;
 80076c0:	2301      	movs	r3, #1
}
 80076c2:	4618      	mov	r0, r3
 80076c4:	3730      	adds	r7, #48	; 0x30
 80076c6:	46bd      	mov	sp, r7
 80076c8:	bd80      	pop	{r7, pc}
 80076ca:	bf00      	nop
 80076cc:	40023800 	.word	0x40023800
 80076d0:	431bde83 	.word	0x431bde83
 80076d4:	2000518c 	.word	0x2000518c

080076d8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80076d8:	b480      	push	{r7}
 80076da:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80076dc:	bf00      	nop
 80076de:	46bd      	mov	sp, r7
 80076e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076e4:	4770      	bx	lr

080076e6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80076e6:	b480      	push	{r7}
 80076e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80076ea:	e7fe      	b.n	80076ea <HardFault_Handler+0x4>

080076ec <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80076ec:	b480      	push	{r7}
 80076ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80076f0:	e7fe      	b.n	80076f0 <MemManage_Handler+0x4>

080076f2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80076f2:	b480      	push	{r7}
 80076f4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80076f6:	e7fe      	b.n	80076f6 <BusFault_Handler+0x4>

080076f8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80076f8:	b480      	push	{r7}
 80076fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80076fc:	e7fe      	b.n	80076fc <UsageFault_Handler+0x4>

080076fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80076fe:	b480      	push	{r7}
 8007700:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007702:	bf00      	nop
 8007704:	46bd      	mov	sp, r7
 8007706:	f85d 7b04 	ldr.w	r7, [sp], #4
 800770a:	4770      	bx	lr

0800770c <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 800770c:	b580      	push	{r7, lr}
 800770e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8007710:	4802      	ldr	r0, [pc, #8]	; (800771c <DMA1_Stream5_IRQHandler+0x10>)
 8007712:	f000 fac7 	bl	8007ca4 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8007716:	bf00      	nop
 8007718:	bd80      	pop	{r7, pc}
 800771a:	bf00      	nop
 800771c:	20004f50 	.word	0x20004f50

08007720 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007724:	4802      	ldr	r0, [pc, #8]	; (8007730 <TIM2_IRQHandler+0x10>)
 8007726:	f002 fc51 	bl	8009fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800772a:	bf00      	nop
 800772c:	bd80      	pop	{r7, pc}
 800772e:	bf00      	nop
 8007730:	2000518c 	.word	0x2000518c

08007734 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8007734:	b580      	push	{r7, lr}
 8007736:	b084      	sub	sp, #16
 8007738:	af00      	add	r7, sp, #0
 800773a:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 800773c:	4b11      	ldr	r3, [pc, #68]	; (8007784 <_sbrk+0x50>)
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	2b00      	cmp	r3, #0
 8007742:	d102      	bne.n	800774a <_sbrk+0x16>
		heap_end = &end;
 8007744:	4b0f      	ldr	r3, [pc, #60]	; (8007784 <_sbrk+0x50>)
 8007746:	4a10      	ldr	r2, [pc, #64]	; (8007788 <_sbrk+0x54>)
 8007748:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 800774a:	4b0e      	ldr	r3, [pc, #56]	; (8007784 <_sbrk+0x50>)
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8007750:	4b0c      	ldr	r3, [pc, #48]	; (8007784 <_sbrk+0x50>)
 8007752:	681a      	ldr	r2, [r3, #0]
 8007754:	687b      	ldr	r3, [r7, #4]
 8007756:	4413      	add	r3, r2
 8007758:	466a      	mov	r2, sp
 800775a:	4293      	cmp	r3, r2
 800775c:	d907      	bls.n	800776e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 800775e:	f006 fdc9 	bl	800e2f4 <__errno>
 8007762:	4602      	mov	r2, r0
 8007764:	230c      	movs	r3, #12
 8007766:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8007768:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800776c:	e006      	b.n	800777c <_sbrk+0x48>
	}

	heap_end += incr;
 800776e:	4b05      	ldr	r3, [pc, #20]	; (8007784 <_sbrk+0x50>)
 8007770:	681a      	ldr	r2, [r3, #0]
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	4413      	add	r3, r2
 8007776:	4a03      	ldr	r2, [pc, #12]	; (8007784 <_sbrk+0x50>)
 8007778:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 800777a:	68fb      	ldr	r3, [r7, #12]
}
 800777c:	4618      	mov	r0, r3
 800777e:	3710      	adds	r7, #16
 8007780:	46bd      	mov	sp, r7
 8007782:	bd80      	pop	{r7, pc}
 8007784:	2000063c 	.word	0x2000063c
 8007788:	20005238 	.word	0x20005238

0800778c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800778c:	b480      	push	{r7}
 800778e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007790:	4b08      	ldr	r3, [pc, #32]	; (80077b4 <SystemInit+0x28>)
 8007792:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007796:	4a07      	ldr	r2, [pc, #28]	; (80077b4 <SystemInit+0x28>)
 8007798:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800779c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80077a0:	4b04      	ldr	r3, [pc, #16]	; (80077b4 <SystemInit+0x28>)
 80077a2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80077a6:	609a      	str	r2, [r3, #8]
#endif
}
 80077a8:	bf00      	nop
 80077aa:	46bd      	mov	sp, r7
 80077ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b0:	4770      	bx	lr
 80077b2:	bf00      	nop
 80077b4:	e000ed00 	.word	0xe000ed00

080077b8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 80077b8:	f8df d034 	ldr.w	sp, [pc, #52]	; 80077f0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 80077bc:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 80077be:	e003      	b.n	80077c8 <LoopCopyDataInit>

080077c0 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 80077c0:	4b0c      	ldr	r3, [pc, #48]	; (80077f4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 80077c2:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 80077c4:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 80077c6:	3104      	adds	r1, #4

080077c8 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 80077c8:	480b      	ldr	r0, [pc, #44]	; (80077f8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 80077ca:	4b0c      	ldr	r3, [pc, #48]	; (80077fc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 80077cc:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 80077ce:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 80077d0:	d3f6      	bcc.n	80077c0 <CopyDataInit>
  ldr  r2, =_sbss
 80077d2:	4a0b      	ldr	r2, [pc, #44]	; (8007800 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 80077d4:	e002      	b.n	80077dc <LoopFillZerobss>

080077d6 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 80077d6:	2300      	movs	r3, #0
  str  r3, [r2], #4
 80077d8:	f842 3b04 	str.w	r3, [r2], #4

080077dc <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 80077dc:	4b09      	ldr	r3, [pc, #36]	; (8007804 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 80077de:	429a      	cmp	r2, r3
  bcc  FillZerobss
 80077e0:	d3f9      	bcc.n	80077d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80077e2:	f7ff ffd3 	bl	800778c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80077e6:	f006 fd8b 	bl	800e300 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80077ea:	f7fe fe79 	bl	80064e0 <main>
  bx  lr    
 80077ee:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80077f0:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 80077f4:	08044e10 	.word	0x08044e10
  ldr  r0, =_sdata
 80077f8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 80077fc:	200001e8 	.word	0x200001e8
  ldr  r2, =_sbss
 8007800:	200001e8 	.word	0x200001e8
  ldr  r3, = _ebss
 8007804:	20005234 	.word	0x20005234

08007808 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8007808:	e7fe      	b.n	8007808 <ADC_IRQHandler>
	...

0800780c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800780c:	b580      	push	{r7, lr}
 800780e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007810:	4b0e      	ldr	r3, [pc, #56]	; (800784c <HAL_Init+0x40>)
 8007812:	681b      	ldr	r3, [r3, #0]
 8007814:	4a0d      	ldr	r2, [pc, #52]	; (800784c <HAL_Init+0x40>)
 8007816:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800781a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800781c:	4b0b      	ldr	r3, [pc, #44]	; (800784c <HAL_Init+0x40>)
 800781e:	681b      	ldr	r3, [r3, #0]
 8007820:	4a0a      	ldr	r2, [pc, #40]	; (800784c <HAL_Init+0x40>)
 8007822:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007826:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8007828:	4b08      	ldr	r3, [pc, #32]	; (800784c <HAL_Init+0x40>)
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	4a07      	ldr	r2, [pc, #28]	; (800784c <HAL_Init+0x40>)
 800782e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007832:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007834:	2003      	movs	r0, #3
 8007836:	f000 f8fa 	bl	8007a2e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800783a:	2000      	movs	r0, #0
 800783c:	f7ff fef2 	bl	8007624 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007840:	f7ff fd22 	bl	8007288 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007844:	2300      	movs	r3, #0
}
 8007846:	4618      	mov	r0, r3
 8007848:	bd80      	pop	{r7, pc}
 800784a:	bf00      	nop
 800784c:	40023c00 	.word	0x40023c00

08007850 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8007850:	b480      	push	{r7}
 8007852:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007854:	4b06      	ldr	r3, [pc, #24]	; (8007870 <HAL_IncTick+0x20>)
 8007856:	781b      	ldrb	r3, [r3, #0]
 8007858:	461a      	mov	r2, r3
 800785a:	4b06      	ldr	r3, [pc, #24]	; (8007874 <HAL_IncTick+0x24>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4413      	add	r3, r2
 8007860:	4a04      	ldr	r2, [pc, #16]	; (8007874 <HAL_IncTick+0x24>)
 8007862:	6013      	str	r3, [r2, #0]
}
 8007864:	bf00      	nop
 8007866:	46bd      	mov	sp, r7
 8007868:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786c:	4770      	bx	lr
 800786e:	bf00      	nop
 8007870:	20000010 	.word	0x20000010
 8007874:	200051cc 	.word	0x200051cc

08007878 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8007878:	b480      	push	{r7}
 800787a:	af00      	add	r7, sp, #0
  return uwTick;
 800787c:	4b03      	ldr	r3, [pc, #12]	; (800788c <HAL_GetTick+0x14>)
 800787e:	681b      	ldr	r3, [r3, #0]
}
 8007880:	4618      	mov	r0, r3
 8007882:	46bd      	mov	sp, r7
 8007884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007888:	4770      	bx	lr
 800788a:	bf00      	nop
 800788c:	200051cc 	.word	0x200051cc

08007890 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8007890:	b580      	push	{r7, lr}
 8007892:	b084      	sub	sp, #16
 8007894:	af00      	add	r7, sp, #0
 8007896:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8007898:	f7ff ffee 	bl	8007878 <HAL_GetTick>
 800789c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80078a2:	68fb      	ldr	r3, [r7, #12]
 80078a4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80078a8:	d005      	beq.n	80078b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80078aa:	4b09      	ldr	r3, [pc, #36]	; (80078d0 <HAL_Delay+0x40>)
 80078ac:	781b      	ldrb	r3, [r3, #0]
 80078ae:	461a      	mov	r2, r3
 80078b0:	68fb      	ldr	r3, [r7, #12]
 80078b2:	4413      	add	r3, r2
 80078b4:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80078b6:	bf00      	nop
 80078b8:	f7ff ffde 	bl	8007878 <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	68bb      	ldr	r3, [r7, #8]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	68fa      	ldr	r2, [r7, #12]
 80078c4:	429a      	cmp	r2, r3
 80078c6:	d8f7      	bhi.n	80078b8 <HAL_Delay+0x28>
  {
  }
}
 80078c8:	bf00      	nop
 80078ca:	3710      	adds	r7, #16
 80078cc:	46bd      	mov	sp, r7
 80078ce:	bd80      	pop	{r7, pc}
 80078d0:	20000010 	.word	0x20000010

080078d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80078d4:	b480      	push	{r7}
 80078d6:	b085      	sub	sp, #20
 80078d8:	af00      	add	r7, sp, #0
 80078da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	f003 0307 	and.w	r3, r3, #7
 80078e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80078e4:	4b0c      	ldr	r3, [pc, #48]	; (8007918 <__NVIC_SetPriorityGrouping+0x44>)
 80078e6:	68db      	ldr	r3, [r3, #12]
 80078e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80078ea:	68ba      	ldr	r2, [r7, #8]
 80078ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80078f0:	4013      	ands	r3, r2
 80078f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80078f8:	68bb      	ldr	r3, [r7, #8]
 80078fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80078fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007900:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007904:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007906:	4a04      	ldr	r2, [pc, #16]	; (8007918 <__NVIC_SetPriorityGrouping+0x44>)
 8007908:	68bb      	ldr	r3, [r7, #8]
 800790a:	60d3      	str	r3, [r2, #12]
}
 800790c:	bf00      	nop
 800790e:	3714      	adds	r7, #20
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	e000ed00 	.word	0xe000ed00

0800791c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800791c:	b480      	push	{r7}
 800791e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007920:	4b04      	ldr	r3, [pc, #16]	; (8007934 <__NVIC_GetPriorityGrouping+0x18>)
 8007922:	68db      	ldr	r3, [r3, #12]
 8007924:	0a1b      	lsrs	r3, r3, #8
 8007926:	f003 0307 	and.w	r3, r3, #7
}
 800792a:	4618      	mov	r0, r3
 800792c:	46bd      	mov	sp, r7
 800792e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007932:	4770      	bx	lr
 8007934:	e000ed00 	.word	0xe000ed00

08007938 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007938:	b480      	push	{r7}
 800793a:	b083      	sub	sp, #12
 800793c:	af00      	add	r7, sp, #0
 800793e:	4603      	mov	r3, r0
 8007940:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007942:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007946:	2b00      	cmp	r3, #0
 8007948:	db0b      	blt.n	8007962 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800794a:	79fb      	ldrb	r3, [r7, #7]
 800794c:	f003 021f 	and.w	r2, r3, #31
 8007950:	4907      	ldr	r1, [pc, #28]	; (8007970 <__NVIC_EnableIRQ+0x38>)
 8007952:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007956:	095b      	lsrs	r3, r3, #5
 8007958:	2001      	movs	r0, #1
 800795a:	fa00 f202 	lsl.w	r2, r0, r2
 800795e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007962:	bf00      	nop
 8007964:	370c      	adds	r7, #12
 8007966:	46bd      	mov	sp, r7
 8007968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800796c:	4770      	bx	lr
 800796e:	bf00      	nop
 8007970:	e000e100 	.word	0xe000e100

08007974 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8007974:	b480      	push	{r7}
 8007976:	b083      	sub	sp, #12
 8007978:	af00      	add	r7, sp, #0
 800797a:	4603      	mov	r3, r0
 800797c:	6039      	str	r1, [r7, #0]
 800797e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007980:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007984:	2b00      	cmp	r3, #0
 8007986:	db0a      	blt.n	800799e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8007988:	683b      	ldr	r3, [r7, #0]
 800798a:	b2da      	uxtb	r2, r3
 800798c:	490c      	ldr	r1, [pc, #48]	; (80079c0 <__NVIC_SetPriority+0x4c>)
 800798e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007992:	0112      	lsls	r2, r2, #4
 8007994:	b2d2      	uxtb	r2, r2
 8007996:	440b      	add	r3, r1
 8007998:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800799c:	e00a      	b.n	80079b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800799e:	683b      	ldr	r3, [r7, #0]
 80079a0:	b2da      	uxtb	r2, r3
 80079a2:	4908      	ldr	r1, [pc, #32]	; (80079c4 <__NVIC_SetPriority+0x50>)
 80079a4:	79fb      	ldrb	r3, [r7, #7]
 80079a6:	f003 030f 	and.w	r3, r3, #15
 80079aa:	3b04      	subs	r3, #4
 80079ac:	0112      	lsls	r2, r2, #4
 80079ae:	b2d2      	uxtb	r2, r2
 80079b0:	440b      	add	r3, r1
 80079b2:	761a      	strb	r2, [r3, #24]
}
 80079b4:	bf00      	nop
 80079b6:	370c      	adds	r7, #12
 80079b8:	46bd      	mov	sp, r7
 80079ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079be:	4770      	bx	lr
 80079c0:	e000e100 	.word	0xe000e100
 80079c4:	e000ed00 	.word	0xe000ed00

080079c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80079c8:	b480      	push	{r7}
 80079ca:	b089      	sub	sp, #36	; 0x24
 80079cc:	af00      	add	r7, sp, #0
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80079d4:	68fb      	ldr	r3, [r7, #12]
 80079d6:	f003 0307 	and.w	r3, r3, #7
 80079da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80079dc:	69fb      	ldr	r3, [r7, #28]
 80079de:	f1c3 0307 	rsb	r3, r3, #7
 80079e2:	2b04      	cmp	r3, #4
 80079e4:	bf28      	it	cs
 80079e6:	2304      	movcs	r3, #4
 80079e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80079ea:	69fb      	ldr	r3, [r7, #28]
 80079ec:	3304      	adds	r3, #4
 80079ee:	2b06      	cmp	r3, #6
 80079f0:	d902      	bls.n	80079f8 <NVIC_EncodePriority+0x30>
 80079f2:	69fb      	ldr	r3, [r7, #28]
 80079f4:	3b03      	subs	r3, #3
 80079f6:	e000      	b.n	80079fa <NVIC_EncodePriority+0x32>
 80079f8:	2300      	movs	r3, #0
 80079fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80079fc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8007a00:	69bb      	ldr	r3, [r7, #24]
 8007a02:	fa02 f303 	lsl.w	r3, r2, r3
 8007a06:	43da      	mvns	r2, r3
 8007a08:	68bb      	ldr	r3, [r7, #8]
 8007a0a:	401a      	ands	r2, r3
 8007a0c:	697b      	ldr	r3, [r7, #20]
 8007a0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007a10:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8007a14:	697b      	ldr	r3, [r7, #20]
 8007a16:	fa01 f303 	lsl.w	r3, r1, r3
 8007a1a:	43d9      	mvns	r1, r3
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007a20:	4313      	orrs	r3, r2
         );
}
 8007a22:	4618      	mov	r0, r3
 8007a24:	3724      	adds	r7, #36	; 0x24
 8007a26:	46bd      	mov	sp, r7
 8007a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a2c:	4770      	bx	lr

08007a2e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007a2e:	b580      	push	{r7, lr}
 8007a30:	b082      	sub	sp, #8
 8007a32:	af00      	add	r7, sp, #0
 8007a34:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007a36:	6878      	ldr	r0, [r7, #4]
 8007a38:	f7ff ff4c 	bl	80078d4 <__NVIC_SetPriorityGrouping>
}
 8007a3c:	bf00      	nop
 8007a3e:	3708      	adds	r7, #8
 8007a40:	46bd      	mov	sp, r7
 8007a42:	bd80      	pop	{r7, pc}

08007a44 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007a44:	b580      	push	{r7, lr}
 8007a46:	b086      	sub	sp, #24
 8007a48:	af00      	add	r7, sp, #0
 8007a4a:	4603      	mov	r3, r0
 8007a4c:	60b9      	str	r1, [r7, #8]
 8007a4e:	607a      	str	r2, [r7, #4]
 8007a50:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007a52:	2300      	movs	r3, #0
 8007a54:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007a56:	f7ff ff61 	bl	800791c <__NVIC_GetPriorityGrouping>
 8007a5a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a5c:	687a      	ldr	r2, [r7, #4]
 8007a5e:	68b9      	ldr	r1, [r7, #8]
 8007a60:	6978      	ldr	r0, [r7, #20]
 8007a62:	f7ff ffb1 	bl	80079c8 <NVIC_EncodePriority>
 8007a66:	4602      	mov	r2, r0
 8007a68:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a6c:	4611      	mov	r1, r2
 8007a6e:	4618      	mov	r0, r3
 8007a70:	f7ff ff80 	bl	8007974 <__NVIC_SetPriority>
}
 8007a74:	bf00      	nop
 8007a76:	3718      	adds	r7, #24
 8007a78:	46bd      	mov	sp, r7
 8007a7a:	bd80      	pop	{r7, pc}

08007a7c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a7c:	b580      	push	{r7, lr}
 8007a7e:	b082      	sub	sp, #8
 8007a80:	af00      	add	r7, sp, #0
 8007a82:	4603      	mov	r3, r0
 8007a84:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a8a:	4618      	mov	r0, r3
 8007a8c:	f7ff ff54 	bl	8007938 <__NVIC_EnableIRQ>
}
 8007a90:	bf00      	nop
 8007a92:	3708      	adds	r7, #8
 8007a94:	46bd      	mov	sp, r7
 8007a96:	bd80      	pop	{r7, pc}

08007a98 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8007a98:	b580      	push	{r7, lr}
 8007a9a:	b086      	sub	sp, #24
 8007a9c:	af00      	add	r7, sp, #0
 8007a9e:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8007aa0:	2300      	movs	r3, #0
 8007aa2:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8007aa4:	f7ff fee8 	bl	8007878 <HAL_GetTick>
 8007aa8:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	2b00      	cmp	r3, #0
 8007aae:	d101      	bne.n	8007ab4 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e099      	b.n	8007be8 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2200      	movs	r2, #0
 8007ab8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	2202      	movs	r2, #2
 8007ac0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	681a      	ldr	r2, [r3, #0]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f022 0201 	bic.w	r2, r2, #1
 8007ad2:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007ad4:	e00f      	b.n	8007af6 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007ad6:	f7ff fecf 	bl	8007878 <HAL_GetTick>
 8007ada:	4602      	mov	r2, r0
 8007adc:	693b      	ldr	r3, [r7, #16]
 8007ade:	1ad3      	subs	r3, r2, r3
 8007ae0:	2b05      	cmp	r3, #5
 8007ae2:	d908      	bls.n	8007af6 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	2220      	movs	r2, #32
 8007ae8:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2203      	movs	r2, #3
 8007aee:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8007af2:	2303      	movs	r3, #3
 8007af4:	e078      	b.n	8007be8 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	681b      	ldr	r3, [r3, #0]
 8007afa:	681b      	ldr	r3, [r3, #0]
 8007afc:	f003 0301 	and.w	r3, r3, #1
 8007b00:	2b00      	cmp	r3, #0
 8007b02:	d1e8      	bne.n	8007ad6 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8007b04:	687b      	ldr	r3, [r7, #4]
 8007b06:	681b      	ldr	r3, [r3, #0]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8007b0c:	697a      	ldr	r2, [r7, #20]
 8007b0e:	4b38      	ldr	r3, [pc, #224]	; (8007bf0 <HAL_DMA_Init+0x158>)
 8007b10:	4013      	ands	r3, r2
 8007b12:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	685a      	ldr	r2, [r3, #4]
 8007b18:	687b      	ldr	r3, [r7, #4]
 8007b1a:	689b      	ldr	r3, [r3, #8]
 8007b1c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b22:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b24:	687b      	ldr	r3, [r7, #4]
 8007b26:	691b      	ldr	r3, [r3, #16]
 8007b28:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8007b2e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	699b      	ldr	r3, [r3, #24]
 8007b34:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8007b3a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6a1b      	ldr	r3, [r3, #32]
 8007b40:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8007b42:	697a      	ldr	r2, [r7, #20]
 8007b44:	4313      	orrs	r3, r2
 8007b46:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b4c:	2b04      	cmp	r3, #4
 8007b4e:	d107      	bne.n	8007b60 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007b58:	4313      	orrs	r3, r2
 8007b5a:	697a      	ldr	r2, [r7, #20]
 8007b5c:	4313      	orrs	r3, r2
 8007b5e:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	697a      	ldr	r2, [r7, #20]
 8007b66:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8007b68:	687b      	ldr	r3, [r7, #4]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	695b      	ldr	r3, [r3, #20]
 8007b6e:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8007b70:	697b      	ldr	r3, [r7, #20]
 8007b72:	f023 0307 	bic.w	r3, r3, #7
 8007b76:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b7c:	697a      	ldr	r2, [r7, #20]
 8007b7e:	4313      	orrs	r3, r2
 8007b80:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b86:	2b04      	cmp	r3, #4
 8007b88:	d117      	bne.n	8007bba <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b8e:	697a      	ldr	r2, [r7, #20]
 8007b90:	4313      	orrs	r3, r2
 8007b92:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b98:	2b00      	cmp	r3, #0
 8007b9a:	d00e      	beq.n	8007bba <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8007b9c:	6878      	ldr	r0, [r7, #4]
 8007b9e:	f000 fa6f 	bl	8008080 <DMA_CheckFifoParam>
 8007ba2:	4603      	mov	r3, r0
 8007ba4:	2b00      	cmp	r3, #0
 8007ba6:	d008      	beq.n	8007bba <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8007ba8:	687b      	ldr	r3, [r7, #4]
 8007baa:	2240      	movs	r2, #64	; 0x40
 8007bac:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	2201      	movs	r2, #1
 8007bb2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	e016      	b.n	8007be8 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	697a      	ldr	r2, [r7, #20]
 8007bc0:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8007bc2:	6878      	ldr	r0, [r7, #4]
 8007bc4:	f000 fa26 	bl	8008014 <DMA_CalcBaseAndBitshift>
 8007bc8:	4603      	mov	r3, r0
 8007bca:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007bd0:	223f      	movs	r2, #63	; 0x3f
 8007bd2:	409a      	lsls	r2, r3
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	2200      	movs	r2, #0
 8007bdc:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8007bde:	687b      	ldr	r3, [r7, #4]
 8007be0:	2201      	movs	r2, #1
 8007be2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8007be6:	2300      	movs	r3, #0
}
 8007be8:	4618      	mov	r0, r3
 8007bea:	3718      	adds	r7, #24
 8007bec:	46bd      	mov	sp, r7
 8007bee:	bd80      	pop	{r7, pc}
 8007bf0:	f010803f 	.word	0xf010803f

08007bf4 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007bf4:	b580      	push	{r7, lr}
 8007bf6:	b086      	sub	sp, #24
 8007bf8:	af00      	add	r7, sp, #0
 8007bfa:	60f8      	str	r0, [r7, #12]
 8007bfc:	60b9      	str	r1, [r7, #8]
 8007bfe:	607a      	str	r2, [r7, #4]
 8007c00:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007c02:	2300      	movs	r3, #0
 8007c04:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007c06:	68fb      	ldr	r3, [r7, #12]
 8007c08:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007c0a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8007c0c:	68fb      	ldr	r3, [r7, #12]
 8007c0e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c12:	2b01      	cmp	r3, #1
 8007c14:	d101      	bne.n	8007c1a <HAL_DMA_Start_IT+0x26>
 8007c16:	2302      	movs	r3, #2
 8007c18:	e040      	b.n	8007c9c <HAL_DMA_Start_IT+0xa8>
 8007c1a:	68fb      	ldr	r3, [r7, #12]
 8007c1c:	2201      	movs	r2, #1
 8007c1e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8007c22:	68fb      	ldr	r3, [r7, #12]
 8007c24:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007c28:	b2db      	uxtb	r3, r3
 8007c2a:	2b01      	cmp	r3, #1
 8007c2c:	d12f      	bne.n	8007c8e <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8007c2e:	68fb      	ldr	r3, [r7, #12]
 8007c30:	2202      	movs	r2, #2
 8007c32:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8007c36:	68fb      	ldr	r3, [r7, #12]
 8007c38:	2200      	movs	r2, #0
 8007c3a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8007c3c:	683b      	ldr	r3, [r7, #0]
 8007c3e:	687a      	ldr	r2, [r7, #4]
 8007c40:	68b9      	ldr	r1, [r7, #8]
 8007c42:	68f8      	ldr	r0, [r7, #12]
 8007c44:	f000 f9b8 	bl	8007fb8 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007c48:	68fb      	ldr	r3, [r7, #12]
 8007c4a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007c4c:	223f      	movs	r2, #63	; 0x3f
 8007c4e:	409a      	lsls	r2, r3
 8007c50:	693b      	ldr	r3, [r7, #16]
 8007c52:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8007c54:	68fb      	ldr	r3, [r7, #12]
 8007c56:	681b      	ldr	r3, [r3, #0]
 8007c58:	681a      	ldr	r2, [r3, #0]
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	681b      	ldr	r3, [r3, #0]
 8007c5e:	f042 0216 	orr.w	r2, r2, #22
 8007c62:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8007c64:	68fb      	ldr	r3, [r7, #12]
 8007c66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007c68:	2b00      	cmp	r3, #0
 8007c6a:	d007      	beq.n	8007c7c <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8007c6c:	68fb      	ldr	r3, [r7, #12]
 8007c6e:	681b      	ldr	r3, [r3, #0]
 8007c70:	681a      	ldr	r2, [r3, #0]
 8007c72:	68fb      	ldr	r3, [r7, #12]
 8007c74:	681b      	ldr	r3, [r3, #0]
 8007c76:	f042 0208 	orr.w	r2, r2, #8
 8007c7a:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8007c7c:	68fb      	ldr	r3, [r7, #12]
 8007c7e:	681b      	ldr	r3, [r3, #0]
 8007c80:	681a      	ldr	r2, [r3, #0]
 8007c82:	68fb      	ldr	r3, [r7, #12]
 8007c84:	681b      	ldr	r3, [r3, #0]
 8007c86:	f042 0201 	orr.w	r2, r2, #1
 8007c8a:	601a      	str	r2, [r3, #0]
 8007c8c:	e005      	b.n	8007c9a <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8007c8e:	68fb      	ldr	r3, [r7, #12]
 8007c90:	2200      	movs	r2, #0
 8007c92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8007c96:	2302      	movs	r3, #2
 8007c98:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8007c9a:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c9c:	4618      	mov	r0, r3
 8007c9e:	3718      	adds	r7, #24
 8007ca0:	46bd      	mov	sp, r7
 8007ca2:	bd80      	pop	{r7, pc}

08007ca4 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b086      	sub	sp, #24
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8007cac:	2300      	movs	r3, #0
 8007cae:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8007cb0:	4b92      	ldr	r3, [pc, #584]	; (8007efc <HAL_DMA_IRQHandler+0x258>)
 8007cb2:	681b      	ldr	r3, [r3, #0]
 8007cb4:	4a92      	ldr	r2, [pc, #584]	; (8007f00 <HAL_DMA_IRQHandler+0x25c>)
 8007cb6:	fba2 2303 	umull	r2, r3, r2, r3
 8007cba:	0a9b      	lsrs	r3, r3, #10
 8007cbc:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007cc2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8007cc4:	693b      	ldr	r3, [r7, #16]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cce:	2208      	movs	r2, #8
 8007cd0:	409a      	lsls	r2, r3
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	4013      	ands	r3, r2
 8007cd6:	2b00      	cmp	r3, #0
 8007cd8:	d01a      	beq.n	8007d10 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8007cda:	687b      	ldr	r3, [r7, #4]
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	681b      	ldr	r3, [r3, #0]
 8007ce0:	f003 0304 	and.w	r3, r3, #4
 8007ce4:	2b00      	cmp	r3, #0
 8007ce6:	d013      	beq.n	8007d10 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	681b      	ldr	r3, [r3, #0]
 8007cec:	681a      	ldr	r2, [r3, #0]
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	f022 0204 	bic.w	r2, r2, #4
 8007cf6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8007cf8:	687b      	ldr	r3, [r7, #4]
 8007cfa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007cfc:	2208      	movs	r2, #8
 8007cfe:	409a      	lsls	r2, r3
 8007d00:	693b      	ldr	r3, [r7, #16]
 8007d02:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d08:	f043 0201 	orr.w	r2, r3, #1
 8007d0c:	687b      	ldr	r3, [r7, #4]
 8007d0e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d14:	2201      	movs	r2, #1
 8007d16:	409a      	lsls	r2, r3
 8007d18:	68fb      	ldr	r3, [r7, #12]
 8007d1a:	4013      	ands	r3, r2
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d012      	beq.n	8007d46 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	695b      	ldr	r3, [r3, #20]
 8007d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d2a:	2b00      	cmp	r3, #0
 8007d2c:	d00b      	beq.n	8007d46 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d32:	2201      	movs	r2, #1
 8007d34:	409a      	lsls	r2, r3
 8007d36:	693b      	ldr	r3, [r7, #16]
 8007d38:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d3e:	f043 0202 	orr.w	r2, r3, #2
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8007d46:	687b      	ldr	r3, [r7, #4]
 8007d48:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d4a:	2204      	movs	r2, #4
 8007d4c:	409a      	lsls	r2, r3
 8007d4e:	68fb      	ldr	r3, [r7, #12]
 8007d50:	4013      	ands	r3, r2
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d012      	beq.n	8007d7c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	681b      	ldr	r3, [r3, #0]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 0302 	and.w	r3, r3, #2
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d00b      	beq.n	8007d7c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8007d64:	687b      	ldr	r3, [r7, #4]
 8007d66:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d68:	2204      	movs	r2, #4
 8007d6a:	409a      	lsls	r2, r3
 8007d6c:	693b      	ldr	r3, [r7, #16]
 8007d6e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007d74:	f043 0204 	orr.w	r2, r3, #4
 8007d78:	687b      	ldr	r3, [r7, #4]
 8007d7a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8007d7c:	687b      	ldr	r3, [r7, #4]
 8007d7e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d80:	2210      	movs	r2, #16
 8007d82:	409a      	lsls	r2, r3
 8007d84:	68fb      	ldr	r3, [r7, #12]
 8007d86:	4013      	ands	r3, r2
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d043      	beq.n	8007e14 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8007d8c:	687b      	ldr	r3, [r7, #4]
 8007d8e:	681b      	ldr	r3, [r3, #0]
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 0308 	and.w	r3, r3, #8
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d03c      	beq.n	8007e14 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8007d9a:	687b      	ldr	r3, [r7, #4]
 8007d9c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007d9e:	2210      	movs	r2, #16
 8007da0:	409a      	lsls	r2, r3
 8007da2:	693b      	ldr	r3, [r7, #16]
 8007da4:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007db0:	2b00      	cmp	r3, #0
 8007db2:	d018      	beq.n	8007de6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007dbe:	2b00      	cmp	r3, #0
 8007dc0:	d108      	bne.n	8007dd4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8007dc2:	687b      	ldr	r3, [r7, #4]
 8007dc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dc6:	2b00      	cmp	r3, #0
 8007dc8:	d024      	beq.n	8007e14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8007dca:	687b      	ldr	r3, [r7, #4]
 8007dcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007dce:	6878      	ldr	r0, [r7, #4]
 8007dd0:	4798      	blx	r3
 8007dd2:	e01f      	b.n	8007e14 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007dd8:	2b00      	cmp	r3, #0
 8007dda:	d01b      	beq.n	8007e14 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007de0:	6878      	ldr	r0, [r7, #4]
 8007de2:	4798      	blx	r3
 8007de4:	e016      	b.n	8007e14 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007de6:	687b      	ldr	r3, [r7, #4]
 8007de8:	681b      	ldr	r3, [r3, #0]
 8007dea:	681b      	ldr	r3, [r3, #0]
 8007dec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007df0:	2b00      	cmp	r3, #0
 8007df2:	d107      	bne.n	8007e04 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681a      	ldr	r2, [r3, #0]
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	681b      	ldr	r3, [r3, #0]
 8007dfe:	f022 0208 	bic.w	r2, r2, #8
 8007e02:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e08:	2b00      	cmp	r3, #0
 8007e0a:	d003      	beq.n	8007e14 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8007e0c:	687b      	ldr	r3, [r7, #4]
 8007e0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e10:	6878      	ldr	r0, [r7, #4]
 8007e12:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e18:	2220      	movs	r2, #32
 8007e1a:	409a      	lsls	r2, r3
 8007e1c:	68fb      	ldr	r3, [r7, #12]
 8007e1e:	4013      	ands	r3, r2
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	f000 808e 	beq.w	8007f42 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	f003 0310 	and.w	r3, r3, #16
 8007e30:	2b00      	cmp	r3, #0
 8007e32:	f000 8086 	beq.w	8007f42 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8007e36:	687b      	ldr	r3, [r7, #4]
 8007e38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e3a:	2220      	movs	r2, #32
 8007e3c:	409a      	lsls	r2, r3
 8007e3e:	693b      	ldr	r3, [r7, #16]
 8007e40:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007e48:	b2db      	uxtb	r3, r3
 8007e4a:	2b05      	cmp	r3, #5
 8007e4c:	d136      	bne.n	8007ebc <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	681b      	ldr	r3, [r3, #0]
 8007e52:	681a      	ldr	r2, [r3, #0]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	681b      	ldr	r3, [r3, #0]
 8007e58:	f022 0216 	bic.w	r2, r2, #22
 8007e5c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007e5e:	687b      	ldr	r3, [r7, #4]
 8007e60:	681b      	ldr	r3, [r3, #0]
 8007e62:	695a      	ldr	r2, [r3, #20]
 8007e64:	687b      	ldr	r3, [r7, #4]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e6c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007e6e:	687b      	ldr	r3, [r7, #4]
 8007e70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007e72:	2b00      	cmp	r3, #0
 8007e74:	d103      	bne.n	8007e7e <HAL_DMA_IRQHandler+0x1da>
 8007e76:	687b      	ldr	r3, [r7, #4]
 8007e78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e7a:	2b00      	cmp	r3, #0
 8007e7c:	d007      	beq.n	8007e8e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	681b      	ldr	r3, [r3, #0]
 8007e82:	681a      	ldr	r2, [r3, #0]
 8007e84:	687b      	ldr	r3, [r7, #4]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	f022 0208 	bic.w	r2, r2, #8
 8007e8c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007e8e:	687b      	ldr	r3, [r7, #4]
 8007e90:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007e92:	223f      	movs	r2, #63	; 0x3f
 8007e94:	409a      	lsls	r2, r3
 8007e96:	693b      	ldr	r3, [r7, #16]
 8007e98:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007e9a:	687b      	ldr	r3, [r7, #4]
 8007e9c:	2200      	movs	r2, #0
 8007e9e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8007ea2:	687b      	ldr	r3, [r7, #4]
 8007ea4:	2201      	movs	r2, #1
 8007ea6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eae:	2b00      	cmp	r3, #0
 8007eb0:	d07d      	beq.n	8007fae <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007eb6:	6878      	ldr	r0, [r7, #4]
 8007eb8:	4798      	blx	r3
        }
        return;
 8007eba:	e078      	b.n	8007fae <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	681b      	ldr	r3, [r3, #0]
 8007ec2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8007ec6:	2b00      	cmp	r3, #0
 8007ec8:	d01c      	beq.n	8007f04 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8007eca:	687b      	ldr	r3, [r7, #4]
 8007ecc:	681b      	ldr	r3, [r3, #0]
 8007ece:	681b      	ldr	r3, [r3, #0]
 8007ed0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8007ed4:	2b00      	cmp	r3, #0
 8007ed6:	d108      	bne.n	8007eea <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d030      	beq.n	8007f42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ee4:	6878      	ldr	r0, [r7, #4]
 8007ee6:	4798      	blx	r3
 8007ee8:	e02b      	b.n	8007f42 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eee:	2b00      	cmp	r3, #0
 8007ef0:	d027      	beq.n	8007f42 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8007ef2:	687b      	ldr	r3, [r7, #4]
 8007ef4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ef6:	6878      	ldr	r0, [r7, #4]
 8007ef8:	4798      	blx	r3
 8007efa:	e022      	b.n	8007f42 <HAL_DMA_IRQHandler+0x29e>
 8007efc:	20000008 	.word	0x20000008
 8007f00:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	681b      	ldr	r3, [r3, #0]
 8007f0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007f0e:	2b00      	cmp	r3, #0
 8007f10:	d10f      	bne.n	8007f32 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8007f12:	687b      	ldr	r3, [r7, #4]
 8007f14:	681b      	ldr	r3, [r3, #0]
 8007f16:	681a      	ldr	r2, [r3, #0]
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	f022 0210 	bic.w	r2, r2, #16
 8007f20:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2200      	movs	r2, #0
 8007f26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2201      	movs	r2, #1
 8007f2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d003      	beq.n	8007f42 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007f3e:	6878      	ldr	r0, [r7, #4]
 8007f40:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f46:	2b00      	cmp	r3, #0
 8007f48:	d032      	beq.n	8007fb0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8007f4e:	f003 0301 	and.w	r3, r3, #1
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	d022      	beq.n	8007f9c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2205      	movs	r2, #5
 8007f5a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	681a      	ldr	r2, [r3, #0]
 8007f64:	687b      	ldr	r3, [r7, #4]
 8007f66:	681b      	ldr	r3, [r3, #0]
 8007f68:	f022 0201 	bic.w	r2, r2, #1
 8007f6c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8007f6e:	68bb      	ldr	r3, [r7, #8]
 8007f70:	3301      	adds	r3, #1
 8007f72:	60bb      	str	r3, [r7, #8]
 8007f74:	697a      	ldr	r2, [r7, #20]
 8007f76:	429a      	cmp	r2, r3
 8007f78:	d307      	bcc.n	8007f8a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8007f7a:	687b      	ldr	r3, [r7, #4]
 8007f7c:	681b      	ldr	r3, [r3, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f003 0301 	and.w	r3, r3, #1
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d1f2      	bne.n	8007f6e <HAL_DMA_IRQHandler+0x2ca>
 8007f88:	e000      	b.n	8007f8c <HAL_DMA_IRQHandler+0x2e8>
          break;
 8007f8a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8007f8c:	687b      	ldr	r3, [r7, #4]
 8007f8e:	2200      	movs	r2, #0
 8007f90:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8007f94:	687b      	ldr	r3, [r7, #4]
 8007f96:	2201      	movs	r2, #1
 8007f98:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fa0:	2b00      	cmp	r3, #0
 8007fa2:	d005      	beq.n	8007fb0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8007fa4:	687b      	ldr	r3, [r7, #4]
 8007fa6:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007fa8:	6878      	ldr	r0, [r7, #4]
 8007faa:	4798      	blx	r3
 8007fac:	e000      	b.n	8007fb0 <HAL_DMA_IRQHandler+0x30c>
        return;
 8007fae:	bf00      	nop
    }
  }
}
 8007fb0:	3718      	adds	r7, #24
 8007fb2:	46bd      	mov	sp, r7
 8007fb4:	bd80      	pop	{r7, pc}
 8007fb6:	bf00      	nop

08007fb8 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8007fb8:	b480      	push	{r7}
 8007fba:	b085      	sub	sp, #20
 8007fbc:	af00      	add	r7, sp, #0
 8007fbe:	60f8      	str	r0, [r7, #12]
 8007fc0:	60b9      	str	r1, [r7, #8]
 8007fc2:	607a      	str	r2, [r7, #4]
 8007fc4:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	681b      	ldr	r3, [r3, #0]
 8007fca:	681a      	ldr	r2, [r3, #0]
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	681b      	ldr	r3, [r3, #0]
 8007fd0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8007fd4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8007fd6:	68fb      	ldr	r3, [r7, #12]
 8007fd8:	681b      	ldr	r3, [r3, #0]
 8007fda:	683a      	ldr	r2, [r7, #0]
 8007fdc:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8007fde:	68fb      	ldr	r3, [r7, #12]
 8007fe0:	689b      	ldr	r3, [r3, #8]
 8007fe2:	2b40      	cmp	r3, #64	; 0x40
 8007fe4:	d108      	bne.n	8007ff8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8007fe6:	68fb      	ldr	r3, [r7, #12]
 8007fe8:	681b      	ldr	r3, [r3, #0]
 8007fea:	687a      	ldr	r2, [r7, #4]
 8007fec:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8007fee:	68fb      	ldr	r3, [r7, #12]
 8007ff0:	681b      	ldr	r3, [r3, #0]
 8007ff2:	68ba      	ldr	r2, [r7, #8]
 8007ff4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8007ff6:	e007      	b.n	8008008 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	681b      	ldr	r3, [r3, #0]
 8007ffc:	68ba      	ldr	r2, [r7, #8]
 8007ffe:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	681b      	ldr	r3, [r3, #0]
 8008004:	687a      	ldr	r2, [r7, #4]
 8008006:	60da      	str	r2, [r3, #12]
}
 8008008:	bf00      	nop
 800800a:	3714      	adds	r7, #20
 800800c:	46bd      	mov	sp, r7
 800800e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008012:	4770      	bx	lr

08008014 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8008014:	b480      	push	{r7}
 8008016:	b085      	sub	sp, #20
 8008018:	af00      	add	r7, sp, #0
 800801a:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 800801c:	687b      	ldr	r3, [r7, #4]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	b2db      	uxtb	r3, r3
 8008022:	3b10      	subs	r3, #16
 8008024:	4a14      	ldr	r2, [pc, #80]	; (8008078 <DMA_CalcBaseAndBitshift+0x64>)
 8008026:	fba2 2303 	umull	r2, r3, r2, r3
 800802a:	091b      	lsrs	r3, r3, #4
 800802c:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800802e:	4a13      	ldr	r2, [pc, #76]	; (800807c <DMA_CalcBaseAndBitshift+0x68>)
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	4413      	add	r3, r2
 8008034:	781b      	ldrb	r3, [r3, #0]
 8008036:	461a      	mov	r2, r3
 8008038:	687b      	ldr	r3, [r7, #4]
 800803a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	2b03      	cmp	r3, #3
 8008040:	d909      	bls.n	8008056 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8008042:	687b      	ldr	r3, [r7, #4]
 8008044:	681b      	ldr	r3, [r3, #0]
 8008046:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800804a:	f023 0303 	bic.w	r3, r3, #3
 800804e:	1d1a      	adds	r2, r3, #4
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	659a      	str	r2, [r3, #88]	; 0x58
 8008054:	e007      	b.n	8008066 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	681b      	ldr	r3, [r3, #0]
 800805a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800805e:	f023 0303 	bic.w	r3, r3, #3
 8008062:	687a      	ldr	r2, [r7, #4]
 8008064:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800806a:	4618      	mov	r0, r3
 800806c:	3714      	adds	r7, #20
 800806e:	46bd      	mov	sp, r7
 8008070:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008074:	4770      	bx	lr
 8008076:	bf00      	nop
 8008078:	aaaaaaab 	.word	0xaaaaaaab
 800807c:	08044b28 	.word	0x08044b28

08008080 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8008080:	b480      	push	{r7}
 8008082:	b085      	sub	sp, #20
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8008088:	2300      	movs	r3, #0
 800808a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008090:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	699b      	ldr	r3, [r3, #24]
 8008096:	2b00      	cmp	r3, #0
 8008098:	d11f      	bne.n	80080da <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 800809a:	68bb      	ldr	r3, [r7, #8]
 800809c:	2b03      	cmp	r3, #3
 800809e:	d855      	bhi.n	800814c <DMA_CheckFifoParam+0xcc>
 80080a0:	a201      	add	r2, pc, #4	; (adr r2, 80080a8 <DMA_CheckFifoParam+0x28>)
 80080a2:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080a6:	bf00      	nop
 80080a8:	080080b9 	.word	0x080080b9
 80080ac:	080080cb 	.word	0x080080cb
 80080b0:	080080b9 	.word	0x080080b9
 80080b4:	0800814d 	.word	0x0800814d
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080bc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d045      	beq.n	8008150 <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 80080c4:	2301      	movs	r3, #1
 80080c6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80080c8:	e042      	b.n	8008150 <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80080ce:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80080d2:	d13f      	bne.n	8008154 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 80080d4:	2301      	movs	r3, #1
 80080d6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80080d8:	e03c      	b.n	8008154 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	699b      	ldr	r3, [r3, #24]
 80080de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80080e2:	d121      	bne.n	8008128 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80080e4:	68bb      	ldr	r3, [r7, #8]
 80080e6:	2b03      	cmp	r3, #3
 80080e8:	d836      	bhi.n	8008158 <DMA_CheckFifoParam+0xd8>
 80080ea:	a201      	add	r2, pc, #4	; (adr r2, 80080f0 <DMA_CheckFifoParam+0x70>)
 80080ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80080f0:	08008101 	.word	0x08008101
 80080f4:	08008107 	.word	0x08008107
 80080f8:	08008101 	.word	0x08008101
 80080fc:	08008119 	.word	0x08008119
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8008100:	2301      	movs	r3, #1
 8008102:	73fb      	strb	r3, [r7, #15]
      break;
 8008104:	e02f      	b.n	8008166 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8008106:	687b      	ldr	r3, [r7, #4]
 8008108:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800810a:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800810e:	2b00      	cmp	r3, #0
 8008110:	d024      	beq.n	800815c <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8008112:	2301      	movs	r3, #1
 8008114:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8008116:	e021      	b.n	800815c <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800811c:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8008120:	d11e      	bne.n	8008160 <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8008122:	2301      	movs	r3, #1
 8008124:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8008126:	e01b      	b.n	8008160 <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8008128:	68bb      	ldr	r3, [r7, #8]
 800812a:	2b02      	cmp	r3, #2
 800812c:	d902      	bls.n	8008134 <DMA_CheckFifoParam+0xb4>
 800812e:	2b03      	cmp	r3, #3
 8008130:	d003      	beq.n	800813a <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8008132:	e018      	b.n	8008166 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	73fb      	strb	r3, [r7, #15]
      break;
 8008138:	e015      	b.n	8008166 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800813e:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008142:	2b00      	cmp	r3, #0
 8008144:	d00e      	beq.n	8008164 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8008146:	2301      	movs	r3, #1
 8008148:	73fb      	strb	r3, [r7, #15]
      break;
 800814a:	e00b      	b.n	8008164 <DMA_CheckFifoParam+0xe4>
      break;
 800814c:	bf00      	nop
 800814e:	e00a      	b.n	8008166 <DMA_CheckFifoParam+0xe6>
      break;
 8008150:	bf00      	nop
 8008152:	e008      	b.n	8008166 <DMA_CheckFifoParam+0xe6>
      break;
 8008154:	bf00      	nop
 8008156:	e006      	b.n	8008166 <DMA_CheckFifoParam+0xe6>
      break;
 8008158:	bf00      	nop
 800815a:	e004      	b.n	8008166 <DMA_CheckFifoParam+0xe6>
      break;
 800815c:	bf00      	nop
 800815e:	e002      	b.n	8008166 <DMA_CheckFifoParam+0xe6>
      break;   
 8008160:	bf00      	nop
 8008162:	e000      	b.n	8008166 <DMA_CheckFifoParam+0xe6>
      break;
 8008164:	bf00      	nop
    }
  } 
  
  return status; 
 8008166:	7bfb      	ldrb	r3, [r7, #15]
}
 8008168:	4618      	mov	r0, r3
 800816a:	3714      	adds	r7, #20
 800816c:	46bd      	mov	sp, r7
 800816e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008172:	4770      	bx	lr

08008174 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b086      	sub	sp, #24
 8008178:	af00      	add	r7, sp, #0
 800817a:	60f8      	str	r0, [r7, #12]
 800817c:	60b9      	str	r1, [r7, #8]
 800817e:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8008182:	2301      	movs	r3, #1
 8008184:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8008186:	4b23      	ldr	r3, [pc, #140]	; (8008214 <HAL_FLASH_Program+0xa0>)
 8008188:	7e1b      	ldrb	r3, [r3, #24]
 800818a:	2b01      	cmp	r3, #1
 800818c:	d101      	bne.n	8008192 <HAL_FLASH_Program+0x1e>
 800818e:	2302      	movs	r3, #2
 8008190:	e03b      	b.n	800820a <HAL_FLASH_Program+0x96>
 8008192:	4b20      	ldr	r3, [pc, #128]	; (8008214 <HAL_FLASH_Program+0xa0>)
 8008194:	2201      	movs	r2, #1
 8008196:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8008198:	f24c 3050 	movw	r0, #50000	; 0xc350
 800819c:	f000 f870 	bl	8008280 <FLASH_WaitForLastOperation>
 80081a0:	4603      	mov	r3, r0
 80081a2:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 80081a4:	7dfb      	ldrb	r3, [r7, #23]
 80081a6:	2b00      	cmp	r3, #0
 80081a8:	d12b      	bne.n	8008202 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d105      	bne.n	80081bc <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80081b0:	783b      	ldrb	r3, [r7, #0]
 80081b2:	4619      	mov	r1, r3
 80081b4:	68b8      	ldr	r0, [r7, #8]
 80081b6:	f000 f919 	bl	80083ec <FLASH_Program_Byte>
 80081ba:	e016      	b.n	80081ea <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80081bc:	68fb      	ldr	r3, [r7, #12]
 80081be:	2b01      	cmp	r3, #1
 80081c0:	d105      	bne.n	80081ce <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80081c2:	883b      	ldrh	r3, [r7, #0]
 80081c4:	4619      	mov	r1, r3
 80081c6:	68b8      	ldr	r0, [r7, #8]
 80081c8:	f000 f8ec 	bl	80083a4 <FLASH_Program_HalfWord>
 80081cc:	e00d      	b.n	80081ea <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	2b02      	cmp	r3, #2
 80081d2:	d105      	bne.n	80081e0 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80081d4:	683b      	ldr	r3, [r7, #0]
 80081d6:	4619      	mov	r1, r3
 80081d8:	68b8      	ldr	r0, [r7, #8]
 80081da:	f000 f8c1 	bl	8008360 <FLASH_Program_Word>
 80081de:	e004      	b.n	80081ea <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80081e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80081e4:	68b8      	ldr	r0, [r7, #8]
 80081e6:	f000 f88b 	bl	8008300 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80081ea:	f24c 3050 	movw	r0, #50000	; 0xc350
 80081ee:	f000 f847 	bl	8008280 <FLASH_WaitForLastOperation>
 80081f2:	4603      	mov	r3, r0
 80081f4:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80081f6:	4b08      	ldr	r3, [pc, #32]	; (8008218 <HAL_FLASH_Program+0xa4>)
 80081f8:	691b      	ldr	r3, [r3, #16]
 80081fa:	4a07      	ldr	r2, [pc, #28]	; (8008218 <HAL_FLASH_Program+0xa4>)
 80081fc:	f023 0301 	bic.w	r3, r3, #1
 8008200:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8008202:	4b04      	ldr	r3, [pc, #16]	; (8008214 <HAL_FLASH_Program+0xa0>)
 8008204:	2200      	movs	r2, #0
 8008206:	761a      	strb	r2, [r3, #24]
  
  return status;
 8008208:	7dfb      	ldrb	r3, [r7, #23]
}
 800820a:	4618      	mov	r0, r3
 800820c:	3718      	adds	r7, #24
 800820e:	46bd      	mov	sp, r7
 8008210:	bd80      	pop	{r7, pc}
 8008212:	bf00      	nop
 8008214:	200051d0 	.word	0x200051d0
 8008218:	40023c00 	.word	0x40023c00

0800821c <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 800821c:	b480      	push	{r7}
 800821e:	b083      	sub	sp, #12
 8008220:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8008222:	2300      	movs	r3, #0
 8008224:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8008226:	4b0b      	ldr	r3, [pc, #44]	; (8008254 <HAL_FLASH_Unlock+0x38>)
 8008228:	691b      	ldr	r3, [r3, #16]
 800822a:	2b00      	cmp	r3, #0
 800822c:	da0b      	bge.n	8008246 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800822e:	4b09      	ldr	r3, [pc, #36]	; (8008254 <HAL_FLASH_Unlock+0x38>)
 8008230:	4a09      	ldr	r2, [pc, #36]	; (8008258 <HAL_FLASH_Unlock+0x3c>)
 8008232:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8008234:	4b07      	ldr	r3, [pc, #28]	; (8008254 <HAL_FLASH_Unlock+0x38>)
 8008236:	4a09      	ldr	r2, [pc, #36]	; (800825c <HAL_FLASH_Unlock+0x40>)
 8008238:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800823a:	4b06      	ldr	r3, [pc, #24]	; (8008254 <HAL_FLASH_Unlock+0x38>)
 800823c:	691b      	ldr	r3, [r3, #16]
 800823e:	2b00      	cmp	r3, #0
 8008240:	da01      	bge.n	8008246 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8008242:	2301      	movs	r3, #1
 8008244:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8008246:	79fb      	ldrb	r3, [r7, #7]
}
 8008248:	4618      	mov	r0, r3
 800824a:	370c      	adds	r7, #12
 800824c:	46bd      	mov	sp, r7
 800824e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008252:	4770      	bx	lr
 8008254:	40023c00 	.word	0x40023c00
 8008258:	45670123 	.word	0x45670123
 800825c:	cdef89ab 	.word	0xcdef89ab

08008260 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8008260:	b480      	push	{r7}
 8008262:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8008264:	4b05      	ldr	r3, [pc, #20]	; (800827c <HAL_FLASH_Lock+0x1c>)
 8008266:	691b      	ldr	r3, [r3, #16]
 8008268:	4a04      	ldr	r2, [pc, #16]	; (800827c <HAL_FLASH_Lock+0x1c>)
 800826a:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800826e:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8008270:	2300      	movs	r3, #0
}
 8008272:	4618      	mov	r0, r3
 8008274:	46bd      	mov	sp, r7
 8008276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800827a:	4770      	bx	lr
 800827c:	40023c00 	.word	0x40023c00

08008280 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008288:	2300      	movs	r3, #0
 800828a:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800828c:	4b1a      	ldr	r3, [pc, #104]	; (80082f8 <FLASH_WaitForLastOperation+0x78>)
 800828e:	2200      	movs	r2, #0
 8008290:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8008292:	f7ff faf1 	bl	8007878 <HAL_GetTick>
 8008296:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8008298:	e010      	b.n	80082bc <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80082a0:	d00c      	beq.n	80082bc <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d007      	beq.n	80082b8 <FLASH_WaitForLastOperation+0x38>
 80082a8:	f7ff fae6 	bl	8007878 <HAL_GetTick>
 80082ac:	4602      	mov	r2, r0
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	1ad3      	subs	r3, r2, r3
 80082b2:	687a      	ldr	r2, [r7, #4]
 80082b4:	429a      	cmp	r2, r3
 80082b6:	d201      	bcs.n	80082bc <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80082b8:	2303      	movs	r3, #3
 80082ba:	e019      	b.n	80082f0 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80082bc:	4b0f      	ldr	r3, [pc, #60]	; (80082fc <FLASH_WaitForLastOperation+0x7c>)
 80082be:	68db      	ldr	r3, [r3, #12]
 80082c0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80082c4:	2b00      	cmp	r3, #0
 80082c6:	d1e8      	bne.n	800829a <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80082c8:	4b0c      	ldr	r3, [pc, #48]	; (80082fc <FLASH_WaitForLastOperation+0x7c>)
 80082ca:	68db      	ldr	r3, [r3, #12]
 80082cc:	f003 0301 	and.w	r3, r3, #1
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d002      	beq.n	80082da <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80082d4:	4b09      	ldr	r3, [pc, #36]	; (80082fc <FLASH_WaitForLastOperation+0x7c>)
 80082d6:	2201      	movs	r2, #1
 80082d8:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80082da:	4b08      	ldr	r3, [pc, #32]	; (80082fc <FLASH_WaitForLastOperation+0x7c>)
 80082dc:	68db      	ldr	r3, [r3, #12]
 80082de:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 80082e2:	2b00      	cmp	r3, #0
 80082e4:	d003      	beq.n	80082ee <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80082e6:	f000 f8a3 	bl	8008430 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80082ea:	2301      	movs	r3, #1
 80082ec:	e000      	b.n	80082f0 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80082ee:	2300      	movs	r3, #0
  
}  
 80082f0:	4618      	mov	r0, r3
 80082f2:	3710      	adds	r7, #16
 80082f4:	46bd      	mov	sp, r7
 80082f6:	bd80      	pop	{r7, pc}
 80082f8:	200051d0 	.word	0x200051d0
 80082fc:	40023c00 	.word	0x40023c00

08008300 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8008300:	b490      	push	{r4, r7}
 8008302:	b084      	sub	sp, #16
 8008304:	af00      	add	r7, sp, #0
 8008306:	60f8      	str	r0, [r7, #12]
 8008308:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800830c:	4b13      	ldr	r3, [pc, #76]	; (800835c <FLASH_Program_DoubleWord+0x5c>)
 800830e:	691b      	ldr	r3, [r3, #16]
 8008310:	4a12      	ldr	r2, [pc, #72]	; (800835c <FLASH_Program_DoubleWord+0x5c>)
 8008312:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008316:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8008318:	4b10      	ldr	r3, [pc, #64]	; (800835c <FLASH_Program_DoubleWord+0x5c>)
 800831a:	691b      	ldr	r3, [r3, #16]
 800831c:	4a0f      	ldr	r2, [pc, #60]	; (800835c <FLASH_Program_DoubleWord+0x5c>)
 800831e:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8008322:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008324:	4b0d      	ldr	r3, [pc, #52]	; (800835c <FLASH_Program_DoubleWord+0x5c>)
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	4a0c      	ldr	r2, [pc, #48]	; (800835c <FLASH_Program_DoubleWord+0x5c>)
 800832a:	f043 0301 	orr.w	r3, r3, #1
 800832e:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8008330:	68fb      	ldr	r3, [r7, #12]
 8008332:	683a      	ldr	r2, [r7, #0]
 8008334:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8008336:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 800833a:	e9d7 1200 	ldrd	r1, r2, [r7]
 800833e:	f04f 0300 	mov.w	r3, #0
 8008342:	f04f 0400 	mov.w	r4, #0
 8008346:	0013      	movs	r3, r2
 8008348:	2400      	movs	r4, #0
 800834a:	68fa      	ldr	r2, [r7, #12]
 800834c:	3204      	adds	r2, #4
 800834e:	6013      	str	r3, [r2, #0]
}
 8008350:	bf00      	nop
 8008352:	3710      	adds	r7, #16
 8008354:	46bd      	mov	sp, r7
 8008356:	bc90      	pop	{r4, r7}
 8008358:	4770      	bx	lr
 800835a:	bf00      	nop
 800835c:	40023c00 	.word	0x40023c00

08008360 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8008360:	b480      	push	{r7}
 8008362:	b083      	sub	sp, #12
 8008364:	af00      	add	r7, sp, #0
 8008366:	6078      	str	r0, [r7, #4]
 8008368:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800836a:	4b0d      	ldr	r3, [pc, #52]	; (80083a0 <FLASH_Program_Word+0x40>)
 800836c:	691b      	ldr	r3, [r3, #16]
 800836e:	4a0c      	ldr	r2, [pc, #48]	; (80083a0 <FLASH_Program_Word+0x40>)
 8008370:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008374:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8008376:	4b0a      	ldr	r3, [pc, #40]	; (80083a0 <FLASH_Program_Word+0x40>)
 8008378:	691b      	ldr	r3, [r3, #16]
 800837a:	4a09      	ldr	r2, [pc, #36]	; (80083a0 <FLASH_Program_Word+0x40>)
 800837c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008380:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8008382:	4b07      	ldr	r3, [pc, #28]	; (80083a0 <FLASH_Program_Word+0x40>)
 8008384:	691b      	ldr	r3, [r3, #16]
 8008386:	4a06      	ldr	r2, [pc, #24]	; (80083a0 <FLASH_Program_Word+0x40>)
 8008388:	f043 0301 	orr.w	r3, r3, #1
 800838c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800838e:	687b      	ldr	r3, [r7, #4]
 8008390:	683a      	ldr	r2, [r7, #0]
 8008392:	601a      	str	r2, [r3, #0]
}
 8008394:	bf00      	nop
 8008396:	370c      	adds	r7, #12
 8008398:	46bd      	mov	sp, r7
 800839a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800839e:	4770      	bx	lr
 80083a0:	40023c00 	.word	0x40023c00

080083a4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 80083a4:	b480      	push	{r7}
 80083a6:	b083      	sub	sp, #12
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	6078      	str	r0, [r7, #4]
 80083ac:	460b      	mov	r3, r1
 80083ae:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80083b0:	4b0d      	ldr	r3, [pc, #52]	; (80083e8 <FLASH_Program_HalfWord+0x44>)
 80083b2:	691b      	ldr	r3, [r3, #16]
 80083b4:	4a0c      	ldr	r2, [pc, #48]	; (80083e8 <FLASH_Program_HalfWord+0x44>)
 80083b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80083bc:	4b0a      	ldr	r3, [pc, #40]	; (80083e8 <FLASH_Program_HalfWord+0x44>)
 80083be:	691b      	ldr	r3, [r3, #16]
 80083c0:	4a09      	ldr	r2, [pc, #36]	; (80083e8 <FLASH_Program_HalfWord+0x44>)
 80083c2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80083c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80083c8:	4b07      	ldr	r3, [pc, #28]	; (80083e8 <FLASH_Program_HalfWord+0x44>)
 80083ca:	691b      	ldr	r3, [r3, #16]
 80083cc:	4a06      	ldr	r2, [pc, #24]	; (80083e8 <FLASH_Program_HalfWord+0x44>)
 80083ce:	f043 0301 	orr.w	r3, r3, #1
 80083d2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80083d4:	687b      	ldr	r3, [r7, #4]
 80083d6:	887a      	ldrh	r2, [r7, #2]
 80083d8:	801a      	strh	r2, [r3, #0]
}
 80083da:	bf00      	nop
 80083dc:	370c      	adds	r7, #12
 80083de:	46bd      	mov	sp, r7
 80083e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083e4:	4770      	bx	lr
 80083e6:	bf00      	nop
 80083e8:	40023c00 	.word	0x40023c00

080083ec <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80083ec:	b480      	push	{r7}
 80083ee:	b083      	sub	sp, #12
 80083f0:	af00      	add	r7, sp, #0
 80083f2:	6078      	str	r0, [r7, #4]
 80083f4:	460b      	mov	r3, r1
 80083f6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80083f8:	4b0c      	ldr	r3, [pc, #48]	; (800842c <FLASH_Program_Byte+0x40>)
 80083fa:	691b      	ldr	r3, [r3, #16]
 80083fc:	4a0b      	ldr	r2, [pc, #44]	; (800842c <FLASH_Program_Byte+0x40>)
 80083fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008402:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8008404:	4b09      	ldr	r3, [pc, #36]	; (800842c <FLASH_Program_Byte+0x40>)
 8008406:	4a09      	ldr	r2, [pc, #36]	; (800842c <FLASH_Program_Byte+0x40>)
 8008408:	691b      	ldr	r3, [r3, #16]
 800840a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800840c:	4b07      	ldr	r3, [pc, #28]	; (800842c <FLASH_Program_Byte+0x40>)
 800840e:	691b      	ldr	r3, [r3, #16]
 8008410:	4a06      	ldr	r2, [pc, #24]	; (800842c <FLASH_Program_Byte+0x40>)
 8008412:	f043 0301 	orr.w	r3, r3, #1
 8008416:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	78fa      	ldrb	r2, [r7, #3]
 800841c:	701a      	strb	r2, [r3, #0]
}
 800841e:	bf00      	nop
 8008420:	370c      	adds	r7, #12
 8008422:	46bd      	mov	sp, r7
 8008424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008428:	4770      	bx	lr
 800842a:	bf00      	nop
 800842c:	40023c00 	.word	0x40023c00

08008430 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8008430:	b480      	push	{r7}
 8008432:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8008434:	4b2f      	ldr	r3, [pc, #188]	; (80084f4 <FLASH_SetErrorCode+0xc4>)
 8008436:	68db      	ldr	r3, [r3, #12]
 8008438:	f003 0310 	and.w	r3, r3, #16
 800843c:	2b00      	cmp	r3, #0
 800843e:	d008      	beq.n	8008452 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8008440:	4b2d      	ldr	r3, [pc, #180]	; (80084f8 <FLASH_SetErrorCode+0xc8>)
 8008442:	69db      	ldr	r3, [r3, #28]
 8008444:	f043 0310 	orr.w	r3, r3, #16
 8008448:	4a2b      	ldr	r2, [pc, #172]	; (80084f8 <FLASH_SetErrorCode+0xc8>)
 800844a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800844c:	4b29      	ldr	r3, [pc, #164]	; (80084f4 <FLASH_SetErrorCode+0xc4>)
 800844e:	2210      	movs	r2, #16
 8008450:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8008452:	4b28      	ldr	r3, [pc, #160]	; (80084f4 <FLASH_SetErrorCode+0xc4>)
 8008454:	68db      	ldr	r3, [r3, #12]
 8008456:	f003 0320 	and.w	r3, r3, #32
 800845a:	2b00      	cmp	r3, #0
 800845c:	d008      	beq.n	8008470 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800845e:	4b26      	ldr	r3, [pc, #152]	; (80084f8 <FLASH_SetErrorCode+0xc8>)
 8008460:	69db      	ldr	r3, [r3, #28]
 8008462:	f043 0308 	orr.w	r3, r3, #8
 8008466:	4a24      	ldr	r2, [pc, #144]	; (80084f8 <FLASH_SetErrorCode+0xc8>)
 8008468:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800846a:	4b22      	ldr	r3, [pc, #136]	; (80084f4 <FLASH_SetErrorCode+0xc4>)
 800846c:	2220      	movs	r2, #32
 800846e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8008470:	4b20      	ldr	r3, [pc, #128]	; (80084f4 <FLASH_SetErrorCode+0xc4>)
 8008472:	68db      	ldr	r3, [r3, #12]
 8008474:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008478:	2b00      	cmp	r3, #0
 800847a:	d008      	beq.n	800848e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800847c:	4b1e      	ldr	r3, [pc, #120]	; (80084f8 <FLASH_SetErrorCode+0xc8>)
 800847e:	69db      	ldr	r3, [r3, #28]
 8008480:	f043 0304 	orr.w	r3, r3, #4
 8008484:	4a1c      	ldr	r2, [pc, #112]	; (80084f8 <FLASH_SetErrorCode+0xc8>)
 8008486:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8008488:	4b1a      	ldr	r3, [pc, #104]	; (80084f4 <FLASH_SetErrorCode+0xc4>)
 800848a:	2240      	movs	r2, #64	; 0x40
 800848c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800848e:	4b19      	ldr	r3, [pc, #100]	; (80084f4 <FLASH_SetErrorCode+0xc4>)
 8008490:	68db      	ldr	r3, [r3, #12]
 8008492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008496:	2b00      	cmp	r3, #0
 8008498:	d008      	beq.n	80084ac <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800849a:	4b17      	ldr	r3, [pc, #92]	; (80084f8 <FLASH_SetErrorCode+0xc8>)
 800849c:	69db      	ldr	r3, [r3, #28]
 800849e:	f043 0302 	orr.w	r3, r3, #2
 80084a2:	4a15      	ldr	r2, [pc, #84]	; (80084f8 <FLASH_SetErrorCode+0xc8>)
 80084a4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80084a6:	4b13      	ldr	r3, [pc, #76]	; (80084f4 <FLASH_SetErrorCode+0xc4>)
 80084a8:	2280      	movs	r2, #128	; 0x80
 80084aa:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 80084ac:	4b11      	ldr	r3, [pc, #68]	; (80084f4 <FLASH_SetErrorCode+0xc4>)
 80084ae:	68db      	ldr	r3, [r3, #12]
 80084b0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80084b4:	2b00      	cmp	r3, #0
 80084b6:	d009      	beq.n	80084cc <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 80084b8:	4b0f      	ldr	r3, [pc, #60]	; (80084f8 <FLASH_SetErrorCode+0xc8>)
 80084ba:	69db      	ldr	r3, [r3, #28]
 80084bc:	f043 0301 	orr.w	r3, r3, #1
 80084c0:	4a0d      	ldr	r2, [pc, #52]	; (80084f8 <FLASH_SetErrorCode+0xc8>)
 80084c2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 80084c4:	4b0b      	ldr	r3, [pc, #44]	; (80084f4 <FLASH_SetErrorCode+0xc4>)
 80084c6:	f44f 7280 	mov.w	r2, #256	; 0x100
 80084ca:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80084cc:	4b09      	ldr	r3, [pc, #36]	; (80084f4 <FLASH_SetErrorCode+0xc4>)
 80084ce:	68db      	ldr	r3, [r3, #12]
 80084d0:	f003 0302 	and.w	r3, r3, #2
 80084d4:	2b00      	cmp	r3, #0
 80084d6:	d008      	beq.n	80084ea <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80084d8:	4b07      	ldr	r3, [pc, #28]	; (80084f8 <FLASH_SetErrorCode+0xc8>)
 80084da:	69db      	ldr	r3, [r3, #28]
 80084dc:	f043 0320 	orr.w	r3, r3, #32
 80084e0:	4a05      	ldr	r2, [pc, #20]	; (80084f8 <FLASH_SetErrorCode+0xc8>)
 80084e2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80084e4:	4b03      	ldr	r3, [pc, #12]	; (80084f4 <FLASH_SetErrorCode+0xc4>)
 80084e6:	2202      	movs	r2, #2
 80084e8:	60da      	str	r2, [r3, #12]
  }
}
 80084ea:	bf00      	nop
 80084ec:	46bd      	mov	sp, r7
 80084ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084f2:	4770      	bx	lr
 80084f4:	40023c00 	.word	0x40023c00
 80084f8:	200051d0 	.word	0x200051d0

080084fc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80084fc:	b480      	push	{r7}
 80084fe:	b085      	sub	sp, #20
 8008500:	af00      	add	r7, sp, #0
 8008502:	6078      	str	r0, [r7, #4]
 8008504:	460b      	mov	r3, r1
 8008506:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8008508:	2300      	movs	r3, #0
 800850a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800850c:	78fb      	ldrb	r3, [r7, #3]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d102      	bne.n	8008518 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8008512:	2300      	movs	r3, #0
 8008514:	60fb      	str	r3, [r7, #12]
 8008516:	e010      	b.n	800853a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8008518:	78fb      	ldrb	r3, [r7, #3]
 800851a:	2b01      	cmp	r3, #1
 800851c:	d103      	bne.n	8008526 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800851e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008522:	60fb      	str	r3, [r7, #12]
 8008524:	e009      	b.n	800853a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8008526:	78fb      	ldrb	r3, [r7, #3]
 8008528:	2b02      	cmp	r3, #2
 800852a:	d103      	bne.n	8008534 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800852c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008530:	60fb      	str	r3, [r7, #12]
 8008532:	e002      	b.n	800853a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8008534:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008538:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800853a:	4b13      	ldr	r3, [pc, #76]	; (8008588 <FLASH_Erase_Sector+0x8c>)
 800853c:	691b      	ldr	r3, [r3, #16]
 800853e:	4a12      	ldr	r2, [pc, #72]	; (8008588 <FLASH_Erase_Sector+0x8c>)
 8008540:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008544:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8008546:	4b10      	ldr	r3, [pc, #64]	; (8008588 <FLASH_Erase_Sector+0x8c>)
 8008548:	691a      	ldr	r2, [r3, #16]
 800854a:	490f      	ldr	r1, [pc, #60]	; (8008588 <FLASH_Erase_Sector+0x8c>)
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	4313      	orrs	r3, r2
 8008550:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8008552:	4b0d      	ldr	r3, [pc, #52]	; (8008588 <FLASH_Erase_Sector+0x8c>)
 8008554:	691b      	ldr	r3, [r3, #16]
 8008556:	4a0c      	ldr	r2, [pc, #48]	; (8008588 <FLASH_Erase_Sector+0x8c>)
 8008558:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800855c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800855e:	4b0a      	ldr	r3, [pc, #40]	; (8008588 <FLASH_Erase_Sector+0x8c>)
 8008560:	691a      	ldr	r2, [r3, #16]
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	00db      	lsls	r3, r3, #3
 8008566:	4313      	orrs	r3, r2
 8008568:	4a07      	ldr	r2, [pc, #28]	; (8008588 <FLASH_Erase_Sector+0x8c>)
 800856a:	f043 0302 	orr.w	r3, r3, #2
 800856e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8008570:	4b05      	ldr	r3, [pc, #20]	; (8008588 <FLASH_Erase_Sector+0x8c>)
 8008572:	691b      	ldr	r3, [r3, #16]
 8008574:	4a04      	ldr	r2, [pc, #16]	; (8008588 <FLASH_Erase_Sector+0x8c>)
 8008576:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800857a:	6113      	str	r3, [r2, #16]
}
 800857c:	bf00      	nop
 800857e:	3714      	adds	r7, #20
 8008580:	46bd      	mov	sp, r7
 8008582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008586:	4770      	bx	lr
 8008588:	40023c00 	.word	0x40023c00

0800858c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800858c:	b480      	push	{r7}
 800858e:	b089      	sub	sp, #36	; 0x24
 8008590:	af00      	add	r7, sp, #0
 8008592:	6078      	str	r0, [r7, #4]
 8008594:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008596:	2300      	movs	r3, #0
 8008598:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800859a:	2300      	movs	r3, #0
 800859c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800859e:	2300      	movs	r3, #0
 80085a0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80085a2:	2300      	movs	r3, #0
 80085a4:	61fb      	str	r3, [r7, #28]
 80085a6:	e165      	b.n	8008874 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80085a8:	2201      	movs	r2, #1
 80085aa:	69fb      	ldr	r3, [r7, #28]
 80085ac:	fa02 f303 	lsl.w	r3, r2, r3
 80085b0:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80085b2:	683b      	ldr	r3, [r7, #0]
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	697a      	ldr	r2, [r7, #20]
 80085b8:	4013      	ands	r3, r2
 80085ba:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80085bc:	693a      	ldr	r2, [r7, #16]
 80085be:	697b      	ldr	r3, [r7, #20]
 80085c0:	429a      	cmp	r2, r3
 80085c2:	f040 8154 	bne.w	800886e <HAL_GPIO_Init+0x2e2>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80085c6:	683b      	ldr	r3, [r7, #0]
 80085c8:	685b      	ldr	r3, [r3, #4]
 80085ca:	2b01      	cmp	r3, #1
 80085cc:	d00b      	beq.n	80085e6 <HAL_GPIO_Init+0x5a>
 80085ce:	683b      	ldr	r3, [r7, #0]
 80085d0:	685b      	ldr	r3, [r3, #4]
 80085d2:	2b02      	cmp	r3, #2
 80085d4:	d007      	beq.n	80085e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80085d6:	683b      	ldr	r3, [r7, #0]
 80085d8:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 80085da:	2b11      	cmp	r3, #17
 80085dc:	d003      	beq.n	80085e6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 80085de:	683b      	ldr	r3, [r7, #0]
 80085e0:	685b      	ldr	r3, [r3, #4]
 80085e2:	2b12      	cmp	r3, #18
 80085e4:	d130      	bne.n	8008648 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80085e6:	687b      	ldr	r3, [r7, #4]
 80085e8:	689b      	ldr	r3, [r3, #8]
 80085ea:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80085ec:	69fb      	ldr	r3, [r7, #28]
 80085ee:	005b      	lsls	r3, r3, #1
 80085f0:	2203      	movs	r2, #3
 80085f2:	fa02 f303 	lsl.w	r3, r2, r3
 80085f6:	43db      	mvns	r3, r3
 80085f8:	69ba      	ldr	r2, [r7, #24]
 80085fa:	4013      	ands	r3, r2
 80085fc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80085fe:	683b      	ldr	r3, [r7, #0]
 8008600:	68da      	ldr	r2, [r3, #12]
 8008602:	69fb      	ldr	r3, [r7, #28]
 8008604:	005b      	lsls	r3, r3, #1
 8008606:	fa02 f303 	lsl.w	r3, r2, r3
 800860a:	69ba      	ldr	r2, [r7, #24]
 800860c:	4313      	orrs	r3, r2
 800860e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	69ba      	ldr	r2, [r7, #24]
 8008614:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8008616:	687b      	ldr	r3, [r7, #4]
 8008618:	685b      	ldr	r3, [r3, #4]
 800861a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800861c:	2201      	movs	r2, #1
 800861e:	69fb      	ldr	r3, [r7, #28]
 8008620:	fa02 f303 	lsl.w	r3, r2, r3
 8008624:	43db      	mvns	r3, r3
 8008626:	69ba      	ldr	r2, [r7, #24]
 8008628:	4013      	ands	r3, r2
 800862a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800862c:	683b      	ldr	r3, [r7, #0]
 800862e:	685b      	ldr	r3, [r3, #4]
 8008630:	091b      	lsrs	r3, r3, #4
 8008632:	f003 0201 	and.w	r2, r3, #1
 8008636:	69fb      	ldr	r3, [r7, #28]
 8008638:	fa02 f303 	lsl.w	r3, r2, r3
 800863c:	69ba      	ldr	r2, [r7, #24]
 800863e:	4313      	orrs	r3, r2
 8008640:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8008642:	687b      	ldr	r3, [r7, #4]
 8008644:	69ba      	ldr	r2, [r7, #24]
 8008646:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	68db      	ldr	r3, [r3, #12]
 800864c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800864e:	69fb      	ldr	r3, [r7, #28]
 8008650:	005b      	lsls	r3, r3, #1
 8008652:	2203      	movs	r2, #3
 8008654:	fa02 f303 	lsl.w	r3, r2, r3
 8008658:	43db      	mvns	r3, r3
 800865a:	69ba      	ldr	r2, [r7, #24]
 800865c:	4013      	ands	r3, r2
 800865e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008660:	683b      	ldr	r3, [r7, #0]
 8008662:	689a      	ldr	r2, [r3, #8]
 8008664:	69fb      	ldr	r3, [r7, #28]
 8008666:	005b      	lsls	r3, r3, #1
 8008668:	fa02 f303 	lsl.w	r3, r2, r3
 800866c:	69ba      	ldr	r2, [r7, #24]
 800866e:	4313      	orrs	r3, r2
 8008670:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	69ba      	ldr	r2, [r7, #24]
 8008676:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8008678:	683b      	ldr	r3, [r7, #0]
 800867a:	685b      	ldr	r3, [r3, #4]
 800867c:	2b02      	cmp	r3, #2
 800867e:	d003      	beq.n	8008688 <HAL_GPIO_Init+0xfc>
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	685b      	ldr	r3, [r3, #4]
 8008684:	2b12      	cmp	r3, #18
 8008686:	d123      	bne.n	80086d0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008688:	69fb      	ldr	r3, [r7, #28]
 800868a:	08da      	lsrs	r2, r3, #3
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	3208      	adds	r2, #8
 8008690:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008694:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008696:	69fb      	ldr	r3, [r7, #28]
 8008698:	f003 0307 	and.w	r3, r3, #7
 800869c:	009b      	lsls	r3, r3, #2
 800869e:	220f      	movs	r2, #15
 80086a0:	fa02 f303 	lsl.w	r3, r2, r3
 80086a4:	43db      	mvns	r3, r3
 80086a6:	69ba      	ldr	r2, [r7, #24]
 80086a8:	4013      	ands	r3, r2
 80086aa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	691a      	ldr	r2, [r3, #16]
 80086b0:	69fb      	ldr	r3, [r7, #28]
 80086b2:	f003 0307 	and.w	r3, r3, #7
 80086b6:	009b      	lsls	r3, r3, #2
 80086b8:	fa02 f303 	lsl.w	r3, r2, r3
 80086bc:	69ba      	ldr	r2, [r7, #24]
 80086be:	4313      	orrs	r3, r2
 80086c0:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80086c2:	69fb      	ldr	r3, [r7, #28]
 80086c4:	08da      	lsrs	r2, r3, #3
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	3208      	adds	r2, #8
 80086ca:	69b9      	ldr	r1, [r7, #24]
 80086cc:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80086d6:	69fb      	ldr	r3, [r7, #28]
 80086d8:	005b      	lsls	r3, r3, #1
 80086da:	2203      	movs	r2, #3
 80086dc:	fa02 f303 	lsl.w	r3, r2, r3
 80086e0:	43db      	mvns	r3, r3
 80086e2:	69ba      	ldr	r2, [r7, #24]
 80086e4:	4013      	ands	r3, r2
 80086e6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80086e8:	683b      	ldr	r3, [r7, #0]
 80086ea:	685b      	ldr	r3, [r3, #4]
 80086ec:	f003 0203 	and.w	r2, r3, #3
 80086f0:	69fb      	ldr	r3, [r7, #28]
 80086f2:	005b      	lsls	r3, r3, #1
 80086f4:	fa02 f303 	lsl.w	r3, r2, r3
 80086f8:	69ba      	ldr	r2, [r7, #24]
 80086fa:	4313      	orrs	r3, r2
 80086fc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	69ba      	ldr	r2, [r7, #24]
 8008702:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8008704:	683b      	ldr	r3, [r7, #0]
 8008706:	685b      	ldr	r3, [r3, #4]
 8008708:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800870c:	2b00      	cmp	r3, #0
 800870e:	f000 80ae 	beq.w	800886e <HAL_GPIO_Init+0x2e2>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008712:	2300      	movs	r3, #0
 8008714:	60fb      	str	r3, [r7, #12]
 8008716:	4b5c      	ldr	r3, [pc, #368]	; (8008888 <HAL_GPIO_Init+0x2fc>)
 8008718:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800871a:	4a5b      	ldr	r2, [pc, #364]	; (8008888 <HAL_GPIO_Init+0x2fc>)
 800871c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008720:	6453      	str	r3, [r2, #68]	; 0x44
 8008722:	4b59      	ldr	r3, [pc, #356]	; (8008888 <HAL_GPIO_Init+0x2fc>)
 8008724:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008726:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800872a:	60fb      	str	r3, [r7, #12]
 800872c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800872e:	4a57      	ldr	r2, [pc, #348]	; (800888c <HAL_GPIO_Init+0x300>)
 8008730:	69fb      	ldr	r3, [r7, #28]
 8008732:	089b      	lsrs	r3, r3, #2
 8008734:	3302      	adds	r3, #2
 8008736:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800873a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800873c:	69fb      	ldr	r3, [r7, #28]
 800873e:	f003 0303 	and.w	r3, r3, #3
 8008742:	009b      	lsls	r3, r3, #2
 8008744:	220f      	movs	r2, #15
 8008746:	fa02 f303 	lsl.w	r3, r2, r3
 800874a:	43db      	mvns	r3, r3
 800874c:	69ba      	ldr	r2, [r7, #24]
 800874e:	4013      	ands	r3, r2
 8008750:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	4a4e      	ldr	r2, [pc, #312]	; (8008890 <HAL_GPIO_Init+0x304>)
 8008756:	4293      	cmp	r3, r2
 8008758:	d025      	beq.n	80087a6 <HAL_GPIO_Init+0x21a>
 800875a:	687b      	ldr	r3, [r7, #4]
 800875c:	4a4d      	ldr	r2, [pc, #308]	; (8008894 <HAL_GPIO_Init+0x308>)
 800875e:	4293      	cmp	r3, r2
 8008760:	d01f      	beq.n	80087a2 <HAL_GPIO_Init+0x216>
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	4a4c      	ldr	r2, [pc, #304]	; (8008898 <HAL_GPIO_Init+0x30c>)
 8008766:	4293      	cmp	r3, r2
 8008768:	d019      	beq.n	800879e <HAL_GPIO_Init+0x212>
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	4a4b      	ldr	r2, [pc, #300]	; (800889c <HAL_GPIO_Init+0x310>)
 800876e:	4293      	cmp	r3, r2
 8008770:	d013      	beq.n	800879a <HAL_GPIO_Init+0x20e>
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	4a4a      	ldr	r2, [pc, #296]	; (80088a0 <HAL_GPIO_Init+0x314>)
 8008776:	4293      	cmp	r3, r2
 8008778:	d00d      	beq.n	8008796 <HAL_GPIO_Init+0x20a>
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	4a49      	ldr	r2, [pc, #292]	; (80088a4 <HAL_GPIO_Init+0x318>)
 800877e:	4293      	cmp	r3, r2
 8008780:	d007      	beq.n	8008792 <HAL_GPIO_Init+0x206>
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	4a48      	ldr	r2, [pc, #288]	; (80088a8 <HAL_GPIO_Init+0x31c>)
 8008786:	4293      	cmp	r3, r2
 8008788:	d101      	bne.n	800878e <HAL_GPIO_Init+0x202>
 800878a:	2306      	movs	r3, #6
 800878c:	e00c      	b.n	80087a8 <HAL_GPIO_Init+0x21c>
 800878e:	2307      	movs	r3, #7
 8008790:	e00a      	b.n	80087a8 <HAL_GPIO_Init+0x21c>
 8008792:	2305      	movs	r3, #5
 8008794:	e008      	b.n	80087a8 <HAL_GPIO_Init+0x21c>
 8008796:	2304      	movs	r3, #4
 8008798:	e006      	b.n	80087a8 <HAL_GPIO_Init+0x21c>
 800879a:	2303      	movs	r3, #3
 800879c:	e004      	b.n	80087a8 <HAL_GPIO_Init+0x21c>
 800879e:	2302      	movs	r3, #2
 80087a0:	e002      	b.n	80087a8 <HAL_GPIO_Init+0x21c>
 80087a2:	2301      	movs	r3, #1
 80087a4:	e000      	b.n	80087a8 <HAL_GPIO_Init+0x21c>
 80087a6:	2300      	movs	r3, #0
 80087a8:	69fa      	ldr	r2, [r7, #28]
 80087aa:	f002 0203 	and.w	r2, r2, #3
 80087ae:	0092      	lsls	r2, r2, #2
 80087b0:	4093      	lsls	r3, r2
 80087b2:	69ba      	ldr	r2, [r7, #24]
 80087b4:	4313      	orrs	r3, r2
 80087b6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80087b8:	4934      	ldr	r1, [pc, #208]	; (800888c <HAL_GPIO_Init+0x300>)
 80087ba:	69fb      	ldr	r3, [r7, #28]
 80087bc:	089b      	lsrs	r3, r3, #2
 80087be:	3302      	adds	r3, #2
 80087c0:	69ba      	ldr	r2, [r7, #24]
 80087c2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80087c6:	4b39      	ldr	r3, [pc, #228]	; (80088ac <HAL_GPIO_Init+0x320>)
 80087c8:	681b      	ldr	r3, [r3, #0]
 80087ca:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80087cc:	693b      	ldr	r3, [r7, #16]
 80087ce:	43db      	mvns	r3, r3
 80087d0:	69ba      	ldr	r2, [r7, #24]
 80087d2:	4013      	ands	r3, r2
 80087d4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80087d6:	683b      	ldr	r3, [r7, #0]
 80087d8:	685b      	ldr	r3, [r3, #4]
 80087da:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d003      	beq.n	80087ea <HAL_GPIO_Init+0x25e>
        {
          temp |= iocurrent;
 80087e2:	69ba      	ldr	r2, [r7, #24]
 80087e4:	693b      	ldr	r3, [r7, #16]
 80087e6:	4313      	orrs	r3, r2
 80087e8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80087ea:	4a30      	ldr	r2, [pc, #192]	; (80088ac <HAL_GPIO_Init+0x320>)
 80087ec:	69bb      	ldr	r3, [r7, #24]
 80087ee:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80087f0:	4b2e      	ldr	r3, [pc, #184]	; (80088ac <HAL_GPIO_Init+0x320>)
 80087f2:	685b      	ldr	r3, [r3, #4]
 80087f4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80087f6:	693b      	ldr	r3, [r7, #16]
 80087f8:	43db      	mvns	r3, r3
 80087fa:	69ba      	ldr	r2, [r7, #24]
 80087fc:	4013      	ands	r3, r2
 80087fe:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8008800:	683b      	ldr	r3, [r7, #0]
 8008802:	685b      	ldr	r3, [r3, #4]
 8008804:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008808:	2b00      	cmp	r3, #0
 800880a:	d003      	beq.n	8008814 <HAL_GPIO_Init+0x288>
        {
          temp |= iocurrent;
 800880c:	69ba      	ldr	r2, [r7, #24]
 800880e:	693b      	ldr	r3, [r7, #16]
 8008810:	4313      	orrs	r3, r2
 8008812:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008814:	4a25      	ldr	r2, [pc, #148]	; (80088ac <HAL_GPIO_Init+0x320>)
 8008816:	69bb      	ldr	r3, [r7, #24]
 8008818:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800881a:	4b24      	ldr	r3, [pc, #144]	; (80088ac <HAL_GPIO_Init+0x320>)
 800881c:	689b      	ldr	r3, [r3, #8]
 800881e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008820:	693b      	ldr	r3, [r7, #16]
 8008822:	43db      	mvns	r3, r3
 8008824:	69ba      	ldr	r2, [r7, #24]
 8008826:	4013      	ands	r3, r2
 8008828:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800882a:	683b      	ldr	r3, [r7, #0]
 800882c:	685b      	ldr	r3, [r3, #4]
 800882e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008832:	2b00      	cmp	r3, #0
 8008834:	d003      	beq.n	800883e <HAL_GPIO_Init+0x2b2>
        {
          temp |= iocurrent;
 8008836:	69ba      	ldr	r2, [r7, #24]
 8008838:	693b      	ldr	r3, [r7, #16]
 800883a:	4313      	orrs	r3, r2
 800883c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800883e:	4a1b      	ldr	r2, [pc, #108]	; (80088ac <HAL_GPIO_Init+0x320>)
 8008840:	69bb      	ldr	r3, [r7, #24]
 8008842:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8008844:	4b19      	ldr	r3, [pc, #100]	; (80088ac <HAL_GPIO_Init+0x320>)
 8008846:	68db      	ldr	r3, [r3, #12]
 8008848:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800884a:	693b      	ldr	r3, [r7, #16]
 800884c:	43db      	mvns	r3, r3
 800884e:	69ba      	ldr	r2, [r7, #24]
 8008850:	4013      	ands	r3, r2
 8008852:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8008854:	683b      	ldr	r3, [r7, #0]
 8008856:	685b      	ldr	r3, [r3, #4]
 8008858:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800885c:	2b00      	cmp	r3, #0
 800885e:	d003      	beq.n	8008868 <HAL_GPIO_Init+0x2dc>
        {
          temp |= iocurrent;
 8008860:	69ba      	ldr	r2, [r7, #24]
 8008862:	693b      	ldr	r3, [r7, #16]
 8008864:	4313      	orrs	r3, r2
 8008866:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008868:	4a10      	ldr	r2, [pc, #64]	; (80088ac <HAL_GPIO_Init+0x320>)
 800886a:	69bb      	ldr	r3, [r7, #24]
 800886c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800886e:	69fb      	ldr	r3, [r7, #28]
 8008870:	3301      	adds	r3, #1
 8008872:	61fb      	str	r3, [r7, #28]
 8008874:	69fb      	ldr	r3, [r7, #28]
 8008876:	2b0f      	cmp	r3, #15
 8008878:	f67f ae96 	bls.w	80085a8 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800887c:	bf00      	nop
 800887e:	3724      	adds	r7, #36	; 0x24
 8008880:	46bd      	mov	sp, r7
 8008882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008886:	4770      	bx	lr
 8008888:	40023800 	.word	0x40023800
 800888c:	40013800 	.word	0x40013800
 8008890:	40020000 	.word	0x40020000
 8008894:	40020400 	.word	0x40020400
 8008898:	40020800 	.word	0x40020800
 800889c:	40020c00 	.word	0x40020c00
 80088a0:	40021000 	.word	0x40021000
 80088a4:	40021400 	.word	0x40021400
 80088a8:	40021800 	.word	0x40021800
 80088ac:	40013c00 	.word	0x40013c00

080088b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80088b0:	b480      	push	{r7}
 80088b2:	b085      	sub	sp, #20
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
 80088b8:	460b      	mov	r3, r1
 80088ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80088bc:	687b      	ldr	r3, [r7, #4]
 80088be:	691a      	ldr	r2, [r3, #16]
 80088c0:	887b      	ldrh	r3, [r7, #2]
 80088c2:	4013      	ands	r3, r2
 80088c4:	2b00      	cmp	r3, #0
 80088c6:	d002      	beq.n	80088ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80088c8:	2301      	movs	r3, #1
 80088ca:	73fb      	strb	r3, [r7, #15]
 80088cc:	e001      	b.n	80088d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80088ce:	2300      	movs	r3, #0
 80088d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80088d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80088d4:	4618      	mov	r0, r3
 80088d6:	3714      	adds	r7, #20
 80088d8:	46bd      	mov	sp, r7
 80088da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088de:	4770      	bx	lr

080088e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80088e0:	b480      	push	{r7}
 80088e2:	b083      	sub	sp, #12
 80088e4:	af00      	add	r7, sp, #0
 80088e6:	6078      	str	r0, [r7, #4]
 80088e8:	460b      	mov	r3, r1
 80088ea:	807b      	strh	r3, [r7, #2]
 80088ec:	4613      	mov	r3, r2
 80088ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80088f0:	787b      	ldrb	r3, [r7, #1]
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d003      	beq.n	80088fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80088f6:	887a      	ldrh	r2, [r7, #2]
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80088fc:	e003      	b.n	8008906 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80088fe:	887b      	ldrh	r3, [r7, #2]
 8008900:	041a      	lsls	r2, r3, #16
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	619a      	str	r2, [r3, #24]
}
 8008906:	bf00      	nop
 8008908:	370c      	adds	r7, #12
 800890a:	46bd      	mov	sp, r7
 800890c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008910:	4770      	bx	lr
	...

08008914 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008914:	b580      	push	{r7, lr}
 8008916:	b084      	sub	sp, #16
 8008918:	af00      	add	r7, sp, #0
 800891a:	6078      	str	r0, [r7, #4]
 800891c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	2b00      	cmp	r3, #0
 8008922:	d101      	bne.n	8008928 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008924:	2301      	movs	r3, #1
 8008926:	e0cc      	b.n	8008ac2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008928:	4b68      	ldr	r3, [pc, #416]	; (8008acc <HAL_RCC_ClockConfig+0x1b8>)
 800892a:	681b      	ldr	r3, [r3, #0]
 800892c:	f003 030f 	and.w	r3, r3, #15
 8008930:	683a      	ldr	r2, [r7, #0]
 8008932:	429a      	cmp	r2, r3
 8008934:	d90c      	bls.n	8008950 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008936:	4b65      	ldr	r3, [pc, #404]	; (8008acc <HAL_RCC_ClockConfig+0x1b8>)
 8008938:	683a      	ldr	r2, [r7, #0]
 800893a:	b2d2      	uxtb	r2, r2
 800893c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800893e:	4b63      	ldr	r3, [pc, #396]	; (8008acc <HAL_RCC_ClockConfig+0x1b8>)
 8008940:	681b      	ldr	r3, [r3, #0]
 8008942:	f003 030f 	and.w	r3, r3, #15
 8008946:	683a      	ldr	r2, [r7, #0]
 8008948:	429a      	cmp	r2, r3
 800894a:	d001      	beq.n	8008950 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800894c:	2301      	movs	r3, #1
 800894e:	e0b8      	b.n	8008ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008950:	687b      	ldr	r3, [r7, #4]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	f003 0302 	and.w	r3, r3, #2
 8008958:	2b00      	cmp	r3, #0
 800895a:	d020      	beq.n	800899e <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800895c:	687b      	ldr	r3, [r7, #4]
 800895e:	681b      	ldr	r3, [r3, #0]
 8008960:	f003 0304 	and.w	r3, r3, #4
 8008964:	2b00      	cmp	r3, #0
 8008966:	d005      	beq.n	8008974 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008968:	4b59      	ldr	r3, [pc, #356]	; (8008ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800896a:	689b      	ldr	r3, [r3, #8]
 800896c:	4a58      	ldr	r2, [pc, #352]	; (8008ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800896e:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008972:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008974:	687b      	ldr	r3, [r7, #4]
 8008976:	681b      	ldr	r3, [r3, #0]
 8008978:	f003 0308 	and.w	r3, r3, #8
 800897c:	2b00      	cmp	r3, #0
 800897e:	d005      	beq.n	800898c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008980:	4b53      	ldr	r3, [pc, #332]	; (8008ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8008982:	689b      	ldr	r3, [r3, #8]
 8008984:	4a52      	ldr	r2, [pc, #328]	; (8008ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8008986:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800898a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800898c:	4b50      	ldr	r3, [pc, #320]	; (8008ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800898e:	689b      	ldr	r3, [r3, #8]
 8008990:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008994:	687b      	ldr	r3, [r7, #4]
 8008996:	689b      	ldr	r3, [r3, #8]
 8008998:	494d      	ldr	r1, [pc, #308]	; (8008ad0 <HAL_RCC_ClockConfig+0x1bc>)
 800899a:	4313      	orrs	r3, r2
 800899c:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800899e:	687b      	ldr	r3, [r7, #4]
 80089a0:	681b      	ldr	r3, [r3, #0]
 80089a2:	f003 0301 	and.w	r3, r3, #1
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	d044      	beq.n	8008a34 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80089aa:	687b      	ldr	r3, [r7, #4]
 80089ac:	685b      	ldr	r3, [r3, #4]
 80089ae:	2b01      	cmp	r3, #1
 80089b0:	d107      	bne.n	80089c2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80089b2:	4b47      	ldr	r3, [pc, #284]	; (8008ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80089b4:	681b      	ldr	r3, [r3, #0]
 80089b6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80089ba:	2b00      	cmp	r3, #0
 80089bc:	d119      	bne.n	80089f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80089be:	2301      	movs	r3, #1
 80089c0:	e07f      	b.n	8008ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	685b      	ldr	r3, [r3, #4]
 80089c6:	2b02      	cmp	r3, #2
 80089c8:	d003      	beq.n	80089d2 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80089ca:	687b      	ldr	r3, [r7, #4]
 80089cc:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80089ce:	2b03      	cmp	r3, #3
 80089d0:	d107      	bne.n	80089e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80089d2:	4b3f      	ldr	r3, [pc, #252]	; (8008ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80089d4:	681b      	ldr	r3, [r3, #0]
 80089d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d109      	bne.n	80089f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80089de:	2301      	movs	r3, #1
 80089e0:	e06f      	b.n	8008ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80089e2:	4b3b      	ldr	r3, [pc, #236]	; (8008ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80089e4:	681b      	ldr	r3, [r3, #0]
 80089e6:	f003 0302 	and.w	r3, r3, #2
 80089ea:	2b00      	cmp	r3, #0
 80089ec:	d101      	bne.n	80089f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80089ee:	2301      	movs	r3, #1
 80089f0:	e067      	b.n	8008ac2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80089f2:	4b37      	ldr	r3, [pc, #220]	; (8008ad0 <HAL_RCC_ClockConfig+0x1bc>)
 80089f4:	689b      	ldr	r3, [r3, #8]
 80089f6:	f023 0203 	bic.w	r2, r3, #3
 80089fa:	687b      	ldr	r3, [r7, #4]
 80089fc:	685b      	ldr	r3, [r3, #4]
 80089fe:	4934      	ldr	r1, [pc, #208]	; (8008ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a00:	4313      	orrs	r3, r2
 8008a02:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008a04:	f7fe ff38 	bl	8007878 <HAL_GetTick>
 8008a08:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a0a:	e00a      	b.n	8008a22 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008a0c:	f7fe ff34 	bl	8007878 <HAL_GetTick>
 8008a10:	4602      	mov	r2, r0
 8008a12:	68fb      	ldr	r3, [r7, #12]
 8008a14:	1ad3      	subs	r3, r2, r3
 8008a16:	f241 3288 	movw	r2, #5000	; 0x1388
 8008a1a:	4293      	cmp	r3, r2
 8008a1c:	d901      	bls.n	8008a22 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008a1e:	2303      	movs	r3, #3
 8008a20:	e04f      	b.n	8008ac2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008a22:	4b2b      	ldr	r3, [pc, #172]	; (8008ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a24:	689b      	ldr	r3, [r3, #8]
 8008a26:	f003 020c 	and.w	r2, r3, #12
 8008a2a:	687b      	ldr	r3, [r7, #4]
 8008a2c:	685b      	ldr	r3, [r3, #4]
 8008a2e:	009b      	lsls	r3, r3, #2
 8008a30:	429a      	cmp	r2, r3
 8008a32:	d1eb      	bne.n	8008a0c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008a34:	4b25      	ldr	r3, [pc, #148]	; (8008acc <HAL_RCC_ClockConfig+0x1b8>)
 8008a36:	681b      	ldr	r3, [r3, #0]
 8008a38:	f003 030f 	and.w	r3, r3, #15
 8008a3c:	683a      	ldr	r2, [r7, #0]
 8008a3e:	429a      	cmp	r2, r3
 8008a40:	d20c      	bcs.n	8008a5c <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a42:	4b22      	ldr	r3, [pc, #136]	; (8008acc <HAL_RCC_ClockConfig+0x1b8>)
 8008a44:	683a      	ldr	r2, [r7, #0]
 8008a46:	b2d2      	uxtb	r2, r2
 8008a48:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a4a:	4b20      	ldr	r3, [pc, #128]	; (8008acc <HAL_RCC_ClockConfig+0x1b8>)
 8008a4c:	681b      	ldr	r3, [r3, #0]
 8008a4e:	f003 030f 	and.w	r3, r3, #15
 8008a52:	683a      	ldr	r2, [r7, #0]
 8008a54:	429a      	cmp	r2, r3
 8008a56:	d001      	beq.n	8008a5c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008a58:	2301      	movs	r3, #1
 8008a5a:	e032      	b.n	8008ac2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a5c:	687b      	ldr	r3, [r7, #4]
 8008a5e:	681b      	ldr	r3, [r3, #0]
 8008a60:	f003 0304 	and.w	r3, r3, #4
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d008      	beq.n	8008a7a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008a68:	4b19      	ldr	r3, [pc, #100]	; (8008ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a6a:	689b      	ldr	r3, [r3, #8]
 8008a6c:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008a70:	687b      	ldr	r3, [r7, #4]
 8008a72:	68db      	ldr	r3, [r3, #12]
 8008a74:	4916      	ldr	r1, [pc, #88]	; (8008ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a76:	4313      	orrs	r3, r2
 8008a78:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a7a:	687b      	ldr	r3, [r7, #4]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f003 0308 	and.w	r3, r3, #8
 8008a82:	2b00      	cmp	r3, #0
 8008a84:	d009      	beq.n	8008a9a <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008a86:	4b12      	ldr	r3, [pc, #72]	; (8008ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a88:	689b      	ldr	r3, [r3, #8]
 8008a8a:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	691b      	ldr	r3, [r3, #16]
 8008a92:	00db      	lsls	r3, r3, #3
 8008a94:	490e      	ldr	r1, [pc, #56]	; (8008ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8008a96:	4313      	orrs	r3, r2
 8008a98:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008a9a:	f000 f887 	bl	8008bac <HAL_RCC_GetSysClockFreq>
 8008a9e:	4601      	mov	r1, r0
 8008aa0:	4b0b      	ldr	r3, [pc, #44]	; (8008ad0 <HAL_RCC_ClockConfig+0x1bc>)
 8008aa2:	689b      	ldr	r3, [r3, #8]
 8008aa4:	091b      	lsrs	r3, r3, #4
 8008aa6:	f003 030f 	and.w	r3, r3, #15
 8008aaa:	4a0a      	ldr	r2, [pc, #40]	; (8008ad4 <HAL_RCC_ClockConfig+0x1c0>)
 8008aac:	5cd3      	ldrb	r3, [r2, r3]
 8008aae:	fa21 f303 	lsr.w	r3, r1, r3
 8008ab2:	4a09      	ldr	r2, [pc, #36]	; (8008ad8 <HAL_RCC_ClockConfig+0x1c4>)
 8008ab4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008ab6:	4b09      	ldr	r3, [pc, #36]	; (8008adc <HAL_RCC_ClockConfig+0x1c8>)
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	4618      	mov	r0, r3
 8008abc:	f7fe fdb2 	bl	8007624 <HAL_InitTick>

  return HAL_OK;
 8008ac0:	2300      	movs	r3, #0
}
 8008ac2:	4618      	mov	r0, r3
 8008ac4:	3710      	adds	r7, #16
 8008ac6:	46bd      	mov	sp, r7
 8008ac8:	bd80      	pop	{r7, pc}
 8008aca:	bf00      	nop
 8008acc:	40023c00 	.word	0x40023c00
 8008ad0:	40023800 	.word	0x40023800
 8008ad4:	08044b10 	.word	0x08044b10
 8008ad8:	20000008 	.word	0x20000008
 8008adc:	2000000c 	.word	0x2000000c

08008ae0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008ae0:	b480      	push	{r7}
 8008ae2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008ae4:	4b03      	ldr	r3, [pc, #12]	; (8008af4 <HAL_RCC_GetHCLKFreq+0x14>)
 8008ae6:	681b      	ldr	r3, [r3, #0]
}
 8008ae8:	4618      	mov	r0, r3
 8008aea:	46bd      	mov	sp, r7
 8008aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008af0:	4770      	bx	lr
 8008af2:	bf00      	nop
 8008af4:	20000008 	.word	0x20000008

08008af8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008af8:	b580      	push	{r7, lr}
 8008afa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008afc:	f7ff fff0 	bl	8008ae0 <HAL_RCC_GetHCLKFreq>
 8008b00:	4601      	mov	r1, r0
 8008b02:	4b05      	ldr	r3, [pc, #20]	; (8008b18 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008b04:	689b      	ldr	r3, [r3, #8]
 8008b06:	0a9b      	lsrs	r3, r3, #10
 8008b08:	f003 0307 	and.w	r3, r3, #7
 8008b0c:	4a03      	ldr	r2, [pc, #12]	; (8008b1c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008b0e:	5cd3      	ldrb	r3, [r2, r3]
 8008b10:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008b14:	4618      	mov	r0, r3
 8008b16:	bd80      	pop	{r7, pc}
 8008b18:	40023800 	.word	0x40023800
 8008b1c:	08044b20 	.word	0x08044b20

08008b20 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008b20:	b580      	push	{r7, lr}
 8008b22:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008b24:	f7ff ffdc 	bl	8008ae0 <HAL_RCC_GetHCLKFreq>
 8008b28:	4601      	mov	r1, r0
 8008b2a:	4b05      	ldr	r3, [pc, #20]	; (8008b40 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008b2c:	689b      	ldr	r3, [r3, #8]
 8008b2e:	0b5b      	lsrs	r3, r3, #13
 8008b30:	f003 0307 	and.w	r3, r3, #7
 8008b34:	4a03      	ldr	r2, [pc, #12]	; (8008b44 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008b36:	5cd3      	ldrb	r3, [r2, r3]
 8008b38:	fa21 f303 	lsr.w	r3, r1, r3
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	bd80      	pop	{r7, pc}
 8008b40:	40023800 	.word	0x40023800
 8008b44:	08044b20 	.word	0x08044b20

08008b48 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
 8008b50:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008b52:	687b      	ldr	r3, [r7, #4]
 8008b54:	220f      	movs	r2, #15
 8008b56:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008b58:	4b12      	ldr	r3, [pc, #72]	; (8008ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8008b5a:	689b      	ldr	r3, [r3, #8]
 8008b5c:	f003 0203 	and.w	r2, r3, #3
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008b64:	4b0f      	ldr	r3, [pc, #60]	; (8008ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8008b66:	689b      	ldr	r3, [r3, #8]
 8008b68:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008b70:	4b0c      	ldr	r3, [pc, #48]	; (8008ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8008b72:	689b      	ldr	r3, [r3, #8]
 8008b74:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8008b7c:	4b09      	ldr	r3, [pc, #36]	; (8008ba4 <HAL_RCC_GetClockConfig+0x5c>)
 8008b7e:	689b      	ldr	r3, [r3, #8]
 8008b80:	08db      	lsrs	r3, r3, #3
 8008b82:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008b86:	687b      	ldr	r3, [r7, #4]
 8008b88:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008b8a:	4b07      	ldr	r3, [pc, #28]	; (8008ba8 <HAL_RCC_GetClockConfig+0x60>)
 8008b8c:	681b      	ldr	r3, [r3, #0]
 8008b8e:	f003 020f 	and.w	r2, r3, #15
 8008b92:	683b      	ldr	r3, [r7, #0]
 8008b94:	601a      	str	r2, [r3, #0]
}
 8008b96:	bf00      	nop
 8008b98:	370c      	adds	r7, #12
 8008b9a:	46bd      	mov	sp, r7
 8008b9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ba0:	4770      	bx	lr
 8008ba2:	bf00      	nop
 8008ba4:	40023800 	.word	0x40023800
 8008ba8:	40023c00 	.word	0x40023c00

08008bac <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008bac:	b5f0      	push	{r4, r5, r6, r7, lr}
 8008bae:	b087      	sub	sp, #28
 8008bb0:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8008bb2:	2300      	movs	r3, #0
 8008bb4:	60fb      	str	r3, [r7, #12]
  uint32_t pllvco = 0U;
 8008bb6:	2300      	movs	r3, #0
 8008bb8:	617b      	str	r3, [r7, #20]
  uint32_t pllp = 0U;
 8008bba:	2300      	movs	r3, #0
 8008bbc:	60bb      	str	r3, [r7, #8]
  uint32_t pllr = 0U;
 8008bbe:	2300      	movs	r3, #0
 8008bc0:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 8008bc2:	2300      	movs	r3, #0
 8008bc4:	613b      	str	r3, [r7, #16]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008bc6:	4bc6      	ldr	r3, [pc, #792]	; (8008ee0 <HAL_RCC_GetSysClockFreq+0x334>)
 8008bc8:	689b      	ldr	r3, [r3, #8]
 8008bca:	f003 030c 	and.w	r3, r3, #12
 8008bce:	2b0c      	cmp	r3, #12
 8008bd0:	f200 817e 	bhi.w	8008ed0 <HAL_RCC_GetSysClockFreq+0x324>
 8008bd4:	a201      	add	r2, pc, #4	; (adr r2, 8008bdc <HAL_RCC_GetSysClockFreq+0x30>)
 8008bd6:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008bda:	bf00      	nop
 8008bdc:	08008c11 	.word	0x08008c11
 8008be0:	08008ed1 	.word	0x08008ed1
 8008be4:	08008ed1 	.word	0x08008ed1
 8008be8:	08008ed1 	.word	0x08008ed1
 8008bec:	08008c17 	.word	0x08008c17
 8008bf0:	08008ed1 	.word	0x08008ed1
 8008bf4:	08008ed1 	.word	0x08008ed1
 8008bf8:	08008ed1 	.word	0x08008ed1
 8008bfc:	08008c1d 	.word	0x08008c1d
 8008c00:	08008ed1 	.word	0x08008ed1
 8008c04:	08008ed1 	.word	0x08008ed1
 8008c08:	08008ed1 	.word	0x08008ed1
 8008c0c:	08008d79 	.word	0x08008d79
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008c10:	4bb4      	ldr	r3, [pc, #720]	; (8008ee4 <HAL_RCC_GetSysClockFreq+0x338>)
 8008c12:	613b      	str	r3, [r7, #16]
       break;
 8008c14:	e15f      	b.n	8008ed6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008c16:	4bb4      	ldr	r3, [pc, #720]	; (8008ee8 <HAL_RCC_GetSysClockFreq+0x33c>)
 8008c18:	613b      	str	r3, [r7, #16]
      break;
 8008c1a:	e15c      	b.n	8008ed6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL/PLLP used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c1c:	4bb0      	ldr	r3, [pc, #704]	; (8008ee0 <HAL_RCC_GetSysClockFreq+0x334>)
 8008c1e:	685b      	ldr	r3, [r3, #4]
 8008c20:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c24:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008c26:	4bae      	ldr	r3, [pc, #696]	; (8008ee0 <HAL_RCC_GetSysClockFreq+0x334>)
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c2e:	2b00      	cmp	r3, #0
 8008c30:	d04a      	beq.n	8008cc8 <HAL_RCC_GetSysClockFreq+0x11c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c32:	4bab      	ldr	r3, [pc, #684]	; (8008ee0 <HAL_RCC_GetSysClockFreq+0x334>)
 8008c34:	685b      	ldr	r3, [r3, #4]
 8008c36:	099b      	lsrs	r3, r3, #6
 8008c38:	f04f 0400 	mov.w	r4, #0
 8008c3c:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008c40:	f04f 0200 	mov.w	r2, #0
 8008c44:	ea03 0501 	and.w	r5, r3, r1
 8008c48:	ea04 0602 	and.w	r6, r4, r2
 8008c4c:	4629      	mov	r1, r5
 8008c4e:	4632      	mov	r2, r6
 8008c50:	f04f 0300 	mov.w	r3, #0
 8008c54:	f04f 0400 	mov.w	r4, #0
 8008c58:	0154      	lsls	r4, r2, #5
 8008c5a:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008c5e:	014b      	lsls	r3, r1, #5
 8008c60:	4619      	mov	r1, r3
 8008c62:	4622      	mov	r2, r4
 8008c64:	1b49      	subs	r1, r1, r5
 8008c66:	eb62 0206 	sbc.w	r2, r2, r6
 8008c6a:	f04f 0300 	mov.w	r3, #0
 8008c6e:	f04f 0400 	mov.w	r4, #0
 8008c72:	0194      	lsls	r4, r2, #6
 8008c74:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008c78:	018b      	lsls	r3, r1, #6
 8008c7a:	1a5b      	subs	r3, r3, r1
 8008c7c:	eb64 0402 	sbc.w	r4, r4, r2
 8008c80:	f04f 0100 	mov.w	r1, #0
 8008c84:	f04f 0200 	mov.w	r2, #0
 8008c88:	00e2      	lsls	r2, r4, #3
 8008c8a:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008c8e:	00d9      	lsls	r1, r3, #3
 8008c90:	460b      	mov	r3, r1
 8008c92:	4614      	mov	r4, r2
 8008c94:	195b      	adds	r3, r3, r5
 8008c96:	eb44 0406 	adc.w	r4, r4, r6
 8008c9a:	f04f 0100 	mov.w	r1, #0
 8008c9e:	f04f 0200 	mov.w	r2, #0
 8008ca2:	0262      	lsls	r2, r4, #9
 8008ca4:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008ca8:	0259      	lsls	r1, r3, #9
 8008caa:	460b      	mov	r3, r1
 8008cac:	4614      	mov	r4, r2
 8008cae:	4618      	mov	r0, r3
 8008cb0:	4621      	mov	r1, r4
 8008cb2:	68fb      	ldr	r3, [r7, #12]
 8008cb4:	f04f 0400 	mov.w	r4, #0
 8008cb8:	461a      	mov	r2, r3
 8008cba:	4623      	mov	r3, r4
 8008cbc:	f7f7 ff9e 	bl	8000bfc <__aeabi_uldivmod>
 8008cc0:	4603      	mov	r3, r0
 8008cc2:	460c      	mov	r4, r1
 8008cc4:	617b      	str	r3, [r7, #20]
 8008cc6:	e049      	b.n	8008d5c <HAL_RCC_GetSysClockFreq+0x1b0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008cc8:	4b85      	ldr	r3, [pc, #532]	; (8008ee0 <HAL_RCC_GetSysClockFreq+0x334>)
 8008cca:	685b      	ldr	r3, [r3, #4]
 8008ccc:	099b      	lsrs	r3, r3, #6
 8008cce:	f04f 0400 	mov.w	r4, #0
 8008cd2:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008cd6:	f04f 0200 	mov.w	r2, #0
 8008cda:	ea03 0501 	and.w	r5, r3, r1
 8008cde:	ea04 0602 	and.w	r6, r4, r2
 8008ce2:	4629      	mov	r1, r5
 8008ce4:	4632      	mov	r2, r6
 8008ce6:	f04f 0300 	mov.w	r3, #0
 8008cea:	f04f 0400 	mov.w	r4, #0
 8008cee:	0154      	lsls	r4, r2, #5
 8008cf0:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008cf4:	014b      	lsls	r3, r1, #5
 8008cf6:	4619      	mov	r1, r3
 8008cf8:	4622      	mov	r2, r4
 8008cfa:	1b49      	subs	r1, r1, r5
 8008cfc:	eb62 0206 	sbc.w	r2, r2, r6
 8008d00:	f04f 0300 	mov.w	r3, #0
 8008d04:	f04f 0400 	mov.w	r4, #0
 8008d08:	0194      	lsls	r4, r2, #6
 8008d0a:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008d0e:	018b      	lsls	r3, r1, #6
 8008d10:	1a5b      	subs	r3, r3, r1
 8008d12:	eb64 0402 	sbc.w	r4, r4, r2
 8008d16:	f04f 0100 	mov.w	r1, #0
 8008d1a:	f04f 0200 	mov.w	r2, #0
 8008d1e:	00e2      	lsls	r2, r4, #3
 8008d20:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008d24:	00d9      	lsls	r1, r3, #3
 8008d26:	460b      	mov	r3, r1
 8008d28:	4614      	mov	r4, r2
 8008d2a:	195b      	adds	r3, r3, r5
 8008d2c:	eb44 0406 	adc.w	r4, r4, r6
 8008d30:	f04f 0100 	mov.w	r1, #0
 8008d34:	f04f 0200 	mov.w	r2, #0
 8008d38:	02a2      	lsls	r2, r4, #10
 8008d3a:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008d3e:	0299      	lsls	r1, r3, #10
 8008d40:	460b      	mov	r3, r1
 8008d42:	4614      	mov	r4, r2
 8008d44:	4618      	mov	r0, r3
 8008d46:	4621      	mov	r1, r4
 8008d48:	68fb      	ldr	r3, [r7, #12]
 8008d4a:	f04f 0400 	mov.w	r4, #0
 8008d4e:	461a      	mov	r2, r3
 8008d50:	4623      	mov	r3, r4
 8008d52:	f7f7 ff53 	bl	8000bfc <__aeabi_uldivmod>
 8008d56:	4603      	mov	r3, r0
 8008d58:	460c      	mov	r4, r1
 8008d5a:	617b      	str	r3, [r7, #20]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008d5c:	4b60      	ldr	r3, [pc, #384]	; (8008ee0 <HAL_RCC_GetSysClockFreq+0x334>)
 8008d5e:	685b      	ldr	r3, [r3, #4]
 8008d60:	0c1b      	lsrs	r3, r3, #16
 8008d62:	f003 0303 	and.w	r3, r3, #3
 8008d66:	3301      	adds	r3, #1
 8008d68:	005b      	lsls	r3, r3, #1
 8008d6a:	60bb      	str	r3, [r7, #8]

      sysclockfreq = pllvco/pllp;
 8008d6c:	697a      	ldr	r2, [r7, #20]
 8008d6e:	68bb      	ldr	r3, [r7, #8]
 8008d70:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d74:	613b      	str	r3, [r7, #16]
      break;
 8008d76:	e0ae      	b.n	8008ed6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    case RCC_CFGR_SWS_PLLR:  /* PLL/PLLR used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLR */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008d78:	4b59      	ldr	r3, [pc, #356]	; (8008ee0 <HAL_RCC_GetSysClockFreq+0x334>)
 8008d7a:	685b      	ldr	r3, [r3, #4]
 8008d7c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008d80:	60fb      	str	r3, [r7, #12]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008d82:	4b57      	ldr	r3, [pc, #348]	; (8008ee0 <HAL_RCC_GetSysClockFreq+0x334>)
 8008d84:	685b      	ldr	r3, [r3, #4]
 8008d86:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d04a      	beq.n	8008e24 <HAL_RCC_GetSysClockFreq+0x278>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d8e:	4b54      	ldr	r3, [pc, #336]	; (8008ee0 <HAL_RCC_GetSysClockFreq+0x334>)
 8008d90:	685b      	ldr	r3, [r3, #4]
 8008d92:	099b      	lsrs	r3, r3, #6
 8008d94:	f04f 0400 	mov.w	r4, #0
 8008d98:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008d9c:	f04f 0200 	mov.w	r2, #0
 8008da0:	ea03 0501 	and.w	r5, r3, r1
 8008da4:	ea04 0602 	and.w	r6, r4, r2
 8008da8:	4629      	mov	r1, r5
 8008daa:	4632      	mov	r2, r6
 8008dac:	f04f 0300 	mov.w	r3, #0
 8008db0:	f04f 0400 	mov.w	r4, #0
 8008db4:	0154      	lsls	r4, r2, #5
 8008db6:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008dba:	014b      	lsls	r3, r1, #5
 8008dbc:	4619      	mov	r1, r3
 8008dbe:	4622      	mov	r2, r4
 8008dc0:	1b49      	subs	r1, r1, r5
 8008dc2:	eb62 0206 	sbc.w	r2, r2, r6
 8008dc6:	f04f 0300 	mov.w	r3, #0
 8008dca:	f04f 0400 	mov.w	r4, #0
 8008dce:	0194      	lsls	r4, r2, #6
 8008dd0:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008dd4:	018b      	lsls	r3, r1, #6
 8008dd6:	1a5b      	subs	r3, r3, r1
 8008dd8:	eb64 0402 	sbc.w	r4, r4, r2
 8008ddc:	f04f 0100 	mov.w	r1, #0
 8008de0:	f04f 0200 	mov.w	r2, #0
 8008de4:	00e2      	lsls	r2, r4, #3
 8008de6:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008dea:	00d9      	lsls	r1, r3, #3
 8008dec:	460b      	mov	r3, r1
 8008dee:	4614      	mov	r4, r2
 8008df0:	195b      	adds	r3, r3, r5
 8008df2:	eb44 0406 	adc.w	r4, r4, r6
 8008df6:	f04f 0100 	mov.w	r1, #0
 8008dfa:	f04f 0200 	mov.w	r2, #0
 8008dfe:	0262      	lsls	r2, r4, #9
 8008e00:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 8008e04:	0259      	lsls	r1, r3, #9
 8008e06:	460b      	mov	r3, r1
 8008e08:	4614      	mov	r4, r2
 8008e0a:	4618      	mov	r0, r3
 8008e0c:	4621      	mov	r1, r4
 8008e0e:	68fb      	ldr	r3, [r7, #12]
 8008e10:	f04f 0400 	mov.w	r4, #0
 8008e14:	461a      	mov	r2, r3
 8008e16:	4623      	mov	r3, r4
 8008e18:	f7f7 fef0 	bl	8000bfc <__aeabi_uldivmod>
 8008e1c:	4603      	mov	r3, r0
 8008e1e:	460c      	mov	r4, r1
 8008e20:	617b      	str	r3, [r7, #20]
 8008e22:	e049      	b.n	8008eb8 <HAL_RCC_GetSysClockFreq+0x30c>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008e24:	4b2e      	ldr	r3, [pc, #184]	; (8008ee0 <HAL_RCC_GetSysClockFreq+0x334>)
 8008e26:	685b      	ldr	r3, [r3, #4]
 8008e28:	099b      	lsrs	r3, r3, #6
 8008e2a:	f04f 0400 	mov.w	r4, #0
 8008e2e:	f240 11ff 	movw	r1, #511	; 0x1ff
 8008e32:	f04f 0200 	mov.w	r2, #0
 8008e36:	ea03 0501 	and.w	r5, r3, r1
 8008e3a:	ea04 0602 	and.w	r6, r4, r2
 8008e3e:	4629      	mov	r1, r5
 8008e40:	4632      	mov	r2, r6
 8008e42:	f04f 0300 	mov.w	r3, #0
 8008e46:	f04f 0400 	mov.w	r4, #0
 8008e4a:	0154      	lsls	r4, r2, #5
 8008e4c:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8008e50:	014b      	lsls	r3, r1, #5
 8008e52:	4619      	mov	r1, r3
 8008e54:	4622      	mov	r2, r4
 8008e56:	1b49      	subs	r1, r1, r5
 8008e58:	eb62 0206 	sbc.w	r2, r2, r6
 8008e5c:	f04f 0300 	mov.w	r3, #0
 8008e60:	f04f 0400 	mov.w	r4, #0
 8008e64:	0194      	lsls	r4, r2, #6
 8008e66:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 8008e6a:	018b      	lsls	r3, r1, #6
 8008e6c:	1a5b      	subs	r3, r3, r1
 8008e6e:	eb64 0402 	sbc.w	r4, r4, r2
 8008e72:	f04f 0100 	mov.w	r1, #0
 8008e76:	f04f 0200 	mov.w	r2, #0
 8008e7a:	00e2      	lsls	r2, r4, #3
 8008e7c:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 8008e80:	00d9      	lsls	r1, r3, #3
 8008e82:	460b      	mov	r3, r1
 8008e84:	4614      	mov	r4, r2
 8008e86:	195b      	adds	r3, r3, r5
 8008e88:	eb44 0406 	adc.w	r4, r4, r6
 8008e8c:	f04f 0100 	mov.w	r1, #0
 8008e90:	f04f 0200 	mov.w	r2, #0
 8008e94:	02a2      	lsls	r2, r4, #10
 8008e96:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 8008e9a:	0299      	lsls	r1, r3, #10
 8008e9c:	460b      	mov	r3, r1
 8008e9e:	4614      	mov	r4, r2
 8008ea0:	4618      	mov	r0, r3
 8008ea2:	4621      	mov	r1, r4
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	f04f 0400 	mov.w	r4, #0
 8008eaa:	461a      	mov	r2, r3
 8008eac:	4623      	mov	r3, r4
 8008eae:	f7f7 fea5 	bl	8000bfc <__aeabi_uldivmod>
 8008eb2:	4603      	mov	r3, r0
 8008eb4:	460c      	mov	r4, r1
 8008eb6:	617b      	str	r3, [r7, #20]
      }
      pllr = ((RCC->PLLCFGR & RCC_PLLCFGR_PLLR) >> RCC_PLLCFGR_PLLR_Pos);
 8008eb8:	4b09      	ldr	r3, [pc, #36]	; (8008ee0 <HAL_RCC_GetSysClockFreq+0x334>)
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	0f1b      	lsrs	r3, r3, #28
 8008ebe:	f003 0307 	and.w	r3, r3, #7
 8008ec2:	607b      	str	r3, [r7, #4]

      sysclockfreq = pllvco/pllr;
 8008ec4:	697a      	ldr	r2, [r7, #20]
 8008ec6:	687b      	ldr	r3, [r7, #4]
 8008ec8:	fbb2 f3f3 	udiv	r3, r2, r3
 8008ecc:	613b      	str	r3, [r7, #16]
      break;
 8008ece:	e002      	b.n	8008ed6 <HAL_RCC_GetSysClockFreq+0x32a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008ed0:	4b04      	ldr	r3, [pc, #16]	; (8008ee4 <HAL_RCC_GetSysClockFreq+0x338>)
 8008ed2:	613b      	str	r3, [r7, #16]
      break;
 8008ed4:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008ed6:	693b      	ldr	r3, [r7, #16]
}
 8008ed8:	4618      	mov	r0, r3
 8008eda:	371c      	adds	r7, #28
 8008edc:	46bd      	mov	sp, r7
 8008ede:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8008ee0:	40023800 	.word	0x40023800
 8008ee4:	00f42400 	.word	0x00f42400
 8008ee8:	007a1200 	.word	0x007a1200

08008eec <HAL_RCC_OscConfig>:
  * @note   This function add the PLL/PLLR factor management during PLL configuration this feature
  *         is only available in STM32F410xx/STM32F446xx/STM32F469xx/STM32F479xx/STM32F412Zx/STM32F412Vx/STM32F412Rx/STM32F412Cx devices
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b086      	sub	sp, #24
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8008ef4:	2300      	movs	r3, #0
 8008ef6:	613b      	str	r3, [r7, #16]

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008ef8:	687b      	ldr	r3, [r7, #4]
 8008efa:	681b      	ldr	r3, [r3, #0]
 8008efc:	f003 0301 	and.w	r3, r3, #1
 8008f00:	2b00      	cmp	r3, #0
 8008f02:	f000 8083 	beq.w	800900c <HAL_RCC_OscConfig+0x120>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008f06:	4b95      	ldr	r3, [pc, #596]	; (800915c <HAL_RCC_OscConfig+0x270>)
 8008f08:	689b      	ldr	r3, [r3, #8]
 8008f0a:	f003 030c 	and.w	r3, r3, #12
 8008f0e:	2b04      	cmp	r3, #4
 8008f10:	d019      	beq.n	8008f46 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008f12:	4b92      	ldr	r3, [pc, #584]	; (800915c <HAL_RCC_OscConfig+0x270>)
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
 8008f1a:	2b08      	cmp	r3, #8
 8008f1c:	d106      	bne.n	8008f2c <HAL_RCC_OscConfig+0x40>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008f1e:	4b8f      	ldr	r3, [pc, #572]	; (800915c <HAL_RCC_OscConfig+0x270>)
 8008f20:	685b      	ldr	r3, [r3, #4]
 8008f22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f26:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f2a:	d00c      	beq.n	8008f46 <HAL_RCC_OscConfig+0x5a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f2c:	4b8b      	ldr	r3, [pc, #556]	; (800915c <HAL_RCC_OscConfig+0x270>)
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)) ||\
 8008f34:	2b0c      	cmp	r3, #12
 8008f36:	d112      	bne.n	8008f5e <HAL_RCC_OscConfig+0x72>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008f38:	4b88      	ldr	r3, [pc, #544]	; (800915c <HAL_RCC_OscConfig+0x270>)
 8008f3a:	685b      	ldr	r3, [r3, #4]
 8008f3c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008f40:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008f44:	d10b      	bne.n	8008f5e <HAL_RCC_OscConfig+0x72>
#else
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
#endif /* STM32F446xx */
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008f46:	4b85      	ldr	r3, [pc, #532]	; (800915c <HAL_RCC_OscConfig+0x270>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008f4e:	2b00      	cmp	r3, #0
 8008f50:	d05b      	beq.n	800900a <HAL_RCC_OscConfig+0x11e>
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	685b      	ldr	r3, [r3, #4]
 8008f56:	2b00      	cmp	r3, #0
 8008f58:	d157      	bne.n	800900a <HAL_RCC_OscConfig+0x11e>
      {
        return HAL_ERROR;
 8008f5a:	2301      	movs	r3, #1
 8008f5c:	e216      	b.n	800938c <HAL_RCC_OscConfig+0x4a0>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008f5e:	687b      	ldr	r3, [r7, #4]
 8008f60:	685b      	ldr	r3, [r3, #4]
 8008f62:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008f66:	d106      	bne.n	8008f76 <HAL_RCC_OscConfig+0x8a>
 8008f68:	4b7c      	ldr	r3, [pc, #496]	; (800915c <HAL_RCC_OscConfig+0x270>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	4a7b      	ldr	r2, [pc, #492]	; (800915c <HAL_RCC_OscConfig+0x270>)
 8008f6e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f72:	6013      	str	r3, [r2, #0]
 8008f74:	e01d      	b.n	8008fb2 <HAL_RCC_OscConfig+0xc6>
 8008f76:	687b      	ldr	r3, [r7, #4]
 8008f78:	685b      	ldr	r3, [r3, #4]
 8008f7a:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008f7e:	d10c      	bne.n	8008f9a <HAL_RCC_OscConfig+0xae>
 8008f80:	4b76      	ldr	r3, [pc, #472]	; (800915c <HAL_RCC_OscConfig+0x270>)
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	4a75      	ldr	r2, [pc, #468]	; (800915c <HAL_RCC_OscConfig+0x270>)
 8008f86:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008f8a:	6013      	str	r3, [r2, #0]
 8008f8c:	4b73      	ldr	r3, [pc, #460]	; (800915c <HAL_RCC_OscConfig+0x270>)
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	4a72      	ldr	r2, [pc, #456]	; (800915c <HAL_RCC_OscConfig+0x270>)
 8008f92:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008f96:	6013      	str	r3, [r2, #0]
 8008f98:	e00b      	b.n	8008fb2 <HAL_RCC_OscConfig+0xc6>
 8008f9a:	4b70      	ldr	r3, [pc, #448]	; (800915c <HAL_RCC_OscConfig+0x270>)
 8008f9c:	681b      	ldr	r3, [r3, #0]
 8008f9e:	4a6f      	ldr	r2, [pc, #444]	; (800915c <HAL_RCC_OscConfig+0x270>)
 8008fa0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008fa4:	6013      	str	r3, [r2, #0]
 8008fa6:	4b6d      	ldr	r3, [pc, #436]	; (800915c <HAL_RCC_OscConfig+0x270>)
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	4a6c      	ldr	r2, [pc, #432]	; (800915c <HAL_RCC_OscConfig+0x270>)
 8008fac:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008fb0:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8008fb2:	687b      	ldr	r3, [r7, #4]
 8008fb4:	685b      	ldr	r3, [r3, #4]
 8008fb6:	2b00      	cmp	r3, #0
 8008fb8:	d013      	beq.n	8008fe2 <HAL_RCC_OscConfig+0xf6>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fba:	f7fe fc5d 	bl	8007878 <HAL_GetTick>
 8008fbe:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fc0:	e008      	b.n	8008fd4 <HAL_RCC_OscConfig+0xe8>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008fc2:	f7fe fc59 	bl	8007878 <HAL_GetTick>
 8008fc6:	4602      	mov	r2, r0
 8008fc8:	693b      	ldr	r3, [r7, #16]
 8008fca:	1ad3      	subs	r3, r2, r3
 8008fcc:	2b64      	cmp	r3, #100	; 0x64
 8008fce:	d901      	bls.n	8008fd4 <HAL_RCC_OscConfig+0xe8>
          {
            return HAL_TIMEOUT;
 8008fd0:	2303      	movs	r3, #3
 8008fd2:	e1db      	b.n	800938c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008fd4:	4b61      	ldr	r3, [pc, #388]	; (800915c <HAL_RCC_OscConfig+0x270>)
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008fdc:	2b00      	cmp	r3, #0
 8008fde:	d0f0      	beq.n	8008fc2 <HAL_RCC_OscConfig+0xd6>
 8008fe0:	e014      	b.n	800900c <HAL_RCC_OscConfig+0x120>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008fe2:	f7fe fc49 	bl	8007878 <HAL_GetTick>
 8008fe6:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008fe8:	e008      	b.n	8008ffc <HAL_RCC_OscConfig+0x110>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008fea:	f7fe fc45 	bl	8007878 <HAL_GetTick>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	693b      	ldr	r3, [r7, #16]
 8008ff2:	1ad3      	subs	r3, r2, r3
 8008ff4:	2b64      	cmp	r3, #100	; 0x64
 8008ff6:	d901      	bls.n	8008ffc <HAL_RCC_OscConfig+0x110>
          {
            return HAL_TIMEOUT;
 8008ff8:	2303      	movs	r3, #3
 8008ffa:	e1c7      	b.n	800938c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008ffc:	4b57      	ldr	r3, [pc, #348]	; (800915c <HAL_RCC_OscConfig+0x270>)
 8008ffe:	681b      	ldr	r3, [r3, #0]
 8009000:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009004:	2b00      	cmp	r3, #0
 8009006:	d1f0      	bne.n	8008fea <HAL_RCC_OscConfig+0xfe>
 8009008:	e000      	b.n	800900c <HAL_RCC_OscConfig+0x120>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800900a:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800900c:	687b      	ldr	r3, [r7, #4]
 800900e:	681b      	ldr	r3, [r3, #0]
 8009010:	f003 0302 	and.w	r3, r3, #2
 8009014:	2b00      	cmp	r3, #0
 8009016:	d06f      	beq.n	80090f8 <HAL_RCC_OscConfig+0x20c>
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
#if defined(STM32F446xx)
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 8009018:	4b50      	ldr	r3, [pc, #320]	; (800915c <HAL_RCC_OscConfig+0x270>)
 800901a:	689b      	ldr	r3, [r3, #8]
 800901c:	f003 030c 	and.w	r3, r3, #12
 8009020:	2b00      	cmp	r3, #0
 8009022:	d017      	beq.n	8009054 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009024:	4b4d      	ldr	r3, [pc, #308]	; (800915c <HAL_RCC_OscConfig+0x270>)
 8009026:	689b      	ldr	r3, [r3, #8]
 8009028:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
 800902c:	2b08      	cmp	r3, #8
 800902e:	d105      	bne.n	800903c <HAL_RCC_OscConfig+0x150>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009030:	4b4a      	ldr	r3, [pc, #296]	; (800915c <HAL_RCC_OscConfig+0x270>)
 8009032:	685b      	ldr	r3, [r3, #4]
 8009034:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009038:	2b00      	cmp	r3, #0
 800903a:	d00b      	beq.n	8009054 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800903c:	4b47      	ldr	r3, [pc, #284]	; (800915c <HAL_RCC_OscConfig+0x270>)
 800903e:	689b      	ldr	r3, [r3, #8]
 8009040:	f003 030c 	and.w	r3, r3, #12
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)) ||\
 8009044:	2b0c      	cmp	r3, #12
 8009046:	d11c      	bne.n	8009082 <HAL_RCC_OscConfig+0x196>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLLR) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8009048:	4b44      	ldr	r3, [pc, #272]	; (800915c <HAL_RCC_OscConfig+0x270>)
 800904a:	685b      	ldr	r3, [r3, #4]
 800904c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009050:	2b00      	cmp	r3, #0
 8009052:	d116      	bne.n	8009082 <HAL_RCC_OscConfig+0x196>
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI)                                                                     ||\
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
#endif /* STM32F446xx */
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009054:	4b41      	ldr	r3, [pc, #260]	; (800915c <HAL_RCC_OscConfig+0x270>)
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	f003 0302 	and.w	r3, r3, #2
 800905c:	2b00      	cmp	r3, #0
 800905e:	d005      	beq.n	800906c <HAL_RCC_OscConfig+0x180>
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	68db      	ldr	r3, [r3, #12]
 8009064:	2b01      	cmp	r3, #1
 8009066:	d001      	beq.n	800906c <HAL_RCC_OscConfig+0x180>
      {
        return HAL_ERROR;
 8009068:	2301      	movs	r3, #1
 800906a:	e18f      	b.n	800938c <HAL_RCC_OscConfig+0x4a0>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800906c:	4b3b      	ldr	r3, [pc, #236]	; (800915c <HAL_RCC_OscConfig+0x270>)
 800906e:	681b      	ldr	r3, [r3, #0]
 8009070:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8009074:	687b      	ldr	r3, [r7, #4]
 8009076:	691b      	ldr	r3, [r3, #16]
 8009078:	00db      	lsls	r3, r3, #3
 800907a:	4938      	ldr	r1, [pc, #224]	; (800915c <HAL_RCC_OscConfig+0x270>)
 800907c:	4313      	orrs	r3, r2
 800907e:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8009080:	e03a      	b.n	80090f8 <HAL_RCC_OscConfig+0x20c>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8009082:	687b      	ldr	r3, [r7, #4]
 8009084:	68db      	ldr	r3, [r3, #12]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d020      	beq.n	80090cc <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800908a:	4b35      	ldr	r3, [pc, #212]	; (8009160 <HAL_RCC_OscConfig+0x274>)
 800908c:	2201      	movs	r2, #1
 800908e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009090:	f7fe fbf2 	bl	8007878 <HAL_GetTick>
 8009094:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009096:	e008      	b.n	80090aa <HAL_RCC_OscConfig+0x1be>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8009098:	f7fe fbee 	bl	8007878 <HAL_GetTick>
 800909c:	4602      	mov	r2, r0
 800909e:	693b      	ldr	r3, [r7, #16]
 80090a0:	1ad3      	subs	r3, r2, r3
 80090a2:	2b02      	cmp	r3, #2
 80090a4:	d901      	bls.n	80090aa <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80090a6:	2303      	movs	r3, #3
 80090a8:	e170      	b.n	800938c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80090aa:	4b2c      	ldr	r3, [pc, #176]	; (800915c <HAL_RCC_OscConfig+0x270>)
 80090ac:	681b      	ldr	r3, [r3, #0]
 80090ae:	f003 0302 	and.w	r3, r3, #2
 80090b2:	2b00      	cmp	r3, #0
 80090b4:	d0f0      	beq.n	8009098 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80090b6:	4b29      	ldr	r3, [pc, #164]	; (800915c <HAL_RCC_OscConfig+0x270>)
 80090b8:	681b      	ldr	r3, [r3, #0]
 80090ba:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80090be:	687b      	ldr	r3, [r7, #4]
 80090c0:	691b      	ldr	r3, [r3, #16]
 80090c2:	00db      	lsls	r3, r3, #3
 80090c4:	4925      	ldr	r1, [pc, #148]	; (800915c <HAL_RCC_OscConfig+0x270>)
 80090c6:	4313      	orrs	r3, r2
 80090c8:	600b      	str	r3, [r1, #0]
 80090ca:	e015      	b.n	80090f8 <HAL_RCC_OscConfig+0x20c>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80090cc:	4b24      	ldr	r3, [pc, #144]	; (8009160 <HAL_RCC_OscConfig+0x274>)
 80090ce:	2200      	movs	r2, #0
 80090d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80090d2:	f7fe fbd1 	bl	8007878 <HAL_GetTick>
 80090d6:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80090d8:	e008      	b.n	80090ec <HAL_RCC_OscConfig+0x200>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80090da:	f7fe fbcd 	bl	8007878 <HAL_GetTick>
 80090de:	4602      	mov	r2, r0
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	1ad3      	subs	r3, r2, r3
 80090e4:	2b02      	cmp	r3, #2
 80090e6:	d901      	bls.n	80090ec <HAL_RCC_OscConfig+0x200>
          {
            return HAL_TIMEOUT;
 80090e8:	2303      	movs	r3, #3
 80090ea:	e14f      	b.n	800938c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80090ec:	4b1b      	ldr	r3, [pc, #108]	; (800915c <HAL_RCC_OscConfig+0x270>)
 80090ee:	681b      	ldr	r3, [r3, #0]
 80090f0:	f003 0302 	and.w	r3, r3, #2
 80090f4:	2b00      	cmp	r3, #0
 80090f6:	d1f0      	bne.n	80090da <HAL_RCC_OscConfig+0x1ee>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f003 0308 	and.w	r3, r3, #8
 8009100:	2b00      	cmp	r3, #0
 8009102:	d037      	beq.n	8009174 <HAL_RCC_OscConfig+0x288>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8009104:	687b      	ldr	r3, [r7, #4]
 8009106:	695b      	ldr	r3, [r3, #20]
 8009108:	2b00      	cmp	r3, #0
 800910a:	d016      	beq.n	800913a <HAL_RCC_OscConfig+0x24e>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800910c:	4b15      	ldr	r3, [pc, #84]	; (8009164 <HAL_RCC_OscConfig+0x278>)
 800910e:	2201      	movs	r2, #1
 8009110:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009112:	f7fe fbb1 	bl	8007878 <HAL_GetTick>
 8009116:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8009118:	e008      	b.n	800912c <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800911a:	f7fe fbad 	bl	8007878 <HAL_GetTick>
 800911e:	4602      	mov	r2, r0
 8009120:	693b      	ldr	r3, [r7, #16]
 8009122:	1ad3      	subs	r3, r2, r3
 8009124:	2b02      	cmp	r3, #2
 8009126:	d901      	bls.n	800912c <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8009128:	2303      	movs	r3, #3
 800912a:	e12f      	b.n	800938c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800912c:	4b0b      	ldr	r3, [pc, #44]	; (800915c <HAL_RCC_OscConfig+0x270>)
 800912e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009130:	f003 0302 	and.w	r3, r3, #2
 8009134:	2b00      	cmp	r3, #0
 8009136:	d0f0      	beq.n	800911a <HAL_RCC_OscConfig+0x22e>
 8009138:	e01c      	b.n	8009174 <HAL_RCC_OscConfig+0x288>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800913a:	4b0a      	ldr	r3, [pc, #40]	; (8009164 <HAL_RCC_OscConfig+0x278>)
 800913c:	2200      	movs	r2, #0
 800913e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009140:	f7fe fb9a 	bl	8007878 <HAL_GetTick>
 8009144:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009146:	e00f      	b.n	8009168 <HAL_RCC_OscConfig+0x27c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8009148:	f7fe fb96 	bl	8007878 <HAL_GetTick>
 800914c:	4602      	mov	r2, r0
 800914e:	693b      	ldr	r3, [r7, #16]
 8009150:	1ad3      	subs	r3, r2, r3
 8009152:	2b02      	cmp	r3, #2
 8009154:	d908      	bls.n	8009168 <HAL_RCC_OscConfig+0x27c>
        {
          return HAL_TIMEOUT;
 8009156:	2303      	movs	r3, #3
 8009158:	e118      	b.n	800938c <HAL_RCC_OscConfig+0x4a0>
 800915a:	bf00      	nop
 800915c:	40023800 	.word	0x40023800
 8009160:	42470000 	.word	0x42470000
 8009164:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8009168:	4b8a      	ldr	r3, [pc, #552]	; (8009394 <HAL_RCC_OscConfig+0x4a8>)
 800916a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800916c:	f003 0302 	and.w	r3, r3, #2
 8009170:	2b00      	cmp	r3, #0
 8009172:	d1e9      	bne.n	8009148 <HAL_RCC_OscConfig+0x25c>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	f003 0304 	and.w	r3, r3, #4
 800917c:	2b00      	cmp	r3, #0
 800917e:	f000 8097 	beq.w	80092b0 <HAL_RCC_OscConfig+0x3c4>
  {
    FlagStatus       pwrclkchanged = RESET;
 8009182:	2300      	movs	r3, #0
 8009184:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8009186:	4b83      	ldr	r3, [pc, #524]	; (8009394 <HAL_RCC_OscConfig+0x4a8>)
 8009188:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800918a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800918e:	2b00      	cmp	r3, #0
 8009190:	d10f      	bne.n	80091b2 <HAL_RCC_OscConfig+0x2c6>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8009192:	2300      	movs	r3, #0
 8009194:	60fb      	str	r3, [r7, #12]
 8009196:	4b7f      	ldr	r3, [pc, #508]	; (8009394 <HAL_RCC_OscConfig+0x4a8>)
 8009198:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800919a:	4a7e      	ldr	r2, [pc, #504]	; (8009394 <HAL_RCC_OscConfig+0x4a8>)
 800919c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80091a0:	6413      	str	r3, [r2, #64]	; 0x40
 80091a2:	4b7c      	ldr	r3, [pc, #496]	; (8009394 <HAL_RCC_OscConfig+0x4a8>)
 80091a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80091aa:	60fb      	str	r3, [r7, #12]
 80091ac:	68fb      	ldr	r3, [r7, #12]
      pwrclkchanged = SET;
 80091ae:	2301      	movs	r3, #1
 80091b0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091b2:	4b79      	ldr	r3, [pc, #484]	; (8009398 <HAL_RCC_OscConfig+0x4ac>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d118      	bne.n	80091f0 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80091be:	4b76      	ldr	r3, [pc, #472]	; (8009398 <HAL_RCC_OscConfig+0x4ac>)
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	4a75      	ldr	r2, [pc, #468]	; (8009398 <HAL_RCC_OscConfig+0x4ac>)
 80091c4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80091c8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80091ca:	f7fe fb55 	bl	8007878 <HAL_GetTick>
 80091ce:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091d0:	e008      	b.n	80091e4 <HAL_RCC_OscConfig+0x2f8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80091d2:	f7fe fb51 	bl	8007878 <HAL_GetTick>
 80091d6:	4602      	mov	r2, r0
 80091d8:	693b      	ldr	r3, [r7, #16]
 80091da:	1ad3      	subs	r3, r2, r3
 80091dc:	2b02      	cmp	r3, #2
 80091de:	d901      	bls.n	80091e4 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 80091e0:	2303      	movs	r3, #3
 80091e2:	e0d3      	b.n	800938c <HAL_RCC_OscConfig+0x4a0>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80091e4:	4b6c      	ldr	r3, [pc, #432]	; (8009398 <HAL_RCC_OscConfig+0x4ac>)
 80091e6:	681b      	ldr	r3, [r3, #0]
 80091e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80091ec:	2b00      	cmp	r3, #0
 80091ee:	d0f0      	beq.n	80091d2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	689b      	ldr	r3, [r3, #8]
 80091f4:	2b01      	cmp	r3, #1
 80091f6:	d106      	bne.n	8009206 <HAL_RCC_OscConfig+0x31a>
 80091f8:	4b66      	ldr	r3, [pc, #408]	; (8009394 <HAL_RCC_OscConfig+0x4a8>)
 80091fa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091fc:	4a65      	ldr	r2, [pc, #404]	; (8009394 <HAL_RCC_OscConfig+0x4a8>)
 80091fe:	f043 0301 	orr.w	r3, r3, #1
 8009202:	6713      	str	r3, [r2, #112]	; 0x70
 8009204:	e01c      	b.n	8009240 <HAL_RCC_OscConfig+0x354>
 8009206:	687b      	ldr	r3, [r7, #4]
 8009208:	689b      	ldr	r3, [r3, #8]
 800920a:	2b05      	cmp	r3, #5
 800920c:	d10c      	bne.n	8009228 <HAL_RCC_OscConfig+0x33c>
 800920e:	4b61      	ldr	r3, [pc, #388]	; (8009394 <HAL_RCC_OscConfig+0x4a8>)
 8009210:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009212:	4a60      	ldr	r2, [pc, #384]	; (8009394 <HAL_RCC_OscConfig+0x4a8>)
 8009214:	f043 0304 	orr.w	r3, r3, #4
 8009218:	6713      	str	r3, [r2, #112]	; 0x70
 800921a:	4b5e      	ldr	r3, [pc, #376]	; (8009394 <HAL_RCC_OscConfig+0x4a8>)
 800921c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800921e:	4a5d      	ldr	r2, [pc, #372]	; (8009394 <HAL_RCC_OscConfig+0x4a8>)
 8009220:	f043 0301 	orr.w	r3, r3, #1
 8009224:	6713      	str	r3, [r2, #112]	; 0x70
 8009226:	e00b      	b.n	8009240 <HAL_RCC_OscConfig+0x354>
 8009228:	4b5a      	ldr	r3, [pc, #360]	; (8009394 <HAL_RCC_OscConfig+0x4a8>)
 800922a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800922c:	4a59      	ldr	r2, [pc, #356]	; (8009394 <HAL_RCC_OscConfig+0x4a8>)
 800922e:	f023 0301 	bic.w	r3, r3, #1
 8009232:	6713      	str	r3, [r2, #112]	; 0x70
 8009234:	4b57      	ldr	r3, [pc, #348]	; (8009394 <HAL_RCC_OscConfig+0x4a8>)
 8009236:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009238:	4a56      	ldr	r2, [pc, #344]	; (8009394 <HAL_RCC_OscConfig+0x4a8>)
 800923a:	f023 0304 	bic.w	r3, r3, #4
 800923e:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8009240:	687b      	ldr	r3, [r7, #4]
 8009242:	689b      	ldr	r3, [r3, #8]
 8009244:	2b00      	cmp	r3, #0
 8009246:	d015      	beq.n	8009274 <HAL_RCC_OscConfig+0x388>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009248:	f7fe fb16 	bl	8007878 <HAL_GetTick>
 800924c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800924e:	e00a      	b.n	8009266 <HAL_RCC_OscConfig+0x37a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8009250:	f7fe fb12 	bl	8007878 <HAL_GetTick>
 8009254:	4602      	mov	r2, r0
 8009256:	693b      	ldr	r3, [r7, #16]
 8009258:	1ad3      	subs	r3, r2, r3
 800925a:	f241 3288 	movw	r2, #5000	; 0x1388
 800925e:	4293      	cmp	r3, r2
 8009260:	d901      	bls.n	8009266 <HAL_RCC_OscConfig+0x37a>
        {
          return HAL_TIMEOUT;
 8009262:	2303      	movs	r3, #3
 8009264:	e092      	b.n	800938c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8009266:	4b4b      	ldr	r3, [pc, #300]	; (8009394 <HAL_RCC_OscConfig+0x4a8>)
 8009268:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800926a:	f003 0302 	and.w	r3, r3, #2
 800926e:	2b00      	cmp	r3, #0
 8009270:	d0ee      	beq.n	8009250 <HAL_RCC_OscConfig+0x364>
 8009272:	e014      	b.n	800929e <HAL_RCC_OscConfig+0x3b2>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8009274:	f7fe fb00 	bl	8007878 <HAL_GetTick>
 8009278:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800927a:	e00a      	b.n	8009292 <HAL_RCC_OscConfig+0x3a6>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800927c:	f7fe fafc 	bl	8007878 <HAL_GetTick>
 8009280:	4602      	mov	r2, r0
 8009282:	693b      	ldr	r3, [r7, #16]
 8009284:	1ad3      	subs	r3, r2, r3
 8009286:	f241 3288 	movw	r2, #5000	; 0x1388
 800928a:	4293      	cmp	r3, r2
 800928c:	d901      	bls.n	8009292 <HAL_RCC_OscConfig+0x3a6>
        {
          return HAL_TIMEOUT;
 800928e:	2303      	movs	r3, #3
 8009290:	e07c      	b.n	800938c <HAL_RCC_OscConfig+0x4a0>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8009292:	4b40      	ldr	r3, [pc, #256]	; (8009394 <HAL_RCC_OscConfig+0x4a8>)
 8009294:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009296:	f003 0302 	and.w	r3, r3, #2
 800929a:	2b00      	cmp	r3, #0
 800929c:	d1ee      	bne.n	800927c <HAL_RCC_OscConfig+0x390>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800929e:	7dfb      	ldrb	r3, [r7, #23]
 80092a0:	2b01      	cmp	r3, #1
 80092a2:	d105      	bne.n	80092b0 <HAL_RCC_OscConfig+0x3c4>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80092a4:	4b3b      	ldr	r3, [pc, #236]	; (8009394 <HAL_RCC_OscConfig+0x4a8>)
 80092a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80092a8:	4a3a      	ldr	r2, [pc, #232]	; (8009394 <HAL_RCC_OscConfig+0x4a8>)
 80092aa:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80092ae:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80092b0:	687b      	ldr	r3, [r7, #4]
 80092b2:	699b      	ldr	r3, [r3, #24]
 80092b4:	2b00      	cmp	r3, #0
 80092b6:	d068      	beq.n	800938a <HAL_RCC_OscConfig+0x49e>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80092b8:	4b36      	ldr	r3, [pc, #216]	; (8009394 <HAL_RCC_OscConfig+0x4a8>)
 80092ba:	689b      	ldr	r3, [r3, #8]
 80092bc:	f003 030c 	and.w	r3, r3, #12
 80092c0:	2b08      	cmp	r3, #8
 80092c2:	d060      	beq.n	8009386 <HAL_RCC_OscConfig+0x49a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	699b      	ldr	r3, [r3, #24]
 80092c8:	2b02      	cmp	r3, #2
 80092ca:	d145      	bne.n	8009358 <HAL_RCC_OscConfig+0x46c>
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80092cc:	4b33      	ldr	r3, [pc, #204]	; (800939c <HAL_RCC_OscConfig+0x4b0>)
 80092ce:	2200      	movs	r2, #0
 80092d0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80092d2:	f7fe fad1 	bl	8007878 <HAL_GetTick>
 80092d6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092d8:	e008      	b.n	80092ec <HAL_RCC_OscConfig+0x400>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80092da:	f7fe facd 	bl	8007878 <HAL_GetTick>
 80092de:	4602      	mov	r2, r0
 80092e0:	693b      	ldr	r3, [r7, #16]
 80092e2:	1ad3      	subs	r3, r2, r3
 80092e4:	2b02      	cmp	r3, #2
 80092e6:	d901      	bls.n	80092ec <HAL_RCC_OscConfig+0x400>
          {
            return HAL_TIMEOUT;
 80092e8:	2303      	movs	r3, #3
 80092ea:	e04f      	b.n	800938c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80092ec:	4b29      	ldr	r3, [pc, #164]	; (8009394 <HAL_RCC_OscConfig+0x4a8>)
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80092f4:	2b00      	cmp	r3, #0
 80092f6:	d1f0      	bne.n	80092da <HAL_RCC_OscConfig+0x3ee>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 80092f8:	687b      	ldr	r3, [r7, #4]
 80092fa:	69da      	ldr	r2, [r3, #28]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6a1b      	ldr	r3, [r3, #32]
 8009300:	431a      	orrs	r2, r3
 8009302:	687b      	ldr	r3, [r7, #4]
 8009304:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009306:	019b      	lsls	r3, r3, #6
 8009308:	431a      	orrs	r2, r3
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800930e:	085b      	lsrs	r3, r3, #1
 8009310:	3b01      	subs	r3, #1
 8009312:	041b      	lsls	r3, r3, #16
 8009314:	431a      	orrs	r2, r3
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800931a:	061b      	lsls	r3, r3, #24
 800931c:	431a      	orrs	r2, r3
 800931e:	687b      	ldr	r3, [r7, #4]
 8009320:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009322:	071b      	lsls	r3, r3, #28
 8009324:	491b      	ldr	r1, [pc, #108]	; (8009394 <HAL_RCC_OscConfig+0x4a8>)
 8009326:	4313      	orrs	r3, r2
 8009328:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800932a:	4b1c      	ldr	r3, [pc, #112]	; (800939c <HAL_RCC_OscConfig+0x4b0>)
 800932c:	2201      	movs	r2, #1
 800932e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009330:	f7fe faa2 	bl	8007878 <HAL_GetTick>
 8009334:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009336:	e008      	b.n	800934a <HAL_RCC_OscConfig+0x45e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009338:	f7fe fa9e 	bl	8007878 <HAL_GetTick>
 800933c:	4602      	mov	r2, r0
 800933e:	693b      	ldr	r3, [r7, #16]
 8009340:	1ad3      	subs	r3, r2, r3
 8009342:	2b02      	cmp	r3, #2
 8009344:	d901      	bls.n	800934a <HAL_RCC_OscConfig+0x45e>
          {
            return HAL_TIMEOUT;
 8009346:	2303      	movs	r3, #3
 8009348:	e020      	b.n	800938c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800934a:	4b12      	ldr	r3, [pc, #72]	; (8009394 <HAL_RCC_OscConfig+0x4a8>)
 800934c:	681b      	ldr	r3, [r3, #0]
 800934e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009352:	2b00      	cmp	r3, #0
 8009354:	d0f0      	beq.n	8009338 <HAL_RCC_OscConfig+0x44c>
 8009356:	e018      	b.n	800938a <HAL_RCC_OscConfig+0x49e>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8009358:	4b10      	ldr	r3, [pc, #64]	; (800939c <HAL_RCC_OscConfig+0x4b0>)
 800935a:	2200      	movs	r2, #0
 800935c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800935e:	f7fe fa8b 	bl	8007878 <HAL_GetTick>
 8009362:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009364:	e008      	b.n	8009378 <HAL_RCC_OscConfig+0x48c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8009366:	f7fe fa87 	bl	8007878 <HAL_GetTick>
 800936a:	4602      	mov	r2, r0
 800936c:	693b      	ldr	r3, [r7, #16]
 800936e:	1ad3      	subs	r3, r2, r3
 8009370:	2b02      	cmp	r3, #2
 8009372:	d901      	bls.n	8009378 <HAL_RCC_OscConfig+0x48c>
          {
            return HAL_TIMEOUT;
 8009374:	2303      	movs	r3, #3
 8009376:	e009      	b.n	800938c <HAL_RCC_OscConfig+0x4a0>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009378:	4b06      	ldr	r3, [pc, #24]	; (8009394 <HAL_RCC_OscConfig+0x4a8>)
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009380:	2b00      	cmp	r3, #0
 8009382:	d1f0      	bne.n	8009366 <HAL_RCC_OscConfig+0x47a>
 8009384:	e001      	b.n	800938a <HAL_RCC_OscConfig+0x49e>
        }
      }
    }
    else
    {
      return HAL_ERROR;
 8009386:	2301      	movs	r3, #1
 8009388:	e000      	b.n	800938c <HAL_RCC_OscConfig+0x4a0>
    }
  }
  return HAL_OK;
 800938a:	2300      	movs	r3, #0
}
 800938c:	4618      	mov	r0, r3
 800938e:	3718      	adds	r7, #24
 8009390:	46bd      	mov	sp, r7
 8009392:	bd80      	pop	{r7, pc}
 8009394:	40023800 	.word	0x40023800
 8009398:	40007000 	.word	0x40007000
 800939c:	42470060 	.word	0x42470060

080093a0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b082      	sub	sp, #8
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	2b00      	cmp	r3, #0
 80093ac:	d101      	bne.n	80093b2 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80093ae:	2301      	movs	r3, #1
 80093b0:	e056      	b.n	8009460 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2200      	movs	r2, #0
 80093b6:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80093be:	b2db      	uxtb	r3, r3
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d106      	bne.n	80093d2 <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2200      	movs	r2, #0
 80093c8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 80093cc:	6878      	ldr	r0, [r7, #4]
 80093ce:	f7fd ff87 	bl	80072e0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 80093d2:	687b      	ldr	r3, [r7, #4]
 80093d4:	2202      	movs	r2, #2
 80093d6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	681a      	ldr	r2, [r3, #0]
 80093e0:	687b      	ldr	r3, [r7, #4]
 80093e2:	681b      	ldr	r3, [r3, #0]
 80093e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80093e8:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 80093ea:	687b      	ldr	r3, [r7, #4]
 80093ec:	685a      	ldr	r2, [r3, #4]
 80093ee:	687b      	ldr	r3, [r7, #4]
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	431a      	orrs	r2, r3
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	68db      	ldr	r3, [r3, #12]
 80093f8:	431a      	orrs	r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	691b      	ldr	r3, [r3, #16]
 80093fe:	431a      	orrs	r2, r3
 8009400:	687b      	ldr	r3, [r7, #4]
 8009402:	695b      	ldr	r3, [r3, #20]
 8009404:	431a      	orrs	r2, r3
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	699b      	ldr	r3, [r3, #24]
 800940a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800940e:	431a      	orrs	r2, r3
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	69db      	ldr	r3, [r3, #28]
 8009414:	431a      	orrs	r2, r3
 8009416:	687b      	ldr	r3, [r7, #4]
 8009418:	6a1b      	ldr	r3, [r3, #32]
 800941a:	ea42 0103 	orr.w	r1, r2, r3
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8009422:	687b      	ldr	r3, [r7, #4]
 8009424:	681b      	ldr	r3, [r3, #0]
 8009426:	430a      	orrs	r2, r1
 8009428:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	699b      	ldr	r3, [r3, #24]
 800942e:	0c1b      	lsrs	r3, r3, #16
 8009430:	f003 0104 	and.w	r1, r3, #4
 8009434:	687b      	ldr	r3, [r7, #4]
 8009436:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8009438:	687b      	ldr	r3, [r7, #4]
 800943a:	681b      	ldr	r3, [r3, #0]
 800943c:	430a      	orrs	r2, r1
 800943e:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009440:	687b      	ldr	r3, [r7, #4]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	69da      	ldr	r2, [r3, #28]
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800944e:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	2200      	movs	r2, #0
 8009454:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	2201      	movs	r2, #1
 800945a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800945e:	2300      	movs	r3, #0
}
 8009460:	4618      	mov	r0, r3
 8009462:	3708      	adds	r7, #8
 8009464:	46bd      	mov	sp, r7
 8009466:	bd80      	pop	{r7, pc}

08009468 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009468:	b580      	push	{r7, lr}
 800946a:	b088      	sub	sp, #32
 800946c:	af00      	add	r7, sp, #0
 800946e:	60f8      	str	r0, [r7, #12]
 8009470:	60b9      	str	r1, [r7, #8]
 8009472:	603b      	str	r3, [r7, #0]
 8009474:	4613      	mov	r3, r2
 8009476:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009478:	2300      	movs	r3, #0
 800947a:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800947c:	68fb      	ldr	r3, [r7, #12]
 800947e:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009482:	2b01      	cmp	r3, #1
 8009484:	d101      	bne.n	800948a <HAL_SPI_Transmit+0x22>
 8009486:	2302      	movs	r3, #2
 8009488:	e11e      	b.n	80096c8 <HAL_SPI_Transmit+0x260>
 800948a:	68fb      	ldr	r3, [r7, #12]
 800948c:	2201      	movs	r2, #1
 800948e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009492:	f7fe f9f1 	bl	8007878 <HAL_GetTick>
 8009496:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8009498:	88fb      	ldrh	r3, [r7, #6]
 800949a:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800949c:	68fb      	ldr	r3, [r7, #12]
 800949e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 80094a2:	b2db      	uxtb	r3, r3
 80094a4:	2b01      	cmp	r3, #1
 80094a6:	d002      	beq.n	80094ae <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 80094a8:	2302      	movs	r3, #2
 80094aa:	77fb      	strb	r3, [r7, #31]
    goto error;
 80094ac:	e103      	b.n	80096b6 <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 80094ae:	68bb      	ldr	r3, [r7, #8]
 80094b0:	2b00      	cmp	r3, #0
 80094b2:	d002      	beq.n	80094ba <HAL_SPI_Transmit+0x52>
 80094b4:	88fb      	ldrh	r3, [r7, #6]
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d102      	bne.n	80094c0 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 80094ba:	2301      	movs	r3, #1
 80094bc:	77fb      	strb	r3, [r7, #31]
    goto error;
 80094be:	e0fa      	b.n	80096b6 <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 80094c0:	68fb      	ldr	r3, [r7, #12]
 80094c2:	2203      	movs	r2, #3
 80094c4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	2200      	movs	r2, #0
 80094cc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 80094ce:	68fb      	ldr	r3, [r7, #12]
 80094d0:	68ba      	ldr	r2, [r7, #8]
 80094d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	88fa      	ldrh	r2, [r7, #6]
 80094d8:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 80094da:	68fb      	ldr	r3, [r7, #12]
 80094dc:	88fa      	ldrh	r2, [r7, #6]
 80094de:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80094e0:	68fb      	ldr	r3, [r7, #12]
 80094e2:	2200      	movs	r2, #0
 80094e4:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 80094e6:	68fb      	ldr	r3, [r7, #12]
 80094e8:	2200      	movs	r2, #0
 80094ea:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 80094ec:	68fb      	ldr	r3, [r7, #12]
 80094ee:	2200      	movs	r2, #0
 80094f0:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 80094f2:	68fb      	ldr	r3, [r7, #12]
 80094f4:	2200      	movs	r2, #0
 80094f6:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 80094f8:	68fb      	ldr	r3, [r7, #12]
 80094fa:	2200      	movs	r2, #0
 80094fc:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80094fe:	68fb      	ldr	r3, [r7, #12]
 8009500:	689b      	ldr	r3, [r3, #8]
 8009502:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009506:	d107      	bne.n	8009518 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 8009508:	68fb      	ldr	r3, [r7, #12]
 800950a:	681b      	ldr	r3, [r3, #0]
 800950c:	681a      	ldr	r2, [r3, #0]
 800950e:	68fb      	ldr	r3, [r7, #12]
 8009510:	681b      	ldr	r3, [r3, #0]
 8009512:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009516:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009518:	68fb      	ldr	r3, [r7, #12]
 800951a:	681b      	ldr	r3, [r3, #0]
 800951c:	681b      	ldr	r3, [r3, #0]
 800951e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009522:	2b40      	cmp	r3, #64	; 0x40
 8009524:	d007      	beq.n	8009536 <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009526:	68fb      	ldr	r3, [r7, #12]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	681a      	ldr	r2, [r3, #0]
 800952c:	68fb      	ldr	r3, [r7, #12]
 800952e:	681b      	ldr	r3, [r3, #0]
 8009530:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009534:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8009536:	68fb      	ldr	r3, [r7, #12]
 8009538:	68db      	ldr	r3, [r3, #12]
 800953a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800953e:	d14b      	bne.n	80095d8 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	685b      	ldr	r3, [r3, #4]
 8009544:	2b00      	cmp	r3, #0
 8009546:	d002      	beq.n	800954e <HAL_SPI_Transmit+0xe6>
 8009548:	8afb      	ldrh	r3, [r7, #22]
 800954a:	2b01      	cmp	r3, #1
 800954c:	d13e      	bne.n	80095cc <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800954e:	68fb      	ldr	r3, [r7, #12]
 8009550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009552:	881a      	ldrh	r2, [r3, #0]
 8009554:	68fb      	ldr	r3, [r7, #12]
 8009556:	681b      	ldr	r3, [r3, #0]
 8009558:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800955a:	68fb      	ldr	r3, [r7, #12]
 800955c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800955e:	1c9a      	adds	r2, r3, #2
 8009560:	68fb      	ldr	r3, [r7, #12]
 8009562:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009564:	68fb      	ldr	r3, [r7, #12]
 8009566:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009568:	b29b      	uxth	r3, r3
 800956a:	3b01      	subs	r3, #1
 800956c:	b29a      	uxth	r2, r3
 800956e:	68fb      	ldr	r3, [r7, #12]
 8009570:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8009572:	e02b      	b.n	80095cc <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8009574:	68fb      	ldr	r3, [r7, #12]
 8009576:	681b      	ldr	r3, [r3, #0]
 8009578:	689b      	ldr	r3, [r3, #8]
 800957a:	f003 0302 	and.w	r3, r3, #2
 800957e:	2b02      	cmp	r3, #2
 8009580:	d112      	bne.n	80095a8 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009582:	68fb      	ldr	r3, [r7, #12]
 8009584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009586:	881a      	ldrh	r2, [r3, #0]
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	681b      	ldr	r3, [r3, #0]
 800958c:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800958e:	68fb      	ldr	r3, [r7, #12]
 8009590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009592:	1c9a      	adds	r2, r3, #2
 8009594:	68fb      	ldr	r3, [r7, #12]
 8009596:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009598:	68fb      	ldr	r3, [r7, #12]
 800959a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800959c:	b29b      	uxth	r3, r3
 800959e:	3b01      	subs	r3, #1
 80095a0:	b29a      	uxth	r2, r3
 80095a2:	68fb      	ldr	r3, [r7, #12]
 80095a4:	86da      	strh	r2, [r3, #54]	; 0x36
 80095a6:	e011      	b.n	80095cc <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 80095a8:	f7fe f966 	bl	8007878 <HAL_GetTick>
 80095ac:	4602      	mov	r2, r0
 80095ae:	69bb      	ldr	r3, [r7, #24]
 80095b0:	1ad3      	subs	r3, r2, r3
 80095b2:	683a      	ldr	r2, [r7, #0]
 80095b4:	429a      	cmp	r2, r3
 80095b6:	d803      	bhi.n	80095c0 <HAL_SPI_Transmit+0x158>
 80095b8:	683b      	ldr	r3, [r7, #0]
 80095ba:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80095be:	d102      	bne.n	80095c6 <HAL_SPI_Transmit+0x15e>
 80095c0:	683b      	ldr	r3, [r7, #0]
 80095c2:	2b00      	cmp	r3, #0
 80095c4:	d102      	bne.n	80095cc <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 80095c6:	2303      	movs	r3, #3
 80095c8:	77fb      	strb	r3, [r7, #31]
          goto error;
 80095ca:	e074      	b.n	80096b6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80095d0:	b29b      	uxth	r3, r3
 80095d2:	2b00      	cmp	r3, #0
 80095d4:	d1ce      	bne.n	8009574 <HAL_SPI_Transmit+0x10c>
 80095d6:	e04c      	b.n	8009672 <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80095d8:	68fb      	ldr	r3, [r7, #12]
 80095da:	685b      	ldr	r3, [r3, #4]
 80095dc:	2b00      	cmp	r3, #0
 80095de:	d002      	beq.n	80095e6 <HAL_SPI_Transmit+0x17e>
 80095e0:	8afb      	ldrh	r3, [r7, #22]
 80095e2:	2b01      	cmp	r3, #1
 80095e4:	d140      	bne.n	8009668 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80095e6:	68fb      	ldr	r3, [r7, #12]
 80095e8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80095ea:	68fb      	ldr	r3, [r7, #12]
 80095ec:	681b      	ldr	r3, [r3, #0]
 80095ee:	330c      	adds	r3, #12
 80095f0:	7812      	ldrb	r2, [r2, #0]
 80095f2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80095f4:	68fb      	ldr	r3, [r7, #12]
 80095f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80095f8:	1c5a      	adds	r2, r3, #1
 80095fa:	68fb      	ldr	r3, [r7, #12]
 80095fc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009602:	b29b      	uxth	r3, r3
 8009604:	3b01      	subs	r3, #1
 8009606:	b29a      	uxth	r2, r3
 8009608:	68fb      	ldr	r3, [r7, #12]
 800960a:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800960c:	e02c      	b.n	8009668 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800960e:	68fb      	ldr	r3, [r7, #12]
 8009610:	681b      	ldr	r3, [r3, #0]
 8009612:	689b      	ldr	r3, [r3, #8]
 8009614:	f003 0302 	and.w	r3, r3, #2
 8009618:	2b02      	cmp	r3, #2
 800961a:	d113      	bne.n	8009644 <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800961c:	68fb      	ldr	r3, [r7, #12]
 800961e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009620:	68fb      	ldr	r3, [r7, #12]
 8009622:	681b      	ldr	r3, [r3, #0]
 8009624:	330c      	adds	r3, #12
 8009626:	7812      	ldrb	r2, [r2, #0]
 8009628:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800962a:	68fb      	ldr	r3, [r7, #12]
 800962c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800962e:	1c5a      	adds	r2, r3, #1
 8009630:	68fb      	ldr	r3, [r7, #12]
 8009632:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009638:	b29b      	uxth	r3, r3
 800963a:	3b01      	subs	r3, #1
 800963c:	b29a      	uxth	r2, r3
 800963e:	68fb      	ldr	r3, [r7, #12]
 8009640:	86da      	strh	r2, [r3, #54]	; 0x36
 8009642:	e011      	b.n	8009668 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009644:	f7fe f918 	bl	8007878 <HAL_GetTick>
 8009648:	4602      	mov	r2, r0
 800964a:	69bb      	ldr	r3, [r7, #24]
 800964c:	1ad3      	subs	r3, r2, r3
 800964e:	683a      	ldr	r2, [r7, #0]
 8009650:	429a      	cmp	r2, r3
 8009652:	d803      	bhi.n	800965c <HAL_SPI_Transmit+0x1f4>
 8009654:	683b      	ldr	r3, [r7, #0]
 8009656:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800965a:	d102      	bne.n	8009662 <HAL_SPI_Transmit+0x1fa>
 800965c:	683b      	ldr	r3, [r7, #0]
 800965e:	2b00      	cmp	r3, #0
 8009660:	d102      	bne.n	8009668 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 8009662:	2303      	movs	r3, #3
 8009664:	77fb      	strb	r3, [r7, #31]
          goto error;
 8009666:	e026      	b.n	80096b6 <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 8009668:	68fb      	ldr	r3, [r7, #12]
 800966a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800966c:	b29b      	uxth	r3, r3
 800966e:	2b00      	cmp	r3, #0
 8009670:	d1cd      	bne.n	800960e <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009672:	69ba      	ldr	r2, [r7, #24]
 8009674:	6839      	ldr	r1, [r7, #0]
 8009676:	68f8      	ldr	r0, [r7, #12]
 8009678:	f000 fba4 	bl	8009dc4 <SPI_EndRxTxTransaction>
 800967c:	4603      	mov	r3, r0
 800967e:	2b00      	cmp	r3, #0
 8009680:	d002      	beq.n	8009688 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009682:	68fb      	ldr	r3, [r7, #12]
 8009684:	2220      	movs	r2, #32
 8009686:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009688:	68fb      	ldr	r3, [r7, #12]
 800968a:	689b      	ldr	r3, [r3, #8]
 800968c:	2b00      	cmp	r3, #0
 800968e:	d10a      	bne.n	80096a6 <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009690:	2300      	movs	r3, #0
 8009692:	613b      	str	r3, [r7, #16]
 8009694:	68fb      	ldr	r3, [r7, #12]
 8009696:	681b      	ldr	r3, [r3, #0]
 8009698:	68db      	ldr	r3, [r3, #12]
 800969a:	613b      	str	r3, [r7, #16]
 800969c:	68fb      	ldr	r3, [r7, #12]
 800969e:	681b      	ldr	r3, [r3, #0]
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	613b      	str	r3, [r7, #16]
 80096a4:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80096aa:	2b00      	cmp	r3, #0
 80096ac:	d002      	beq.n	80096b4 <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 80096ae:	2301      	movs	r3, #1
 80096b0:	77fb      	strb	r3, [r7, #31]
 80096b2:	e000      	b.n	80096b6 <HAL_SPI_Transmit+0x24e>
  }

error:
 80096b4:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80096b6:	68fb      	ldr	r3, [r7, #12]
 80096b8:	2201      	movs	r2, #1
 80096ba:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	2200      	movs	r2, #0
 80096c2:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80096c6:	7ffb      	ldrb	r3, [r7, #31]
}
 80096c8:	4618      	mov	r0, r3
 80096ca:	3720      	adds	r7, #32
 80096cc:	46bd      	mov	sp, r7
 80096ce:	bd80      	pop	{r7, pc}

080096d0 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80096d0:	b580      	push	{r7, lr}
 80096d2:	b088      	sub	sp, #32
 80096d4:	af02      	add	r7, sp, #8
 80096d6:	60f8      	str	r0, [r7, #12]
 80096d8:	60b9      	str	r1, [r7, #8]
 80096da:	603b      	str	r3, [r7, #0]
 80096dc:	4613      	mov	r3, r2
 80096de:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 80096e0:	2300      	movs	r3, #0
 80096e2:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	685b      	ldr	r3, [r3, #4]
 80096e8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80096ec:	d112      	bne.n	8009714 <HAL_SPI_Receive+0x44>
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	689b      	ldr	r3, [r3, #8]
 80096f2:	2b00      	cmp	r3, #0
 80096f4:	d10e      	bne.n	8009714 <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	2204      	movs	r2, #4
 80096fa:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 80096fe:	88fa      	ldrh	r2, [r7, #6]
 8009700:	683b      	ldr	r3, [r7, #0]
 8009702:	9300      	str	r3, [sp, #0]
 8009704:	4613      	mov	r3, r2
 8009706:	68ba      	ldr	r2, [r7, #8]
 8009708:	68b9      	ldr	r1, [r7, #8]
 800970a:	68f8      	ldr	r0, [r7, #12]
 800970c:	f000 f8e9 	bl	80098e2 <HAL_SPI_TransmitReceive>
 8009710:	4603      	mov	r3, r0
 8009712:	e0e2      	b.n	80098da <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009714:	68fb      	ldr	r3, [r7, #12]
 8009716:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800971a:	2b01      	cmp	r3, #1
 800971c:	d101      	bne.n	8009722 <HAL_SPI_Receive+0x52>
 800971e:	2302      	movs	r3, #2
 8009720:	e0db      	b.n	80098da <HAL_SPI_Receive+0x20a>
 8009722:	68fb      	ldr	r3, [r7, #12]
 8009724:	2201      	movs	r2, #1
 8009726:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800972a:	f7fe f8a5 	bl	8007878 <HAL_GetTick>
 800972e:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 8009730:	68fb      	ldr	r3, [r7, #12]
 8009732:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009736:	b2db      	uxtb	r3, r3
 8009738:	2b01      	cmp	r3, #1
 800973a:	d002      	beq.n	8009742 <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800973c:	2302      	movs	r3, #2
 800973e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009740:	e0c2      	b.n	80098c8 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 8009742:	68bb      	ldr	r3, [r7, #8]
 8009744:	2b00      	cmp	r3, #0
 8009746:	d002      	beq.n	800974e <HAL_SPI_Receive+0x7e>
 8009748:	88fb      	ldrh	r3, [r7, #6]
 800974a:	2b00      	cmp	r3, #0
 800974c:	d102      	bne.n	8009754 <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800974e:	2301      	movs	r3, #1
 8009750:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009752:	e0b9      	b.n	80098c8 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009754:	68fb      	ldr	r3, [r7, #12]
 8009756:	2204      	movs	r2, #4
 8009758:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800975c:	68fb      	ldr	r3, [r7, #12]
 800975e:	2200      	movs	r2, #0
 8009760:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009762:	68fb      	ldr	r3, [r7, #12]
 8009764:	68ba      	ldr	r2, [r7, #8]
 8009766:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8009768:	68fb      	ldr	r3, [r7, #12]
 800976a:	88fa      	ldrh	r2, [r7, #6]
 800976c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800976e:	68fb      	ldr	r3, [r7, #12]
 8009770:	88fa      	ldrh	r2, [r7, #6]
 8009772:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8009774:	68fb      	ldr	r3, [r7, #12]
 8009776:	2200      	movs	r2, #0
 8009778:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800977a:	68fb      	ldr	r3, [r7, #12]
 800977c:	2200      	movs	r2, #0
 800977e:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8009780:	68fb      	ldr	r3, [r7, #12]
 8009782:	2200      	movs	r2, #0
 8009784:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2200      	movs	r2, #0
 800978a:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800978c:	68fb      	ldr	r3, [r7, #12]
 800978e:	2200      	movs	r2, #0
 8009790:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009792:	68fb      	ldr	r3, [r7, #12]
 8009794:	689b      	ldr	r3, [r3, #8]
 8009796:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800979a:	d107      	bne.n	80097ac <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800979c:	68fb      	ldr	r3, [r7, #12]
 800979e:	681b      	ldr	r3, [r3, #0]
 80097a0:	681a      	ldr	r2, [r3, #0]
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	681b      	ldr	r3, [r3, #0]
 80097a6:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 80097aa:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80097ac:	68fb      	ldr	r3, [r7, #12]
 80097ae:	681b      	ldr	r3, [r3, #0]
 80097b0:	681b      	ldr	r3, [r3, #0]
 80097b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80097b6:	2b40      	cmp	r3, #64	; 0x40
 80097b8:	d007      	beq.n	80097ca <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	681b      	ldr	r3, [r3, #0]
 80097be:	681a      	ldr	r2, [r3, #0]
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097c8:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	68db      	ldr	r3, [r3, #12]
 80097ce:	2b00      	cmp	r3, #0
 80097d0:	d162      	bne.n	8009898 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 80097d2:	e02e      	b.n	8009832 <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 80097d4:	68fb      	ldr	r3, [r7, #12]
 80097d6:	681b      	ldr	r3, [r3, #0]
 80097d8:	689b      	ldr	r3, [r3, #8]
 80097da:	f003 0301 	and.w	r3, r3, #1
 80097de:	2b01      	cmp	r3, #1
 80097e0:	d115      	bne.n	800980e <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	681b      	ldr	r3, [r3, #0]
 80097e6:	f103 020c 	add.w	r2, r3, #12
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097ee:	7812      	ldrb	r2, [r2, #0]
 80097f0:	b2d2      	uxtb	r2, r2
 80097f2:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097f8:	1c5a      	adds	r2, r3, #1
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 80097fe:	68fb      	ldr	r3, [r7, #12]
 8009800:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009802:	b29b      	uxth	r3, r3
 8009804:	3b01      	subs	r3, #1
 8009806:	b29a      	uxth	r2, r3
 8009808:	68fb      	ldr	r3, [r7, #12]
 800980a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800980c:	e011      	b.n	8009832 <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800980e:	f7fe f833 	bl	8007878 <HAL_GetTick>
 8009812:	4602      	mov	r2, r0
 8009814:	693b      	ldr	r3, [r7, #16]
 8009816:	1ad3      	subs	r3, r2, r3
 8009818:	683a      	ldr	r2, [r7, #0]
 800981a:	429a      	cmp	r2, r3
 800981c:	d803      	bhi.n	8009826 <HAL_SPI_Receive+0x156>
 800981e:	683b      	ldr	r3, [r7, #0]
 8009820:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009824:	d102      	bne.n	800982c <HAL_SPI_Receive+0x15c>
 8009826:	683b      	ldr	r3, [r7, #0]
 8009828:	2b00      	cmp	r3, #0
 800982a:	d102      	bne.n	8009832 <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800982c:	2303      	movs	r3, #3
 800982e:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009830:	e04a      	b.n	80098c8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8009832:	68fb      	ldr	r3, [r7, #12]
 8009834:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009836:	b29b      	uxth	r3, r3
 8009838:	2b00      	cmp	r3, #0
 800983a:	d1cb      	bne.n	80097d4 <HAL_SPI_Receive+0x104>
 800983c:	e031      	b.n	80098a2 <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	681b      	ldr	r3, [r3, #0]
 8009842:	689b      	ldr	r3, [r3, #8]
 8009844:	f003 0301 	and.w	r3, r3, #1
 8009848:	2b01      	cmp	r3, #1
 800984a:	d113      	bne.n	8009874 <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800984c:	68fb      	ldr	r3, [r7, #12]
 800984e:	681b      	ldr	r3, [r3, #0]
 8009850:	68da      	ldr	r2, [r3, #12]
 8009852:	68fb      	ldr	r3, [r7, #12]
 8009854:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009856:	b292      	uxth	r2, r2
 8009858:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800985a:	68fb      	ldr	r3, [r7, #12]
 800985c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800985e:	1c9a      	adds	r2, r3, #2
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009864:	68fb      	ldr	r3, [r7, #12]
 8009866:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009868:	b29b      	uxth	r3, r3
 800986a:	3b01      	subs	r3, #1
 800986c:	b29a      	uxth	r2, r3
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009872:	e011      	b.n	8009898 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8009874:	f7fe f800 	bl	8007878 <HAL_GetTick>
 8009878:	4602      	mov	r2, r0
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	1ad3      	subs	r3, r2, r3
 800987e:	683a      	ldr	r2, [r7, #0]
 8009880:	429a      	cmp	r2, r3
 8009882:	d803      	bhi.n	800988c <HAL_SPI_Receive+0x1bc>
 8009884:	683b      	ldr	r3, [r7, #0]
 8009886:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800988a:	d102      	bne.n	8009892 <HAL_SPI_Receive+0x1c2>
 800988c:	683b      	ldr	r3, [r7, #0]
 800988e:	2b00      	cmp	r3, #0
 8009890:	d102      	bne.n	8009898 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 8009892:	2303      	movs	r3, #3
 8009894:	75fb      	strb	r3, [r7, #23]
          goto error;
 8009896:	e017      	b.n	80098c8 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800989c:	b29b      	uxth	r3, r3
 800989e:	2b00      	cmp	r3, #0
 80098a0:	d1cd      	bne.n	800983e <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80098a2:	693a      	ldr	r2, [r7, #16]
 80098a4:	6839      	ldr	r1, [r7, #0]
 80098a6:	68f8      	ldr	r0, [r7, #12]
 80098a8:	f000 fa27 	bl	8009cfa <SPI_EndRxTransaction>
 80098ac:	4603      	mov	r3, r0
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d002      	beq.n	80098b8 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80098b2:	68fb      	ldr	r3, [r7, #12]
 80098b4:	2220      	movs	r2, #32
 80098b6:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80098b8:	68fb      	ldr	r3, [r7, #12]
 80098ba:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098bc:	2b00      	cmp	r3, #0
 80098be:	d002      	beq.n	80098c6 <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 80098c0:	2301      	movs	r3, #1
 80098c2:	75fb      	strb	r3, [r7, #23]
 80098c4:	e000      	b.n	80098c8 <HAL_SPI_Receive+0x1f8>
  }

error :
 80098c6:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	2201      	movs	r2, #1
 80098cc:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 80098d0:	68fb      	ldr	r3, [r7, #12]
 80098d2:	2200      	movs	r2, #0
 80098d4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 80098d8:	7dfb      	ldrb	r3, [r7, #23]
}
 80098da:	4618      	mov	r0, r3
 80098dc:	3718      	adds	r7, #24
 80098de:	46bd      	mov	sp, r7
 80098e0:	bd80      	pop	{r7, pc}

080098e2 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 80098e2:	b580      	push	{r7, lr}
 80098e4:	b08c      	sub	sp, #48	; 0x30
 80098e6:	af00      	add	r7, sp, #0
 80098e8:	60f8      	str	r0, [r7, #12]
 80098ea:	60b9      	str	r1, [r7, #8]
 80098ec:	607a      	str	r2, [r7, #4]
 80098ee:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 80098f0:	2301      	movs	r3, #1
 80098f2:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 80098f4:	2300      	movs	r3, #0
 80098f6:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8009900:	2b01      	cmp	r3, #1
 8009902:	d101      	bne.n	8009908 <HAL_SPI_TransmitReceive+0x26>
 8009904:	2302      	movs	r3, #2
 8009906:	e18a      	b.n	8009c1e <HAL_SPI_TransmitReceive+0x33c>
 8009908:	68fb      	ldr	r3, [r7, #12]
 800990a:	2201      	movs	r2, #1
 800990c:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8009910:	f7fd ffb2 	bl	8007878 <HAL_GetTick>
 8009914:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800991c:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8009920:	68fb      	ldr	r3, [r7, #12]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8009926:	887b      	ldrh	r3, [r7, #2]
 8009928:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800992a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800992e:	2b01      	cmp	r3, #1
 8009930:	d00f      	beq.n	8009952 <HAL_SPI_TransmitReceive+0x70>
 8009932:	69fb      	ldr	r3, [r7, #28]
 8009934:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009938:	d107      	bne.n	800994a <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800993a:	68fb      	ldr	r3, [r7, #12]
 800993c:	689b      	ldr	r3, [r3, #8]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d103      	bne.n	800994a <HAL_SPI_TransmitReceive+0x68>
 8009942:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8009946:	2b04      	cmp	r3, #4
 8009948:	d003      	beq.n	8009952 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800994a:	2302      	movs	r3, #2
 800994c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8009950:	e15b      	b.n	8009c0a <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009952:	68bb      	ldr	r3, [r7, #8]
 8009954:	2b00      	cmp	r3, #0
 8009956:	d005      	beq.n	8009964 <HAL_SPI_TransmitReceive+0x82>
 8009958:	687b      	ldr	r3, [r7, #4]
 800995a:	2b00      	cmp	r3, #0
 800995c:	d002      	beq.n	8009964 <HAL_SPI_TransmitReceive+0x82>
 800995e:	887b      	ldrh	r3, [r7, #2]
 8009960:	2b00      	cmp	r3, #0
 8009962:	d103      	bne.n	800996c <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8009964:	2301      	movs	r3, #1
 8009966:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800996a:	e14e      	b.n	8009c0a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800996c:	68fb      	ldr	r3, [r7, #12]
 800996e:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8009972:	b2db      	uxtb	r3, r3
 8009974:	2b04      	cmp	r3, #4
 8009976:	d003      	beq.n	8009980 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	2205      	movs	r2, #5
 800997c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	2200      	movs	r2, #0
 8009984:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009986:	68fb      	ldr	r3, [r7, #12]
 8009988:	687a      	ldr	r2, [r7, #4]
 800998a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800998c:	68fb      	ldr	r3, [r7, #12]
 800998e:	887a      	ldrh	r2, [r7, #2]
 8009990:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8009992:	68fb      	ldr	r3, [r7, #12]
 8009994:	887a      	ldrh	r2, [r7, #2]
 8009996:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009998:	68fb      	ldr	r3, [r7, #12]
 800999a:	68ba      	ldr	r2, [r7, #8]
 800999c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800999e:	68fb      	ldr	r3, [r7, #12]
 80099a0:	887a      	ldrh	r2, [r7, #2]
 80099a2:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 80099a4:	68fb      	ldr	r3, [r7, #12]
 80099a6:	887a      	ldrh	r2, [r7, #2]
 80099a8:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 80099aa:	68fb      	ldr	r3, [r7, #12]
 80099ac:	2200      	movs	r2, #0
 80099ae:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 80099b0:	68fb      	ldr	r3, [r7, #12]
 80099b2:	2200      	movs	r2, #0
 80099b4:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 80099b6:	68fb      	ldr	r3, [r7, #12]
 80099b8:	681b      	ldr	r3, [r3, #0]
 80099ba:	681b      	ldr	r3, [r3, #0]
 80099bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099c0:	2b40      	cmp	r3, #64	; 0x40
 80099c2:	d007      	beq.n	80099d4 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80099c4:	68fb      	ldr	r3, [r7, #12]
 80099c6:	681b      	ldr	r3, [r3, #0]
 80099c8:	681a      	ldr	r2, [r3, #0]
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80099d2:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80099d4:	68fb      	ldr	r3, [r7, #12]
 80099d6:	68db      	ldr	r3, [r3, #12]
 80099d8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80099dc:	d178      	bne.n	8009ad0 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	685b      	ldr	r3, [r3, #4]
 80099e2:	2b00      	cmp	r3, #0
 80099e4:	d002      	beq.n	80099ec <HAL_SPI_TransmitReceive+0x10a>
 80099e6:	8b7b      	ldrh	r3, [r7, #26]
 80099e8:	2b01      	cmp	r3, #1
 80099ea:	d166      	bne.n	8009aba <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099f0:	881a      	ldrh	r2, [r3, #0]
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80099f8:	68fb      	ldr	r3, [r7, #12]
 80099fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80099fc:	1c9a      	adds	r2, r3, #2
 80099fe:	68fb      	ldr	r3, [r7, #12]
 8009a00:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009a02:	68fb      	ldr	r3, [r7, #12]
 8009a04:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a06:	b29b      	uxth	r3, r3
 8009a08:	3b01      	subs	r3, #1
 8009a0a:	b29a      	uxth	r2, r3
 8009a0c:	68fb      	ldr	r3, [r7, #12]
 8009a0e:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009a10:	e053      	b.n	8009aba <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009a12:	68fb      	ldr	r3, [r7, #12]
 8009a14:	681b      	ldr	r3, [r3, #0]
 8009a16:	689b      	ldr	r3, [r3, #8]
 8009a18:	f003 0302 	and.w	r3, r3, #2
 8009a1c:	2b02      	cmp	r3, #2
 8009a1e:	d11b      	bne.n	8009a58 <HAL_SPI_TransmitReceive+0x176>
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a24:	b29b      	uxth	r3, r3
 8009a26:	2b00      	cmp	r3, #0
 8009a28:	d016      	beq.n	8009a58 <HAL_SPI_TransmitReceive+0x176>
 8009a2a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009a2c:	2b01      	cmp	r3, #1
 8009a2e:	d113      	bne.n	8009a58 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8009a30:	68fb      	ldr	r3, [r7, #12]
 8009a32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a34:	881a      	ldrh	r2, [r3, #0]
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8009a3c:	68fb      	ldr	r3, [r7, #12]
 8009a3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009a40:	1c9a      	adds	r2, r3, #2
 8009a42:	68fb      	ldr	r3, [r7, #12]
 8009a44:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009a46:	68fb      	ldr	r3, [r7, #12]
 8009a48:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009a4a:	b29b      	uxth	r3, r3
 8009a4c:	3b01      	subs	r3, #1
 8009a4e:	b29a      	uxth	r2, r3
 8009a50:	68fb      	ldr	r3, [r7, #12]
 8009a52:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009a54:	2300      	movs	r3, #0
 8009a56:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	689b      	ldr	r3, [r3, #8]
 8009a5e:	f003 0301 	and.w	r3, r3, #1
 8009a62:	2b01      	cmp	r3, #1
 8009a64:	d119      	bne.n	8009a9a <HAL_SPI_TransmitReceive+0x1b8>
 8009a66:	68fb      	ldr	r3, [r7, #12]
 8009a68:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a6a:	b29b      	uxth	r3, r3
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	d014      	beq.n	8009a9a <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8009a70:	68fb      	ldr	r3, [r7, #12]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	68da      	ldr	r2, [r3, #12]
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a7a:	b292      	uxth	r2, r2
 8009a7c:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8009a7e:	68fb      	ldr	r3, [r7, #12]
 8009a80:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009a82:	1c9a      	adds	r2, r3, #2
 8009a84:	68fb      	ldr	r3, [r7, #12]
 8009a86:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009a88:	68fb      	ldr	r3, [r7, #12]
 8009a8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009a8c:	b29b      	uxth	r3, r3
 8009a8e:	3b01      	subs	r3, #1
 8009a90:	b29a      	uxth	r2, r3
 8009a92:	68fb      	ldr	r3, [r7, #12]
 8009a94:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009a96:	2301      	movs	r3, #1
 8009a98:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 8009a9a:	f7fd feed 	bl	8007878 <HAL_GetTick>
 8009a9e:	4602      	mov	r2, r0
 8009aa0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009aa2:	1ad3      	subs	r3, r2, r3
 8009aa4:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009aa6:	429a      	cmp	r2, r3
 8009aa8:	d807      	bhi.n	8009aba <HAL_SPI_TransmitReceive+0x1d8>
 8009aaa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009aac:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ab0:	d003      	beq.n	8009aba <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 8009ab2:	2303      	movs	r3, #3
 8009ab4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009ab8:	e0a7      	b.n	8009c0a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009abe:	b29b      	uxth	r3, r3
 8009ac0:	2b00      	cmp	r3, #0
 8009ac2:	d1a6      	bne.n	8009a12 <HAL_SPI_TransmitReceive+0x130>
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009ac8:	b29b      	uxth	r3, r3
 8009aca:	2b00      	cmp	r3, #0
 8009acc:	d1a1      	bne.n	8009a12 <HAL_SPI_TransmitReceive+0x130>
 8009ace:	e07c      	b.n	8009bca <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8009ad0:	68fb      	ldr	r3, [r7, #12]
 8009ad2:	685b      	ldr	r3, [r3, #4]
 8009ad4:	2b00      	cmp	r3, #0
 8009ad6:	d002      	beq.n	8009ade <HAL_SPI_TransmitReceive+0x1fc>
 8009ad8:	8b7b      	ldrh	r3, [r7, #26]
 8009ada:	2b01      	cmp	r3, #1
 8009adc:	d16b      	bne.n	8009bb6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009ae2:	68fb      	ldr	r3, [r7, #12]
 8009ae4:	681b      	ldr	r3, [r3, #0]
 8009ae6:	330c      	adds	r3, #12
 8009ae8:	7812      	ldrb	r2, [r2, #0]
 8009aea:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8009aec:	68fb      	ldr	r3, [r7, #12]
 8009aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009af0:	1c5a      	adds	r2, r3, #1
 8009af2:	68fb      	ldr	r3, [r7, #12]
 8009af4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8009af6:	68fb      	ldr	r3, [r7, #12]
 8009af8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009afa:	b29b      	uxth	r3, r3
 8009afc:	3b01      	subs	r3, #1
 8009afe:	b29a      	uxth	r2, r3
 8009b00:	68fb      	ldr	r3, [r7, #12]
 8009b02:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009b04:	e057      	b.n	8009bb6 <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8009b06:	68fb      	ldr	r3, [r7, #12]
 8009b08:	681b      	ldr	r3, [r3, #0]
 8009b0a:	689b      	ldr	r3, [r3, #8]
 8009b0c:	f003 0302 	and.w	r3, r3, #2
 8009b10:	2b02      	cmp	r3, #2
 8009b12:	d11c      	bne.n	8009b4e <HAL_SPI_TransmitReceive+0x26c>
 8009b14:	68fb      	ldr	r3, [r7, #12]
 8009b16:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b18:	b29b      	uxth	r3, r3
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d017      	beq.n	8009b4e <HAL_SPI_TransmitReceive+0x26c>
 8009b1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009b20:	2b01      	cmp	r3, #1
 8009b22:	d114      	bne.n	8009b4e <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8009b24:	68fb      	ldr	r3, [r7, #12]
 8009b26:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	681b      	ldr	r3, [r3, #0]
 8009b2c:	330c      	adds	r3, #12
 8009b2e:	7812      	ldrb	r2, [r2, #0]
 8009b30:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009b36:	1c5a      	adds	r2, r3, #1
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8009b3c:	68fb      	ldr	r3, [r7, #12]
 8009b3e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009b40:	b29b      	uxth	r3, r3
 8009b42:	3b01      	subs	r3, #1
 8009b44:	b29a      	uxth	r2, r3
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8009b4a:	2300      	movs	r3, #0
 8009b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8009b4e:	68fb      	ldr	r3, [r7, #12]
 8009b50:	681b      	ldr	r3, [r3, #0]
 8009b52:	689b      	ldr	r3, [r3, #8]
 8009b54:	f003 0301 	and.w	r3, r3, #1
 8009b58:	2b01      	cmp	r3, #1
 8009b5a:	d119      	bne.n	8009b90 <HAL_SPI_TransmitReceive+0x2ae>
 8009b5c:	68fb      	ldr	r3, [r7, #12]
 8009b5e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b60:	b29b      	uxth	r3, r3
 8009b62:	2b00      	cmp	r3, #0
 8009b64:	d014      	beq.n	8009b90 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8009b66:	68fb      	ldr	r3, [r7, #12]
 8009b68:	681b      	ldr	r3, [r3, #0]
 8009b6a:	68da      	ldr	r2, [r3, #12]
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b70:	b2d2      	uxtb	r2, r2
 8009b72:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8009b74:	68fb      	ldr	r3, [r7, #12]
 8009b76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009b78:	1c5a      	adds	r2, r3, #1
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8009b7e:	68fb      	ldr	r3, [r7, #12]
 8009b80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009b82:	b29b      	uxth	r3, r3
 8009b84:	3b01      	subs	r3, #1
 8009b86:	b29a      	uxth	r2, r3
 8009b88:	68fb      	ldr	r3, [r7, #12]
 8009b8a:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8009b8c:	2301      	movs	r3, #1
 8009b8e:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 8009b90:	f7fd fe72 	bl	8007878 <HAL_GetTick>
 8009b94:	4602      	mov	r2, r0
 8009b96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009b98:	1ad3      	subs	r3, r2, r3
 8009b9a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009b9c:	429a      	cmp	r2, r3
 8009b9e:	d803      	bhi.n	8009ba8 <HAL_SPI_TransmitReceive+0x2c6>
 8009ba0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009ba2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009ba6:	d102      	bne.n	8009bae <HAL_SPI_TransmitReceive+0x2cc>
 8009ba8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d103      	bne.n	8009bb6 <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 8009bae:	2303      	movs	r3, #3
 8009bb0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 8009bb4:	e029      	b.n	8009c0a <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8009bb6:	68fb      	ldr	r3, [r7, #12]
 8009bb8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8009bba:	b29b      	uxth	r3, r3
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	d1a2      	bne.n	8009b06 <HAL_SPI_TransmitReceive+0x224>
 8009bc0:	68fb      	ldr	r3, [r7, #12]
 8009bc2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009bc4:	b29b      	uxth	r3, r3
 8009bc6:	2b00      	cmp	r3, #0
 8009bc8:	d19d      	bne.n	8009b06 <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8009bca:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8009bcc:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8009bce:	68f8      	ldr	r0, [r7, #12]
 8009bd0:	f000 f8f8 	bl	8009dc4 <SPI_EndRxTxTransaction>
 8009bd4:	4603      	mov	r3, r0
 8009bd6:	2b00      	cmp	r3, #0
 8009bd8:	d006      	beq.n	8009be8 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 8009bda:	2301      	movs	r3, #1
 8009bdc:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8009be0:	68fb      	ldr	r3, [r7, #12]
 8009be2:	2220      	movs	r2, #32
 8009be4:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 8009be6:	e010      	b.n	8009c0a <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8009be8:	68fb      	ldr	r3, [r7, #12]
 8009bea:	689b      	ldr	r3, [r3, #8]
 8009bec:	2b00      	cmp	r3, #0
 8009bee:	d10b      	bne.n	8009c08 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8009bf0:	2300      	movs	r3, #0
 8009bf2:	617b      	str	r3, [r7, #20]
 8009bf4:	68fb      	ldr	r3, [r7, #12]
 8009bf6:	681b      	ldr	r3, [r3, #0]
 8009bf8:	68db      	ldr	r3, [r3, #12]
 8009bfa:	617b      	str	r3, [r7, #20]
 8009bfc:	68fb      	ldr	r3, [r7, #12]
 8009bfe:	681b      	ldr	r3, [r3, #0]
 8009c00:	689b      	ldr	r3, [r3, #8]
 8009c02:	617b      	str	r3, [r7, #20]
 8009c04:	697b      	ldr	r3, [r7, #20]
 8009c06:	e000      	b.n	8009c0a <HAL_SPI_TransmitReceive+0x328>
  }

error :
 8009c08:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 8009c0a:	68fb      	ldr	r3, [r7, #12]
 8009c0c:	2201      	movs	r2, #1
 8009c0e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 8009c12:	68fb      	ldr	r3, [r7, #12]
 8009c14:	2200      	movs	r2, #0
 8009c16:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8009c1a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 8009c1e:	4618      	mov	r0, r3
 8009c20:	3730      	adds	r7, #48	; 0x30
 8009c22:	46bd      	mov	sp, r7
 8009c24:	bd80      	pop	{r7, pc}

08009c26 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8009c26:	b580      	push	{r7, lr}
 8009c28:	b084      	sub	sp, #16
 8009c2a:	af00      	add	r7, sp, #0
 8009c2c:	60f8      	str	r0, [r7, #12]
 8009c2e:	60b9      	str	r1, [r7, #8]
 8009c30:	603b      	str	r3, [r7, #0]
 8009c32:	4613      	mov	r3, r2
 8009c34:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009c36:	e04c      	b.n	8009cd2 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 8009c38:	683b      	ldr	r3, [r7, #0]
 8009c3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009c3e:	d048      	beq.n	8009cd2 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 8009c40:	f7fd fe1a 	bl	8007878 <HAL_GetTick>
 8009c44:	4602      	mov	r2, r0
 8009c46:	69bb      	ldr	r3, [r7, #24]
 8009c48:	1ad3      	subs	r3, r2, r3
 8009c4a:	683a      	ldr	r2, [r7, #0]
 8009c4c:	429a      	cmp	r2, r3
 8009c4e:	d902      	bls.n	8009c56 <SPI_WaitFlagStateUntilTimeout+0x30>
 8009c50:	683b      	ldr	r3, [r7, #0]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d13d      	bne.n	8009cd2 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009c56:	68fb      	ldr	r3, [r7, #12]
 8009c58:	681b      	ldr	r3, [r3, #0]
 8009c5a:	685a      	ldr	r2, [r3, #4]
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	681b      	ldr	r3, [r3, #0]
 8009c60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 8009c64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	685b      	ldr	r3, [r3, #4]
 8009c6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009c6e:	d111      	bne.n	8009c94 <SPI_WaitFlagStateUntilTimeout+0x6e>
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	689b      	ldr	r3, [r3, #8]
 8009c74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009c78:	d004      	beq.n	8009c84 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009c7a:	68fb      	ldr	r3, [r7, #12]
 8009c7c:	689b      	ldr	r3, [r3, #8]
 8009c7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009c82:	d107      	bne.n	8009c94 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	681b      	ldr	r3, [r3, #0]
 8009c88:	681a      	ldr	r2, [r3, #0]
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	681b      	ldr	r3, [r3, #0]
 8009c8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009c92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 8009c94:	68fb      	ldr	r3, [r7, #12]
 8009c96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009c98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c9c:	d10f      	bne.n	8009cbe <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 8009c9e:	68fb      	ldr	r3, [r7, #12]
 8009ca0:	681b      	ldr	r3, [r3, #0]
 8009ca2:	681a      	ldr	r2, [r3, #0]
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009cac:	601a      	str	r2, [r3, #0]
 8009cae:	68fb      	ldr	r3, [r7, #12]
 8009cb0:	681b      	ldr	r3, [r3, #0]
 8009cb2:	681a      	ldr	r2, [r3, #0]
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009cbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8009cbe:	68fb      	ldr	r3, [r7, #12]
 8009cc0:	2201      	movs	r2, #1
 8009cc2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8009cc6:	68fb      	ldr	r3, [r7, #12]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 8009cce:	2303      	movs	r3, #3
 8009cd0:	e00f      	b.n	8009cf2 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	689a      	ldr	r2, [r3, #8]
 8009cd8:	68bb      	ldr	r3, [r7, #8]
 8009cda:	4013      	ands	r3, r2
 8009cdc:	68ba      	ldr	r2, [r7, #8]
 8009cde:	429a      	cmp	r2, r3
 8009ce0:	bf0c      	ite	eq
 8009ce2:	2301      	moveq	r3, #1
 8009ce4:	2300      	movne	r3, #0
 8009ce6:	b2db      	uxtb	r3, r3
 8009ce8:	461a      	mov	r2, r3
 8009cea:	79fb      	ldrb	r3, [r7, #7]
 8009cec:	429a      	cmp	r2, r3
 8009cee:	d1a3      	bne.n	8009c38 <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 8009cf0:	2300      	movs	r3, #0
}
 8009cf2:	4618      	mov	r0, r3
 8009cf4:	3710      	adds	r7, #16
 8009cf6:	46bd      	mov	sp, r7
 8009cf8:	bd80      	pop	{r7, pc}

08009cfa <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8009cfa:	b580      	push	{r7, lr}
 8009cfc:	b086      	sub	sp, #24
 8009cfe:	af02      	add	r7, sp, #8
 8009d00:	60f8      	str	r0, [r7, #12]
 8009d02:	60b9      	str	r1, [r7, #8]
 8009d04:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	685b      	ldr	r3, [r3, #4]
 8009d0a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d0e:	d111      	bne.n	8009d34 <SPI_EndRxTransaction+0x3a>
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	689b      	ldr	r3, [r3, #8]
 8009d14:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009d18:	d004      	beq.n	8009d24 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8009d1a:	68fb      	ldr	r3, [r7, #12]
 8009d1c:	689b      	ldr	r3, [r3, #8]
 8009d1e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d22:	d107      	bne.n	8009d34 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8009d24:	68fb      	ldr	r3, [r7, #12]
 8009d26:	681b      	ldr	r3, [r3, #0]
 8009d28:	681a      	ldr	r2, [r3, #0]
 8009d2a:	68fb      	ldr	r3, [r7, #12]
 8009d2c:	681b      	ldr	r3, [r3, #0]
 8009d2e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009d32:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	685b      	ldr	r3, [r3, #4]
 8009d38:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009d3c:	d12a      	bne.n	8009d94 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	689b      	ldr	r3, [r3, #8]
 8009d42:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8009d46:	d012      	beq.n	8009d6e <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009d48:	687b      	ldr	r3, [r7, #4]
 8009d4a:	9300      	str	r3, [sp, #0]
 8009d4c:	68bb      	ldr	r3, [r7, #8]
 8009d4e:	2200      	movs	r2, #0
 8009d50:	2180      	movs	r1, #128	; 0x80
 8009d52:	68f8      	ldr	r0, [r7, #12]
 8009d54:	f7ff ff67 	bl	8009c26 <SPI_WaitFlagStateUntilTimeout>
 8009d58:	4603      	mov	r3, r0
 8009d5a:	2b00      	cmp	r3, #0
 8009d5c:	d02d      	beq.n	8009dba <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d62:	f043 0220 	orr.w	r2, r3, #32
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009d6a:	2303      	movs	r3, #3
 8009d6c:	e026      	b.n	8009dbc <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009d6e:	687b      	ldr	r3, [r7, #4]
 8009d70:	9300      	str	r3, [sp, #0]
 8009d72:	68bb      	ldr	r3, [r7, #8]
 8009d74:	2200      	movs	r2, #0
 8009d76:	2101      	movs	r1, #1
 8009d78:	68f8      	ldr	r0, [r7, #12]
 8009d7a:	f7ff ff54 	bl	8009c26 <SPI_WaitFlagStateUntilTimeout>
 8009d7e:	4603      	mov	r3, r0
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d01a      	beq.n	8009dba <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d88:	f043 0220 	orr.w	r2, r3, #32
 8009d8c:	68fb      	ldr	r3, [r7, #12]
 8009d8e:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 8009d90:	2303      	movs	r3, #3
 8009d92:	e013      	b.n	8009dbc <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8009d94:	687b      	ldr	r3, [r7, #4]
 8009d96:	9300      	str	r3, [sp, #0]
 8009d98:	68bb      	ldr	r3, [r7, #8]
 8009d9a:	2200      	movs	r2, #0
 8009d9c:	2101      	movs	r1, #1
 8009d9e:	68f8      	ldr	r0, [r7, #12]
 8009da0:	f7ff ff41 	bl	8009c26 <SPI_WaitFlagStateUntilTimeout>
 8009da4:	4603      	mov	r3, r0
 8009da6:	2b00      	cmp	r3, #0
 8009da8:	d007      	beq.n	8009dba <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009daa:	68fb      	ldr	r3, [r7, #12]
 8009dac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009dae:	f043 0220 	orr.w	r2, r3, #32
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009db6:	2303      	movs	r3, #3
 8009db8:	e000      	b.n	8009dbc <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 8009dba:	2300      	movs	r3, #0
}
 8009dbc:	4618      	mov	r0, r3
 8009dbe:	3710      	adds	r7, #16
 8009dc0:	46bd      	mov	sp, r7
 8009dc2:	bd80      	pop	{r7, pc}

08009dc4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 8009dc4:	b580      	push	{r7, lr}
 8009dc6:	b088      	sub	sp, #32
 8009dc8:	af02      	add	r7, sp, #8
 8009dca:	60f8      	str	r0, [r7, #12]
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 8009dd0:	4b1b      	ldr	r3, [pc, #108]	; (8009e40 <SPI_EndRxTxTransaction+0x7c>)
 8009dd2:	681b      	ldr	r3, [r3, #0]
 8009dd4:	4a1b      	ldr	r2, [pc, #108]	; (8009e44 <SPI_EndRxTxTransaction+0x80>)
 8009dd6:	fba2 2303 	umull	r2, r3, r2, r3
 8009dda:	0d5b      	lsrs	r3, r3, #21
 8009ddc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8009de0:	fb02 f303 	mul.w	r3, r2, r3
 8009de4:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	685b      	ldr	r3, [r3, #4]
 8009dea:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009dee:	d112      	bne.n	8009e16 <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8009df0:	687b      	ldr	r3, [r7, #4]
 8009df2:	9300      	str	r3, [sp, #0]
 8009df4:	68bb      	ldr	r3, [r7, #8]
 8009df6:	2200      	movs	r2, #0
 8009df8:	2180      	movs	r1, #128	; 0x80
 8009dfa:	68f8      	ldr	r0, [r7, #12]
 8009dfc:	f7ff ff13 	bl	8009c26 <SPI_WaitFlagStateUntilTimeout>
 8009e00:	4603      	mov	r3, r0
 8009e02:	2b00      	cmp	r3, #0
 8009e04:	d016      	beq.n	8009e34 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8009e06:	68fb      	ldr	r3, [r7, #12]
 8009e08:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009e0a:	f043 0220 	orr.w	r2, r3, #32
 8009e0e:	68fb      	ldr	r3, [r7, #12]
 8009e10:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 8009e12:	2303      	movs	r3, #3
 8009e14:	e00f      	b.n	8009e36 <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 8009e16:	697b      	ldr	r3, [r7, #20]
 8009e18:	2b00      	cmp	r3, #0
 8009e1a:	d00a      	beq.n	8009e32 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 8009e1c:	697b      	ldr	r3, [r7, #20]
 8009e1e:	3b01      	subs	r3, #1
 8009e20:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	681b      	ldr	r3, [r3, #0]
 8009e26:	689b      	ldr	r3, [r3, #8]
 8009e28:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009e2c:	2b80      	cmp	r3, #128	; 0x80
 8009e2e:	d0f2      	beq.n	8009e16 <SPI_EndRxTxTransaction+0x52>
 8009e30:	e000      	b.n	8009e34 <SPI_EndRxTxTransaction+0x70>
        break;
 8009e32:	bf00      	nop
  }

  return HAL_OK;
 8009e34:	2300      	movs	r3, #0
}
 8009e36:	4618      	mov	r0, r3
 8009e38:	3718      	adds	r7, #24
 8009e3a:	46bd      	mov	sp, r7
 8009e3c:	bd80      	pop	{r7, pc}
 8009e3e:	bf00      	nop
 8009e40:	20000008 	.word	0x20000008
 8009e44:	165e9f81 	.word	0x165e9f81

08009e48 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8009e48:	b580      	push	{r7, lr}
 8009e4a:	b082      	sub	sp, #8
 8009e4c:	af00      	add	r7, sp, #0
 8009e4e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009e50:	687b      	ldr	r3, [r7, #4]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d101      	bne.n	8009e5a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	e01d      	b.n	8009e96 <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009e60:	b2db      	uxtb	r3, r3
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d106      	bne.n	8009e74 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009e66:	687b      	ldr	r3, [r7, #4]
 8009e68:	2200      	movs	r2, #0
 8009e6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8009e6e:	6878      	ldr	r0, [r7, #4]
 8009e70:	f7fd fb02 	bl	8007478 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009e74:	687b      	ldr	r3, [r7, #4]
 8009e76:	2202      	movs	r2, #2
 8009e78:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009e7c:	687b      	ldr	r3, [r7, #4]
 8009e7e:	681a      	ldr	r2, [r3, #0]
 8009e80:	687b      	ldr	r3, [r7, #4]
 8009e82:	3304      	adds	r3, #4
 8009e84:	4619      	mov	r1, r3
 8009e86:	4610      	mov	r0, r2
 8009e88:	f000 fb4e 	bl	800a528 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009e8c:	687b      	ldr	r3, [r7, #4]
 8009e8e:	2201      	movs	r2, #1
 8009e90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009e94:	2300      	movs	r3, #0
}
 8009e96:	4618      	mov	r0, r3
 8009e98:	3708      	adds	r7, #8
 8009e9a:	46bd      	mov	sp, r7
 8009e9c:	bd80      	pop	{r7, pc}

08009e9e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8009e9e:	b480      	push	{r7}
 8009ea0:	b085      	sub	sp, #20
 8009ea2:	af00      	add	r7, sp, #0
 8009ea4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8009ea6:	687b      	ldr	r3, [r7, #4]
 8009ea8:	681b      	ldr	r3, [r3, #0]
 8009eaa:	68da      	ldr	r2, [r3, #12]
 8009eac:	687b      	ldr	r3, [r7, #4]
 8009eae:	681b      	ldr	r3, [r3, #0]
 8009eb0:	f042 0201 	orr.w	r2, r2, #1
 8009eb4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009eb6:	687b      	ldr	r3, [r7, #4]
 8009eb8:	681b      	ldr	r3, [r3, #0]
 8009eba:	689b      	ldr	r3, [r3, #8]
 8009ebc:	f003 0307 	and.w	r3, r3, #7
 8009ec0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009ec2:	68fb      	ldr	r3, [r7, #12]
 8009ec4:	2b06      	cmp	r3, #6
 8009ec6:	d007      	beq.n	8009ed8 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8009ec8:	687b      	ldr	r3, [r7, #4]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	681a      	ldr	r2, [r3, #0]
 8009ece:	687b      	ldr	r3, [r7, #4]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f042 0201 	orr.w	r2, r2, #1
 8009ed6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009ed8:	2300      	movs	r3, #0
}
 8009eda:	4618      	mov	r0, r3
 8009edc:	3714      	adds	r7, #20
 8009ede:	46bd      	mov	sp, r7
 8009ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009ee4:	4770      	bx	lr

08009ee6 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8009ee6:	b580      	push	{r7, lr}
 8009ee8:	b082      	sub	sp, #8
 8009eea:	af00      	add	r7, sp, #0
 8009eec:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	2b00      	cmp	r3, #0
 8009ef2:	d101      	bne.n	8009ef8 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8009ef4:	2301      	movs	r3, #1
 8009ef6:	e01d      	b.n	8009f34 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8009ef8:	687b      	ldr	r3, [r7, #4]
 8009efa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009efe:	b2db      	uxtb	r3, r3
 8009f00:	2b00      	cmp	r3, #0
 8009f02:	d106      	bne.n	8009f12 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8009f04:	687b      	ldr	r3, [r7, #4]
 8009f06:	2200      	movs	r2, #0
 8009f08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8009f0c:	6878      	ldr	r0, [r7, #4]
 8009f0e:	f000 f815 	bl	8009f3c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	2202      	movs	r2, #2
 8009f16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	681a      	ldr	r2, [r3, #0]
 8009f1e:	687b      	ldr	r3, [r7, #4]
 8009f20:	3304      	adds	r3, #4
 8009f22:	4619      	mov	r1, r3
 8009f24:	4610      	mov	r0, r2
 8009f26:	f000 faff 	bl	800a528 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009f2a:	687b      	ldr	r3, [r7, #4]
 8009f2c:	2201      	movs	r2, #1
 8009f2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009f32:	2300      	movs	r3, #0
}
 8009f34:	4618      	mov	r0, r3
 8009f36:	3708      	adds	r7, #8
 8009f38:	46bd      	mov	sp, r7
 8009f3a:	bd80      	pop	{r7, pc}

08009f3c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8009f3c:	b480      	push	{r7}
 8009f3e:	b083      	sub	sp, #12
 8009f40:	af00      	add	r7, sp, #0
 8009f42:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8009f44:	bf00      	nop
 8009f46:	370c      	adds	r7, #12
 8009f48:	46bd      	mov	sp, r7
 8009f4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f4e:	4770      	bx	lr

08009f50 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8009f50:	b580      	push	{r7, lr}
 8009f52:	b084      	sub	sp, #16
 8009f54:	af00      	add	r7, sp, #0
 8009f56:	6078      	str	r0, [r7, #4]
 8009f58:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8009f5a:	687b      	ldr	r3, [r7, #4]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	2201      	movs	r2, #1
 8009f60:	6839      	ldr	r1, [r7, #0]
 8009f62:	4618      	mov	r0, r3
 8009f64:	f000 fdca 	bl	800aafc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8009f68:	687b      	ldr	r3, [r7, #4]
 8009f6a:	681b      	ldr	r3, [r3, #0]
 8009f6c:	4a15      	ldr	r2, [pc, #84]	; (8009fc4 <HAL_TIM_PWM_Start+0x74>)
 8009f6e:	4293      	cmp	r3, r2
 8009f70:	d004      	beq.n	8009f7c <HAL_TIM_PWM_Start+0x2c>
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	681b      	ldr	r3, [r3, #0]
 8009f76:	4a14      	ldr	r2, [pc, #80]	; (8009fc8 <HAL_TIM_PWM_Start+0x78>)
 8009f78:	4293      	cmp	r3, r2
 8009f7a:	d101      	bne.n	8009f80 <HAL_TIM_PWM_Start+0x30>
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e000      	b.n	8009f82 <HAL_TIM_PWM_Start+0x32>
 8009f80:	2300      	movs	r3, #0
 8009f82:	2b00      	cmp	r3, #0
 8009f84:	d007      	beq.n	8009f96 <HAL_TIM_PWM_Start+0x46>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	681b      	ldr	r3, [r3, #0]
 8009f8a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8009f8c:	687b      	ldr	r3, [r7, #4]
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8009f94:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8009f96:	687b      	ldr	r3, [r7, #4]
 8009f98:	681b      	ldr	r3, [r3, #0]
 8009f9a:	689b      	ldr	r3, [r3, #8]
 8009f9c:	f003 0307 	and.w	r3, r3, #7
 8009fa0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8009fa2:	68fb      	ldr	r3, [r7, #12]
 8009fa4:	2b06      	cmp	r3, #6
 8009fa6:	d007      	beq.n	8009fb8 <HAL_TIM_PWM_Start+0x68>
  {
    __HAL_TIM_ENABLE(htim);
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	681b      	ldr	r3, [r3, #0]
 8009fac:	681a      	ldr	r2, [r3, #0]
 8009fae:	687b      	ldr	r3, [r7, #4]
 8009fb0:	681b      	ldr	r3, [r3, #0]
 8009fb2:	f042 0201 	orr.w	r2, r2, #1
 8009fb6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8009fb8:	2300      	movs	r3, #0
}
 8009fba:	4618      	mov	r0, r3
 8009fbc:	3710      	adds	r7, #16
 8009fbe:	46bd      	mov	sp, r7
 8009fc0:	bd80      	pop	{r7, pc}
 8009fc2:	bf00      	nop
 8009fc4:	40010000 	.word	0x40010000
 8009fc8:	40010400 	.word	0x40010400

08009fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009fcc:	b580      	push	{r7, lr}
 8009fce:	b082      	sub	sp, #8
 8009fd0:	af00      	add	r7, sp, #0
 8009fd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009fd4:	687b      	ldr	r3, [r7, #4]
 8009fd6:	681b      	ldr	r3, [r3, #0]
 8009fd8:	691b      	ldr	r3, [r3, #16]
 8009fda:	f003 0302 	and.w	r3, r3, #2
 8009fde:	2b02      	cmp	r3, #2
 8009fe0:	d122      	bne.n	800a028 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009fe2:	687b      	ldr	r3, [r7, #4]
 8009fe4:	681b      	ldr	r3, [r3, #0]
 8009fe6:	68db      	ldr	r3, [r3, #12]
 8009fe8:	f003 0302 	and.w	r3, r3, #2
 8009fec:	2b02      	cmp	r3, #2
 8009fee:	d11b      	bne.n	800a028 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	f06f 0202 	mvn.w	r2, #2
 8009ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009ffa:	687b      	ldr	r3, [r7, #4]
 8009ffc:	2201      	movs	r2, #1
 8009ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	681b      	ldr	r3, [r3, #0]
 800a004:	699b      	ldr	r3, [r3, #24]
 800a006:	f003 0303 	and.w	r3, r3, #3
 800a00a:	2b00      	cmp	r3, #0
 800a00c:	d003      	beq.n	800a016 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800a00e:	6878      	ldr	r0, [r7, #4]
 800a010:	f000 fa6b 	bl	800a4ea <HAL_TIM_IC_CaptureCallback>
 800a014:	e005      	b.n	800a022 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800a016:	6878      	ldr	r0, [r7, #4]
 800a018:	f000 fa5d 	bl	800a4d6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a01c:	6878      	ldr	r0, [r7, #4]
 800a01e:	f000 fa6e 	bl	800a4fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a022:	687b      	ldr	r3, [r7, #4]
 800a024:	2200      	movs	r2, #0
 800a026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	681b      	ldr	r3, [r3, #0]
 800a02c:	691b      	ldr	r3, [r3, #16]
 800a02e:	f003 0304 	and.w	r3, r3, #4
 800a032:	2b04      	cmp	r3, #4
 800a034:	d122      	bne.n	800a07c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800a036:	687b      	ldr	r3, [r7, #4]
 800a038:	681b      	ldr	r3, [r3, #0]
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	f003 0304 	and.w	r3, r3, #4
 800a040:	2b04      	cmp	r3, #4
 800a042:	d11b      	bne.n	800a07c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	681b      	ldr	r3, [r3, #0]
 800a048:	f06f 0204 	mvn.w	r2, #4
 800a04c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800a04e:	687b      	ldr	r3, [r7, #4]
 800a050:	2202      	movs	r2, #2
 800a052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	681b      	ldr	r3, [r3, #0]
 800a058:	699b      	ldr	r3, [r3, #24]
 800a05a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a05e:	2b00      	cmp	r3, #0
 800a060:	d003      	beq.n	800a06a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a062:	6878      	ldr	r0, [r7, #4]
 800a064:	f000 fa41 	bl	800a4ea <HAL_TIM_IC_CaptureCallback>
 800a068:	e005      	b.n	800a076 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a06a:	6878      	ldr	r0, [r7, #4]
 800a06c:	f000 fa33 	bl	800a4d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a070:	6878      	ldr	r0, [r7, #4]
 800a072:	f000 fa44 	bl	800a4fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a076:	687b      	ldr	r3, [r7, #4]
 800a078:	2200      	movs	r2, #0
 800a07a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800a07c:	687b      	ldr	r3, [r7, #4]
 800a07e:	681b      	ldr	r3, [r3, #0]
 800a080:	691b      	ldr	r3, [r3, #16]
 800a082:	f003 0308 	and.w	r3, r3, #8
 800a086:	2b08      	cmp	r3, #8
 800a088:	d122      	bne.n	800a0d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	681b      	ldr	r3, [r3, #0]
 800a08e:	68db      	ldr	r3, [r3, #12]
 800a090:	f003 0308 	and.w	r3, r3, #8
 800a094:	2b08      	cmp	r3, #8
 800a096:	d11b      	bne.n	800a0d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800a098:	687b      	ldr	r3, [r7, #4]
 800a09a:	681b      	ldr	r3, [r3, #0]
 800a09c:	f06f 0208 	mvn.w	r2, #8
 800a0a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800a0a2:	687b      	ldr	r3, [r7, #4]
 800a0a4:	2204      	movs	r2, #4
 800a0a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800a0a8:	687b      	ldr	r3, [r7, #4]
 800a0aa:	681b      	ldr	r3, [r3, #0]
 800a0ac:	69db      	ldr	r3, [r3, #28]
 800a0ae:	f003 0303 	and.w	r3, r3, #3
 800a0b2:	2b00      	cmp	r3, #0
 800a0b4:	d003      	beq.n	800a0be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a0b6:	6878      	ldr	r0, [r7, #4]
 800a0b8:	f000 fa17 	bl	800a4ea <HAL_TIM_IC_CaptureCallback>
 800a0bc:	e005      	b.n	800a0ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a0be:	6878      	ldr	r0, [r7, #4]
 800a0c0:	f000 fa09 	bl	800a4d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a0c4:	6878      	ldr	r0, [r7, #4]
 800a0c6:	f000 fa1a 	bl	800a4fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a0ca:	687b      	ldr	r3, [r7, #4]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800a0d0:	687b      	ldr	r3, [r7, #4]
 800a0d2:	681b      	ldr	r3, [r3, #0]
 800a0d4:	691b      	ldr	r3, [r3, #16]
 800a0d6:	f003 0310 	and.w	r3, r3, #16
 800a0da:	2b10      	cmp	r3, #16
 800a0dc:	d122      	bne.n	800a124 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800a0de:	687b      	ldr	r3, [r7, #4]
 800a0e0:	681b      	ldr	r3, [r3, #0]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	f003 0310 	and.w	r3, r3, #16
 800a0e8:	2b10      	cmp	r3, #16
 800a0ea:	d11b      	bne.n	800a124 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800a0ec:	687b      	ldr	r3, [r7, #4]
 800a0ee:	681b      	ldr	r3, [r3, #0]
 800a0f0:	f06f 0210 	mvn.w	r2, #16
 800a0f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800a0f6:	687b      	ldr	r3, [r7, #4]
 800a0f8:	2208      	movs	r2, #8
 800a0fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800a0fc:	687b      	ldr	r3, [r7, #4]
 800a0fe:	681b      	ldr	r3, [r3, #0]
 800a100:	69db      	ldr	r3, [r3, #28]
 800a102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800a106:	2b00      	cmp	r3, #0
 800a108:	d003      	beq.n	800a112 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800a10a:	6878      	ldr	r0, [r7, #4]
 800a10c:	f000 f9ed 	bl	800a4ea <HAL_TIM_IC_CaptureCallback>
 800a110:	e005      	b.n	800a11e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800a112:	6878      	ldr	r0, [r7, #4]
 800a114:	f000 f9df 	bl	800a4d6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800a118:	6878      	ldr	r0, [r7, #4]
 800a11a:	f000 f9f0 	bl	800a4fe <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800a11e:	687b      	ldr	r3, [r7, #4]
 800a120:	2200      	movs	r2, #0
 800a122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800a124:	687b      	ldr	r3, [r7, #4]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	691b      	ldr	r3, [r3, #16]
 800a12a:	f003 0301 	and.w	r3, r3, #1
 800a12e:	2b01      	cmp	r3, #1
 800a130:	d10e      	bne.n	800a150 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800a132:	687b      	ldr	r3, [r7, #4]
 800a134:	681b      	ldr	r3, [r3, #0]
 800a136:	68db      	ldr	r3, [r3, #12]
 800a138:	f003 0301 	and.w	r3, r3, #1
 800a13c:	2b01      	cmp	r3, #1
 800a13e:	d107      	bne.n	800a150 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	681b      	ldr	r3, [r3, #0]
 800a144:	f06f 0201 	mvn.w	r2, #1
 800a148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800a14a:	6878      	ldr	r0, [r7, #4]
 800a14c:	f7fd f886 	bl	800725c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800a150:	687b      	ldr	r3, [r7, #4]
 800a152:	681b      	ldr	r3, [r3, #0]
 800a154:	691b      	ldr	r3, [r3, #16]
 800a156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a15a:	2b80      	cmp	r3, #128	; 0x80
 800a15c:	d10e      	bne.n	800a17c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	68db      	ldr	r3, [r3, #12]
 800a164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a168:	2b80      	cmp	r3, #128	; 0x80
 800a16a:	d107      	bne.n	800a17c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	681b      	ldr	r3, [r3, #0]
 800a170:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800a174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800a176:	6878      	ldr	r0, [r7, #4]
 800a178:	f000 fd6c 	bl	800ac54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	681b      	ldr	r3, [r3, #0]
 800a180:	691b      	ldr	r3, [r3, #16]
 800a182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a186:	2b40      	cmp	r3, #64	; 0x40
 800a188:	d10e      	bne.n	800a1a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800a18a:	687b      	ldr	r3, [r7, #4]
 800a18c:	681b      	ldr	r3, [r3, #0]
 800a18e:	68db      	ldr	r3, [r3, #12]
 800a190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a194:	2b40      	cmp	r3, #64	; 0x40
 800a196:	d107      	bne.n	800a1a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800a198:	687b      	ldr	r3, [r7, #4]
 800a19a:	681b      	ldr	r3, [r3, #0]
 800a19c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800a1a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800a1a2:	6878      	ldr	r0, [r7, #4]
 800a1a4:	f000 f9b5 	bl	800a512 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	691b      	ldr	r3, [r3, #16]
 800a1ae:	f003 0320 	and.w	r3, r3, #32
 800a1b2:	2b20      	cmp	r3, #32
 800a1b4:	d10e      	bne.n	800a1d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	68db      	ldr	r3, [r3, #12]
 800a1bc:	f003 0320 	and.w	r3, r3, #32
 800a1c0:	2b20      	cmp	r3, #32
 800a1c2:	d107      	bne.n	800a1d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800a1c4:	687b      	ldr	r3, [r7, #4]
 800a1c6:	681b      	ldr	r3, [r3, #0]
 800a1c8:	f06f 0220 	mvn.w	r2, #32
 800a1cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800a1ce:	6878      	ldr	r0, [r7, #4]
 800a1d0:	f000 fd36 	bl	800ac40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800a1d4:	bf00      	nop
 800a1d6:	3708      	adds	r7, #8
 800a1d8:	46bd      	mov	sp, r7
 800a1da:	bd80      	pop	{r7, pc}

0800a1dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800a1dc:	b580      	push	{r7, lr}
 800a1de:	b084      	sub	sp, #16
 800a1e0:	af00      	add	r7, sp, #0
 800a1e2:	60f8      	str	r0, [r7, #12]
 800a1e4:	60b9      	str	r1, [r7, #8]
 800a1e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800a1e8:	68fb      	ldr	r3, [r7, #12]
 800a1ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a1ee:	2b01      	cmp	r3, #1
 800a1f0:	d101      	bne.n	800a1f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800a1f2:	2302      	movs	r3, #2
 800a1f4:	e0b4      	b.n	800a360 <HAL_TIM_PWM_ConfigChannel+0x184>
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	2201      	movs	r2, #1
 800a1fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a1fe:	68fb      	ldr	r3, [r7, #12]
 800a200:	2202      	movs	r2, #2
 800a202:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  switch (Channel)
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2b0c      	cmp	r3, #12
 800a20a:	f200 809f 	bhi.w	800a34c <HAL_TIM_PWM_ConfigChannel+0x170>
 800a20e:	a201      	add	r2, pc, #4	; (adr r2, 800a214 <HAL_TIM_PWM_ConfigChannel+0x38>)
 800a210:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800a214:	0800a249 	.word	0x0800a249
 800a218:	0800a34d 	.word	0x0800a34d
 800a21c:	0800a34d 	.word	0x0800a34d
 800a220:	0800a34d 	.word	0x0800a34d
 800a224:	0800a289 	.word	0x0800a289
 800a228:	0800a34d 	.word	0x0800a34d
 800a22c:	0800a34d 	.word	0x0800a34d
 800a230:	0800a34d 	.word	0x0800a34d
 800a234:	0800a2cb 	.word	0x0800a2cb
 800a238:	0800a34d 	.word	0x0800a34d
 800a23c:	0800a34d 	.word	0x0800a34d
 800a240:	0800a34d 	.word	0x0800a34d
 800a244:	0800a30b 	.word	0x0800a30b
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	681b      	ldr	r3, [r3, #0]
 800a24c:	68b9      	ldr	r1, [r7, #8]
 800a24e:	4618      	mov	r0, r3
 800a250:	f000 fa0a 	bl	800a668 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	681b      	ldr	r3, [r3, #0]
 800a258:	699a      	ldr	r2, [r3, #24]
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	f042 0208 	orr.w	r2, r2, #8
 800a262:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	699a      	ldr	r2, [r3, #24]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f022 0204 	bic.w	r2, r2, #4
 800a272:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	6999      	ldr	r1, [r3, #24]
 800a27a:	68bb      	ldr	r3, [r7, #8]
 800a27c:	691a      	ldr	r2, [r3, #16]
 800a27e:	68fb      	ldr	r3, [r7, #12]
 800a280:	681b      	ldr	r3, [r3, #0]
 800a282:	430a      	orrs	r2, r1
 800a284:	619a      	str	r2, [r3, #24]
      break;
 800a286:	e062      	b.n	800a34e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 800a288:	68fb      	ldr	r3, [r7, #12]
 800a28a:	681b      	ldr	r3, [r3, #0]
 800a28c:	68b9      	ldr	r1, [r7, #8]
 800a28e:	4618      	mov	r0, r3
 800a290:	f000 fa5a 	bl	800a748 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800a294:	68fb      	ldr	r3, [r7, #12]
 800a296:	681b      	ldr	r3, [r3, #0]
 800a298:	699a      	ldr	r2, [r3, #24]
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	681b      	ldr	r3, [r3, #0]
 800a29e:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a2a2:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	699a      	ldr	r2, [r3, #24]
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a2b2:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 800a2b4:	68fb      	ldr	r3, [r7, #12]
 800a2b6:	681b      	ldr	r3, [r3, #0]
 800a2b8:	6999      	ldr	r1, [r3, #24]
 800a2ba:	68bb      	ldr	r3, [r7, #8]
 800a2bc:	691b      	ldr	r3, [r3, #16]
 800a2be:	021a      	lsls	r2, r3, #8
 800a2c0:	68fb      	ldr	r3, [r7, #12]
 800a2c2:	681b      	ldr	r3, [r3, #0]
 800a2c4:	430a      	orrs	r2, r1
 800a2c6:	619a      	str	r2, [r3, #24]
      break;
 800a2c8:	e041      	b.n	800a34e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800a2ca:	68fb      	ldr	r3, [r7, #12]
 800a2cc:	681b      	ldr	r3, [r3, #0]
 800a2ce:	68b9      	ldr	r1, [r7, #8]
 800a2d0:	4618      	mov	r0, r3
 800a2d2:	f000 faaf 	bl	800a834 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800a2d6:	68fb      	ldr	r3, [r7, #12]
 800a2d8:	681b      	ldr	r3, [r3, #0]
 800a2da:	69da      	ldr	r2, [r3, #28]
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	f042 0208 	orr.w	r2, r2, #8
 800a2e4:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	681b      	ldr	r3, [r3, #0]
 800a2ea:	69da      	ldr	r2, [r3, #28]
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	f022 0204 	bic.w	r2, r2, #4
 800a2f4:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800a2f6:	68fb      	ldr	r3, [r7, #12]
 800a2f8:	681b      	ldr	r3, [r3, #0]
 800a2fa:	69d9      	ldr	r1, [r3, #28]
 800a2fc:	68bb      	ldr	r3, [r7, #8]
 800a2fe:	691a      	ldr	r2, [r3, #16]
 800a300:	68fb      	ldr	r3, [r7, #12]
 800a302:	681b      	ldr	r3, [r3, #0]
 800a304:	430a      	orrs	r2, r1
 800a306:	61da      	str	r2, [r3, #28]
      break;
 800a308:	e021      	b.n	800a34e <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800a30a:	68fb      	ldr	r3, [r7, #12]
 800a30c:	681b      	ldr	r3, [r3, #0]
 800a30e:	68b9      	ldr	r1, [r7, #8]
 800a310:	4618      	mov	r0, r3
 800a312:	f000 fb03 	bl	800a91c <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800a316:	68fb      	ldr	r3, [r7, #12]
 800a318:	681b      	ldr	r3, [r3, #0]
 800a31a:	69da      	ldr	r2, [r3, #28]
 800a31c:	68fb      	ldr	r3, [r7, #12]
 800a31e:	681b      	ldr	r3, [r3, #0]
 800a320:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800a324:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	681b      	ldr	r3, [r3, #0]
 800a32a:	69da      	ldr	r2, [r3, #28]
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800a334:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800a336:	68fb      	ldr	r3, [r7, #12]
 800a338:	681b      	ldr	r3, [r3, #0]
 800a33a:	69d9      	ldr	r1, [r3, #28]
 800a33c:	68bb      	ldr	r3, [r7, #8]
 800a33e:	691b      	ldr	r3, [r3, #16]
 800a340:	021a      	lsls	r2, r3, #8
 800a342:	68fb      	ldr	r3, [r7, #12]
 800a344:	681b      	ldr	r3, [r3, #0]
 800a346:	430a      	orrs	r2, r1
 800a348:	61da      	str	r2, [r3, #28]
      break;
 800a34a:	e000      	b.n	800a34e <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 800a34c:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 800a34e:	68fb      	ldr	r3, [r7, #12]
 800a350:	2201      	movs	r2, #1
 800a352:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	2200      	movs	r2, #0
 800a35a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a35e:	2300      	movs	r3, #0
}
 800a360:	4618      	mov	r0, r3
 800a362:	3710      	adds	r7, #16
 800a364:	46bd      	mov	sp, r7
 800a366:	bd80      	pop	{r7, pc}

0800a368 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800a368:	b580      	push	{r7, lr}
 800a36a:	b084      	sub	sp, #16
 800a36c:	af00      	add	r7, sp, #0
 800a36e:	6078      	str	r0, [r7, #4]
 800a370:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800a372:	687b      	ldr	r3, [r7, #4]
 800a374:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800a378:	2b01      	cmp	r3, #1
 800a37a:	d101      	bne.n	800a380 <HAL_TIM_ConfigClockSource+0x18>
 800a37c:	2302      	movs	r3, #2
 800a37e:	e0a6      	b.n	800a4ce <HAL_TIM_ConfigClockSource+0x166>
 800a380:	687b      	ldr	r3, [r7, #4]
 800a382:	2201      	movs	r2, #1
 800a384:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800a388:	687b      	ldr	r3, [r7, #4]
 800a38a:	2202      	movs	r2, #2
 800a38c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800a390:	687b      	ldr	r3, [r7, #4]
 800a392:	681b      	ldr	r3, [r3, #0]
 800a394:	689b      	ldr	r3, [r3, #8]
 800a396:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800a39e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800a3a0:	68fb      	ldr	r3, [r7, #12]
 800a3a2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800a3a6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800a3a8:	687b      	ldr	r3, [r7, #4]
 800a3aa:	681b      	ldr	r3, [r3, #0]
 800a3ac:	68fa      	ldr	r2, [r7, #12]
 800a3ae:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800a3b0:	683b      	ldr	r3, [r7, #0]
 800a3b2:	681b      	ldr	r3, [r3, #0]
 800a3b4:	2b40      	cmp	r3, #64	; 0x40
 800a3b6:	d067      	beq.n	800a488 <HAL_TIM_ConfigClockSource+0x120>
 800a3b8:	2b40      	cmp	r3, #64	; 0x40
 800a3ba:	d80b      	bhi.n	800a3d4 <HAL_TIM_ConfigClockSource+0x6c>
 800a3bc:	2b10      	cmp	r3, #16
 800a3be:	d073      	beq.n	800a4a8 <HAL_TIM_ConfigClockSource+0x140>
 800a3c0:	2b10      	cmp	r3, #16
 800a3c2:	d802      	bhi.n	800a3ca <HAL_TIM_ConfigClockSource+0x62>
 800a3c4:	2b00      	cmp	r3, #0
 800a3c6:	d06f      	beq.n	800a4a8 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800a3c8:	e078      	b.n	800a4bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a3ca:	2b20      	cmp	r3, #32
 800a3cc:	d06c      	beq.n	800a4a8 <HAL_TIM_ConfigClockSource+0x140>
 800a3ce:	2b30      	cmp	r3, #48	; 0x30
 800a3d0:	d06a      	beq.n	800a4a8 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800a3d2:	e073      	b.n	800a4bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a3d4:	2b70      	cmp	r3, #112	; 0x70
 800a3d6:	d00d      	beq.n	800a3f4 <HAL_TIM_ConfigClockSource+0x8c>
 800a3d8:	2b70      	cmp	r3, #112	; 0x70
 800a3da:	d804      	bhi.n	800a3e6 <HAL_TIM_ConfigClockSource+0x7e>
 800a3dc:	2b50      	cmp	r3, #80	; 0x50
 800a3de:	d033      	beq.n	800a448 <HAL_TIM_ConfigClockSource+0xe0>
 800a3e0:	2b60      	cmp	r3, #96	; 0x60
 800a3e2:	d041      	beq.n	800a468 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800a3e4:	e06a      	b.n	800a4bc <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800a3e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a3ea:	d066      	beq.n	800a4ba <HAL_TIM_ConfigClockSource+0x152>
 800a3ec:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a3f0:	d017      	beq.n	800a422 <HAL_TIM_ConfigClockSource+0xba>
      break;
 800a3f2:	e063      	b.n	800a4bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a3f4:	687b      	ldr	r3, [r7, #4]
 800a3f6:	6818      	ldr	r0, [r3, #0]
 800a3f8:	683b      	ldr	r3, [r7, #0]
 800a3fa:	6899      	ldr	r1, [r3, #8]
 800a3fc:	683b      	ldr	r3, [r7, #0]
 800a3fe:	685a      	ldr	r2, [r3, #4]
 800a400:	683b      	ldr	r3, [r7, #0]
 800a402:	68db      	ldr	r3, [r3, #12]
 800a404:	f000 fb5a 	bl	800aabc <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	681b      	ldr	r3, [r3, #0]
 800a40c:	689b      	ldr	r3, [r3, #8]
 800a40e:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800a410:	68fb      	ldr	r3, [r7, #12]
 800a412:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800a416:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	68fa      	ldr	r2, [r7, #12]
 800a41e:	609a      	str	r2, [r3, #8]
      break;
 800a420:	e04c      	b.n	800a4bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800a422:	687b      	ldr	r3, [r7, #4]
 800a424:	6818      	ldr	r0, [r3, #0]
 800a426:	683b      	ldr	r3, [r7, #0]
 800a428:	6899      	ldr	r1, [r3, #8]
 800a42a:	683b      	ldr	r3, [r7, #0]
 800a42c:	685a      	ldr	r2, [r3, #4]
 800a42e:	683b      	ldr	r3, [r7, #0]
 800a430:	68db      	ldr	r3, [r3, #12]
 800a432:	f000 fb43 	bl	800aabc <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800a436:	687b      	ldr	r3, [r7, #4]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	689a      	ldr	r2, [r3, #8]
 800a43c:	687b      	ldr	r3, [r7, #4]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a444:	609a      	str	r2, [r3, #8]
      break;
 800a446:	e039      	b.n	800a4bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a448:	687b      	ldr	r3, [r7, #4]
 800a44a:	6818      	ldr	r0, [r3, #0]
 800a44c:	683b      	ldr	r3, [r7, #0]
 800a44e:	6859      	ldr	r1, [r3, #4]
 800a450:	683b      	ldr	r3, [r7, #0]
 800a452:	68db      	ldr	r3, [r3, #12]
 800a454:	461a      	mov	r2, r3
 800a456:	f000 fab7 	bl	800a9c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800a45a:	687b      	ldr	r3, [r7, #4]
 800a45c:	681b      	ldr	r3, [r3, #0]
 800a45e:	2150      	movs	r1, #80	; 0x50
 800a460:	4618      	mov	r0, r3
 800a462:	f000 fb10 	bl	800aa86 <TIM_ITRx_SetConfig>
      break;
 800a466:	e029      	b.n	800a4bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	6818      	ldr	r0, [r3, #0]
 800a46c:	683b      	ldr	r3, [r7, #0]
 800a46e:	6859      	ldr	r1, [r3, #4]
 800a470:	683b      	ldr	r3, [r7, #0]
 800a472:	68db      	ldr	r3, [r3, #12]
 800a474:	461a      	mov	r2, r3
 800a476:	f000 fad6 	bl	800aa26 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800a47a:	687b      	ldr	r3, [r7, #4]
 800a47c:	681b      	ldr	r3, [r3, #0]
 800a47e:	2160      	movs	r1, #96	; 0x60
 800a480:	4618      	mov	r0, r3
 800a482:	f000 fb00 	bl	800aa86 <TIM_ITRx_SetConfig>
      break;
 800a486:	e019      	b.n	800a4bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6818      	ldr	r0, [r3, #0]
 800a48c:	683b      	ldr	r3, [r7, #0]
 800a48e:	6859      	ldr	r1, [r3, #4]
 800a490:	683b      	ldr	r3, [r7, #0]
 800a492:	68db      	ldr	r3, [r3, #12]
 800a494:	461a      	mov	r2, r3
 800a496:	f000 fa97 	bl	800a9c8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800a49a:	687b      	ldr	r3, [r7, #4]
 800a49c:	681b      	ldr	r3, [r3, #0]
 800a49e:	2140      	movs	r1, #64	; 0x40
 800a4a0:	4618      	mov	r0, r3
 800a4a2:	f000 faf0 	bl	800aa86 <TIM_ITRx_SetConfig>
      break;
 800a4a6:	e009      	b.n	800a4bc <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800a4a8:	687b      	ldr	r3, [r7, #4]
 800a4aa:	681a      	ldr	r2, [r3, #0]
 800a4ac:	683b      	ldr	r3, [r7, #0]
 800a4ae:	681b      	ldr	r3, [r3, #0]
 800a4b0:	4619      	mov	r1, r3
 800a4b2:	4610      	mov	r0, r2
 800a4b4:	f000 fae7 	bl	800aa86 <TIM_ITRx_SetConfig>
      break;
 800a4b8:	e000      	b.n	800a4bc <HAL_TIM_ConfigClockSource+0x154>
      break;
 800a4ba:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	2201      	movs	r2, #1
 800a4c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800a4c4:	687b      	ldr	r3, [r7, #4]
 800a4c6:	2200      	movs	r2, #0
 800a4c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800a4cc:	2300      	movs	r3, #0
}
 800a4ce:	4618      	mov	r0, r3
 800a4d0:	3710      	adds	r7, #16
 800a4d2:	46bd      	mov	sp, r7
 800a4d4:	bd80      	pop	{r7, pc}

0800a4d6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800a4d6:	b480      	push	{r7}
 800a4d8:	b083      	sub	sp, #12
 800a4da:	af00      	add	r7, sp, #0
 800a4dc:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800a4de:	bf00      	nop
 800a4e0:	370c      	adds	r7, #12
 800a4e2:	46bd      	mov	sp, r7
 800a4e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4e8:	4770      	bx	lr

0800a4ea <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800a4ea:	b480      	push	{r7}
 800a4ec:	b083      	sub	sp, #12
 800a4ee:	af00      	add	r7, sp, #0
 800a4f0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800a4f2:	bf00      	nop
 800a4f4:	370c      	adds	r7, #12
 800a4f6:	46bd      	mov	sp, r7
 800a4f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a4fc:	4770      	bx	lr

0800a4fe <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800a4fe:	b480      	push	{r7}
 800a500:	b083      	sub	sp, #12
 800a502:	af00      	add	r7, sp, #0
 800a504:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800a506:	bf00      	nop
 800a508:	370c      	adds	r7, #12
 800a50a:	46bd      	mov	sp, r7
 800a50c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a510:	4770      	bx	lr

0800a512 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800a512:	b480      	push	{r7}
 800a514:	b083      	sub	sp, #12
 800a516:	af00      	add	r7, sp, #0
 800a518:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800a51a:	bf00      	nop
 800a51c:	370c      	adds	r7, #12
 800a51e:	46bd      	mov	sp, r7
 800a520:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a524:	4770      	bx	lr
	...

0800a528 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800a528:	b480      	push	{r7}
 800a52a:	b085      	sub	sp, #20
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
 800a530:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	4a40      	ldr	r2, [pc, #256]	; (800a63c <TIM_Base_SetConfig+0x114>)
 800a53c:	4293      	cmp	r3, r2
 800a53e:	d013      	beq.n	800a568 <TIM_Base_SetConfig+0x40>
 800a540:	687b      	ldr	r3, [r7, #4]
 800a542:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a546:	d00f      	beq.n	800a568 <TIM_Base_SetConfig+0x40>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	4a3d      	ldr	r2, [pc, #244]	; (800a640 <TIM_Base_SetConfig+0x118>)
 800a54c:	4293      	cmp	r3, r2
 800a54e:	d00b      	beq.n	800a568 <TIM_Base_SetConfig+0x40>
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	4a3c      	ldr	r2, [pc, #240]	; (800a644 <TIM_Base_SetConfig+0x11c>)
 800a554:	4293      	cmp	r3, r2
 800a556:	d007      	beq.n	800a568 <TIM_Base_SetConfig+0x40>
 800a558:	687b      	ldr	r3, [r7, #4]
 800a55a:	4a3b      	ldr	r2, [pc, #236]	; (800a648 <TIM_Base_SetConfig+0x120>)
 800a55c:	4293      	cmp	r3, r2
 800a55e:	d003      	beq.n	800a568 <TIM_Base_SetConfig+0x40>
 800a560:	687b      	ldr	r3, [r7, #4]
 800a562:	4a3a      	ldr	r2, [pc, #232]	; (800a64c <TIM_Base_SetConfig+0x124>)
 800a564:	4293      	cmp	r3, r2
 800a566:	d108      	bne.n	800a57a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800a568:	68fb      	ldr	r3, [r7, #12]
 800a56a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a56e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800a570:	683b      	ldr	r3, [r7, #0]
 800a572:	685b      	ldr	r3, [r3, #4]
 800a574:	68fa      	ldr	r2, [r7, #12]
 800a576:	4313      	orrs	r3, r2
 800a578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800a57a:	687b      	ldr	r3, [r7, #4]
 800a57c:	4a2f      	ldr	r2, [pc, #188]	; (800a63c <TIM_Base_SetConfig+0x114>)
 800a57e:	4293      	cmp	r3, r2
 800a580:	d02b      	beq.n	800a5da <TIM_Base_SetConfig+0xb2>
 800a582:	687b      	ldr	r3, [r7, #4]
 800a584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800a588:	d027      	beq.n	800a5da <TIM_Base_SetConfig+0xb2>
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	4a2c      	ldr	r2, [pc, #176]	; (800a640 <TIM_Base_SetConfig+0x118>)
 800a58e:	4293      	cmp	r3, r2
 800a590:	d023      	beq.n	800a5da <TIM_Base_SetConfig+0xb2>
 800a592:	687b      	ldr	r3, [r7, #4]
 800a594:	4a2b      	ldr	r2, [pc, #172]	; (800a644 <TIM_Base_SetConfig+0x11c>)
 800a596:	4293      	cmp	r3, r2
 800a598:	d01f      	beq.n	800a5da <TIM_Base_SetConfig+0xb2>
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	4a2a      	ldr	r2, [pc, #168]	; (800a648 <TIM_Base_SetConfig+0x120>)
 800a59e:	4293      	cmp	r3, r2
 800a5a0:	d01b      	beq.n	800a5da <TIM_Base_SetConfig+0xb2>
 800a5a2:	687b      	ldr	r3, [r7, #4]
 800a5a4:	4a29      	ldr	r2, [pc, #164]	; (800a64c <TIM_Base_SetConfig+0x124>)
 800a5a6:	4293      	cmp	r3, r2
 800a5a8:	d017      	beq.n	800a5da <TIM_Base_SetConfig+0xb2>
 800a5aa:	687b      	ldr	r3, [r7, #4]
 800a5ac:	4a28      	ldr	r2, [pc, #160]	; (800a650 <TIM_Base_SetConfig+0x128>)
 800a5ae:	4293      	cmp	r3, r2
 800a5b0:	d013      	beq.n	800a5da <TIM_Base_SetConfig+0xb2>
 800a5b2:	687b      	ldr	r3, [r7, #4]
 800a5b4:	4a27      	ldr	r2, [pc, #156]	; (800a654 <TIM_Base_SetConfig+0x12c>)
 800a5b6:	4293      	cmp	r3, r2
 800a5b8:	d00f      	beq.n	800a5da <TIM_Base_SetConfig+0xb2>
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	4a26      	ldr	r2, [pc, #152]	; (800a658 <TIM_Base_SetConfig+0x130>)
 800a5be:	4293      	cmp	r3, r2
 800a5c0:	d00b      	beq.n	800a5da <TIM_Base_SetConfig+0xb2>
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	4a25      	ldr	r2, [pc, #148]	; (800a65c <TIM_Base_SetConfig+0x134>)
 800a5c6:	4293      	cmp	r3, r2
 800a5c8:	d007      	beq.n	800a5da <TIM_Base_SetConfig+0xb2>
 800a5ca:	687b      	ldr	r3, [r7, #4]
 800a5cc:	4a24      	ldr	r2, [pc, #144]	; (800a660 <TIM_Base_SetConfig+0x138>)
 800a5ce:	4293      	cmp	r3, r2
 800a5d0:	d003      	beq.n	800a5da <TIM_Base_SetConfig+0xb2>
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	4a23      	ldr	r2, [pc, #140]	; (800a664 <TIM_Base_SetConfig+0x13c>)
 800a5d6:	4293      	cmp	r3, r2
 800a5d8:	d108      	bne.n	800a5ec <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800a5da:	68fb      	ldr	r3, [r7, #12]
 800a5dc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a5e0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800a5e2:	683b      	ldr	r3, [r7, #0]
 800a5e4:	68db      	ldr	r3, [r3, #12]
 800a5e6:	68fa      	ldr	r2, [r7, #12]
 800a5e8:	4313      	orrs	r3, r2
 800a5ea:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800a5ec:	68fb      	ldr	r3, [r7, #12]
 800a5ee:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800a5f2:	683b      	ldr	r3, [r7, #0]
 800a5f4:	695b      	ldr	r3, [r3, #20]
 800a5f6:	4313      	orrs	r3, r2
 800a5f8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	68fa      	ldr	r2, [r7, #12]
 800a5fe:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800a600:	683b      	ldr	r3, [r7, #0]
 800a602:	689a      	ldr	r2, [r3, #8]
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800a608:	683b      	ldr	r3, [r7, #0]
 800a60a:	681a      	ldr	r2, [r3, #0]
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	4a0a      	ldr	r2, [pc, #40]	; (800a63c <TIM_Base_SetConfig+0x114>)
 800a614:	4293      	cmp	r3, r2
 800a616:	d003      	beq.n	800a620 <TIM_Base_SetConfig+0xf8>
 800a618:	687b      	ldr	r3, [r7, #4]
 800a61a:	4a0c      	ldr	r2, [pc, #48]	; (800a64c <TIM_Base_SetConfig+0x124>)
 800a61c:	4293      	cmp	r3, r2
 800a61e:	d103      	bne.n	800a628 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800a620:	683b      	ldr	r3, [r7, #0]
 800a622:	691a      	ldr	r2, [r3, #16]
 800a624:	687b      	ldr	r3, [r7, #4]
 800a626:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800a628:	687b      	ldr	r3, [r7, #4]
 800a62a:	2201      	movs	r2, #1
 800a62c:	615a      	str	r2, [r3, #20]
}
 800a62e:	bf00      	nop
 800a630:	3714      	adds	r7, #20
 800a632:	46bd      	mov	sp, r7
 800a634:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a638:	4770      	bx	lr
 800a63a:	bf00      	nop
 800a63c:	40010000 	.word	0x40010000
 800a640:	40000400 	.word	0x40000400
 800a644:	40000800 	.word	0x40000800
 800a648:	40000c00 	.word	0x40000c00
 800a64c:	40010400 	.word	0x40010400
 800a650:	40014000 	.word	0x40014000
 800a654:	40014400 	.word	0x40014400
 800a658:	40014800 	.word	0x40014800
 800a65c:	40001800 	.word	0x40001800
 800a660:	40001c00 	.word	0x40001c00
 800a664:	40002000 	.word	0x40002000

0800a668 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a668:	b480      	push	{r7}
 800a66a:	b087      	sub	sp, #28
 800a66c:	af00      	add	r7, sp, #0
 800a66e:	6078      	str	r0, [r7, #4]
 800a670:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a1b      	ldr	r3, [r3, #32]
 800a676:	f023 0201 	bic.w	r2, r3, #1
 800a67a:	687b      	ldr	r3, [r7, #4]
 800a67c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a67e:	687b      	ldr	r3, [r7, #4]
 800a680:	6a1b      	ldr	r3, [r3, #32]
 800a682:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a684:	687b      	ldr	r3, [r7, #4]
 800a686:	685b      	ldr	r3, [r3, #4]
 800a688:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a68a:	687b      	ldr	r3, [r7, #4]
 800a68c:	699b      	ldr	r3, [r3, #24]
 800a68e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 800a690:	68fb      	ldr	r3, [r7, #12]
 800a692:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a696:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800a698:	68fb      	ldr	r3, [r7, #12]
 800a69a:	f023 0303 	bic.w	r3, r3, #3
 800a69e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a6a0:	683b      	ldr	r3, [r7, #0]
 800a6a2:	681b      	ldr	r3, [r3, #0]
 800a6a4:	68fa      	ldr	r2, [r7, #12]
 800a6a6:	4313      	orrs	r3, r2
 800a6a8:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800a6aa:	697b      	ldr	r3, [r7, #20]
 800a6ac:	f023 0302 	bic.w	r3, r3, #2
 800a6b0:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800a6b2:	683b      	ldr	r3, [r7, #0]
 800a6b4:	689b      	ldr	r3, [r3, #8]
 800a6b6:	697a      	ldr	r2, [r7, #20]
 800a6b8:	4313      	orrs	r3, r2
 800a6ba:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	4a20      	ldr	r2, [pc, #128]	; (800a740 <TIM_OC1_SetConfig+0xd8>)
 800a6c0:	4293      	cmp	r3, r2
 800a6c2:	d003      	beq.n	800a6cc <TIM_OC1_SetConfig+0x64>
 800a6c4:	687b      	ldr	r3, [r7, #4]
 800a6c6:	4a1f      	ldr	r2, [pc, #124]	; (800a744 <TIM_OC1_SetConfig+0xdc>)
 800a6c8:	4293      	cmp	r3, r2
 800a6ca:	d10c      	bne.n	800a6e6 <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800a6cc:	697b      	ldr	r3, [r7, #20]
 800a6ce:	f023 0308 	bic.w	r3, r3, #8
 800a6d2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800a6d4:	683b      	ldr	r3, [r7, #0]
 800a6d6:	68db      	ldr	r3, [r3, #12]
 800a6d8:	697a      	ldr	r2, [r7, #20]
 800a6da:	4313      	orrs	r3, r2
 800a6dc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800a6de:	697b      	ldr	r3, [r7, #20]
 800a6e0:	f023 0304 	bic.w	r3, r3, #4
 800a6e4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a6e6:	687b      	ldr	r3, [r7, #4]
 800a6e8:	4a15      	ldr	r2, [pc, #84]	; (800a740 <TIM_OC1_SetConfig+0xd8>)
 800a6ea:	4293      	cmp	r3, r2
 800a6ec:	d003      	beq.n	800a6f6 <TIM_OC1_SetConfig+0x8e>
 800a6ee:	687b      	ldr	r3, [r7, #4]
 800a6f0:	4a14      	ldr	r2, [pc, #80]	; (800a744 <TIM_OC1_SetConfig+0xdc>)
 800a6f2:	4293      	cmp	r3, r2
 800a6f4:	d111      	bne.n	800a71a <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800a6f6:	693b      	ldr	r3, [r7, #16]
 800a6f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a6fc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 800a6fe:	693b      	ldr	r3, [r7, #16]
 800a700:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a704:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800a706:	683b      	ldr	r3, [r7, #0]
 800a708:	695b      	ldr	r3, [r3, #20]
 800a70a:	693a      	ldr	r2, [r7, #16]
 800a70c:	4313      	orrs	r3, r2
 800a70e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 800a710:	683b      	ldr	r3, [r7, #0]
 800a712:	699b      	ldr	r3, [r3, #24]
 800a714:	693a      	ldr	r2, [r7, #16]
 800a716:	4313      	orrs	r3, r2
 800a718:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	693a      	ldr	r2, [r7, #16]
 800a71e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a720:	687b      	ldr	r3, [r7, #4]
 800a722:	68fa      	ldr	r2, [r7, #12]
 800a724:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800a726:	683b      	ldr	r3, [r7, #0]
 800a728:	685a      	ldr	r2, [r3, #4]
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a72e:	687b      	ldr	r3, [r7, #4]
 800a730:	697a      	ldr	r2, [r7, #20]
 800a732:	621a      	str	r2, [r3, #32]
}
 800a734:	bf00      	nop
 800a736:	371c      	adds	r7, #28
 800a738:	46bd      	mov	sp, r7
 800a73a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a73e:	4770      	bx	lr
 800a740:	40010000 	.word	0x40010000
 800a744:	40010400 	.word	0x40010400

0800a748 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a748:	b480      	push	{r7}
 800a74a:	b087      	sub	sp, #28
 800a74c:	af00      	add	r7, sp, #0
 800a74e:	6078      	str	r0, [r7, #4]
 800a750:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800a752:	687b      	ldr	r3, [r7, #4]
 800a754:	6a1b      	ldr	r3, [r3, #32]
 800a756:	f023 0210 	bic.w	r2, r3, #16
 800a75a:	687b      	ldr	r3, [r7, #4]
 800a75c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a75e:	687b      	ldr	r3, [r7, #4]
 800a760:	6a1b      	ldr	r3, [r3, #32]
 800a762:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a764:	687b      	ldr	r3, [r7, #4]
 800a766:	685b      	ldr	r3, [r3, #4]
 800a768:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800a76a:	687b      	ldr	r3, [r7, #4]
 800a76c:	699b      	ldr	r3, [r3, #24]
 800a76e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a776:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800a778:	68fb      	ldr	r3, [r7, #12]
 800a77a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a77e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a780:	683b      	ldr	r3, [r7, #0]
 800a782:	681b      	ldr	r3, [r3, #0]
 800a784:	021b      	lsls	r3, r3, #8
 800a786:	68fa      	ldr	r2, [r7, #12]
 800a788:	4313      	orrs	r3, r2
 800a78a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800a78c:	697b      	ldr	r3, [r7, #20]
 800a78e:	f023 0320 	bic.w	r3, r3, #32
 800a792:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800a794:	683b      	ldr	r3, [r7, #0]
 800a796:	689b      	ldr	r3, [r3, #8]
 800a798:	011b      	lsls	r3, r3, #4
 800a79a:	697a      	ldr	r2, [r7, #20]
 800a79c:	4313      	orrs	r3, r2
 800a79e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 800a7a0:	687b      	ldr	r3, [r7, #4]
 800a7a2:	4a22      	ldr	r2, [pc, #136]	; (800a82c <TIM_OC2_SetConfig+0xe4>)
 800a7a4:	4293      	cmp	r3, r2
 800a7a6:	d003      	beq.n	800a7b0 <TIM_OC2_SetConfig+0x68>
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	4a21      	ldr	r2, [pc, #132]	; (800a830 <TIM_OC2_SetConfig+0xe8>)
 800a7ac:	4293      	cmp	r3, r2
 800a7ae:	d10d      	bne.n	800a7cc <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800a7b0:	697b      	ldr	r3, [r7, #20]
 800a7b2:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800a7b6:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 800a7b8:	683b      	ldr	r3, [r7, #0]
 800a7ba:	68db      	ldr	r3, [r3, #12]
 800a7bc:	011b      	lsls	r3, r3, #4
 800a7be:	697a      	ldr	r2, [r7, #20]
 800a7c0:	4313      	orrs	r3, r2
 800a7c2:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800a7c4:	697b      	ldr	r3, [r7, #20]
 800a7c6:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a7ca:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a7cc:	687b      	ldr	r3, [r7, #4]
 800a7ce:	4a17      	ldr	r2, [pc, #92]	; (800a82c <TIM_OC2_SetConfig+0xe4>)
 800a7d0:	4293      	cmp	r3, r2
 800a7d2:	d003      	beq.n	800a7dc <TIM_OC2_SetConfig+0x94>
 800a7d4:	687b      	ldr	r3, [r7, #4]
 800a7d6:	4a16      	ldr	r2, [pc, #88]	; (800a830 <TIM_OC2_SetConfig+0xe8>)
 800a7d8:	4293      	cmp	r3, r2
 800a7da:	d113      	bne.n	800a804 <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800a7dc:	693b      	ldr	r3, [r7, #16]
 800a7de:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a7e2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a7ea:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800a7ec:	683b      	ldr	r3, [r7, #0]
 800a7ee:	695b      	ldr	r3, [r3, #20]
 800a7f0:	009b      	lsls	r3, r3, #2
 800a7f2:	693a      	ldr	r2, [r7, #16]
 800a7f4:	4313      	orrs	r3, r2
 800a7f6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800a7f8:	683b      	ldr	r3, [r7, #0]
 800a7fa:	699b      	ldr	r3, [r3, #24]
 800a7fc:	009b      	lsls	r3, r3, #2
 800a7fe:	693a      	ldr	r2, [r7, #16]
 800a800:	4313      	orrs	r3, r2
 800a802:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	693a      	ldr	r2, [r7, #16]
 800a808:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800a80a:	687b      	ldr	r3, [r7, #4]
 800a80c:	68fa      	ldr	r2, [r7, #12]
 800a80e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 800a810:	683b      	ldr	r3, [r7, #0]
 800a812:	685a      	ldr	r2, [r3, #4]
 800a814:	687b      	ldr	r3, [r7, #4]
 800a816:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	697a      	ldr	r2, [r7, #20]
 800a81c:	621a      	str	r2, [r3, #32]
}
 800a81e:	bf00      	nop
 800a820:	371c      	adds	r7, #28
 800a822:	46bd      	mov	sp, r7
 800a824:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a828:	4770      	bx	lr
 800a82a:	bf00      	nop
 800a82c:	40010000 	.word	0x40010000
 800a830:	40010400 	.word	0x40010400

0800a834 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a834:	b480      	push	{r7}
 800a836:	b087      	sub	sp, #28
 800a838:	af00      	add	r7, sp, #0
 800a83a:	6078      	str	r0, [r7, #4]
 800a83c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800a83e:	687b      	ldr	r3, [r7, #4]
 800a840:	6a1b      	ldr	r3, [r3, #32]
 800a842:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800a846:	687b      	ldr	r3, [r7, #4]
 800a848:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a84a:	687b      	ldr	r3, [r7, #4]
 800a84c:	6a1b      	ldr	r3, [r3, #32]
 800a84e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a850:	687b      	ldr	r3, [r7, #4]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	69db      	ldr	r3, [r3, #28]
 800a85a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800a85c:	68fb      	ldr	r3, [r7, #12]
 800a85e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800a862:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 800a864:	68fb      	ldr	r3, [r7, #12]
 800a866:	f023 0303 	bic.w	r3, r3, #3
 800a86a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800a86c:	683b      	ldr	r3, [r7, #0]
 800a86e:	681b      	ldr	r3, [r3, #0]
 800a870:	68fa      	ldr	r2, [r7, #12]
 800a872:	4313      	orrs	r3, r2
 800a874:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 800a876:	697b      	ldr	r3, [r7, #20]
 800a878:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800a87c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800a87e:	683b      	ldr	r3, [r7, #0]
 800a880:	689b      	ldr	r3, [r3, #8]
 800a882:	021b      	lsls	r3, r3, #8
 800a884:	697a      	ldr	r2, [r7, #20]
 800a886:	4313      	orrs	r3, r2
 800a888:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800a88a:	687b      	ldr	r3, [r7, #4]
 800a88c:	4a21      	ldr	r2, [pc, #132]	; (800a914 <TIM_OC3_SetConfig+0xe0>)
 800a88e:	4293      	cmp	r3, r2
 800a890:	d003      	beq.n	800a89a <TIM_OC3_SetConfig+0x66>
 800a892:	687b      	ldr	r3, [r7, #4]
 800a894:	4a20      	ldr	r2, [pc, #128]	; (800a918 <TIM_OC3_SetConfig+0xe4>)
 800a896:	4293      	cmp	r3, r2
 800a898:	d10d      	bne.n	800a8b6 <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800a89a:	697b      	ldr	r3, [r7, #20]
 800a89c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800a8a0:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800a8a2:	683b      	ldr	r3, [r7, #0]
 800a8a4:	68db      	ldr	r3, [r3, #12]
 800a8a6:	021b      	lsls	r3, r3, #8
 800a8a8:	697a      	ldr	r2, [r7, #20]
 800a8aa:	4313      	orrs	r3, r2
 800a8ac:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 800a8ae:	697b      	ldr	r3, [r7, #20]
 800a8b0:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800a8b4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a8b6:	687b      	ldr	r3, [r7, #4]
 800a8b8:	4a16      	ldr	r2, [pc, #88]	; (800a914 <TIM_OC3_SetConfig+0xe0>)
 800a8ba:	4293      	cmp	r3, r2
 800a8bc:	d003      	beq.n	800a8c6 <TIM_OC3_SetConfig+0x92>
 800a8be:	687b      	ldr	r3, [r7, #4]
 800a8c0:	4a15      	ldr	r2, [pc, #84]	; (800a918 <TIM_OC3_SetConfig+0xe4>)
 800a8c2:	4293      	cmp	r3, r2
 800a8c4:	d113      	bne.n	800a8ee <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800a8c6:	693b      	ldr	r3, [r7, #16]
 800a8c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800a8cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800a8ce:	693b      	ldr	r3, [r7, #16]
 800a8d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a8d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800a8d6:	683b      	ldr	r3, [r7, #0]
 800a8d8:	695b      	ldr	r3, [r3, #20]
 800a8da:	011b      	lsls	r3, r3, #4
 800a8dc:	693a      	ldr	r2, [r7, #16]
 800a8de:	4313      	orrs	r3, r2
 800a8e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800a8e2:	683b      	ldr	r3, [r7, #0]
 800a8e4:	699b      	ldr	r3, [r3, #24]
 800a8e6:	011b      	lsls	r3, r3, #4
 800a8e8:	693a      	ldr	r2, [r7, #16]
 800a8ea:	4313      	orrs	r3, r2
 800a8ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a8ee:	687b      	ldr	r3, [r7, #4]
 800a8f0:	693a      	ldr	r2, [r7, #16]
 800a8f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a8f4:	687b      	ldr	r3, [r7, #4]
 800a8f6:	68fa      	ldr	r2, [r7, #12]
 800a8f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800a8fa:	683b      	ldr	r3, [r7, #0]
 800a8fc:	685a      	ldr	r2, [r3, #4]
 800a8fe:	687b      	ldr	r3, [r7, #4]
 800a900:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a902:	687b      	ldr	r3, [r7, #4]
 800a904:	697a      	ldr	r2, [r7, #20]
 800a906:	621a      	str	r2, [r3, #32]
}
 800a908:	bf00      	nop
 800a90a:	371c      	adds	r7, #28
 800a90c:	46bd      	mov	sp, r7
 800a90e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a912:	4770      	bx	lr
 800a914:	40010000 	.word	0x40010000
 800a918:	40010400 	.word	0x40010400

0800a91c <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800a91c:	b480      	push	{r7}
 800a91e:	b087      	sub	sp, #28
 800a920:	af00      	add	r7, sp, #0
 800a922:	6078      	str	r0, [r7, #4]
 800a924:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800a926:	687b      	ldr	r3, [r7, #4]
 800a928:	6a1b      	ldr	r3, [r3, #32]
 800a92a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800a92e:	687b      	ldr	r3, [r7, #4]
 800a930:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800a932:	687b      	ldr	r3, [r7, #4]
 800a934:	6a1b      	ldr	r3, [r3, #32]
 800a936:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800a938:	687b      	ldr	r3, [r7, #4]
 800a93a:	685b      	ldr	r3, [r3, #4]
 800a93c:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800a93e:	687b      	ldr	r3, [r7, #4]
 800a940:	69db      	ldr	r3, [r3, #28]
 800a942:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800a944:	68fb      	ldr	r3, [r7, #12]
 800a946:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800a94a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 800a94c:	68fb      	ldr	r3, [r7, #12]
 800a94e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a952:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800a954:	683b      	ldr	r3, [r7, #0]
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	021b      	lsls	r3, r3, #8
 800a95a:	68fa      	ldr	r2, [r7, #12]
 800a95c:	4313      	orrs	r3, r2
 800a95e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800a960:	693b      	ldr	r3, [r7, #16]
 800a962:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800a966:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 800a968:	683b      	ldr	r3, [r7, #0]
 800a96a:	689b      	ldr	r3, [r3, #8]
 800a96c:	031b      	lsls	r3, r3, #12
 800a96e:	693a      	ldr	r2, [r7, #16]
 800a970:	4313      	orrs	r3, r2
 800a972:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800a974:	687b      	ldr	r3, [r7, #4]
 800a976:	4a12      	ldr	r2, [pc, #72]	; (800a9c0 <TIM_OC4_SetConfig+0xa4>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d003      	beq.n	800a984 <TIM_OC4_SetConfig+0x68>
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	4a11      	ldr	r2, [pc, #68]	; (800a9c4 <TIM_OC4_SetConfig+0xa8>)
 800a980:	4293      	cmp	r3, r2
 800a982:	d109      	bne.n	800a998 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800a984:	697b      	ldr	r3, [r7, #20]
 800a986:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800a98a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800a98c:	683b      	ldr	r3, [r7, #0]
 800a98e:	695b      	ldr	r3, [r3, #20]
 800a990:	019b      	lsls	r3, r3, #6
 800a992:	697a      	ldr	r2, [r7, #20]
 800a994:	4313      	orrs	r3, r2
 800a996:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800a998:	687b      	ldr	r3, [r7, #4]
 800a99a:	697a      	ldr	r2, [r7, #20]
 800a99c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800a99e:	687b      	ldr	r3, [r7, #4]
 800a9a0:	68fa      	ldr	r2, [r7, #12]
 800a9a2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800a9a4:	683b      	ldr	r3, [r7, #0]
 800a9a6:	685a      	ldr	r2, [r3, #4]
 800a9a8:	687b      	ldr	r3, [r7, #4]
 800a9aa:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	693a      	ldr	r2, [r7, #16]
 800a9b0:	621a      	str	r2, [r3, #32]
}
 800a9b2:	bf00      	nop
 800a9b4:	371c      	adds	r7, #28
 800a9b6:	46bd      	mov	sp, r7
 800a9b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a9bc:	4770      	bx	lr
 800a9be:	bf00      	nop
 800a9c0:	40010000 	.word	0x40010000
 800a9c4:	40010400 	.word	0x40010400

0800a9c8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800a9c8:	b480      	push	{r7}
 800a9ca:	b087      	sub	sp, #28
 800a9cc:	af00      	add	r7, sp, #0
 800a9ce:	60f8      	str	r0, [r7, #12]
 800a9d0:	60b9      	str	r1, [r7, #8]
 800a9d2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800a9d4:	68fb      	ldr	r3, [r7, #12]
 800a9d6:	6a1b      	ldr	r3, [r3, #32]
 800a9d8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800a9da:	68fb      	ldr	r3, [r7, #12]
 800a9dc:	6a1b      	ldr	r3, [r3, #32]
 800a9de:	f023 0201 	bic.w	r2, r3, #1
 800a9e2:	68fb      	ldr	r3, [r7, #12]
 800a9e4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	699b      	ldr	r3, [r3, #24]
 800a9ea:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800a9ec:	693b      	ldr	r3, [r7, #16]
 800a9ee:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800a9f2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800a9f4:	687b      	ldr	r3, [r7, #4]
 800a9f6:	011b      	lsls	r3, r3, #4
 800a9f8:	693a      	ldr	r2, [r7, #16]
 800a9fa:	4313      	orrs	r3, r2
 800a9fc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800a9fe:	697b      	ldr	r3, [r7, #20]
 800aa00:	f023 030a 	bic.w	r3, r3, #10
 800aa04:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800aa06:	697a      	ldr	r2, [r7, #20]
 800aa08:	68bb      	ldr	r3, [r7, #8]
 800aa0a:	4313      	orrs	r3, r2
 800aa0c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800aa0e:	68fb      	ldr	r3, [r7, #12]
 800aa10:	693a      	ldr	r2, [r7, #16]
 800aa12:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa14:	68fb      	ldr	r3, [r7, #12]
 800aa16:	697a      	ldr	r2, [r7, #20]
 800aa18:	621a      	str	r2, [r3, #32]
}
 800aa1a:	bf00      	nop
 800aa1c:	371c      	adds	r7, #28
 800aa1e:	46bd      	mov	sp, r7
 800aa20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa24:	4770      	bx	lr

0800aa26 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800aa26:	b480      	push	{r7}
 800aa28:	b087      	sub	sp, #28
 800aa2a:	af00      	add	r7, sp, #0
 800aa2c:	60f8      	str	r0, [r7, #12]
 800aa2e:	60b9      	str	r1, [r7, #8]
 800aa30:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800aa32:	68fb      	ldr	r3, [r7, #12]
 800aa34:	6a1b      	ldr	r3, [r3, #32]
 800aa36:	f023 0210 	bic.w	r2, r3, #16
 800aa3a:	68fb      	ldr	r3, [r7, #12]
 800aa3c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	699b      	ldr	r3, [r3, #24]
 800aa42:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800aa44:	68fb      	ldr	r3, [r7, #12]
 800aa46:	6a1b      	ldr	r3, [r3, #32]
 800aa48:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800aa50:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800aa52:	687b      	ldr	r3, [r7, #4]
 800aa54:	031b      	lsls	r3, r3, #12
 800aa56:	697a      	ldr	r2, [r7, #20]
 800aa58:	4313      	orrs	r3, r2
 800aa5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800aa5c:	693b      	ldr	r3, [r7, #16]
 800aa5e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800aa62:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800aa64:	68bb      	ldr	r3, [r7, #8]
 800aa66:	011b      	lsls	r3, r3, #4
 800aa68:	693a      	ldr	r2, [r7, #16]
 800aa6a:	4313      	orrs	r3, r2
 800aa6c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800aa6e:	68fb      	ldr	r3, [r7, #12]
 800aa70:	697a      	ldr	r2, [r7, #20]
 800aa72:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	693a      	ldr	r2, [r7, #16]
 800aa78:	621a      	str	r2, [r3, #32]
}
 800aa7a:	bf00      	nop
 800aa7c:	371c      	adds	r7, #28
 800aa7e:	46bd      	mov	sp, r7
 800aa80:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aa84:	4770      	bx	lr

0800aa86 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800aa86:	b480      	push	{r7}
 800aa88:	b085      	sub	sp, #20
 800aa8a:	af00      	add	r7, sp, #0
 800aa8c:	6078      	str	r0, [r7, #4]
 800aa8e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800aa90:	687b      	ldr	r3, [r7, #4]
 800aa92:	689b      	ldr	r3, [r3, #8]
 800aa94:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800aa9c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800aa9e:	683a      	ldr	r2, [r7, #0]
 800aaa0:	68fb      	ldr	r3, [r7, #12]
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	f043 0307 	orr.w	r3, r3, #7
 800aaa8:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aaaa:	687b      	ldr	r3, [r7, #4]
 800aaac:	68fa      	ldr	r2, [r7, #12]
 800aaae:	609a      	str	r2, [r3, #8]
}
 800aab0:	bf00      	nop
 800aab2:	3714      	adds	r7, #20
 800aab4:	46bd      	mov	sp, r7
 800aab6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aaba:	4770      	bx	lr

0800aabc <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800aabc:	b480      	push	{r7}
 800aabe:	b087      	sub	sp, #28
 800aac0:	af00      	add	r7, sp, #0
 800aac2:	60f8      	str	r0, [r7, #12]
 800aac4:	60b9      	str	r1, [r7, #8]
 800aac6:	607a      	str	r2, [r7, #4]
 800aac8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800aaca:	68fb      	ldr	r3, [r7, #12]
 800aacc:	689b      	ldr	r3, [r3, #8]
 800aace:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800aad0:	697b      	ldr	r3, [r7, #20]
 800aad2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800aad6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800aad8:	683b      	ldr	r3, [r7, #0]
 800aada:	021a      	lsls	r2, r3, #8
 800aadc:	687b      	ldr	r3, [r7, #4]
 800aade:	431a      	orrs	r2, r3
 800aae0:	68bb      	ldr	r3, [r7, #8]
 800aae2:	4313      	orrs	r3, r2
 800aae4:	697a      	ldr	r2, [r7, #20]
 800aae6:	4313      	orrs	r3, r2
 800aae8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	697a      	ldr	r2, [r7, #20]
 800aaee:	609a      	str	r2, [r3, #8]
}
 800aaf0:	bf00      	nop
 800aaf2:	371c      	adds	r7, #28
 800aaf4:	46bd      	mov	sp, r7
 800aaf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800aafa:	4770      	bx	lr

0800aafc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800aafc:	b480      	push	{r7}
 800aafe:	b087      	sub	sp, #28
 800ab00:	af00      	add	r7, sp, #0
 800ab02:	60f8      	str	r0, [r7, #12]
 800ab04:	60b9      	str	r1, [r7, #8]
 800ab06:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800ab08:	68bb      	ldr	r3, [r7, #8]
 800ab0a:	f003 031f 	and.w	r3, r3, #31
 800ab0e:	2201      	movs	r2, #1
 800ab10:	fa02 f303 	lsl.w	r3, r2, r3
 800ab14:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800ab16:	68fb      	ldr	r3, [r7, #12]
 800ab18:	6a1a      	ldr	r2, [r3, #32]
 800ab1a:	697b      	ldr	r3, [r7, #20]
 800ab1c:	43db      	mvns	r3, r3
 800ab1e:	401a      	ands	r2, r3
 800ab20:	68fb      	ldr	r3, [r7, #12]
 800ab22:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800ab24:	68fb      	ldr	r3, [r7, #12]
 800ab26:	6a1a      	ldr	r2, [r3, #32]
 800ab28:	68bb      	ldr	r3, [r7, #8]
 800ab2a:	f003 031f 	and.w	r3, r3, #31
 800ab2e:	6879      	ldr	r1, [r7, #4]
 800ab30:	fa01 f303 	lsl.w	r3, r1, r3
 800ab34:	431a      	orrs	r2, r3
 800ab36:	68fb      	ldr	r3, [r7, #12]
 800ab38:	621a      	str	r2, [r3, #32]
}
 800ab3a:	bf00      	nop
 800ab3c:	371c      	adds	r7, #28
 800ab3e:	46bd      	mov	sp, r7
 800ab40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ab44:	4770      	bx	lr
	...

0800ab48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800ab48:	b480      	push	{r7}
 800ab4a:	b085      	sub	sp, #20
 800ab4c:	af00      	add	r7, sp, #0
 800ab4e:	6078      	str	r0, [r7, #4]
 800ab50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800ab52:	687b      	ldr	r3, [r7, #4]
 800ab54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800ab58:	2b01      	cmp	r3, #1
 800ab5a:	d101      	bne.n	800ab60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800ab5c:	2302      	movs	r3, #2
 800ab5e:	e05a      	b.n	800ac16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 800ab60:	687b      	ldr	r3, [r7, #4]
 800ab62:	2201      	movs	r2, #1
 800ab64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800ab68:	687b      	ldr	r3, [r7, #4]
 800ab6a:	2202      	movs	r2, #2
 800ab6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800ab70:	687b      	ldr	r3, [r7, #4]
 800ab72:	681b      	ldr	r3, [r3, #0]
 800ab74:	685b      	ldr	r3, [r3, #4]
 800ab76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	689b      	ldr	r3, [r3, #8]
 800ab7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800ab80:	68fb      	ldr	r3, [r7, #12]
 800ab82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800ab86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800ab88:	683b      	ldr	r3, [r7, #0]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	68fa      	ldr	r2, [r7, #12]
 800ab8e:	4313      	orrs	r3, r2
 800ab90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800ab92:	687b      	ldr	r3, [r7, #4]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	68fa      	ldr	r2, [r7, #12]
 800ab98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800ab9a:	687b      	ldr	r3, [r7, #4]
 800ab9c:	681b      	ldr	r3, [r3, #0]
 800ab9e:	4a21      	ldr	r2, [pc, #132]	; (800ac24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 800aba0:	4293      	cmp	r3, r2
 800aba2:	d022      	beq.n	800abea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800aba4:	687b      	ldr	r3, [r7, #4]
 800aba6:	681b      	ldr	r3, [r3, #0]
 800aba8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800abac:	d01d      	beq.n	800abea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abae:	687b      	ldr	r3, [r7, #4]
 800abb0:	681b      	ldr	r3, [r3, #0]
 800abb2:	4a1d      	ldr	r2, [pc, #116]	; (800ac28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800abb4:	4293      	cmp	r3, r2
 800abb6:	d018      	beq.n	800abea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abb8:	687b      	ldr	r3, [r7, #4]
 800abba:	681b      	ldr	r3, [r3, #0]
 800abbc:	4a1b      	ldr	r2, [pc, #108]	; (800ac2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800abbe:	4293      	cmp	r3, r2
 800abc0:	d013      	beq.n	800abea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abc2:	687b      	ldr	r3, [r7, #4]
 800abc4:	681b      	ldr	r3, [r3, #0]
 800abc6:	4a1a      	ldr	r2, [pc, #104]	; (800ac30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 800abc8:	4293      	cmp	r3, r2
 800abca:	d00e      	beq.n	800abea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abcc:	687b      	ldr	r3, [r7, #4]
 800abce:	681b      	ldr	r3, [r3, #0]
 800abd0:	4a18      	ldr	r2, [pc, #96]	; (800ac34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 800abd2:	4293      	cmp	r3, r2
 800abd4:	d009      	beq.n	800abea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	4a17      	ldr	r2, [pc, #92]	; (800ac38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800abdc:	4293      	cmp	r3, r2
 800abde:	d004      	beq.n	800abea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	681b      	ldr	r3, [r3, #0]
 800abe4:	4a15      	ldr	r2, [pc, #84]	; (800ac3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 800abe6:	4293      	cmp	r3, r2
 800abe8:	d10c      	bne.n	800ac04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800abea:	68bb      	ldr	r3, [r7, #8]
 800abec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800abf0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800abf2:	683b      	ldr	r3, [r7, #0]
 800abf4:	685b      	ldr	r3, [r3, #4]
 800abf6:	68ba      	ldr	r2, [r7, #8]
 800abf8:	4313      	orrs	r3, r2
 800abfa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800abfc:	687b      	ldr	r3, [r7, #4]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	68ba      	ldr	r2, [r7, #8]
 800ac02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	2201      	movs	r2, #1
 800ac08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	2200      	movs	r2, #0
 800ac10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800ac14:	2300      	movs	r3, #0
}
 800ac16:	4618      	mov	r0, r3
 800ac18:	3714      	adds	r7, #20
 800ac1a:	46bd      	mov	sp, r7
 800ac1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac20:	4770      	bx	lr
 800ac22:	bf00      	nop
 800ac24:	40010000 	.word	0x40010000
 800ac28:	40000400 	.word	0x40000400
 800ac2c:	40000800 	.word	0x40000800
 800ac30:	40000c00 	.word	0x40000c00
 800ac34:	40010400 	.word	0x40010400
 800ac38:	40014000 	.word	0x40014000
 800ac3c:	40001800 	.word	0x40001800

0800ac40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800ac40:	b480      	push	{r7}
 800ac42:	b083      	sub	sp, #12
 800ac44:	af00      	add	r7, sp, #0
 800ac46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800ac48:	bf00      	nop
 800ac4a:	370c      	adds	r7, #12
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac52:	4770      	bx	lr

0800ac54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800ac54:	b480      	push	{r7}
 800ac56:	b083      	sub	sp, #12
 800ac58:	af00      	add	r7, sp, #0
 800ac5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800ac5c:	bf00      	nop
 800ac5e:	370c      	adds	r7, #12
 800ac60:	46bd      	mov	sp, r7
 800ac62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ac66:	4770      	bx	lr

0800ac68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800ac68:	b580      	push	{r7, lr}
 800ac6a:	b082      	sub	sp, #8
 800ac6c:	af00      	add	r7, sp, #0
 800ac6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	2b00      	cmp	r3, #0
 800ac74:	d101      	bne.n	800ac7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800ac76:	2301      	movs	r3, #1
 800ac78:	e03f      	b.n	800acfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ac80:	b2db      	uxtb	r3, r3
 800ac82:	2b00      	cmp	r3, #0
 800ac84:	d106      	bne.n	800ac94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800ac86:	687b      	ldr	r3, [r7, #4]
 800ac88:	2200      	movs	r2, #0
 800ac8a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800ac8e:	6878      	ldr	r0, [r7, #4]
 800ac90:	f7fc fc4e 	bl	8007530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800ac94:	687b      	ldr	r3, [r7, #4]
 800ac96:	2224      	movs	r2, #36	; 0x24
 800ac98:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	681b      	ldr	r3, [r3, #0]
 800aca0:	68da      	ldr	r2, [r3, #12]
 800aca2:	687b      	ldr	r3, [r7, #4]
 800aca4:	681b      	ldr	r3, [r3, #0]
 800aca6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800acaa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800acac:	6878      	ldr	r0, [r7, #4]
 800acae:	f000 fa5f 	bl	800b170 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	681b      	ldr	r3, [r3, #0]
 800acb6:	691a      	ldr	r2, [r3, #16]
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	681b      	ldr	r3, [r3, #0]
 800acbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800acc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800acc2:	687b      	ldr	r3, [r7, #4]
 800acc4:	681b      	ldr	r3, [r3, #0]
 800acc6:	695a      	ldr	r2, [r3, #20]
 800acc8:	687b      	ldr	r3, [r7, #4]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800acd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800acd2:	687b      	ldr	r3, [r7, #4]
 800acd4:	681b      	ldr	r3, [r3, #0]
 800acd6:	68da      	ldr	r2, [r3, #12]
 800acd8:	687b      	ldr	r3, [r7, #4]
 800acda:	681b      	ldr	r3, [r3, #0]
 800acdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800ace0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ace2:	687b      	ldr	r3, [r7, #4]
 800ace4:	2200      	movs	r2, #0
 800ace6:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	2220      	movs	r2, #32
 800acec:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800acf0:	687b      	ldr	r3, [r7, #4]
 800acf2:	2220      	movs	r2, #32
 800acf4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800acf8:	2300      	movs	r3, #0
}
 800acfa:	4618      	mov	r0, r3
 800acfc:	3708      	adds	r7, #8
 800acfe:	46bd      	mov	sp, r7
 800ad00:	bd80      	pop	{r7, pc}

0800ad02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ad02:	b580      	push	{r7, lr}
 800ad04:	b088      	sub	sp, #32
 800ad06:	af02      	add	r7, sp, #8
 800ad08:	60f8      	str	r0, [r7, #12]
 800ad0a:	60b9      	str	r1, [r7, #8]
 800ad0c:	603b      	str	r3, [r7, #0]
 800ad0e:	4613      	mov	r3, r2
 800ad10:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800ad12:	2300      	movs	r3, #0
 800ad14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800ad16:	68fb      	ldr	r3, [r7, #12]
 800ad18:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800ad1c:	b2db      	uxtb	r3, r3
 800ad1e:	2b20      	cmp	r3, #32
 800ad20:	f040 8083 	bne.w	800ae2a <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800ad24:	68bb      	ldr	r3, [r7, #8]
 800ad26:	2b00      	cmp	r3, #0
 800ad28:	d002      	beq.n	800ad30 <HAL_UART_Transmit+0x2e>
 800ad2a:	88fb      	ldrh	r3, [r7, #6]
 800ad2c:	2b00      	cmp	r3, #0
 800ad2e:	d101      	bne.n	800ad34 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800ad30:	2301      	movs	r3, #1
 800ad32:	e07b      	b.n	800ae2c <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ad34:	68fb      	ldr	r3, [r7, #12]
 800ad36:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ad3a:	2b01      	cmp	r3, #1
 800ad3c:	d101      	bne.n	800ad42 <HAL_UART_Transmit+0x40>
 800ad3e:	2302      	movs	r3, #2
 800ad40:	e074      	b.n	800ae2c <HAL_UART_Transmit+0x12a>
 800ad42:	68fb      	ldr	r3, [r7, #12]
 800ad44:	2201      	movs	r2, #1
 800ad46:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ad4a:	68fb      	ldr	r3, [r7, #12]
 800ad4c:	2200      	movs	r2, #0
 800ad4e:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800ad50:	68fb      	ldr	r3, [r7, #12]
 800ad52:	2221      	movs	r2, #33	; 0x21
 800ad54:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800ad58:	f7fc fd8e 	bl	8007878 <HAL_GetTick>
 800ad5c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800ad5e:	68fb      	ldr	r3, [r7, #12]
 800ad60:	88fa      	ldrh	r2, [r7, #6]
 800ad62:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800ad64:	68fb      	ldr	r3, [r7, #12]
 800ad66:	88fa      	ldrh	r2, [r7, #6]
 800ad68:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800ad6a:	68fb      	ldr	r3, [r7, #12]
 800ad6c:	2200      	movs	r2, #0
 800ad6e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800ad72:	e042      	b.n	800adfa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800ad74:	68fb      	ldr	r3, [r7, #12]
 800ad76:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800ad78:	b29b      	uxth	r3, r3
 800ad7a:	3b01      	subs	r3, #1
 800ad7c:	b29a      	uxth	r2, r3
 800ad7e:	68fb      	ldr	r3, [r7, #12]
 800ad80:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800ad82:	68fb      	ldr	r3, [r7, #12]
 800ad84:	689b      	ldr	r3, [r3, #8]
 800ad86:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ad8a:	d122      	bne.n	800add2 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800ad8c:	683b      	ldr	r3, [r7, #0]
 800ad8e:	9300      	str	r3, [sp, #0]
 800ad90:	697b      	ldr	r3, [r7, #20]
 800ad92:	2200      	movs	r2, #0
 800ad94:	2180      	movs	r1, #128	; 0x80
 800ad96:	68f8      	ldr	r0, [r7, #12]
 800ad98:	f000 f96c 	bl	800b074 <UART_WaitOnFlagUntilTimeout>
 800ad9c:	4603      	mov	r3, r0
 800ad9e:	2b00      	cmp	r3, #0
 800ada0:	d001      	beq.n	800ada6 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800ada2:	2303      	movs	r3, #3
 800ada4:	e042      	b.n	800ae2c <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800ada6:	68bb      	ldr	r3, [r7, #8]
 800ada8:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800adaa:	693b      	ldr	r3, [r7, #16]
 800adac:	881b      	ldrh	r3, [r3, #0]
 800adae:	461a      	mov	r2, r3
 800adb0:	68fb      	ldr	r3, [r7, #12]
 800adb2:	681b      	ldr	r3, [r3, #0]
 800adb4:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800adb8:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800adba:	68fb      	ldr	r3, [r7, #12]
 800adbc:	691b      	ldr	r3, [r3, #16]
 800adbe:	2b00      	cmp	r3, #0
 800adc0:	d103      	bne.n	800adca <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800adc2:	68bb      	ldr	r3, [r7, #8]
 800adc4:	3302      	adds	r3, #2
 800adc6:	60bb      	str	r3, [r7, #8]
 800adc8:	e017      	b.n	800adfa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800adca:	68bb      	ldr	r3, [r7, #8]
 800adcc:	3301      	adds	r3, #1
 800adce:	60bb      	str	r3, [r7, #8]
 800add0:	e013      	b.n	800adfa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800add2:	683b      	ldr	r3, [r7, #0]
 800add4:	9300      	str	r3, [sp, #0]
 800add6:	697b      	ldr	r3, [r7, #20]
 800add8:	2200      	movs	r2, #0
 800adda:	2180      	movs	r1, #128	; 0x80
 800addc:	68f8      	ldr	r0, [r7, #12]
 800adde:	f000 f949 	bl	800b074 <UART_WaitOnFlagUntilTimeout>
 800ade2:	4603      	mov	r3, r0
 800ade4:	2b00      	cmp	r3, #0
 800ade6:	d001      	beq.n	800adec <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800ade8:	2303      	movs	r3, #3
 800adea:	e01f      	b.n	800ae2c <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800adec:	68bb      	ldr	r3, [r7, #8]
 800adee:	1c5a      	adds	r2, r3, #1
 800adf0:	60ba      	str	r2, [r7, #8]
 800adf2:	781a      	ldrb	r2, [r3, #0]
 800adf4:	68fb      	ldr	r3, [r7, #12]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800adfa:	68fb      	ldr	r3, [r7, #12]
 800adfc:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800adfe:	b29b      	uxth	r3, r3
 800ae00:	2b00      	cmp	r3, #0
 800ae02:	d1b7      	bne.n	800ad74 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800ae04:	683b      	ldr	r3, [r7, #0]
 800ae06:	9300      	str	r3, [sp, #0]
 800ae08:	697b      	ldr	r3, [r7, #20]
 800ae0a:	2200      	movs	r2, #0
 800ae0c:	2140      	movs	r1, #64	; 0x40
 800ae0e:	68f8      	ldr	r0, [r7, #12]
 800ae10:	f000 f930 	bl	800b074 <UART_WaitOnFlagUntilTimeout>
 800ae14:	4603      	mov	r3, r0
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d001      	beq.n	800ae1e <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800ae1a:	2303      	movs	r3, #3
 800ae1c:	e006      	b.n	800ae2c <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800ae1e:	68fb      	ldr	r3, [r7, #12]
 800ae20:	2220      	movs	r2, #32
 800ae22:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800ae26:	2300      	movs	r3, #0
 800ae28:	e000      	b.n	800ae2c <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800ae2a:	2302      	movs	r3, #2
  }
}
 800ae2c:	4618      	mov	r0, r3
 800ae2e:	3718      	adds	r7, #24
 800ae30:	46bd      	mov	sp, r7
 800ae32:	bd80      	pop	{r7, pc}

0800ae34 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800ae34:	b580      	push	{r7, lr}
 800ae36:	b086      	sub	sp, #24
 800ae38:	af00      	add	r7, sp, #0
 800ae3a:	60f8      	str	r0, [r7, #12]
 800ae3c:	60b9      	str	r1, [r7, #8]
 800ae3e:	4613      	mov	r3, r2
 800ae40:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800ae42:	68fb      	ldr	r3, [r7, #12]
 800ae44:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800ae48:	b2db      	uxtb	r3, r3
 800ae4a:	2b20      	cmp	r3, #32
 800ae4c:	d166      	bne.n	800af1c <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800ae4e:	68bb      	ldr	r3, [r7, #8]
 800ae50:	2b00      	cmp	r3, #0
 800ae52:	d002      	beq.n	800ae5a <HAL_UART_Receive_DMA+0x26>
 800ae54:	88fb      	ldrh	r3, [r7, #6]
 800ae56:	2b00      	cmp	r3, #0
 800ae58:	d101      	bne.n	800ae5e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800ae5a:	2301      	movs	r3, #1
 800ae5c:	e05f      	b.n	800af1e <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800ae5e:	68fb      	ldr	r3, [r7, #12]
 800ae60:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800ae64:	2b01      	cmp	r3, #1
 800ae66:	d101      	bne.n	800ae6c <HAL_UART_Receive_DMA+0x38>
 800ae68:	2302      	movs	r3, #2
 800ae6a:	e058      	b.n	800af1e <HAL_UART_Receive_DMA+0xea>
 800ae6c:	68fb      	ldr	r3, [r7, #12]
 800ae6e:	2201      	movs	r2, #1
 800ae70:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800ae74:	68ba      	ldr	r2, [r7, #8]
 800ae76:	68fb      	ldr	r3, [r7, #12]
 800ae78:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800ae7a:	68fb      	ldr	r3, [r7, #12]
 800ae7c:	88fa      	ldrh	r2, [r7, #6]
 800ae7e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800ae80:	68fb      	ldr	r3, [r7, #12]
 800ae82:	2200      	movs	r2, #0
 800ae84:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800ae86:	68fb      	ldr	r3, [r7, #12]
 800ae88:	2222      	movs	r2, #34	; 0x22
 800ae8a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800ae8e:	68fb      	ldr	r3, [r7, #12]
 800ae90:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae92:	4a25      	ldr	r2, [pc, #148]	; (800af28 <HAL_UART_Receive_DMA+0xf4>)
 800ae94:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800ae96:	68fb      	ldr	r3, [r7, #12]
 800ae98:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800ae9a:	4a24      	ldr	r2, [pc, #144]	; (800af2c <HAL_UART_Receive_DMA+0xf8>)
 800ae9c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800ae9e:	68fb      	ldr	r3, [r7, #12]
 800aea0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aea2:	4a23      	ldr	r2, [pc, #140]	; (800af30 <HAL_UART_Receive_DMA+0xfc>)
 800aea4:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800aea6:	68fb      	ldr	r3, [r7, #12]
 800aea8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800aeaa:	2200      	movs	r2, #0
 800aeac:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800aeae:	f107 0308 	add.w	r3, r7, #8
 800aeb2:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800aeb4:	68fb      	ldr	r3, [r7, #12]
 800aeb6:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800aeb8:	68fb      	ldr	r3, [r7, #12]
 800aeba:	681b      	ldr	r3, [r3, #0]
 800aebc:	3304      	adds	r3, #4
 800aebe:	4619      	mov	r1, r3
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	681a      	ldr	r2, [r3, #0]
 800aec4:	88fb      	ldrh	r3, [r7, #6]
 800aec6:	f7fc fe95 	bl	8007bf4 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800aeca:	2300      	movs	r3, #0
 800aecc:	613b      	str	r3, [r7, #16]
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	681b      	ldr	r3, [r3, #0]
 800aed2:	681b      	ldr	r3, [r3, #0]
 800aed4:	613b      	str	r3, [r7, #16]
 800aed6:	68fb      	ldr	r3, [r7, #12]
 800aed8:	681b      	ldr	r3, [r3, #0]
 800aeda:	685b      	ldr	r3, [r3, #4]
 800aedc:	613b      	str	r3, [r7, #16]
 800aede:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2200      	movs	r2, #0
 800aee4:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800aee8:	68fb      	ldr	r3, [r7, #12]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	68da      	ldr	r2, [r3, #12]
 800aeee:	68fb      	ldr	r3, [r7, #12]
 800aef0:	681b      	ldr	r3, [r3, #0]
 800aef2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800aef6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800aef8:	68fb      	ldr	r3, [r7, #12]
 800aefa:	681b      	ldr	r3, [r3, #0]
 800aefc:	695a      	ldr	r2, [r3, #20]
 800aefe:	68fb      	ldr	r3, [r7, #12]
 800af00:	681b      	ldr	r3, [r3, #0]
 800af02:	f042 0201 	orr.w	r2, r2, #1
 800af06:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af08:	68fb      	ldr	r3, [r7, #12]
 800af0a:	681b      	ldr	r3, [r3, #0]
 800af0c:	695a      	ldr	r2, [r3, #20]
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af16:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800af18:	2300      	movs	r3, #0
 800af1a:	e000      	b.n	800af1e <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800af1c:	2302      	movs	r3, #2
  }
}
 800af1e:	4618      	mov	r0, r3
 800af20:	3718      	adds	r7, #24
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
 800af26:	bf00      	nop
 800af28:	0800af5d 	.word	0x0800af5d
 800af2c:	0800afc5 	.word	0x0800afc5
 800af30:	0800afe1 	.word	0x0800afe1

0800af34 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800af34:	b480      	push	{r7}
 800af36:	b083      	sub	sp, #12
 800af38:	af00      	add	r7, sp, #0
 800af3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800af3c:	bf00      	nop
 800af3e:	370c      	adds	r7, #12
 800af40:	46bd      	mov	sp, r7
 800af42:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af46:	4770      	bx	lr

0800af48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800af48:	b480      	push	{r7}
 800af4a:	b083      	sub	sp, #12
 800af4c:	af00      	add	r7, sp, #0
 800af4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800af50:	bf00      	nop
 800af52:	370c      	adds	r7, #12
 800af54:	46bd      	mov	sp, r7
 800af56:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af5a:	4770      	bx	lr

0800af5c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800af5c:	b580      	push	{r7, lr}
 800af5e:	b084      	sub	sp, #16
 800af60:	af00      	add	r7, sp, #0
 800af62:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800af64:	687b      	ldr	r3, [r7, #4]
 800af66:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af68:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800af6a:	687b      	ldr	r3, [r7, #4]
 800af6c:	681b      	ldr	r3, [r3, #0]
 800af6e:	681b      	ldr	r3, [r3, #0]
 800af70:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af74:	2b00      	cmp	r3, #0
 800af76:	d11e      	bne.n	800afb6 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800af78:	68fb      	ldr	r3, [r7, #12]
 800af7a:	2200      	movs	r2, #0
 800af7c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800af7e:	68fb      	ldr	r3, [r7, #12]
 800af80:	681b      	ldr	r3, [r3, #0]
 800af82:	68da      	ldr	r2, [r3, #12]
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800af8c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800af8e:	68fb      	ldr	r3, [r7, #12]
 800af90:	681b      	ldr	r3, [r3, #0]
 800af92:	695a      	ldr	r2, [r3, #20]
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	681b      	ldr	r3, [r3, #0]
 800af98:	f022 0201 	bic.w	r2, r2, #1
 800af9c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	695a      	ldr	r2, [r3, #20]
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800afac:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	2220      	movs	r2, #32
 800afb2:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800afb6:	68f8      	ldr	r0, [r7, #12]
 800afb8:	f7fb fdb6 	bl	8006b28 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afbc:	bf00      	nop
 800afbe:	3710      	adds	r7, #16
 800afc0:	46bd      	mov	sp, r7
 800afc2:	bd80      	pop	{r7, pc}

0800afc4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800afc4:	b580      	push	{r7, lr}
 800afc6:	b084      	sub	sp, #16
 800afc8:	af00      	add	r7, sp, #0
 800afca:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afcc:	687b      	ldr	r3, [r7, #4]
 800afce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800afd0:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800afd2:	68f8      	ldr	r0, [r7, #12]
 800afd4:	f7ff ffae 	bl	800af34 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800afd8:	bf00      	nop
 800afda:	3710      	adds	r7, #16
 800afdc:	46bd      	mov	sp, r7
 800afde:	bd80      	pop	{r7, pc}

0800afe0 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800afe0:	b580      	push	{r7, lr}
 800afe2:	b084      	sub	sp, #16
 800afe4:	af00      	add	r7, sp, #0
 800afe6:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800afe8:	2300      	movs	r3, #0
 800afea:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800afec:	687b      	ldr	r3, [r7, #4]
 800afee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aff0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800aff2:	68bb      	ldr	r3, [r7, #8]
 800aff4:	681b      	ldr	r3, [r3, #0]
 800aff6:	695b      	ldr	r3, [r3, #20]
 800aff8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800affc:	2b80      	cmp	r3, #128	; 0x80
 800affe:	bf0c      	ite	eq
 800b000:	2301      	moveq	r3, #1
 800b002:	2300      	movne	r3, #0
 800b004:	b2db      	uxtb	r3, r3
 800b006:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800b008:	68bb      	ldr	r3, [r7, #8]
 800b00a:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800b00e:	b2db      	uxtb	r3, r3
 800b010:	2b21      	cmp	r3, #33	; 0x21
 800b012:	d108      	bne.n	800b026 <UART_DMAError+0x46>
 800b014:	68fb      	ldr	r3, [r7, #12]
 800b016:	2b00      	cmp	r3, #0
 800b018:	d005      	beq.n	800b026 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800b01a:	68bb      	ldr	r3, [r7, #8]
 800b01c:	2200      	movs	r2, #0
 800b01e:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800b020:	68b8      	ldr	r0, [r7, #8]
 800b022:	f000 f871 	bl	800b108 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800b026:	68bb      	ldr	r3, [r7, #8]
 800b028:	681b      	ldr	r3, [r3, #0]
 800b02a:	695b      	ldr	r3, [r3, #20]
 800b02c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b030:	2b40      	cmp	r3, #64	; 0x40
 800b032:	bf0c      	ite	eq
 800b034:	2301      	moveq	r3, #1
 800b036:	2300      	movne	r3, #0
 800b038:	b2db      	uxtb	r3, r3
 800b03a:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800b03c:	68bb      	ldr	r3, [r7, #8]
 800b03e:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800b042:	b2db      	uxtb	r3, r3
 800b044:	2b22      	cmp	r3, #34	; 0x22
 800b046:	d108      	bne.n	800b05a <UART_DMAError+0x7a>
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	d005      	beq.n	800b05a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800b04e:	68bb      	ldr	r3, [r7, #8]
 800b050:	2200      	movs	r2, #0
 800b052:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800b054:	68b8      	ldr	r0, [r7, #8]
 800b056:	f000 f86d 	bl	800b134 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800b05e:	f043 0210 	orr.w	r2, r3, #16
 800b062:	68bb      	ldr	r3, [r7, #8]
 800b064:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800b066:	68b8      	ldr	r0, [r7, #8]
 800b068:	f7ff ff6e 	bl	800af48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800b06c:	bf00      	nop
 800b06e:	3710      	adds	r7, #16
 800b070:	46bd      	mov	sp, r7
 800b072:	bd80      	pop	{r7, pc}

0800b074 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800b074:	b580      	push	{r7, lr}
 800b076:	b084      	sub	sp, #16
 800b078:	af00      	add	r7, sp, #0
 800b07a:	60f8      	str	r0, [r7, #12]
 800b07c:	60b9      	str	r1, [r7, #8]
 800b07e:	603b      	str	r3, [r7, #0]
 800b080:	4613      	mov	r3, r2
 800b082:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b084:	e02c      	b.n	800b0e0 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800b086:	69bb      	ldr	r3, [r7, #24]
 800b088:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b08c:	d028      	beq.n	800b0e0 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800b08e:	69bb      	ldr	r3, [r7, #24]
 800b090:	2b00      	cmp	r3, #0
 800b092:	d007      	beq.n	800b0a4 <UART_WaitOnFlagUntilTimeout+0x30>
 800b094:	f7fc fbf0 	bl	8007878 <HAL_GetTick>
 800b098:	4602      	mov	r2, r0
 800b09a:	683b      	ldr	r3, [r7, #0]
 800b09c:	1ad3      	subs	r3, r2, r3
 800b09e:	69ba      	ldr	r2, [r7, #24]
 800b0a0:	429a      	cmp	r2, r3
 800b0a2:	d21d      	bcs.n	800b0e0 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800b0a4:	68fb      	ldr	r3, [r7, #12]
 800b0a6:	681b      	ldr	r3, [r3, #0]
 800b0a8:	68da      	ldr	r2, [r3, #12]
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	681b      	ldr	r3, [r3, #0]
 800b0ae:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800b0b2:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	681b      	ldr	r3, [r3, #0]
 800b0b8:	695a      	ldr	r2, [r3, #20]
 800b0ba:	68fb      	ldr	r3, [r7, #12]
 800b0bc:	681b      	ldr	r3, [r3, #0]
 800b0be:	f022 0201 	bic.w	r2, r2, #1
 800b0c2:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	2220      	movs	r2, #32
 800b0c8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	2220      	movs	r2, #32
 800b0d0:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800b0d4:	68fb      	ldr	r3, [r7, #12]
 800b0d6:	2200      	movs	r2, #0
 800b0d8:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800b0dc:	2303      	movs	r3, #3
 800b0de:	e00f      	b.n	800b100 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800b0e0:	68fb      	ldr	r3, [r7, #12]
 800b0e2:	681b      	ldr	r3, [r3, #0]
 800b0e4:	681a      	ldr	r2, [r3, #0]
 800b0e6:	68bb      	ldr	r3, [r7, #8]
 800b0e8:	4013      	ands	r3, r2
 800b0ea:	68ba      	ldr	r2, [r7, #8]
 800b0ec:	429a      	cmp	r2, r3
 800b0ee:	bf0c      	ite	eq
 800b0f0:	2301      	moveq	r3, #1
 800b0f2:	2300      	movne	r3, #0
 800b0f4:	b2db      	uxtb	r3, r3
 800b0f6:	461a      	mov	r2, r3
 800b0f8:	79fb      	ldrb	r3, [r7, #7]
 800b0fa:	429a      	cmp	r2, r3
 800b0fc:	d0c3      	beq.n	800b086 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800b0fe:	2300      	movs	r3, #0
}
 800b100:	4618      	mov	r0, r3
 800b102:	3710      	adds	r7, #16
 800b104:	46bd      	mov	sp, r7
 800b106:	bd80      	pop	{r7, pc}

0800b108 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800b108:	b480      	push	{r7}
 800b10a:	b083      	sub	sp, #12
 800b10c:	af00      	add	r7, sp, #0
 800b10e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800b110:	687b      	ldr	r3, [r7, #4]
 800b112:	681b      	ldr	r3, [r3, #0]
 800b114:	68da      	ldr	r2, [r3, #12]
 800b116:	687b      	ldr	r3, [r7, #4]
 800b118:	681b      	ldr	r3, [r3, #0]
 800b11a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800b11e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	2220      	movs	r2, #32
 800b124:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800b128:	bf00      	nop
 800b12a:	370c      	adds	r7, #12
 800b12c:	46bd      	mov	sp, r7
 800b12e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b132:	4770      	bx	lr

0800b134 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800b134:	b480      	push	{r7}
 800b136:	b083      	sub	sp, #12
 800b138:	af00      	add	r7, sp, #0
 800b13a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800b13c:	687b      	ldr	r3, [r7, #4]
 800b13e:	681b      	ldr	r3, [r3, #0]
 800b140:	68da      	ldr	r2, [r3, #12]
 800b142:	687b      	ldr	r3, [r7, #4]
 800b144:	681b      	ldr	r3, [r3, #0]
 800b146:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800b14a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800b14c:	687b      	ldr	r3, [r7, #4]
 800b14e:	681b      	ldr	r3, [r3, #0]
 800b150:	695a      	ldr	r2, [r3, #20]
 800b152:	687b      	ldr	r3, [r7, #4]
 800b154:	681b      	ldr	r3, [r3, #0]
 800b156:	f022 0201 	bic.w	r2, r2, #1
 800b15a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800b15c:	687b      	ldr	r3, [r7, #4]
 800b15e:	2220      	movs	r2, #32
 800b160:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800b164:	bf00      	nop
 800b166:	370c      	adds	r7, #12
 800b168:	46bd      	mov	sp, r7
 800b16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b16e:	4770      	bx	lr

0800b170 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800b170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b174:	b085      	sub	sp, #20
 800b176:	af00      	add	r7, sp, #0
 800b178:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800b17a:	687b      	ldr	r3, [r7, #4]
 800b17c:	681b      	ldr	r3, [r3, #0]
 800b17e:	691b      	ldr	r3, [r3, #16]
 800b180:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	68da      	ldr	r2, [r3, #12]
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	681b      	ldr	r3, [r3, #0]
 800b18c:	430a      	orrs	r2, r1
 800b18e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	689a      	ldr	r2, [r3, #8]
 800b194:	687b      	ldr	r3, [r7, #4]
 800b196:	691b      	ldr	r3, [r3, #16]
 800b198:	431a      	orrs	r2, r3
 800b19a:	687b      	ldr	r3, [r7, #4]
 800b19c:	695b      	ldr	r3, [r3, #20]
 800b19e:	431a      	orrs	r2, r3
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	69db      	ldr	r3, [r3, #28]
 800b1a4:	4313      	orrs	r3, r2
 800b1a6:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800b1a8:	687b      	ldr	r3, [r7, #4]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	68db      	ldr	r3, [r3, #12]
 800b1ae:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800b1b2:	f023 030c 	bic.w	r3, r3, #12
 800b1b6:	687a      	ldr	r2, [r7, #4]
 800b1b8:	6812      	ldr	r2, [r2, #0]
 800b1ba:	68f9      	ldr	r1, [r7, #12]
 800b1bc:	430b      	orrs	r3, r1
 800b1be:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800b1c0:	687b      	ldr	r3, [r7, #4]
 800b1c2:	681b      	ldr	r3, [r3, #0]
 800b1c4:	695b      	ldr	r3, [r3, #20]
 800b1c6:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800b1ca:	687b      	ldr	r3, [r7, #4]
 800b1cc:	699a      	ldr	r2, [r3, #24]
 800b1ce:	687b      	ldr	r3, [r7, #4]
 800b1d0:	681b      	ldr	r3, [r3, #0]
 800b1d2:	430a      	orrs	r2, r1
 800b1d4:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800b1d6:	687b      	ldr	r3, [r7, #4]
 800b1d8:	69db      	ldr	r3, [r3, #28]
 800b1da:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1de:	f040 818b 	bne.w	800b4f8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b1e2:	687b      	ldr	r3, [r7, #4]
 800b1e4:	681b      	ldr	r3, [r3, #0]
 800b1e6:	4ac1      	ldr	r2, [pc, #772]	; (800b4ec <UART_SetConfig+0x37c>)
 800b1e8:	4293      	cmp	r3, r2
 800b1ea:	d005      	beq.n	800b1f8 <UART_SetConfig+0x88>
 800b1ec:	687b      	ldr	r3, [r7, #4]
 800b1ee:	681b      	ldr	r3, [r3, #0]
 800b1f0:	4abf      	ldr	r2, [pc, #764]	; (800b4f0 <UART_SetConfig+0x380>)
 800b1f2:	4293      	cmp	r3, r2
 800b1f4:	f040 80bd 	bne.w	800b372 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800b1f8:	f7fd fc92 	bl	8008b20 <HAL_RCC_GetPCLK2Freq>
 800b1fc:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b1fe:	68bb      	ldr	r3, [r7, #8]
 800b200:	461d      	mov	r5, r3
 800b202:	f04f 0600 	mov.w	r6, #0
 800b206:	46a8      	mov	r8, r5
 800b208:	46b1      	mov	r9, r6
 800b20a:	eb18 0308 	adds.w	r3, r8, r8
 800b20e:	eb49 0409 	adc.w	r4, r9, r9
 800b212:	4698      	mov	r8, r3
 800b214:	46a1      	mov	r9, r4
 800b216:	eb18 0805 	adds.w	r8, r8, r5
 800b21a:	eb49 0906 	adc.w	r9, r9, r6
 800b21e:	f04f 0100 	mov.w	r1, #0
 800b222:	f04f 0200 	mov.w	r2, #0
 800b226:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b22a:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b22e:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b232:	4688      	mov	r8, r1
 800b234:	4691      	mov	r9, r2
 800b236:	eb18 0005 	adds.w	r0, r8, r5
 800b23a:	eb49 0106 	adc.w	r1, r9, r6
 800b23e:	687b      	ldr	r3, [r7, #4]
 800b240:	685b      	ldr	r3, [r3, #4]
 800b242:	461d      	mov	r5, r3
 800b244:	f04f 0600 	mov.w	r6, #0
 800b248:	196b      	adds	r3, r5, r5
 800b24a:	eb46 0406 	adc.w	r4, r6, r6
 800b24e:	461a      	mov	r2, r3
 800b250:	4623      	mov	r3, r4
 800b252:	f7f5 fcd3 	bl	8000bfc <__aeabi_uldivmod>
 800b256:	4603      	mov	r3, r0
 800b258:	460c      	mov	r4, r1
 800b25a:	461a      	mov	r2, r3
 800b25c:	4ba5      	ldr	r3, [pc, #660]	; (800b4f4 <UART_SetConfig+0x384>)
 800b25e:	fba3 2302 	umull	r2, r3, r3, r2
 800b262:	095b      	lsrs	r3, r3, #5
 800b264:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b268:	68bb      	ldr	r3, [r7, #8]
 800b26a:	461d      	mov	r5, r3
 800b26c:	f04f 0600 	mov.w	r6, #0
 800b270:	46a9      	mov	r9, r5
 800b272:	46b2      	mov	sl, r6
 800b274:	eb19 0309 	adds.w	r3, r9, r9
 800b278:	eb4a 040a 	adc.w	r4, sl, sl
 800b27c:	4699      	mov	r9, r3
 800b27e:	46a2      	mov	sl, r4
 800b280:	eb19 0905 	adds.w	r9, r9, r5
 800b284:	eb4a 0a06 	adc.w	sl, sl, r6
 800b288:	f04f 0100 	mov.w	r1, #0
 800b28c:	f04f 0200 	mov.w	r2, #0
 800b290:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b294:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b298:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b29c:	4689      	mov	r9, r1
 800b29e:	4692      	mov	sl, r2
 800b2a0:	eb19 0005 	adds.w	r0, r9, r5
 800b2a4:	eb4a 0106 	adc.w	r1, sl, r6
 800b2a8:	687b      	ldr	r3, [r7, #4]
 800b2aa:	685b      	ldr	r3, [r3, #4]
 800b2ac:	461d      	mov	r5, r3
 800b2ae:	f04f 0600 	mov.w	r6, #0
 800b2b2:	196b      	adds	r3, r5, r5
 800b2b4:	eb46 0406 	adc.w	r4, r6, r6
 800b2b8:	461a      	mov	r2, r3
 800b2ba:	4623      	mov	r3, r4
 800b2bc:	f7f5 fc9e 	bl	8000bfc <__aeabi_uldivmod>
 800b2c0:	4603      	mov	r3, r0
 800b2c2:	460c      	mov	r4, r1
 800b2c4:	461a      	mov	r2, r3
 800b2c6:	4b8b      	ldr	r3, [pc, #556]	; (800b4f4 <UART_SetConfig+0x384>)
 800b2c8:	fba3 1302 	umull	r1, r3, r3, r2
 800b2cc:	095b      	lsrs	r3, r3, #5
 800b2ce:	2164      	movs	r1, #100	; 0x64
 800b2d0:	fb01 f303 	mul.w	r3, r1, r3
 800b2d4:	1ad3      	subs	r3, r2, r3
 800b2d6:	00db      	lsls	r3, r3, #3
 800b2d8:	3332      	adds	r3, #50	; 0x32
 800b2da:	4a86      	ldr	r2, [pc, #536]	; (800b4f4 <UART_SetConfig+0x384>)
 800b2dc:	fba2 2303 	umull	r2, r3, r2, r3
 800b2e0:	095b      	lsrs	r3, r3, #5
 800b2e2:	005b      	lsls	r3, r3, #1
 800b2e4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b2e8:	4498      	add	r8, r3
 800b2ea:	68bb      	ldr	r3, [r7, #8]
 800b2ec:	461d      	mov	r5, r3
 800b2ee:	f04f 0600 	mov.w	r6, #0
 800b2f2:	46a9      	mov	r9, r5
 800b2f4:	46b2      	mov	sl, r6
 800b2f6:	eb19 0309 	adds.w	r3, r9, r9
 800b2fa:	eb4a 040a 	adc.w	r4, sl, sl
 800b2fe:	4699      	mov	r9, r3
 800b300:	46a2      	mov	sl, r4
 800b302:	eb19 0905 	adds.w	r9, r9, r5
 800b306:	eb4a 0a06 	adc.w	sl, sl, r6
 800b30a:	f04f 0100 	mov.w	r1, #0
 800b30e:	f04f 0200 	mov.w	r2, #0
 800b312:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b316:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b31a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b31e:	4689      	mov	r9, r1
 800b320:	4692      	mov	sl, r2
 800b322:	eb19 0005 	adds.w	r0, r9, r5
 800b326:	eb4a 0106 	adc.w	r1, sl, r6
 800b32a:	687b      	ldr	r3, [r7, #4]
 800b32c:	685b      	ldr	r3, [r3, #4]
 800b32e:	461d      	mov	r5, r3
 800b330:	f04f 0600 	mov.w	r6, #0
 800b334:	196b      	adds	r3, r5, r5
 800b336:	eb46 0406 	adc.w	r4, r6, r6
 800b33a:	461a      	mov	r2, r3
 800b33c:	4623      	mov	r3, r4
 800b33e:	f7f5 fc5d 	bl	8000bfc <__aeabi_uldivmod>
 800b342:	4603      	mov	r3, r0
 800b344:	460c      	mov	r4, r1
 800b346:	461a      	mov	r2, r3
 800b348:	4b6a      	ldr	r3, [pc, #424]	; (800b4f4 <UART_SetConfig+0x384>)
 800b34a:	fba3 1302 	umull	r1, r3, r3, r2
 800b34e:	095b      	lsrs	r3, r3, #5
 800b350:	2164      	movs	r1, #100	; 0x64
 800b352:	fb01 f303 	mul.w	r3, r1, r3
 800b356:	1ad3      	subs	r3, r2, r3
 800b358:	00db      	lsls	r3, r3, #3
 800b35a:	3332      	adds	r3, #50	; 0x32
 800b35c:	4a65      	ldr	r2, [pc, #404]	; (800b4f4 <UART_SetConfig+0x384>)
 800b35e:	fba2 2303 	umull	r2, r3, r2, r3
 800b362:	095b      	lsrs	r3, r3, #5
 800b364:	f003 0207 	and.w	r2, r3, #7
 800b368:	687b      	ldr	r3, [r7, #4]
 800b36a:	681b      	ldr	r3, [r3, #0]
 800b36c:	4442      	add	r2, r8
 800b36e:	609a      	str	r2, [r3, #8]
 800b370:	e26f      	b.n	800b852 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800b372:	f7fd fbc1 	bl	8008af8 <HAL_RCC_GetPCLK1Freq>
 800b376:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800b378:	68bb      	ldr	r3, [r7, #8]
 800b37a:	461d      	mov	r5, r3
 800b37c:	f04f 0600 	mov.w	r6, #0
 800b380:	46a8      	mov	r8, r5
 800b382:	46b1      	mov	r9, r6
 800b384:	eb18 0308 	adds.w	r3, r8, r8
 800b388:	eb49 0409 	adc.w	r4, r9, r9
 800b38c:	4698      	mov	r8, r3
 800b38e:	46a1      	mov	r9, r4
 800b390:	eb18 0805 	adds.w	r8, r8, r5
 800b394:	eb49 0906 	adc.w	r9, r9, r6
 800b398:	f04f 0100 	mov.w	r1, #0
 800b39c:	f04f 0200 	mov.w	r2, #0
 800b3a0:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b3a4:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b3a8:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b3ac:	4688      	mov	r8, r1
 800b3ae:	4691      	mov	r9, r2
 800b3b0:	eb18 0005 	adds.w	r0, r8, r5
 800b3b4:	eb49 0106 	adc.w	r1, r9, r6
 800b3b8:	687b      	ldr	r3, [r7, #4]
 800b3ba:	685b      	ldr	r3, [r3, #4]
 800b3bc:	461d      	mov	r5, r3
 800b3be:	f04f 0600 	mov.w	r6, #0
 800b3c2:	196b      	adds	r3, r5, r5
 800b3c4:	eb46 0406 	adc.w	r4, r6, r6
 800b3c8:	461a      	mov	r2, r3
 800b3ca:	4623      	mov	r3, r4
 800b3cc:	f7f5 fc16 	bl	8000bfc <__aeabi_uldivmod>
 800b3d0:	4603      	mov	r3, r0
 800b3d2:	460c      	mov	r4, r1
 800b3d4:	461a      	mov	r2, r3
 800b3d6:	4b47      	ldr	r3, [pc, #284]	; (800b4f4 <UART_SetConfig+0x384>)
 800b3d8:	fba3 2302 	umull	r2, r3, r3, r2
 800b3dc:	095b      	lsrs	r3, r3, #5
 800b3de:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b3e2:	68bb      	ldr	r3, [r7, #8]
 800b3e4:	461d      	mov	r5, r3
 800b3e6:	f04f 0600 	mov.w	r6, #0
 800b3ea:	46a9      	mov	r9, r5
 800b3ec:	46b2      	mov	sl, r6
 800b3ee:	eb19 0309 	adds.w	r3, r9, r9
 800b3f2:	eb4a 040a 	adc.w	r4, sl, sl
 800b3f6:	4699      	mov	r9, r3
 800b3f8:	46a2      	mov	sl, r4
 800b3fa:	eb19 0905 	adds.w	r9, r9, r5
 800b3fe:	eb4a 0a06 	adc.w	sl, sl, r6
 800b402:	f04f 0100 	mov.w	r1, #0
 800b406:	f04f 0200 	mov.w	r2, #0
 800b40a:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b40e:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b412:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b416:	4689      	mov	r9, r1
 800b418:	4692      	mov	sl, r2
 800b41a:	eb19 0005 	adds.w	r0, r9, r5
 800b41e:	eb4a 0106 	adc.w	r1, sl, r6
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	685b      	ldr	r3, [r3, #4]
 800b426:	461d      	mov	r5, r3
 800b428:	f04f 0600 	mov.w	r6, #0
 800b42c:	196b      	adds	r3, r5, r5
 800b42e:	eb46 0406 	adc.w	r4, r6, r6
 800b432:	461a      	mov	r2, r3
 800b434:	4623      	mov	r3, r4
 800b436:	f7f5 fbe1 	bl	8000bfc <__aeabi_uldivmod>
 800b43a:	4603      	mov	r3, r0
 800b43c:	460c      	mov	r4, r1
 800b43e:	461a      	mov	r2, r3
 800b440:	4b2c      	ldr	r3, [pc, #176]	; (800b4f4 <UART_SetConfig+0x384>)
 800b442:	fba3 1302 	umull	r1, r3, r3, r2
 800b446:	095b      	lsrs	r3, r3, #5
 800b448:	2164      	movs	r1, #100	; 0x64
 800b44a:	fb01 f303 	mul.w	r3, r1, r3
 800b44e:	1ad3      	subs	r3, r2, r3
 800b450:	00db      	lsls	r3, r3, #3
 800b452:	3332      	adds	r3, #50	; 0x32
 800b454:	4a27      	ldr	r2, [pc, #156]	; (800b4f4 <UART_SetConfig+0x384>)
 800b456:	fba2 2303 	umull	r2, r3, r2, r3
 800b45a:	095b      	lsrs	r3, r3, #5
 800b45c:	005b      	lsls	r3, r3, #1
 800b45e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800b462:	4498      	add	r8, r3
 800b464:	68bb      	ldr	r3, [r7, #8]
 800b466:	461d      	mov	r5, r3
 800b468:	f04f 0600 	mov.w	r6, #0
 800b46c:	46a9      	mov	r9, r5
 800b46e:	46b2      	mov	sl, r6
 800b470:	eb19 0309 	adds.w	r3, r9, r9
 800b474:	eb4a 040a 	adc.w	r4, sl, sl
 800b478:	4699      	mov	r9, r3
 800b47a:	46a2      	mov	sl, r4
 800b47c:	eb19 0905 	adds.w	r9, r9, r5
 800b480:	eb4a 0a06 	adc.w	sl, sl, r6
 800b484:	f04f 0100 	mov.w	r1, #0
 800b488:	f04f 0200 	mov.w	r2, #0
 800b48c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b490:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b494:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b498:	4689      	mov	r9, r1
 800b49a:	4692      	mov	sl, r2
 800b49c:	eb19 0005 	adds.w	r0, r9, r5
 800b4a0:	eb4a 0106 	adc.w	r1, sl, r6
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	685b      	ldr	r3, [r3, #4]
 800b4a8:	461d      	mov	r5, r3
 800b4aa:	f04f 0600 	mov.w	r6, #0
 800b4ae:	196b      	adds	r3, r5, r5
 800b4b0:	eb46 0406 	adc.w	r4, r6, r6
 800b4b4:	461a      	mov	r2, r3
 800b4b6:	4623      	mov	r3, r4
 800b4b8:	f7f5 fba0 	bl	8000bfc <__aeabi_uldivmod>
 800b4bc:	4603      	mov	r3, r0
 800b4be:	460c      	mov	r4, r1
 800b4c0:	461a      	mov	r2, r3
 800b4c2:	4b0c      	ldr	r3, [pc, #48]	; (800b4f4 <UART_SetConfig+0x384>)
 800b4c4:	fba3 1302 	umull	r1, r3, r3, r2
 800b4c8:	095b      	lsrs	r3, r3, #5
 800b4ca:	2164      	movs	r1, #100	; 0x64
 800b4cc:	fb01 f303 	mul.w	r3, r1, r3
 800b4d0:	1ad3      	subs	r3, r2, r3
 800b4d2:	00db      	lsls	r3, r3, #3
 800b4d4:	3332      	adds	r3, #50	; 0x32
 800b4d6:	4a07      	ldr	r2, [pc, #28]	; (800b4f4 <UART_SetConfig+0x384>)
 800b4d8:	fba2 2303 	umull	r2, r3, r2, r3
 800b4dc:	095b      	lsrs	r3, r3, #5
 800b4de:	f003 0207 	and.w	r2, r3, #7
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	681b      	ldr	r3, [r3, #0]
 800b4e6:	4442      	add	r2, r8
 800b4e8:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800b4ea:	e1b2      	b.n	800b852 <UART_SetConfig+0x6e2>
 800b4ec:	40011000 	.word	0x40011000
 800b4f0:	40011400 	.word	0x40011400
 800b4f4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800b4f8:	687b      	ldr	r3, [r7, #4]
 800b4fa:	681b      	ldr	r3, [r3, #0]
 800b4fc:	4ad7      	ldr	r2, [pc, #860]	; (800b85c <UART_SetConfig+0x6ec>)
 800b4fe:	4293      	cmp	r3, r2
 800b500:	d005      	beq.n	800b50e <UART_SetConfig+0x39e>
 800b502:	687b      	ldr	r3, [r7, #4]
 800b504:	681b      	ldr	r3, [r3, #0]
 800b506:	4ad6      	ldr	r2, [pc, #856]	; (800b860 <UART_SetConfig+0x6f0>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	f040 80d1 	bne.w	800b6b0 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800b50e:	f7fd fb07 	bl	8008b20 <HAL_RCC_GetPCLK2Freq>
 800b512:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b514:	68bb      	ldr	r3, [r7, #8]
 800b516:	469a      	mov	sl, r3
 800b518:	f04f 0b00 	mov.w	fp, #0
 800b51c:	46d0      	mov	r8, sl
 800b51e:	46d9      	mov	r9, fp
 800b520:	eb18 0308 	adds.w	r3, r8, r8
 800b524:	eb49 0409 	adc.w	r4, r9, r9
 800b528:	4698      	mov	r8, r3
 800b52a:	46a1      	mov	r9, r4
 800b52c:	eb18 080a 	adds.w	r8, r8, sl
 800b530:	eb49 090b 	adc.w	r9, r9, fp
 800b534:	f04f 0100 	mov.w	r1, #0
 800b538:	f04f 0200 	mov.w	r2, #0
 800b53c:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b540:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b544:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b548:	4688      	mov	r8, r1
 800b54a:	4691      	mov	r9, r2
 800b54c:	eb1a 0508 	adds.w	r5, sl, r8
 800b550:	eb4b 0609 	adc.w	r6, fp, r9
 800b554:	687b      	ldr	r3, [r7, #4]
 800b556:	685b      	ldr	r3, [r3, #4]
 800b558:	4619      	mov	r1, r3
 800b55a:	f04f 0200 	mov.w	r2, #0
 800b55e:	f04f 0300 	mov.w	r3, #0
 800b562:	f04f 0400 	mov.w	r4, #0
 800b566:	0094      	lsls	r4, r2, #2
 800b568:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b56c:	008b      	lsls	r3, r1, #2
 800b56e:	461a      	mov	r2, r3
 800b570:	4623      	mov	r3, r4
 800b572:	4628      	mov	r0, r5
 800b574:	4631      	mov	r1, r6
 800b576:	f7f5 fb41 	bl	8000bfc <__aeabi_uldivmod>
 800b57a:	4603      	mov	r3, r0
 800b57c:	460c      	mov	r4, r1
 800b57e:	461a      	mov	r2, r3
 800b580:	4bb8      	ldr	r3, [pc, #736]	; (800b864 <UART_SetConfig+0x6f4>)
 800b582:	fba3 2302 	umull	r2, r3, r3, r2
 800b586:	095b      	lsrs	r3, r3, #5
 800b588:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b58c:	68bb      	ldr	r3, [r7, #8]
 800b58e:	469b      	mov	fp, r3
 800b590:	f04f 0c00 	mov.w	ip, #0
 800b594:	46d9      	mov	r9, fp
 800b596:	46e2      	mov	sl, ip
 800b598:	eb19 0309 	adds.w	r3, r9, r9
 800b59c:	eb4a 040a 	adc.w	r4, sl, sl
 800b5a0:	4699      	mov	r9, r3
 800b5a2:	46a2      	mov	sl, r4
 800b5a4:	eb19 090b 	adds.w	r9, r9, fp
 800b5a8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b5ac:	f04f 0100 	mov.w	r1, #0
 800b5b0:	f04f 0200 	mov.w	r2, #0
 800b5b4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b5b8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b5bc:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b5c0:	4689      	mov	r9, r1
 800b5c2:	4692      	mov	sl, r2
 800b5c4:	eb1b 0509 	adds.w	r5, fp, r9
 800b5c8:	eb4c 060a 	adc.w	r6, ip, sl
 800b5cc:	687b      	ldr	r3, [r7, #4]
 800b5ce:	685b      	ldr	r3, [r3, #4]
 800b5d0:	4619      	mov	r1, r3
 800b5d2:	f04f 0200 	mov.w	r2, #0
 800b5d6:	f04f 0300 	mov.w	r3, #0
 800b5da:	f04f 0400 	mov.w	r4, #0
 800b5de:	0094      	lsls	r4, r2, #2
 800b5e0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b5e4:	008b      	lsls	r3, r1, #2
 800b5e6:	461a      	mov	r2, r3
 800b5e8:	4623      	mov	r3, r4
 800b5ea:	4628      	mov	r0, r5
 800b5ec:	4631      	mov	r1, r6
 800b5ee:	f7f5 fb05 	bl	8000bfc <__aeabi_uldivmod>
 800b5f2:	4603      	mov	r3, r0
 800b5f4:	460c      	mov	r4, r1
 800b5f6:	461a      	mov	r2, r3
 800b5f8:	4b9a      	ldr	r3, [pc, #616]	; (800b864 <UART_SetConfig+0x6f4>)
 800b5fa:	fba3 1302 	umull	r1, r3, r3, r2
 800b5fe:	095b      	lsrs	r3, r3, #5
 800b600:	2164      	movs	r1, #100	; 0x64
 800b602:	fb01 f303 	mul.w	r3, r1, r3
 800b606:	1ad3      	subs	r3, r2, r3
 800b608:	011b      	lsls	r3, r3, #4
 800b60a:	3332      	adds	r3, #50	; 0x32
 800b60c:	4a95      	ldr	r2, [pc, #596]	; (800b864 <UART_SetConfig+0x6f4>)
 800b60e:	fba2 2303 	umull	r2, r3, r2, r3
 800b612:	095b      	lsrs	r3, r3, #5
 800b614:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b618:	4498      	add	r8, r3
 800b61a:	68bb      	ldr	r3, [r7, #8]
 800b61c:	469b      	mov	fp, r3
 800b61e:	f04f 0c00 	mov.w	ip, #0
 800b622:	46d9      	mov	r9, fp
 800b624:	46e2      	mov	sl, ip
 800b626:	eb19 0309 	adds.w	r3, r9, r9
 800b62a:	eb4a 040a 	adc.w	r4, sl, sl
 800b62e:	4699      	mov	r9, r3
 800b630:	46a2      	mov	sl, r4
 800b632:	eb19 090b 	adds.w	r9, r9, fp
 800b636:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b63a:	f04f 0100 	mov.w	r1, #0
 800b63e:	f04f 0200 	mov.w	r2, #0
 800b642:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b646:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b64a:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b64e:	4689      	mov	r9, r1
 800b650:	4692      	mov	sl, r2
 800b652:	eb1b 0509 	adds.w	r5, fp, r9
 800b656:	eb4c 060a 	adc.w	r6, ip, sl
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	685b      	ldr	r3, [r3, #4]
 800b65e:	4619      	mov	r1, r3
 800b660:	f04f 0200 	mov.w	r2, #0
 800b664:	f04f 0300 	mov.w	r3, #0
 800b668:	f04f 0400 	mov.w	r4, #0
 800b66c:	0094      	lsls	r4, r2, #2
 800b66e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b672:	008b      	lsls	r3, r1, #2
 800b674:	461a      	mov	r2, r3
 800b676:	4623      	mov	r3, r4
 800b678:	4628      	mov	r0, r5
 800b67a:	4631      	mov	r1, r6
 800b67c:	f7f5 fabe 	bl	8000bfc <__aeabi_uldivmod>
 800b680:	4603      	mov	r3, r0
 800b682:	460c      	mov	r4, r1
 800b684:	461a      	mov	r2, r3
 800b686:	4b77      	ldr	r3, [pc, #476]	; (800b864 <UART_SetConfig+0x6f4>)
 800b688:	fba3 1302 	umull	r1, r3, r3, r2
 800b68c:	095b      	lsrs	r3, r3, #5
 800b68e:	2164      	movs	r1, #100	; 0x64
 800b690:	fb01 f303 	mul.w	r3, r1, r3
 800b694:	1ad3      	subs	r3, r2, r3
 800b696:	011b      	lsls	r3, r3, #4
 800b698:	3332      	adds	r3, #50	; 0x32
 800b69a:	4a72      	ldr	r2, [pc, #456]	; (800b864 <UART_SetConfig+0x6f4>)
 800b69c:	fba2 2303 	umull	r2, r3, r2, r3
 800b6a0:	095b      	lsrs	r3, r3, #5
 800b6a2:	f003 020f 	and.w	r2, r3, #15
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	681b      	ldr	r3, [r3, #0]
 800b6aa:	4442      	add	r2, r8
 800b6ac:	609a      	str	r2, [r3, #8]
 800b6ae:	e0d0      	b.n	800b852 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800b6b0:	f7fd fa22 	bl	8008af8 <HAL_RCC_GetPCLK1Freq>
 800b6b4:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800b6b6:	68bb      	ldr	r3, [r7, #8]
 800b6b8:	469a      	mov	sl, r3
 800b6ba:	f04f 0b00 	mov.w	fp, #0
 800b6be:	46d0      	mov	r8, sl
 800b6c0:	46d9      	mov	r9, fp
 800b6c2:	eb18 0308 	adds.w	r3, r8, r8
 800b6c6:	eb49 0409 	adc.w	r4, r9, r9
 800b6ca:	4698      	mov	r8, r3
 800b6cc:	46a1      	mov	r9, r4
 800b6ce:	eb18 080a 	adds.w	r8, r8, sl
 800b6d2:	eb49 090b 	adc.w	r9, r9, fp
 800b6d6:	f04f 0100 	mov.w	r1, #0
 800b6da:	f04f 0200 	mov.w	r2, #0
 800b6de:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800b6e2:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800b6e6:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800b6ea:	4688      	mov	r8, r1
 800b6ec:	4691      	mov	r9, r2
 800b6ee:	eb1a 0508 	adds.w	r5, sl, r8
 800b6f2:	eb4b 0609 	adc.w	r6, fp, r9
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	4619      	mov	r1, r3
 800b6fc:	f04f 0200 	mov.w	r2, #0
 800b700:	f04f 0300 	mov.w	r3, #0
 800b704:	f04f 0400 	mov.w	r4, #0
 800b708:	0094      	lsls	r4, r2, #2
 800b70a:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b70e:	008b      	lsls	r3, r1, #2
 800b710:	461a      	mov	r2, r3
 800b712:	4623      	mov	r3, r4
 800b714:	4628      	mov	r0, r5
 800b716:	4631      	mov	r1, r6
 800b718:	f7f5 fa70 	bl	8000bfc <__aeabi_uldivmod>
 800b71c:	4603      	mov	r3, r0
 800b71e:	460c      	mov	r4, r1
 800b720:	461a      	mov	r2, r3
 800b722:	4b50      	ldr	r3, [pc, #320]	; (800b864 <UART_SetConfig+0x6f4>)
 800b724:	fba3 2302 	umull	r2, r3, r3, r2
 800b728:	095b      	lsrs	r3, r3, #5
 800b72a:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800b72e:	68bb      	ldr	r3, [r7, #8]
 800b730:	469b      	mov	fp, r3
 800b732:	f04f 0c00 	mov.w	ip, #0
 800b736:	46d9      	mov	r9, fp
 800b738:	46e2      	mov	sl, ip
 800b73a:	eb19 0309 	adds.w	r3, r9, r9
 800b73e:	eb4a 040a 	adc.w	r4, sl, sl
 800b742:	4699      	mov	r9, r3
 800b744:	46a2      	mov	sl, r4
 800b746:	eb19 090b 	adds.w	r9, r9, fp
 800b74a:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b74e:	f04f 0100 	mov.w	r1, #0
 800b752:	f04f 0200 	mov.w	r2, #0
 800b756:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b75a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b75e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b762:	4689      	mov	r9, r1
 800b764:	4692      	mov	sl, r2
 800b766:	eb1b 0509 	adds.w	r5, fp, r9
 800b76a:	eb4c 060a 	adc.w	r6, ip, sl
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	685b      	ldr	r3, [r3, #4]
 800b772:	4619      	mov	r1, r3
 800b774:	f04f 0200 	mov.w	r2, #0
 800b778:	f04f 0300 	mov.w	r3, #0
 800b77c:	f04f 0400 	mov.w	r4, #0
 800b780:	0094      	lsls	r4, r2, #2
 800b782:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b786:	008b      	lsls	r3, r1, #2
 800b788:	461a      	mov	r2, r3
 800b78a:	4623      	mov	r3, r4
 800b78c:	4628      	mov	r0, r5
 800b78e:	4631      	mov	r1, r6
 800b790:	f7f5 fa34 	bl	8000bfc <__aeabi_uldivmod>
 800b794:	4603      	mov	r3, r0
 800b796:	460c      	mov	r4, r1
 800b798:	461a      	mov	r2, r3
 800b79a:	4b32      	ldr	r3, [pc, #200]	; (800b864 <UART_SetConfig+0x6f4>)
 800b79c:	fba3 1302 	umull	r1, r3, r3, r2
 800b7a0:	095b      	lsrs	r3, r3, #5
 800b7a2:	2164      	movs	r1, #100	; 0x64
 800b7a4:	fb01 f303 	mul.w	r3, r1, r3
 800b7a8:	1ad3      	subs	r3, r2, r3
 800b7aa:	011b      	lsls	r3, r3, #4
 800b7ac:	3332      	adds	r3, #50	; 0x32
 800b7ae:	4a2d      	ldr	r2, [pc, #180]	; (800b864 <UART_SetConfig+0x6f4>)
 800b7b0:	fba2 2303 	umull	r2, r3, r2, r3
 800b7b4:	095b      	lsrs	r3, r3, #5
 800b7b6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b7ba:	4498      	add	r8, r3
 800b7bc:	68bb      	ldr	r3, [r7, #8]
 800b7be:	469b      	mov	fp, r3
 800b7c0:	f04f 0c00 	mov.w	ip, #0
 800b7c4:	46d9      	mov	r9, fp
 800b7c6:	46e2      	mov	sl, ip
 800b7c8:	eb19 0309 	adds.w	r3, r9, r9
 800b7cc:	eb4a 040a 	adc.w	r4, sl, sl
 800b7d0:	4699      	mov	r9, r3
 800b7d2:	46a2      	mov	sl, r4
 800b7d4:	eb19 090b 	adds.w	r9, r9, fp
 800b7d8:	eb4a 0a0c 	adc.w	sl, sl, ip
 800b7dc:	f04f 0100 	mov.w	r1, #0
 800b7e0:	f04f 0200 	mov.w	r2, #0
 800b7e4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800b7e8:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800b7ec:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800b7f0:	4689      	mov	r9, r1
 800b7f2:	4692      	mov	sl, r2
 800b7f4:	eb1b 0509 	adds.w	r5, fp, r9
 800b7f8:	eb4c 060a 	adc.w	r6, ip, sl
 800b7fc:	687b      	ldr	r3, [r7, #4]
 800b7fe:	685b      	ldr	r3, [r3, #4]
 800b800:	4619      	mov	r1, r3
 800b802:	f04f 0200 	mov.w	r2, #0
 800b806:	f04f 0300 	mov.w	r3, #0
 800b80a:	f04f 0400 	mov.w	r4, #0
 800b80e:	0094      	lsls	r4, r2, #2
 800b810:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800b814:	008b      	lsls	r3, r1, #2
 800b816:	461a      	mov	r2, r3
 800b818:	4623      	mov	r3, r4
 800b81a:	4628      	mov	r0, r5
 800b81c:	4631      	mov	r1, r6
 800b81e:	f7f5 f9ed 	bl	8000bfc <__aeabi_uldivmod>
 800b822:	4603      	mov	r3, r0
 800b824:	460c      	mov	r4, r1
 800b826:	461a      	mov	r2, r3
 800b828:	4b0e      	ldr	r3, [pc, #56]	; (800b864 <UART_SetConfig+0x6f4>)
 800b82a:	fba3 1302 	umull	r1, r3, r3, r2
 800b82e:	095b      	lsrs	r3, r3, #5
 800b830:	2164      	movs	r1, #100	; 0x64
 800b832:	fb01 f303 	mul.w	r3, r1, r3
 800b836:	1ad3      	subs	r3, r2, r3
 800b838:	011b      	lsls	r3, r3, #4
 800b83a:	3332      	adds	r3, #50	; 0x32
 800b83c:	4a09      	ldr	r2, [pc, #36]	; (800b864 <UART_SetConfig+0x6f4>)
 800b83e:	fba2 2303 	umull	r2, r3, r2, r3
 800b842:	095b      	lsrs	r3, r3, #5
 800b844:	f003 020f 	and.w	r2, r3, #15
 800b848:	687b      	ldr	r3, [r7, #4]
 800b84a:	681b      	ldr	r3, [r3, #0]
 800b84c:	4442      	add	r2, r8
 800b84e:	609a      	str	r2, [r3, #8]
}
 800b850:	e7ff      	b.n	800b852 <UART_SetConfig+0x6e2>
 800b852:	bf00      	nop
 800b854:	3714      	adds	r7, #20
 800b856:	46bd      	mov	sp, r7
 800b858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b85c:	40011000 	.word	0x40011000
 800b860:	40011400 	.word	0x40011400
 800b864:	51eb851f 	.word	0x51eb851f

0800b868 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800b868:	b480      	push	{r7}
 800b86a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800b86c:	bf00      	nop
 800b86e:	46bd      	mov	sp, r7
 800b870:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b874:	4770      	bx	lr
	...

0800b878 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800b878:	b480      	push	{r7}
 800b87a:	b085      	sub	sp, #20
 800b87c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b87e:	f3ef 8305 	mrs	r3, IPSR
 800b882:	60bb      	str	r3, [r7, #8]
  return(result);
 800b884:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b886:	2b00      	cmp	r3, #0
 800b888:	d10f      	bne.n	800b8aa <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b88a:	f3ef 8310 	mrs	r3, PRIMASK
 800b88e:	607b      	str	r3, [r7, #4]
  return(result);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2b00      	cmp	r3, #0
 800b894:	d105      	bne.n	800b8a2 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b896:	f3ef 8311 	mrs	r3, BASEPRI
 800b89a:	603b      	str	r3, [r7, #0]
  return(result);
 800b89c:	683b      	ldr	r3, [r7, #0]
 800b89e:	2b00      	cmp	r3, #0
 800b8a0:	d007      	beq.n	800b8b2 <osKernelInitialize+0x3a>
 800b8a2:	4b0e      	ldr	r3, [pc, #56]	; (800b8dc <osKernelInitialize+0x64>)
 800b8a4:	681b      	ldr	r3, [r3, #0]
 800b8a6:	2b02      	cmp	r3, #2
 800b8a8:	d103      	bne.n	800b8b2 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800b8aa:	f06f 0305 	mvn.w	r3, #5
 800b8ae:	60fb      	str	r3, [r7, #12]
 800b8b0:	e00c      	b.n	800b8cc <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800b8b2:	4b0a      	ldr	r3, [pc, #40]	; (800b8dc <osKernelInitialize+0x64>)
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d105      	bne.n	800b8c6 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800b8ba:	4b08      	ldr	r3, [pc, #32]	; (800b8dc <osKernelInitialize+0x64>)
 800b8bc:	2201      	movs	r2, #1
 800b8be:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800b8c0:	2300      	movs	r3, #0
 800b8c2:	60fb      	str	r3, [r7, #12]
 800b8c4:	e002      	b.n	800b8cc <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800b8c6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b8ca:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b8cc:	68fb      	ldr	r3, [r7, #12]
}
 800b8ce:	4618      	mov	r0, r3
 800b8d0:	3714      	adds	r7, #20
 800b8d2:	46bd      	mov	sp, r7
 800b8d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8d8:	4770      	bx	lr
 800b8da:	bf00      	nop
 800b8dc:	20000640 	.word	0x20000640

0800b8e0 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800b8e0:	b580      	push	{r7, lr}
 800b8e2:	b084      	sub	sp, #16
 800b8e4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b8e6:	f3ef 8305 	mrs	r3, IPSR
 800b8ea:	60bb      	str	r3, [r7, #8]
  return(result);
 800b8ec:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800b8ee:	2b00      	cmp	r3, #0
 800b8f0:	d10f      	bne.n	800b912 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b8f2:	f3ef 8310 	mrs	r3, PRIMASK
 800b8f6:	607b      	str	r3, [r7, #4]
  return(result);
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	2b00      	cmp	r3, #0
 800b8fc:	d105      	bne.n	800b90a <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b8fe:	f3ef 8311 	mrs	r3, BASEPRI
 800b902:	603b      	str	r3, [r7, #0]
  return(result);
 800b904:	683b      	ldr	r3, [r7, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d007      	beq.n	800b91a <osKernelStart+0x3a>
 800b90a:	4b0f      	ldr	r3, [pc, #60]	; (800b948 <osKernelStart+0x68>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	2b02      	cmp	r3, #2
 800b910:	d103      	bne.n	800b91a <osKernelStart+0x3a>
    stat = osErrorISR;
 800b912:	f06f 0305 	mvn.w	r3, #5
 800b916:	60fb      	str	r3, [r7, #12]
 800b918:	e010      	b.n	800b93c <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800b91a:	4b0b      	ldr	r3, [pc, #44]	; (800b948 <osKernelStart+0x68>)
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	2b01      	cmp	r3, #1
 800b920:	d109      	bne.n	800b936 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800b922:	f7ff ffa1 	bl	800b868 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800b926:	4b08      	ldr	r3, [pc, #32]	; (800b948 <osKernelStart+0x68>)
 800b928:	2202      	movs	r2, #2
 800b92a:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800b92c:	f001 f870 	bl	800ca10 <vTaskStartScheduler>
      stat = osOK;
 800b930:	2300      	movs	r3, #0
 800b932:	60fb      	str	r3, [r7, #12]
 800b934:	e002      	b.n	800b93c <osKernelStart+0x5c>
    } else {
      stat = osError;
 800b936:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b93a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800b93c:	68fb      	ldr	r3, [r7, #12]
}
 800b93e:	4618      	mov	r0, r3
 800b940:	3710      	adds	r7, #16
 800b942:	46bd      	mov	sp, r7
 800b944:	bd80      	pop	{r7, pc}
 800b946:	bf00      	nop
 800b948:	20000640 	.word	0x20000640

0800b94c <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b090      	sub	sp, #64	; 0x40
 800b950:	af04      	add	r7, sp, #16
 800b952:	60f8      	str	r0, [r7, #12]
 800b954:	60b9      	str	r1, [r7, #8]
 800b956:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800b958:	2300      	movs	r3, #0
 800b95a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800b95c:	f3ef 8305 	mrs	r3, IPSR
 800b960:	61fb      	str	r3, [r7, #28]
  return(result);
 800b962:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800b964:	2b00      	cmp	r3, #0
 800b966:	f040 808f 	bne.w	800ba88 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800b96a:	f3ef 8310 	mrs	r3, PRIMASK
 800b96e:	61bb      	str	r3, [r7, #24]
  return(result);
 800b970:	69bb      	ldr	r3, [r7, #24]
 800b972:	2b00      	cmp	r3, #0
 800b974:	d105      	bne.n	800b982 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800b976:	f3ef 8311 	mrs	r3, BASEPRI
 800b97a:	617b      	str	r3, [r7, #20]
  return(result);
 800b97c:	697b      	ldr	r3, [r7, #20]
 800b97e:	2b00      	cmp	r3, #0
 800b980:	d003      	beq.n	800b98a <osThreadNew+0x3e>
 800b982:	4b44      	ldr	r3, [pc, #272]	; (800ba94 <osThreadNew+0x148>)
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	2b02      	cmp	r3, #2
 800b988:	d07e      	beq.n	800ba88 <osThreadNew+0x13c>
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	2b00      	cmp	r3, #0
 800b98e:	d07b      	beq.n	800ba88 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800b990:	2380      	movs	r3, #128	; 0x80
 800b992:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800b994:	2318      	movs	r3, #24
 800b996:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800b998:	2300      	movs	r3, #0
 800b99a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800b99c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800b9a0:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800b9a2:	687b      	ldr	r3, [r7, #4]
 800b9a4:	2b00      	cmp	r3, #0
 800b9a6:	d045      	beq.n	800ba34 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800b9a8:	687b      	ldr	r3, [r7, #4]
 800b9aa:	681b      	ldr	r3, [r3, #0]
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d002      	beq.n	800b9b6 <osThreadNew+0x6a>
        name = attr->name;
 800b9b0:	687b      	ldr	r3, [r7, #4]
 800b9b2:	681b      	ldr	r3, [r3, #0]
 800b9b4:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800b9b6:	687b      	ldr	r3, [r7, #4]
 800b9b8:	699b      	ldr	r3, [r3, #24]
 800b9ba:	2b00      	cmp	r3, #0
 800b9bc:	d002      	beq.n	800b9c4 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800b9be:	687b      	ldr	r3, [r7, #4]
 800b9c0:	699b      	ldr	r3, [r3, #24]
 800b9c2:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800b9c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9c6:	2b00      	cmp	r3, #0
 800b9c8:	d008      	beq.n	800b9dc <osThreadNew+0x90>
 800b9ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b9cc:	2b38      	cmp	r3, #56	; 0x38
 800b9ce:	d805      	bhi.n	800b9dc <osThreadNew+0x90>
 800b9d0:	687b      	ldr	r3, [r7, #4]
 800b9d2:	685b      	ldr	r3, [r3, #4]
 800b9d4:	f003 0301 	and.w	r3, r3, #1
 800b9d8:	2b00      	cmp	r3, #0
 800b9da:	d001      	beq.n	800b9e0 <osThreadNew+0x94>
        return (NULL);
 800b9dc:	2300      	movs	r3, #0
 800b9de:	e054      	b.n	800ba8a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800b9e0:	687b      	ldr	r3, [r7, #4]
 800b9e2:	695b      	ldr	r3, [r3, #20]
 800b9e4:	2b00      	cmp	r3, #0
 800b9e6:	d003      	beq.n	800b9f0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800b9e8:	687b      	ldr	r3, [r7, #4]
 800b9ea:	695b      	ldr	r3, [r3, #20]
 800b9ec:	089b      	lsrs	r3, r3, #2
 800b9ee:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800b9f0:	687b      	ldr	r3, [r7, #4]
 800b9f2:	689b      	ldr	r3, [r3, #8]
 800b9f4:	2b00      	cmp	r3, #0
 800b9f6:	d00e      	beq.n	800ba16 <osThreadNew+0xca>
 800b9f8:	687b      	ldr	r3, [r7, #4]
 800b9fa:	68db      	ldr	r3, [r3, #12]
 800b9fc:	2b5b      	cmp	r3, #91	; 0x5b
 800b9fe:	d90a      	bls.n	800ba16 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ba00:	687b      	ldr	r3, [r7, #4]
 800ba02:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800ba04:	2b00      	cmp	r3, #0
 800ba06:	d006      	beq.n	800ba16 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	695b      	ldr	r3, [r3, #20]
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d002      	beq.n	800ba16 <osThreadNew+0xca>
        mem = 1;
 800ba10:	2301      	movs	r3, #1
 800ba12:	623b      	str	r3, [r7, #32]
 800ba14:	e010      	b.n	800ba38 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800ba16:	687b      	ldr	r3, [r7, #4]
 800ba18:	689b      	ldr	r3, [r3, #8]
 800ba1a:	2b00      	cmp	r3, #0
 800ba1c:	d10c      	bne.n	800ba38 <osThreadNew+0xec>
 800ba1e:	687b      	ldr	r3, [r7, #4]
 800ba20:	68db      	ldr	r3, [r3, #12]
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	d108      	bne.n	800ba38 <osThreadNew+0xec>
 800ba26:	687b      	ldr	r3, [r7, #4]
 800ba28:	691b      	ldr	r3, [r3, #16]
 800ba2a:	2b00      	cmp	r3, #0
 800ba2c:	d104      	bne.n	800ba38 <osThreadNew+0xec>
          mem = 0;
 800ba2e:	2300      	movs	r3, #0
 800ba30:	623b      	str	r3, [r7, #32]
 800ba32:	e001      	b.n	800ba38 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800ba34:	2300      	movs	r3, #0
 800ba36:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800ba38:	6a3b      	ldr	r3, [r7, #32]
 800ba3a:	2b01      	cmp	r3, #1
 800ba3c:	d110      	bne.n	800ba60 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ba3e:	687b      	ldr	r3, [r7, #4]
 800ba40:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800ba42:	687a      	ldr	r2, [r7, #4]
 800ba44:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800ba46:	9202      	str	r2, [sp, #8]
 800ba48:	9301      	str	r3, [sp, #4]
 800ba4a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba4c:	9300      	str	r3, [sp, #0]
 800ba4e:	68bb      	ldr	r3, [r7, #8]
 800ba50:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ba52:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba54:	68f8      	ldr	r0, [r7, #12]
 800ba56:	f000 fe09 	bl	800c66c <xTaskCreateStatic>
 800ba5a:	4603      	mov	r3, r0
 800ba5c:	613b      	str	r3, [r7, #16]
 800ba5e:	e013      	b.n	800ba88 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800ba60:	6a3b      	ldr	r3, [r7, #32]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d110      	bne.n	800ba88 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800ba66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ba68:	b29a      	uxth	r2, r3
 800ba6a:	f107 0310 	add.w	r3, r7, #16
 800ba6e:	9301      	str	r3, [sp, #4]
 800ba70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ba72:	9300      	str	r3, [sp, #0]
 800ba74:	68bb      	ldr	r3, [r7, #8]
 800ba76:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ba78:	68f8      	ldr	r0, [r7, #12]
 800ba7a:	f000 fe51 	bl	800c720 <xTaskCreate>
 800ba7e:	4603      	mov	r3, r0
 800ba80:	2b01      	cmp	r3, #1
 800ba82:	d001      	beq.n	800ba88 <osThreadNew+0x13c>
          hTask = NULL;
 800ba84:	2300      	movs	r3, #0
 800ba86:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800ba88:	693b      	ldr	r3, [r7, #16]
}
 800ba8a:	4618      	mov	r0, r3
 800ba8c:	3730      	adds	r7, #48	; 0x30
 800ba8e:	46bd      	mov	sp, r7
 800ba90:	bd80      	pop	{r7, pc}
 800ba92:	bf00      	nop
 800ba94:	20000640 	.word	0x20000640

0800ba98 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800ba98:	b580      	push	{r7, lr}
 800ba9a:	b086      	sub	sp, #24
 800ba9c:	af00      	add	r7, sp, #0
 800ba9e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800baa0:	f3ef 8305 	mrs	r3, IPSR
 800baa4:	613b      	str	r3, [r7, #16]
  return(result);
 800baa6:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800baa8:	2b00      	cmp	r3, #0
 800baaa:	d10f      	bne.n	800bacc <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800baac:	f3ef 8310 	mrs	r3, PRIMASK
 800bab0:	60fb      	str	r3, [r7, #12]
  return(result);
 800bab2:	68fb      	ldr	r3, [r7, #12]
 800bab4:	2b00      	cmp	r3, #0
 800bab6:	d105      	bne.n	800bac4 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800bab8:	f3ef 8311 	mrs	r3, BASEPRI
 800babc:	60bb      	str	r3, [r7, #8]
  return(result);
 800babe:	68bb      	ldr	r3, [r7, #8]
 800bac0:	2b00      	cmp	r3, #0
 800bac2:	d007      	beq.n	800bad4 <osDelay+0x3c>
 800bac4:	4b0a      	ldr	r3, [pc, #40]	; (800baf0 <osDelay+0x58>)
 800bac6:	681b      	ldr	r3, [r3, #0]
 800bac8:	2b02      	cmp	r3, #2
 800baca:	d103      	bne.n	800bad4 <osDelay+0x3c>
    stat = osErrorISR;
 800bacc:	f06f 0305 	mvn.w	r3, #5
 800bad0:	617b      	str	r3, [r7, #20]
 800bad2:	e007      	b.n	800bae4 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800bad4:	2300      	movs	r3, #0
 800bad6:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800bad8:	687b      	ldr	r3, [r7, #4]
 800bada:	2b00      	cmp	r3, #0
 800badc:	d002      	beq.n	800bae4 <osDelay+0x4c>
      vTaskDelay(ticks);
 800bade:	6878      	ldr	r0, [r7, #4]
 800bae0:	f000 ff62 	bl	800c9a8 <vTaskDelay>
    }
  }

  return (stat);
 800bae4:	697b      	ldr	r3, [r7, #20]
}
 800bae6:	4618      	mov	r0, r3
 800bae8:	3718      	adds	r7, #24
 800baea:	46bd      	mov	sp, r7
 800baec:	bd80      	pop	{r7, pc}
 800baee:	bf00      	nop
 800baf0:	20000640 	.word	0x20000640

0800baf4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800baf4:	b480      	push	{r7}
 800baf6:	b085      	sub	sp, #20
 800baf8:	af00      	add	r7, sp, #0
 800bafa:	60f8      	str	r0, [r7, #12]
 800bafc:	60b9      	str	r1, [r7, #8]
 800bafe:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	4a07      	ldr	r2, [pc, #28]	; (800bb20 <vApplicationGetIdleTaskMemory+0x2c>)
 800bb04:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800bb06:	68bb      	ldr	r3, [r7, #8]
 800bb08:	4a06      	ldr	r2, [pc, #24]	; (800bb24 <vApplicationGetIdleTaskMemory+0x30>)
 800bb0a:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800bb0c:	687b      	ldr	r3, [r7, #4]
 800bb0e:	2280      	movs	r2, #128	; 0x80
 800bb10:	601a      	str	r2, [r3, #0]
}
 800bb12:	bf00      	nop
 800bb14:	3714      	adds	r7, #20
 800bb16:	46bd      	mov	sp, r7
 800bb18:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb1c:	4770      	bx	lr
 800bb1e:	bf00      	nop
 800bb20:	20000644 	.word	0x20000644
 800bb24:	200006a0 	.word	0x200006a0

0800bb28 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800bb28:	b480      	push	{r7}
 800bb2a:	b085      	sub	sp, #20
 800bb2c:	af00      	add	r7, sp, #0
 800bb2e:	60f8      	str	r0, [r7, #12]
 800bb30:	60b9      	str	r1, [r7, #8]
 800bb32:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800bb34:	68fb      	ldr	r3, [r7, #12]
 800bb36:	4a07      	ldr	r2, [pc, #28]	; (800bb54 <vApplicationGetTimerTaskMemory+0x2c>)
 800bb38:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800bb3a:	68bb      	ldr	r3, [r7, #8]
 800bb3c:	4a06      	ldr	r2, [pc, #24]	; (800bb58 <vApplicationGetTimerTaskMemory+0x30>)
 800bb3e:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800bb40:	687b      	ldr	r3, [r7, #4]
 800bb42:	f44f 7280 	mov.w	r2, #256	; 0x100
 800bb46:	601a      	str	r2, [r3, #0]
}
 800bb48:	bf00      	nop
 800bb4a:	3714      	adds	r7, #20
 800bb4c:	46bd      	mov	sp, r7
 800bb4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb52:	4770      	bx	lr
 800bb54:	200008a0 	.word	0x200008a0
 800bb58:	200008fc 	.word	0x200008fc

0800bb5c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800bb5c:	b480      	push	{r7}
 800bb5e:	b083      	sub	sp, #12
 800bb60:	af00      	add	r7, sp, #0
 800bb62:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb64:	687b      	ldr	r3, [r7, #4]
 800bb66:	f103 0208 	add.w	r2, r3, #8
 800bb6a:	687b      	ldr	r3, [r7, #4]
 800bb6c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800bb74:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb76:	687b      	ldr	r3, [r7, #4]
 800bb78:	f103 0208 	add.w	r2, r3, #8
 800bb7c:	687b      	ldr	r3, [r7, #4]
 800bb7e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	f103 0208 	add.w	r2, r3, #8
 800bb86:	687b      	ldr	r3, [r7, #4]
 800bb88:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	2200      	movs	r2, #0
 800bb8e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800bb90:	bf00      	nop
 800bb92:	370c      	adds	r7, #12
 800bb94:	46bd      	mov	sp, r7
 800bb96:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb9a:	4770      	bx	lr

0800bb9c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800bb9c:	b480      	push	{r7}
 800bb9e:	b083      	sub	sp, #12
 800bba0:	af00      	add	r7, sp, #0
 800bba2:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800bba4:	687b      	ldr	r3, [r7, #4]
 800bba6:	2200      	movs	r2, #0
 800bba8:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800bbaa:	bf00      	nop
 800bbac:	370c      	adds	r7, #12
 800bbae:	46bd      	mov	sp, r7
 800bbb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbb4:	4770      	bx	lr

0800bbb6 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bbb6:	b480      	push	{r7}
 800bbb8:	b085      	sub	sp, #20
 800bbba:	af00      	add	r7, sp, #0
 800bbbc:	6078      	str	r0, [r7, #4]
 800bbbe:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800bbc0:	687b      	ldr	r3, [r7, #4]
 800bbc2:	685b      	ldr	r3, [r3, #4]
 800bbc4:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800bbc6:	683b      	ldr	r3, [r7, #0]
 800bbc8:	68fa      	ldr	r2, [r7, #12]
 800bbca:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800bbcc:	68fb      	ldr	r3, [r7, #12]
 800bbce:	689a      	ldr	r2, [r3, #8]
 800bbd0:	683b      	ldr	r3, [r7, #0]
 800bbd2:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	689b      	ldr	r3, [r3, #8]
 800bbd8:	683a      	ldr	r2, [r7, #0]
 800bbda:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800bbdc:	68fb      	ldr	r3, [r7, #12]
 800bbde:	683a      	ldr	r2, [r7, #0]
 800bbe0:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800bbe2:	683b      	ldr	r3, [r7, #0]
 800bbe4:	687a      	ldr	r2, [r7, #4]
 800bbe6:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bbe8:	687b      	ldr	r3, [r7, #4]
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	1c5a      	adds	r2, r3, #1
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	601a      	str	r2, [r3, #0]
}
 800bbf2:	bf00      	nop
 800bbf4:	3714      	adds	r7, #20
 800bbf6:	46bd      	mov	sp, r7
 800bbf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbfc:	4770      	bx	lr

0800bbfe <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800bbfe:	b480      	push	{r7}
 800bc00:	b085      	sub	sp, #20
 800bc02:	af00      	add	r7, sp, #0
 800bc04:	6078      	str	r0, [r7, #4]
 800bc06:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800bc08:	683b      	ldr	r3, [r7, #0]
 800bc0a:	681b      	ldr	r3, [r3, #0]
 800bc0c:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800bc0e:	68bb      	ldr	r3, [r7, #8]
 800bc10:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800bc14:	d103      	bne.n	800bc1e <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	691b      	ldr	r3, [r3, #16]
 800bc1a:	60fb      	str	r3, [r7, #12]
 800bc1c:	e00c      	b.n	800bc38 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800bc1e:	687b      	ldr	r3, [r7, #4]
 800bc20:	3308      	adds	r3, #8
 800bc22:	60fb      	str	r3, [r7, #12]
 800bc24:	e002      	b.n	800bc2c <vListInsert+0x2e>
 800bc26:	68fb      	ldr	r3, [r7, #12]
 800bc28:	685b      	ldr	r3, [r3, #4]
 800bc2a:	60fb      	str	r3, [r7, #12]
 800bc2c:	68fb      	ldr	r3, [r7, #12]
 800bc2e:	685b      	ldr	r3, [r3, #4]
 800bc30:	681b      	ldr	r3, [r3, #0]
 800bc32:	68ba      	ldr	r2, [r7, #8]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d2f6      	bcs.n	800bc26 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800bc38:	68fb      	ldr	r3, [r7, #12]
 800bc3a:	685a      	ldr	r2, [r3, #4]
 800bc3c:	683b      	ldr	r3, [r7, #0]
 800bc3e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800bc40:	683b      	ldr	r3, [r7, #0]
 800bc42:	685b      	ldr	r3, [r3, #4]
 800bc44:	683a      	ldr	r2, [r7, #0]
 800bc46:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800bc48:	683b      	ldr	r3, [r7, #0]
 800bc4a:	68fa      	ldr	r2, [r7, #12]
 800bc4c:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800bc4e:	68fb      	ldr	r3, [r7, #12]
 800bc50:	683a      	ldr	r2, [r7, #0]
 800bc52:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800bc54:	683b      	ldr	r3, [r7, #0]
 800bc56:	687a      	ldr	r2, [r7, #4]
 800bc58:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800bc5a:	687b      	ldr	r3, [r7, #4]
 800bc5c:	681b      	ldr	r3, [r3, #0]
 800bc5e:	1c5a      	adds	r2, r3, #1
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	601a      	str	r2, [r3, #0]
}
 800bc64:	bf00      	nop
 800bc66:	3714      	adds	r7, #20
 800bc68:	46bd      	mov	sp, r7
 800bc6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc6e:	4770      	bx	lr

0800bc70 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800bc70:	b480      	push	{r7}
 800bc72:	b085      	sub	sp, #20
 800bc74:	af00      	add	r7, sp, #0
 800bc76:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800bc78:	687b      	ldr	r3, [r7, #4]
 800bc7a:	691b      	ldr	r3, [r3, #16]
 800bc7c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800bc7e:	687b      	ldr	r3, [r7, #4]
 800bc80:	685b      	ldr	r3, [r3, #4]
 800bc82:	687a      	ldr	r2, [r7, #4]
 800bc84:	6892      	ldr	r2, [r2, #8]
 800bc86:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800bc88:	687b      	ldr	r3, [r7, #4]
 800bc8a:	689b      	ldr	r3, [r3, #8]
 800bc8c:	687a      	ldr	r2, [r7, #4]
 800bc8e:	6852      	ldr	r2, [r2, #4]
 800bc90:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800bc92:	68fb      	ldr	r3, [r7, #12]
 800bc94:	685b      	ldr	r3, [r3, #4]
 800bc96:	687a      	ldr	r2, [r7, #4]
 800bc98:	429a      	cmp	r2, r3
 800bc9a:	d103      	bne.n	800bca4 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800bc9c:	687b      	ldr	r3, [r7, #4]
 800bc9e:	689a      	ldr	r2, [r3, #8]
 800bca0:	68fb      	ldr	r3, [r7, #12]
 800bca2:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800bca4:	687b      	ldr	r3, [r7, #4]
 800bca6:	2200      	movs	r2, #0
 800bca8:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800bcaa:	68fb      	ldr	r3, [r7, #12]
 800bcac:	681b      	ldr	r3, [r3, #0]
 800bcae:	1e5a      	subs	r2, r3, #1
 800bcb0:	68fb      	ldr	r3, [r7, #12]
 800bcb2:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800bcb4:	68fb      	ldr	r3, [r7, #12]
 800bcb6:	681b      	ldr	r3, [r3, #0]
}
 800bcb8:	4618      	mov	r0, r3
 800bcba:	3714      	adds	r7, #20
 800bcbc:	46bd      	mov	sp, r7
 800bcbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bcc2:	4770      	bx	lr

0800bcc4 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800bcc4:	b580      	push	{r7, lr}
 800bcc6:	b084      	sub	sp, #16
 800bcc8:	af00      	add	r7, sp, #0
 800bcca:	6078      	str	r0, [r7, #4]
 800bccc:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800bcce:	687b      	ldr	r3, [r7, #4]
 800bcd0:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800bcd2:	68fb      	ldr	r3, [r7, #12]
 800bcd4:	2b00      	cmp	r3, #0
 800bcd6:	d109      	bne.n	800bcec <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800bcd8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bcdc:	f383 8811 	msr	BASEPRI, r3
 800bce0:	f3bf 8f6f 	isb	sy
 800bce4:	f3bf 8f4f 	dsb	sy
 800bce8:	60bb      	str	r3, [r7, #8]
 800bcea:	e7fe      	b.n	800bcea <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800bcec:	f002 f80e 	bl	800dd0c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	681a      	ldr	r2, [r3, #0]
 800bcf4:	68fb      	ldr	r3, [r7, #12]
 800bcf6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bcf8:	68f9      	ldr	r1, [r7, #12]
 800bcfa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bcfc:	fb01 f303 	mul.w	r3, r1, r3
 800bd00:	441a      	add	r2, r3
 800bd02:	68fb      	ldr	r3, [r7, #12]
 800bd04:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800bd06:	68fb      	ldr	r3, [r7, #12]
 800bd08:	2200      	movs	r2, #0
 800bd0a:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	681a      	ldr	r2, [r3, #0]
 800bd10:	68fb      	ldr	r3, [r7, #12]
 800bd12:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800bd14:	68fb      	ldr	r3, [r7, #12]
 800bd16:	681a      	ldr	r2, [r3, #0]
 800bd18:	68fb      	ldr	r3, [r7, #12]
 800bd1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bd1c:	3b01      	subs	r3, #1
 800bd1e:	68f9      	ldr	r1, [r7, #12]
 800bd20:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800bd22:	fb01 f303 	mul.w	r3, r1, r3
 800bd26:	441a      	add	r2, r3
 800bd28:	68fb      	ldr	r3, [r7, #12]
 800bd2a:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800bd2c:	68fb      	ldr	r3, [r7, #12]
 800bd2e:	22ff      	movs	r2, #255	; 0xff
 800bd30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800bd34:	68fb      	ldr	r3, [r7, #12]
 800bd36:	22ff      	movs	r2, #255	; 0xff
 800bd38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800bd3c:	683b      	ldr	r3, [r7, #0]
 800bd3e:	2b00      	cmp	r3, #0
 800bd40:	d114      	bne.n	800bd6c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800bd42:	68fb      	ldr	r3, [r7, #12]
 800bd44:	691b      	ldr	r3, [r3, #16]
 800bd46:	2b00      	cmp	r3, #0
 800bd48:	d01a      	beq.n	800bd80 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800bd4a:	68fb      	ldr	r3, [r7, #12]
 800bd4c:	3310      	adds	r3, #16
 800bd4e:	4618      	mov	r0, r3
 800bd50:	f001 f8de 	bl	800cf10 <xTaskRemoveFromEventList>
 800bd54:	4603      	mov	r3, r0
 800bd56:	2b00      	cmp	r3, #0
 800bd58:	d012      	beq.n	800bd80 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800bd5a:	4b0d      	ldr	r3, [pc, #52]	; (800bd90 <xQueueGenericReset+0xcc>)
 800bd5c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bd60:	601a      	str	r2, [r3, #0]
 800bd62:	f3bf 8f4f 	dsb	sy
 800bd66:	f3bf 8f6f 	isb	sy
 800bd6a:	e009      	b.n	800bd80 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800bd6c:	68fb      	ldr	r3, [r7, #12]
 800bd6e:	3310      	adds	r3, #16
 800bd70:	4618      	mov	r0, r3
 800bd72:	f7ff fef3 	bl	800bb5c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800bd76:	68fb      	ldr	r3, [r7, #12]
 800bd78:	3324      	adds	r3, #36	; 0x24
 800bd7a:	4618      	mov	r0, r3
 800bd7c:	f7ff feee 	bl	800bb5c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800bd80:	f001 fff2 	bl	800dd68 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800bd84:	2301      	movs	r3, #1
}
 800bd86:	4618      	mov	r0, r3
 800bd88:	3710      	adds	r7, #16
 800bd8a:	46bd      	mov	sp, r7
 800bd8c:	bd80      	pop	{r7, pc}
 800bd8e:	bf00      	nop
 800bd90:	e000ed04 	.word	0xe000ed04

0800bd94 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800bd94:	b580      	push	{r7, lr}
 800bd96:	b08e      	sub	sp, #56	; 0x38
 800bd98:	af02      	add	r7, sp, #8
 800bd9a:	60f8      	str	r0, [r7, #12]
 800bd9c:	60b9      	str	r1, [r7, #8]
 800bd9e:	607a      	str	r2, [r7, #4]
 800bda0:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800bda2:	68fb      	ldr	r3, [r7, #12]
 800bda4:	2b00      	cmp	r3, #0
 800bda6:	d109      	bne.n	800bdbc <xQueueGenericCreateStatic+0x28>
 800bda8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdac:	f383 8811 	msr	BASEPRI, r3
 800bdb0:	f3bf 8f6f 	isb	sy
 800bdb4:	f3bf 8f4f 	dsb	sy
 800bdb8:	62bb      	str	r3, [r7, #40]	; 0x28
 800bdba:	e7fe      	b.n	800bdba <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d109      	bne.n	800bdd6 <xQueueGenericCreateStatic+0x42>
 800bdc2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdc6:	f383 8811 	msr	BASEPRI, r3
 800bdca:	f3bf 8f6f 	isb	sy
 800bdce:	f3bf 8f4f 	dsb	sy
 800bdd2:	627b      	str	r3, [r7, #36]	; 0x24
 800bdd4:	e7fe      	b.n	800bdd4 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800bdd6:	687b      	ldr	r3, [r7, #4]
 800bdd8:	2b00      	cmp	r3, #0
 800bdda:	d002      	beq.n	800bde2 <xQueueGenericCreateStatic+0x4e>
 800bddc:	68bb      	ldr	r3, [r7, #8]
 800bdde:	2b00      	cmp	r3, #0
 800bde0:	d001      	beq.n	800bde6 <xQueueGenericCreateStatic+0x52>
 800bde2:	2301      	movs	r3, #1
 800bde4:	e000      	b.n	800bde8 <xQueueGenericCreateStatic+0x54>
 800bde6:	2300      	movs	r3, #0
 800bde8:	2b00      	cmp	r3, #0
 800bdea:	d109      	bne.n	800be00 <xQueueGenericCreateStatic+0x6c>
 800bdec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bdf0:	f383 8811 	msr	BASEPRI, r3
 800bdf4:	f3bf 8f6f 	isb	sy
 800bdf8:	f3bf 8f4f 	dsb	sy
 800bdfc:	623b      	str	r3, [r7, #32]
 800bdfe:	e7fe      	b.n	800bdfe <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800be00:	687b      	ldr	r3, [r7, #4]
 800be02:	2b00      	cmp	r3, #0
 800be04:	d102      	bne.n	800be0c <xQueueGenericCreateStatic+0x78>
 800be06:	68bb      	ldr	r3, [r7, #8]
 800be08:	2b00      	cmp	r3, #0
 800be0a:	d101      	bne.n	800be10 <xQueueGenericCreateStatic+0x7c>
 800be0c:	2301      	movs	r3, #1
 800be0e:	e000      	b.n	800be12 <xQueueGenericCreateStatic+0x7e>
 800be10:	2300      	movs	r3, #0
 800be12:	2b00      	cmp	r3, #0
 800be14:	d109      	bne.n	800be2a <xQueueGenericCreateStatic+0x96>
 800be16:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be1a:	f383 8811 	msr	BASEPRI, r3
 800be1e:	f3bf 8f6f 	isb	sy
 800be22:	f3bf 8f4f 	dsb	sy
 800be26:	61fb      	str	r3, [r7, #28]
 800be28:	e7fe      	b.n	800be28 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800be2a:	2350      	movs	r3, #80	; 0x50
 800be2c:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800be2e:	697b      	ldr	r3, [r7, #20]
 800be30:	2b50      	cmp	r3, #80	; 0x50
 800be32:	d009      	beq.n	800be48 <xQueueGenericCreateStatic+0xb4>
 800be34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800be38:	f383 8811 	msr	BASEPRI, r3
 800be3c:	f3bf 8f6f 	isb	sy
 800be40:	f3bf 8f4f 	dsb	sy
 800be44:	61bb      	str	r3, [r7, #24]
 800be46:	e7fe      	b.n	800be46 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800be48:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800be4a:	683b      	ldr	r3, [r7, #0]
 800be4c:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800be4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be50:	2b00      	cmp	r3, #0
 800be52:	d00d      	beq.n	800be70 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800be54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be56:	2201      	movs	r2, #1
 800be58:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800be5c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800be60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800be62:	9300      	str	r3, [sp, #0]
 800be64:	4613      	mov	r3, r2
 800be66:	687a      	ldr	r2, [r7, #4]
 800be68:	68b9      	ldr	r1, [r7, #8]
 800be6a:	68f8      	ldr	r0, [r7, #12]
 800be6c:	f000 f805 	bl	800be7a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800be70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800be72:	4618      	mov	r0, r3
 800be74:	3730      	adds	r7, #48	; 0x30
 800be76:	46bd      	mov	sp, r7
 800be78:	bd80      	pop	{r7, pc}

0800be7a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800be7a:	b580      	push	{r7, lr}
 800be7c:	b084      	sub	sp, #16
 800be7e:	af00      	add	r7, sp, #0
 800be80:	60f8      	str	r0, [r7, #12]
 800be82:	60b9      	str	r1, [r7, #8]
 800be84:	607a      	str	r2, [r7, #4]
 800be86:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800be88:	68bb      	ldr	r3, [r7, #8]
 800be8a:	2b00      	cmp	r3, #0
 800be8c:	d103      	bne.n	800be96 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800be8e:	69bb      	ldr	r3, [r7, #24]
 800be90:	69ba      	ldr	r2, [r7, #24]
 800be92:	601a      	str	r2, [r3, #0]
 800be94:	e002      	b.n	800be9c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800be96:	69bb      	ldr	r3, [r7, #24]
 800be98:	687a      	ldr	r2, [r7, #4]
 800be9a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800be9c:	69bb      	ldr	r3, [r7, #24]
 800be9e:	68fa      	ldr	r2, [r7, #12]
 800bea0:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800bea2:	69bb      	ldr	r3, [r7, #24]
 800bea4:	68ba      	ldr	r2, [r7, #8]
 800bea6:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800bea8:	2101      	movs	r1, #1
 800beaa:	69b8      	ldr	r0, [r7, #24]
 800beac:	f7ff ff0a 	bl	800bcc4 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800beb0:	69bb      	ldr	r3, [r7, #24]
 800beb2:	78fa      	ldrb	r2, [r7, #3]
 800beb4:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800beb8:	bf00      	nop
 800beba:	3710      	adds	r7, #16
 800bebc:	46bd      	mov	sp, r7
 800bebe:	bd80      	pop	{r7, pc}

0800bec0 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800bec0:	b580      	push	{r7, lr}
 800bec2:	b08e      	sub	sp, #56	; 0x38
 800bec4:	af00      	add	r7, sp, #0
 800bec6:	60f8      	str	r0, [r7, #12]
 800bec8:	60b9      	str	r1, [r7, #8]
 800beca:	607a      	str	r2, [r7, #4]
 800becc:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800bece:	2300      	movs	r3, #0
 800bed0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800bed2:	68fb      	ldr	r3, [r7, #12]
 800bed4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800bed6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bed8:	2b00      	cmp	r3, #0
 800beda:	d109      	bne.n	800bef0 <xQueueGenericSend+0x30>
 800bedc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bee0:	f383 8811 	msr	BASEPRI, r3
 800bee4:	f3bf 8f6f 	isb	sy
 800bee8:	f3bf 8f4f 	dsb	sy
 800beec:	62bb      	str	r3, [r7, #40]	; 0x28
 800beee:	e7fe      	b.n	800beee <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800bef0:	68bb      	ldr	r3, [r7, #8]
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d103      	bne.n	800befe <xQueueGenericSend+0x3e>
 800bef6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bef8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800befa:	2b00      	cmp	r3, #0
 800befc:	d101      	bne.n	800bf02 <xQueueGenericSend+0x42>
 800befe:	2301      	movs	r3, #1
 800bf00:	e000      	b.n	800bf04 <xQueueGenericSend+0x44>
 800bf02:	2300      	movs	r3, #0
 800bf04:	2b00      	cmp	r3, #0
 800bf06:	d109      	bne.n	800bf1c <xQueueGenericSend+0x5c>
 800bf08:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf0c:	f383 8811 	msr	BASEPRI, r3
 800bf10:	f3bf 8f6f 	isb	sy
 800bf14:	f3bf 8f4f 	dsb	sy
 800bf18:	627b      	str	r3, [r7, #36]	; 0x24
 800bf1a:	e7fe      	b.n	800bf1a <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800bf1c:	683b      	ldr	r3, [r7, #0]
 800bf1e:	2b02      	cmp	r3, #2
 800bf20:	d103      	bne.n	800bf2a <xQueueGenericSend+0x6a>
 800bf22:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf26:	2b01      	cmp	r3, #1
 800bf28:	d101      	bne.n	800bf2e <xQueueGenericSend+0x6e>
 800bf2a:	2301      	movs	r3, #1
 800bf2c:	e000      	b.n	800bf30 <xQueueGenericSend+0x70>
 800bf2e:	2300      	movs	r3, #0
 800bf30:	2b00      	cmp	r3, #0
 800bf32:	d109      	bne.n	800bf48 <xQueueGenericSend+0x88>
 800bf34:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf38:	f383 8811 	msr	BASEPRI, r3
 800bf3c:	f3bf 8f6f 	isb	sy
 800bf40:	f3bf 8f4f 	dsb	sy
 800bf44:	623b      	str	r3, [r7, #32]
 800bf46:	e7fe      	b.n	800bf46 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800bf48:	f001 f998 	bl	800d27c <xTaskGetSchedulerState>
 800bf4c:	4603      	mov	r3, r0
 800bf4e:	2b00      	cmp	r3, #0
 800bf50:	d102      	bne.n	800bf58 <xQueueGenericSend+0x98>
 800bf52:	687b      	ldr	r3, [r7, #4]
 800bf54:	2b00      	cmp	r3, #0
 800bf56:	d101      	bne.n	800bf5c <xQueueGenericSend+0x9c>
 800bf58:	2301      	movs	r3, #1
 800bf5a:	e000      	b.n	800bf5e <xQueueGenericSend+0x9e>
 800bf5c:	2300      	movs	r3, #0
 800bf5e:	2b00      	cmp	r3, #0
 800bf60:	d109      	bne.n	800bf76 <xQueueGenericSend+0xb6>
 800bf62:	f04f 0350 	mov.w	r3, #80	; 0x50
 800bf66:	f383 8811 	msr	BASEPRI, r3
 800bf6a:	f3bf 8f6f 	isb	sy
 800bf6e:	f3bf 8f4f 	dsb	sy
 800bf72:	61fb      	str	r3, [r7, #28]
 800bf74:	e7fe      	b.n	800bf74 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800bf76:	f001 fec9 	bl	800dd0c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800bf7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf7c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800bf7e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf80:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800bf82:	429a      	cmp	r2, r3
 800bf84:	d302      	bcc.n	800bf8c <xQueueGenericSend+0xcc>
 800bf86:	683b      	ldr	r3, [r7, #0]
 800bf88:	2b02      	cmp	r3, #2
 800bf8a:	d129      	bne.n	800bfe0 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800bf8c:	683a      	ldr	r2, [r7, #0]
 800bf8e:	68b9      	ldr	r1, [r7, #8]
 800bf90:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800bf92:	f000 f9ff 	bl	800c394 <prvCopyDataToQueue>
 800bf96:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800bf98:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bf9a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d010      	beq.n	800bfc2 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800bfa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800bfa2:	3324      	adds	r3, #36	; 0x24
 800bfa4:	4618      	mov	r0, r3
 800bfa6:	f000 ffb3 	bl	800cf10 <xTaskRemoveFromEventList>
 800bfaa:	4603      	mov	r3, r0
 800bfac:	2b00      	cmp	r3, #0
 800bfae:	d013      	beq.n	800bfd8 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800bfb0:	4b3f      	ldr	r3, [pc, #252]	; (800c0b0 <xQueueGenericSend+0x1f0>)
 800bfb2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfb6:	601a      	str	r2, [r3, #0]
 800bfb8:	f3bf 8f4f 	dsb	sy
 800bfbc:	f3bf 8f6f 	isb	sy
 800bfc0:	e00a      	b.n	800bfd8 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800bfc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800bfc4:	2b00      	cmp	r3, #0
 800bfc6:	d007      	beq.n	800bfd8 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800bfc8:	4b39      	ldr	r3, [pc, #228]	; (800c0b0 <xQueueGenericSend+0x1f0>)
 800bfca:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800bfce:	601a      	str	r2, [r3, #0]
 800bfd0:	f3bf 8f4f 	dsb	sy
 800bfd4:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800bfd8:	f001 fec6 	bl	800dd68 <vPortExitCritical>
				return pdPASS;
 800bfdc:	2301      	movs	r3, #1
 800bfde:	e063      	b.n	800c0a8 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800bfe0:	687b      	ldr	r3, [r7, #4]
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	d103      	bne.n	800bfee <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800bfe6:	f001 febf 	bl	800dd68 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800bfea:	2300      	movs	r3, #0
 800bfec:	e05c      	b.n	800c0a8 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800bfee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800bff0:	2b00      	cmp	r3, #0
 800bff2:	d106      	bne.n	800c002 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800bff4:	f107 0314 	add.w	r3, r7, #20
 800bff8:	4618      	mov	r0, r3
 800bffa:	f000 ffeb 	bl	800cfd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800bffe:	2301      	movs	r3, #1
 800c000:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c002:	f001 feb1 	bl	800dd68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c006:	f000 fd67 	bl	800cad8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c00a:	f001 fe7f 	bl	800dd0c <vPortEnterCritical>
 800c00e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c010:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c014:	b25b      	sxtb	r3, r3
 800c016:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c01a:	d103      	bne.n	800c024 <xQueueGenericSend+0x164>
 800c01c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c01e:	2200      	movs	r2, #0
 800c020:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c024:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c026:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c02a:	b25b      	sxtb	r3, r3
 800c02c:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c030:	d103      	bne.n	800c03a <xQueueGenericSend+0x17a>
 800c032:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c034:	2200      	movs	r2, #0
 800c036:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c03a:	f001 fe95 	bl	800dd68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c03e:	1d3a      	adds	r2, r7, #4
 800c040:	f107 0314 	add.w	r3, r7, #20
 800c044:	4611      	mov	r1, r2
 800c046:	4618      	mov	r0, r3
 800c048:	f000 ffda 	bl	800d000 <xTaskCheckForTimeOut>
 800c04c:	4603      	mov	r3, r0
 800c04e:	2b00      	cmp	r3, #0
 800c050:	d124      	bne.n	800c09c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800c052:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c054:	f000 fa96 	bl	800c584 <prvIsQueueFull>
 800c058:	4603      	mov	r3, r0
 800c05a:	2b00      	cmp	r3, #0
 800c05c:	d018      	beq.n	800c090 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800c05e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c060:	3310      	adds	r3, #16
 800c062:	687a      	ldr	r2, [r7, #4]
 800c064:	4611      	mov	r1, r2
 800c066:	4618      	mov	r0, r3
 800c068:	f000 ff04 	bl	800ce74 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800c06c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c06e:	f000 fa21 	bl	800c4b4 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800c072:	f000 fd3f 	bl	800caf4 <xTaskResumeAll>
 800c076:	4603      	mov	r3, r0
 800c078:	2b00      	cmp	r3, #0
 800c07a:	f47f af7c 	bne.w	800bf76 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800c07e:	4b0c      	ldr	r3, [pc, #48]	; (800c0b0 <xQueueGenericSend+0x1f0>)
 800c080:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c084:	601a      	str	r2, [r3, #0]
 800c086:	f3bf 8f4f 	dsb	sy
 800c08a:	f3bf 8f6f 	isb	sy
 800c08e:	e772      	b.n	800bf76 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800c090:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c092:	f000 fa0f 	bl	800c4b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c096:	f000 fd2d 	bl	800caf4 <xTaskResumeAll>
 800c09a:	e76c      	b.n	800bf76 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800c09c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c09e:	f000 fa09 	bl	800c4b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c0a2:	f000 fd27 	bl	800caf4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800c0a6:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800c0a8:	4618      	mov	r0, r3
 800c0aa:	3738      	adds	r7, #56	; 0x38
 800c0ac:	46bd      	mov	sp, r7
 800c0ae:	bd80      	pop	{r7, pc}
 800c0b0:	e000ed04 	.word	0xe000ed04

0800c0b4 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800c0b4:	b580      	push	{r7, lr}
 800c0b6:	b08e      	sub	sp, #56	; 0x38
 800c0b8:	af00      	add	r7, sp, #0
 800c0ba:	60f8      	str	r0, [r7, #12]
 800c0bc:	60b9      	str	r1, [r7, #8]
 800c0be:	607a      	str	r2, [r7, #4]
 800c0c0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800c0c2:	68fb      	ldr	r3, [r7, #12]
 800c0c4:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800c0c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0c8:	2b00      	cmp	r3, #0
 800c0ca:	d109      	bne.n	800c0e0 <xQueueGenericSendFromISR+0x2c>
 800c0cc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0d0:	f383 8811 	msr	BASEPRI, r3
 800c0d4:	f3bf 8f6f 	isb	sy
 800c0d8:	f3bf 8f4f 	dsb	sy
 800c0dc:	627b      	str	r3, [r7, #36]	; 0x24
 800c0de:	e7fe      	b.n	800c0de <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c0e0:	68bb      	ldr	r3, [r7, #8]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d103      	bne.n	800c0ee <xQueueGenericSendFromISR+0x3a>
 800c0e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c0e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c0ea:	2b00      	cmp	r3, #0
 800c0ec:	d101      	bne.n	800c0f2 <xQueueGenericSendFromISR+0x3e>
 800c0ee:	2301      	movs	r3, #1
 800c0f0:	e000      	b.n	800c0f4 <xQueueGenericSendFromISR+0x40>
 800c0f2:	2300      	movs	r3, #0
 800c0f4:	2b00      	cmp	r3, #0
 800c0f6:	d109      	bne.n	800c10c <xQueueGenericSendFromISR+0x58>
 800c0f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c0fc:	f383 8811 	msr	BASEPRI, r3
 800c100:	f3bf 8f6f 	isb	sy
 800c104:	f3bf 8f4f 	dsb	sy
 800c108:	623b      	str	r3, [r7, #32]
 800c10a:	e7fe      	b.n	800c10a <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800c10c:	683b      	ldr	r3, [r7, #0]
 800c10e:	2b02      	cmp	r3, #2
 800c110:	d103      	bne.n	800c11a <xQueueGenericSendFromISR+0x66>
 800c112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c114:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c116:	2b01      	cmp	r3, #1
 800c118:	d101      	bne.n	800c11e <xQueueGenericSendFromISR+0x6a>
 800c11a:	2301      	movs	r3, #1
 800c11c:	e000      	b.n	800c120 <xQueueGenericSendFromISR+0x6c>
 800c11e:	2300      	movs	r3, #0
 800c120:	2b00      	cmp	r3, #0
 800c122:	d109      	bne.n	800c138 <xQueueGenericSendFromISR+0x84>
 800c124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c128:	f383 8811 	msr	BASEPRI, r3
 800c12c:	f3bf 8f6f 	isb	sy
 800c130:	f3bf 8f4f 	dsb	sy
 800c134:	61fb      	str	r3, [r7, #28]
 800c136:	e7fe      	b.n	800c136 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800c138:	f001 fec4 	bl	800dec4 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800c13c:	f3ef 8211 	mrs	r2, BASEPRI
 800c140:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c144:	f383 8811 	msr	BASEPRI, r3
 800c148:	f3bf 8f6f 	isb	sy
 800c14c:	f3bf 8f4f 	dsb	sy
 800c150:	61ba      	str	r2, [r7, #24]
 800c152:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800c154:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800c156:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800c158:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c15c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c15e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c160:	429a      	cmp	r2, r3
 800c162:	d302      	bcc.n	800c16a <xQueueGenericSendFromISR+0xb6>
 800c164:	683b      	ldr	r3, [r7, #0]
 800c166:	2b02      	cmp	r3, #2
 800c168:	d12c      	bne.n	800c1c4 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800c16a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c16c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c170:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800c174:	683a      	ldr	r2, [r7, #0]
 800c176:	68b9      	ldr	r1, [r7, #8]
 800c178:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800c17a:	f000 f90b 	bl	800c394 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800c17e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800c182:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c186:	d112      	bne.n	800c1ae <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c18a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c18c:	2b00      	cmp	r3, #0
 800c18e:	d016      	beq.n	800c1be <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c192:	3324      	adds	r3, #36	; 0x24
 800c194:	4618      	mov	r0, r3
 800c196:	f000 febb 	bl	800cf10 <xTaskRemoveFromEventList>
 800c19a:	4603      	mov	r3, r0
 800c19c:	2b00      	cmp	r3, #0
 800c19e:	d00e      	beq.n	800c1be <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	2b00      	cmp	r3, #0
 800c1a4:	d00b      	beq.n	800c1be <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	601a      	str	r2, [r3, #0]
 800c1ac:	e007      	b.n	800c1be <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800c1ae:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800c1b2:	3301      	adds	r3, #1
 800c1b4:	b2db      	uxtb	r3, r3
 800c1b6:	b25a      	sxtb	r2, r3
 800c1b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c1ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800c1be:	2301      	movs	r3, #1
 800c1c0:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800c1c2:	e001      	b.n	800c1c8 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800c1c4:	2300      	movs	r3, #0
 800c1c6:	637b      	str	r3, [r7, #52]	; 0x34
 800c1c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c1ca:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800c1cc:	693b      	ldr	r3, [r7, #16]
 800c1ce:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800c1d2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800c1d4:	4618      	mov	r0, r3
 800c1d6:	3738      	adds	r7, #56	; 0x38
 800c1d8:	46bd      	mov	sp, r7
 800c1da:	bd80      	pop	{r7, pc}

0800c1dc <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800c1dc:	b580      	push	{r7, lr}
 800c1de:	b08c      	sub	sp, #48	; 0x30
 800c1e0:	af00      	add	r7, sp, #0
 800c1e2:	60f8      	str	r0, [r7, #12]
 800c1e4:	60b9      	str	r1, [r7, #8]
 800c1e6:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800c1e8:	2300      	movs	r3, #0
 800c1ea:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800c1ec:	68fb      	ldr	r3, [r7, #12]
 800c1ee:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800c1f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c1f2:	2b00      	cmp	r3, #0
 800c1f4:	d109      	bne.n	800c20a <xQueueReceive+0x2e>
	__asm volatile
 800c1f6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c1fa:	f383 8811 	msr	BASEPRI, r3
 800c1fe:	f3bf 8f6f 	isb	sy
 800c202:	f3bf 8f4f 	dsb	sy
 800c206:	623b      	str	r3, [r7, #32]
 800c208:	e7fe      	b.n	800c208 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800c20a:	68bb      	ldr	r3, [r7, #8]
 800c20c:	2b00      	cmp	r3, #0
 800c20e:	d103      	bne.n	800c218 <xQueueReceive+0x3c>
 800c210:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c212:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c214:	2b00      	cmp	r3, #0
 800c216:	d101      	bne.n	800c21c <xQueueReceive+0x40>
 800c218:	2301      	movs	r3, #1
 800c21a:	e000      	b.n	800c21e <xQueueReceive+0x42>
 800c21c:	2300      	movs	r3, #0
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d109      	bne.n	800c236 <xQueueReceive+0x5a>
 800c222:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c226:	f383 8811 	msr	BASEPRI, r3
 800c22a:	f3bf 8f6f 	isb	sy
 800c22e:	f3bf 8f4f 	dsb	sy
 800c232:	61fb      	str	r3, [r7, #28]
 800c234:	e7fe      	b.n	800c234 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800c236:	f001 f821 	bl	800d27c <xTaskGetSchedulerState>
 800c23a:	4603      	mov	r3, r0
 800c23c:	2b00      	cmp	r3, #0
 800c23e:	d102      	bne.n	800c246 <xQueueReceive+0x6a>
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2b00      	cmp	r3, #0
 800c244:	d101      	bne.n	800c24a <xQueueReceive+0x6e>
 800c246:	2301      	movs	r3, #1
 800c248:	e000      	b.n	800c24c <xQueueReceive+0x70>
 800c24a:	2300      	movs	r3, #0
 800c24c:	2b00      	cmp	r3, #0
 800c24e:	d109      	bne.n	800c264 <xQueueReceive+0x88>
 800c250:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c254:	f383 8811 	msr	BASEPRI, r3
 800c258:	f3bf 8f6f 	isb	sy
 800c25c:	f3bf 8f4f 	dsb	sy
 800c260:	61bb      	str	r3, [r7, #24]
 800c262:	e7fe      	b.n	800c262 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800c264:	f001 fd52 	bl	800dd0c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c268:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c26a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c26c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c26e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c270:	2b00      	cmp	r3, #0
 800c272:	d01f      	beq.n	800c2b4 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800c274:	68b9      	ldr	r1, [r7, #8]
 800c276:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c278:	f000 f8f6 	bl	800c468 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800c27c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c27e:	1e5a      	subs	r2, r3, #1
 800c280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c282:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c286:	691b      	ldr	r3, [r3, #16]
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d00f      	beq.n	800c2ac <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c28c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c28e:	3310      	adds	r3, #16
 800c290:	4618      	mov	r0, r3
 800c292:	f000 fe3d 	bl	800cf10 <xTaskRemoveFromEventList>
 800c296:	4603      	mov	r3, r0
 800c298:	2b00      	cmp	r3, #0
 800c29a:	d007      	beq.n	800c2ac <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800c29c:	4b3c      	ldr	r3, [pc, #240]	; (800c390 <xQueueReceive+0x1b4>)
 800c29e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c2a2:	601a      	str	r2, [r3, #0]
 800c2a4:	f3bf 8f4f 	dsb	sy
 800c2a8:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800c2ac:	f001 fd5c 	bl	800dd68 <vPortExitCritical>
				return pdPASS;
 800c2b0:	2301      	movs	r3, #1
 800c2b2:	e069      	b.n	800c388 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800c2b4:	687b      	ldr	r3, [r7, #4]
 800c2b6:	2b00      	cmp	r3, #0
 800c2b8:	d103      	bne.n	800c2c2 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800c2ba:	f001 fd55 	bl	800dd68 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800c2be:	2300      	movs	r3, #0
 800c2c0:	e062      	b.n	800c388 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800c2c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d106      	bne.n	800c2d6 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800c2c8:	f107 0310 	add.w	r3, r7, #16
 800c2cc:	4618      	mov	r0, r3
 800c2ce:	f000 fe81 	bl	800cfd4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800c2d2:	2301      	movs	r3, #1
 800c2d4:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800c2d6:	f001 fd47 	bl	800dd68 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800c2da:	f000 fbfd 	bl	800cad8 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800c2de:	f001 fd15 	bl	800dd0c <vPortEnterCritical>
 800c2e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2e4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c2e8:	b25b      	sxtb	r3, r3
 800c2ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c2ee:	d103      	bne.n	800c2f8 <xQueueReceive+0x11c>
 800c2f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2f2:	2200      	movs	r2, #0
 800c2f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c2f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c2fa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c2fe:	b25b      	sxtb	r3, r3
 800c300:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c304:	d103      	bne.n	800c30e <xQueueReceive+0x132>
 800c306:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c308:	2200      	movs	r2, #0
 800c30a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c30e:	f001 fd2b 	bl	800dd68 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800c312:	1d3a      	adds	r2, r7, #4
 800c314:	f107 0310 	add.w	r3, r7, #16
 800c318:	4611      	mov	r1, r2
 800c31a:	4618      	mov	r0, r3
 800c31c:	f000 fe70 	bl	800d000 <xTaskCheckForTimeOut>
 800c320:	4603      	mov	r3, r0
 800c322:	2b00      	cmp	r3, #0
 800c324:	d123      	bne.n	800c36e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c326:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c328:	f000 f916 	bl	800c558 <prvIsQueueEmpty>
 800c32c:	4603      	mov	r3, r0
 800c32e:	2b00      	cmp	r3, #0
 800c330:	d017      	beq.n	800c362 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800c332:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c334:	3324      	adds	r3, #36	; 0x24
 800c336:	687a      	ldr	r2, [r7, #4]
 800c338:	4611      	mov	r1, r2
 800c33a:	4618      	mov	r0, r3
 800c33c:	f000 fd9a 	bl	800ce74 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800c340:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c342:	f000 f8b7 	bl	800c4b4 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800c346:	f000 fbd5 	bl	800caf4 <xTaskResumeAll>
 800c34a:	4603      	mov	r3, r0
 800c34c:	2b00      	cmp	r3, #0
 800c34e:	d189      	bne.n	800c264 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800c350:	4b0f      	ldr	r3, [pc, #60]	; (800c390 <xQueueReceive+0x1b4>)
 800c352:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c356:	601a      	str	r2, [r3, #0]
 800c358:	f3bf 8f4f 	dsb	sy
 800c35c:	f3bf 8f6f 	isb	sy
 800c360:	e780      	b.n	800c264 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800c362:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c364:	f000 f8a6 	bl	800c4b4 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800c368:	f000 fbc4 	bl	800caf4 <xTaskResumeAll>
 800c36c:	e77a      	b.n	800c264 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800c36e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c370:	f000 f8a0 	bl	800c4b4 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800c374:	f000 fbbe 	bl	800caf4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800c378:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800c37a:	f000 f8ed 	bl	800c558 <prvIsQueueEmpty>
 800c37e:	4603      	mov	r3, r0
 800c380:	2b00      	cmp	r3, #0
 800c382:	f43f af6f 	beq.w	800c264 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800c386:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800c388:	4618      	mov	r0, r3
 800c38a:	3730      	adds	r7, #48	; 0x30
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	e000ed04 	.word	0xe000ed04

0800c394 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b086      	sub	sp, #24
 800c398:	af00      	add	r7, sp, #0
 800c39a:	60f8      	str	r0, [r7, #12]
 800c39c:	60b9      	str	r1, [r7, #8]
 800c39e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800c3a0:	2300      	movs	r3, #0
 800c3a2:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c3a8:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ae:	2b00      	cmp	r3, #0
 800c3b0:	d10d      	bne.n	800c3ce <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800c3b2:	68fb      	ldr	r3, [r7, #12]
 800c3b4:	681b      	ldr	r3, [r3, #0]
 800c3b6:	2b00      	cmp	r3, #0
 800c3b8:	d14d      	bne.n	800c456 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800c3ba:	68fb      	ldr	r3, [r7, #12]
 800c3bc:	689b      	ldr	r3, [r3, #8]
 800c3be:	4618      	mov	r0, r3
 800c3c0:	f000 ff7a 	bl	800d2b8 <xTaskPriorityDisinherit>
 800c3c4:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800c3c6:	68fb      	ldr	r3, [r7, #12]
 800c3c8:	2200      	movs	r2, #0
 800c3ca:	609a      	str	r2, [r3, #8]
 800c3cc:	e043      	b.n	800c456 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800c3ce:	687b      	ldr	r3, [r7, #4]
 800c3d0:	2b00      	cmp	r3, #0
 800c3d2:	d119      	bne.n	800c408 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c3d4:	68fb      	ldr	r3, [r7, #12]
 800c3d6:	6858      	ldr	r0, [r3, #4]
 800c3d8:	68fb      	ldr	r3, [r7, #12]
 800c3da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3dc:	461a      	mov	r2, r3
 800c3de:	68b9      	ldr	r1, [r7, #8]
 800c3e0:	f001 ffb2 	bl	800e348 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c3e4:	68fb      	ldr	r3, [r7, #12]
 800c3e6:	685a      	ldr	r2, [r3, #4]
 800c3e8:	68fb      	ldr	r3, [r7, #12]
 800c3ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c3ec:	441a      	add	r2, r3
 800c3ee:	68fb      	ldr	r3, [r7, #12]
 800c3f0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	685a      	ldr	r2, [r3, #4]
 800c3f6:	68fb      	ldr	r3, [r7, #12]
 800c3f8:	689b      	ldr	r3, [r3, #8]
 800c3fa:	429a      	cmp	r2, r3
 800c3fc:	d32b      	bcc.n	800c456 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800c3fe:	68fb      	ldr	r3, [r7, #12]
 800c400:	681a      	ldr	r2, [r3, #0]
 800c402:	68fb      	ldr	r3, [r7, #12]
 800c404:	605a      	str	r2, [r3, #4]
 800c406:	e026      	b.n	800c456 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800c408:	68fb      	ldr	r3, [r7, #12]
 800c40a:	68d8      	ldr	r0, [r3, #12]
 800c40c:	68fb      	ldr	r3, [r7, #12]
 800c40e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c410:	461a      	mov	r2, r3
 800c412:	68b9      	ldr	r1, [r7, #8]
 800c414:	f001 ff98 	bl	800e348 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800c418:	68fb      	ldr	r3, [r7, #12]
 800c41a:	68da      	ldr	r2, [r3, #12]
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c420:	425b      	negs	r3, r3
 800c422:	441a      	add	r2, r3
 800c424:	68fb      	ldr	r3, [r7, #12]
 800c426:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800c428:	68fb      	ldr	r3, [r7, #12]
 800c42a:	68da      	ldr	r2, [r3, #12]
 800c42c:	68fb      	ldr	r3, [r7, #12]
 800c42e:	681b      	ldr	r3, [r3, #0]
 800c430:	429a      	cmp	r2, r3
 800c432:	d207      	bcs.n	800c444 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800c434:	68fb      	ldr	r3, [r7, #12]
 800c436:	689a      	ldr	r2, [r3, #8]
 800c438:	68fb      	ldr	r3, [r7, #12]
 800c43a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c43c:	425b      	negs	r3, r3
 800c43e:	441a      	add	r2, r3
 800c440:	68fb      	ldr	r3, [r7, #12]
 800c442:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800c444:	687b      	ldr	r3, [r7, #4]
 800c446:	2b02      	cmp	r3, #2
 800c448:	d105      	bne.n	800c456 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800c44a:	693b      	ldr	r3, [r7, #16]
 800c44c:	2b00      	cmp	r3, #0
 800c44e:	d002      	beq.n	800c456 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800c450:	693b      	ldr	r3, [r7, #16]
 800c452:	3b01      	subs	r3, #1
 800c454:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800c456:	693b      	ldr	r3, [r7, #16]
 800c458:	1c5a      	adds	r2, r3, #1
 800c45a:	68fb      	ldr	r3, [r7, #12]
 800c45c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800c45e:	697b      	ldr	r3, [r7, #20]
}
 800c460:	4618      	mov	r0, r3
 800c462:	3718      	adds	r7, #24
 800c464:	46bd      	mov	sp, r7
 800c466:	bd80      	pop	{r7, pc}

0800c468 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800c468:	b580      	push	{r7, lr}
 800c46a:	b082      	sub	sp, #8
 800c46c:	af00      	add	r7, sp, #0
 800c46e:	6078      	str	r0, [r7, #4]
 800c470:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c476:	2b00      	cmp	r3, #0
 800c478:	d018      	beq.n	800c4ac <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800c47a:	687b      	ldr	r3, [r7, #4]
 800c47c:	68da      	ldr	r2, [r3, #12]
 800c47e:	687b      	ldr	r3, [r7, #4]
 800c480:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c482:	441a      	add	r2, r3
 800c484:	687b      	ldr	r3, [r7, #4]
 800c486:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800c488:	687b      	ldr	r3, [r7, #4]
 800c48a:	68da      	ldr	r2, [r3, #12]
 800c48c:	687b      	ldr	r3, [r7, #4]
 800c48e:	689b      	ldr	r3, [r3, #8]
 800c490:	429a      	cmp	r2, r3
 800c492:	d303      	bcc.n	800c49c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800c494:	687b      	ldr	r3, [r7, #4]
 800c496:	681a      	ldr	r2, [r3, #0]
 800c498:	687b      	ldr	r3, [r7, #4]
 800c49a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800c49c:	687b      	ldr	r3, [r7, #4]
 800c49e:	68d9      	ldr	r1, [r3, #12]
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800c4a4:	461a      	mov	r2, r3
 800c4a6:	6838      	ldr	r0, [r7, #0]
 800c4a8:	f001 ff4e 	bl	800e348 <memcpy>
	}
}
 800c4ac:	bf00      	nop
 800c4ae:	3708      	adds	r7, #8
 800c4b0:	46bd      	mov	sp, r7
 800c4b2:	bd80      	pop	{r7, pc}

0800c4b4 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800c4b4:	b580      	push	{r7, lr}
 800c4b6:	b084      	sub	sp, #16
 800c4b8:	af00      	add	r7, sp, #0
 800c4ba:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800c4bc:	f001 fc26 	bl	800dd0c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800c4c0:	687b      	ldr	r3, [r7, #4]
 800c4c2:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c4c6:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c4c8:	e011      	b.n	800c4ee <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800c4ca:	687b      	ldr	r3, [r7, #4]
 800c4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c4ce:	2b00      	cmp	r3, #0
 800c4d0:	d012      	beq.n	800c4f8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	3324      	adds	r3, #36	; 0x24
 800c4d6:	4618      	mov	r0, r3
 800c4d8:	f000 fd1a 	bl	800cf10 <xTaskRemoveFromEventList>
 800c4dc:	4603      	mov	r3, r0
 800c4de:	2b00      	cmp	r3, #0
 800c4e0:	d001      	beq.n	800c4e6 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800c4e2:	f000 fded 	bl	800d0c0 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800c4e6:	7bfb      	ldrb	r3, [r7, #15]
 800c4e8:	3b01      	subs	r3, #1
 800c4ea:	b2db      	uxtb	r3, r3
 800c4ec:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800c4ee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800c4f2:	2b00      	cmp	r3, #0
 800c4f4:	dce9      	bgt.n	800c4ca <prvUnlockQueue+0x16>
 800c4f6:	e000      	b.n	800c4fa <prvUnlockQueue+0x46>
					break;
 800c4f8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800c4fa:	687b      	ldr	r3, [r7, #4]
 800c4fc:	22ff      	movs	r2, #255	; 0xff
 800c4fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800c502:	f001 fc31 	bl	800dd68 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800c506:	f001 fc01 	bl	800dd0c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c510:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c512:	e011      	b.n	800c538 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	691b      	ldr	r3, [r3, #16]
 800c518:	2b00      	cmp	r3, #0
 800c51a:	d012      	beq.n	800c542 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800c51c:	687b      	ldr	r3, [r7, #4]
 800c51e:	3310      	adds	r3, #16
 800c520:	4618      	mov	r0, r3
 800c522:	f000 fcf5 	bl	800cf10 <xTaskRemoveFromEventList>
 800c526:	4603      	mov	r3, r0
 800c528:	2b00      	cmp	r3, #0
 800c52a:	d001      	beq.n	800c530 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800c52c:	f000 fdc8 	bl	800d0c0 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800c530:	7bbb      	ldrb	r3, [r7, #14]
 800c532:	3b01      	subs	r3, #1
 800c534:	b2db      	uxtb	r3, r3
 800c536:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800c538:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800c53c:	2b00      	cmp	r3, #0
 800c53e:	dce9      	bgt.n	800c514 <prvUnlockQueue+0x60>
 800c540:	e000      	b.n	800c544 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800c542:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	22ff      	movs	r2, #255	; 0xff
 800c548:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800c54c:	f001 fc0c 	bl	800dd68 <vPortExitCritical>
}
 800c550:	bf00      	nop
 800c552:	3710      	adds	r7, #16
 800c554:	46bd      	mov	sp, r7
 800c556:	bd80      	pop	{r7, pc}

0800c558 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800c558:	b580      	push	{r7, lr}
 800c55a:	b084      	sub	sp, #16
 800c55c:	af00      	add	r7, sp, #0
 800c55e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c560:	f001 fbd4 	bl	800dd0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800c564:	687b      	ldr	r3, [r7, #4]
 800c566:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c568:	2b00      	cmp	r3, #0
 800c56a:	d102      	bne.n	800c572 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800c56c:	2301      	movs	r3, #1
 800c56e:	60fb      	str	r3, [r7, #12]
 800c570:	e001      	b.n	800c576 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800c572:	2300      	movs	r3, #0
 800c574:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c576:	f001 fbf7 	bl	800dd68 <vPortExitCritical>

	return xReturn;
 800c57a:	68fb      	ldr	r3, [r7, #12]
}
 800c57c:	4618      	mov	r0, r3
 800c57e:	3710      	adds	r7, #16
 800c580:	46bd      	mov	sp, r7
 800c582:	bd80      	pop	{r7, pc}

0800c584 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800c584:	b580      	push	{r7, lr}
 800c586:	b084      	sub	sp, #16
 800c588:	af00      	add	r7, sp, #0
 800c58a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800c58c:	f001 fbbe 	bl	800dd0c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800c590:	687b      	ldr	r3, [r7, #4]
 800c592:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800c594:	687b      	ldr	r3, [r7, #4]
 800c596:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c598:	429a      	cmp	r2, r3
 800c59a:	d102      	bne.n	800c5a2 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800c59c:	2301      	movs	r3, #1
 800c59e:	60fb      	str	r3, [r7, #12]
 800c5a0:	e001      	b.n	800c5a6 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800c5a2:	2300      	movs	r3, #0
 800c5a4:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800c5a6:	f001 fbdf 	bl	800dd68 <vPortExitCritical>

	return xReturn;
 800c5aa:	68fb      	ldr	r3, [r7, #12]
}
 800c5ac:	4618      	mov	r0, r3
 800c5ae:	3710      	adds	r7, #16
 800c5b0:	46bd      	mov	sp, r7
 800c5b2:	bd80      	pop	{r7, pc}

0800c5b4 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800c5b4:	b480      	push	{r7}
 800c5b6:	b085      	sub	sp, #20
 800c5b8:	af00      	add	r7, sp, #0
 800c5ba:	6078      	str	r0, [r7, #4]
 800c5bc:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c5be:	2300      	movs	r3, #0
 800c5c0:	60fb      	str	r3, [r7, #12]
 800c5c2:	e014      	b.n	800c5ee <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800c5c4:	4a0e      	ldr	r2, [pc, #56]	; (800c600 <vQueueAddToRegistry+0x4c>)
 800c5c6:	68fb      	ldr	r3, [r7, #12]
 800c5c8:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d10b      	bne.n	800c5e8 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800c5d0:	490b      	ldr	r1, [pc, #44]	; (800c600 <vQueueAddToRegistry+0x4c>)
 800c5d2:	68fb      	ldr	r3, [r7, #12]
 800c5d4:	683a      	ldr	r2, [r7, #0]
 800c5d6:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800c5da:	4a09      	ldr	r2, [pc, #36]	; (800c600 <vQueueAddToRegistry+0x4c>)
 800c5dc:	68fb      	ldr	r3, [r7, #12]
 800c5de:	00db      	lsls	r3, r3, #3
 800c5e0:	4413      	add	r3, r2
 800c5e2:	687a      	ldr	r2, [r7, #4]
 800c5e4:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800c5e6:	e005      	b.n	800c5f4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	3301      	adds	r3, #1
 800c5ec:	60fb      	str	r3, [r7, #12]
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2b07      	cmp	r3, #7
 800c5f2:	d9e7      	bls.n	800c5c4 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800c5f4:	bf00      	nop
 800c5f6:	3714      	adds	r7, #20
 800c5f8:	46bd      	mov	sp, r7
 800c5fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c5fe:	4770      	bx	lr
 800c600:	200051f0 	.word	0x200051f0

0800c604 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800c604:	b580      	push	{r7, lr}
 800c606:	b086      	sub	sp, #24
 800c608:	af00      	add	r7, sp, #0
 800c60a:	60f8      	str	r0, [r7, #12]
 800c60c:	60b9      	str	r1, [r7, #8]
 800c60e:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800c610:	68fb      	ldr	r3, [r7, #12]
 800c612:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800c614:	f001 fb7a 	bl	800dd0c <vPortEnterCritical>
 800c618:	697b      	ldr	r3, [r7, #20]
 800c61a:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800c61e:	b25b      	sxtb	r3, r3
 800c620:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c624:	d103      	bne.n	800c62e <vQueueWaitForMessageRestricted+0x2a>
 800c626:	697b      	ldr	r3, [r7, #20]
 800c628:	2200      	movs	r2, #0
 800c62a:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800c62e:	697b      	ldr	r3, [r7, #20]
 800c630:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800c634:	b25b      	sxtb	r3, r3
 800c636:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c63a:	d103      	bne.n	800c644 <vQueueWaitForMessageRestricted+0x40>
 800c63c:	697b      	ldr	r3, [r7, #20]
 800c63e:	2200      	movs	r2, #0
 800c640:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800c644:	f001 fb90 	bl	800dd68 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800c648:	697b      	ldr	r3, [r7, #20]
 800c64a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c64c:	2b00      	cmp	r3, #0
 800c64e:	d106      	bne.n	800c65e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800c650:	697b      	ldr	r3, [r7, #20]
 800c652:	3324      	adds	r3, #36	; 0x24
 800c654:	687a      	ldr	r2, [r7, #4]
 800c656:	68b9      	ldr	r1, [r7, #8]
 800c658:	4618      	mov	r0, r3
 800c65a:	f000 fc2f 	bl	800cebc <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800c65e:	6978      	ldr	r0, [r7, #20]
 800c660:	f7ff ff28 	bl	800c4b4 <prvUnlockQueue>
	}
 800c664:	bf00      	nop
 800c666:	3718      	adds	r7, #24
 800c668:	46bd      	mov	sp, r7
 800c66a:	bd80      	pop	{r7, pc}

0800c66c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800c66c:	b580      	push	{r7, lr}
 800c66e:	b08e      	sub	sp, #56	; 0x38
 800c670:	af04      	add	r7, sp, #16
 800c672:	60f8      	str	r0, [r7, #12]
 800c674:	60b9      	str	r1, [r7, #8]
 800c676:	607a      	str	r2, [r7, #4]
 800c678:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800c67a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c67c:	2b00      	cmp	r3, #0
 800c67e:	d109      	bne.n	800c694 <xTaskCreateStatic+0x28>
 800c680:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c684:	f383 8811 	msr	BASEPRI, r3
 800c688:	f3bf 8f6f 	isb	sy
 800c68c:	f3bf 8f4f 	dsb	sy
 800c690:	623b      	str	r3, [r7, #32]
 800c692:	e7fe      	b.n	800c692 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800c694:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c696:	2b00      	cmp	r3, #0
 800c698:	d109      	bne.n	800c6ae <xTaskCreateStatic+0x42>
 800c69a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c69e:	f383 8811 	msr	BASEPRI, r3
 800c6a2:	f3bf 8f6f 	isb	sy
 800c6a6:	f3bf 8f4f 	dsb	sy
 800c6aa:	61fb      	str	r3, [r7, #28]
 800c6ac:	e7fe      	b.n	800c6ac <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800c6ae:	235c      	movs	r3, #92	; 0x5c
 800c6b0:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800c6b2:	693b      	ldr	r3, [r7, #16]
 800c6b4:	2b5c      	cmp	r3, #92	; 0x5c
 800c6b6:	d009      	beq.n	800c6cc <xTaskCreateStatic+0x60>
 800c6b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c6bc:	f383 8811 	msr	BASEPRI, r3
 800c6c0:	f3bf 8f6f 	isb	sy
 800c6c4:	f3bf 8f4f 	dsb	sy
 800c6c8:	61bb      	str	r3, [r7, #24]
 800c6ca:	e7fe      	b.n	800c6ca <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800c6cc:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800c6ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6d0:	2b00      	cmp	r3, #0
 800c6d2:	d01e      	beq.n	800c712 <xTaskCreateStatic+0xa6>
 800c6d4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c6d6:	2b00      	cmp	r3, #0
 800c6d8:	d01b      	beq.n	800c712 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800c6da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c6dc:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800c6de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800c6e2:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800c6e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6e6:	2202      	movs	r2, #2
 800c6e8:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800c6ec:	2300      	movs	r3, #0
 800c6ee:	9303      	str	r3, [sp, #12]
 800c6f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c6f2:	9302      	str	r3, [sp, #8]
 800c6f4:	f107 0314 	add.w	r3, r7, #20
 800c6f8:	9301      	str	r3, [sp, #4]
 800c6fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c6fc:	9300      	str	r3, [sp, #0]
 800c6fe:	683b      	ldr	r3, [r7, #0]
 800c700:	687a      	ldr	r2, [r7, #4]
 800c702:	68b9      	ldr	r1, [r7, #8]
 800c704:	68f8      	ldr	r0, [r7, #12]
 800c706:	f000 f850 	bl	800c7aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c70a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800c70c:	f000 f8dc 	bl	800c8c8 <prvAddNewTaskToReadyList>
 800c710:	e001      	b.n	800c716 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800c712:	2300      	movs	r3, #0
 800c714:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800c716:	697b      	ldr	r3, [r7, #20]
	}
 800c718:	4618      	mov	r0, r3
 800c71a:	3728      	adds	r7, #40	; 0x28
 800c71c:	46bd      	mov	sp, r7
 800c71e:	bd80      	pop	{r7, pc}

0800c720 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800c720:	b580      	push	{r7, lr}
 800c722:	b08c      	sub	sp, #48	; 0x30
 800c724:	af04      	add	r7, sp, #16
 800c726:	60f8      	str	r0, [r7, #12]
 800c728:	60b9      	str	r1, [r7, #8]
 800c72a:	603b      	str	r3, [r7, #0]
 800c72c:	4613      	mov	r3, r2
 800c72e:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800c730:	88fb      	ldrh	r3, [r7, #6]
 800c732:	009b      	lsls	r3, r3, #2
 800c734:	4618      	mov	r0, r3
 800c736:	f001 fc03 	bl	800df40 <pvPortMalloc>
 800c73a:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800c73c:	697b      	ldr	r3, [r7, #20]
 800c73e:	2b00      	cmp	r3, #0
 800c740:	d00e      	beq.n	800c760 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800c742:	205c      	movs	r0, #92	; 0x5c
 800c744:	f001 fbfc 	bl	800df40 <pvPortMalloc>
 800c748:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800c74a:	69fb      	ldr	r3, [r7, #28]
 800c74c:	2b00      	cmp	r3, #0
 800c74e:	d003      	beq.n	800c758 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800c750:	69fb      	ldr	r3, [r7, #28]
 800c752:	697a      	ldr	r2, [r7, #20]
 800c754:	631a      	str	r2, [r3, #48]	; 0x30
 800c756:	e005      	b.n	800c764 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800c758:	6978      	ldr	r0, [r7, #20]
 800c75a:	f001 fcb3 	bl	800e0c4 <vPortFree>
 800c75e:	e001      	b.n	800c764 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800c760:	2300      	movs	r3, #0
 800c762:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800c764:	69fb      	ldr	r3, [r7, #28]
 800c766:	2b00      	cmp	r3, #0
 800c768:	d017      	beq.n	800c79a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800c76a:	69fb      	ldr	r3, [r7, #28]
 800c76c:	2200      	movs	r2, #0
 800c76e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800c772:	88fa      	ldrh	r2, [r7, #6]
 800c774:	2300      	movs	r3, #0
 800c776:	9303      	str	r3, [sp, #12]
 800c778:	69fb      	ldr	r3, [r7, #28]
 800c77a:	9302      	str	r3, [sp, #8]
 800c77c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c77e:	9301      	str	r3, [sp, #4]
 800c780:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c782:	9300      	str	r3, [sp, #0]
 800c784:	683b      	ldr	r3, [r7, #0]
 800c786:	68b9      	ldr	r1, [r7, #8]
 800c788:	68f8      	ldr	r0, [r7, #12]
 800c78a:	f000 f80e 	bl	800c7aa <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800c78e:	69f8      	ldr	r0, [r7, #28]
 800c790:	f000 f89a 	bl	800c8c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800c794:	2301      	movs	r3, #1
 800c796:	61bb      	str	r3, [r7, #24]
 800c798:	e002      	b.n	800c7a0 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800c79a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800c79e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800c7a0:	69bb      	ldr	r3, [r7, #24]
	}
 800c7a2:	4618      	mov	r0, r3
 800c7a4:	3720      	adds	r7, #32
 800c7a6:	46bd      	mov	sp, r7
 800c7a8:	bd80      	pop	{r7, pc}

0800c7aa <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800c7aa:	b580      	push	{r7, lr}
 800c7ac:	b088      	sub	sp, #32
 800c7ae:	af00      	add	r7, sp, #0
 800c7b0:	60f8      	str	r0, [r7, #12]
 800c7b2:	60b9      	str	r1, [r7, #8]
 800c7b4:	607a      	str	r2, [r7, #4]
 800c7b6:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800c7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ba:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800c7bc:	687b      	ldr	r3, [r7, #4]
 800c7be:	009b      	lsls	r3, r3, #2
 800c7c0:	461a      	mov	r2, r3
 800c7c2:	21a5      	movs	r1, #165	; 0xa5
 800c7c4:	f001 fdcb 	bl	800e35e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800c7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c7ca:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800c7d2:	3b01      	subs	r3, #1
 800c7d4:	009b      	lsls	r3, r3, #2
 800c7d6:	4413      	add	r3, r2
 800c7d8:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800c7da:	69bb      	ldr	r3, [r7, #24]
 800c7dc:	f023 0307 	bic.w	r3, r3, #7
 800c7e0:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800c7e2:	69bb      	ldr	r3, [r7, #24]
 800c7e4:	f003 0307 	and.w	r3, r3, #7
 800c7e8:	2b00      	cmp	r3, #0
 800c7ea:	d009      	beq.n	800c800 <prvInitialiseNewTask+0x56>
 800c7ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c7f0:	f383 8811 	msr	BASEPRI, r3
 800c7f4:	f3bf 8f6f 	isb	sy
 800c7f8:	f3bf 8f4f 	dsb	sy
 800c7fc:	617b      	str	r3, [r7, #20]
 800c7fe:	e7fe      	b.n	800c7fe <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	2b00      	cmp	r3, #0
 800c804:	d01f      	beq.n	800c846 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c806:	2300      	movs	r3, #0
 800c808:	61fb      	str	r3, [r7, #28]
 800c80a:	e012      	b.n	800c832 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800c80c:	68ba      	ldr	r2, [r7, #8]
 800c80e:	69fb      	ldr	r3, [r7, #28]
 800c810:	4413      	add	r3, r2
 800c812:	7819      	ldrb	r1, [r3, #0]
 800c814:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c816:	69fb      	ldr	r3, [r7, #28]
 800c818:	4413      	add	r3, r2
 800c81a:	3334      	adds	r3, #52	; 0x34
 800c81c:	460a      	mov	r2, r1
 800c81e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800c820:	68ba      	ldr	r2, [r7, #8]
 800c822:	69fb      	ldr	r3, [r7, #28]
 800c824:	4413      	add	r3, r2
 800c826:	781b      	ldrb	r3, [r3, #0]
 800c828:	2b00      	cmp	r3, #0
 800c82a:	d006      	beq.n	800c83a <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800c82c:	69fb      	ldr	r3, [r7, #28]
 800c82e:	3301      	adds	r3, #1
 800c830:	61fb      	str	r3, [r7, #28]
 800c832:	69fb      	ldr	r3, [r7, #28]
 800c834:	2b0f      	cmp	r3, #15
 800c836:	d9e9      	bls.n	800c80c <prvInitialiseNewTask+0x62>
 800c838:	e000      	b.n	800c83c <prvInitialiseNewTask+0x92>
			{
				break;
 800c83a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800c83c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c83e:	2200      	movs	r2, #0
 800c840:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800c844:	e003      	b.n	800c84e <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800c846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c848:	2200      	movs	r2, #0
 800c84a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800c84e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c850:	2b37      	cmp	r3, #55	; 0x37
 800c852:	d901      	bls.n	800c858 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800c854:	2337      	movs	r3, #55	; 0x37
 800c856:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800c858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c85a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c85c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800c85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c860:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c862:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800c864:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c866:	2200      	movs	r2, #0
 800c868:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800c86a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c86c:	3304      	adds	r3, #4
 800c86e:	4618      	mov	r0, r3
 800c870:	f7ff f994 	bl	800bb9c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800c874:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c876:	3318      	adds	r3, #24
 800c878:	4618      	mov	r0, r3
 800c87a:	f7ff f98f 	bl	800bb9c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800c87e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c880:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c882:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800c884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c886:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800c88a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c88c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800c88e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c890:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c892:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800c894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c896:	2200      	movs	r2, #0
 800c898:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800c89a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c89c:	2200      	movs	r2, #0
 800c89e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800c8a2:	683a      	ldr	r2, [r7, #0]
 800c8a4:	68f9      	ldr	r1, [r7, #12]
 800c8a6:	69b8      	ldr	r0, [r7, #24]
 800c8a8:	f001 f90c 	bl	800dac4 <pxPortInitialiseStack>
 800c8ac:	4602      	mov	r2, r0
 800c8ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800c8b0:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800c8b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8b4:	2b00      	cmp	r3, #0
 800c8b6:	d002      	beq.n	800c8be <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800c8b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800c8ba:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8bc:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c8be:	bf00      	nop
 800c8c0:	3720      	adds	r7, #32
 800c8c2:	46bd      	mov	sp, r7
 800c8c4:	bd80      	pop	{r7, pc}
	...

0800c8c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800c8c8:	b580      	push	{r7, lr}
 800c8ca:	b082      	sub	sp, #8
 800c8cc:	af00      	add	r7, sp, #0
 800c8ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800c8d0:	f001 fa1c 	bl	800dd0c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800c8d4:	4b2d      	ldr	r3, [pc, #180]	; (800c98c <prvAddNewTaskToReadyList+0xc4>)
 800c8d6:	681b      	ldr	r3, [r3, #0]
 800c8d8:	3301      	adds	r3, #1
 800c8da:	4a2c      	ldr	r2, [pc, #176]	; (800c98c <prvAddNewTaskToReadyList+0xc4>)
 800c8dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800c8de:	4b2c      	ldr	r3, [pc, #176]	; (800c990 <prvAddNewTaskToReadyList+0xc8>)
 800c8e0:	681b      	ldr	r3, [r3, #0]
 800c8e2:	2b00      	cmp	r3, #0
 800c8e4:	d109      	bne.n	800c8fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800c8e6:	4a2a      	ldr	r2, [pc, #168]	; (800c990 <prvAddNewTaskToReadyList+0xc8>)
 800c8e8:	687b      	ldr	r3, [r7, #4]
 800c8ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800c8ec:	4b27      	ldr	r3, [pc, #156]	; (800c98c <prvAddNewTaskToReadyList+0xc4>)
 800c8ee:	681b      	ldr	r3, [r3, #0]
 800c8f0:	2b01      	cmp	r3, #1
 800c8f2:	d110      	bne.n	800c916 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800c8f4:	f000 fc08 	bl	800d108 <prvInitialiseTaskLists>
 800c8f8:	e00d      	b.n	800c916 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800c8fa:	4b26      	ldr	r3, [pc, #152]	; (800c994 <prvAddNewTaskToReadyList+0xcc>)
 800c8fc:	681b      	ldr	r3, [r3, #0]
 800c8fe:	2b00      	cmp	r3, #0
 800c900:	d109      	bne.n	800c916 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800c902:	4b23      	ldr	r3, [pc, #140]	; (800c990 <prvAddNewTaskToReadyList+0xc8>)
 800c904:	681b      	ldr	r3, [r3, #0]
 800c906:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c908:	687b      	ldr	r3, [r7, #4]
 800c90a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c90c:	429a      	cmp	r2, r3
 800c90e:	d802      	bhi.n	800c916 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800c910:	4a1f      	ldr	r2, [pc, #124]	; (800c990 <prvAddNewTaskToReadyList+0xc8>)
 800c912:	687b      	ldr	r3, [r7, #4]
 800c914:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800c916:	4b20      	ldr	r3, [pc, #128]	; (800c998 <prvAddNewTaskToReadyList+0xd0>)
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	3301      	adds	r3, #1
 800c91c:	4a1e      	ldr	r2, [pc, #120]	; (800c998 <prvAddNewTaskToReadyList+0xd0>)
 800c91e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800c920:	4b1d      	ldr	r3, [pc, #116]	; (800c998 <prvAddNewTaskToReadyList+0xd0>)
 800c922:	681a      	ldr	r2, [r3, #0]
 800c924:	687b      	ldr	r3, [r7, #4]
 800c926:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800c928:	687b      	ldr	r3, [r7, #4]
 800c92a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c92c:	4b1b      	ldr	r3, [pc, #108]	; (800c99c <prvAddNewTaskToReadyList+0xd4>)
 800c92e:	681b      	ldr	r3, [r3, #0]
 800c930:	429a      	cmp	r2, r3
 800c932:	d903      	bls.n	800c93c <prvAddNewTaskToReadyList+0x74>
 800c934:	687b      	ldr	r3, [r7, #4]
 800c936:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c938:	4a18      	ldr	r2, [pc, #96]	; (800c99c <prvAddNewTaskToReadyList+0xd4>)
 800c93a:	6013      	str	r3, [r2, #0]
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c940:	4613      	mov	r3, r2
 800c942:	009b      	lsls	r3, r3, #2
 800c944:	4413      	add	r3, r2
 800c946:	009b      	lsls	r3, r3, #2
 800c948:	4a15      	ldr	r2, [pc, #84]	; (800c9a0 <prvAddNewTaskToReadyList+0xd8>)
 800c94a:	441a      	add	r2, r3
 800c94c:	687b      	ldr	r3, [r7, #4]
 800c94e:	3304      	adds	r3, #4
 800c950:	4619      	mov	r1, r3
 800c952:	4610      	mov	r0, r2
 800c954:	f7ff f92f 	bl	800bbb6 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800c958:	f001 fa06 	bl	800dd68 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800c95c:	4b0d      	ldr	r3, [pc, #52]	; (800c994 <prvAddNewTaskToReadyList+0xcc>)
 800c95e:	681b      	ldr	r3, [r3, #0]
 800c960:	2b00      	cmp	r3, #0
 800c962:	d00e      	beq.n	800c982 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800c964:	4b0a      	ldr	r3, [pc, #40]	; (800c990 <prvAddNewTaskToReadyList+0xc8>)
 800c966:	681b      	ldr	r3, [r3, #0]
 800c968:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800c96a:	687b      	ldr	r3, [r7, #4]
 800c96c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800c96e:	429a      	cmp	r2, r3
 800c970:	d207      	bcs.n	800c982 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800c972:	4b0c      	ldr	r3, [pc, #48]	; (800c9a4 <prvAddNewTaskToReadyList+0xdc>)
 800c974:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c978:	601a      	str	r2, [r3, #0]
 800c97a:	f3bf 8f4f 	dsb	sy
 800c97e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800c982:	bf00      	nop
 800c984:	3708      	adds	r7, #8
 800c986:	46bd      	mov	sp, r7
 800c988:	bd80      	pop	{r7, pc}
 800c98a:	bf00      	nop
 800c98c:	200011d0 	.word	0x200011d0
 800c990:	20000cfc 	.word	0x20000cfc
 800c994:	200011dc 	.word	0x200011dc
 800c998:	200011ec 	.word	0x200011ec
 800c99c:	200011d8 	.word	0x200011d8
 800c9a0:	20000d00 	.word	0x20000d00
 800c9a4:	e000ed04 	.word	0xe000ed04

0800c9a8 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800c9a8:	b580      	push	{r7, lr}
 800c9aa:	b084      	sub	sp, #16
 800c9ac:	af00      	add	r7, sp, #0
 800c9ae:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800c9b0:	2300      	movs	r3, #0
 800c9b2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2b00      	cmp	r3, #0
 800c9b8:	d016      	beq.n	800c9e8 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800c9ba:	4b13      	ldr	r3, [pc, #76]	; (800ca08 <vTaskDelay+0x60>)
 800c9bc:	681b      	ldr	r3, [r3, #0]
 800c9be:	2b00      	cmp	r3, #0
 800c9c0:	d009      	beq.n	800c9d6 <vTaskDelay+0x2e>
 800c9c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800c9c6:	f383 8811 	msr	BASEPRI, r3
 800c9ca:	f3bf 8f6f 	isb	sy
 800c9ce:	f3bf 8f4f 	dsb	sy
 800c9d2:	60bb      	str	r3, [r7, #8]
 800c9d4:	e7fe      	b.n	800c9d4 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800c9d6:	f000 f87f 	bl	800cad8 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800c9da:	2100      	movs	r1, #0
 800c9dc:	6878      	ldr	r0, [r7, #4]
 800c9de:	f000 fcd7 	bl	800d390 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800c9e2:	f000 f887 	bl	800caf4 <xTaskResumeAll>
 800c9e6:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800c9e8:	68fb      	ldr	r3, [r7, #12]
 800c9ea:	2b00      	cmp	r3, #0
 800c9ec:	d107      	bne.n	800c9fe <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800c9ee:	4b07      	ldr	r3, [pc, #28]	; (800ca0c <vTaskDelay+0x64>)
 800c9f0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800c9f4:	601a      	str	r2, [r3, #0]
 800c9f6:	f3bf 8f4f 	dsb	sy
 800c9fa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800c9fe:	bf00      	nop
 800ca00:	3710      	adds	r7, #16
 800ca02:	46bd      	mov	sp, r7
 800ca04:	bd80      	pop	{r7, pc}
 800ca06:	bf00      	nop
 800ca08:	200011f8 	.word	0x200011f8
 800ca0c:	e000ed04 	.word	0xe000ed04

0800ca10 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800ca10:	b580      	push	{r7, lr}
 800ca12:	b08a      	sub	sp, #40	; 0x28
 800ca14:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800ca16:	2300      	movs	r3, #0
 800ca18:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800ca1a:	2300      	movs	r3, #0
 800ca1c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800ca1e:	463a      	mov	r2, r7
 800ca20:	1d39      	adds	r1, r7, #4
 800ca22:	f107 0308 	add.w	r3, r7, #8
 800ca26:	4618      	mov	r0, r3
 800ca28:	f7ff f864 	bl	800baf4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800ca2c:	6839      	ldr	r1, [r7, #0]
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	68ba      	ldr	r2, [r7, #8]
 800ca32:	9202      	str	r2, [sp, #8]
 800ca34:	9301      	str	r3, [sp, #4]
 800ca36:	2300      	movs	r3, #0
 800ca38:	9300      	str	r3, [sp, #0]
 800ca3a:	2300      	movs	r3, #0
 800ca3c:	460a      	mov	r2, r1
 800ca3e:	4920      	ldr	r1, [pc, #128]	; (800cac0 <vTaskStartScheduler+0xb0>)
 800ca40:	4820      	ldr	r0, [pc, #128]	; (800cac4 <vTaskStartScheduler+0xb4>)
 800ca42:	f7ff fe13 	bl	800c66c <xTaskCreateStatic>
 800ca46:	4602      	mov	r2, r0
 800ca48:	4b1f      	ldr	r3, [pc, #124]	; (800cac8 <vTaskStartScheduler+0xb8>)
 800ca4a:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800ca4c:	4b1e      	ldr	r3, [pc, #120]	; (800cac8 <vTaskStartScheduler+0xb8>)
 800ca4e:	681b      	ldr	r3, [r3, #0]
 800ca50:	2b00      	cmp	r3, #0
 800ca52:	d002      	beq.n	800ca5a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800ca54:	2301      	movs	r3, #1
 800ca56:	617b      	str	r3, [r7, #20]
 800ca58:	e001      	b.n	800ca5e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800ca5a:	2300      	movs	r3, #0
 800ca5c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800ca5e:	697b      	ldr	r3, [r7, #20]
 800ca60:	2b01      	cmp	r3, #1
 800ca62:	d102      	bne.n	800ca6a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800ca64:	f000 fce8 	bl	800d438 <xTimerCreateTimerTask>
 800ca68:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800ca6a:	697b      	ldr	r3, [r7, #20]
 800ca6c:	2b01      	cmp	r3, #1
 800ca6e:	d115      	bne.n	800ca9c <vTaskStartScheduler+0x8c>
 800ca70:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ca74:	f383 8811 	msr	BASEPRI, r3
 800ca78:	f3bf 8f6f 	isb	sy
 800ca7c:	f3bf 8f4f 	dsb	sy
 800ca80:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800ca82:	4b12      	ldr	r3, [pc, #72]	; (800cacc <vTaskStartScheduler+0xbc>)
 800ca84:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ca88:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800ca8a:	4b11      	ldr	r3, [pc, #68]	; (800cad0 <vTaskStartScheduler+0xc0>)
 800ca8c:	2201      	movs	r2, #1
 800ca8e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800ca90:	4b10      	ldr	r3, [pc, #64]	; (800cad4 <vTaskStartScheduler+0xc4>)
 800ca92:	2200      	movs	r2, #0
 800ca94:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800ca96:	f001 f89b 	bl	800dbd0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800ca9a:	e00d      	b.n	800cab8 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800ca9c:	697b      	ldr	r3, [r7, #20]
 800ca9e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800caa2:	d109      	bne.n	800cab8 <vTaskStartScheduler+0xa8>
 800caa4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800caa8:	f383 8811 	msr	BASEPRI, r3
 800caac:	f3bf 8f6f 	isb	sy
 800cab0:	f3bf 8f4f 	dsb	sy
 800cab4:	60fb      	str	r3, [r7, #12]
 800cab6:	e7fe      	b.n	800cab6 <vTaskStartScheduler+0xa6>
}
 800cab8:	bf00      	nop
 800caba:	3718      	adds	r7, #24
 800cabc:	46bd      	mov	sp, r7
 800cabe:	bd80      	pop	{r7, pc}
 800cac0:	08010040 	.word	0x08010040
 800cac4:	0800d0d9 	.word	0x0800d0d9
 800cac8:	200011f4 	.word	0x200011f4
 800cacc:	200011f0 	.word	0x200011f0
 800cad0:	200011dc 	.word	0x200011dc
 800cad4:	200011d4 	.word	0x200011d4

0800cad8 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800cad8:	b480      	push	{r7}
 800cada:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800cadc:	4b04      	ldr	r3, [pc, #16]	; (800caf0 <vTaskSuspendAll+0x18>)
 800cade:	681b      	ldr	r3, [r3, #0]
 800cae0:	3301      	adds	r3, #1
 800cae2:	4a03      	ldr	r2, [pc, #12]	; (800caf0 <vTaskSuspendAll+0x18>)
 800cae4:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800cae6:	bf00      	nop
 800cae8:	46bd      	mov	sp, r7
 800caea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800caee:	4770      	bx	lr
 800caf0:	200011f8 	.word	0x200011f8

0800caf4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800caf4:	b580      	push	{r7, lr}
 800caf6:	b084      	sub	sp, #16
 800caf8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800cafa:	2300      	movs	r3, #0
 800cafc:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800cafe:	2300      	movs	r3, #0
 800cb00:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800cb02:	4b41      	ldr	r3, [pc, #260]	; (800cc08 <xTaskResumeAll+0x114>)
 800cb04:	681b      	ldr	r3, [r3, #0]
 800cb06:	2b00      	cmp	r3, #0
 800cb08:	d109      	bne.n	800cb1e <xTaskResumeAll+0x2a>
 800cb0a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cb0e:	f383 8811 	msr	BASEPRI, r3
 800cb12:	f3bf 8f6f 	isb	sy
 800cb16:	f3bf 8f4f 	dsb	sy
 800cb1a:	603b      	str	r3, [r7, #0]
 800cb1c:	e7fe      	b.n	800cb1c <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800cb1e:	f001 f8f5 	bl	800dd0c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800cb22:	4b39      	ldr	r3, [pc, #228]	; (800cc08 <xTaskResumeAll+0x114>)
 800cb24:	681b      	ldr	r3, [r3, #0]
 800cb26:	3b01      	subs	r3, #1
 800cb28:	4a37      	ldr	r2, [pc, #220]	; (800cc08 <xTaskResumeAll+0x114>)
 800cb2a:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cb2c:	4b36      	ldr	r3, [pc, #216]	; (800cc08 <xTaskResumeAll+0x114>)
 800cb2e:	681b      	ldr	r3, [r3, #0]
 800cb30:	2b00      	cmp	r3, #0
 800cb32:	d162      	bne.n	800cbfa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800cb34:	4b35      	ldr	r3, [pc, #212]	; (800cc0c <xTaskResumeAll+0x118>)
 800cb36:	681b      	ldr	r3, [r3, #0]
 800cb38:	2b00      	cmp	r3, #0
 800cb3a:	d05e      	beq.n	800cbfa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb3c:	e02f      	b.n	800cb9e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cb3e:	4b34      	ldr	r3, [pc, #208]	; (800cc10 <xTaskResumeAll+0x11c>)
 800cb40:	68db      	ldr	r3, [r3, #12]
 800cb42:	68db      	ldr	r3, [r3, #12]
 800cb44:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cb46:	68fb      	ldr	r3, [r7, #12]
 800cb48:	3318      	adds	r3, #24
 800cb4a:	4618      	mov	r0, r3
 800cb4c:	f7ff f890 	bl	800bc70 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800cb50:	68fb      	ldr	r3, [r7, #12]
 800cb52:	3304      	adds	r3, #4
 800cb54:	4618      	mov	r0, r3
 800cb56:	f7ff f88b 	bl	800bc70 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800cb5a:	68fb      	ldr	r3, [r7, #12]
 800cb5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb5e:	4b2d      	ldr	r3, [pc, #180]	; (800cc14 <xTaskResumeAll+0x120>)
 800cb60:	681b      	ldr	r3, [r3, #0]
 800cb62:	429a      	cmp	r2, r3
 800cb64:	d903      	bls.n	800cb6e <xTaskResumeAll+0x7a>
 800cb66:	68fb      	ldr	r3, [r7, #12]
 800cb68:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb6a:	4a2a      	ldr	r2, [pc, #168]	; (800cc14 <xTaskResumeAll+0x120>)
 800cb6c:	6013      	str	r3, [r2, #0]
 800cb6e:	68fb      	ldr	r3, [r7, #12]
 800cb70:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb72:	4613      	mov	r3, r2
 800cb74:	009b      	lsls	r3, r3, #2
 800cb76:	4413      	add	r3, r2
 800cb78:	009b      	lsls	r3, r3, #2
 800cb7a:	4a27      	ldr	r2, [pc, #156]	; (800cc18 <xTaskResumeAll+0x124>)
 800cb7c:	441a      	add	r2, r3
 800cb7e:	68fb      	ldr	r3, [r7, #12]
 800cb80:	3304      	adds	r3, #4
 800cb82:	4619      	mov	r1, r3
 800cb84:	4610      	mov	r0, r2
 800cb86:	f7ff f816 	bl	800bbb6 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cb8a:	68fb      	ldr	r3, [r7, #12]
 800cb8c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cb8e:	4b23      	ldr	r3, [pc, #140]	; (800cc1c <xTaskResumeAll+0x128>)
 800cb90:	681b      	ldr	r3, [r3, #0]
 800cb92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cb94:	429a      	cmp	r2, r3
 800cb96:	d302      	bcc.n	800cb9e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800cb98:	4b21      	ldr	r3, [pc, #132]	; (800cc20 <xTaskResumeAll+0x12c>)
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800cb9e:	4b1c      	ldr	r3, [pc, #112]	; (800cc10 <xTaskResumeAll+0x11c>)
 800cba0:	681b      	ldr	r3, [r3, #0]
 800cba2:	2b00      	cmp	r3, #0
 800cba4:	d1cb      	bne.n	800cb3e <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800cba6:	68fb      	ldr	r3, [r7, #12]
 800cba8:	2b00      	cmp	r3, #0
 800cbaa:	d001      	beq.n	800cbb0 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800cbac:	f000 fb46 	bl	800d23c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800cbb0:	4b1c      	ldr	r3, [pc, #112]	; (800cc24 <xTaskResumeAll+0x130>)
 800cbb2:	681b      	ldr	r3, [r3, #0]
 800cbb4:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	2b00      	cmp	r3, #0
 800cbba:	d010      	beq.n	800cbde <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800cbbc:	f000 f846 	bl	800cc4c <xTaskIncrementTick>
 800cbc0:	4603      	mov	r3, r0
 800cbc2:	2b00      	cmp	r3, #0
 800cbc4:	d002      	beq.n	800cbcc <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800cbc6:	4b16      	ldr	r3, [pc, #88]	; (800cc20 <xTaskResumeAll+0x12c>)
 800cbc8:	2201      	movs	r2, #1
 800cbca:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800cbcc:	687b      	ldr	r3, [r7, #4]
 800cbce:	3b01      	subs	r3, #1
 800cbd0:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2b00      	cmp	r3, #0
 800cbd6:	d1f1      	bne.n	800cbbc <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800cbd8:	4b12      	ldr	r3, [pc, #72]	; (800cc24 <xTaskResumeAll+0x130>)
 800cbda:	2200      	movs	r2, #0
 800cbdc:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800cbde:	4b10      	ldr	r3, [pc, #64]	; (800cc20 <xTaskResumeAll+0x12c>)
 800cbe0:	681b      	ldr	r3, [r3, #0]
 800cbe2:	2b00      	cmp	r3, #0
 800cbe4:	d009      	beq.n	800cbfa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800cbe6:	2301      	movs	r3, #1
 800cbe8:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800cbea:	4b0f      	ldr	r3, [pc, #60]	; (800cc28 <xTaskResumeAll+0x134>)
 800cbec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800cbf0:	601a      	str	r2, [r3, #0]
 800cbf2:	f3bf 8f4f 	dsb	sy
 800cbf6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800cbfa:	f001 f8b5 	bl	800dd68 <vPortExitCritical>

	return xAlreadyYielded;
 800cbfe:	68bb      	ldr	r3, [r7, #8]
}
 800cc00:	4618      	mov	r0, r3
 800cc02:	3710      	adds	r7, #16
 800cc04:	46bd      	mov	sp, r7
 800cc06:	bd80      	pop	{r7, pc}
 800cc08:	200011f8 	.word	0x200011f8
 800cc0c:	200011d0 	.word	0x200011d0
 800cc10:	20001190 	.word	0x20001190
 800cc14:	200011d8 	.word	0x200011d8
 800cc18:	20000d00 	.word	0x20000d00
 800cc1c:	20000cfc 	.word	0x20000cfc
 800cc20:	200011e4 	.word	0x200011e4
 800cc24:	200011e0 	.word	0x200011e0
 800cc28:	e000ed04 	.word	0xe000ed04

0800cc2c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800cc2c:	b480      	push	{r7}
 800cc2e:	b083      	sub	sp, #12
 800cc30:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800cc32:	4b05      	ldr	r3, [pc, #20]	; (800cc48 <xTaskGetTickCount+0x1c>)
 800cc34:	681b      	ldr	r3, [r3, #0]
 800cc36:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800cc38:	687b      	ldr	r3, [r7, #4]
}
 800cc3a:	4618      	mov	r0, r3
 800cc3c:	370c      	adds	r7, #12
 800cc3e:	46bd      	mov	sp, r7
 800cc40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cc44:	4770      	bx	lr
 800cc46:	bf00      	nop
 800cc48:	200011d4 	.word	0x200011d4

0800cc4c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800cc4c:	b580      	push	{r7, lr}
 800cc4e:	b086      	sub	sp, #24
 800cc50:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800cc52:	2300      	movs	r3, #0
 800cc54:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cc56:	4b4e      	ldr	r3, [pc, #312]	; (800cd90 <xTaskIncrementTick+0x144>)
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	f040 8088 	bne.w	800cd70 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800cc60:	4b4c      	ldr	r3, [pc, #304]	; (800cd94 <xTaskIncrementTick+0x148>)
 800cc62:	681b      	ldr	r3, [r3, #0]
 800cc64:	3301      	adds	r3, #1
 800cc66:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800cc68:	4a4a      	ldr	r2, [pc, #296]	; (800cd94 <xTaskIncrementTick+0x148>)
 800cc6a:	693b      	ldr	r3, [r7, #16]
 800cc6c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800cc6e:	693b      	ldr	r3, [r7, #16]
 800cc70:	2b00      	cmp	r3, #0
 800cc72:	d11f      	bne.n	800ccb4 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800cc74:	4b48      	ldr	r3, [pc, #288]	; (800cd98 <xTaskIncrementTick+0x14c>)
 800cc76:	681b      	ldr	r3, [r3, #0]
 800cc78:	681b      	ldr	r3, [r3, #0]
 800cc7a:	2b00      	cmp	r3, #0
 800cc7c:	d009      	beq.n	800cc92 <xTaskIncrementTick+0x46>
 800cc7e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cc82:	f383 8811 	msr	BASEPRI, r3
 800cc86:	f3bf 8f6f 	isb	sy
 800cc8a:	f3bf 8f4f 	dsb	sy
 800cc8e:	603b      	str	r3, [r7, #0]
 800cc90:	e7fe      	b.n	800cc90 <xTaskIncrementTick+0x44>
 800cc92:	4b41      	ldr	r3, [pc, #260]	; (800cd98 <xTaskIncrementTick+0x14c>)
 800cc94:	681b      	ldr	r3, [r3, #0]
 800cc96:	60fb      	str	r3, [r7, #12]
 800cc98:	4b40      	ldr	r3, [pc, #256]	; (800cd9c <xTaskIncrementTick+0x150>)
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	4a3e      	ldr	r2, [pc, #248]	; (800cd98 <xTaskIncrementTick+0x14c>)
 800cc9e:	6013      	str	r3, [r2, #0]
 800cca0:	4a3e      	ldr	r2, [pc, #248]	; (800cd9c <xTaskIncrementTick+0x150>)
 800cca2:	68fb      	ldr	r3, [r7, #12]
 800cca4:	6013      	str	r3, [r2, #0]
 800cca6:	4b3e      	ldr	r3, [pc, #248]	; (800cda0 <xTaskIncrementTick+0x154>)
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	3301      	adds	r3, #1
 800ccac:	4a3c      	ldr	r2, [pc, #240]	; (800cda0 <xTaskIncrementTick+0x154>)
 800ccae:	6013      	str	r3, [r2, #0]
 800ccb0:	f000 fac4 	bl	800d23c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800ccb4:	4b3b      	ldr	r3, [pc, #236]	; (800cda4 <xTaskIncrementTick+0x158>)
 800ccb6:	681b      	ldr	r3, [r3, #0]
 800ccb8:	693a      	ldr	r2, [r7, #16]
 800ccba:	429a      	cmp	r2, r3
 800ccbc:	d349      	bcc.n	800cd52 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800ccbe:	4b36      	ldr	r3, [pc, #216]	; (800cd98 <xTaskIncrementTick+0x14c>)
 800ccc0:	681b      	ldr	r3, [r3, #0]
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	2b00      	cmp	r3, #0
 800ccc6:	d104      	bne.n	800ccd2 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ccc8:	4b36      	ldr	r3, [pc, #216]	; (800cda4 <xTaskIncrementTick+0x158>)
 800ccca:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800ccce:	601a      	str	r2, [r3, #0]
					break;
 800ccd0:	e03f      	b.n	800cd52 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ccd2:	4b31      	ldr	r3, [pc, #196]	; (800cd98 <xTaskIncrementTick+0x14c>)
 800ccd4:	681b      	ldr	r3, [r3, #0]
 800ccd6:	68db      	ldr	r3, [r3, #12]
 800ccd8:	68db      	ldr	r3, [r3, #12]
 800ccda:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800ccdc:	68bb      	ldr	r3, [r7, #8]
 800ccde:	685b      	ldr	r3, [r3, #4]
 800cce0:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800cce2:	693a      	ldr	r2, [r7, #16]
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d203      	bcs.n	800ccf2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800ccea:	4a2e      	ldr	r2, [pc, #184]	; (800cda4 <xTaskIncrementTick+0x158>)
 800ccec:	687b      	ldr	r3, [r7, #4]
 800ccee:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800ccf0:	e02f      	b.n	800cd52 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800ccf2:	68bb      	ldr	r3, [r7, #8]
 800ccf4:	3304      	adds	r3, #4
 800ccf6:	4618      	mov	r0, r3
 800ccf8:	f7fe ffba 	bl	800bc70 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800ccfc:	68bb      	ldr	r3, [r7, #8]
 800ccfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800cd00:	2b00      	cmp	r3, #0
 800cd02:	d004      	beq.n	800cd0e <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800cd04:	68bb      	ldr	r3, [r7, #8]
 800cd06:	3318      	adds	r3, #24
 800cd08:	4618      	mov	r0, r3
 800cd0a:	f7fe ffb1 	bl	800bc70 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800cd0e:	68bb      	ldr	r3, [r7, #8]
 800cd10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd12:	4b25      	ldr	r3, [pc, #148]	; (800cda8 <xTaskIncrementTick+0x15c>)
 800cd14:	681b      	ldr	r3, [r3, #0]
 800cd16:	429a      	cmp	r2, r3
 800cd18:	d903      	bls.n	800cd22 <xTaskIncrementTick+0xd6>
 800cd1a:	68bb      	ldr	r3, [r7, #8]
 800cd1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd1e:	4a22      	ldr	r2, [pc, #136]	; (800cda8 <xTaskIncrementTick+0x15c>)
 800cd20:	6013      	str	r3, [r2, #0]
 800cd22:	68bb      	ldr	r3, [r7, #8]
 800cd24:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd26:	4613      	mov	r3, r2
 800cd28:	009b      	lsls	r3, r3, #2
 800cd2a:	4413      	add	r3, r2
 800cd2c:	009b      	lsls	r3, r3, #2
 800cd2e:	4a1f      	ldr	r2, [pc, #124]	; (800cdac <xTaskIncrementTick+0x160>)
 800cd30:	441a      	add	r2, r3
 800cd32:	68bb      	ldr	r3, [r7, #8]
 800cd34:	3304      	adds	r3, #4
 800cd36:	4619      	mov	r1, r3
 800cd38:	4610      	mov	r0, r2
 800cd3a:	f7fe ff3c 	bl	800bbb6 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800cd3e:	68bb      	ldr	r3, [r7, #8]
 800cd40:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd42:	4b1b      	ldr	r3, [pc, #108]	; (800cdb0 <xTaskIncrementTick+0x164>)
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cd48:	429a      	cmp	r2, r3
 800cd4a:	d3b8      	bcc.n	800ccbe <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800cd4c:	2301      	movs	r3, #1
 800cd4e:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800cd50:	e7b5      	b.n	800ccbe <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800cd52:	4b17      	ldr	r3, [pc, #92]	; (800cdb0 <xTaskIncrementTick+0x164>)
 800cd54:	681b      	ldr	r3, [r3, #0]
 800cd56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cd58:	4914      	ldr	r1, [pc, #80]	; (800cdac <xTaskIncrementTick+0x160>)
 800cd5a:	4613      	mov	r3, r2
 800cd5c:	009b      	lsls	r3, r3, #2
 800cd5e:	4413      	add	r3, r2
 800cd60:	009b      	lsls	r3, r3, #2
 800cd62:	440b      	add	r3, r1
 800cd64:	681b      	ldr	r3, [r3, #0]
 800cd66:	2b01      	cmp	r3, #1
 800cd68:	d907      	bls.n	800cd7a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800cd6a:	2301      	movs	r3, #1
 800cd6c:	617b      	str	r3, [r7, #20]
 800cd6e:	e004      	b.n	800cd7a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800cd70:	4b10      	ldr	r3, [pc, #64]	; (800cdb4 <xTaskIncrementTick+0x168>)
 800cd72:	681b      	ldr	r3, [r3, #0]
 800cd74:	3301      	adds	r3, #1
 800cd76:	4a0f      	ldr	r2, [pc, #60]	; (800cdb4 <xTaskIncrementTick+0x168>)
 800cd78:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800cd7a:	4b0f      	ldr	r3, [pc, #60]	; (800cdb8 <xTaskIncrementTick+0x16c>)
 800cd7c:	681b      	ldr	r3, [r3, #0]
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d001      	beq.n	800cd86 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800cd82:	2301      	movs	r3, #1
 800cd84:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800cd86:	697b      	ldr	r3, [r7, #20]
}
 800cd88:	4618      	mov	r0, r3
 800cd8a:	3718      	adds	r7, #24
 800cd8c:	46bd      	mov	sp, r7
 800cd8e:	bd80      	pop	{r7, pc}
 800cd90:	200011f8 	.word	0x200011f8
 800cd94:	200011d4 	.word	0x200011d4
 800cd98:	20001188 	.word	0x20001188
 800cd9c:	2000118c 	.word	0x2000118c
 800cda0:	200011e8 	.word	0x200011e8
 800cda4:	200011f0 	.word	0x200011f0
 800cda8:	200011d8 	.word	0x200011d8
 800cdac:	20000d00 	.word	0x20000d00
 800cdb0:	20000cfc 	.word	0x20000cfc
 800cdb4:	200011e0 	.word	0x200011e0
 800cdb8:	200011e4 	.word	0x200011e4

0800cdbc <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800cdbc:	b480      	push	{r7}
 800cdbe:	b085      	sub	sp, #20
 800cdc0:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800cdc2:	4b27      	ldr	r3, [pc, #156]	; (800ce60 <vTaskSwitchContext+0xa4>)
 800cdc4:	681b      	ldr	r3, [r3, #0]
 800cdc6:	2b00      	cmp	r3, #0
 800cdc8:	d003      	beq.n	800cdd2 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800cdca:	4b26      	ldr	r3, [pc, #152]	; (800ce64 <vTaskSwitchContext+0xa8>)
 800cdcc:	2201      	movs	r2, #1
 800cdce:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800cdd0:	e040      	b.n	800ce54 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800cdd2:	4b24      	ldr	r3, [pc, #144]	; (800ce64 <vTaskSwitchContext+0xa8>)
 800cdd4:	2200      	movs	r2, #0
 800cdd6:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cdd8:	4b23      	ldr	r3, [pc, #140]	; (800ce68 <vTaskSwitchContext+0xac>)
 800cdda:	681b      	ldr	r3, [r3, #0]
 800cddc:	60fb      	str	r3, [r7, #12]
 800cdde:	e00f      	b.n	800ce00 <vTaskSwitchContext+0x44>
 800cde0:	68fb      	ldr	r3, [r7, #12]
 800cde2:	2b00      	cmp	r3, #0
 800cde4:	d109      	bne.n	800cdfa <vTaskSwitchContext+0x3e>
 800cde6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cdea:	f383 8811 	msr	BASEPRI, r3
 800cdee:	f3bf 8f6f 	isb	sy
 800cdf2:	f3bf 8f4f 	dsb	sy
 800cdf6:	607b      	str	r3, [r7, #4]
 800cdf8:	e7fe      	b.n	800cdf8 <vTaskSwitchContext+0x3c>
 800cdfa:	68fb      	ldr	r3, [r7, #12]
 800cdfc:	3b01      	subs	r3, #1
 800cdfe:	60fb      	str	r3, [r7, #12]
 800ce00:	491a      	ldr	r1, [pc, #104]	; (800ce6c <vTaskSwitchContext+0xb0>)
 800ce02:	68fa      	ldr	r2, [r7, #12]
 800ce04:	4613      	mov	r3, r2
 800ce06:	009b      	lsls	r3, r3, #2
 800ce08:	4413      	add	r3, r2
 800ce0a:	009b      	lsls	r3, r3, #2
 800ce0c:	440b      	add	r3, r1
 800ce0e:	681b      	ldr	r3, [r3, #0]
 800ce10:	2b00      	cmp	r3, #0
 800ce12:	d0e5      	beq.n	800cde0 <vTaskSwitchContext+0x24>
 800ce14:	68fa      	ldr	r2, [r7, #12]
 800ce16:	4613      	mov	r3, r2
 800ce18:	009b      	lsls	r3, r3, #2
 800ce1a:	4413      	add	r3, r2
 800ce1c:	009b      	lsls	r3, r3, #2
 800ce1e:	4a13      	ldr	r2, [pc, #76]	; (800ce6c <vTaskSwitchContext+0xb0>)
 800ce20:	4413      	add	r3, r2
 800ce22:	60bb      	str	r3, [r7, #8]
 800ce24:	68bb      	ldr	r3, [r7, #8]
 800ce26:	685b      	ldr	r3, [r3, #4]
 800ce28:	685a      	ldr	r2, [r3, #4]
 800ce2a:	68bb      	ldr	r3, [r7, #8]
 800ce2c:	605a      	str	r2, [r3, #4]
 800ce2e:	68bb      	ldr	r3, [r7, #8]
 800ce30:	685a      	ldr	r2, [r3, #4]
 800ce32:	68bb      	ldr	r3, [r7, #8]
 800ce34:	3308      	adds	r3, #8
 800ce36:	429a      	cmp	r2, r3
 800ce38:	d104      	bne.n	800ce44 <vTaskSwitchContext+0x88>
 800ce3a:	68bb      	ldr	r3, [r7, #8]
 800ce3c:	685b      	ldr	r3, [r3, #4]
 800ce3e:	685a      	ldr	r2, [r3, #4]
 800ce40:	68bb      	ldr	r3, [r7, #8]
 800ce42:	605a      	str	r2, [r3, #4]
 800ce44:	68bb      	ldr	r3, [r7, #8]
 800ce46:	685b      	ldr	r3, [r3, #4]
 800ce48:	68db      	ldr	r3, [r3, #12]
 800ce4a:	4a09      	ldr	r2, [pc, #36]	; (800ce70 <vTaskSwitchContext+0xb4>)
 800ce4c:	6013      	str	r3, [r2, #0]
 800ce4e:	4a06      	ldr	r2, [pc, #24]	; (800ce68 <vTaskSwitchContext+0xac>)
 800ce50:	68fb      	ldr	r3, [r7, #12]
 800ce52:	6013      	str	r3, [r2, #0]
}
 800ce54:	bf00      	nop
 800ce56:	3714      	adds	r7, #20
 800ce58:	46bd      	mov	sp, r7
 800ce5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce5e:	4770      	bx	lr
 800ce60:	200011f8 	.word	0x200011f8
 800ce64:	200011e4 	.word	0x200011e4
 800ce68:	200011d8 	.word	0x200011d8
 800ce6c:	20000d00 	.word	0x20000d00
 800ce70:	20000cfc 	.word	0x20000cfc

0800ce74 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800ce74:	b580      	push	{r7, lr}
 800ce76:	b084      	sub	sp, #16
 800ce78:	af00      	add	r7, sp, #0
 800ce7a:	6078      	str	r0, [r7, #4]
 800ce7c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800ce7e:	687b      	ldr	r3, [r7, #4]
 800ce80:	2b00      	cmp	r3, #0
 800ce82:	d109      	bne.n	800ce98 <vTaskPlaceOnEventList+0x24>
 800ce84:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ce88:	f383 8811 	msr	BASEPRI, r3
 800ce8c:	f3bf 8f6f 	isb	sy
 800ce90:	f3bf 8f4f 	dsb	sy
 800ce94:	60fb      	str	r3, [r7, #12]
 800ce96:	e7fe      	b.n	800ce96 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800ce98:	4b07      	ldr	r3, [pc, #28]	; (800ceb8 <vTaskPlaceOnEventList+0x44>)
 800ce9a:	681b      	ldr	r3, [r3, #0]
 800ce9c:	3318      	adds	r3, #24
 800ce9e:	4619      	mov	r1, r3
 800cea0:	6878      	ldr	r0, [r7, #4]
 800cea2:	f7fe feac 	bl	800bbfe <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800cea6:	2101      	movs	r1, #1
 800cea8:	6838      	ldr	r0, [r7, #0]
 800ceaa:	f000 fa71 	bl	800d390 <prvAddCurrentTaskToDelayedList>
}
 800ceae:	bf00      	nop
 800ceb0:	3710      	adds	r7, #16
 800ceb2:	46bd      	mov	sp, r7
 800ceb4:	bd80      	pop	{r7, pc}
 800ceb6:	bf00      	nop
 800ceb8:	20000cfc 	.word	0x20000cfc

0800cebc <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800cebc:	b580      	push	{r7, lr}
 800cebe:	b086      	sub	sp, #24
 800cec0:	af00      	add	r7, sp, #0
 800cec2:	60f8      	str	r0, [r7, #12]
 800cec4:	60b9      	str	r1, [r7, #8]
 800cec6:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800cec8:	68fb      	ldr	r3, [r7, #12]
 800ceca:	2b00      	cmp	r3, #0
 800cecc:	d109      	bne.n	800cee2 <vTaskPlaceOnEventListRestricted+0x26>
 800cece:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ced2:	f383 8811 	msr	BASEPRI, r3
 800ced6:	f3bf 8f6f 	isb	sy
 800ceda:	f3bf 8f4f 	dsb	sy
 800cede:	617b      	str	r3, [r7, #20]
 800cee0:	e7fe      	b.n	800cee0 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800cee2:	4b0a      	ldr	r3, [pc, #40]	; (800cf0c <vTaskPlaceOnEventListRestricted+0x50>)
 800cee4:	681b      	ldr	r3, [r3, #0]
 800cee6:	3318      	adds	r3, #24
 800cee8:	4619      	mov	r1, r3
 800ceea:	68f8      	ldr	r0, [r7, #12]
 800ceec:	f7fe fe63 	bl	800bbb6 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	2b00      	cmp	r3, #0
 800cef4:	d002      	beq.n	800cefc <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800cef6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cefa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800cefc:	6879      	ldr	r1, [r7, #4]
 800cefe:	68b8      	ldr	r0, [r7, #8]
 800cf00:	f000 fa46 	bl	800d390 <prvAddCurrentTaskToDelayedList>
	}
 800cf04:	bf00      	nop
 800cf06:	3718      	adds	r7, #24
 800cf08:	46bd      	mov	sp, r7
 800cf0a:	bd80      	pop	{r7, pc}
 800cf0c:	20000cfc 	.word	0x20000cfc

0800cf10 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800cf10:	b580      	push	{r7, lr}
 800cf12:	b086      	sub	sp, #24
 800cf14:	af00      	add	r7, sp, #0
 800cf16:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800cf18:	687b      	ldr	r3, [r7, #4]
 800cf1a:	68db      	ldr	r3, [r3, #12]
 800cf1c:	68db      	ldr	r3, [r3, #12]
 800cf1e:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800cf20:	693b      	ldr	r3, [r7, #16]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d109      	bne.n	800cf3a <xTaskRemoveFromEventList+0x2a>
 800cf26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800cf2a:	f383 8811 	msr	BASEPRI, r3
 800cf2e:	f3bf 8f6f 	isb	sy
 800cf32:	f3bf 8f4f 	dsb	sy
 800cf36:	60fb      	str	r3, [r7, #12]
 800cf38:	e7fe      	b.n	800cf38 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800cf3a:	693b      	ldr	r3, [r7, #16]
 800cf3c:	3318      	adds	r3, #24
 800cf3e:	4618      	mov	r0, r3
 800cf40:	f7fe fe96 	bl	800bc70 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800cf44:	4b1d      	ldr	r3, [pc, #116]	; (800cfbc <xTaskRemoveFromEventList+0xac>)
 800cf46:	681b      	ldr	r3, [r3, #0]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d11d      	bne.n	800cf88 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800cf4c:	693b      	ldr	r3, [r7, #16]
 800cf4e:	3304      	adds	r3, #4
 800cf50:	4618      	mov	r0, r3
 800cf52:	f7fe fe8d 	bl	800bc70 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800cf56:	693b      	ldr	r3, [r7, #16]
 800cf58:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf5a:	4b19      	ldr	r3, [pc, #100]	; (800cfc0 <xTaskRemoveFromEventList+0xb0>)
 800cf5c:	681b      	ldr	r3, [r3, #0]
 800cf5e:	429a      	cmp	r2, r3
 800cf60:	d903      	bls.n	800cf6a <xTaskRemoveFromEventList+0x5a>
 800cf62:	693b      	ldr	r3, [r7, #16]
 800cf64:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf66:	4a16      	ldr	r2, [pc, #88]	; (800cfc0 <xTaskRemoveFromEventList+0xb0>)
 800cf68:	6013      	str	r3, [r2, #0]
 800cf6a:	693b      	ldr	r3, [r7, #16]
 800cf6c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf6e:	4613      	mov	r3, r2
 800cf70:	009b      	lsls	r3, r3, #2
 800cf72:	4413      	add	r3, r2
 800cf74:	009b      	lsls	r3, r3, #2
 800cf76:	4a13      	ldr	r2, [pc, #76]	; (800cfc4 <xTaskRemoveFromEventList+0xb4>)
 800cf78:	441a      	add	r2, r3
 800cf7a:	693b      	ldr	r3, [r7, #16]
 800cf7c:	3304      	adds	r3, #4
 800cf7e:	4619      	mov	r1, r3
 800cf80:	4610      	mov	r0, r2
 800cf82:	f7fe fe18 	bl	800bbb6 <vListInsertEnd>
 800cf86:	e005      	b.n	800cf94 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800cf88:	693b      	ldr	r3, [r7, #16]
 800cf8a:	3318      	adds	r3, #24
 800cf8c:	4619      	mov	r1, r3
 800cf8e:	480e      	ldr	r0, [pc, #56]	; (800cfc8 <xTaskRemoveFromEventList+0xb8>)
 800cf90:	f7fe fe11 	bl	800bbb6 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800cf94:	693b      	ldr	r3, [r7, #16]
 800cf96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800cf98:	4b0c      	ldr	r3, [pc, #48]	; (800cfcc <xTaskRemoveFromEventList+0xbc>)
 800cf9a:	681b      	ldr	r3, [r3, #0]
 800cf9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800cf9e:	429a      	cmp	r2, r3
 800cfa0:	d905      	bls.n	800cfae <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800cfa2:	2301      	movs	r3, #1
 800cfa4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800cfa6:	4b0a      	ldr	r3, [pc, #40]	; (800cfd0 <xTaskRemoveFromEventList+0xc0>)
 800cfa8:	2201      	movs	r2, #1
 800cfaa:	601a      	str	r2, [r3, #0]
 800cfac:	e001      	b.n	800cfb2 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800cfae:	2300      	movs	r3, #0
 800cfb0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800cfb2:	697b      	ldr	r3, [r7, #20]
}
 800cfb4:	4618      	mov	r0, r3
 800cfb6:	3718      	adds	r7, #24
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	bd80      	pop	{r7, pc}
 800cfbc:	200011f8 	.word	0x200011f8
 800cfc0:	200011d8 	.word	0x200011d8
 800cfc4:	20000d00 	.word	0x20000d00
 800cfc8:	20001190 	.word	0x20001190
 800cfcc:	20000cfc 	.word	0x20000cfc
 800cfd0:	200011e4 	.word	0x200011e4

0800cfd4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800cfd4:	b480      	push	{r7}
 800cfd6:	b083      	sub	sp, #12
 800cfd8:	af00      	add	r7, sp, #0
 800cfda:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800cfdc:	4b06      	ldr	r3, [pc, #24]	; (800cff8 <vTaskInternalSetTimeOutState+0x24>)
 800cfde:	681a      	ldr	r2, [r3, #0]
 800cfe0:	687b      	ldr	r3, [r7, #4]
 800cfe2:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800cfe4:	4b05      	ldr	r3, [pc, #20]	; (800cffc <vTaskInternalSetTimeOutState+0x28>)
 800cfe6:	681a      	ldr	r2, [r3, #0]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	605a      	str	r2, [r3, #4]
}
 800cfec:	bf00      	nop
 800cfee:	370c      	adds	r7, #12
 800cff0:	46bd      	mov	sp, r7
 800cff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cff6:	4770      	bx	lr
 800cff8:	200011e8 	.word	0x200011e8
 800cffc:	200011d4 	.word	0x200011d4

0800d000 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800d000:	b580      	push	{r7, lr}
 800d002:	b088      	sub	sp, #32
 800d004:	af00      	add	r7, sp, #0
 800d006:	6078      	str	r0, [r7, #4]
 800d008:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800d00a:	687b      	ldr	r3, [r7, #4]
 800d00c:	2b00      	cmp	r3, #0
 800d00e:	d109      	bne.n	800d024 <xTaskCheckForTimeOut+0x24>
 800d010:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d014:	f383 8811 	msr	BASEPRI, r3
 800d018:	f3bf 8f6f 	isb	sy
 800d01c:	f3bf 8f4f 	dsb	sy
 800d020:	613b      	str	r3, [r7, #16]
 800d022:	e7fe      	b.n	800d022 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800d024:	683b      	ldr	r3, [r7, #0]
 800d026:	2b00      	cmp	r3, #0
 800d028:	d109      	bne.n	800d03e <xTaskCheckForTimeOut+0x3e>
 800d02a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d02e:	f383 8811 	msr	BASEPRI, r3
 800d032:	f3bf 8f6f 	isb	sy
 800d036:	f3bf 8f4f 	dsb	sy
 800d03a:	60fb      	str	r3, [r7, #12]
 800d03c:	e7fe      	b.n	800d03c <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800d03e:	f000 fe65 	bl	800dd0c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800d042:	4b1d      	ldr	r3, [pc, #116]	; (800d0b8 <xTaskCheckForTimeOut+0xb8>)
 800d044:	681b      	ldr	r3, [r3, #0]
 800d046:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800d048:	687b      	ldr	r3, [r7, #4]
 800d04a:	685b      	ldr	r3, [r3, #4]
 800d04c:	69ba      	ldr	r2, [r7, #24]
 800d04e:	1ad3      	subs	r3, r2, r3
 800d050:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800d052:	683b      	ldr	r3, [r7, #0]
 800d054:	681b      	ldr	r3, [r3, #0]
 800d056:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d05a:	d102      	bne.n	800d062 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800d05c:	2300      	movs	r3, #0
 800d05e:	61fb      	str	r3, [r7, #28]
 800d060:	e023      	b.n	800d0aa <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800d062:	687b      	ldr	r3, [r7, #4]
 800d064:	681a      	ldr	r2, [r3, #0]
 800d066:	4b15      	ldr	r3, [pc, #84]	; (800d0bc <xTaskCheckForTimeOut+0xbc>)
 800d068:	681b      	ldr	r3, [r3, #0]
 800d06a:	429a      	cmp	r2, r3
 800d06c:	d007      	beq.n	800d07e <xTaskCheckForTimeOut+0x7e>
 800d06e:	687b      	ldr	r3, [r7, #4]
 800d070:	685b      	ldr	r3, [r3, #4]
 800d072:	69ba      	ldr	r2, [r7, #24]
 800d074:	429a      	cmp	r2, r3
 800d076:	d302      	bcc.n	800d07e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800d078:	2301      	movs	r3, #1
 800d07a:	61fb      	str	r3, [r7, #28]
 800d07c:	e015      	b.n	800d0aa <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800d07e:	683b      	ldr	r3, [r7, #0]
 800d080:	681b      	ldr	r3, [r3, #0]
 800d082:	697a      	ldr	r2, [r7, #20]
 800d084:	429a      	cmp	r2, r3
 800d086:	d20b      	bcs.n	800d0a0 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800d088:	683b      	ldr	r3, [r7, #0]
 800d08a:	681a      	ldr	r2, [r3, #0]
 800d08c:	697b      	ldr	r3, [r7, #20]
 800d08e:	1ad2      	subs	r2, r2, r3
 800d090:	683b      	ldr	r3, [r7, #0]
 800d092:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800d094:	6878      	ldr	r0, [r7, #4]
 800d096:	f7ff ff9d 	bl	800cfd4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800d09a:	2300      	movs	r3, #0
 800d09c:	61fb      	str	r3, [r7, #28]
 800d09e:	e004      	b.n	800d0aa <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800d0a0:	683b      	ldr	r3, [r7, #0]
 800d0a2:	2200      	movs	r2, #0
 800d0a4:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800d0a6:	2301      	movs	r3, #1
 800d0a8:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800d0aa:	f000 fe5d 	bl	800dd68 <vPortExitCritical>

	return xReturn;
 800d0ae:	69fb      	ldr	r3, [r7, #28]
}
 800d0b0:	4618      	mov	r0, r3
 800d0b2:	3720      	adds	r7, #32
 800d0b4:	46bd      	mov	sp, r7
 800d0b6:	bd80      	pop	{r7, pc}
 800d0b8:	200011d4 	.word	0x200011d4
 800d0bc:	200011e8 	.word	0x200011e8

0800d0c0 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800d0c0:	b480      	push	{r7}
 800d0c2:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800d0c4:	4b03      	ldr	r3, [pc, #12]	; (800d0d4 <vTaskMissedYield+0x14>)
 800d0c6:	2201      	movs	r2, #1
 800d0c8:	601a      	str	r2, [r3, #0]
}
 800d0ca:	bf00      	nop
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr
 800d0d4:	200011e4 	.word	0x200011e4

0800d0d8 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800d0d8:	b580      	push	{r7, lr}
 800d0da:	b082      	sub	sp, #8
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800d0e0:	f000 f852 	bl	800d188 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800d0e4:	4b06      	ldr	r3, [pc, #24]	; (800d100 <prvIdleTask+0x28>)
 800d0e6:	681b      	ldr	r3, [r3, #0]
 800d0e8:	2b01      	cmp	r3, #1
 800d0ea:	d9f9      	bls.n	800d0e0 <prvIdleTask+0x8>
			{
				taskYIELD();
 800d0ec:	4b05      	ldr	r3, [pc, #20]	; (800d104 <prvIdleTask+0x2c>)
 800d0ee:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d0f2:	601a      	str	r2, [r3, #0]
 800d0f4:	f3bf 8f4f 	dsb	sy
 800d0f8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800d0fc:	e7f0      	b.n	800d0e0 <prvIdleTask+0x8>
 800d0fe:	bf00      	nop
 800d100:	20000d00 	.word	0x20000d00
 800d104:	e000ed04 	.word	0xe000ed04

0800d108 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800d108:	b580      	push	{r7, lr}
 800d10a:	b082      	sub	sp, #8
 800d10c:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d10e:	2300      	movs	r3, #0
 800d110:	607b      	str	r3, [r7, #4]
 800d112:	e00c      	b.n	800d12e <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800d114:	687a      	ldr	r2, [r7, #4]
 800d116:	4613      	mov	r3, r2
 800d118:	009b      	lsls	r3, r3, #2
 800d11a:	4413      	add	r3, r2
 800d11c:	009b      	lsls	r3, r3, #2
 800d11e:	4a12      	ldr	r2, [pc, #72]	; (800d168 <prvInitialiseTaskLists+0x60>)
 800d120:	4413      	add	r3, r2
 800d122:	4618      	mov	r0, r3
 800d124:	f7fe fd1a 	bl	800bb5c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800d128:	687b      	ldr	r3, [r7, #4]
 800d12a:	3301      	adds	r3, #1
 800d12c:	607b      	str	r3, [r7, #4]
 800d12e:	687b      	ldr	r3, [r7, #4]
 800d130:	2b37      	cmp	r3, #55	; 0x37
 800d132:	d9ef      	bls.n	800d114 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800d134:	480d      	ldr	r0, [pc, #52]	; (800d16c <prvInitialiseTaskLists+0x64>)
 800d136:	f7fe fd11 	bl	800bb5c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800d13a:	480d      	ldr	r0, [pc, #52]	; (800d170 <prvInitialiseTaskLists+0x68>)
 800d13c:	f7fe fd0e 	bl	800bb5c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800d140:	480c      	ldr	r0, [pc, #48]	; (800d174 <prvInitialiseTaskLists+0x6c>)
 800d142:	f7fe fd0b 	bl	800bb5c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800d146:	480c      	ldr	r0, [pc, #48]	; (800d178 <prvInitialiseTaskLists+0x70>)
 800d148:	f7fe fd08 	bl	800bb5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800d14c:	480b      	ldr	r0, [pc, #44]	; (800d17c <prvInitialiseTaskLists+0x74>)
 800d14e:	f7fe fd05 	bl	800bb5c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800d152:	4b0b      	ldr	r3, [pc, #44]	; (800d180 <prvInitialiseTaskLists+0x78>)
 800d154:	4a05      	ldr	r2, [pc, #20]	; (800d16c <prvInitialiseTaskLists+0x64>)
 800d156:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800d158:	4b0a      	ldr	r3, [pc, #40]	; (800d184 <prvInitialiseTaskLists+0x7c>)
 800d15a:	4a05      	ldr	r2, [pc, #20]	; (800d170 <prvInitialiseTaskLists+0x68>)
 800d15c:	601a      	str	r2, [r3, #0]
}
 800d15e:	bf00      	nop
 800d160:	3708      	adds	r7, #8
 800d162:	46bd      	mov	sp, r7
 800d164:	bd80      	pop	{r7, pc}
 800d166:	bf00      	nop
 800d168:	20000d00 	.word	0x20000d00
 800d16c:	20001160 	.word	0x20001160
 800d170:	20001174 	.word	0x20001174
 800d174:	20001190 	.word	0x20001190
 800d178:	200011a4 	.word	0x200011a4
 800d17c:	200011bc 	.word	0x200011bc
 800d180:	20001188 	.word	0x20001188
 800d184:	2000118c 	.word	0x2000118c

0800d188 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800d188:	b580      	push	{r7, lr}
 800d18a:	b082      	sub	sp, #8
 800d18c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d18e:	e019      	b.n	800d1c4 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800d190:	f000 fdbc 	bl	800dd0c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d194:	4b0f      	ldr	r3, [pc, #60]	; (800d1d4 <prvCheckTasksWaitingTermination+0x4c>)
 800d196:	68db      	ldr	r3, [r3, #12]
 800d198:	68db      	ldr	r3, [r3, #12]
 800d19a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800d19c:	687b      	ldr	r3, [r7, #4]
 800d19e:	3304      	adds	r3, #4
 800d1a0:	4618      	mov	r0, r3
 800d1a2:	f7fe fd65 	bl	800bc70 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800d1a6:	4b0c      	ldr	r3, [pc, #48]	; (800d1d8 <prvCheckTasksWaitingTermination+0x50>)
 800d1a8:	681b      	ldr	r3, [r3, #0]
 800d1aa:	3b01      	subs	r3, #1
 800d1ac:	4a0a      	ldr	r2, [pc, #40]	; (800d1d8 <prvCheckTasksWaitingTermination+0x50>)
 800d1ae:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800d1b0:	4b0a      	ldr	r3, [pc, #40]	; (800d1dc <prvCheckTasksWaitingTermination+0x54>)
 800d1b2:	681b      	ldr	r3, [r3, #0]
 800d1b4:	3b01      	subs	r3, #1
 800d1b6:	4a09      	ldr	r2, [pc, #36]	; (800d1dc <prvCheckTasksWaitingTermination+0x54>)
 800d1b8:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800d1ba:	f000 fdd5 	bl	800dd68 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800d1be:	6878      	ldr	r0, [r7, #4]
 800d1c0:	f000 f80e 	bl	800d1e0 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800d1c4:	4b05      	ldr	r3, [pc, #20]	; (800d1dc <prvCheckTasksWaitingTermination+0x54>)
 800d1c6:	681b      	ldr	r3, [r3, #0]
 800d1c8:	2b00      	cmp	r3, #0
 800d1ca:	d1e1      	bne.n	800d190 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800d1cc:	bf00      	nop
 800d1ce:	3708      	adds	r7, #8
 800d1d0:	46bd      	mov	sp, r7
 800d1d2:	bd80      	pop	{r7, pc}
 800d1d4:	200011a4 	.word	0x200011a4
 800d1d8:	200011d0 	.word	0x200011d0
 800d1dc:	200011b8 	.word	0x200011b8

0800d1e0 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800d1e0:	b580      	push	{r7, lr}
 800d1e2:	b084      	sub	sp, #16
 800d1e4:	af00      	add	r7, sp, #0
 800d1e6:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d1ee:	2b00      	cmp	r3, #0
 800d1f0:	d108      	bne.n	800d204 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800d1f2:	687b      	ldr	r3, [r7, #4]
 800d1f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800d1f6:	4618      	mov	r0, r3
 800d1f8:	f000 ff64 	bl	800e0c4 <vPortFree>
				vPortFree( pxTCB );
 800d1fc:	6878      	ldr	r0, [r7, #4]
 800d1fe:	f000 ff61 	bl	800e0c4 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800d202:	e017      	b.n	800d234 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800d204:	687b      	ldr	r3, [r7, #4]
 800d206:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d20a:	2b01      	cmp	r3, #1
 800d20c:	d103      	bne.n	800d216 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800d20e:	6878      	ldr	r0, [r7, #4]
 800d210:	f000 ff58 	bl	800e0c4 <vPortFree>
	}
 800d214:	e00e      	b.n	800d234 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800d216:	687b      	ldr	r3, [r7, #4]
 800d218:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800d21c:	2b02      	cmp	r3, #2
 800d21e:	d009      	beq.n	800d234 <prvDeleteTCB+0x54>
 800d220:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d224:	f383 8811 	msr	BASEPRI, r3
 800d228:	f3bf 8f6f 	isb	sy
 800d22c:	f3bf 8f4f 	dsb	sy
 800d230:	60fb      	str	r3, [r7, #12]
 800d232:	e7fe      	b.n	800d232 <prvDeleteTCB+0x52>
	}
 800d234:	bf00      	nop
 800d236:	3710      	adds	r7, #16
 800d238:	46bd      	mov	sp, r7
 800d23a:	bd80      	pop	{r7, pc}

0800d23c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800d23c:	b480      	push	{r7}
 800d23e:	b083      	sub	sp, #12
 800d240:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800d242:	4b0c      	ldr	r3, [pc, #48]	; (800d274 <prvResetNextTaskUnblockTime+0x38>)
 800d244:	681b      	ldr	r3, [r3, #0]
 800d246:	681b      	ldr	r3, [r3, #0]
 800d248:	2b00      	cmp	r3, #0
 800d24a:	d104      	bne.n	800d256 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800d24c:	4b0a      	ldr	r3, [pc, #40]	; (800d278 <prvResetNextTaskUnblockTime+0x3c>)
 800d24e:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d252:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800d254:	e008      	b.n	800d268 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d256:	4b07      	ldr	r3, [pc, #28]	; (800d274 <prvResetNextTaskUnblockTime+0x38>)
 800d258:	681b      	ldr	r3, [r3, #0]
 800d25a:	68db      	ldr	r3, [r3, #12]
 800d25c:	68db      	ldr	r3, [r3, #12]
 800d25e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800d260:	687b      	ldr	r3, [r7, #4]
 800d262:	685b      	ldr	r3, [r3, #4]
 800d264:	4a04      	ldr	r2, [pc, #16]	; (800d278 <prvResetNextTaskUnblockTime+0x3c>)
 800d266:	6013      	str	r3, [r2, #0]
}
 800d268:	bf00      	nop
 800d26a:	370c      	adds	r7, #12
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr
 800d274:	20001188 	.word	0x20001188
 800d278:	200011f0 	.word	0x200011f0

0800d27c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800d27c:	b480      	push	{r7}
 800d27e:	b083      	sub	sp, #12
 800d280:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800d282:	4b0b      	ldr	r3, [pc, #44]	; (800d2b0 <xTaskGetSchedulerState+0x34>)
 800d284:	681b      	ldr	r3, [r3, #0]
 800d286:	2b00      	cmp	r3, #0
 800d288:	d102      	bne.n	800d290 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800d28a:	2301      	movs	r3, #1
 800d28c:	607b      	str	r3, [r7, #4]
 800d28e:	e008      	b.n	800d2a2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800d290:	4b08      	ldr	r3, [pc, #32]	; (800d2b4 <xTaskGetSchedulerState+0x38>)
 800d292:	681b      	ldr	r3, [r3, #0]
 800d294:	2b00      	cmp	r3, #0
 800d296:	d102      	bne.n	800d29e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800d298:	2302      	movs	r3, #2
 800d29a:	607b      	str	r3, [r7, #4]
 800d29c:	e001      	b.n	800d2a2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800d29e:	2300      	movs	r3, #0
 800d2a0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800d2a2:	687b      	ldr	r3, [r7, #4]
	}
 800d2a4:	4618      	mov	r0, r3
 800d2a6:	370c      	adds	r7, #12
 800d2a8:	46bd      	mov	sp, r7
 800d2aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d2ae:	4770      	bx	lr
 800d2b0:	200011dc 	.word	0x200011dc
 800d2b4:	200011f8 	.word	0x200011f8

0800d2b8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800d2b8:	b580      	push	{r7, lr}
 800d2ba:	b086      	sub	sp, #24
 800d2bc:	af00      	add	r7, sp, #0
 800d2be:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800d2c4:	2300      	movs	r3, #0
 800d2c6:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800d2c8:	687b      	ldr	r3, [r7, #4]
 800d2ca:	2b00      	cmp	r3, #0
 800d2cc:	d054      	beq.n	800d378 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800d2ce:	4b2d      	ldr	r3, [pc, #180]	; (800d384 <xTaskPriorityDisinherit+0xcc>)
 800d2d0:	681b      	ldr	r3, [r3, #0]
 800d2d2:	693a      	ldr	r2, [r7, #16]
 800d2d4:	429a      	cmp	r2, r3
 800d2d6:	d009      	beq.n	800d2ec <xTaskPriorityDisinherit+0x34>
 800d2d8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2dc:	f383 8811 	msr	BASEPRI, r3
 800d2e0:	f3bf 8f6f 	isb	sy
 800d2e4:	f3bf 8f4f 	dsb	sy
 800d2e8:	60fb      	str	r3, [r7, #12]
 800d2ea:	e7fe      	b.n	800d2ea <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800d2ec:	693b      	ldr	r3, [r7, #16]
 800d2ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d2f0:	2b00      	cmp	r3, #0
 800d2f2:	d109      	bne.n	800d308 <xTaskPriorityDisinherit+0x50>
 800d2f4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d2f8:	f383 8811 	msr	BASEPRI, r3
 800d2fc:	f3bf 8f6f 	isb	sy
 800d300:	f3bf 8f4f 	dsb	sy
 800d304:	60bb      	str	r3, [r7, #8]
 800d306:	e7fe      	b.n	800d306 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800d308:	693b      	ldr	r3, [r7, #16]
 800d30a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d30c:	1e5a      	subs	r2, r3, #1
 800d30e:	693b      	ldr	r3, [r7, #16]
 800d310:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800d312:	693b      	ldr	r3, [r7, #16]
 800d314:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d316:	693b      	ldr	r3, [r7, #16]
 800d318:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d31a:	429a      	cmp	r2, r3
 800d31c:	d02c      	beq.n	800d378 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800d31e:	693b      	ldr	r3, [r7, #16]
 800d320:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d322:	2b00      	cmp	r3, #0
 800d324:	d128      	bne.n	800d378 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d326:	693b      	ldr	r3, [r7, #16]
 800d328:	3304      	adds	r3, #4
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7fe fca0 	bl	800bc70 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800d330:	693b      	ldr	r3, [r7, #16]
 800d332:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800d334:	693b      	ldr	r3, [r7, #16]
 800d336:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d338:	693b      	ldr	r3, [r7, #16]
 800d33a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d33c:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800d340:	693b      	ldr	r3, [r7, #16]
 800d342:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800d344:	693b      	ldr	r3, [r7, #16]
 800d346:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d348:	4b0f      	ldr	r3, [pc, #60]	; (800d388 <xTaskPriorityDisinherit+0xd0>)
 800d34a:	681b      	ldr	r3, [r3, #0]
 800d34c:	429a      	cmp	r2, r3
 800d34e:	d903      	bls.n	800d358 <xTaskPriorityDisinherit+0xa0>
 800d350:	693b      	ldr	r3, [r7, #16]
 800d352:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800d354:	4a0c      	ldr	r2, [pc, #48]	; (800d388 <xTaskPriorityDisinherit+0xd0>)
 800d356:	6013      	str	r3, [r2, #0]
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d35c:	4613      	mov	r3, r2
 800d35e:	009b      	lsls	r3, r3, #2
 800d360:	4413      	add	r3, r2
 800d362:	009b      	lsls	r3, r3, #2
 800d364:	4a09      	ldr	r2, [pc, #36]	; (800d38c <xTaskPriorityDisinherit+0xd4>)
 800d366:	441a      	add	r2, r3
 800d368:	693b      	ldr	r3, [r7, #16]
 800d36a:	3304      	adds	r3, #4
 800d36c:	4619      	mov	r1, r3
 800d36e:	4610      	mov	r0, r2
 800d370:	f7fe fc21 	bl	800bbb6 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800d374:	2301      	movs	r3, #1
 800d376:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800d378:	697b      	ldr	r3, [r7, #20]
	}
 800d37a:	4618      	mov	r0, r3
 800d37c:	3718      	adds	r7, #24
 800d37e:	46bd      	mov	sp, r7
 800d380:	bd80      	pop	{r7, pc}
 800d382:	bf00      	nop
 800d384:	20000cfc 	.word	0x20000cfc
 800d388:	200011d8 	.word	0x200011d8
 800d38c:	20000d00 	.word	0x20000d00

0800d390 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800d390:	b580      	push	{r7, lr}
 800d392:	b084      	sub	sp, #16
 800d394:	af00      	add	r7, sp, #0
 800d396:	6078      	str	r0, [r7, #4]
 800d398:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800d39a:	4b21      	ldr	r3, [pc, #132]	; (800d420 <prvAddCurrentTaskToDelayedList+0x90>)
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800d3a0:	4b20      	ldr	r3, [pc, #128]	; (800d424 <prvAddCurrentTaskToDelayedList+0x94>)
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	3304      	adds	r3, #4
 800d3a6:	4618      	mov	r0, r3
 800d3a8:	f7fe fc62 	bl	800bc70 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800d3ac:	687b      	ldr	r3, [r7, #4]
 800d3ae:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d3b2:	d10a      	bne.n	800d3ca <prvAddCurrentTaskToDelayedList+0x3a>
 800d3b4:	683b      	ldr	r3, [r7, #0]
 800d3b6:	2b00      	cmp	r3, #0
 800d3b8:	d007      	beq.n	800d3ca <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3ba:	4b1a      	ldr	r3, [pc, #104]	; (800d424 <prvAddCurrentTaskToDelayedList+0x94>)
 800d3bc:	681b      	ldr	r3, [r3, #0]
 800d3be:	3304      	adds	r3, #4
 800d3c0:	4619      	mov	r1, r3
 800d3c2:	4819      	ldr	r0, [pc, #100]	; (800d428 <prvAddCurrentTaskToDelayedList+0x98>)
 800d3c4:	f7fe fbf7 	bl	800bbb6 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800d3c8:	e026      	b.n	800d418 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800d3ca:	68fa      	ldr	r2, [r7, #12]
 800d3cc:	687b      	ldr	r3, [r7, #4]
 800d3ce:	4413      	add	r3, r2
 800d3d0:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800d3d2:	4b14      	ldr	r3, [pc, #80]	; (800d424 <prvAddCurrentTaskToDelayedList+0x94>)
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	68ba      	ldr	r2, [r7, #8]
 800d3d8:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800d3da:	68ba      	ldr	r2, [r7, #8]
 800d3dc:	68fb      	ldr	r3, [r7, #12]
 800d3de:	429a      	cmp	r2, r3
 800d3e0:	d209      	bcs.n	800d3f6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3e2:	4b12      	ldr	r3, [pc, #72]	; (800d42c <prvAddCurrentTaskToDelayedList+0x9c>)
 800d3e4:	681a      	ldr	r2, [r3, #0]
 800d3e6:	4b0f      	ldr	r3, [pc, #60]	; (800d424 <prvAddCurrentTaskToDelayedList+0x94>)
 800d3e8:	681b      	ldr	r3, [r3, #0]
 800d3ea:	3304      	adds	r3, #4
 800d3ec:	4619      	mov	r1, r3
 800d3ee:	4610      	mov	r0, r2
 800d3f0:	f7fe fc05 	bl	800bbfe <vListInsert>
}
 800d3f4:	e010      	b.n	800d418 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800d3f6:	4b0e      	ldr	r3, [pc, #56]	; (800d430 <prvAddCurrentTaskToDelayedList+0xa0>)
 800d3f8:	681a      	ldr	r2, [r3, #0]
 800d3fa:	4b0a      	ldr	r3, [pc, #40]	; (800d424 <prvAddCurrentTaskToDelayedList+0x94>)
 800d3fc:	681b      	ldr	r3, [r3, #0]
 800d3fe:	3304      	adds	r3, #4
 800d400:	4619      	mov	r1, r3
 800d402:	4610      	mov	r0, r2
 800d404:	f7fe fbfb 	bl	800bbfe <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800d408:	4b0a      	ldr	r3, [pc, #40]	; (800d434 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d40a:	681b      	ldr	r3, [r3, #0]
 800d40c:	68ba      	ldr	r2, [r7, #8]
 800d40e:	429a      	cmp	r2, r3
 800d410:	d202      	bcs.n	800d418 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800d412:	4a08      	ldr	r2, [pc, #32]	; (800d434 <prvAddCurrentTaskToDelayedList+0xa4>)
 800d414:	68bb      	ldr	r3, [r7, #8]
 800d416:	6013      	str	r3, [r2, #0]
}
 800d418:	bf00      	nop
 800d41a:	3710      	adds	r7, #16
 800d41c:	46bd      	mov	sp, r7
 800d41e:	bd80      	pop	{r7, pc}
 800d420:	200011d4 	.word	0x200011d4
 800d424:	20000cfc 	.word	0x20000cfc
 800d428:	200011bc 	.word	0x200011bc
 800d42c:	2000118c 	.word	0x2000118c
 800d430:	20001188 	.word	0x20001188
 800d434:	200011f0 	.word	0x200011f0

0800d438 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800d438:	b580      	push	{r7, lr}
 800d43a:	b08a      	sub	sp, #40	; 0x28
 800d43c:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800d43e:	2300      	movs	r3, #0
 800d440:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800d442:	f000 faff 	bl	800da44 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800d446:	4b1c      	ldr	r3, [pc, #112]	; (800d4b8 <xTimerCreateTimerTask+0x80>)
 800d448:	681b      	ldr	r3, [r3, #0]
 800d44a:	2b00      	cmp	r3, #0
 800d44c:	d021      	beq.n	800d492 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800d44e:	2300      	movs	r3, #0
 800d450:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800d452:	2300      	movs	r3, #0
 800d454:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800d456:	1d3a      	adds	r2, r7, #4
 800d458:	f107 0108 	add.w	r1, r7, #8
 800d45c:	f107 030c 	add.w	r3, r7, #12
 800d460:	4618      	mov	r0, r3
 800d462:	f7fe fb61 	bl	800bb28 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800d466:	6879      	ldr	r1, [r7, #4]
 800d468:	68bb      	ldr	r3, [r7, #8]
 800d46a:	68fa      	ldr	r2, [r7, #12]
 800d46c:	9202      	str	r2, [sp, #8]
 800d46e:	9301      	str	r3, [sp, #4]
 800d470:	2302      	movs	r3, #2
 800d472:	9300      	str	r3, [sp, #0]
 800d474:	2300      	movs	r3, #0
 800d476:	460a      	mov	r2, r1
 800d478:	4910      	ldr	r1, [pc, #64]	; (800d4bc <xTimerCreateTimerTask+0x84>)
 800d47a:	4811      	ldr	r0, [pc, #68]	; (800d4c0 <xTimerCreateTimerTask+0x88>)
 800d47c:	f7ff f8f6 	bl	800c66c <xTaskCreateStatic>
 800d480:	4602      	mov	r2, r0
 800d482:	4b10      	ldr	r3, [pc, #64]	; (800d4c4 <xTimerCreateTimerTask+0x8c>)
 800d484:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800d486:	4b0f      	ldr	r3, [pc, #60]	; (800d4c4 <xTimerCreateTimerTask+0x8c>)
 800d488:	681b      	ldr	r3, [r3, #0]
 800d48a:	2b00      	cmp	r3, #0
 800d48c:	d001      	beq.n	800d492 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800d48e:	2301      	movs	r3, #1
 800d490:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800d492:	697b      	ldr	r3, [r7, #20]
 800d494:	2b00      	cmp	r3, #0
 800d496:	d109      	bne.n	800d4ac <xTimerCreateTimerTask+0x74>
 800d498:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d49c:	f383 8811 	msr	BASEPRI, r3
 800d4a0:	f3bf 8f6f 	isb	sy
 800d4a4:	f3bf 8f4f 	dsb	sy
 800d4a8:	613b      	str	r3, [r7, #16]
 800d4aa:	e7fe      	b.n	800d4aa <xTimerCreateTimerTask+0x72>
	return xReturn;
 800d4ac:	697b      	ldr	r3, [r7, #20]
}
 800d4ae:	4618      	mov	r0, r3
 800d4b0:	3718      	adds	r7, #24
 800d4b2:	46bd      	mov	sp, r7
 800d4b4:	bd80      	pop	{r7, pc}
 800d4b6:	bf00      	nop
 800d4b8:	2000122c 	.word	0x2000122c
 800d4bc:	08010048 	.word	0x08010048
 800d4c0:	0800d5f9 	.word	0x0800d5f9
 800d4c4:	20001230 	.word	0x20001230

0800d4c8 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800d4c8:	b580      	push	{r7, lr}
 800d4ca:	b08a      	sub	sp, #40	; 0x28
 800d4cc:	af00      	add	r7, sp, #0
 800d4ce:	60f8      	str	r0, [r7, #12]
 800d4d0:	60b9      	str	r1, [r7, #8]
 800d4d2:	607a      	str	r2, [r7, #4]
 800d4d4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800d4d6:	2300      	movs	r3, #0
 800d4d8:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2b00      	cmp	r3, #0
 800d4de:	d109      	bne.n	800d4f4 <xTimerGenericCommand+0x2c>
 800d4e0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e4:	f383 8811 	msr	BASEPRI, r3
 800d4e8:	f3bf 8f6f 	isb	sy
 800d4ec:	f3bf 8f4f 	dsb	sy
 800d4f0:	623b      	str	r3, [r7, #32]
 800d4f2:	e7fe      	b.n	800d4f2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800d4f4:	4b19      	ldr	r3, [pc, #100]	; (800d55c <xTimerGenericCommand+0x94>)
 800d4f6:	681b      	ldr	r3, [r3, #0]
 800d4f8:	2b00      	cmp	r3, #0
 800d4fa:	d02a      	beq.n	800d552 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800d4fc:	68bb      	ldr	r3, [r7, #8]
 800d4fe:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800d500:	687b      	ldr	r3, [r7, #4]
 800d502:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800d508:	68bb      	ldr	r3, [r7, #8]
 800d50a:	2b05      	cmp	r3, #5
 800d50c:	dc18      	bgt.n	800d540 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800d50e:	f7ff feb5 	bl	800d27c <xTaskGetSchedulerState>
 800d512:	4603      	mov	r3, r0
 800d514:	2b02      	cmp	r3, #2
 800d516:	d109      	bne.n	800d52c <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800d518:	4b10      	ldr	r3, [pc, #64]	; (800d55c <xTimerGenericCommand+0x94>)
 800d51a:	6818      	ldr	r0, [r3, #0]
 800d51c:	f107 0110 	add.w	r1, r7, #16
 800d520:	2300      	movs	r3, #0
 800d522:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d524:	f7fe fccc 	bl	800bec0 <xQueueGenericSend>
 800d528:	6278      	str	r0, [r7, #36]	; 0x24
 800d52a:	e012      	b.n	800d552 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800d52c:	4b0b      	ldr	r3, [pc, #44]	; (800d55c <xTimerGenericCommand+0x94>)
 800d52e:	6818      	ldr	r0, [r3, #0]
 800d530:	f107 0110 	add.w	r1, r7, #16
 800d534:	2300      	movs	r3, #0
 800d536:	2200      	movs	r2, #0
 800d538:	f7fe fcc2 	bl	800bec0 <xQueueGenericSend>
 800d53c:	6278      	str	r0, [r7, #36]	; 0x24
 800d53e:	e008      	b.n	800d552 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800d540:	4b06      	ldr	r3, [pc, #24]	; (800d55c <xTimerGenericCommand+0x94>)
 800d542:	6818      	ldr	r0, [r3, #0]
 800d544:	f107 0110 	add.w	r1, r7, #16
 800d548:	2300      	movs	r3, #0
 800d54a:	683a      	ldr	r2, [r7, #0]
 800d54c:	f7fe fdb2 	bl	800c0b4 <xQueueGenericSendFromISR>
 800d550:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800d552:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800d554:	4618      	mov	r0, r3
 800d556:	3728      	adds	r7, #40	; 0x28
 800d558:	46bd      	mov	sp, r7
 800d55a:	bd80      	pop	{r7, pc}
 800d55c:	2000122c 	.word	0x2000122c

0800d560 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800d560:	b580      	push	{r7, lr}
 800d562:	b088      	sub	sp, #32
 800d564:	af02      	add	r7, sp, #8
 800d566:	6078      	str	r0, [r7, #4]
 800d568:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d56a:	4b22      	ldr	r3, [pc, #136]	; (800d5f4 <prvProcessExpiredTimer+0x94>)
 800d56c:	681b      	ldr	r3, [r3, #0]
 800d56e:	68db      	ldr	r3, [r3, #12]
 800d570:	68db      	ldr	r3, [r3, #12]
 800d572:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d574:	697b      	ldr	r3, [r7, #20]
 800d576:	3304      	adds	r3, #4
 800d578:	4618      	mov	r0, r3
 800d57a:	f7fe fb79 	bl	800bc70 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d57e:	697b      	ldr	r3, [r7, #20]
 800d580:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d584:	f003 0304 	and.w	r3, r3, #4
 800d588:	2b00      	cmp	r3, #0
 800d58a:	d021      	beq.n	800d5d0 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800d58c:	697b      	ldr	r3, [r7, #20]
 800d58e:	699a      	ldr	r2, [r3, #24]
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	18d1      	adds	r1, r2, r3
 800d594:	687b      	ldr	r3, [r7, #4]
 800d596:	683a      	ldr	r2, [r7, #0]
 800d598:	6978      	ldr	r0, [r7, #20]
 800d59a:	f000 f8d1 	bl	800d740 <prvInsertTimerInActiveList>
 800d59e:	4603      	mov	r3, r0
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d01e      	beq.n	800d5e2 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d5a4:	2300      	movs	r3, #0
 800d5a6:	9300      	str	r3, [sp, #0]
 800d5a8:	2300      	movs	r3, #0
 800d5aa:	687a      	ldr	r2, [r7, #4]
 800d5ac:	2100      	movs	r1, #0
 800d5ae:	6978      	ldr	r0, [r7, #20]
 800d5b0:	f7ff ff8a 	bl	800d4c8 <xTimerGenericCommand>
 800d5b4:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800d5b6:	693b      	ldr	r3, [r7, #16]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d112      	bne.n	800d5e2 <prvProcessExpiredTimer+0x82>
 800d5bc:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d5c0:	f383 8811 	msr	BASEPRI, r3
 800d5c4:	f3bf 8f6f 	isb	sy
 800d5c8:	f3bf 8f4f 	dsb	sy
 800d5cc:	60fb      	str	r3, [r7, #12]
 800d5ce:	e7fe      	b.n	800d5ce <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d5d0:	697b      	ldr	r3, [r7, #20]
 800d5d2:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d5d6:	f023 0301 	bic.w	r3, r3, #1
 800d5da:	b2da      	uxtb	r2, r3
 800d5dc:	697b      	ldr	r3, [r7, #20]
 800d5de:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d5e2:	697b      	ldr	r3, [r7, #20]
 800d5e4:	6a1b      	ldr	r3, [r3, #32]
 800d5e6:	6978      	ldr	r0, [r7, #20]
 800d5e8:	4798      	blx	r3
}
 800d5ea:	bf00      	nop
 800d5ec:	3718      	adds	r7, #24
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}
 800d5f2:	bf00      	nop
 800d5f4:	20001224 	.word	0x20001224

0800d5f8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800d5f8:	b580      	push	{r7, lr}
 800d5fa:	b084      	sub	sp, #16
 800d5fc:	af00      	add	r7, sp, #0
 800d5fe:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d600:	f107 0308 	add.w	r3, r7, #8
 800d604:	4618      	mov	r0, r3
 800d606:	f000 f857 	bl	800d6b8 <prvGetNextExpireTime>
 800d60a:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800d60c:	68bb      	ldr	r3, [r7, #8]
 800d60e:	4619      	mov	r1, r3
 800d610:	68f8      	ldr	r0, [r7, #12]
 800d612:	f000 f803 	bl	800d61c <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800d616:	f000 f8d5 	bl	800d7c4 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800d61a:	e7f1      	b.n	800d600 <prvTimerTask+0x8>

0800d61c <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800d61c:	b580      	push	{r7, lr}
 800d61e:	b084      	sub	sp, #16
 800d620:	af00      	add	r7, sp, #0
 800d622:	6078      	str	r0, [r7, #4]
 800d624:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800d626:	f7ff fa57 	bl	800cad8 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d62a:	f107 0308 	add.w	r3, r7, #8
 800d62e:	4618      	mov	r0, r3
 800d630:	f000 f866 	bl	800d700 <prvSampleTimeNow>
 800d634:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800d636:	68bb      	ldr	r3, [r7, #8]
 800d638:	2b00      	cmp	r3, #0
 800d63a:	d130      	bne.n	800d69e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800d63c:	683b      	ldr	r3, [r7, #0]
 800d63e:	2b00      	cmp	r3, #0
 800d640:	d10a      	bne.n	800d658 <prvProcessTimerOrBlockTask+0x3c>
 800d642:	687a      	ldr	r2, [r7, #4]
 800d644:	68fb      	ldr	r3, [r7, #12]
 800d646:	429a      	cmp	r2, r3
 800d648:	d806      	bhi.n	800d658 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800d64a:	f7ff fa53 	bl	800caf4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800d64e:	68f9      	ldr	r1, [r7, #12]
 800d650:	6878      	ldr	r0, [r7, #4]
 800d652:	f7ff ff85 	bl	800d560 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800d656:	e024      	b.n	800d6a2 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800d658:	683b      	ldr	r3, [r7, #0]
 800d65a:	2b00      	cmp	r3, #0
 800d65c:	d008      	beq.n	800d670 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800d65e:	4b13      	ldr	r3, [pc, #76]	; (800d6ac <prvProcessTimerOrBlockTask+0x90>)
 800d660:	681b      	ldr	r3, [r3, #0]
 800d662:	681b      	ldr	r3, [r3, #0]
 800d664:	2b00      	cmp	r3, #0
 800d666:	d101      	bne.n	800d66c <prvProcessTimerOrBlockTask+0x50>
 800d668:	2301      	movs	r3, #1
 800d66a:	e000      	b.n	800d66e <prvProcessTimerOrBlockTask+0x52>
 800d66c:	2300      	movs	r3, #0
 800d66e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800d670:	4b0f      	ldr	r3, [pc, #60]	; (800d6b0 <prvProcessTimerOrBlockTask+0x94>)
 800d672:	6818      	ldr	r0, [r3, #0]
 800d674:	687a      	ldr	r2, [r7, #4]
 800d676:	68fb      	ldr	r3, [r7, #12]
 800d678:	1ad3      	subs	r3, r2, r3
 800d67a:	683a      	ldr	r2, [r7, #0]
 800d67c:	4619      	mov	r1, r3
 800d67e:	f7fe ffc1 	bl	800c604 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800d682:	f7ff fa37 	bl	800caf4 <xTaskResumeAll>
 800d686:	4603      	mov	r3, r0
 800d688:	2b00      	cmp	r3, #0
 800d68a:	d10a      	bne.n	800d6a2 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800d68c:	4b09      	ldr	r3, [pc, #36]	; (800d6b4 <prvProcessTimerOrBlockTask+0x98>)
 800d68e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d692:	601a      	str	r2, [r3, #0]
 800d694:	f3bf 8f4f 	dsb	sy
 800d698:	f3bf 8f6f 	isb	sy
}
 800d69c:	e001      	b.n	800d6a2 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800d69e:	f7ff fa29 	bl	800caf4 <xTaskResumeAll>
}
 800d6a2:	bf00      	nop
 800d6a4:	3710      	adds	r7, #16
 800d6a6:	46bd      	mov	sp, r7
 800d6a8:	bd80      	pop	{r7, pc}
 800d6aa:	bf00      	nop
 800d6ac:	20001228 	.word	0x20001228
 800d6b0:	2000122c 	.word	0x2000122c
 800d6b4:	e000ed04 	.word	0xe000ed04

0800d6b8 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800d6b8:	b480      	push	{r7}
 800d6ba:	b085      	sub	sp, #20
 800d6bc:	af00      	add	r7, sp, #0
 800d6be:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800d6c0:	4b0e      	ldr	r3, [pc, #56]	; (800d6fc <prvGetNextExpireTime+0x44>)
 800d6c2:	681b      	ldr	r3, [r3, #0]
 800d6c4:	681b      	ldr	r3, [r3, #0]
 800d6c6:	2b00      	cmp	r3, #0
 800d6c8:	d101      	bne.n	800d6ce <prvGetNextExpireTime+0x16>
 800d6ca:	2201      	movs	r2, #1
 800d6cc:	e000      	b.n	800d6d0 <prvGetNextExpireTime+0x18>
 800d6ce:	2200      	movs	r2, #0
 800d6d0:	687b      	ldr	r3, [r7, #4]
 800d6d2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800d6d4:	687b      	ldr	r3, [r7, #4]
 800d6d6:	681b      	ldr	r3, [r3, #0]
 800d6d8:	2b00      	cmp	r3, #0
 800d6da:	d105      	bne.n	800d6e8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d6dc:	4b07      	ldr	r3, [pc, #28]	; (800d6fc <prvGetNextExpireTime+0x44>)
 800d6de:	681b      	ldr	r3, [r3, #0]
 800d6e0:	68db      	ldr	r3, [r3, #12]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	60fb      	str	r3, [r7, #12]
 800d6e6:	e001      	b.n	800d6ec <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800d6e8:	2300      	movs	r3, #0
 800d6ea:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800d6ec:	68fb      	ldr	r3, [r7, #12]
}
 800d6ee:	4618      	mov	r0, r3
 800d6f0:	3714      	adds	r7, #20
 800d6f2:	46bd      	mov	sp, r7
 800d6f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d6f8:	4770      	bx	lr
 800d6fa:	bf00      	nop
 800d6fc:	20001224 	.word	0x20001224

0800d700 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800d700:	b580      	push	{r7, lr}
 800d702:	b084      	sub	sp, #16
 800d704:	af00      	add	r7, sp, #0
 800d706:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800d708:	f7ff fa90 	bl	800cc2c <xTaskGetTickCount>
 800d70c:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800d70e:	4b0b      	ldr	r3, [pc, #44]	; (800d73c <prvSampleTimeNow+0x3c>)
 800d710:	681b      	ldr	r3, [r3, #0]
 800d712:	68fa      	ldr	r2, [r7, #12]
 800d714:	429a      	cmp	r2, r3
 800d716:	d205      	bcs.n	800d724 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800d718:	f000 f930 	bl	800d97c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800d71c:	687b      	ldr	r3, [r7, #4]
 800d71e:	2201      	movs	r2, #1
 800d720:	601a      	str	r2, [r3, #0]
 800d722:	e002      	b.n	800d72a <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800d724:	687b      	ldr	r3, [r7, #4]
 800d726:	2200      	movs	r2, #0
 800d728:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800d72a:	4a04      	ldr	r2, [pc, #16]	; (800d73c <prvSampleTimeNow+0x3c>)
 800d72c:	68fb      	ldr	r3, [r7, #12]
 800d72e:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800d730:	68fb      	ldr	r3, [r7, #12]
}
 800d732:	4618      	mov	r0, r3
 800d734:	3710      	adds	r7, #16
 800d736:	46bd      	mov	sp, r7
 800d738:	bd80      	pop	{r7, pc}
 800d73a:	bf00      	nop
 800d73c:	20001234 	.word	0x20001234

0800d740 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b086      	sub	sp, #24
 800d744:	af00      	add	r7, sp, #0
 800d746:	60f8      	str	r0, [r7, #12]
 800d748:	60b9      	str	r1, [r7, #8]
 800d74a:	607a      	str	r2, [r7, #4]
 800d74c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800d74e:	2300      	movs	r3, #0
 800d750:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	68ba      	ldr	r2, [r7, #8]
 800d756:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d758:	68fb      	ldr	r3, [r7, #12]
 800d75a:	68fa      	ldr	r2, [r7, #12]
 800d75c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800d75e:	68ba      	ldr	r2, [r7, #8]
 800d760:	687b      	ldr	r3, [r7, #4]
 800d762:	429a      	cmp	r2, r3
 800d764:	d812      	bhi.n	800d78c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800d766:	687a      	ldr	r2, [r7, #4]
 800d768:	683b      	ldr	r3, [r7, #0]
 800d76a:	1ad2      	subs	r2, r2, r3
 800d76c:	68fb      	ldr	r3, [r7, #12]
 800d76e:	699b      	ldr	r3, [r3, #24]
 800d770:	429a      	cmp	r2, r3
 800d772:	d302      	bcc.n	800d77a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800d774:	2301      	movs	r3, #1
 800d776:	617b      	str	r3, [r7, #20]
 800d778:	e01b      	b.n	800d7b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800d77a:	4b10      	ldr	r3, [pc, #64]	; (800d7bc <prvInsertTimerInActiveList+0x7c>)
 800d77c:	681a      	ldr	r2, [r3, #0]
 800d77e:	68fb      	ldr	r3, [r7, #12]
 800d780:	3304      	adds	r3, #4
 800d782:	4619      	mov	r1, r3
 800d784:	4610      	mov	r0, r2
 800d786:	f7fe fa3a 	bl	800bbfe <vListInsert>
 800d78a:	e012      	b.n	800d7b2 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800d78c:	687a      	ldr	r2, [r7, #4]
 800d78e:	683b      	ldr	r3, [r7, #0]
 800d790:	429a      	cmp	r2, r3
 800d792:	d206      	bcs.n	800d7a2 <prvInsertTimerInActiveList+0x62>
 800d794:	68ba      	ldr	r2, [r7, #8]
 800d796:	683b      	ldr	r3, [r7, #0]
 800d798:	429a      	cmp	r2, r3
 800d79a:	d302      	bcc.n	800d7a2 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800d79c:	2301      	movs	r3, #1
 800d79e:	617b      	str	r3, [r7, #20]
 800d7a0:	e007      	b.n	800d7b2 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d7a2:	4b07      	ldr	r3, [pc, #28]	; (800d7c0 <prvInsertTimerInActiveList+0x80>)
 800d7a4:	681a      	ldr	r2, [r3, #0]
 800d7a6:	68fb      	ldr	r3, [r7, #12]
 800d7a8:	3304      	adds	r3, #4
 800d7aa:	4619      	mov	r1, r3
 800d7ac:	4610      	mov	r0, r2
 800d7ae:	f7fe fa26 	bl	800bbfe <vListInsert>
		}
	}

	return xProcessTimerNow;
 800d7b2:	697b      	ldr	r3, [r7, #20]
}
 800d7b4:	4618      	mov	r0, r3
 800d7b6:	3718      	adds	r7, #24
 800d7b8:	46bd      	mov	sp, r7
 800d7ba:	bd80      	pop	{r7, pc}
 800d7bc:	20001228 	.word	0x20001228
 800d7c0:	20001224 	.word	0x20001224

0800d7c4 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800d7c4:	b580      	push	{r7, lr}
 800d7c6:	b08e      	sub	sp, #56	; 0x38
 800d7c8:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d7ca:	e0c6      	b.n	800d95a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800d7cc:	687b      	ldr	r3, [r7, #4]
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	da17      	bge.n	800d802 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800d7d2:	1d3b      	adds	r3, r7, #4
 800d7d4:	3304      	adds	r3, #4
 800d7d6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800d7d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d109      	bne.n	800d7f2 <prvProcessReceivedCommands+0x2e>
 800d7de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7e2:	f383 8811 	msr	BASEPRI, r3
 800d7e6:	f3bf 8f6f 	isb	sy
 800d7ea:	f3bf 8f4f 	dsb	sy
 800d7ee:	61fb      	str	r3, [r7, #28]
 800d7f0:	e7fe      	b.n	800d7f0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800d7f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d7f4:	681b      	ldr	r3, [r3, #0]
 800d7f6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7f8:	6850      	ldr	r0, [r2, #4]
 800d7fa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d7fc:	6892      	ldr	r2, [r2, #8]
 800d7fe:	4611      	mov	r1, r2
 800d800:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800d802:	687b      	ldr	r3, [r7, #4]
 800d804:	2b00      	cmp	r3, #0
 800d806:	f2c0 80a7 	blt.w	800d958 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800d80a:	68fb      	ldr	r3, [r7, #12]
 800d80c:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800d80e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d810:	695b      	ldr	r3, [r3, #20]
 800d812:	2b00      	cmp	r3, #0
 800d814:	d004      	beq.n	800d820 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d818:	3304      	adds	r3, #4
 800d81a:	4618      	mov	r0, r3
 800d81c:	f7fe fa28 	bl	800bc70 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800d820:	463b      	mov	r3, r7
 800d822:	4618      	mov	r0, r3
 800d824:	f7ff ff6c 	bl	800d700 <prvSampleTimeNow>
 800d828:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800d82a:	687b      	ldr	r3, [r7, #4]
 800d82c:	2b09      	cmp	r3, #9
 800d82e:	f200 8094 	bhi.w	800d95a <prvProcessReceivedCommands+0x196>
 800d832:	a201      	add	r2, pc, #4	; (adr r2, 800d838 <prvProcessReceivedCommands+0x74>)
 800d834:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d838:	0800d861 	.word	0x0800d861
 800d83c:	0800d861 	.word	0x0800d861
 800d840:	0800d861 	.word	0x0800d861
 800d844:	0800d8d3 	.word	0x0800d8d3
 800d848:	0800d8e7 	.word	0x0800d8e7
 800d84c:	0800d92f 	.word	0x0800d92f
 800d850:	0800d861 	.word	0x0800d861
 800d854:	0800d861 	.word	0x0800d861
 800d858:	0800d8d3 	.word	0x0800d8d3
 800d85c:	0800d8e7 	.word	0x0800d8e7
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d860:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d862:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d866:	f043 0301 	orr.w	r3, r3, #1
 800d86a:	b2da      	uxtb	r2, r3
 800d86c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d86e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800d872:	68ba      	ldr	r2, [r7, #8]
 800d874:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d876:	699b      	ldr	r3, [r3, #24]
 800d878:	18d1      	adds	r1, r2, r3
 800d87a:	68bb      	ldr	r3, [r7, #8]
 800d87c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d87e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d880:	f7ff ff5e 	bl	800d740 <prvInsertTimerInActiveList>
 800d884:	4603      	mov	r3, r0
 800d886:	2b00      	cmp	r3, #0
 800d888:	d067      	beq.n	800d95a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d88a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d88c:	6a1b      	ldr	r3, [r3, #32]
 800d88e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d890:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d894:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d898:	f003 0304 	and.w	r3, r3, #4
 800d89c:	2b00      	cmp	r3, #0
 800d89e:	d05c      	beq.n	800d95a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800d8a0:	68ba      	ldr	r2, [r7, #8]
 800d8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a4:	699b      	ldr	r3, [r3, #24]
 800d8a6:	441a      	add	r2, r3
 800d8a8:	2300      	movs	r3, #0
 800d8aa:	9300      	str	r3, [sp, #0]
 800d8ac:	2300      	movs	r3, #0
 800d8ae:	2100      	movs	r1, #0
 800d8b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8b2:	f7ff fe09 	bl	800d4c8 <xTimerGenericCommand>
 800d8b6:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800d8b8:	6a3b      	ldr	r3, [r7, #32]
 800d8ba:	2b00      	cmp	r3, #0
 800d8bc:	d14d      	bne.n	800d95a <prvProcessReceivedCommands+0x196>
 800d8be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d8c2:	f383 8811 	msr	BASEPRI, r3
 800d8c6:	f3bf 8f6f 	isb	sy
 800d8ca:	f3bf 8f4f 	dsb	sy
 800d8ce:	61bb      	str	r3, [r7, #24]
 800d8d0:	e7fe      	b.n	800d8d0 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8d4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8d8:	f023 0301 	bic.w	r3, r3, #1
 800d8dc:	b2da      	uxtb	r2, r3
 800d8de:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800d8e4:	e039      	b.n	800d95a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800d8e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d8ec:	f043 0301 	orr.w	r3, r3, #1
 800d8f0:	b2da      	uxtb	r2, r3
 800d8f2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8f4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800d8f8:	68ba      	ldr	r2, [r7, #8]
 800d8fa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8fc:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800d8fe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d900:	699b      	ldr	r3, [r3, #24]
 800d902:	2b00      	cmp	r3, #0
 800d904:	d109      	bne.n	800d91a <prvProcessReceivedCommands+0x156>
 800d906:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d90a:	f383 8811 	msr	BASEPRI, r3
 800d90e:	f3bf 8f6f 	isb	sy
 800d912:	f3bf 8f4f 	dsb	sy
 800d916:	617b      	str	r3, [r7, #20]
 800d918:	e7fe      	b.n	800d918 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800d91a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d91c:	699a      	ldr	r2, [r3, #24]
 800d91e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d920:	18d1      	adds	r1, r2, r3
 800d922:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d924:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800d926:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d928:	f7ff ff0a 	bl	800d740 <prvInsertTimerInActiveList>
					break;
 800d92c:	e015      	b.n	800d95a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800d92e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d930:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d934:	f003 0302 	and.w	r3, r3, #2
 800d938:	2b00      	cmp	r3, #0
 800d93a:	d103      	bne.n	800d944 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800d93c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d93e:	f000 fbc1 	bl	800e0c4 <vPortFree>
 800d942:	e00a      	b.n	800d95a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800d944:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d946:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d94a:	f023 0301 	bic.w	r3, r3, #1
 800d94e:	b2da      	uxtb	r2, r3
 800d950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d952:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800d956:	e000      	b.n	800d95a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800d958:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800d95a:	4b07      	ldr	r3, [pc, #28]	; (800d978 <prvProcessReceivedCommands+0x1b4>)
 800d95c:	681b      	ldr	r3, [r3, #0]
 800d95e:	1d39      	adds	r1, r7, #4
 800d960:	2200      	movs	r2, #0
 800d962:	4618      	mov	r0, r3
 800d964:	f7fe fc3a 	bl	800c1dc <xQueueReceive>
 800d968:	4603      	mov	r3, r0
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	f47f af2e 	bne.w	800d7cc <prvProcessReceivedCommands+0x8>
	}
}
 800d970:	bf00      	nop
 800d972:	3730      	adds	r7, #48	; 0x30
 800d974:	46bd      	mov	sp, r7
 800d976:	bd80      	pop	{r7, pc}
 800d978:	2000122c 	.word	0x2000122c

0800d97c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800d97c:	b580      	push	{r7, lr}
 800d97e:	b088      	sub	sp, #32
 800d980:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800d982:	e047      	b.n	800da14 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800d984:	4b2d      	ldr	r3, [pc, #180]	; (800da3c <prvSwitchTimerLists+0xc0>)
 800d986:	681b      	ldr	r3, [r3, #0]
 800d988:	68db      	ldr	r3, [r3, #12]
 800d98a:	681b      	ldr	r3, [r3, #0]
 800d98c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800d98e:	4b2b      	ldr	r3, [pc, #172]	; (800da3c <prvSwitchTimerLists+0xc0>)
 800d990:	681b      	ldr	r3, [r3, #0]
 800d992:	68db      	ldr	r3, [r3, #12]
 800d994:	68db      	ldr	r3, [r3, #12]
 800d996:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	3304      	adds	r3, #4
 800d99c:	4618      	mov	r0, r3
 800d99e:	f7fe f967 	bl	800bc70 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	6a1b      	ldr	r3, [r3, #32]
 800d9a6:	68f8      	ldr	r0, [r7, #12]
 800d9a8:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800d9aa:	68fb      	ldr	r3, [r7, #12]
 800d9ac:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800d9b0:	f003 0304 	and.w	r3, r3, #4
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d02d      	beq.n	800da14 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	699b      	ldr	r3, [r3, #24]
 800d9bc:	693a      	ldr	r2, [r7, #16]
 800d9be:	4413      	add	r3, r2
 800d9c0:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800d9c2:	68ba      	ldr	r2, [r7, #8]
 800d9c4:	693b      	ldr	r3, [r7, #16]
 800d9c6:	429a      	cmp	r2, r3
 800d9c8:	d90e      	bls.n	800d9e8 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800d9ca:	68fb      	ldr	r3, [r7, #12]
 800d9cc:	68ba      	ldr	r2, [r7, #8]
 800d9ce:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	68fa      	ldr	r2, [r7, #12]
 800d9d4:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800d9d6:	4b19      	ldr	r3, [pc, #100]	; (800da3c <prvSwitchTimerLists+0xc0>)
 800d9d8:	681a      	ldr	r2, [r3, #0]
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	3304      	adds	r3, #4
 800d9de:	4619      	mov	r1, r3
 800d9e0:	4610      	mov	r0, r2
 800d9e2:	f7fe f90c 	bl	800bbfe <vListInsert>
 800d9e6:	e015      	b.n	800da14 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800d9e8:	2300      	movs	r3, #0
 800d9ea:	9300      	str	r3, [sp, #0]
 800d9ec:	2300      	movs	r3, #0
 800d9ee:	693a      	ldr	r2, [r7, #16]
 800d9f0:	2100      	movs	r1, #0
 800d9f2:	68f8      	ldr	r0, [r7, #12]
 800d9f4:	f7ff fd68 	bl	800d4c8 <xTimerGenericCommand>
 800d9f8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d109      	bne.n	800da14 <prvSwitchTimerLists+0x98>
 800da00:	f04f 0350 	mov.w	r3, #80	; 0x50
 800da04:	f383 8811 	msr	BASEPRI, r3
 800da08:	f3bf 8f6f 	isb	sy
 800da0c:	f3bf 8f4f 	dsb	sy
 800da10:	603b      	str	r3, [r7, #0]
 800da12:	e7fe      	b.n	800da12 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800da14:	4b09      	ldr	r3, [pc, #36]	; (800da3c <prvSwitchTimerLists+0xc0>)
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	681b      	ldr	r3, [r3, #0]
 800da1a:	2b00      	cmp	r3, #0
 800da1c:	d1b2      	bne.n	800d984 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800da1e:	4b07      	ldr	r3, [pc, #28]	; (800da3c <prvSwitchTimerLists+0xc0>)
 800da20:	681b      	ldr	r3, [r3, #0]
 800da22:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800da24:	4b06      	ldr	r3, [pc, #24]	; (800da40 <prvSwitchTimerLists+0xc4>)
 800da26:	681b      	ldr	r3, [r3, #0]
 800da28:	4a04      	ldr	r2, [pc, #16]	; (800da3c <prvSwitchTimerLists+0xc0>)
 800da2a:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800da2c:	4a04      	ldr	r2, [pc, #16]	; (800da40 <prvSwitchTimerLists+0xc4>)
 800da2e:	697b      	ldr	r3, [r7, #20]
 800da30:	6013      	str	r3, [r2, #0]
}
 800da32:	bf00      	nop
 800da34:	3718      	adds	r7, #24
 800da36:	46bd      	mov	sp, r7
 800da38:	bd80      	pop	{r7, pc}
 800da3a:	bf00      	nop
 800da3c:	20001224 	.word	0x20001224
 800da40:	20001228 	.word	0x20001228

0800da44 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800da44:	b580      	push	{r7, lr}
 800da46:	b082      	sub	sp, #8
 800da48:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800da4a:	f000 f95f 	bl	800dd0c <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800da4e:	4b15      	ldr	r3, [pc, #84]	; (800daa4 <prvCheckForValidListAndQueue+0x60>)
 800da50:	681b      	ldr	r3, [r3, #0]
 800da52:	2b00      	cmp	r3, #0
 800da54:	d120      	bne.n	800da98 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800da56:	4814      	ldr	r0, [pc, #80]	; (800daa8 <prvCheckForValidListAndQueue+0x64>)
 800da58:	f7fe f880 	bl	800bb5c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800da5c:	4813      	ldr	r0, [pc, #76]	; (800daac <prvCheckForValidListAndQueue+0x68>)
 800da5e:	f7fe f87d 	bl	800bb5c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800da62:	4b13      	ldr	r3, [pc, #76]	; (800dab0 <prvCheckForValidListAndQueue+0x6c>)
 800da64:	4a10      	ldr	r2, [pc, #64]	; (800daa8 <prvCheckForValidListAndQueue+0x64>)
 800da66:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800da68:	4b12      	ldr	r3, [pc, #72]	; (800dab4 <prvCheckForValidListAndQueue+0x70>)
 800da6a:	4a10      	ldr	r2, [pc, #64]	; (800daac <prvCheckForValidListAndQueue+0x68>)
 800da6c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800da6e:	2300      	movs	r3, #0
 800da70:	9300      	str	r3, [sp, #0]
 800da72:	4b11      	ldr	r3, [pc, #68]	; (800dab8 <prvCheckForValidListAndQueue+0x74>)
 800da74:	4a11      	ldr	r2, [pc, #68]	; (800dabc <prvCheckForValidListAndQueue+0x78>)
 800da76:	2110      	movs	r1, #16
 800da78:	200a      	movs	r0, #10
 800da7a:	f7fe f98b 	bl	800bd94 <xQueueGenericCreateStatic>
 800da7e:	4602      	mov	r2, r0
 800da80:	4b08      	ldr	r3, [pc, #32]	; (800daa4 <prvCheckForValidListAndQueue+0x60>)
 800da82:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800da84:	4b07      	ldr	r3, [pc, #28]	; (800daa4 <prvCheckForValidListAndQueue+0x60>)
 800da86:	681b      	ldr	r3, [r3, #0]
 800da88:	2b00      	cmp	r3, #0
 800da8a:	d005      	beq.n	800da98 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800da8c:	4b05      	ldr	r3, [pc, #20]	; (800daa4 <prvCheckForValidListAndQueue+0x60>)
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	490b      	ldr	r1, [pc, #44]	; (800dac0 <prvCheckForValidListAndQueue+0x7c>)
 800da92:	4618      	mov	r0, r3
 800da94:	f7fe fd8e 	bl	800c5b4 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800da98:	f000 f966 	bl	800dd68 <vPortExitCritical>
}
 800da9c:	bf00      	nop
 800da9e:	46bd      	mov	sp, r7
 800daa0:	bd80      	pop	{r7, pc}
 800daa2:	bf00      	nop
 800daa4:	2000122c 	.word	0x2000122c
 800daa8:	200011fc 	.word	0x200011fc
 800daac:	20001210 	.word	0x20001210
 800dab0:	20001224 	.word	0x20001224
 800dab4:	20001228 	.word	0x20001228
 800dab8:	200012d8 	.word	0x200012d8
 800dabc:	20001238 	.word	0x20001238
 800dac0:	08010050 	.word	0x08010050

0800dac4 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800dac4:	b480      	push	{r7}
 800dac6:	b085      	sub	sp, #20
 800dac8:	af00      	add	r7, sp, #0
 800daca:	60f8      	str	r0, [r7, #12]
 800dacc:	60b9      	str	r1, [r7, #8]
 800dace:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800dad0:	68fb      	ldr	r3, [r7, #12]
 800dad2:	3b04      	subs	r3, #4
 800dad4:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800dad6:	68fb      	ldr	r3, [r7, #12]
 800dad8:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800dadc:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	3b04      	subs	r3, #4
 800dae2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800dae4:	68bb      	ldr	r3, [r7, #8]
 800dae6:	f023 0201 	bic.w	r2, r3, #1
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	3b04      	subs	r3, #4
 800daf2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800daf4:	4a0c      	ldr	r2, [pc, #48]	; (800db28 <pxPortInitialiseStack+0x64>)
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	3b14      	subs	r3, #20
 800dafe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800db00:	687a      	ldr	r2, [r7, #4]
 800db02:	68fb      	ldr	r3, [r7, #12]
 800db04:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800db06:	68fb      	ldr	r3, [r7, #12]
 800db08:	3b04      	subs	r3, #4
 800db0a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800db0c:	68fb      	ldr	r3, [r7, #12]
 800db0e:	f06f 0202 	mvn.w	r2, #2
 800db12:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800db14:	68fb      	ldr	r3, [r7, #12]
 800db16:	3b20      	subs	r3, #32
 800db18:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800db1a:	68fb      	ldr	r3, [r7, #12]
}
 800db1c:	4618      	mov	r0, r3
 800db1e:	3714      	adds	r7, #20
 800db20:	46bd      	mov	sp, r7
 800db22:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db26:	4770      	bx	lr
 800db28:	0800db2d 	.word	0x0800db2d

0800db2c <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800db2c:	b480      	push	{r7}
 800db2e:	b085      	sub	sp, #20
 800db30:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800db32:	2300      	movs	r3, #0
 800db34:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800db36:	4b11      	ldr	r3, [pc, #68]	; (800db7c <prvTaskExitError+0x50>)
 800db38:	681b      	ldr	r3, [r3, #0]
 800db3a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800db3e:	d009      	beq.n	800db54 <prvTaskExitError+0x28>
 800db40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db44:	f383 8811 	msr	BASEPRI, r3
 800db48:	f3bf 8f6f 	isb	sy
 800db4c:	f3bf 8f4f 	dsb	sy
 800db50:	60fb      	str	r3, [r7, #12]
 800db52:	e7fe      	b.n	800db52 <prvTaskExitError+0x26>
 800db54:	f04f 0350 	mov.w	r3, #80	; 0x50
 800db58:	f383 8811 	msr	BASEPRI, r3
 800db5c:	f3bf 8f6f 	isb	sy
 800db60:	f3bf 8f4f 	dsb	sy
 800db64:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800db66:	bf00      	nop
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d0fc      	beq.n	800db68 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800db6e:	bf00      	nop
 800db70:	3714      	adds	r7, #20
 800db72:	46bd      	mov	sp, r7
 800db74:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db78:	4770      	bx	lr
 800db7a:	bf00      	nop
 800db7c:	20000014 	.word	0x20000014

0800db80 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800db80:	4b07      	ldr	r3, [pc, #28]	; (800dba0 <pxCurrentTCBConst2>)
 800db82:	6819      	ldr	r1, [r3, #0]
 800db84:	6808      	ldr	r0, [r1, #0]
 800db86:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db8a:	f380 8809 	msr	PSP, r0
 800db8e:	f3bf 8f6f 	isb	sy
 800db92:	f04f 0000 	mov.w	r0, #0
 800db96:	f380 8811 	msr	BASEPRI, r0
 800db9a:	4770      	bx	lr
 800db9c:	f3af 8000 	nop.w

0800dba0 <pxCurrentTCBConst2>:
 800dba0:	20000cfc 	.word	0x20000cfc
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800dba4:	bf00      	nop
 800dba6:	bf00      	nop

0800dba8 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800dba8:	4808      	ldr	r0, [pc, #32]	; (800dbcc <prvPortStartFirstTask+0x24>)
 800dbaa:	6800      	ldr	r0, [r0, #0]
 800dbac:	6800      	ldr	r0, [r0, #0]
 800dbae:	f380 8808 	msr	MSP, r0
 800dbb2:	f04f 0000 	mov.w	r0, #0
 800dbb6:	f380 8814 	msr	CONTROL, r0
 800dbba:	b662      	cpsie	i
 800dbbc:	b661      	cpsie	f
 800dbbe:	f3bf 8f4f 	dsb	sy
 800dbc2:	f3bf 8f6f 	isb	sy
 800dbc6:	df00      	svc	0
 800dbc8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800dbca:	bf00      	nop
 800dbcc:	e000ed08 	.word	0xe000ed08

0800dbd0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800dbd0:	b580      	push	{r7, lr}
 800dbd2:	b086      	sub	sp, #24
 800dbd4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800dbd6:	4b44      	ldr	r3, [pc, #272]	; (800dce8 <xPortStartScheduler+0x118>)
 800dbd8:	681b      	ldr	r3, [r3, #0]
 800dbda:	4a44      	ldr	r2, [pc, #272]	; (800dcec <xPortStartScheduler+0x11c>)
 800dbdc:	4293      	cmp	r3, r2
 800dbde:	d109      	bne.n	800dbf4 <xPortStartScheduler+0x24>
 800dbe0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dbe4:	f383 8811 	msr	BASEPRI, r3
 800dbe8:	f3bf 8f6f 	isb	sy
 800dbec:	f3bf 8f4f 	dsb	sy
 800dbf0:	613b      	str	r3, [r7, #16]
 800dbf2:	e7fe      	b.n	800dbf2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800dbf4:	4b3c      	ldr	r3, [pc, #240]	; (800dce8 <xPortStartScheduler+0x118>)
 800dbf6:	681b      	ldr	r3, [r3, #0]
 800dbf8:	4a3d      	ldr	r2, [pc, #244]	; (800dcf0 <xPortStartScheduler+0x120>)
 800dbfa:	4293      	cmp	r3, r2
 800dbfc:	d109      	bne.n	800dc12 <xPortStartScheduler+0x42>
 800dbfe:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc02:	f383 8811 	msr	BASEPRI, r3
 800dc06:	f3bf 8f6f 	isb	sy
 800dc0a:	f3bf 8f4f 	dsb	sy
 800dc0e:	60fb      	str	r3, [r7, #12]
 800dc10:	e7fe      	b.n	800dc10 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800dc12:	4b38      	ldr	r3, [pc, #224]	; (800dcf4 <xPortStartScheduler+0x124>)
 800dc14:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800dc16:	697b      	ldr	r3, [r7, #20]
 800dc18:	781b      	ldrb	r3, [r3, #0]
 800dc1a:	b2db      	uxtb	r3, r3
 800dc1c:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800dc1e:	697b      	ldr	r3, [r7, #20]
 800dc20:	22ff      	movs	r2, #255	; 0xff
 800dc22:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800dc24:	697b      	ldr	r3, [r7, #20]
 800dc26:	781b      	ldrb	r3, [r3, #0]
 800dc28:	b2db      	uxtb	r3, r3
 800dc2a:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800dc2c:	78fb      	ldrb	r3, [r7, #3]
 800dc2e:	b2db      	uxtb	r3, r3
 800dc30:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800dc34:	b2da      	uxtb	r2, r3
 800dc36:	4b30      	ldr	r3, [pc, #192]	; (800dcf8 <xPortStartScheduler+0x128>)
 800dc38:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800dc3a:	4b30      	ldr	r3, [pc, #192]	; (800dcfc <xPortStartScheduler+0x12c>)
 800dc3c:	2207      	movs	r2, #7
 800dc3e:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dc40:	e009      	b.n	800dc56 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800dc42:	4b2e      	ldr	r3, [pc, #184]	; (800dcfc <xPortStartScheduler+0x12c>)
 800dc44:	681b      	ldr	r3, [r3, #0]
 800dc46:	3b01      	subs	r3, #1
 800dc48:	4a2c      	ldr	r2, [pc, #176]	; (800dcfc <xPortStartScheduler+0x12c>)
 800dc4a:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800dc4c:	78fb      	ldrb	r3, [r7, #3]
 800dc4e:	b2db      	uxtb	r3, r3
 800dc50:	005b      	lsls	r3, r3, #1
 800dc52:	b2db      	uxtb	r3, r3
 800dc54:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800dc56:	78fb      	ldrb	r3, [r7, #3]
 800dc58:	b2db      	uxtb	r3, r3
 800dc5a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dc5e:	2b80      	cmp	r3, #128	; 0x80
 800dc60:	d0ef      	beq.n	800dc42 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800dc62:	4b26      	ldr	r3, [pc, #152]	; (800dcfc <xPortStartScheduler+0x12c>)
 800dc64:	681b      	ldr	r3, [r3, #0]
 800dc66:	f1c3 0307 	rsb	r3, r3, #7
 800dc6a:	2b04      	cmp	r3, #4
 800dc6c:	d009      	beq.n	800dc82 <xPortStartScheduler+0xb2>
 800dc6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc72:	f383 8811 	msr	BASEPRI, r3
 800dc76:	f3bf 8f6f 	isb	sy
 800dc7a:	f3bf 8f4f 	dsb	sy
 800dc7e:	60bb      	str	r3, [r7, #8]
 800dc80:	e7fe      	b.n	800dc80 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800dc82:	4b1e      	ldr	r3, [pc, #120]	; (800dcfc <xPortStartScheduler+0x12c>)
 800dc84:	681b      	ldr	r3, [r3, #0]
 800dc86:	021b      	lsls	r3, r3, #8
 800dc88:	4a1c      	ldr	r2, [pc, #112]	; (800dcfc <xPortStartScheduler+0x12c>)
 800dc8a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800dc8c:	4b1b      	ldr	r3, [pc, #108]	; (800dcfc <xPortStartScheduler+0x12c>)
 800dc8e:	681b      	ldr	r3, [r3, #0]
 800dc90:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800dc94:	4a19      	ldr	r2, [pc, #100]	; (800dcfc <xPortStartScheduler+0x12c>)
 800dc96:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800dc98:	687b      	ldr	r3, [r7, #4]
 800dc9a:	b2da      	uxtb	r2, r3
 800dc9c:	697b      	ldr	r3, [r7, #20]
 800dc9e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800dca0:	4b17      	ldr	r3, [pc, #92]	; (800dd00 <xPortStartScheduler+0x130>)
 800dca2:	681b      	ldr	r3, [r3, #0]
 800dca4:	4a16      	ldr	r2, [pc, #88]	; (800dd00 <xPortStartScheduler+0x130>)
 800dca6:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800dcaa:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800dcac:	4b14      	ldr	r3, [pc, #80]	; (800dd00 <xPortStartScheduler+0x130>)
 800dcae:	681b      	ldr	r3, [r3, #0]
 800dcb0:	4a13      	ldr	r2, [pc, #76]	; (800dd00 <xPortStartScheduler+0x130>)
 800dcb2:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800dcb6:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800dcb8:	f000 f8d6 	bl	800de68 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800dcbc:	4b11      	ldr	r3, [pc, #68]	; (800dd04 <xPortStartScheduler+0x134>)
 800dcbe:	2200      	movs	r2, #0
 800dcc0:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800dcc2:	f000 f8f5 	bl	800deb0 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800dcc6:	4b10      	ldr	r3, [pc, #64]	; (800dd08 <xPortStartScheduler+0x138>)
 800dcc8:	681b      	ldr	r3, [r3, #0]
 800dcca:	4a0f      	ldr	r2, [pc, #60]	; (800dd08 <xPortStartScheduler+0x138>)
 800dccc:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800dcd0:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800dcd2:	f7ff ff69 	bl	800dba8 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800dcd6:	f7ff f871 	bl	800cdbc <vTaskSwitchContext>
	prvTaskExitError();
 800dcda:	f7ff ff27 	bl	800db2c <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800dcde:	2300      	movs	r3, #0
}
 800dce0:	4618      	mov	r0, r3
 800dce2:	3718      	adds	r7, #24
 800dce4:	46bd      	mov	sp, r7
 800dce6:	bd80      	pop	{r7, pc}
 800dce8:	e000ed00 	.word	0xe000ed00
 800dcec:	410fc271 	.word	0x410fc271
 800dcf0:	410fc270 	.word	0x410fc270
 800dcf4:	e000e400 	.word	0xe000e400
 800dcf8:	20001328 	.word	0x20001328
 800dcfc:	2000132c 	.word	0x2000132c
 800dd00:	e000ed20 	.word	0xe000ed20
 800dd04:	20000014 	.word	0x20000014
 800dd08:	e000ef34 	.word	0xe000ef34

0800dd0c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800dd0c:	b480      	push	{r7}
 800dd0e:	b083      	sub	sp, #12
 800dd10:	af00      	add	r7, sp, #0
 800dd12:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd16:	f383 8811 	msr	BASEPRI, r3
 800dd1a:	f3bf 8f6f 	isb	sy
 800dd1e:	f3bf 8f4f 	dsb	sy
 800dd22:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800dd24:	4b0e      	ldr	r3, [pc, #56]	; (800dd60 <vPortEnterCritical+0x54>)
 800dd26:	681b      	ldr	r3, [r3, #0]
 800dd28:	3301      	adds	r3, #1
 800dd2a:	4a0d      	ldr	r2, [pc, #52]	; (800dd60 <vPortEnterCritical+0x54>)
 800dd2c:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800dd2e:	4b0c      	ldr	r3, [pc, #48]	; (800dd60 <vPortEnterCritical+0x54>)
 800dd30:	681b      	ldr	r3, [r3, #0]
 800dd32:	2b01      	cmp	r3, #1
 800dd34:	d10e      	bne.n	800dd54 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800dd36:	4b0b      	ldr	r3, [pc, #44]	; (800dd64 <vPortEnterCritical+0x58>)
 800dd38:	681b      	ldr	r3, [r3, #0]
 800dd3a:	b2db      	uxtb	r3, r3
 800dd3c:	2b00      	cmp	r3, #0
 800dd3e:	d009      	beq.n	800dd54 <vPortEnterCritical+0x48>
 800dd40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd44:	f383 8811 	msr	BASEPRI, r3
 800dd48:	f3bf 8f6f 	isb	sy
 800dd4c:	f3bf 8f4f 	dsb	sy
 800dd50:	603b      	str	r3, [r7, #0]
 800dd52:	e7fe      	b.n	800dd52 <vPortEnterCritical+0x46>
	}
}
 800dd54:	bf00      	nop
 800dd56:	370c      	adds	r7, #12
 800dd58:	46bd      	mov	sp, r7
 800dd5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dd5e:	4770      	bx	lr
 800dd60:	20000014 	.word	0x20000014
 800dd64:	e000ed04 	.word	0xe000ed04

0800dd68 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800dd68:	b480      	push	{r7}
 800dd6a:	b083      	sub	sp, #12
 800dd6c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800dd6e:	4b11      	ldr	r3, [pc, #68]	; (800ddb4 <vPortExitCritical+0x4c>)
 800dd70:	681b      	ldr	r3, [r3, #0]
 800dd72:	2b00      	cmp	r3, #0
 800dd74:	d109      	bne.n	800dd8a <vPortExitCritical+0x22>
 800dd76:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dd7a:	f383 8811 	msr	BASEPRI, r3
 800dd7e:	f3bf 8f6f 	isb	sy
 800dd82:	f3bf 8f4f 	dsb	sy
 800dd86:	607b      	str	r3, [r7, #4]
 800dd88:	e7fe      	b.n	800dd88 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800dd8a:	4b0a      	ldr	r3, [pc, #40]	; (800ddb4 <vPortExitCritical+0x4c>)
 800dd8c:	681b      	ldr	r3, [r3, #0]
 800dd8e:	3b01      	subs	r3, #1
 800dd90:	4a08      	ldr	r2, [pc, #32]	; (800ddb4 <vPortExitCritical+0x4c>)
 800dd92:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800dd94:	4b07      	ldr	r3, [pc, #28]	; (800ddb4 <vPortExitCritical+0x4c>)
 800dd96:	681b      	ldr	r3, [r3, #0]
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d104      	bne.n	800dda6 <vPortExitCritical+0x3e>
 800dd9c:	2300      	movs	r3, #0
 800dd9e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800dda0:	683b      	ldr	r3, [r7, #0]
 800dda2:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800dda6:	bf00      	nop
 800dda8:	370c      	adds	r7, #12
 800ddaa:	46bd      	mov	sp, r7
 800ddac:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ddb0:	4770      	bx	lr
 800ddb2:	bf00      	nop
 800ddb4:	20000014 	.word	0x20000014
	...

0800ddc0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800ddc0:	f3ef 8009 	mrs	r0, PSP
 800ddc4:	f3bf 8f6f 	isb	sy
 800ddc8:	4b15      	ldr	r3, [pc, #84]	; (800de20 <pxCurrentTCBConst>)
 800ddca:	681a      	ldr	r2, [r3, #0]
 800ddcc:	f01e 0f10 	tst.w	lr, #16
 800ddd0:	bf08      	it	eq
 800ddd2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800ddd6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddda:	6010      	str	r0, [r2, #0]
 800dddc:	e92d 0009 	stmdb	sp!, {r0, r3}
 800dde0:	f04f 0050 	mov.w	r0, #80	; 0x50
 800dde4:	f380 8811 	msr	BASEPRI, r0
 800dde8:	f3bf 8f4f 	dsb	sy
 800ddec:	f3bf 8f6f 	isb	sy
 800ddf0:	f7fe ffe4 	bl	800cdbc <vTaskSwitchContext>
 800ddf4:	f04f 0000 	mov.w	r0, #0
 800ddf8:	f380 8811 	msr	BASEPRI, r0
 800ddfc:	bc09      	pop	{r0, r3}
 800ddfe:	6819      	ldr	r1, [r3, #0]
 800de00:	6808      	ldr	r0, [r1, #0]
 800de02:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800de06:	f01e 0f10 	tst.w	lr, #16
 800de0a:	bf08      	it	eq
 800de0c:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800de10:	f380 8809 	msr	PSP, r0
 800de14:	f3bf 8f6f 	isb	sy
 800de18:	4770      	bx	lr
 800de1a:	bf00      	nop
 800de1c:	f3af 8000 	nop.w

0800de20 <pxCurrentTCBConst>:
 800de20:	20000cfc 	.word	0x20000cfc
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800de24:	bf00      	nop
 800de26:	bf00      	nop

0800de28 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800de28:	b580      	push	{r7, lr}
 800de2a:	b082      	sub	sp, #8
 800de2c:	af00      	add	r7, sp, #0
	__asm volatile
 800de2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800de32:	f383 8811 	msr	BASEPRI, r3
 800de36:	f3bf 8f6f 	isb	sy
 800de3a:	f3bf 8f4f 	dsb	sy
 800de3e:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800de40:	f7fe ff04 	bl	800cc4c <xTaskIncrementTick>
 800de44:	4603      	mov	r3, r0
 800de46:	2b00      	cmp	r3, #0
 800de48:	d003      	beq.n	800de52 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800de4a:	4b06      	ldr	r3, [pc, #24]	; (800de64 <SysTick_Handler+0x3c>)
 800de4c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800de50:	601a      	str	r2, [r3, #0]
 800de52:	2300      	movs	r3, #0
 800de54:	603b      	str	r3, [r7, #0]
	__asm volatile
 800de56:	683b      	ldr	r3, [r7, #0]
 800de58:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800de5c:	bf00      	nop
 800de5e:	3708      	adds	r7, #8
 800de60:	46bd      	mov	sp, r7
 800de62:	bd80      	pop	{r7, pc}
 800de64:	e000ed04 	.word	0xe000ed04

0800de68 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800de68:	b480      	push	{r7}
 800de6a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800de6c:	4b0b      	ldr	r3, [pc, #44]	; (800de9c <vPortSetupTimerInterrupt+0x34>)
 800de6e:	2200      	movs	r2, #0
 800de70:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800de72:	4b0b      	ldr	r3, [pc, #44]	; (800dea0 <vPortSetupTimerInterrupt+0x38>)
 800de74:	2200      	movs	r2, #0
 800de76:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800de78:	4b0a      	ldr	r3, [pc, #40]	; (800dea4 <vPortSetupTimerInterrupt+0x3c>)
 800de7a:	681b      	ldr	r3, [r3, #0]
 800de7c:	4a0a      	ldr	r2, [pc, #40]	; (800dea8 <vPortSetupTimerInterrupt+0x40>)
 800de7e:	fba2 2303 	umull	r2, r3, r2, r3
 800de82:	099b      	lsrs	r3, r3, #6
 800de84:	4a09      	ldr	r2, [pc, #36]	; (800deac <vPortSetupTimerInterrupt+0x44>)
 800de86:	3b01      	subs	r3, #1
 800de88:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800de8a:	4b04      	ldr	r3, [pc, #16]	; (800de9c <vPortSetupTimerInterrupt+0x34>)
 800de8c:	2207      	movs	r2, #7
 800de8e:	601a      	str	r2, [r3, #0]
}
 800de90:	bf00      	nop
 800de92:	46bd      	mov	sp, r7
 800de94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de98:	4770      	bx	lr
 800de9a:	bf00      	nop
 800de9c:	e000e010 	.word	0xe000e010
 800dea0:	e000e018 	.word	0xe000e018
 800dea4:	20000008 	.word	0x20000008
 800dea8:	10624dd3 	.word	0x10624dd3
 800deac:	e000e014 	.word	0xe000e014

0800deb0 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800deb0:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800dec0 <vPortEnableVFP+0x10>
 800deb4:	6801      	ldr	r1, [r0, #0]
 800deb6:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800deba:	6001      	str	r1, [r0, #0]
 800debc:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800debe:	bf00      	nop
 800dec0:	e000ed88 	.word	0xe000ed88

0800dec4 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800dec4:	b480      	push	{r7}
 800dec6:	b085      	sub	sp, #20
 800dec8:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800deca:	f3ef 8305 	mrs	r3, IPSR
 800dece:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800ded0:	68fb      	ldr	r3, [r7, #12]
 800ded2:	2b0f      	cmp	r3, #15
 800ded4:	d913      	bls.n	800defe <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800ded6:	4a16      	ldr	r2, [pc, #88]	; (800df30 <vPortValidateInterruptPriority+0x6c>)
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	4413      	add	r3, r2
 800dedc:	781b      	ldrb	r3, [r3, #0]
 800dede:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800dee0:	4b14      	ldr	r3, [pc, #80]	; (800df34 <vPortValidateInterruptPriority+0x70>)
 800dee2:	781b      	ldrb	r3, [r3, #0]
 800dee4:	7afa      	ldrb	r2, [r7, #11]
 800dee6:	429a      	cmp	r2, r3
 800dee8:	d209      	bcs.n	800defe <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800deea:	f04f 0350 	mov.w	r3, #80	; 0x50
 800deee:	f383 8811 	msr	BASEPRI, r3
 800def2:	f3bf 8f6f 	isb	sy
 800def6:	f3bf 8f4f 	dsb	sy
 800defa:	607b      	str	r3, [r7, #4]
 800defc:	e7fe      	b.n	800defc <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800defe:	4b0e      	ldr	r3, [pc, #56]	; (800df38 <vPortValidateInterruptPriority+0x74>)
 800df00:	681b      	ldr	r3, [r3, #0]
 800df02:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800df06:	4b0d      	ldr	r3, [pc, #52]	; (800df3c <vPortValidateInterruptPriority+0x78>)
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	429a      	cmp	r2, r3
 800df0c:	d909      	bls.n	800df22 <vPortValidateInterruptPriority+0x5e>
 800df0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df12:	f383 8811 	msr	BASEPRI, r3
 800df16:	f3bf 8f6f 	isb	sy
 800df1a:	f3bf 8f4f 	dsb	sy
 800df1e:	603b      	str	r3, [r7, #0]
 800df20:	e7fe      	b.n	800df20 <vPortValidateInterruptPriority+0x5c>
	}
 800df22:	bf00      	nop
 800df24:	3714      	adds	r7, #20
 800df26:	46bd      	mov	sp, r7
 800df28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800df2c:	4770      	bx	lr
 800df2e:	bf00      	nop
 800df30:	e000e3f0 	.word	0xe000e3f0
 800df34:	20001328 	.word	0x20001328
 800df38:	e000ed0c 	.word	0xe000ed0c
 800df3c:	2000132c 	.word	0x2000132c

0800df40 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800df40:	b580      	push	{r7, lr}
 800df42:	b08a      	sub	sp, #40	; 0x28
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800df48:	2300      	movs	r3, #0
 800df4a:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800df4c:	f7fe fdc4 	bl	800cad8 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800df50:	4b57      	ldr	r3, [pc, #348]	; (800e0b0 <pvPortMalloc+0x170>)
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	2b00      	cmp	r3, #0
 800df56:	d101      	bne.n	800df5c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800df58:	f000 f90c 	bl	800e174 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800df5c:	4b55      	ldr	r3, [pc, #340]	; (800e0b4 <pvPortMalloc+0x174>)
 800df5e:	681a      	ldr	r2, [r3, #0]
 800df60:	687b      	ldr	r3, [r7, #4]
 800df62:	4013      	ands	r3, r2
 800df64:	2b00      	cmp	r3, #0
 800df66:	f040 808c 	bne.w	800e082 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800df6a:	687b      	ldr	r3, [r7, #4]
 800df6c:	2b00      	cmp	r3, #0
 800df6e:	d01c      	beq.n	800dfaa <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800df70:	2208      	movs	r2, #8
 800df72:	687b      	ldr	r3, [r7, #4]
 800df74:	4413      	add	r3, r2
 800df76:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	f003 0307 	and.w	r3, r3, #7
 800df7e:	2b00      	cmp	r3, #0
 800df80:	d013      	beq.n	800dfaa <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800df82:	687b      	ldr	r3, [r7, #4]
 800df84:	f023 0307 	bic.w	r3, r3, #7
 800df88:	3308      	adds	r3, #8
 800df8a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800df8c:	687b      	ldr	r3, [r7, #4]
 800df8e:	f003 0307 	and.w	r3, r3, #7
 800df92:	2b00      	cmp	r3, #0
 800df94:	d009      	beq.n	800dfaa <pvPortMalloc+0x6a>
 800df96:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df9a:	f383 8811 	msr	BASEPRI, r3
 800df9e:	f3bf 8f6f 	isb	sy
 800dfa2:	f3bf 8f4f 	dsb	sy
 800dfa6:	617b      	str	r3, [r7, #20]
 800dfa8:	e7fe      	b.n	800dfa8 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800dfaa:	687b      	ldr	r3, [r7, #4]
 800dfac:	2b00      	cmp	r3, #0
 800dfae:	d068      	beq.n	800e082 <pvPortMalloc+0x142>
 800dfb0:	4b41      	ldr	r3, [pc, #260]	; (800e0b8 <pvPortMalloc+0x178>)
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	687a      	ldr	r2, [r7, #4]
 800dfb6:	429a      	cmp	r2, r3
 800dfb8:	d863      	bhi.n	800e082 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800dfba:	4b40      	ldr	r3, [pc, #256]	; (800e0bc <pvPortMalloc+0x17c>)
 800dfbc:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800dfbe:	4b3f      	ldr	r3, [pc, #252]	; (800e0bc <pvPortMalloc+0x17c>)
 800dfc0:	681b      	ldr	r3, [r3, #0]
 800dfc2:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dfc4:	e004      	b.n	800dfd0 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800dfc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfc8:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800dfca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfcc:	681b      	ldr	r3, [r3, #0]
 800dfce:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800dfd0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd2:	685b      	ldr	r3, [r3, #4]
 800dfd4:	687a      	ldr	r2, [r7, #4]
 800dfd6:	429a      	cmp	r2, r3
 800dfd8:	d903      	bls.n	800dfe2 <pvPortMalloc+0xa2>
 800dfda:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfdc:	681b      	ldr	r3, [r3, #0]
 800dfde:	2b00      	cmp	r3, #0
 800dfe0:	d1f1      	bne.n	800dfc6 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800dfe2:	4b33      	ldr	r3, [pc, #204]	; (800e0b0 <pvPortMalloc+0x170>)
 800dfe4:	681b      	ldr	r3, [r3, #0]
 800dfe6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800dfe8:	429a      	cmp	r2, r3
 800dfea:	d04a      	beq.n	800e082 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800dfec:	6a3b      	ldr	r3, [r7, #32]
 800dfee:	681b      	ldr	r3, [r3, #0]
 800dff0:	2208      	movs	r2, #8
 800dff2:	4413      	add	r3, r2
 800dff4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800dff6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dff8:	681a      	ldr	r2, [r3, #0]
 800dffa:	6a3b      	ldr	r3, [r7, #32]
 800dffc:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800dffe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e000:	685a      	ldr	r2, [r3, #4]
 800e002:	687b      	ldr	r3, [r7, #4]
 800e004:	1ad2      	subs	r2, r2, r3
 800e006:	2308      	movs	r3, #8
 800e008:	005b      	lsls	r3, r3, #1
 800e00a:	429a      	cmp	r2, r3
 800e00c:	d91e      	bls.n	800e04c <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800e00e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	4413      	add	r3, r2
 800e014:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800e016:	69bb      	ldr	r3, [r7, #24]
 800e018:	f003 0307 	and.w	r3, r3, #7
 800e01c:	2b00      	cmp	r3, #0
 800e01e:	d009      	beq.n	800e034 <pvPortMalloc+0xf4>
 800e020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e024:	f383 8811 	msr	BASEPRI, r3
 800e028:	f3bf 8f6f 	isb	sy
 800e02c:	f3bf 8f4f 	dsb	sy
 800e030:	613b      	str	r3, [r7, #16]
 800e032:	e7fe      	b.n	800e032 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800e034:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e036:	685a      	ldr	r2, [r3, #4]
 800e038:	687b      	ldr	r3, [r7, #4]
 800e03a:	1ad2      	subs	r2, r2, r3
 800e03c:	69bb      	ldr	r3, [r7, #24]
 800e03e:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800e040:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e042:	687a      	ldr	r2, [r7, #4]
 800e044:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800e046:	69b8      	ldr	r0, [r7, #24]
 800e048:	f000 f8f6 	bl	800e238 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800e04c:	4b1a      	ldr	r3, [pc, #104]	; (800e0b8 <pvPortMalloc+0x178>)
 800e04e:	681a      	ldr	r2, [r3, #0]
 800e050:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e052:	685b      	ldr	r3, [r3, #4]
 800e054:	1ad3      	subs	r3, r2, r3
 800e056:	4a18      	ldr	r2, [pc, #96]	; (800e0b8 <pvPortMalloc+0x178>)
 800e058:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800e05a:	4b17      	ldr	r3, [pc, #92]	; (800e0b8 <pvPortMalloc+0x178>)
 800e05c:	681a      	ldr	r2, [r3, #0]
 800e05e:	4b18      	ldr	r3, [pc, #96]	; (800e0c0 <pvPortMalloc+0x180>)
 800e060:	681b      	ldr	r3, [r3, #0]
 800e062:	429a      	cmp	r2, r3
 800e064:	d203      	bcs.n	800e06e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800e066:	4b14      	ldr	r3, [pc, #80]	; (800e0b8 <pvPortMalloc+0x178>)
 800e068:	681b      	ldr	r3, [r3, #0]
 800e06a:	4a15      	ldr	r2, [pc, #84]	; (800e0c0 <pvPortMalloc+0x180>)
 800e06c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800e06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e070:	685a      	ldr	r2, [r3, #4]
 800e072:	4b10      	ldr	r3, [pc, #64]	; (800e0b4 <pvPortMalloc+0x174>)
 800e074:	681b      	ldr	r3, [r3, #0]
 800e076:	431a      	orrs	r2, r3
 800e078:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e07a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800e07c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e07e:	2200      	movs	r2, #0
 800e080:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800e082:	f7fe fd37 	bl	800caf4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800e086:	69fb      	ldr	r3, [r7, #28]
 800e088:	f003 0307 	and.w	r3, r3, #7
 800e08c:	2b00      	cmp	r3, #0
 800e08e:	d009      	beq.n	800e0a4 <pvPortMalloc+0x164>
 800e090:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e094:	f383 8811 	msr	BASEPRI, r3
 800e098:	f3bf 8f6f 	isb	sy
 800e09c:	f3bf 8f4f 	dsb	sy
 800e0a0:	60fb      	str	r3, [r7, #12]
 800e0a2:	e7fe      	b.n	800e0a2 <pvPortMalloc+0x162>
	return pvReturn;
 800e0a4:	69fb      	ldr	r3, [r7, #28]
}
 800e0a6:	4618      	mov	r0, r3
 800e0a8:	3728      	adds	r7, #40	; 0x28
 800e0aa:	46bd      	mov	sp, r7
 800e0ac:	bd80      	pop	{r7, pc}
 800e0ae:	bf00      	nop
 800e0b0:	20004f38 	.word	0x20004f38
 800e0b4:	20004f44 	.word	0x20004f44
 800e0b8:	20004f3c 	.word	0x20004f3c
 800e0bc:	20004f30 	.word	0x20004f30
 800e0c0:	20004f40 	.word	0x20004f40

0800e0c4 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800e0c4:	b580      	push	{r7, lr}
 800e0c6:	b086      	sub	sp, #24
 800e0c8:	af00      	add	r7, sp, #0
 800e0ca:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800e0cc:	687b      	ldr	r3, [r7, #4]
 800e0ce:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800e0d0:	687b      	ldr	r3, [r7, #4]
 800e0d2:	2b00      	cmp	r3, #0
 800e0d4:	d046      	beq.n	800e164 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800e0d6:	2308      	movs	r3, #8
 800e0d8:	425b      	negs	r3, r3
 800e0da:	697a      	ldr	r2, [r7, #20]
 800e0dc:	4413      	add	r3, r2
 800e0de:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800e0e0:	697b      	ldr	r3, [r7, #20]
 800e0e2:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800e0e4:	693b      	ldr	r3, [r7, #16]
 800e0e6:	685a      	ldr	r2, [r3, #4]
 800e0e8:	4b20      	ldr	r3, [pc, #128]	; (800e16c <vPortFree+0xa8>)
 800e0ea:	681b      	ldr	r3, [r3, #0]
 800e0ec:	4013      	ands	r3, r2
 800e0ee:	2b00      	cmp	r3, #0
 800e0f0:	d109      	bne.n	800e106 <vPortFree+0x42>
 800e0f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0f6:	f383 8811 	msr	BASEPRI, r3
 800e0fa:	f3bf 8f6f 	isb	sy
 800e0fe:	f3bf 8f4f 	dsb	sy
 800e102:	60fb      	str	r3, [r7, #12]
 800e104:	e7fe      	b.n	800e104 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800e106:	693b      	ldr	r3, [r7, #16]
 800e108:	681b      	ldr	r3, [r3, #0]
 800e10a:	2b00      	cmp	r3, #0
 800e10c:	d009      	beq.n	800e122 <vPortFree+0x5e>
 800e10e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e112:	f383 8811 	msr	BASEPRI, r3
 800e116:	f3bf 8f6f 	isb	sy
 800e11a:	f3bf 8f4f 	dsb	sy
 800e11e:	60bb      	str	r3, [r7, #8]
 800e120:	e7fe      	b.n	800e120 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800e122:	693b      	ldr	r3, [r7, #16]
 800e124:	685a      	ldr	r2, [r3, #4]
 800e126:	4b11      	ldr	r3, [pc, #68]	; (800e16c <vPortFree+0xa8>)
 800e128:	681b      	ldr	r3, [r3, #0]
 800e12a:	4013      	ands	r3, r2
 800e12c:	2b00      	cmp	r3, #0
 800e12e:	d019      	beq.n	800e164 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800e130:	693b      	ldr	r3, [r7, #16]
 800e132:	681b      	ldr	r3, [r3, #0]
 800e134:	2b00      	cmp	r3, #0
 800e136:	d115      	bne.n	800e164 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800e138:	693b      	ldr	r3, [r7, #16]
 800e13a:	685a      	ldr	r2, [r3, #4]
 800e13c:	4b0b      	ldr	r3, [pc, #44]	; (800e16c <vPortFree+0xa8>)
 800e13e:	681b      	ldr	r3, [r3, #0]
 800e140:	43db      	mvns	r3, r3
 800e142:	401a      	ands	r2, r3
 800e144:	693b      	ldr	r3, [r7, #16]
 800e146:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800e148:	f7fe fcc6 	bl	800cad8 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800e14c:	693b      	ldr	r3, [r7, #16]
 800e14e:	685a      	ldr	r2, [r3, #4]
 800e150:	4b07      	ldr	r3, [pc, #28]	; (800e170 <vPortFree+0xac>)
 800e152:	681b      	ldr	r3, [r3, #0]
 800e154:	4413      	add	r3, r2
 800e156:	4a06      	ldr	r2, [pc, #24]	; (800e170 <vPortFree+0xac>)
 800e158:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800e15a:	6938      	ldr	r0, [r7, #16]
 800e15c:	f000 f86c 	bl	800e238 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800e160:	f7fe fcc8 	bl	800caf4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800e164:	bf00      	nop
 800e166:	3718      	adds	r7, #24
 800e168:	46bd      	mov	sp, r7
 800e16a:	bd80      	pop	{r7, pc}
 800e16c:	20004f44 	.word	0x20004f44
 800e170:	20004f3c 	.word	0x20004f3c

0800e174 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800e174:	b480      	push	{r7}
 800e176:	b085      	sub	sp, #20
 800e178:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800e17a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800e17e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800e180:	4b27      	ldr	r3, [pc, #156]	; (800e220 <prvHeapInit+0xac>)
 800e182:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800e184:	68fb      	ldr	r3, [r7, #12]
 800e186:	f003 0307 	and.w	r3, r3, #7
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d00c      	beq.n	800e1a8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	3307      	adds	r3, #7
 800e192:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e194:	68fb      	ldr	r3, [r7, #12]
 800e196:	f023 0307 	bic.w	r3, r3, #7
 800e19a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800e19c:	68ba      	ldr	r2, [r7, #8]
 800e19e:	68fb      	ldr	r3, [r7, #12]
 800e1a0:	1ad3      	subs	r3, r2, r3
 800e1a2:	4a1f      	ldr	r2, [pc, #124]	; (800e220 <prvHeapInit+0xac>)
 800e1a4:	4413      	add	r3, r2
 800e1a6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800e1a8:	68fb      	ldr	r3, [r7, #12]
 800e1aa:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800e1ac:	4a1d      	ldr	r2, [pc, #116]	; (800e224 <prvHeapInit+0xb0>)
 800e1ae:	687b      	ldr	r3, [r7, #4]
 800e1b0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800e1b2:	4b1c      	ldr	r3, [pc, #112]	; (800e224 <prvHeapInit+0xb0>)
 800e1b4:	2200      	movs	r2, #0
 800e1b6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800e1b8:	687b      	ldr	r3, [r7, #4]
 800e1ba:	68ba      	ldr	r2, [r7, #8]
 800e1bc:	4413      	add	r3, r2
 800e1be:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800e1c0:	2208      	movs	r2, #8
 800e1c2:	68fb      	ldr	r3, [r7, #12]
 800e1c4:	1a9b      	subs	r3, r3, r2
 800e1c6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800e1c8:	68fb      	ldr	r3, [r7, #12]
 800e1ca:	f023 0307 	bic.w	r3, r3, #7
 800e1ce:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800e1d0:	68fb      	ldr	r3, [r7, #12]
 800e1d2:	4a15      	ldr	r2, [pc, #84]	; (800e228 <prvHeapInit+0xb4>)
 800e1d4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800e1d6:	4b14      	ldr	r3, [pc, #80]	; (800e228 <prvHeapInit+0xb4>)
 800e1d8:	681b      	ldr	r3, [r3, #0]
 800e1da:	2200      	movs	r2, #0
 800e1dc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800e1de:	4b12      	ldr	r3, [pc, #72]	; (800e228 <prvHeapInit+0xb4>)
 800e1e0:	681b      	ldr	r3, [r3, #0]
 800e1e2:	2200      	movs	r2, #0
 800e1e4:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800e1e6:	687b      	ldr	r3, [r7, #4]
 800e1e8:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800e1ea:	683b      	ldr	r3, [r7, #0]
 800e1ec:	68fa      	ldr	r2, [r7, #12]
 800e1ee:	1ad2      	subs	r2, r2, r3
 800e1f0:	683b      	ldr	r3, [r7, #0]
 800e1f2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800e1f4:	4b0c      	ldr	r3, [pc, #48]	; (800e228 <prvHeapInit+0xb4>)
 800e1f6:	681a      	ldr	r2, [r3, #0]
 800e1f8:	683b      	ldr	r3, [r7, #0]
 800e1fa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e1fc:	683b      	ldr	r3, [r7, #0]
 800e1fe:	685b      	ldr	r3, [r3, #4]
 800e200:	4a0a      	ldr	r2, [pc, #40]	; (800e22c <prvHeapInit+0xb8>)
 800e202:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800e204:	683b      	ldr	r3, [r7, #0]
 800e206:	685b      	ldr	r3, [r3, #4]
 800e208:	4a09      	ldr	r2, [pc, #36]	; (800e230 <prvHeapInit+0xbc>)
 800e20a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800e20c:	4b09      	ldr	r3, [pc, #36]	; (800e234 <prvHeapInit+0xc0>)
 800e20e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800e212:	601a      	str	r2, [r3, #0]
}
 800e214:	bf00      	nop
 800e216:	3714      	adds	r7, #20
 800e218:	46bd      	mov	sp, r7
 800e21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e21e:	4770      	bx	lr
 800e220:	20001330 	.word	0x20001330
 800e224:	20004f30 	.word	0x20004f30
 800e228:	20004f38 	.word	0x20004f38
 800e22c:	20004f40 	.word	0x20004f40
 800e230:	20004f3c 	.word	0x20004f3c
 800e234:	20004f44 	.word	0x20004f44

0800e238 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800e238:	b480      	push	{r7}
 800e23a:	b085      	sub	sp, #20
 800e23c:	af00      	add	r7, sp, #0
 800e23e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800e240:	4b28      	ldr	r3, [pc, #160]	; (800e2e4 <prvInsertBlockIntoFreeList+0xac>)
 800e242:	60fb      	str	r3, [r7, #12]
 800e244:	e002      	b.n	800e24c <prvInsertBlockIntoFreeList+0x14>
 800e246:	68fb      	ldr	r3, [r7, #12]
 800e248:	681b      	ldr	r3, [r3, #0]
 800e24a:	60fb      	str	r3, [r7, #12]
 800e24c:	68fb      	ldr	r3, [r7, #12]
 800e24e:	681b      	ldr	r3, [r3, #0]
 800e250:	687a      	ldr	r2, [r7, #4]
 800e252:	429a      	cmp	r2, r3
 800e254:	d8f7      	bhi.n	800e246 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800e256:	68fb      	ldr	r3, [r7, #12]
 800e258:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	685b      	ldr	r3, [r3, #4]
 800e25e:	68ba      	ldr	r2, [r7, #8]
 800e260:	4413      	add	r3, r2
 800e262:	687a      	ldr	r2, [r7, #4]
 800e264:	429a      	cmp	r2, r3
 800e266:	d108      	bne.n	800e27a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	685a      	ldr	r2, [r3, #4]
 800e26c:	687b      	ldr	r3, [r7, #4]
 800e26e:	685b      	ldr	r3, [r3, #4]
 800e270:	441a      	add	r2, r3
 800e272:	68fb      	ldr	r3, [r7, #12]
 800e274:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800e276:	68fb      	ldr	r3, [r7, #12]
 800e278:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	685b      	ldr	r3, [r3, #4]
 800e282:	68ba      	ldr	r2, [r7, #8]
 800e284:	441a      	add	r2, r3
 800e286:	68fb      	ldr	r3, [r7, #12]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	429a      	cmp	r2, r3
 800e28c:	d118      	bne.n	800e2c0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800e28e:	68fb      	ldr	r3, [r7, #12]
 800e290:	681a      	ldr	r2, [r3, #0]
 800e292:	4b15      	ldr	r3, [pc, #84]	; (800e2e8 <prvInsertBlockIntoFreeList+0xb0>)
 800e294:	681b      	ldr	r3, [r3, #0]
 800e296:	429a      	cmp	r2, r3
 800e298:	d00d      	beq.n	800e2b6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800e29a:	687b      	ldr	r3, [r7, #4]
 800e29c:	685a      	ldr	r2, [r3, #4]
 800e29e:	68fb      	ldr	r3, [r7, #12]
 800e2a0:	681b      	ldr	r3, [r3, #0]
 800e2a2:	685b      	ldr	r3, [r3, #4]
 800e2a4:	441a      	add	r2, r3
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800e2aa:	68fb      	ldr	r3, [r7, #12]
 800e2ac:	681b      	ldr	r3, [r3, #0]
 800e2ae:	681a      	ldr	r2, [r3, #0]
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	601a      	str	r2, [r3, #0]
 800e2b4:	e008      	b.n	800e2c8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800e2b6:	4b0c      	ldr	r3, [pc, #48]	; (800e2e8 <prvInsertBlockIntoFreeList+0xb0>)
 800e2b8:	681a      	ldr	r2, [r3, #0]
 800e2ba:	687b      	ldr	r3, [r7, #4]
 800e2bc:	601a      	str	r2, [r3, #0]
 800e2be:	e003      	b.n	800e2c8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	681a      	ldr	r2, [r3, #0]
 800e2c4:	687b      	ldr	r3, [r7, #4]
 800e2c6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800e2c8:	68fa      	ldr	r2, [r7, #12]
 800e2ca:	687b      	ldr	r3, [r7, #4]
 800e2cc:	429a      	cmp	r2, r3
 800e2ce:	d002      	beq.n	800e2d6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	687a      	ldr	r2, [r7, #4]
 800e2d4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800e2d6:	bf00      	nop
 800e2d8:	3714      	adds	r7, #20
 800e2da:	46bd      	mov	sp, r7
 800e2dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e2e0:	4770      	bx	lr
 800e2e2:	bf00      	nop
 800e2e4:	20004f30 	.word	0x20004f30
 800e2e8:	20004f38 	.word	0x20004f38

0800e2ec <atof>:
 800e2ec:	2100      	movs	r1, #0
 800e2ee:	f000 be4f 	b.w	800ef90 <strtod>
	...

0800e2f4 <__errno>:
 800e2f4:	4b01      	ldr	r3, [pc, #4]	; (800e2fc <__errno+0x8>)
 800e2f6:	6818      	ldr	r0, [r3, #0]
 800e2f8:	4770      	bx	lr
 800e2fa:	bf00      	nop
 800e2fc:	20000018 	.word	0x20000018

0800e300 <__libc_init_array>:
 800e300:	b570      	push	{r4, r5, r6, lr}
 800e302:	4e0d      	ldr	r6, [pc, #52]	; (800e338 <__libc_init_array+0x38>)
 800e304:	4c0d      	ldr	r4, [pc, #52]	; (800e33c <__libc_init_array+0x3c>)
 800e306:	1ba4      	subs	r4, r4, r6
 800e308:	10a4      	asrs	r4, r4, #2
 800e30a:	2500      	movs	r5, #0
 800e30c:	42a5      	cmp	r5, r4
 800e30e:	d109      	bne.n	800e324 <__libc_init_array+0x24>
 800e310:	4e0b      	ldr	r6, [pc, #44]	; (800e340 <__libc_init_array+0x40>)
 800e312:	4c0c      	ldr	r4, [pc, #48]	; (800e344 <__libc_init_array+0x44>)
 800e314:	f001 fe2c 	bl	800ff70 <_init>
 800e318:	1ba4      	subs	r4, r4, r6
 800e31a:	10a4      	asrs	r4, r4, #2
 800e31c:	2500      	movs	r5, #0
 800e31e:	42a5      	cmp	r5, r4
 800e320:	d105      	bne.n	800e32e <__libc_init_array+0x2e>
 800e322:	bd70      	pop	{r4, r5, r6, pc}
 800e324:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e328:	4798      	blx	r3
 800e32a:	3501      	adds	r5, #1
 800e32c:	e7ee      	b.n	800e30c <__libc_init_array+0xc>
 800e32e:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800e332:	4798      	blx	r3
 800e334:	3501      	adds	r5, #1
 800e336:	e7f2      	b.n	800e31e <__libc_init_array+0x1e>
 800e338:	08044e08 	.word	0x08044e08
 800e33c:	08044e08 	.word	0x08044e08
 800e340:	08044e08 	.word	0x08044e08
 800e344:	08044e0c 	.word	0x08044e0c

0800e348 <memcpy>:
 800e348:	b510      	push	{r4, lr}
 800e34a:	1e43      	subs	r3, r0, #1
 800e34c:	440a      	add	r2, r1
 800e34e:	4291      	cmp	r1, r2
 800e350:	d100      	bne.n	800e354 <memcpy+0xc>
 800e352:	bd10      	pop	{r4, pc}
 800e354:	f811 4b01 	ldrb.w	r4, [r1], #1
 800e358:	f803 4f01 	strb.w	r4, [r3, #1]!
 800e35c:	e7f7      	b.n	800e34e <memcpy+0x6>

0800e35e <memset>:
 800e35e:	4402      	add	r2, r0
 800e360:	4603      	mov	r3, r0
 800e362:	4293      	cmp	r3, r2
 800e364:	d100      	bne.n	800e368 <memset+0xa>
 800e366:	4770      	bx	lr
 800e368:	f803 1b01 	strb.w	r1, [r3], #1
 800e36c:	e7f9      	b.n	800e362 <memset+0x4>

0800e36e <sulp>:
 800e36e:	b570      	push	{r4, r5, r6, lr}
 800e370:	4604      	mov	r4, r0
 800e372:	460d      	mov	r5, r1
 800e374:	ec45 4b10 	vmov	d0, r4, r5
 800e378:	4616      	mov	r6, r2
 800e37a:	f001 fc23 	bl	800fbc4 <__ulp>
 800e37e:	ec51 0b10 	vmov	r0, r1, d0
 800e382:	b17e      	cbz	r6, 800e3a4 <sulp+0x36>
 800e384:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800e388:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e38c:	2b00      	cmp	r3, #0
 800e38e:	dd09      	ble.n	800e3a4 <sulp+0x36>
 800e390:	051b      	lsls	r3, r3, #20
 800e392:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800e396:	2400      	movs	r4, #0
 800e398:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800e39c:	4622      	mov	r2, r4
 800e39e:	462b      	mov	r3, r5
 800e3a0:	f7f2 f8fa 	bl	8000598 <__aeabi_dmul>
 800e3a4:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e3a8 <_strtod_l>:
 800e3a8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e3ac:	461f      	mov	r7, r3
 800e3ae:	b0a1      	sub	sp, #132	; 0x84
 800e3b0:	2300      	movs	r3, #0
 800e3b2:	4681      	mov	r9, r0
 800e3b4:	4638      	mov	r0, r7
 800e3b6:	460e      	mov	r6, r1
 800e3b8:	9217      	str	r2, [sp, #92]	; 0x5c
 800e3ba:	931c      	str	r3, [sp, #112]	; 0x70
 800e3bc:	f001 f922 	bl	800f604 <__localeconv_l>
 800e3c0:	4680      	mov	r8, r0
 800e3c2:	6800      	ldr	r0, [r0, #0]
 800e3c4:	f7f1 ff24 	bl	8000210 <strlen>
 800e3c8:	f04f 0a00 	mov.w	sl, #0
 800e3cc:	4604      	mov	r4, r0
 800e3ce:	f04f 0b00 	mov.w	fp, #0
 800e3d2:	961b      	str	r6, [sp, #108]	; 0x6c
 800e3d4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e3d6:	781a      	ldrb	r2, [r3, #0]
 800e3d8:	2a0d      	cmp	r2, #13
 800e3da:	d832      	bhi.n	800e442 <_strtod_l+0x9a>
 800e3dc:	2a09      	cmp	r2, #9
 800e3de:	d236      	bcs.n	800e44e <_strtod_l+0xa6>
 800e3e0:	2a00      	cmp	r2, #0
 800e3e2:	d03e      	beq.n	800e462 <_strtod_l+0xba>
 800e3e4:	2300      	movs	r3, #0
 800e3e6:	930d      	str	r3, [sp, #52]	; 0x34
 800e3e8:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800e3ea:	782b      	ldrb	r3, [r5, #0]
 800e3ec:	2b30      	cmp	r3, #48	; 0x30
 800e3ee:	f040 80ac 	bne.w	800e54a <_strtod_l+0x1a2>
 800e3f2:	786b      	ldrb	r3, [r5, #1]
 800e3f4:	2b58      	cmp	r3, #88	; 0x58
 800e3f6:	d001      	beq.n	800e3fc <_strtod_l+0x54>
 800e3f8:	2b78      	cmp	r3, #120	; 0x78
 800e3fa:	d167      	bne.n	800e4cc <_strtod_l+0x124>
 800e3fc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e3fe:	9301      	str	r3, [sp, #4]
 800e400:	ab1c      	add	r3, sp, #112	; 0x70
 800e402:	9300      	str	r3, [sp, #0]
 800e404:	9702      	str	r7, [sp, #8]
 800e406:	ab1d      	add	r3, sp, #116	; 0x74
 800e408:	4a88      	ldr	r2, [pc, #544]	; (800e62c <_strtod_l+0x284>)
 800e40a:	a91b      	add	r1, sp, #108	; 0x6c
 800e40c:	4648      	mov	r0, r9
 800e40e:	f000 fe22 	bl	800f056 <__gethex>
 800e412:	f010 0407 	ands.w	r4, r0, #7
 800e416:	4606      	mov	r6, r0
 800e418:	d005      	beq.n	800e426 <_strtod_l+0x7e>
 800e41a:	2c06      	cmp	r4, #6
 800e41c:	d12b      	bne.n	800e476 <_strtod_l+0xce>
 800e41e:	3501      	adds	r5, #1
 800e420:	2300      	movs	r3, #0
 800e422:	951b      	str	r5, [sp, #108]	; 0x6c
 800e424:	930d      	str	r3, [sp, #52]	; 0x34
 800e426:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e428:	2b00      	cmp	r3, #0
 800e42a:	f040 859a 	bne.w	800ef62 <_strtod_l+0xbba>
 800e42e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800e430:	b1e3      	cbz	r3, 800e46c <_strtod_l+0xc4>
 800e432:	4652      	mov	r2, sl
 800e434:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800e438:	ec43 2b10 	vmov	d0, r2, r3
 800e43c:	b021      	add	sp, #132	; 0x84
 800e43e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e442:	2a2b      	cmp	r2, #43	; 0x2b
 800e444:	d015      	beq.n	800e472 <_strtod_l+0xca>
 800e446:	2a2d      	cmp	r2, #45	; 0x2d
 800e448:	d004      	beq.n	800e454 <_strtod_l+0xac>
 800e44a:	2a20      	cmp	r2, #32
 800e44c:	d1ca      	bne.n	800e3e4 <_strtod_l+0x3c>
 800e44e:	3301      	adds	r3, #1
 800e450:	931b      	str	r3, [sp, #108]	; 0x6c
 800e452:	e7bf      	b.n	800e3d4 <_strtod_l+0x2c>
 800e454:	2201      	movs	r2, #1
 800e456:	920d      	str	r2, [sp, #52]	; 0x34
 800e458:	1c5a      	adds	r2, r3, #1
 800e45a:	921b      	str	r2, [sp, #108]	; 0x6c
 800e45c:	785b      	ldrb	r3, [r3, #1]
 800e45e:	2b00      	cmp	r3, #0
 800e460:	d1c2      	bne.n	800e3e8 <_strtod_l+0x40>
 800e462:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800e464:	961b      	str	r6, [sp, #108]	; 0x6c
 800e466:	2b00      	cmp	r3, #0
 800e468:	f040 8579 	bne.w	800ef5e <_strtod_l+0xbb6>
 800e46c:	4652      	mov	r2, sl
 800e46e:	465b      	mov	r3, fp
 800e470:	e7e2      	b.n	800e438 <_strtod_l+0x90>
 800e472:	2200      	movs	r2, #0
 800e474:	e7ef      	b.n	800e456 <_strtod_l+0xae>
 800e476:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800e478:	b13a      	cbz	r2, 800e48a <_strtod_l+0xe2>
 800e47a:	2135      	movs	r1, #53	; 0x35
 800e47c:	a81e      	add	r0, sp, #120	; 0x78
 800e47e:	f001 fc99 	bl	800fdb4 <__copybits>
 800e482:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e484:	4648      	mov	r0, r9
 800e486:	f001 f905 	bl	800f694 <_Bfree>
 800e48a:	3c01      	subs	r4, #1
 800e48c:	2c04      	cmp	r4, #4
 800e48e:	d806      	bhi.n	800e49e <_strtod_l+0xf6>
 800e490:	e8df f004 	tbb	[pc, r4]
 800e494:	1714030a 	.word	0x1714030a
 800e498:	0a          	.byte	0x0a
 800e499:	00          	.byte	0x00
 800e49a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800e49e:	0730      	lsls	r0, r6, #28
 800e4a0:	d5c1      	bpl.n	800e426 <_strtod_l+0x7e>
 800e4a2:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800e4a6:	e7be      	b.n	800e426 <_strtod_l+0x7e>
 800e4a8:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800e4ac:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800e4ae:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800e4b2:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800e4b6:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800e4ba:	e7f0      	b.n	800e49e <_strtod_l+0xf6>
 800e4bc:	f8df b170 	ldr.w	fp, [pc, #368]	; 800e630 <_strtod_l+0x288>
 800e4c0:	e7ed      	b.n	800e49e <_strtod_l+0xf6>
 800e4c2:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800e4c6:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800e4ca:	e7e8      	b.n	800e49e <_strtod_l+0xf6>
 800e4cc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e4ce:	1c5a      	adds	r2, r3, #1
 800e4d0:	921b      	str	r2, [sp, #108]	; 0x6c
 800e4d2:	785b      	ldrb	r3, [r3, #1]
 800e4d4:	2b30      	cmp	r3, #48	; 0x30
 800e4d6:	d0f9      	beq.n	800e4cc <_strtod_l+0x124>
 800e4d8:	2b00      	cmp	r3, #0
 800e4da:	d0a4      	beq.n	800e426 <_strtod_l+0x7e>
 800e4dc:	2301      	movs	r3, #1
 800e4de:	2500      	movs	r5, #0
 800e4e0:	9306      	str	r3, [sp, #24]
 800e4e2:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e4e4:	9308      	str	r3, [sp, #32]
 800e4e6:	9507      	str	r5, [sp, #28]
 800e4e8:	9505      	str	r5, [sp, #20]
 800e4ea:	220a      	movs	r2, #10
 800e4ec:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800e4ee:	7807      	ldrb	r7, [r0, #0]
 800e4f0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800e4f4:	b2d9      	uxtb	r1, r3
 800e4f6:	2909      	cmp	r1, #9
 800e4f8:	d929      	bls.n	800e54e <_strtod_l+0x1a6>
 800e4fa:	4622      	mov	r2, r4
 800e4fc:	f8d8 1000 	ldr.w	r1, [r8]
 800e500:	f001 fd0c 	bl	800ff1c <strncmp>
 800e504:	2800      	cmp	r0, #0
 800e506:	d031      	beq.n	800e56c <_strtod_l+0x1c4>
 800e508:	2000      	movs	r0, #0
 800e50a:	9c05      	ldr	r4, [sp, #20]
 800e50c:	9004      	str	r0, [sp, #16]
 800e50e:	463b      	mov	r3, r7
 800e510:	4602      	mov	r2, r0
 800e512:	2b65      	cmp	r3, #101	; 0x65
 800e514:	d001      	beq.n	800e51a <_strtod_l+0x172>
 800e516:	2b45      	cmp	r3, #69	; 0x45
 800e518:	d114      	bne.n	800e544 <_strtod_l+0x19c>
 800e51a:	b924      	cbnz	r4, 800e526 <_strtod_l+0x17e>
 800e51c:	b910      	cbnz	r0, 800e524 <_strtod_l+0x17c>
 800e51e:	9b06      	ldr	r3, [sp, #24]
 800e520:	2b00      	cmp	r3, #0
 800e522:	d09e      	beq.n	800e462 <_strtod_l+0xba>
 800e524:	2400      	movs	r4, #0
 800e526:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800e528:	1c73      	adds	r3, r6, #1
 800e52a:	931b      	str	r3, [sp, #108]	; 0x6c
 800e52c:	7873      	ldrb	r3, [r6, #1]
 800e52e:	2b2b      	cmp	r3, #43	; 0x2b
 800e530:	d078      	beq.n	800e624 <_strtod_l+0x27c>
 800e532:	2b2d      	cmp	r3, #45	; 0x2d
 800e534:	d070      	beq.n	800e618 <_strtod_l+0x270>
 800e536:	f04f 0c00 	mov.w	ip, #0
 800e53a:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800e53e:	2f09      	cmp	r7, #9
 800e540:	d97c      	bls.n	800e63c <_strtod_l+0x294>
 800e542:	961b      	str	r6, [sp, #108]	; 0x6c
 800e544:	f04f 0e00 	mov.w	lr, #0
 800e548:	e09a      	b.n	800e680 <_strtod_l+0x2d8>
 800e54a:	2300      	movs	r3, #0
 800e54c:	e7c7      	b.n	800e4de <_strtod_l+0x136>
 800e54e:	9905      	ldr	r1, [sp, #20]
 800e550:	2908      	cmp	r1, #8
 800e552:	bfdd      	ittte	le
 800e554:	9907      	ldrle	r1, [sp, #28]
 800e556:	fb02 3301 	mlale	r3, r2, r1, r3
 800e55a:	9307      	strle	r3, [sp, #28]
 800e55c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800e560:	9b05      	ldr	r3, [sp, #20]
 800e562:	3001      	adds	r0, #1
 800e564:	3301      	adds	r3, #1
 800e566:	9305      	str	r3, [sp, #20]
 800e568:	901b      	str	r0, [sp, #108]	; 0x6c
 800e56a:	e7bf      	b.n	800e4ec <_strtod_l+0x144>
 800e56c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e56e:	191a      	adds	r2, r3, r4
 800e570:	921b      	str	r2, [sp, #108]	; 0x6c
 800e572:	9a05      	ldr	r2, [sp, #20]
 800e574:	5d1b      	ldrb	r3, [r3, r4]
 800e576:	2a00      	cmp	r2, #0
 800e578:	d037      	beq.n	800e5ea <_strtod_l+0x242>
 800e57a:	9c05      	ldr	r4, [sp, #20]
 800e57c:	4602      	mov	r2, r0
 800e57e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800e582:	2909      	cmp	r1, #9
 800e584:	d913      	bls.n	800e5ae <_strtod_l+0x206>
 800e586:	2101      	movs	r1, #1
 800e588:	9104      	str	r1, [sp, #16]
 800e58a:	e7c2      	b.n	800e512 <_strtod_l+0x16a>
 800e58c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e58e:	1c5a      	adds	r2, r3, #1
 800e590:	921b      	str	r2, [sp, #108]	; 0x6c
 800e592:	785b      	ldrb	r3, [r3, #1]
 800e594:	3001      	adds	r0, #1
 800e596:	2b30      	cmp	r3, #48	; 0x30
 800e598:	d0f8      	beq.n	800e58c <_strtod_l+0x1e4>
 800e59a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800e59e:	2a08      	cmp	r2, #8
 800e5a0:	f200 84e4 	bhi.w	800ef6c <_strtod_l+0xbc4>
 800e5a4:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800e5a6:	9208      	str	r2, [sp, #32]
 800e5a8:	4602      	mov	r2, r0
 800e5aa:	2000      	movs	r0, #0
 800e5ac:	4604      	mov	r4, r0
 800e5ae:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800e5b2:	f100 0101 	add.w	r1, r0, #1
 800e5b6:	d012      	beq.n	800e5de <_strtod_l+0x236>
 800e5b8:	440a      	add	r2, r1
 800e5ba:	eb00 0c04 	add.w	ip, r0, r4
 800e5be:	4621      	mov	r1, r4
 800e5c0:	270a      	movs	r7, #10
 800e5c2:	458c      	cmp	ip, r1
 800e5c4:	d113      	bne.n	800e5ee <_strtod_l+0x246>
 800e5c6:	1821      	adds	r1, r4, r0
 800e5c8:	2908      	cmp	r1, #8
 800e5ca:	f104 0401 	add.w	r4, r4, #1
 800e5ce:	4404      	add	r4, r0
 800e5d0:	dc19      	bgt.n	800e606 <_strtod_l+0x25e>
 800e5d2:	9b07      	ldr	r3, [sp, #28]
 800e5d4:	210a      	movs	r1, #10
 800e5d6:	fb01 e303 	mla	r3, r1, r3, lr
 800e5da:	9307      	str	r3, [sp, #28]
 800e5dc:	2100      	movs	r1, #0
 800e5de:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e5e0:	1c58      	adds	r0, r3, #1
 800e5e2:	901b      	str	r0, [sp, #108]	; 0x6c
 800e5e4:	785b      	ldrb	r3, [r3, #1]
 800e5e6:	4608      	mov	r0, r1
 800e5e8:	e7c9      	b.n	800e57e <_strtod_l+0x1d6>
 800e5ea:	9805      	ldr	r0, [sp, #20]
 800e5ec:	e7d3      	b.n	800e596 <_strtod_l+0x1ee>
 800e5ee:	2908      	cmp	r1, #8
 800e5f0:	f101 0101 	add.w	r1, r1, #1
 800e5f4:	dc03      	bgt.n	800e5fe <_strtod_l+0x256>
 800e5f6:	9b07      	ldr	r3, [sp, #28]
 800e5f8:	437b      	muls	r3, r7
 800e5fa:	9307      	str	r3, [sp, #28]
 800e5fc:	e7e1      	b.n	800e5c2 <_strtod_l+0x21a>
 800e5fe:	2910      	cmp	r1, #16
 800e600:	bfd8      	it	le
 800e602:	437d      	mulle	r5, r7
 800e604:	e7dd      	b.n	800e5c2 <_strtod_l+0x21a>
 800e606:	2c10      	cmp	r4, #16
 800e608:	bfdc      	itt	le
 800e60a:	210a      	movle	r1, #10
 800e60c:	fb01 e505 	mlale	r5, r1, r5, lr
 800e610:	e7e4      	b.n	800e5dc <_strtod_l+0x234>
 800e612:	2301      	movs	r3, #1
 800e614:	9304      	str	r3, [sp, #16]
 800e616:	e781      	b.n	800e51c <_strtod_l+0x174>
 800e618:	f04f 0c01 	mov.w	ip, #1
 800e61c:	1cb3      	adds	r3, r6, #2
 800e61e:	931b      	str	r3, [sp, #108]	; 0x6c
 800e620:	78b3      	ldrb	r3, [r6, #2]
 800e622:	e78a      	b.n	800e53a <_strtod_l+0x192>
 800e624:	f04f 0c00 	mov.w	ip, #0
 800e628:	e7f8      	b.n	800e61c <_strtod_l+0x274>
 800e62a:	bf00      	nop
 800e62c:	08044b3c 	.word	0x08044b3c
 800e630:	7ff00000 	.word	0x7ff00000
 800e634:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e636:	1c5f      	adds	r7, r3, #1
 800e638:	971b      	str	r7, [sp, #108]	; 0x6c
 800e63a:	785b      	ldrb	r3, [r3, #1]
 800e63c:	2b30      	cmp	r3, #48	; 0x30
 800e63e:	d0f9      	beq.n	800e634 <_strtod_l+0x28c>
 800e640:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800e644:	2f08      	cmp	r7, #8
 800e646:	f63f af7d 	bhi.w	800e544 <_strtod_l+0x19c>
 800e64a:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800e64e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e650:	930a      	str	r3, [sp, #40]	; 0x28
 800e652:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e654:	1c5f      	adds	r7, r3, #1
 800e656:	971b      	str	r7, [sp, #108]	; 0x6c
 800e658:	785b      	ldrb	r3, [r3, #1]
 800e65a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800e65e:	f1b8 0f09 	cmp.w	r8, #9
 800e662:	d937      	bls.n	800e6d4 <_strtod_l+0x32c>
 800e664:	990a      	ldr	r1, [sp, #40]	; 0x28
 800e666:	1a7f      	subs	r7, r7, r1
 800e668:	2f08      	cmp	r7, #8
 800e66a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800e66e:	dc37      	bgt.n	800e6e0 <_strtod_l+0x338>
 800e670:	45be      	cmp	lr, r7
 800e672:	bfa8      	it	ge
 800e674:	46be      	movge	lr, r7
 800e676:	f1bc 0f00 	cmp.w	ip, #0
 800e67a:	d001      	beq.n	800e680 <_strtod_l+0x2d8>
 800e67c:	f1ce 0e00 	rsb	lr, lr, #0
 800e680:	2c00      	cmp	r4, #0
 800e682:	d151      	bne.n	800e728 <_strtod_l+0x380>
 800e684:	2800      	cmp	r0, #0
 800e686:	f47f aece 	bne.w	800e426 <_strtod_l+0x7e>
 800e68a:	9a06      	ldr	r2, [sp, #24]
 800e68c:	2a00      	cmp	r2, #0
 800e68e:	f47f aeca 	bne.w	800e426 <_strtod_l+0x7e>
 800e692:	9a04      	ldr	r2, [sp, #16]
 800e694:	2a00      	cmp	r2, #0
 800e696:	f47f aee4 	bne.w	800e462 <_strtod_l+0xba>
 800e69a:	2b4e      	cmp	r3, #78	; 0x4e
 800e69c:	d027      	beq.n	800e6ee <_strtod_l+0x346>
 800e69e:	dc21      	bgt.n	800e6e4 <_strtod_l+0x33c>
 800e6a0:	2b49      	cmp	r3, #73	; 0x49
 800e6a2:	f47f aede 	bne.w	800e462 <_strtod_l+0xba>
 800e6a6:	49a0      	ldr	r1, [pc, #640]	; (800e928 <_strtod_l+0x580>)
 800e6a8:	a81b      	add	r0, sp, #108	; 0x6c
 800e6aa:	f000 ff07 	bl	800f4bc <__match>
 800e6ae:	2800      	cmp	r0, #0
 800e6b0:	f43f aed7 	beq.w	800e462 <_strtod_l+0xba>
 800e6b4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e6b6:	499d      	ldr	r1, [pc, #628]	; (800e92c <_strtod_l+0x584>)
 800e6b8:	3b01      	subs	r3, #1
 800e6ba:	a81b      	add	r0, sp, #108	; 0x6c
 800e6bc:	931b      	str	r3, [sp, #108]	; 0x6c
 800e6be:	f000 fefd 	bl	800f4bc <__match>
 800e6c2:	b910      	cbnz	r0, 800e6ca <_strtod_l+0x322>
 800e6c4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e6c6:	3301      	adds	r3, #1
 800e6c8:	931b      	str	r3, [sp, #108]	; 0x6c
 800e6ca:	f8df b274 	ldr.w	fp, [pc, #628]	; 800e940 <_strtod_l+0x598>
 800e6ce:	f04f 0a00 	mov.w	sl, #0
 800e6d2:	e6a8      	b.n	800e426 <_strtod_l+0x7e>
 800e6d4:	210a      	movs	r1, #10
 800e6d6:	fb01 3e0e 	mla	lr, r1, lr, r3
 800e6da:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800e6de:	e7b8      	b.n	800e652 <_strtod_l+0x2aa>
 800e6e0:	46be      	mov	lr, r7
 800e6e2:	e7c8      	b.n	800e676 <_strtod_l+0x2ce>
 800e6e4:	2b69      	cmp	r3, #105	; 0x69
 800e6e6:	d0de      	beq.n	800e6a6 <_strtod_l+0x2fe>
 800e6e8:	2b6e      	cmp	r3, #110	; 0x6e
 800e6ea:	f47f aeba 	bne.w	800e462 <_strtod_l+0xba>
 800e6ee:	4990      	ldr	r1, [pc, #576]	; (800e930 <_strtod_l+0x588>)
 800e6f0:	a81b      	add	r0, sp, #108	; 0x6c
 800e6f2:	f000 fee3 	bl	800f4bc <__match>
 800e6f6:	2800      	cmp	r0, #0
 800e6f8:	f43f aeb3 	beq.w	800e462 <_strtod_l+0xba>
 800e6fc:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800e6fe:	781b      	ldrb	r3, [r3, #0]
 800e700:	2b28      	cmp	r3, #40	; 0x28
 800e702:	d10e      	bne.n	800e722 <_strtod_l+0x37a>
 800e704:	aa1e      	add	r2, sp, #120	; 0x78
 800e706:	498b      	ldr	r1, [pc, #556]	; (800e934 <_strtod_l+0x58c>)
 800e708:	a81b      	add	r0, sp, #108	; 0x6c
 800e70a:	f000 feeb 	bl	800f4e4 <__hexnan>
 800e70e:	2805      	cmp	r0, #5
 800e710:	d107      	bne.n	800e722 <_strtod_l+0x37a>
 800e712:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800e714:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800e718:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800e71c:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800e720:	e681      	b.n	800e426 <_strtod_l+0x7e>
 800e722:	f8df b224 	ldr.w	fp, [pc, #548]	; 800e948 <_strtod_l+0x5a0>
 800e726:	e7d2      	b.n	800e6ce <_strtod_l+0x326>
 800e728:	ebae 0302 	sub.w	r3, lr, r2
 800e72c:	9306      	str	r3, [sp, #24]
 800e72e:	9b05      	ldr	r3, [sp, #20]
 800e730:	9807      	ldr	r0, [sp, #28]
 800e732:	2b00      	cmp	r3, #0
 800e734:	bf08      	it	eq
 800e736:	4623      	moveq	r3, r4
 800e738:	2c10      	cmp	r4, #16
 800e73a:	9305      	str	r3, [sp, #20]
 800e73c:	46a0      	mov	r8, r4
 800e73e:	bfa8      	it	ge
 800e740:	f04f 0810 	movge.w	r8, #16
 800e744:	f7f1 feae 	bl	80004a4 <__aeabi_ui2d>
 800e748:	2c09      	cmp	r4, #9
 800e74a:	4682      	mov	sl, r0
 800e74c:	468b      	mov	fp, r1
 800e74e:	dc13      	bgt.n	800e778 <_strtod_l+0x3d0>
 800e750:	9b06      	ldr	r3, [sp, #24]
 800e752:	2b00      	cmp	r3, #0
 800e754:	f43f ae67 	beq.w	800e426 <_strtod_l+0x7e>
 800e758:	9b06      	ldr	r3, [sp, #24]
 800e75a:	dd7a      	ble.n	800e852 <_strtod_l+0x4aa>
 800e75c:	2b16      	cmp	r3, #22
 800e75e:	dc61      	bgt.n	800e824 <_strtod_l+0x47c>
 800e760:	4a75      	ldr	r2, [pc, #468]	; (800e938 <_strtod_l+0x590>)
 800e762:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800e766:	e9de 0100 	ldrd	r0, r1, [lr]
 800e76a:	4652      	mov	r2, sl
 800e76c:	465b      	mov	r3, fp
 800e76e:	f7f1 ff13 	bl	8000598 <__aeabi_dmul>
 800e772:	4682      	mov	sl, r0
 800e774:	468b      	mov	fp, r1
 800e776:	e656      	b.n	800e426 <_strtod_l+0x7e>
 800e778:	4b6f      	ldr	r3, [pc, #444]	; (800e938 <_strtod_l+0x590>)
 800e77a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800e77e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800e782:	f7f1 ff09 	bl	8000598 <__aeabi_dmul>
 800e786:	4606      	mov	r6, r0
 800e788:	4628      	mov	r0, r5
 800e78a:	460f      	mov	r7, r1
 800e78c:	f7f1 fe8a 	bl	80004a4 <__aeabi_ui2d>
 800e790:	4602      	mov	r2, r0
 800e792:	460b      	mov	r3, r1
 800e794:	4630      	mov	r0, r6
 800e796:	4639      	mov	r1, r7
 800e798:	f7f1 fd48 	bl	800022c <__adddf3>
 800e79c:	2c0f      	cmp	r4, #15
 800e79e:	4682      	mov	sl, r0
 800e7a0:	468b      	mov	fp, r1
 800e7a2:	ddd5      	ble.n	800e750 <_strtod_l+0x3a8>
 800e7a4:	9b06      	ldr	r3, [sp, #24]
 800e7a6:	eba4 0808 	sub.w	r8, r4, r8
 800e7aa:	4498      	add	r8, r3
 800e7ac:	f1b8 0f00 	cmp.w	r8, #0
 800e7b0:	f340 8096 	ble.w	800e8e0 <_strtod_l+0x538>
 800e7b4:	f018 030f 	ands.w	r3, r8, #15
 800e7b8:	d00a      	beq.n	800e7d0 <_strtod_l+0x428>
 800e7ba:	495f      	ldr	r1, [pc, #380]	; (800e938 <_strtod_l+0x590>)
 800e7bc:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800e7c0:	4652      	mov	r2, sl
 800e7c2:	465b      	mov	r3, fp
 800e7c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e7c8:	f7f1 fee6 	bl	8000598 <__aeabi_dmul>
 800e7cc:	4682      	mov	sl, r0
 800e7ce:	468b      	mov	fp, r1
 800e7d0:	f038 080f 	bics.w	r8, r8, #15
 800e7d4:	d073      	beq.n	800e8be <_strtod_l+0x516>
 800e7d6:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800e7da:	dd47      	ble.n	800e86c <_strtod_l+0x4c4>
 800e7dc:	2400      	movs	r4, #0
 800e7de:	46a0      	mov	r8, r4
 800e7e0:	9407      	str	r4, [sp, #28]
 800e7e2:	9405      	str	r4, [sp, #20]
 800e7e4:	2322      	movs	r3, #34	; 0x22
 800e7e6:	f8df b158 	ldr.w	fp, [pc, #344]	; 800e940 <_strtod_l+0x598>
 800e7ea:	f8c9 3000 	str.w	r3, [r9]
 800e7ee:	f04f 0a00 	mov.w	sl, #0
 800e7f2:	9b07      	ldr	r3, [sp, #28]
 800e7f4:	2b00      	cmp	r3, #0
 800e7f6:	f43f ae16 	beq.w	800e426 <_strtod_l+0x7e>
 800e7fa:	991c      	ldr	r1, [sp, #112]	; 0x70
 800e7fc:	4648      	mov	r0, r9
 800e7fe:	f000 ff49 	bl	800f694 <_Bfree>
 800e802:	9905      	ldr	r1, [sp, #20]
 800e804:	4648      	mov	r0, r9
 800e806:	f000 ff45 	bl	800f694 <_Bfree>
 800e80a:	4641      	mov	r1, r8
 800e80c:	4648      	mov	r0, r9
 800e80e:	f000 ff41 	bl	800f694 <_Bfree>
 800e812:	9907      	ldr	r1, [sp, #28]
 800e814:	4648      	mov	r0, r9
 800e816:	f000 ff3d 	bl	800f694 <_Bfree>
 800e81a:	4621      	mov	r1, r4
 800e81c:	4648      	mov	r0, r9
 800e81e:	f000 ff39 	bl	800f694 <_Bfree>
 800e822:	e600      	b.n	800e426 <_strtod_l+0x7e>
 800e824:	9a06      	ldr	r2, [sp, #24]
 800e826:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800e82a:	4293      	cmp	r3, r2
 800e82c:	dbba      	blt.n	800e7a4 <_strtod_l+0x3fc>
 800e82e:	4d42      	ldr	r5, [pc, #264]	; (800e938 <_strtod_l+0x590>)
 800e830:	f1c4 040f 	rsb	r4, r4, #15
 800e834:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800e838:	4652      	mov	r2, sl
 800e83a:	465b      	mov	r3, fp
 800e83c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800e840:	f7f1 feaa 	bl	8000598 <__aeabi_dmul>
 800e844:	9b06      	ldr	r3, [sp, #24]
 800e846:	1b1c      	subs	r4, r3, r4
 800e848:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800e84c:	e9d5 2300 	ldrd	r2, r3, [r5]
 800e850:	e78d      	b.n	800e76e <_strtod_l+0x3c6>
 800e852:	f113 0f16 	cmn.w	r3, #22
 800e856:	dba5      	blt.n	800e7a4 <_strtod_l+0x3fc>
 800e858:	4a37      	ldr	r2, [pc, #220]	; (800e938 <_strtod_l+0x590>)
 800e85a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800e85e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800e862:	4650      	mov	r0, sl
 800e864:	4659      	mov	r1, fp
 800e866:	f7f1 ffc1 	bl	80007ec <__aeabi_ddiv>
 800e86a:	e782      	b.n	800e772 <_strtod_l+0x3ca>
 800e86c:	2300      	movs	r3, #0
 800e86e:	4e33      	ldr	r6, [pc, #204]	; (800e93c <_strtod_l+0x594>)
 800e870:	ea4f 1828 	mov.w	r8, r8, asr #4
 800e874:	4650      	mov	r0, sl
 800e876:	4659      	mov	r1, fp
 800e878:	461d      	mov	r5, r3
 800e87a:	f1b8 0f01 	cmp.w	r8, #1
 800e87e:	dc21      	bgt.n	800e8c4 <_strtod_l+0x51c>
 800e880:	b10b      	cbz	r3, 800e886 <_strtod_l+0x4de>
 800e882:	4682      	mov	sl, r0
 800e884:	468b      	mov	fp, r1
 800e886:	4b2d      	ldr	r3, [pc, #180]	; (800e93c <_strtod_l+0x594>)
 800e888:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800e88c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800e890:	4652      	mov	r2, sl
 800e892:	465b      	mov	r3, fp
 800e894:	e9d5 0100 	ldrd	r0, r1, [r5]
 800e898:	f7f1 fe7e 	bl	8000598 <__aeabi_dmul>
 800e89c:	4b28      	ldr	r3, [pc, #160]	; (800e940 <_strtod_l+0x598>)
 800e89e:	460a      	mov	r2, r1
 800e8a0:	400b      	ands	r3, r1
 800e8a2:	4928      	ldr	r1, [pc, #160]	; (800e944 <_strtod_l+0x59c>)
 800e8a4:	428b      	cmp	r3, r1
 800e8a6:	4682      	mov	sl, r0
 800e8a8:	d898      	bhi.n	800e7dc <_strtod_l+0x434>
 800e8aa:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800e8ae:	428b      	cmp	r3, r1
 800e8b0:	bf86      	itte	hi
 800e8b2:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800e94c <_strtod_l+0x5a4>
 800e8b6:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800e8ba:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800e8be:	2300      	movs	r3, #0
 800e8c0:	9304      	str	r3, [sp, #16]
 800e8c2:	e077      	b.n	800e9b4 <_strtod_l+0x60c>
 800e8c4:	f018 0f01 	tst.w	r8, #1
 800e8c8:	d006      	beq.n	800e8d8 <_strtod_l+0x530>
 800e8ca:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800e8ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8d2:	f7f1 fe61 	bl	8000598 <__aeabi_dmul>
 800e8d6:	2301      	movs	r3, #1
 800e8d8:	3501      	adds	r5, #1
 800e8da:	ea4f 0868 	mov.w	r8, r8, asr #1
 800e8de:	e7cc      	b.n	800e87a <_strtod_l+0x4d2>
 800e8e0:	d0ed      	beq.n	800e8be <_strtod_l+0x516>
 800e8e2:	f1c8 0800 	rsb	r8, r8, #0
 800e8e6:	f018 020f 	ands.w	r2, r8, #15
 800e8ea:	d00a      	beq.n	800e902 <_strtod_l+0x55a>
 800e8ec:	4b12      	ldr	r3, [pc, #72]	; (800e938 <_strtod_l+0x590>)
 800e8ee:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800e8f2:	4650      	mov	r0, sl
 800e8f4:	4659      	mov	r1, fp
 800e8f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800e8fa:	f7f1 ff77 	bl	80007ec <__aeabi_ddiv>
 800e8fe:	4682      	mov	sl, r0
 800e900:	468b      	mov	fp, r1
 800e902:	ea5f 1828 	movs.w	r8, r8, asr #4
 800e906:	d0da      	beq.n	800e8be <_strtod_l+0x516>
 800e908:	f1b8 0f1f 	cmp.w	r8, #31
 800e90c:	dd20      	ble.n	800e950 <_strtod_l+0x5a8>
 800e90e:	2400      	movs	r4, #0
 800e910:	46a0      	mov	r8, r4
 800e912:	9407      	str	r4, [sp, #28]
 800e914:	9405      	str	r4, [sp, #20]
 800e916:	2322      	movs	r3, #34	; 0x22
 800e918:	f04f 0a00 	mov.w	sl, #0
 800e91c:	f04f 0b00 	mov.w	fp, #0
 800e920:	f8c9 3000 	str.w	r3, [r9]
 800e924:	e765      	b.n	800e7f2 <_strtod_l+0x44a>
 800e926:	bf00      	nop
 800e928:	08044b30 	.word	0x08044b30
 800e92c:	08044b33 	.word	0x08044b33
 800e930:	08044b39 	.word	0x08044b39
 800e934:	08044b50 	.word	0x08044b50
 800e938:	08044c28 	.word	0x08044c28
 800e93c:	08044c00 	.word	0x08044c00
 800e940:	7ff00000 	.word	0x7ff00000
 800e944:	7ca00000 	.word	0x7ca00000
 800e948:	fff80000 	.word	0xfff80000
 800e94c:	7fefffff 	.word	0x7fefffff
 800e950:	f018 0310 	ands.w	r3, r8, #16
 800e954:	bf18      	it	ne
 800e956:	236a      	movne	r3, #106	; 0x6a
 800e958:	4da0      	ldr	r5, [pc, #640]	; (800ebdc <_strtod_l+0x834>)
 800e95a:	9304      	str	r3, [sp, #16]
 800e95c:	4650      	mov	r0, sl
 800e95e:	4659      	mov	r1, fp
 800e960:	2300      	movs	r3, #0
 800e962:	f1b8 0f00 	cmp.w	r8, #0
 800e966:	f300 810a 	bgt.w	800eb7e <_strtod_l+0x7d6>
 800e96a:	b10b      	cbz	r3, 800e970 <_strtod_l+0x5c8>
 800e96c:	4682      	mov	sl, r0
 800e96e:	468b      	mov	fp, r1
 800e970:	9b04      	ldr	r3, [sp, #16]
 800e972:	b1bb      	cbz	r3, 800e9a4 <_strtod_l+0x5fc>
 800e974:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800e978:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800e97c:	2b00      	cmp	r3, #0
 800e97e:	4659      	mov	r1, fp
 800e980:	dd10      	ble.n	800e9a4 <_strtod_l+0x5fc>
 800e982:	2b1f      	cmp	r3, #31
 800e984:	f340 8107 	ble.w	800eb96 <_strtod_l+0x7ee>
 800e988:	2b34      	cmp	r3, #52	; 0x34
 800e98a:	bfde      	ittt	le
 800e98c:	3b20      	suble	r3, #32
 800e98e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800e992:	fa02 f303 	lslle.w	r3, r2, r3
 800e996:	f04f 0a00 	mov.w	sl, #0
 800e99a:	bfcc      	ite	gt
 800e99c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800e9a0:	ea03 0b01 	andle.w	fp, r3, r1
 800e9a4:	2200      	movs	r2, #0
 800e9a6:	2300      	movs	r3, #0
 800e9a8:	4650      	mov	r0, sl
 800e9aa:	4659      	mov	r1, fp
 800e9ac:	f7f2 f85c 	bl	8000a68 <__aeabi_dcmpeq>
 800e9b0:	2800      	cmp	r0, #0
 800e9b2:	d1ac      	bne.n	800e90e <_strtod_l+0x566>
 800e9b4:	9b07      	ldr	r3, [sp, #28]
 800e9b6:	9300      	str	r3, [sp, #0]
 800e9b8:	9a05      	ldr	r2, [sp, #20]
 800e9ba:	9908      	ldr	r1, [sp, #32]
 800e9bc:	4623      	mov	r3, r4
 800e9be:	4648      	mov	r0, r9
 800e9c0:	f000 feba 	bl	800f738 <__s2b>
 800e9c4:	9007      	str	r0, [sp, #28]
 800e9c6:	2800      	cmp	r0, #0
 800e9c8:	f43f af08 	beq.w	800e7dc <_strtod_l+0x434>
 800e9cc:	9a06      	ldr	r2, [sp, #24]
 800e9ce:	9b06      	ldr	r3, [sp, #24]
 800e9d0:	2a00      	cmp	r2, #0
 800e9d2:	f1c3 0300 	rsb	r3, r3, #0
 800e9d6:	bfa8      	it	ge
 800e9d8:	2300      	movge	r3, #0
 800e9da:	930e      	str	r3, [sp, #56]	; 0x38
 800e9dc:	2400      	movs	r4, #0
 800e9de:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800e9e2:	9316      	str	r3, [sp, #88]	; 0x58
 800e9e4:	46a0      	mov	r8, r4
 800e9e6:	9b07      	ldr	r3, [sp, #28]
 800e9e8:	4648      	mov	r0, r9
 800e9ea:	6859      	ldr	r1, [r3, #4]
 800e9ec:	f000 fe1e 	bl	800f62c <_Balloc>
 800e9f0:	9005      	str	r0, [sp, #20]
 800e9f2:	2800      	cmp	r0, #0
 800e9f4:	f43f aef6 	beq.w	800e7e4 <_strtod_l+0x43c>
 800e9f8:	9b07      	ldr	r3, [sp, #28]
 800e9fa:	691a      	ldr	r2, [r3, #16]
 800e9fc:	3202      	adds	r2, #2
 800e9fe:	f103 010c 	add.w	r1, r3, #12
 800ea02:	0092      	lsls	r2, r2, #2
 800ea04:	300c      	adds	r0, #12
 800ea06:	f7ff fc9f 	bl	800e348 <memcpy>
 800ea0a:	aa1e      	add	r2, sp, #120	; 0x78
 800ea0c:	a91d      	add	r1, sp, #116	; 0x74
 800ea0e:	ec4b ab10 	vmov	d0, sl, fp
 800ea12:	4648      	mov	r0, r9
 800ea14:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800ea18:	f001 f94a 	bl	800fcb0 <__d2b>
 800ea1c:	901c      	str	r0, [sp, #112]	; 0x70
 800ea1e:	2800      	cmp	r0, #0
 800ea20:	f43f aee0 	beq.w	800e7e4 <_strtod_l+0x43c>
 800ea24:	2101      	movs	r1, #1
 800ea26:	4648      	mov	r0, r9
 800ea28:	f000 ff12 	bl	800f850 <__i2b>
 800ea2c:	4680      	mov	r8, r0
 800ea2e:	2800      	cmp	r0, #0
 800ea30:	f43f aed8 	beq.w	800e7e4 <_strtod_l+0x43c>
 800ea34:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ea36:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ea38:	2e00      	cmp	r6, #0
 800ea3a:	bfab      	itete	ge
 800ea3c:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800ea3e:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800ea40:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800ea42:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800ea44:	bfac      	ite	ge
 800ea46:	18f7      	addge	r7, r6, r3
 800ea48:	1b9d      	sublt	r5, r3, r6
 800ea4a:	9b04      	ldr	r3, [sp, #16]
 800ea4c:	1af6      	subs	r6, r6, r3
 800ea4e:	4416      	add	r6, r2
 800ea50:	4b63      	ldr	r3, [pc, #396]	; (800ebe0 <_strtod_l+0x838>)
 800ea52:	3e01      	subs	r6, #1
 800ea54:	429e      	cmp	r6, r3
 800ea56:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800ea5a:	f280 80af 	bge.w	800ebbc <_strtod_l+0x814>
 800ea5e:	1b9b      	subs	r3, r3, r6
 800ea60:	2b1f      	cmp	r3, #31
 800ea62:	eba2 0203 	sub.w	r2, r2, r3
 800ea66:	f04f 0101 	mov.w	r1, #1
 800ea6a:	f300 809b 	bgt.w	800eba4 <_strtod_l+0x7fc>
 800ea6e:	fa01 f303 	lsl.w	r3, r1, r3
 800ea72:	930f      	str	r3, [sp, #60]	; 0x3c
 800ea74:	2300      	movs	r3, #0
 800ea76:	930a      	str	r3, [sp, #40]	; 0x28
 800ea78:	18be      	adds	r6, r7, r2
 800ea7a:	9b04      	ldr	r3, [sp, #16]
 800ea7c:	42b7      	cmp	r7, r6
 800ea7e:	4415      	add	r5, r2
 800ea80:	441d      	add	r5, r3
 800ea82:	463b      	mov	r3, r7
 800ea84:	bfa8      	it	ge
 800ea86:	4633      	movge	r3, r6
 800ea88:	42ab      	cmp	r3, r5
 800ea8a:	bfa8      	it	ge
 800ea8c:	462b      	movge	r3, r5
 800ea8e:	2b00      	cmp	r3, #0
 800ea90:	bfc2      	ittt	gt
 800ea92:	1af6      	subgt	r6, r6, r3
 800ea94:	1aed      	subgt	r5, r5, r3
 800ea96:	1aff      	subgt	r7, r7, r3
 800ea98:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800ea9a:	b1bb      	cbz	r3, 800eacc <_strtod_l+0x724>
 800ea9c:	4641      	mov	r1, r8
 800ea9e:	461a      	mov	r2, r3
 800eaa0:	4648      	mov	r0, r9
 800eaa2:	f000 ff75 	bl	800f990 <__pow5mult>
 800eaa6:	4680      	mov	r8, r0
 800eaa8:	2800      	cmp	r0, #0
 800eaaa:	f43f ae9b 	beq.w	800e7e4 <_strtod_l+0x43c>
 800eaae:	4601      	mov	r1, r0
 800eab0:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800eab2:	4648      	mov	r0, r9
 800eab4:	f000 fed5 	bl	800f862 <__multiply>
 800eab8:	900c      	str	r0, [sp, #48]	; 0x30
 800eaba:	2800      	cmp	r0, #0
 800eabc:	f43f ae92 	beq.w	800e7e4 <_strtod_l+0x43c>
 800eac0:	991c      	ldr	r1, [sp, #112]	; 0x70
 800eac2:	4648      	mov	r0, r9
 800eac4:	f000 fde6 	bl	800f694 <_Bfree>
 800eac8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eaca:	931c      	str	r3, [sp, #112]	; 0x70
 800eacc:	2e00      	cmp	r6, #0
 800eace:	dc7a      	bgt.n	800ebc6 <_strtod_l+0x81e>
 800ead0:	9b06      	ldr	r3, [sp, #24]
 800ead2:	2b00      	cmp	r3, #0
 800ead4:	dd08      	ble.n	800eae8 <_strtod_l+0x740>
 800ead6:	9a16      	ldr	r2, [sp, #88]	; 0x58
 800ead8:	9905      	ldr	r1, [sp, #20]
 800eada:	4648      	mov	r0, r9
 800eadc:	f000 ff58 	bl	800f990 <__pow5mult>
 800eae0:	9005      	str	r0, [sp, #20]
 800eae2:	2800      	cmp	r0, #0
 800eae4:	f43f ae7e 	beq.w	800e7e4 <_strtod_l+0x43c>
 800eae8:	2d00      	cmp	r5, #0
 800eaea:	dd08      	ble.n	800eafe <_strtod_l+0x756>
 800eaec:	462a      	mov	r2, r5
 800eaee:	9905      	ldr	r1, [sp, #20]
 800eaf0:	4648      	mov	r0, r9
 800eaf2:	f000 ff9b 	bl	800fa2c <__lshift>
 800eaf6:	9005      	str	r0, [sp, #20]
 800eaf8:	2800      	cmp	r0, #0
 800eafa:	f43f ae73 	beq.w	800e7e4 <_strtod_l+0x43c>
 800eafe:	2f00      	cmp	r7, #0
 800eb00:	dd08      	ble.n	800eb14 <_strtod_l+0x76c>
 800eb02:	4641      	mov	r1, r8
 800eb04:	463a      	mov	r2, r7
 800eb06:	4648      	mov	r0, r9
 800eb08:	f000 ff90 	bl	800fa2c <__lshift>
 800eb0c:	4680      	mov	r8, r0
 800eb0e:	2800      	cmp	r0, #0
 800eb10:	f43f ae68 	beq.w	800e7e4 <_strtod_l+0x43c>
 800eb14:	9a05      	ldr	r2, [sp, #20]
 800eb16:	991c      	ldr	r1, [sp, #112]	; 0x70
 800eb18:	4648      	mov	r0, r9
 800eb1a:	f000 fff5 	bl	800fb08 <__mdiff>
 800eb1e:	4604      	mov	r4, r0
 800eb20:	2800      	cmp	r0, #0
 800eb22:	f43f ae5f 	beq.w	800e7e4 <_strtod_l+0x43c>
 800eb26:	68c3      	ldr	r3, [r0, #12]
 800eb28:	930c      	str	r3, [sp, #48]	; 0x30
 800eb2a:	2300      	movs	r3, #0
 800eb2c:	60c3      	str	r3, [r0, #12]
 800eb2e:	4641      	mov	r1, r8
 800eb30:	f000 ffd0 	bl	800fad4 <__mcmp>
 800eb34:	2800      	cmp	r0, #0
 800eb36:	da55      	bge.n	800ebe4 <_strtod_l+0x83c>
 800eb38:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800eb3a:	b9e3      	cbnz	r3, 800eb76 <_strtod_l+0x7ce>
 800eb3c:	f1ba 0f00 	cmp.w	sl, #0
 800eb40:	d119      	bne.n	800eb76 <_strtod_l+0x7ce>
 800eb42:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800eb46:	b9b3      	cbnz	r3, 800eb76 <_strtod_l+0x7ce>
 800eb48:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800eb4c:	0d1b      	lsrs	r3, r3, #20
 800eb4e:	051b      	lsls	r3, r3, #20
 800eb50:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800eb54:	d90f      	bls.n	800eb76 <_strtod_l+0x7ce>
 800eb56:	6963      	ldr	r3, [r4, #20]
 800eb58:	b913      	cbnz	r3, 800eb60 <_strtod_l+0x7b8>
 800eb5a:	6923      	ldr	r3, [r4, #16]
 800eb5c:	2b01      	cmp	r3, #1
 800eb5e:	dd0a      	ble.n	800eb76 <_strtod_l+0x7ce>
 800eb60:	4621      	mov	r1, r4
 800eb62:	2201      	movs	r2, #1
 800eb64:	4648      	mov	r0, r9
 800eb66:	f000 ff61 	bl	800fa2c <__lshift>
 800eb6a:	4641      	mov	r1, r8
 800eb6c:	4604      	mov	r4, r0
 800eb6e:	f000 ffb1 	bl	800fad4 <__mcmp>
 800eb72:	2800      	cmp	r0, #0
 800eb74:	dc67      	bgt.n	800ec46 <_strtod_l+0x89e>
 800eb76:	9b04      	ldr	r3, [sp, #16]
 800eb78:	2b00      	cmp	r3, #0
 800eb7a:	d171      	bne.n	800ec60 <_strtod_l+0x8b8>
 800eb7c:	e63d      	b.n	800e7fa <_strtod_l+0x452>
 800eb7e:	f018 0f01 	tst.w	r8, #1
 800eb82:	d004      	beq.n	800eb8e <_strtod_l+0x7e6>
 800eb84:	e9d5 2300 	ldrd	r2, r3, [r5]
 800eb88:	f7f1 fd06 	bl	8000598 <__aeabi_dmul>
 800eb8c:	2301      	movs	r3, #1
 800eb8e:	ea4f 0868 	mov.w	r8, r8, asr #1
 800eb92:	3508      	adds	r5, #8
 800eb94:	e6e5      	b.n	800e962 <_strtod_l+0x5ba>
 800eb96:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800eb9a:	fa02 f303 	lsl.w	r3, r2, r3
 800eb9e:	ea03 0a0a 	and.w	sl, r3, sl
 800eba2:	e6ff      	b.n	800e9a4 <_strtod_l+0x5fc>
 800eba4:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 800eba8:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 800ebac:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 800ebb0:	36e2      	adds	r6, #226	; 0xe2
 800ebb2:	fa01 f306 	lsl.w	r3, r1, r6
 800ebb6:	930a      	str	r3, [sp, #40]	; 0x28
 800ebb8:	910f      	str	r1, [sp, #60]	; 0x3c
 800ebba:	e75d      	b.n	800ea78 <_strtod_l+0x6d0>
 800ebbc:	2300      	movs	r3, #0
 800ebbe:	930a      	str	r3, [sp, #40]	; 0x28
 800ebc0:	2301      	movs	r3, #1
 800ebc2:	930f      	str	r3, [sp, #60]	; 0x3c
 800ebc4:	e758      	b.n	800ea78 <_strtod_l+0x6d0>
 800ebc6:	4632      	mov	r2, r6
 800ebc8:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ebca:	4648      	mov	r0, r9
 800ebcc:	f000 ff2e 	bl	800fa2c <__lshift>
 800ebd0:	901c      	str	r0, [sp, #112]	; 0x70
 800ebd2:	2800      	cmp	r0, #0
 800ebd4:	f47f af7c 	bne.w	800ead0 <_strtod_l+0x728>
 800ebd8:	e604      	b.n	800e7e4 <_strtod_l+0x43c>
 800ebda:	bf00      	nop
 800ebdc:	08044b68 	.word	0x08044b68
 800ebe0:	fffffc02 	.word	0xfffffc02
 800ebe4:	465d      	mov	r5, fp
 800ebe6:	f040 8086 	bne.w	800ecf6 <_strtod_l+0x94e>
 800ebea:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ebec:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ebf0:	b32a      	cbz	r2, 800ec3e <_strtod_l+0x896>
 800ebf2:	4aaf      	ldr	r2, [pc, #700]	; (800eeb0 <_strtod_l+0xb08>)
 800ebf4:	4293      	cmp	r3, r2
 800ebf6:	d153      	bne.n	800eca0 <_strtod_l+0x8f8>
 800ebf8:	9b04      	ldr	r3, [sp, #16]
 800ebfa:	4650      	mov	r0, sl
 800ebfc:	b1d3      	cbz	r3, 800ec34 <_strtod_l+0x88c>
 800ebfe:	4aad      	ldr	r2, [pc, #692]	; (800eeb4 <_strtod_l+0xb0c>)
 800ec00:	402a      	ands	r2, r5
 800ec02:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 800ec06:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 800ec0a:	d816      	bhi.n	800ec3a <_strtod_l+0x892>
 800ec0c:	0d12      	lsrs	r2, r2, #20
 800ec0e:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800ec12:	fa01 f303 	lsl.w	r3, r1, r3
 800ec16:	4298      	cmp	r0, r3
 800ec18:	d142      	bne.n	800eca0 <_strtod_l+0x8f8>
 800ec1a:	4ba7      	ldr	r3, [pc, #668]	; (800eeb8 <_strtod_l+0xb10>)
 800ec1c:	429d      	cmp	r5, r3
 800ec1e:	d102      	bne.n	800ec26 <_strtod_l+0x87e>
 800ec20:	3001      	adds	r0, #1
 800ec22:	f43f addf 	beq.w	800e7e4 <_strtod_l+0x43c>
 800ec26:	4ba3      	ldr	r3, [pc, #652]	; (800eeb4 <_strtod_l+0xb0c>)
 800ec28:	402b      	ands	r3, r5
 800ec2a:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800ec2e:	f04f 0a00 	mov.w	sl, #0
 800ec32:	e7a0      	b.n	800eb76 <_strtod_l+0x7ce>
 800ec34:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ec38:	e7ed      	b.n	800ec16 <_strtod_l+0x86e>
 800ec3a:	460b      	mov	r3, r1
 800ec3c:	e7eb      	b.n	800ec16 <_strtod_l+0x86e>
 800ec3e:	bb7b      	cbnz	r3, 800eca0 <_strtod_l+0x8f8>
 800ec40:	f1ba 0f00 	cmp.w	sl, #0
 800ec44:	d12c      	bne.n	800eca0 <_strtod_l+0x8f8>
 800ec46:	9904      	ldr	r1, [sp, #16]
 800ec48:	4a9a      	ldr	r2, [pc, #616]	; (800eeb4 <_strtod_l+0xb0c>)
 800ec4a:	465b      	mov	r3, fp
 800ec4c:	b1f1      	cbz	r1, 800ec8c <_strtod_l+0x8e4>
 800ec4e:	ea02 010b 	and.w	r1, r2, fp
 800ec52:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800ec56:	dc19      	bgt.n	800ec8c <_strtod_l+0x8e4>
 800ec58:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800ec5c:	f77f ae5b 	ble.w	800e916 <_strtod_l+0x56e>
 800ec60:	4a96      	ldr	r2, [pc, #600]	; (800eebc <_strtod_l+0xb14>)
 800ec62:	2300      	movs	r3, #0
 800ec64:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 800ec68:	4650      	mov	r0, sl
 800ec6a:	4659      	mov	r1, fp
 800ec6c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ec70:	f7f1 fc92 	bl	8000598 <__aeabi_dmul>
 800ec74:	4682      	mov	sl, r0
 800ec76:	468b      	mov	fp, r1
 800ec78:	2900      	cmp	r1, #0
 800ec7a:	f47f adbe 	bne.w	800e7fa <_strtod_l+0x452>
 800ec7e:	2800      	cmp	r0, #0
 800ec80:	f47f adbb 	bne.w	800e7fa <_strtod_l+0x452>
 800ec84:	2322      	movs	r3, #34	; 0x22
 800ec86:	f8c9 3000 	str.w	r3, [r9]
 800ec8a:	e5b6      	b.n	800e7fa <_strtod_l+0x452>
 800ec8c:	4013      	ands	r3, r2
 800ec8e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800ec92:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800ec96:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800ec9a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ec9e:	e76a      	b.n	800eb76 <_strtod_l+0x7ce>
 800eca0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800eca2:	b193      	cbz	r3, 800ecca <_strtod_l+0x922>
 800eca4:	422b      	tst	r3, r5
 800eca6:	f43f af66 	beq.w	800eb76 <_strtod_l+0x7ce>
 800ecaa:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ecac:	9a04      	ldr	r2, [sp, #16]
 800ecae:	4650      	mov	r0, sl
 800ecb0:	4659      	mov	r1, fp
 800ecb2:	b173      	cbz	r3, 800ecd2 <_strtod_l+0x92a>
 800ecb4:	f7ff fb5b 	bl	800e36e <sulp>
 800ecb8:	4602      	mov	r2, r0
 800ecba:	460b      	mov	r3, r1
 800ecbc:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ecc0:	f7f1 fab4 	bl	800022c <__adddf3>
 800ecc4:	4682      	mov	sl, r0
 800ecc6:	468b      	mov	fp, r1
 800ecc8:	e755      	b.n	800eb76 <_strtod_l+0x7ce>
 800ecca:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eccc:	ea13 0f0a 	tst.w	r3, sl
 800ecd0:	e7e9      	b.n	800eca6 <_strtod_l+0x8fe>
 800ecd2:	f7ff fb4c 	bl	800e36e <sulp>
 800ecd6:	4602      	mov	r2, r0
 800ecd8:	460b      	mov	r3, r1
 800ecda:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ecde:	f7f1 faa3 	bl	8000228 <__aeabi_dsub>
 800ece2:	2200      	movs	r2, #0
 800ece4:	2300      	movs	r3, #0
 800ece6:	4682      	mov	sl, r0
 800ece8:	468b      	mov	fp, r1
 800ecea:	f7f1 febd 	bl	8000a68 <__aeabi_dcmpeq>
 800ecee:	2800      	cmp	r0, #0
 800ecf0:	f47f ae11 	bne.w	800e916 <_strtod_l+0x56e>
 800ecf4:	e73f      	b.n	800eb76 <_strtod_l+0x7ce>
 800ecf6:	4641      	mov	r1, r8
 800ecf8:	4620      	mov	r0, r4
 800ecfa:	f001 f828 	bl	800fd4e <__ratio>
 800ecfe:	ec57 6b10 	vmov	r6, r7, d0
 800ed02:	2200      	movs	r2, #0
 800ed04:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ed08:	ee10 0a10 	vmov	r0, s0
 800ed0c:	4639      	mov	r1, r7
 800ed0e:	f7f1 febf 	bl	8000a90 <__aeabi_dcmple>
 800ed12:	2800      	cmp	r0, #0
 800ed14:	d077      	beq.n	800ee06 <_strtod_l+0xa5e>
 800ed16:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ed18:	2b00      	cmp	r3, #0
 800ed1a:	d04a      	beq.n	800edb2 <_strtod_l+0xa0a>
 800ed1c:	4b68      	ldr	r3, [pc, #416]	; (800eec0 <_strtod_l+0xb18>)
 800ed1e:	2200      	movs	r2, #0
 800ed20:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ed24:	4f66      	ldr	r7, [pc, #408]	; (800eec0 <_strtod_l+0xb18>)
 800ed26:	2600      	movs	r6, #0
 800ed28:	4b62      	ldr	r3, [pc, #392]	; (800eeb4 <_strtod_l+0xb0c>)
 800ed2a:	402b      	ands	r3, r5
 800ed2c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ed2e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ed30:	4b64      	ldr	r3, [pc, #400]	; (800eec4 <_strtod_l+0xb1c>)
 800ed32:	429a      	cmp	r2, r3
 800ed34:	f040 80ce 	bne.w	800eed4 <_strtod_l+0xb2c>
 800ed38:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ed3c:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ed40:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 800ed44:	ec4b ab10 	vmov	d0, sl, fp
 800ed48:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800ed4c:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 800ed50:	f000 ff38 	bl	800fbc4 <__ulp>
 800ed54:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 800ed58:	ec53 2b10 	vmov	r2, r3, d0
 800ed5c:	f7f1 fc1c 	bl	8000598 <__aeabi_dmul>
 800ed60:	4652      	mov	r2, sl
 800ed62:	465b      	mov	r3, fp
 800ed64:	f7f1 fa62 	bl	800022c <__adddf3>
 800ed68:	460b      	mov	r3, r1
 800ed6a:	4952      	ldr	r1, [pc, #328]	; (800eeb4 <_strtod_l+0xb0c>)
 800ed6c:	4a56      	ldr	r2, [pc, #344]	; (800eec8 <_strtod_l+0xb20>)
 800ed6e:	4019      	ands	r1, r3
 800ed70:	4291      	cmp	r1, r2
 800ed72:	4682      	mov	sl, r0
 800ed74:	d95b      	bls.n	800ee2e <_strtod_l+0xa86>
 800ed76:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed78:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ed7c:	4293      	cmp	r3, r2
 800ed7e:	d103      	bne.n	800ed88 <_strtod_l+0x9e0>
 800ed80:	9b08      	ldr	r3, [sp, #32]
 800ed82:	3301      	adds	r3, #1
 800ed84:	f43f ad2e 	beq.w	800e7e4 <_strtod_l+0x43c>
 800ed88:	f8df b12c 	ldr.w	fp, [pc, #300]	; 800eeb8 <_strtod_l+0xb10>
 800ed8c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800ed90:	991c      	ldr	r1, [sp, #112]	; 0x70
 800ed92:	4648      	mov	r0, r9
 800ed94:	f000 fc7e 	bl	800f694 <_Bfree>
 800ed98:	9905      	ldr	r1, [sp, #20]
 800ed9a:	4648      	mov	r0, r9
 800ed9c:	f000 fc7a 	bl	800f694 <_Bfree>
 800eda0:	4641      	mov	r1, r8
 800eda2:	4648      	mov	r0, r9
 800eda4:	f000 fc76 	bl	800f694 <_Bfree>
 800eda8:	4621      	mov	r1, r4
 800edaa:	4648      	mov	r0, r9
 800edac:	f000 fc72 	bl	800f694 <_Bfree>
 800edb0:	e619      	b.n	800e9e6 <_strtod_l+0x63e>
 800edb2:	f1ba 0f00 	cmp.w	sl, #0
 800edb6:	d11a      	bne.n	800edee <_strtod_l+0xa46>
 800edb8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800edbc:	b9eb      	cbnz	r3, 800edfa <_strtod_l+0xa52>
 800edbe:	2200      	movs	r2, #0
 800edc0:	4b3f      	ldr	r3, [pc, #252]	; (800eec0 <_strtod_l+0xb18>)
 800edc2:	4630      	mov	r0, r6
 800edc4:	4639      	mov	r1, r7
 800edc6:	f7f1 fe59 	bl	8000a7c <__aeabi_dcmplt>
 800edca:	b9c8      	cbnz	r0, 800ee00 <_strtod_l+0xa58>
 800edcc:	4630      	mov	r0, r6
 800edce:	4639      	mov	r1, r7
 800edd0:	2200      	movs	r2, #0
 800edd2:	4b3e      	ldr	r3, [pc, #248]	; (800eecc <_strtod_l+0xb24>)
 800edd4:	f7f1 fbe0 	bl	8000598 <__aeabi_dmul>
 800edd8:	4606      	mov	r6, r0
 800edda:	460f      	mov	r7, r1
 800eddc:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 800ede0:	9618      	str	r6, [sp, #96]	; 0x60
 800ede2:	9319      	str	r3, [sp, #100]	; 0x64
 800ede4:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 800ede8:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800edec:	e79c      	b.n	800ed28 <_strtod_l+0x980>
 800edee:	f1ba 0f01 	cmp.w	sl, #1
 800edf2:	d102      	bne.n	800edfa <_strtod_l+0xa52>
 800edf4:	2d00      	cmp	r5, #0
 800edf6:	f43f ad8e 	beq.w	800e916 <_strtod_l+0x56e>
 800edfa:	2200      	movs	r2, #0
 800edfc:	4b34      	ldr	r3, [pc, #208]	; (800eed0 <_strtod_l+0xb28>)
 800edfe:	e78f      	b.n	800ed20 <_strtod_l+0x978>
 800ee00:	2600      	movs	r6, #0
 800ee02:	4f32      	ldr	r7, [pc, #200]	; (800eecc <_strtod_l+0xb24>)
 800ee04:	e7ea      	b.n	800eddc <_strtod_l+0xa34>
 800ee06:	4b31      	ldr	r3, [pc, #196]	; (800eecc <_strtod_l+0xb24>)
 800ee08:	4630      	mov	r0, r6
 800ee0a:	4639      	mov	r1, r7
 800ee0c:	2200      	movs	r2, #0
 800ee0e:	f7f1 fbc3 	bl	8000598 <__aeabi_dmul>
 800ee12:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee14:	4606      	mov	r6, r0
 800ee16:	460f      	mov	r7, r1
 800ee18:	b933      	cbnz	r3, 800ee28 <_strtod_l+0xa80>
 800ee1a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ee1e:	9010      	str	r0, [sp, #64]	; 0x40
 800ee20:	9311      	str	r3, [sp, #68]	; 0x44
 800ee22:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ee26:	e7df      	b.n	800ede8 <_strtod_l+0xa40>
 800ee28:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 800ee2c:	e7f9      	b.n	800ee22 <_strtod_l+0xa7a>
 800ee2e:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ee32:	9b04      	ldr	r3, [sp, #16]
 800ee34:	2b00      	cmp	r3, #0
 800ee36:	d1ab      	bne.n	800ed90 <_strtod_l+0x9e8>
 800ee38:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ee3c:	0d1b      	lsrs	r3, r3, #20
 800ee3e:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ee40:	051b      	lsls	r3, r3, #20
 800ee42:	429a      	cmp	r2, r3
 800ee44:	465d      	mov	r5, fp
 800ee46:	d1a3      	bne.n	800ed90 <_strtod_l+0x9e8>
 800ee48:	4639      	mov	r1, r7
 800ee4a:	4630      	mov	r0, r6
 800ee4c:	f7f1 fe3e 	bl	8000acc <__aeabi_d2iz>
 800ee50:	f7f1 fb38 	bl	80004c4 <__aeabi_i2d>
 800ee54:	460b      	mov	r3, r1
 800ee56:	4602      	mov	r2, r0
 800ee58:	4639      	mov	r1, r7
 800ee5a:	4630      	mov	r0, r6
 800ee5c:	f7f1 f9e4 	bl	8000228 <__aeabi_dsub>
 800ee60:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ee62:	4606      	mov	r6, r0
 800ee64:	460f      	mov	r7, r1
 800ee66:	b933      	cbnz	r3, 800ee76 <_strtod_l+0xace>
 800ee68:	f1ba 0f00 	cmp.w	sl, #0
 800ee6c:	d103      	bne.n	800ee76 <_strtod_l+0xace>
 800ee6e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 800ee72:	2d00      	cmp	r5, #0
 800ee74:	d06d      	beq.n	800ef52 <_strtod_l+0xbaa>
 800ee76:	a30a      	add	r3, pc, #40	; (adr r3, 800eea0 <_strtod_l+0xaf8>)
 800ee78:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee7c:	4630      	mov	r0, r6
 800ee7e:	4639      	mov	r1, r7
 800ee80:	f7f1 fdfc 	bl	8000a7c <__aeabi_dcmplt>
 800ee84:	2800      	cmp	r0, #0
 800ee86:	f47f acb8 	bne.w	800e7fa <_strtod_l+0x452>
 800ee8a:	a307      	add	r3, pc, #28	; (adr r3, 800eea8 <_strtod_l+0xb00>)
 800ee8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ee90:	4630      	mov	r0, r6
 800ee92:	4639      	mov	r1, r7
 800ee94:	f7f1 fe10 	bl	8000ab8 <__aeabi_dcmpgt>
 800ee98:	2800      	cmp	r0, #0
 800ee9a:	f43f af79 	beq.w	800ed90 <_strtod_l+0x9e8>
 800ee9e:	e4ac      	b.n	800e7fa <_strtod_l+0x452>
 800eea0:	94a03595 	.word	0x94a03595
 800eea4:	3fdfffff 	.word	0x3fdfffff
 800eea8:	35afe535 	.word	0x35afe535
 800eeac:	3fe00000 	.word	0x3fe00000
 800eeb0:	000fffff 	.word	0x000fffff
 800eeb4:	7ff00000 	.word	0x7ff00000
 800eeb8:	7fefffff 	.word	0x7fefffff
 800eebc:	39500000 	.word	0x39500000
 800eec0:	3ff00000 	.word	0x3ff00000
 800eec4:	7fe00000 	.word	0x7fe00000
 800eec8:	7c9fffff 	.word	0x7c9fffff
 800eecc:	3fe00000 	.word	0x3fe00000
 800eed0:	bff00000 	.word	0xbff00000
 800eed4:	9b04      	ldr	r3, [sp, #16]
 800eed6:	b333      	cbz	r3, 800ef26 <_strtod_l+0xb7e>
 800eed8:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 800eeda:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800eede:	d822      	bhi.n	800ef26 <_strtod_l+0xb7e>
 800eee0:	a327      	add	r3, pc, #156	; (adr r3, 800ef80 <_strtod_l+0xbd8>)
 800eee2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eee6:	4630      	mov	r0, r6
 800eee8:	4639      	mov	r1, r7
 800eeea:	f7f1 fdd1 	bl	8000a90 <__aeabi_dcmple>
 800eeee:	b1a0      	cbz	r0, 800ef1a <_strtod_l+0xb72>
 800eef0:	4639      	mov	r1, r7
 800eef2:	4630      	mov	r0, r6
 800eef4:	f7f1 fe12 	bl	8000b1c <__aeabi_d2uiz>
 800eef8:	2800      	cmp	r0, #0
 800eefa:	bf08      	it	eq
 800eefc:	2001      	moveq	r0, #1
 800eefe:	f7f1 fad1 	bl	80004a4 <__aeabi_ui2d>
 800ef02:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800ef04:	4606      	mov	r6, r0
 800ef06:	460f      	mov	r7, r1
 800ef08:	bb03      	cbnz	r3, 800ef4c <_strtod_l+0xba4>
 800ef0a:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ef0e:	9012      	str	r0, [sp, #72]	; 0x48
 800ef10:	9313      	str	r3, [sp, #76]	; 0x4c
 800ef12:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 800ef16:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 800ef1a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ef1c:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 800ef1e:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ef22:	1a9b      	subs	r3, r3, r2
 800ef24:	930b      	str	r3, [sp, #44]	; 0x2c
 800ef26:	ed9d 0b08 	vldr	d0, [sp, #32]
 800ef2a:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 800ef2e:	f000 fe49 	bl	800fbc4 <__ulp>
 800ef32:	4650      	mov	r0, sl
 800ef34:	ec53 2b10 	vmov	r2, r3, d0
 800ef38:	4659      	mov	r1, fp
 800ef3a:	f7f1 fb2d 	bl	8000598 <__aeabi_dmul>
 800ef3e:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 800ef42:	f7f1 f973 	bl	800022c <__adddf3>
 800ef46:	4682      	mov	sl, r0
 800ef48:	468b      	mov	fp, r1
 800ef4a:	e772      	b.n	800ee32 <_strtod_l+0xa8a>
 800ef4c:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 800ef50:	e7df      	b.n	800ef12 <_strtod_l+0xb6a>
 800ef52:	a30d      	add	r3, pc, #52	; (adr r3, 800ef88 <_strtod_l+0xbe0>)
 800ef54:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef58:	f7f1 fd90 	bl	8000a7c <__aeabi_dcmplt>
 800ef5c:	e79c      	b.n	800ee98 <_strtod_l+0xaf0>
 800ef5e:	2300      	movs	r3, #0
 800ef60:	930d      	str	r3, [sp, #52]	; 0x34
 800ef62:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800ef64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800ef66:	6013      	str	r3, [r2, #0]
 800ef68:	f7ff ba61 	b.w	800e42e <_strtod_l+0x86>
 800ef6c:	2b65      	cmp	r3, #101	; 0x65
 800ef6e:	f04f 0200 	mov.w	r2, #0
 800ef72:	f43f ab4e 	beq.w	800e612 <_strtod_l+0x26a>
 800ef76:	2101      	movs	r1, #1
 800ef78:	4614      	mov	r4, r2
 800ef7a:	9104      	str	r1, [sp, #16]
 800ef7c:	f7ff bacb 	b.w	800e516 <_strtod_l+0x16e>
 800ef80:	ffc00000 	.word	0xffc00000
 800ef84:	41dfffff 	.word	0x41dfffff
 800ef88:	94a03595 	.word	0x94a03595
 800ef8c:	3fcfffff 	.word	0x3fcfffff

0800ef90 <strtod>:
 800ef90:	4b07      	ldr	r3, [pc, #28]	; (800efb0 <strtod+0x20>)
 800ef92:	4a08      	ldr	r2, [pc, #32]	; (800efb4 <strtod+0x24>)
 800ef94:	b410      	push	{r4}
 800ef96:	681c      	ldr	r4, [r3, #0]
 800ef98:	6a23      	ldr	r3, [r4, #32]
 800ef9a:	2b00      	cmp	r3, #0
 800ef9c:	bf08      	it	eq
 800ef9e:	4613      	moveq	r3, r2
 800efa0:	460a      	mov	r2, r1
 800efa2:	4601      	mov	r1, r0
 800efa4:	4620      	mov	r0, r4
 800efa6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800efaa:	f7ff b9fd 	b.w	800e3a8 <_strtod_l>
 800efae:	bf00      	nop
 800efb0:	20000018 	.word	0x20000018
 800efb4:	2000007c 	.word	0x2000007c

0800efb8 <rshift>:
 800efb8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800efba:	6906      	ldr	r6, [r0, #16]
 800efbc:	114b      	asrs	r3, r1, #5
 800efbe:	429e      	cmp	r6, r3
 800efc0:	f100 0414 	add.w	r4, r0, #20
 800efc4:	dd30      	ble.n	800f028 <rshift+0x70>
 800efc6:	f011 011f 	ands.w	r1, r1, #31
 800efca:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 800efce:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 800efd2:	d108      	bne.n	800efe6 <rshift+0x2e>
 800efd4:	4621      	mov	r1, r4
 800efd6:	42b2      	cmp	r2, r6
 800efd8:	460b      	mov	r3, r1
 800efda:	d211      	bcs.n	800f000 <rshift+0x48>
 800efdc:	f852 3b04 	ldr.w	r3, [r2], #4
 800efe0:	f841 3b04 	str.w	r3, [r1], #4
 800efe4:	e7f7      	b.n	800efd6 <rshift+0x1e>
 800efe6:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 800efea:	f1c1 0c20 	rsb	ip, r1, #32
 800efee:	40cd      	lsrs	r5, r1
 800eff0:	3204      	adds	r2, #4
 800eff2:	4623      	mov	r3, r4
 800eff4:	42b2      	cmp	r2, r6
 800eff6:	4617      	mov	r7, r2
 800eff8:	d30c      	bcc.n	800f014 <rshift+0x5c>
 800effa:	601d      	str	r5, [r3, #0]
 800effc:	b105      	cbz	r5, 800f000 <rshift+0x48>
 800effe:	3304      	adds	r3, #4
 800f000:	1b1a      	subs	r2, r3, r4
 800f002:	42a3      	cmp	r3, r4
 800f004:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800f008:	bf08      	it	eq
 800f00a:	2300      	moveq	r3, #0
 800f00c:	6102      	str	r2, [r0, #16]
 800f00e:	bf08      	it	eq
 800f010:	6143      	streq	r3, [r0, #20]
 800f012:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800f014:	683f      	ldr	r7, [r7, #0]
 800f016:	fa07 f70c 	lsl.w	r7, r7, ip
 800f01a:	433d      	orrs	r5, r7
 800f01c:	f843 5b04 	str.w	r5, [r3], #4
 800f020:	f852 5b04 	ldr.w	r5, [r2], #4
 800f024:	40cd      	lsrs	r5, r1
 800f026:	e7e5      	b.n	800eff4 <rshift+0x3c>
 800f028:	4623      	mov	r3, r4
 800f02a:	e7e9      	b.n	800f000 <rshift+0x48>

0800f02c <__hexdig_fun>:
 800f02c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800f030:	2b09      	cmp	r3, #9
 800f032:	d802      	bhi.n	800f03a <__hexdig_fun+0xe>
 800f034:	3820      	subs	r0, #32
 800f036:	b2c0      	uxtb	r0, r0
 800f038:	4770      	bx	lr
 800f03a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800f03e:	2b05      	cmp	r3, #5
 800f040:	d801      	bhi.n	800f046 <__hexdig_fun+0x1a>
 800f042:	3847      	subs	r0, #71	; 0x47
 800f044:	e7f7      	b.n	800f036 <__hexdig_fun+0xa>
 800f046:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800f04a:	2b05      	cmp	r3, #5
 800f04c:	d801      	bhi.n	800f052 <__hexdig_fun+0x26>
 800f04e:	3827      	subs	r0, #39	; 0x27
 800f050:	e7f1      	b.n	800f036 <__hexdig_fun+0xa>
 800f052:	2000      	movs	r0, #0
 800f054:	4770      	bx	lr

0800f056 <__gethex>:
 800f056:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f05a:	b08b      	sub	sp, #44	; 0x2c
 800f05c:	468a      	mov	sl, r1
 800f05e:	9002      	str	r0, [sp, #8]
 800f060:	9816      	ldr	r0, [sp, #88]	; 0x58
 800f062:	9306      	str	r3, [sp, #24]
 800f064:	4690      	mov	r8, r2
 800f066:	f000 facd 	bl	800f604 <__localeconv_l>
 800f06a:	6803      	ldr	r3, [r0, #0]
 800f06c:	9303      	str	r3, [sp, #12]
 800f06e:	4618      	mov	r0, r3
 800f070:	f7f1 f8ce 	bl	8000210 <strlen>
 800f074:	9b03      	ldr	r3, [sp, #12]
 800f076:	9001      	str	r0, [sp, #4]
 800f078:	4403      	add	r3, r0
 800f07a:	f04f 0b00 	mov.w	fp, #0
 800f07e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800f082:	9307      	str	r3, [sp, #28]
 800f084:	f8da 3000 	ldr.w	r3, [sl]
 800f088:	3302      	adds	r3, #2
 800f08a:	461f      	mov	r7, r3
 800f08c:	f813 0b01 	ldrb.w	r0, [r3], #1
 800f090:	2830      	cmp	r0, #48	; 0x30
 800f092:	d06c      	beq.n	800f16e <__gethex+0x118>
 800f094:	f7ff ffca 	bl	800f02c <__hexdig_fun>
 800f098:	4604      	mov	r4, r0
 800f09a:	2800      	cmp	r0, #0
 800f09c:	d16a      	bne.n	800f174 <__gethex+0x11e>
 800f09e:	9a01      	ldr	r2, [sp, #4]
 800f0a0:	9903      	ldr	r1, [sp, #12]
 800f0a2:	4638      	mov	r0, r7
 800f0a4:	f000 ff3a 	bl	800ff1c <strncmp>
 800f0a8:	2800      	cmp	r0, #0
 800f0aa:	d166      	bne.n	800f17a <__gethex+0x124>
 800f0ac:	9b01      	ldr	r3, [sp, #4]
 800f0ae:	5cf8      	ldrb	r0, [r7, r3]
 800f0b0:	18fe      	adds	r6, r7, r3
 800f0b2:	f7ff ffbb 	bl	800f02c <__hexdig_fun>
 800f0b6:	2800      	cmp	r0, #0
 800f0b8:	d062      	beq.n	800f180 <__gethex+0x12a>
 800f0ba:	4633      	mov	r3, r6
 800f0bc:	7818      	ldrb	r0, [r3, #0]
 800f0be:	2830      	cmp	r0, #48	; 0x30
 800f0c0:	461f      	mov	r7, r3
 800f0c2:	f103 0301 	add.w	r3, r3, #1
 800f0c6:	d0f9      	beq.n	800f0bc <__gethex+0x66>
 800f0c8:	f7ff ffb0 	bl	800f02c <__hexdig_fun>
 800f0cc:	fab0 f580 	clz	r5, r0
 800f0d0:	096d      	lsrs	r5, r5, #5
 800f0d2:	4634      	mov	r4, r6
 800f0d4:	f04f 0b01 	mov.w	fp, #1
 800f0d8:	463a      	mov	r2, r7
 800f0da:	4616      	mov	r6, r2
 800f0dc:	3201      	adds	r2, #1
 800f0de:	7830      	ldrb	r0, [r6, #0]
 800f0e0:	f7ff ffa4 	bl	800f02c <__hexdig_fun>
 800f0e4:	2800      	cmp	r0, #0
 800f0e6:	d1f8      	bne.n	800f0da <__gethex+0x84>
 800f0e8:	9a01      	ldr	r2, [sp, #4]
 800f0ea:	9903      	ldr	r1, [sp, #12]
 800f0ec:	4630      	mov	r0, r6
 800f0ee:	f000 ff15 	bl	800ff1c <strncmp>
 800f0f2:	b950      	cbnz	r0, 800f10a <__gethex+0xb4>
 800f0f4:	b954      	cbnz	r4, 800f10c <__gethex+0xb6>
 800f0f6:	9b01      	ldr	r3, [sp, #4]
 800f0f8:	18f4      	adds	r4, r6, r3
 800f0fa:	4622      	mov	r2, r4
 800f0fc:	4616      	mov	r6, r2
 800f0fe:	3201      	adds	r2, #1
 800f100:	7830      	ldrb	r0, [r6, #0]
 800f102:	f7ff ff93 	bl	800f02c <__hexdig_fun>
 800f106:	2800      	cmp	r0, #0
 800f108:	d1f8      	bne.n	800f0fc <__gethex+0xa6>
 800f10a:	b10c      	cbz	r4, 800f110 <__gethex+0xba>
 800f10c:	1ba4      	subs	r4, r4, r6
 800f10e:	00a4      	lsls	r4, r4, #2
 800f110:	7833      	ldrb	r3, [r6, #0]
 800f112:	2b50      	cmp	r3, #80	; 0x50
 800f114:	d001      	beq.n	800f11a <__gethex+0xc4>
 800f116:	2b70      	cmp	r3, #112	; 0x70
 800f118:	d140      	bne.n	800f19c <__gethex+0x146>
 800f11a:	7873      	ldrb	r3, [r6, #1]
 800f11c:	2b2b      	cmp	r3, #43	; 0x2b
 800f11e:	d031      	beq.n	800f184 <__gethex+0x12e>
 800f120:	2b2d      	cmp	r3, #45	; 0x2d
 800f122:	d033      	beq.n	800f18c <__gethex+0x136>
 800f124:	1c71      	adds	r1, r6, #1
 800f126:	f04f 0900 	mov.w	r9, #0
 800f12a:	7808      	ldrb	r0, [r1, #0]
 800f12c:	f7ff ff7e 	bl	800f02c <__hexdig_fun>
 800f130:	1e43      	subs	r3, r0, #1
 800f132:	b2db      	uxtb	r3, r3
 800f134:	2b18      	cmp	r3, #24
 800f136:	d831      	bhi.n	800f19c <__gethex+0x146>
 800f138:	f1a0 0210 	sub.w	r2, r0, #16
 800f13c:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800f140:	f7ff ff74 	bl	800f02c <__hexdig_fun>
 800f144:	1e43      	subs	r3, r0, #1
 800f146:	b2db      	uxtb	r3, r3
 800f148:	2b18      	cmp	r3, #24
 800f14a:	d922      	bls.n	800f192 <__gethex+0x13c>
 800f14c:	f1b9 0f00 	cmp.w	r9, #0
 800f150:	d000      	beq.n	800f154 <__gethex+0xfe>
 800f152:	4252      	negs	r2, r2
 800f154:	4414      	add	r4, r2
 800f156:	f8ca 1000 	str.w	r1, [sl]
 800f15a:	b30d      	cbz	r5, 800f1a0 <__gethex+0x14a>
 800f15c:	f1bb 0f00 	cmp.w	fp, #0
 800f160:	bf0c      	ite	eq
 800f162:	2706      	moveq	r7, #6
 800f164:	2700      	movne	r7, #0
 800f166:	4638      	mov	r0, r7
 800f168:	b00b      	add	sp, #44	; 0x2c
 800f16a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f16e:	f10b 0b01 	add.w	fp, fp, #1
 800f172:	e78a      	b.n	800f08a <__gethex+0x34>
 800f174:	2500      	movs	r5, #0
 800f176:	462c      	mov	r4, r5
 800f178:	e7ae      	b.n	800f0d8 <__gethex+0x82>
 800f17a:	463e      	mov	r6, r7
 800f17c:	2501      	movs	r5, #1
 800f17e:	e7c7      	b.n	800f110 <__gethex+0xba>
 800f180:	4604      	mov	r4, r0
 800f182:	e7fb      	b.n	800f17c <__gethex+0x126>
 800f184:	f04f 0900 	mov.w	r9, #0
 800f188:	1cb1      	adds	r1, r6, #2
 800f18a:	e7ce      	b.n	800f12a <__gethex+0xd4>
 800f18c:	f04f 0901 	mov.w	r9, #1
 800f190:	e7fa      	b.n	800f188 <__gethex+0x132>
 800f192:	230a      	movs	r3, #10
 800f194:	fb03 0202 	mla	r2, r3, r2, r0
 800f198:	3a10      	subs	r2, #16
 800f19a:	e7cf      	b.n	800f13c <__gethex+0xe6>
 800f19c:	4631      	mov	r1, r6
 800f19e:	e7da      	b.n	800f156 <__gethex+0x100>
 800f1a0:	1bf3      	subs	r3, r6, r7
 800f1a2:	3b01      	subs	r3, #1
 800f1a4:	4629      	mov	r1, r5
 800f1a6:	2b07      	cmp	r3, #7
 800f1a8:	dc49      	bgt.n	800f23e <__gethex+0x1e8>
 800f1aa:	9802      	ldr	r0, [sp, #8]
 800f1ac:	f000 fa3e 	bl	800f62c <_Balloc>
 800f1b0:	9b01      	ldr	r3, [sp, #4]
 800f1b2:	f100 0914 	add.w	r9, r0, #20
 800f1b6:	f04f 0b00 	mov.w	fp, #0
 800f1ba:	f1c3 0301 	rsb	r3, r3, #1
 800f1be:	4605      	mov	r5, r0
 800f1c0:	f8cd 9010 	str.w	r9, [sp, #16]
 800f1c4:	46da      	mov	sl, fp
 800f1c6:	9308      	str	r3, [sp, #32]
 800f1c8:	42b7      	cmp	r7, r6
 800f1ca:	d33b      	bcc.n	800f244 <__gethex+0x1ee>
 800f1cc:	9804      	ldr	r0, [sp, #16]
 800f1ce:	f840 ab04 	str.w	sl, [r0], #4
 800f1d2:	eba0 0009 	sub.w	r0, r0, r9
 800f1d6:	1080      	asrs	r0, r0, #2
 800f1d8:	6128      	str	r0, [r5, #16]
 800f1da:	0147      	lsls	r7, r0, #5
 800f1dc:	4650      	mov	r0, sl
 800f1de:	f000 fae9 	bl	800f7b4 <__hi0bits>
 800f1e2:	f8d8 6000 	ldr.w	r6, [r8]
 800f1e6:	1a3f      	subs	r7, r7, r0
 800f1e8:	42b7      	cmp	r7, r6
 800f1ea:	dd64      	ble.n	800f2b6 <__gethex+0x260>
 800f1ec:	1bbf      	subs	r7, r7, r6
 800f1ee:	4639      	mov	r1, r7
 800f1f0:	4628      	mov	r0, r5
 800f1f2:	f000 fdf9 	bl	800fde8 <__any_on>
 800f1f6:	4682      	mov	sl, r0
 800f1f8:	b178      	cbz	r0, 800f21a <__gethex+0x1c4>
 800f1fa:	1e7b      	subs	r3, r7, #1
 800f1fc:	1159      	asrs	r1, r3, #5
 800f1fe:	f003 021f 	and.w	r2, r3, #31
 800f202:	f04f 0a01 	mov.w	sl, #1
 800f206:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800f20a:	fa0a f202 	lsl.w	r2, sl, r2
 800f20e:	420a      	tst	r2, r1
 800f210:	d003      	beq.n	800f21a <__gethex+0x1c4>
 800f212:	4553      	cmp	r3, sl
 800f214:	dc46      	bgt.n	800f2a4 <__gethex+0x24e>
 800f216:	f04f 0a02 	mov.w	sl, #2
 800f21a:	4639      	mov	r1, r7
 800f21c:	4628      	mov	r0, r5
 800f21e:	f7ff fecb 	bl	800efb8 <rshift>
 800f222:	443c      	add	r4, r7
 800f224:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f228:	42a3      	cmp	r3, r4
 800f22a:	da52      	bge.n	800f2d2 <__gethex+0x27c>
 800f22c:	4629      	mov	r1, r5
 800f22e:	9802      	ldr	r0, [sp, #8]
 800f230:	f000 fa30 	bl	800f694 <_Bfree>
 800f234:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f236:	2300      	movs	r3, #0
 800f238:	6013      	str	r3, [r2, #0]
 800f23a:	27a3      	movs	r7, #163	; 0xa3
 800f23c:	e793      	b.n	800f166 <__gethex+0x110>
 800f23e:	3101      	adds	r1, #1
 800f240:	105b      	asrs	r3, r3, #1
 800f242:	e7b0      	b.n	800f1a6 <__gethex+0x150>
 800f244:	1e73      	subs	r3, r6, #1
 800f246:	9305      	str	r3, [sp, #20]
 800f248:	9a07      	ldr	r2, [sp, #28]
 800f24a:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800f24e:	4293      	cmp	r3, r2
 800f250:	d018      	beq.n	800f284 <__gethex+0x22e>
 800f252:	f1bb 0f20 	cmp.w	fp, #32
 800f256:	d107      	bne.n	800f268 <__gethex+0x212>
 800f258:	9b04      	ldr	r3, [sp, #16]
 800f25a:	f8c3 a000 	str.w	sl, [r3]
 800f25e:	3304      	adds	r3, #4
 800f260:	f04f 0a00 	mov.w	sl, #0
 800f264:	9304      	str	r3, [sp, #16]
 800f266:	46d3      	mov	fp, sl
 800f268:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800f26c:	f7ff fede 	bl	800f02c <__hexdig_fun>
 800f270:	f000 000f 	and.w	r0, r0, #15
 800f274:	fa00 f00b 	lsl.w	r0, r0, fp
 800f278:	ea4a 0a00 	orr.w	sl, sl, r0
 800f27c:	f10b 0b04 	add.w	fp, fp, #4
 800f280:	9b05      	ldr	r3, [sp, #20]
 800f282:	e00d      	b.n	800f2a0 <__gethex+0x24a>
 800f284:	9b05      	ldr	r3, [sp, #20]
 800f286:	9a08      	ldr	r2, [sp, #32]
 800f288:	4413      	add	r3, r2
 800f28a:	42bb      	cmp	r3, r7
 800f28c:	d3e1      	bcc.n	800f252 <__gethex+0x1fc>
 800f28e:	4618      	mov	r0, r3
 800f290:	9a01      	ldr	r2, [sp, #4]
 800f292:	9903      	ldr	r1, [sp, #12]
 800f294:	9309      	str	r3, [sp, #36]	; 0x24
 800f296:	f000 fe41 	bl	800ff1c <strncmp>
 800f29a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800f29c:	2800      	cmp	r0, #0
 800f29e:	d1d8      	bne.n	800f252 <__gethex+0x1fc>
 800f2a0:	461e      	mov	r6, r3
 800f2a2:	e791      	b.n	800f1c8 <__gethex+0x172>
 800f2a4:	1eb9      	subs	r1, r7, #2
 800f2a6:	4628      	mov	r0, r5
 800f2a8:	f000 fd9e 	bl	800fde8 <__any_on>
 800f2ac:	2800      	cmp	r0, #0
 800f2ae:	d0b2      	beq.n	800f216 <__gethex+0x1c0>
 800f2b0:	f04f 0a03 	mov.w	sl, #3
 800f2b4:	e7b1      	b.n	800f21a <__gethex+0x1c4>
 800f2b6:	da09      	bge.n	800f2cc <__gethex+0x276>
 800f2b8:	1bf7      	subs	r7, r6, r7
 800f2ba:	4629      	mov	r1, r5
 800f2bc:	463a      	mov	r2, r7
 800f2be:	9802      	ldr	r0, [sp, #8]
 800f2c0:	f000 fbb4 	bl	800fa2c <__lshift>
 800f2c4:	1be4      	subs	r4, r4, r7
 800f2c6:	4605      	mov	r5, r0
 800f2c8:	f100 0914 	add.w	r9, r0, #20
 800f2cc:	f04f 0a00 	mov.w	sl, #0
 800f2d0:	e7a8      	b.n	800f224 <__gethex+0x1ce>
 800f2d2:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800f2d6:	42a0      	cmp	r0, r4
 800f2d8:	dd6a      	ble.n	800f3b0 <__gethex+0x35a>
 800f2da:	1b04      	subs	r4, r0, r4
 800f2dc:	42a6      	cmp	r6, r4
 800f2de:	dc2e      	bgt.n	800f33e <__gethex+0x2e8>
 800f2e0:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f2e4:	2b02      	cmp	r3, #2
 800f2e6:	d022      	beq.n	800f32e <__gethex+0x2d8>
 800f2e8:	2b03      	cmp	r3, #3
 800f2ea:	d024      	beq.n	800f336 <__gethex+0x2e0>
 800f2ec:	2b01      	cmp	r3, #1
 800f2ee:	d115      	bne.n	800f31c <__gethex+0x2c6>
 800f2f0:	42a6      	cmp	r6, r4
 800f2f2:	d113      	bne.n	800f31c <__gethex+0x2c6>
 800f2f4:	2e01      	cmp	r6, #1
 800f2f6:	dc0b      	bgt.n	800f310 <__gethex+0x2ba>
 800f2f8:	9a06      	ldr	r2, [sp, #24]
 800f2fa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800f2fe:	6013      	str	r3, [r2, #0]
 800f300:	2301      	movs	r3, #1
 800f302:	612b      	str	r3, [r5, #16]
 800f304:	f8c9 3000 	str.w	r3, [r9]
 800f308:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f30a:	2762      	movs	r7, #98	; 0x62
 800f30c:	601d      	str	r5, [r3, #0]
 800f30e:	e72a      	b.n	800f166 <__gethex+0x110>
 800f310:	1e71      	subs	r1, r6, #1
 800f312:	4628      	mov	r0, r5
 800f314:	f000 fd68 	bl	800fde8 <__any_on>
 800f318:	2800      	cmp	r0, #0
 800f31a:	d1ed      	bne.n	800f2f8 <__gethex+0x2a2>
 800f31c:	4629      	mov	r1, r5
 800f31e:	9802      	ldr	r0, [sp, #8]
 800f320:	f000 f9b8 	bl	800f694 <_Bfree>
 800f324:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800f326:	2300      	movs	r3, #0
 800f328:	6013      	str	r3, [r2, #0]
 800f32a:	2750      	movs	r7, #80	; 0x50
 800f32c:	e71b      	b.n	800f166 <__gethex+0x110>
 800f32e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f330:	2b00      	cmp	r3, #0
 800f332:	d0e1      	beq.n	800f2f8 <__gethex+0x2a2>
 800f334:	e7f2      	b.n	800f31c <__gethex+0x2c6>
 800f336:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f338:	2b00      	cmp	r3, #0
 800f33a:	d1dd      	bne.n	800f2f8 <__gethex+0x2a2>
 800f33c:	e7ee      	b.n	800f31c <__gethex+0x2c6>
 800f33e:	1e67      	subs	r7, r4, #1
 800f340:	f1ba 0f00 	cmp.w	sl, #0
 800f344:	d131      	bne.n	800f3aa <__gethex+0x354>
 800f346:	b127      	cbz	r7, 800f352 <__gethex+0x2fc>
 800f348:	4639      	mov	r1, r7
 800f34a:	4628      	mov	r0, r5
 800f34c:	f000 fd4c 	bl	800fde8 <__any_on>
 800f350:	4682      	mov	sl, r0
 800f352:	117a      	asrs	r2, r7, #5
 800f354:	2301      	movs	r3, #1
 800f356:	f007 071f 	and.w	r7, r7, #31
 800f35a:	fa03 f707 	lsl.w	r7, r3, r7
 800f35e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 800f362:	4621      	mov	r1, r4
 800f364:	421f      	tst	r7, r3
 800f366:	4628      	mov	r0, r5
 800f368:	bf18      	it	ne
 800f36a:	f04a 0a02 	orrne.w	sl, sl, #2
 800f36e:	1b36      	subs	r6, r6, r4
 800f370:	f7ff fe22 	bl	800efb8 <rshift>
 800f374:	f8d8 4004 	ldr.w	r4, [r8, #4]
 800f378:	2702      	movs	r7, #2
 800f37a:	f1ba 0f00 	cmp.w	sl, #0
 800f37e:	d048      	beq.n	800f412 <__gethex+0x3bc>
 800f380:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800f384:	2b02      	cmp	r3, #2
 800f386:	d015      	beq.n	800f3b4 <__gethex+0x35e>
 800f388:	2b03      	cmp	r3, #3
 800f38a:	d017      	beq.n	800f3bc <__gethex+0x366>
 800f38c:	2b01      	cmp	r3, #1
 800f38e:	d109      	bne.n	800f3a4 <__gethex+0x34e>
 800f390:	f01a 0f02 	tst.w	sl, #2
 800f394:	d006      	beq.n	800f3a4 <__gethex+0x34e>
 800f396:	f8d9 3000 	ldr.w	r3, [r9]
 800f39a:	ea4a 0a03 	orr.w	sl, sl, r3
 800f39e:	f01a 0f01 	tst.w	sl, #1
 800f3a2:	d10e      	bne.n	800f3c2 <__gethex+0x36c>
 800f3a4:	f047 0710 	orr.w	r7, r7, #16
 800f3a8:	e033      	b.n	800f412 <__gethex+0x3bc>
 800f3aa:	f04f 0a01 	mov.w	sl, #1
 800f3ae:	e7d0      	b.n	800f352 <__gethex+0x2fc>
 800f3b0:	2701      	movs	r7, #1
 800f3b2:	e7e2      	b.n	800f37a <__gethex+0x324>
 800f3b4:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f3b6:	f1c3 0301 	rsb	r3, r3, #1
 800f3ba:	9315      	str	r3, [sp, #84]	; 0x54
 800f3bc:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800f3be:	2b00      	cmp	r3, #0
 800f3c0:	d0f0      	beq.n	800f3a4 <__gethex+0x34e>
 800f3c2:	f8d5 9010 	ldr.w	r9, [r5, #16]
 800f3c6:	f105 0314 	add.w	r3, r5, #20
 800f3ca:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 800f3ce:	eb03 010a 	add.w	r1, r3, sl
 800f3d2:	f04f 0c00 	mov.w	ip, #0
 800f3d6:	4618      	mov	r0, r3
 800f3d8:	f853 2b04 	ldr.w	r2, [r3], #4
 800f3dc:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 800f3e0:	d01c      	beq.n	800f41c <__gethex+0x3c6>
 800f3e2:	3201      	adds	r2, #1
 800f3e4:	6002      	str	r2, [r0, #0]
 800f3e6:	2f02      	cmp	r7, #2
 800f3e8:	f105 0314 	add.w	r3, r5, #20
 800f3ec:	d138      	bne.n	800f460 <__gethex+0x40a>
 800f3ee:	f8d8 2000 	ldr.w	r2, [r8]
 800f3f2:	3a01      	subs	r2, #1
 800f3f4:	42b2      	cmp	r2, r6
 800f3f6:	d10a      	bne.n	800f40e <__gethex+0x3b8>
 800f3f8:	1171      	asrs	r1, r6, #5
 800f3fa:	2201      	movs	r2, #1
 800f3fc:	f006 061f 	and.w	r6, r6, #31
 800f400:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800f404:	fa02 f606 	lsl.w	r6, r2, r6
 800f408:	421e      	tst	r6, r3
 800f40a:	bf18      	it	ne
 800f40c:	4617      	movne	r7, r2
 800f40e:	f047 0720 	orr.w	r7, r7, #32
 800f412:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800f414:	601d      	str	r5, [r3, #0]
 800f416:	9b06      	ldr	r3, [sp, #24]
 800f418:	601c      	str	r4, [r3, #0]
 800f41a:	e6a4      	b.n	800f166 <__gethex+0x110>
 800f41c:	4299      	cmp	r1, r3
 800f41e:	f843 cc04 	str.w	ip, [r3, #-4]
 800f422:	d8d8      	bhi.n	800f3d6 <__gethex+0x380>
 800f424:	68ab      	ldr	r3, [r5, #8]
 800f426:	4599      	cmp	r9, r3
 800f428:	db12      	blt.n	800f450 <__gethex+0x3fa>
 800f42a:	6869      	ldr	r1, [r5, #4]
 800f42c:	9802      	ldr	r0, [sp, #8]
 800f42e:	3101      	adds	r1, #1
 800f430:	f000 f8fc 	bl	800f62c <_Balloc>
 800f434:	692a      	ldr	r2, [r5, #16]
 800f436:	3202      	adds	r2, #2
 800f438:	f105 010c 	add.w	r1, r5, #12
 800f43c:	4683      	mov	fp, r0
 800f43e:	0092      	lsls	r2, r2, #2
 800f440:	300c      	adds	r0, #12
 800f442:	f7fe ff81 	bl	800e348 <memcpy>
 800f446:	4629      	mov	r1, r5
 800f448:	9802      	ldr	r0, [sp, #8]
 800f44a:	f000 f923 	bl	800f694 <_Bfree>
 800f44e:	465d      	mov	r5, fp
 800f450:	692b      	ldr	r3, [r5, #16]
 800f452:	1c5a      	adds	r2, r3, #1
 800f454:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 800f458:	612a      	str	r2, [r5, #16]
 800f45a:	2201      	movs	r2, #1
 800f45c:	615a      	str	r2, [r3, #20]
 800f45e:	e7c2      	b.n	800f3e6 <__gethex+0x390>
 800f460:	692a      	ldr	r2, [r5, #16]
 800f462:	454a      	cmp	r2, r9
 800f464:	dd0b      	ble.n	800f47e <__gethex+0x428>
 800f466:	2101      	movs	r1, #1
 800f468:	4628      	mov	r0, r5
 800f46a:	f7ff fda5 	bl	800efb8 <rshift>
 800f46e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f472:	3401      	adds	r4, #1
 800f474:	42a3      	cmp	r3, r4
 800f476:	f6ff aed9 	blt.w	800f22c <__gethex+0x1d6>
 800f47a:	2701      	movs	r7, #1
 800f47c:	e7c7      	b.n	800f40e <__gethex+0x3b8>
 800f47e:	f016 061f 	ands.w	r6, r6, #31
 800f482:	d0fa      	beq.n	800f47a <__gethex+0x424>
 800f484:	449a      	add	sl, r3
 800f486:	f1c6 0620 	rsb	r6, r6, #32
 800f48a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 800f48e:	f000 f991 	bl	800f7b4 <__hi0bits>
 800f492:	42b0      	cmp	r0, r6
 800f494:	dbe7      	blt.n	800f466 <__gethex+0x410>
 800f496:	e7f0      	b.n	800f47a <__gethex+0x424>

0800f498 <L_shift>:
 800f498:	f1c2 0208 	rsb	r2, r2, #8
 800f49c:	0092      	lsls	r2, r2, #2
 800f49e:	b570      	push	{r4, r5, r6, lr}
 800f4a0:	f1c2 0620 	rsb	r6, r2, #32
 800f4a4:	6843      	ldr	r3, [r0, #4]
 800f4a6:	6804      	ldr	r4, [r0, #0]
 800f4a8:	fa03 f506 	lsl.w	r5, r3, r6
 800f4ac:	432c      	orrs	r4, r5
 800f4ae:	40d3      	lsrs	r3, r2
 800f4b0:	6004      	str	r4, [r0, #0]
 800f4b2:	f840 3f04 	str.w	r3, [r0, #4]!
 800f4b6:	4288      	cmp	r0, r1
 800f4b8:	d3f4      	bcc.n	800f4a4 <L_shift+0xc>
 800f4ba:	bd70      	pop	{r4, r5, r6, pc}

0800f4bc <__match>:
 800f4bc:	b530      	push	{r4, r5, lr}
 800f4be:	6803      	ldr	r3, [r0, #0]
 800f4c0:	3301      	adds	r3, #1
 800f4c2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f4c6:	b914      	cbnz	r4, 800f4ce <__match+0x12>
 800f4c8:	6003      	str	r3, [r0, #0]
 800f4ca:	2001      	movs	r0, #1
 800f4cc:	bd30      	pop	{r4, r5, pc}
 800f4ce:	f813 2b01 	ldrb.w	r2, [r3], #1
 800f4d2:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800f4d6:	2d19      	cmp	r5, #25
 800f4d8:	bf98      	it	ls
 800f4da:	3220      	addls	r2, #32
 800f4dc:	42a2      	cmp	r2, r4
 800f4de:	d0f0      	beq.n	800f4c2 <__match+0x6>
 800f4e0:	2000      	movs	r0, #0
 800f4e2:	e7f3      	b.n	800f4cc <__match+0x10>

0800f4e4 <__hexnan>:
 800f4e4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f4e8:	680b      	ldr	r3, [r1, #0]
 800f4ea:	6801      	ldr	r1, [r0, #0]
 800f4ec:	115f      	asrs	r7, r3, #5
 800f4ee:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 800f4f2:	f013 031f 	ands.w	r3, r3, #31
 800f4f6:	b087      	sub	sp, #28
 800f4f8:	bf18      	it	ne
 800f4fa:	3704      	addne	r7, #4
 800f4fc:	2500      	movs	r5, #0
 800f4fe:	1f3e      	subs	r6, r7, #4
 800f500:	4682      	mov	sl, r0
 800f502:	4690      	mov	r8, r2
 800f504:	9301      	str	r3, [sp, #4]
 800f506:	f847 5c04 	str.w	r5, [r7, #-4]
 800f50a:	46b1      	mov	r9, r6
 800f50c:	4634      	mov	r4, r6
 800f50e:	9502      	str	r5, [sp, #8]
 800f510:	46ab      	mov	fp, r5
 800f512:	784a      	ldrb	r2, [r1, #1]
 800f514:	1c4b      	adds	r3, r1, #1
 800f516:	9303      	str	r3, [sp, #12]
 800f518:	b342      	cbz	r2, 800f56c <__hexnan+0x88>
 800f51a:	4610      	mov	r0, r2
 800f51c:	9105      	str	r1, [sp, #20]
 800f51e:	9204      	str	r2, [sp, #16]
 800f520:	f7ff fd84 	bl	800f02c <__hexdig_fun>
 800f524:	2800      	cmp	r0, #0
 800f526:	d143      	bne.n	800f5b0 <__hexnan+0xcc>
 800f528:	9a04      	ldr	r2, [sp, #16]
 800f52a:	9905      	ldr	r1, [sp, #20]
 800f52c:	2a20      	cmp	r2, #32
 800f52e:	d818      	bhi.n	800f562 <__hexnan+0x7e>
 800f530:	9b02      	ldr	r3, [sp, #8]
 800f532:	459b      	cmp	fp, r3
 800f534:	dd13      	ble.n	800f55e <__hexnan+0x7a>
 800f536:	454c      	cmp	r4, r9
 800f538:	d206      	bcs.n	800f548 <__hexnan+0x64>
 800f53a:	2d07      	cmp	r5, #7
 800f53c:	dc04      	bgt.n	800f548 <__hexnan+0x64>
 800f53e:	462a      	mov	r2, r5
 800f540:	4649      	mov	r1, r9
 800f542:	4620      	mov	r0, r4
 800f544:	f7ff ffa8 	bl	800f498 <L_shift>
 800f548:	4544      	cmp	r4, r8
 800f54a:	d944      	bls.n	800f5d6 <__hexnan+0xf2>
 800f54c:	2300      	movs	r3, #0
 800f54e:	f1a4 0904 	sub.w	r9, r4, #4
 800f552:	f844 3c04 	str.w	r3, [r4, #-4]
 800f556:	f8cd b008 	str.w	fp, [sp, #8]
 800f55a:	464c      	mov	r4, r9
 800f55c:	461d      	mov	r5, r3
 800f55e:	9903      	ldr	r1, [sp, #12]
 800f560:	e7d7      	b.n	800f512 <__hexnan+0x2e>
 800f562:	2a29      	cmp	r2, #41	; 0x29
 800f564:	d14a      	bne.n	800f5fc <__hexnan+0x118>
 800f566:	3102      	adds	r1, #2
 800f568:	f8ca 1000 	str.w	r1, [sl]
 800f56c:	f1bb 0f00 	cmp.w	fp, #0
 800f570:	d044      	beq.n	800f5fc <__hexnan+0x118>
 800f572:	454c      	cmp	r4, r9
 800f574:	d206      	bcs.n	800f584 <__hexnan+0xa0>
 800f576:	2d07      	cmp	r5, #7
 800f578:	dc04      	bgt.n	800f584 <__hexnan+0xa0>
 800f57a:	462a      	mov	r2, r5
 800f57c:	4649      	mov	r1, r9
 800f57e:	4620      	mov	r0, r4
 800f580:	f7ff ff8a 	bl	800f498 <L_shift>
 800f584:	4544      	cmp	r4, r8
 800f586:	d928      	bls.n	800f5da <__hexnan+0xf6>
 800f588:	4643      	mov	r3, r8
 800f58a:	f854 2b04 	ldr.w	r2, [r4], #4
 800f58e:	f843 2b04 	str.w	r2, [r3], #4
 800f592:	42a6      	cmp	r6, r4
 800f594:	d2f9      	bcs.n	800f58a <__hexnan+0xa6>
 800f596:	2200      	movs	r2, #0
 800f598:	f843 2b04 	str.w	r2, [r3], #4
 800f59c:	429e      	cmp	r6, r3
 800f59e:	d2fb      	bcs.n	800f598 <__hexnan+0xb4>
 800f5a0:	6833      	ldr	r3, [r6, #0]
 800f5a2:	b91b      	cbnz	r3, 800f5ac <__hexnan+0xc8>
 800f5a4:	4546      	cmp	r6, r8
 800f5a6:	d127      	bne.n	800f5f8 <__hexnan+0x114>
 800f5a8:	2301      	movs	r3, #1
 800f5aa:	6033      	str	r3, [r6, #0]
 800f5ac:	2005      	movs	r0, #5
 800f5ae:	e026      	b.n	800f5fe <__hexnan+0x11a>
 800f5b0:	3501      	adds	r5, #1
 800f5b2:	2d08      	cmp	r5, #8
 800f5b4:	f10b 0b01 	add.w	fp, fp, #1
 800f5b8:	dd06      	ble.n	800f5c8 <__hexnan+0xe4>
 800f5ba:	4544      	cmp	r4, r8
 800f5bc:	d9cf      	bls.n	800f55e <__hexnan+0x7a>
 800f5be:	2300      	movs	r3, #0
 800f5c0:	f844 3c04 	str.w	r3, [r4, #-4]
 800f5c4:	2501      	movs	r5, #1
 800f5c6:	3c04      	subs	r4, #4
 800f5c8:	6822      	ldr	r2, [r4, #0]
 800f5ca:	f000 000f 	and.w	r0, r0, #15
 800f5ce:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800f5d2:	6020      	str	r0, [r4, #0]
 800f5d4:	e7c3      	b.n	800f55e <__hexnan+0x7a>
 800f5d6:	2508      	movs	r5, #8
 800f5d8:	e7c1      	b.n	800f55e <__hexnan+0x7a>
 800f5da:	9b01      	ldr	r3, [sp, #4]
 800f5dc:	2b00      	cmp	r3, #0
 800f5de:	d0df      	beq.n	800f5a0 <__hexnan+0xbc>
 800f5e0:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800f5e4:	f1c3 0320 	rsb	r3, r3, #32
 800f5e8:	fa22 f303 	lsr.w	r3, r2, r3
 800f5ec:	f857 2c04 	ldr.w	r2, [r7, #-4]
 800f5f0:	401a      	ands	r2, r3
 800f5f2:	f847 2c04 	str.w	r2, [r7, #-4]
 800f5f6:	e7d3      	b.n	800f5a0 <__hexnan+0xbc>
 800f5f8:	3e04      	subs	r6, #4
 800f5fa:	e7d1      	b.n	800f5a0 <__hexnan+0xbc>
 800f5fc:	2004      	movs	r0, #4
 800f5fe:	b007      	add	sp, #28
 800f600:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800f604 <__localeconv_l>:
 800f604:	30f0      	adds	r0, #240	; 0xf0
 800f606:	4770      	bx	lr

0800f608 <__ascii_mbtowc>:
 800f608:	b082      	sub	sp, #8
 800f60a:	b901      	cbnz	r1, 800f60e <__ascii_mbtowc+0x6>
 800f60c:	a901      	add	r1, sp, #4
 800f60e:	b142      	cbz	r2, 800f622 <__ascii_mbtowc+0x1a>
 800f610:	b14b      	cbz	r3, 800f626 <__ascii_mbtowc+0x1e>
 800f612:	7813      	ldrb	r3, [r2, #0]
 800f614:	600b      	str	r3, [r1, #0]
 800f616:	7812      	ldrb	r2, [r2, #0]
 800f618:	1c10      	adds	r0, r2, #0
 800f61a:	bf18      	it	ne
 800f61c:	2001      	movne	r0, #1
 800f61e:	b002      	add	sp, #8
 800f620:	4770      	bx	lr
 800f622:	4610      	mov	r0, r2
 800f624:	e7fb      	b.n	800f61e <__ascii_mbtowc+0x16>
 800f626:	f06f 0001 	mvn.w	r0, #1
 800f62a:	e7f8      	b.n	800f61e <__ascii_mbtowc+0x16>

0800f62c <_Balloc>:
 800f62c:	b570      	push	{r4, r5, r6, lr}
 800f62e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800f630:	4604      	mov	r4, r0
 800f632:	460e      	mov	r6, r1
 800f634:	b93d      	cbnz	r5, 800f646 <_Balloc+0x1a>
 800f636:	2010      	movs	r0, #16
 800f638:	f000 fc90 	bl	800ff5c <malloc>
 800f63c:	6260      	str	r0, [r4, #36]	; 0x24
 800f63e:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800f642:	6005      	str	r5, [r0, #0]
 800f644:	60c5      	str	r5, [r0, #12]
 800f646:	6a65      	ldr	r5, [r4, #36]	; 0x24
 800f648:	68eb      	ldr	r3, [r5, #12]
 800f64a:	b183      	cbz	r3, 800f66e <_Balloc+0x42>
 800f64c:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f64e:	68db      	ldr	r3, [r3, #12]
 800f650:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 800f654:	b9b8      	cbnz	r0, 800f686 <_Balloc+0x5a>
 800f656:	2101      	movs	r1, #1
 800f658:	fa01 f506 	lsl.w	r5, r1, r6
 800f65c:	1d6a      	adds	r2, r5, #5
 800f65e:	0092      	lsls	r2, r2, #2
 800f660:	4620      	mov	r0, r4
 800f662:	f000 fbe2 	bl	800fe2a <_calloc_r>
 800f666:	b160      	cbz	r0, 800f682 <_Balloc+0x56>
 800f668:	e9c0 6501 	strd	r6, r5, [r0, #4]
 800f66c:	e00e      	b.n	800f68c <_Balloc+0x60>
 800f66e:	2221      	movs	r2, #33	; 0x21
 800f670:	2104      	movs	r1, #4
 800f672:	4620      	mov	r0, r4
 800f674:	f000 fbd9 	bl	800fe2a <_calloc_r>
 800f678:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800f67a:	60e8      	str	r0, [r5, #12]
 800f67c:	68db      	ldr	r3, [r3, #12]
 800f67e:	2b00      	cmp	r3, #0
 800f680:	d1e4      	bne.n	800f64c <_Balloc+0x20>
 800f682:	2000      	movs	r0, #0
 800f684:	bd70      	pop	{r4, r5, r6, pc}
 800f686:	6802      	ldr	r2, [r0, #0]
 800f688:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 800f68c:	2300      	movs	r3, #0
 800f68e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800f692:	e7f7      	b.n	800f684 <_Balloc+0x58>

0800f694 <_Bfree>:
 800f694:	b570      	push	{r4, r5, r6, lr}
 800f696:	6a44      	ldr	r4, [r0, #36]	; 0x24
 800f698:	4606      	mov	r6, r0
 800f69a:	460d      	mov	r5, r1
 800f69c:	b93c      	cbnz	r4, 800f6ae <_Bfree+0x1a>
 800f69e:	2010      	movs	r0, #16
 800f6a0:	f000 fc5c 	bl	800ff5c <malloc>
 800f6a4:	6270      	str	r0, [r6, #36]	; 0x24
 800f6a6:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f6aa:	6004      	str	r4, [r0, #0]
 800f6ac:	60c4      	str	r4, [r0, #12]
 800f6ae:	b13d      	cbz	r5, 800f6c0 <_Bfree+0x2c>
 800f6b0:	6a73      	ldr	r3, [r6, #36]	; 0x24
 800f6b2:	686a      	ldr	r2, [r5, #4]
 800f6b4:	68db      	ldr	r3, [r3, #12]
 800f6b6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800f6ba:	6029      	str	r1, [r5, #0]
 800f6bc:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 800f6c0:	bd70      	pop	{r4, r5, r6, pc}

0800f6c2 <__multadd>:
 800f6c2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f6c6:	690d      	ldr	r5, [r1, #16]
 800f6c8:	461f      	mov	r7, r3
 800f6ca:	4606      	mov	r6, r0
 800f6cc:	460c      	mov	r4, r1
 800f6ce:	f101 0c14 	add.w	ip, r1, #20
 800f6d2:	2300      	movs	r3, #0
 800f6d4:	f8dc 0000 	ldr.w	r0, [ip]
 800f6d8:	b281      	uxth	r1, r0
 800f6da:	fb02 7101 	mla	r1, r2, r1, r7
 800f6de:	0c0f      	lsrs	r7, r1, #16
 800f6e0:	0c00      	lsrs	r0, r0, #16
 800f6e2:	fb02 7000 	mla	r0, r2, r0, r7
 800f6e6:	b289      	uxth	r1, r1
 800f6e8:	3301      	adds	r3, #1
 800f6ea:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 800f6ee:	429d      	cmp	r5, r3
 800f6f0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 800f6f4:	f84c 1b04 	str.w	r1, [ip], #4
 800f6f8:	dcec      	bgt.n	800f6d4 <__multadd+0x12>
 800f6fa:	b1d7      	cbz	r7, 800f732 <__multadd+0x70>
 800f6fc:	68a3      	ldr	r3, [r4, #8]
 800f6fe:	42ab      	cmp	r3, r5
 800f700:	dc12      	bgt.n	800f728 <__multadd+0x66>
 800f702:	6861      	ldr	r1, [r4, #4]
 800f704:	4630      	mov	r0, r6
 800f706:	3101      	adds	r1, #1
 800f708:	f7ff ff90 	bl	800f62c <_Balloc>
 800f70c:	6922      	ldr	r2, [r4, #16]
 800f70e:	3202      	adds	r2, #2
 800f710:	f104 010c 	add.w	r1, r4, #12
 800f714:	4680      	mov	r8, r0
 800f716:	0092      	lsls	r2, r2, #2
 800f718:	300c      	adds	r0, #12
 800f71a:	f7fe fe15 	bl	800e348 <memcpy>
 800f71e:	4621      	mov	r1, r4
 800f720:	4630      	mov	r0, r6
 800f722:	f7ff ffb7 	bl	800f694 <_Bfree>
 800f726:	4644      	mov	r4, r8
 800f728:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800f72c:	3501      	adds	r5, #1
 800f72e:	615f      	str	r7, [r3, #20]
 800f730:	6125      	str	r5, [r4, #16]
 800f732:	4620      	mov	r0, r4
 800f734:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

0800f738 <__s2b>:
 800f738:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f73c:	460c      	mov	r4, r1
 800f73e:	4615      	mov	r5, r2
 800f740:	461f      	mov	r7, r3
 800f742:	2209      	movs	r2, #9
 800f744:	3308      	adds	r3, #8
 800f746:	4606      	mov	r6, r0
 800f748:	fb93 f3f2 	sdiv	r3, r3, r2
 800f74c:	2100      	movs	r1, #0
 800f74e:	2201      	movs	r2, #1
 800f750:	429a      	cmp	r2, r3
 800f752:	db20      	blt.n	800f796 <__s2b+0x5e>
 800f754:	4630      	mov	r0, r6
 800f756:	f7ff ff69 	bl	800f62c <_Balloc>
 800f75a:	9b08      	ldr	r3, [sp, #32]
 800f75c:	6143      	str	r3, [r0, #20]
 800f75e:	2d09      	cmp	r5, #9
 800f760:	f04f 0301 	mov.w	r3, #1
 800f764:	6103      	str	r3, [r0, #16]
 800f766:	dd19      	ble.n	800f79c <__s2b+0x64>
 800f768:	f104 0809 	add.w	r8, r4, #9
 800f76c:	46c1      	mov	r9, r8
 800f76e:	442c      	add	r4, r5
 800f770:	f819 3b01 	ldrb.w	r3, [r9], #1
 800f774:	4601      	mov	r1, r0
 800f776:	3b30      	subs	r3, #48	; 0x30
 800f778:	220a      	movs	r2, #10
 800f77a:	4630      	mov	r0, r6
 800f77c:	f7ff ffa1 	bl	800f6c2 <__multadd>
 800f780:	45a1      	cmp	r9, r4
 800f782:	d1f5      	bne.n	800f770 <__s2b+0x38>
 800f784:	eb08 0405 	add.w	r4, r8, r5
 800f788:	3c08      	subs	r4, #8
 800f78a:	1b2d      	subs	r5, r5, r4
 800f78c:	1963      	adds	r3, r4, r5
 800f78e:	42bb      	cmp	r3, r7
 800f790:	db07      	blt.n	800f7a2 <__s2b+0x6a>
 800f792:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f796:	0052      	lsls	r2, r2, #1
 800f798:	3101      	adds	r1, #1
 800f79a:	e7d9      	b.n	800f750 <__s2b+0x18>
 800f79c:	340a      	adds	r4, #10
 800f79e:	2509      	movs	r5, #9
 800f7a0:	e7f3      	b.n	800f78a <__s2b+0x52>
 800f7a2:	f814 3b01 	ldrb.w	r3, [r4], #1
 800f7a6:	4601      	mov	r1, r0
 800f7a8:	3b30      	subs	r3, #48	; 0x30
 800f7aa:	220a      	movs	r2, #10
 800f7ac:	4630      	mov	r0, r6
 800f7ae:	f7ff ff88 	bl	800f6c2 <__multadd>
 800f7b2:	e7eb      	b.n	800f78c <__s2b+0x54>

0800f7b4 <__hi0bits>:
 800f7b4:	0c02      	lsrs	r2, r0, #16
 800f7b6:	0412      	lsls	r2, r2, #16
 800f7b8:	4603      	mov	r3, r0
 800f7ba:	b9b2      	cbnz	r2, 800f7ea <__hi0bits+0x36>
 800f7bc:	0403      	lsls	r3, r0, #16
 800f7be:	2010      	movs	r0, #16
 800f7c0:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 800f7c4:	bf04      	itt	eq
 800f7c6:	021b      	lsleq	r3, r3, #8
 800f7c8:	3008      	addeq	r0, #8
 800f7ca:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800f7ce:	bf04      	itt	eq
 800f7d0:	011b      	lsleq	r3, r3, #4
 800f7d2:	3004      	addeq	r0, #4
 800f7d4:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 800f7d8:	bf04      	itt	eq
 800f7da:	009b      	lsleq	r3, r3, #2
 800f7dc:	3002      	addeq	r0, #2
 800f7de:	2b00      	cmp	r3, #0
 800f7e0:	db06      	blt.n	800f7f0 <__hi0bits+0x3c>
 800f7e2:	005b      	lsls	r3, r3, #1
 800f7e4:	d503      	bpl.n	800f7ee <__hi0bits+0x3a>
 800f7e6:	3001      	adds	r0, #1
 800f7e8:	4770      	bx	lr
 800f7ea:	2000      	movs	r0, #0
 800f7ec:	e7e8      	b.n	800f7c0 <__hi0bits+0xc>
 800f7ee:	2020      	movs	r0, #32
 800f7f0:	4770      	bx	lr

0800f7f2 <__lo0bits>:
 800f7f2:	6803      	ldr	r3, [r0, #0]
 800f7f4:	f013 0207 	ands.w	r2, r3, #7
 800f7f8:	4601      	mov	r1, r0
 800f7fa:	d00b      	beq.n	800f814 <__lo0bits+0x22>
 800f7fc:	07da      	lsls	r2, r3, #31
 800f7fe:	d423      	bmi.n	800f848 <__lo0bits+0x56>
 800f800:	0798      	lsls	r0, r3, #30
 800f802:	bf49      	itett	mi
 800f804:	085b      	lsrmi	r3, r3, #1
 800f806:	089b      	lsrpl	r3, r3, #2
 800f808:	2001      	movmi	r0, #1
 800f80a:	600b      	strmi	r3, [r1, #0]
 800f80c:	bf5c      	itt	pl
 800f80e:	600b      	strpl	r3, [r1, #0]
 800f810:	2002      	movpl	r0, #2
 800f812:	4770      	bx	lr
 800f814:	b298      	uxth	r0, r3
 800f816:	b9a8      	cbnz	r0, 800f844 <__lo0bits+0x52>
 800f818:	0c1b      	lsrs	r3, r3, #16
 800f81a:	2010      	movs	r0, #16
 800f81c:	f013 0fff 	tst.w	r3, #255	; 0xff
 800f820:	bf04      	itt	eq
 800f822:	0a1b      	lsreq	r3, r3, #8
 800f824:	3008      	addeq	r0, #8
 800f826:	071a      	lsls	r2, r3, #28
 800f828:	bf04      	itt	eq
 800f82a:	091b      	lsreq	r3, r3, #4
 800f82c:	3004      	addeq	r0, #4
 800f82e:	079a      	lsls	r2, r3, #30
 800f830:	bf04      	itt	eq
 800f832:	089b      	lsreq	r3, r3, #2
 800f834:	3002      	addeq	r0, #2
 800f836:	07da      	lsls	r2, r3, #31
 800f838:	d402      	bmi.n	800f840 <__lo0bits+0x4e>
 800f83a:	085b      	lsrs	r3, r3, #1
 800f83c:	d006      	beq.n	800f84c <__lo0bits+0x5a>
 800f83e:	3001      	adds	r0, #1
 800f840:	600b      	str	r3, [r1, #0]
 800f842:	4770      	bx	lr
 800f844:	4610      	mov	r0, r2
 800f846:	e7e9      	b.n	800f81c <__lo0bits+0x2a>
 800f848:	2000      	movs	r0, #0
 800f84a:	4770      	bx	lr
 800f84c:	2020      	movs	r0, #32
 800f84e:	4770      	bx	lr

0800f850 <__i2b>:
 800f850:	b510      	push	{r4, lr}
 800f852:	460c      	mov	r4, r1
 800f854:	2101      	movs	r1, #1
 800f856:	f7ff fee9 	bl	800f62c <_Balloc>
 800f85a:	2201      	movs	r2, #1
 800f85c:	6144      	str	r4, [r0, #20]
 800f85e:	6102      	str	r2, [r0, #16]
 800f860:	bd10      	pop	{r4, pc}

0800f862 <__multiply>:
 800f862:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f866:	4614      	mov	r4, r2
 800f868:	690a      	ldr	r2, [r1, #16]
 800f86a:	6923      	ldr	r3, [r4, #16]
 800f86c:	429a      	cmp	r2, r3
 800f86e:	bfb8      	it	lt
 800f870:	460b      	movlt	r3, r1
 800f872:	4688      	mov	r8, r1
 800f874:	bfbc      	itt	lt
 800f876:	46a0      	movlt	r8, r4
 800f878:	461c      	movlt	r4, r3
 800f87a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800f87e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 800f882:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800f886:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800f88a:	eb07 0609 	add.w	r6, r7, r9
 800f88e:	42b3      	cmp	r3, r6
 800f890:	bfb8      	it	lt
 800f892:	3101      	addlt	r1, #1
 800f894:	f7ff feca 	bl	800f62c <_Balloc>
 800f898:	f100 0514 	add.w	r5, r0, #20
 800f89c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 800f8a0:	462b      	mov	r3, r5
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	4573      	cmp	r3, lr
 800f8a6:	d316      	bcc.n	800f8d6 <__multiply+0x74>
 800f8a8:	f104 0214 	add.w	r2, r4, #20
 800f8ac:	f108 0114 	add.w	r1, r8, #20
 800f8b0:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 800f8b4:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 800f8b8:	9300      	str	r3, [sp, #0]
 800f8ba:	9b00      	ldr	r3, [sp, #0]
 800f8bc:	9201      	str	r2, [sp, #4]
 800f8be:	4293      	cmp	r3, r2
 800f8c0:	d80c      	bhi.n	800f8dc <__multiply+0x7a>
 800f8c2:	2e00      	cmp	r6, #0
 800f8c4:	dd03      	ble.n	800f8ce <__multiply+0x6c>
 800f8c6:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 800f8ca:	2b00      	cmp	r3, #0
 800f8cc:	d05d      	beq.n	800f98a <__multiply+0x128>
 800f8ce:	6106      	str	r6, [r0, #16]
 800f8d0:	b003      	add	sp, #12
 800f8d2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f8d6:	f843 2b04 	str.w	r2, [r3], #4
 800f8da:	e7e3      	b.n	800f8a4 <__multiply+0x42>
 800f8dc:	f8b2 b000 	ldrh.w	fp, [r2]
 800f8e0:	f1bb 0f00 	cmp.w	fp, #0
 800f8e4:	d023      	beq.n	800f92e <__multiply+0xcc>
 800f8e6:	4689      	mov	r9, r1
 800f8e8:	46ac      	mov	ip, r5
 800f8ea:	f04f 0800 	mov.w	r8, #0
 800f8ee:	f859 4b04 	ldr.w	r4, [r9], #4
 800f8f2:	f8dc a000 	ldr.w	sl, [ip]
 800f8f6:	b2a3      	uxth	r3, r4
 800f8f8:	fa1f fa8a 	uxth.w	sl, sl
 800f8fc:	fb0b a303 	mla	r3, fp, r3, sl
 800f900:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 800f904:	f8dc 4000 	ldr.w	r4, [ip]
 800f908:	4443      	add	r3, r8
 800f90a:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f90e:	fb0b 840a 	mla	r4, fp, sl, r8
 800f912:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 800f916:	46e2      	mov	sl, ip
 800f918:	b29b      	uxth	r3, r3
 800f91a:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f91e:	454f      	cmp	r7, r9
 800f920:	ea4f 4814 	mov.w	r8, r4, lsr #16
 800f924:	f84a 3b04 	str.w	r3, [sl], #4
 800f928:	d82b      	bhi.n	800f982 <__multiply+0x120>
 800f92a:	f8cc 8004 	str.w	r8, [ip, #4]
 800f92e:	9b01      	ldr	r3, [sp, #4]
 800f930:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 800f934:	3204      	adds	r2, #4
 800f936:	f1ba 0f00 	cmp.w	sl, #0
 800f93a:	d020      	beq.n	800f97e <__multiply+0x11c>
 800f93c:	682b      	ldr	r3, [r5, #0]
 800f93e:	4689      	mov	r9, r1
 800f940:	46a8      	mov	r8, r5
 800f942:	f04f 0b00 	mov.w	fp, #0
 800f946:	f8b9 c000 	ldrh.w	ip, [r9]
 800f94a:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 800f94e:	fb0a 440c 	mla	r4, sl, ip, r4
 800f952:	445c      	add	r4, fp
 800f954:	46c4      	mov	ip, r8
 800f956:	b29b      	uxth	r3, r3
 800f958:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800f95c:	f84c 3b04 	str.w	r3, [ip], #4
 800f960:	f859 3b04 	ldr.w	r3, [r9], #4
 800f964:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 800f968:	0c1b      	lsrs	r3, r3, #16
 800f96a:	fb0a b303 	mla	r3, sl, r3, fp
 800f96e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 800f972:	454f      	cmp	r7, r9
 800f974:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 800f978:	d805      	bhi.n	800f986 <__multiply+0x124>
 800f97a:	f8c8 3004 	str.w	r3, [r8, #4]
 800f97e:	3504      	adds	r5, #4
 800f980:	e79b      	b.n	800f8ba <__multiply+0x58>
 800f982:	46d4      	mov	ip, sl
 800f984:	e7b3      	b.n	800f8ee <__multiply+0x8c>
 800f986:	46e0      	mov	r8, ip
 800f988:	e7dd      	b.n	800f946 <__multiply+0xe4>
 800f98a:	3e01      	subs	r6, #1
 800f98c:	e799      	b.n	800f8c2 <__multiply+0x60>
	...

0800f990 <__pow5mult>:
 800f990:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f994:	4615      	mov	r5, r2
 800f996:	f012 0203 	ands.w	r2, r2, #3
 800f99a:	4606      	mov	r6, r0
 800f99c:	460f      	mov	r7, r1
 800f99e:	d007      	beq.n	800f9b0 <__pow5mult+0x20>
 800f9a0:	3a01      	subs	r2, #1
 800f9a2:	4c21      	ldr	r4, [pc, #132]	; (800fa28 <__pow5mult+0x98>)
 800f9a4:	2300      	movs	r3, #0
 800f9a6:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800f9aa:	f7ff fe8a 	bl	800f6c2 <__multadd>
 800f9ae:	4607      	mov	r7, r0
 800f9b0:	10ad      	asrs	r5, r5, #2
 800f9b2:	d035      	beq.n	800fa20 <__pow5mult+0x90>
 800f9b4:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800f9b6:	b93c      	cbnz	r4, 800f9c8 <__pow5mult+0x38>
 800f9b8:	2010      	movs	r0, #16
 800f9ba:	f000 facf 	bl	800ff5c <malloc>
 800f9be:	6270      	str	r0, [r6, #36]	; 0x24
 800f9c0:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800f9c4:	6004      	str	r4, [r0, #0]
 800f9c6:	60c4      	str	r4, [r0, #12]
 800f9c8:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800f9cc:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800f9d0:	b94c      	cbnz	r4, 800f9e6 <__pow5mult+0x56>
 800f9d2:	f240 2171 	movw	r1, #625	; 0x271
 800f9d6:	4630      	mov	r0, r6
 800f9d8:	f7ff ff3a 	bl	800f850 <__i2b>
 800f9dc:	2300      	movs	r3, #0
 800f9de:	f8c8 0008 	str.w	r0, [r8, #8]
 800f9e2:	4604      	mov	r4, r0
 800f9e4:	6003      	str	r3, [r0, #0]
 800f9e6:	f04f 0800 	mov.w	r8, #0
 800f9ea:	07eb      	lsls	r3, r5, #31
 800f9ec:	d50a      	bpl.n	800fa04 <__pow5mult+0x74>
 800f9ee:	4639      	mov	r1, r7
 800f9f0:	4622      	mov	r2, r4
 800f9f2:	4630      	mov	r0, r6
 800f9f4:	f7ff ff35 	bl	800f862 <__multiply>
 800f9f8:	4639      	mov	r1, r7
 800f9fa:	4681      	mov	r9, r0
 800f9fc:	4630      	mov	r0, r6
 800f9fe:	f7ff fe49 	bl	800f694 <_Bfree>
 800fa02:	464f      	mov	r7, r9
 800fa04:	106d      	asrs	r5, r5, #1
 800fa06:	d00b      	beq.n	800fa20 <__pow5mult+0x90>
 800fa08:	6820      	ldr	r0, [r4, #0]
 800fa0a:	b938      	cbnz	r0, 800fa1c <__pow5mult+0x8c>
 800fa0c:	4622      	mov	r2, r4
 800fa0e:	4621      	mov	r1, r4
 800fa10:	4630      	mov	r0, r6
 800fa12:	f7ff ff26 	bl	800f862 <__multiply>
 800fa16:	6020      	str	r0, [r4, #0]
 800fa18:	f8c0 8000 	str.w	r8, [r0]
 800fa1c:	4604      	mov	r4, r0
 800fa1e:	e7e4      	b.n	800f9ea <__pow5mult+0x5a>
 800fa20:	4638      	mov	r0, r7
 800fa22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800fa26:	bf00      	nop
 800fa28:	08044cf0 	.word	0x08044cf0

0800fa2c <__lshift>:
 800fa2c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fa30:	460c      	mov	r4, r1
 800fa32:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800fa36:	6923      	ldr	r3, [r4, #16]
 800fa38:	6849      	ldr	r1, [r1, #4]
 800fa3a:	eb0a 0903 	add.w	r9, sl, r3
 800fa3e:	68a3      	ldr	r3, [r4, #8]
 800fa40:	4607      	mov	r7, r0
 800fa42:	4616      	mov	r6, r2
 800fa44:	f109 0501 	add.w	r5, r9, #1
 800fa48:	42ab      	cmp	r3, r5
 800fa4a:	db32      	blt.n	800fab2 <__lshift+0x86>
 800fa4c:	4638      	mov	r0, r7
 800fa4e:	f7ff fded 	bl	800f62c <_Balloc>
 800fa52:	2300      	movs	r3, #0
 800fa54:	4680      	mov	r8, r0
 800fa56:	f100 0114 	add.w	r1, r0, #20
 800fa5a:	461a      	mov	r2, r3
 800fa5c:	4553      	cmp	r3, sl
 800fa5e:	db2b      	blt.n	800fab8 <__lshift+0x8c>
 800fa60:	6920      	ldr	r0, [r4, #16]
 800fa62:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800fa66:	f104 0314 	add.w	r3, r4, #20
 800fa6a:	f016 021f 	ands.w	r2, r6, #31
 800fa6e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800fa72:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800fa76:	d025      	beq.n	800fac4 <__lshift+0x98>
 800fa78:	f1c2 0e20 	rsb	lr, r2, #32
 800fa7c:	2000      	movs	r0, #0
 800fa7e:	681e      	ldr	r6, [r3, #0]
 800fa80:	468a      	mov	sl, r1
 800fa82:	4096      	lsls	r6, r2
 800fa84:	4330      	orrs	r0, r6
 800fa86:	f84a 0b04 	str.w	r0, [sl], #4
 800fa8a:	f853 0b04 	ldr.w	r0, [r3], #4
 800fa8e:	459c      	cmp	ip, r3
 800fa90:	fa20 f00e 	lsr.w	r0, r0, lr
 800fa94:	d814      	bhi.n	800fac0 <__lshift+0x94>
 800fa96:	6048      	str	r0, [r1, #4]
 800fa98:	b108      	cbz	r0, 800fa9e <__lshift+0x72>
 800fa9a:	f109 0502 	add.w	r5, r9, #2
 800fa9e:	3d01      	subs	r5, #1
 800faa0:	4638      	mov	r0, r7
 800faa2:	f8c8 5010 	str.w	r5, [r8, #16]
 800faa6:	4621      	mov	r1, r4
 800faa8:	f7ff fdf4 	bl	800f694 <_Bfree>
 800faac:	4640      	mov	r0, r8
 800faae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fab2:	3101      	adds	r1, #1
 800fab4:	005b      	lsls	r3, r3, #1
 800fab6:	e7c7      	b.n	800fa48 <__lshift+0x1c>
 800fab8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 800fabc:	3301      	adds	r3, #1
 800fabe:	e7cd      	b.n	800fa5c <__lshift+0x30>
 800fac0:	4651      	mov	r1, sl
 800fac2:	e7dc      	b.n	800fa7e <__lshift+0x52>
 800fac4:	3904      	subs	r1, #4
 800fac6:	f853 2b04 	ldr.w	r2, [r3], #4
 800faca:	f841 2f04 	str.w	r2, [r1, #4]!
 800face:	459c      	cmp	ip, r3
 800fad0:	d8f9      	bhi.n	800fac6 <__lshift+0x9a>
 800fad2:	e7e4      	b.n	800fa9e <__lshift+0x72>

0800fad4 <__mcmp>:
 800fad4:	6903      	ldr	r3, [r0, #16]
 800fad6:	690a      	ldr	r2, [r1, #16]
 800fad8:	1a9b      	subs	r3, r3, r2
 800fada:	b530      	push	{r4, r5, lr}
 800fadc:	d10c      	bne.n	800faf8 <__mcmp+0x24>
 800fade:	0092      	lsls	r2, r2, #2
 800fae0:	3014      	adds	r0, #20
 800fae2:	3114      	adds	r1, #20
 800fae4:	1884      	adds	r4, r0, r2
 800fae6:	4411      	add	r1, r2
 800fae8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 800faec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 800faf0:	4295      	cmp	r5, r2
 800faf2:	d003      	beq.n	800fafc <__mcmp+0x28>
 800faf4:	d305      	bcc.n	800fb02 <__mcmp+0x2e>
 800faf6:	2301      	movs	r3, #1
 800faf8:	4618      	mov	r0, r3
 800fafa:	bd30      	pop	{r4, r5, pc}
 800fafc:	42a0      	cmp	r0, r4
 800fafe:	d3f3      	bcc.n	800fae8 <__mcmp+0x14>
 800fb00:	e7fa      	b.n	800faf8 <__mcmp+0x24>
 800fb02:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800fb06:	e7f7      	b.n	800faf8 <__mcmp+0x24>

0800fb08 <__mdiff>:
 800fb08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800fb0c:	460d      	mov	r5, r1
 800fb0e:	4607      	mov	r7, r0
 800fb10:	4611      	mov	r1, r2
 800fb12:	4628      	mov	r0, r5
 800fb14:	4614      	mov	r4, r2
 800fb16:	f7ff ffdd 	bl	800fad4 <__mcmp>
 800fb1a:	1e06      	subs	r6, r0, #0
 800fb1c:	d108      	bne.n	800fb30 <__mdiff+0x28>
 800fb1e:	4631      	mov	r1, r6
 800fb20:	4638      	mov	r0, r7
 800fb22:	f7ff fd83 	bl	800f62c <_Balloc>
 800fb26:	2301      	movs	r3, #1
 800fb28:	e9c0 3604 	strd	r3, r6, [r0, #16]
 800fb2c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800fb30:	bfa4      	itt	ge
 800fb32:	4623      	movge	r3, r4
 800fb34:	462c      	movge	r4, r5
 800fb36:	4638      	mov	r0, r7
 800fb38:	6861      	ldr	r1, [r4, #4]
 800fb3a:	bfa6      	itte	ge
 800fb3c:	461d      	movge	r5, r3
 800fb3e:	2600      	movge	r6, #0
 800fb40:	2601      	movlt	r6, #1
 800fb42:	f7ff fd73 	bl	800f62c <_Balloc>
 800fb46:	692b      	ldr	r3, [r5, #16]
 800fb48:	60c6      	str	r6, [r0, #12]
 800fb4a:	6926      	ldr	r6, [r4, #16]
 800fb4c:	f105 0914 	add.w	r9, r5, #20
 800fb50:	f104 0214 	add.w	r2, r4, #20
 800fb54:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 800fb58:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 800fb5c:	f100 0514 	add.w	r5, r0, #20
 800fb60:	f04f 0e00 	mov.w	lr, #0
 800fb64:	f852 ab04 	ldr.w	sl, [r2], #4
 800fb68:	f859 4b04 	ldr.w	r4, [r9], #4
 800fb6c:	fa1e f18a 	uxtah	r1, lr, sl
 800fb70:	b2a3      	uxth	r3, r4
 800fb72:	1ac9      	subs	r1, r1, r3
 800fb74:	0c23      	lsrs	r3, r4, #16
 800fb76:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 800fb7a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 800fb7e:	b289      	uxth	r1, r1
 800fb80:	ea4f 4e23 	mov.w	lr, r3, asr #16
 800fb84:	45c8      	cmp	r8, r9
 800fb86:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 800fb8a:	4694      	mov	ip, r2
 800fb8c:	f845 3b04 	str.w	r3, [r5], #4
 800fb90:	d8e8      	bhi.n	800fb64 <__mdiff+0x5c>
 800fb92:	45bc      	cmp	ip, r7
 800fb94:	d304      	bcc.n	800fba0 <__mdiff+0x98>
 800fb96:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 800fb9a:	b183      	cbz	r3, 800fbbe <__mdiff+0xb6>
 800fb9c:	6106      	str	r6, [r0, #16]
 800fb9e:	e7c5      	b.n	800fb2c <__mdiff+0x24>
 800fba0:	f85c 1b04 	ldr.w	r1, [ip], #4
 800fba4:	fa1e f381 	uxtah	r3, lr, r1
 800fba8:	141a      	asrs	r2, r3, #16
 800fbaa:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800fbae:	b29b      	uxth	r3, r3
 800fbb0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800fbb4:	ea4f 4e22 	mov.w	lr, r2, asr #16
 800fbb8:	f845 3b04 	str.w	r3, [r5], #4
 800fbbc:	e7e9      	b.n	800fb92 <__mdiff+0x8a>
 800fbbe:	3e01      	subs	r6, #1
 800fbc0:	e7e9      	b.n	800fb96 <__mdiff+0x8e>
	...

0800fbc4 <__ulp>:
 800fbc4:	4b12      	ldr	r3, [pc, #72]	; (800fc10 <__ulp+0x4c>)
 800fbc6:	ee10 2a90 	vmov	r2, s1
 800fbca:	401a      	ands	r2, r3
 800fbcc:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 800fbd0:	2b00      	cmp	r3, #0
 800fbd2:	dd04      	ble.n	800fbde <__ulp+0x1a>
 800fbd4:	2000      	movs	r0, #0
 800fbd6:	4619      	mov	r1, r3
 800fbd8:	ec41 0b10 	vmov	d0, r0, r1
 800fbdc:	4770      	bx	lr
 800fbde:	425b      	negs	r3, r3
 800fbe0:	151b      	asrs	r3, r3, #20
 800fbe2:	2b13      	cmp	r3, #19
 800fbe4:	f04f 0000 	mov.w	r0, #0
 800fbe8:	f04f 0100 	mov.w	r1, #0
 800fbec:	dc04      	bgt.n	800fbf8 <__ulp+0x34>
 800fbee:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 800fbf2:	fa42 f103 	asr.w	r1, r2, r3
 800fbf6:	e7ef      	b.n	800fbd8 <__ulp+0x14>
 800fbf8:	3b14      	subs	r3, #20
 800fbfa:	2b1e      	cmp	r3, #30
 800fbfc:	f04f 0201 	mov.w	r2, #1
 800fc00:	bfda      	itte	le
 800fc02:	f1c3 031f 	rsble	r3, r3, #31
 800fc06:	fa02 f303 	lslle.w	r3, r2, r3
 800fc0a:	4613      	movgt	r3, r2
 800fc0c:	4618      	mov	r0, r3
 800fc0e:	e7e3      	b.n	800fbd8 <__ulp+0x14>
 800fc10:	7ff00000 	.word	0x7ff00000

0800fc14 <__b2d>:
 800fc14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800fc16:	6905      	ldr	r5, [r0, #16]
 800fc18:	f100 0714 	add.w	r7, r0, #20
 800fc1c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800fc20:	1f2e      	subs	r6, r5, #4
 800fc22:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800fc26:	4620      	mov	r0, r4
 800fc28:	f7ff fdc4 	bl	800f7b4 <__hi0bits>
 800fc2c:	f1c0 0320 	rsb	r3, r0, #32
 800fc30:	280a      	cmp	r0, #10
 800fc32:	600b      	str	r3, [r1, #0]
 800fc34:	f8df c074 	ldr.w	ip, [pc, #116]	; 800fcac <__b2d+0x98>
 800fc38:	dc14      	bgt.n	800fc64 <__b2d+0x50>
 800fc3a:	f1c0 0e0b 	rsb	lr, r0, #11
 800fc3e:	fa24 f10e 	lsr.w	r1, r4, lr
 800fc42:	42b7      	cmp	r7, r6
 800fc44:	ea41 030c 	orr.w	r3, r1, ip
 800fc48:	bf34      	ite	cc
 800fc4a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fc4e:	2100      	movcs	r1, #0
 800fc50:	3015      	adds	r0, #21
 800fc52:	fa04 f000 	lsl.w	r0, r4, r0
 800fc56:	fa21 f10e 	lsr.w	r1, r1, lr
 800fc5a:	ea40 0201 	orr.w	r2, r0, r1
 800fc5e:	ec43 2b10 	vmov	d0, r2, r3
 800fc62:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800fc64:	42b7      	cmp	r7, r6
 800fc66:	bf3a      	itte	cc
 800fc68:	f1a5 0608 	subcc.w	r6, r5, #8
 800fc6c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800fc70:	2100      	movcs	r1, #0
 800fc72:	380b      	subs	r0, #11
 800fc74:	d015      	beq.n	800fca2 <__b2d+0x8e>
 800fc76:	4084      	lsls	r4, r0
 800fc78:	f1c0 0520 	rsb	r5, r0, #32
 800fc7c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 800fc80:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 800fc84:	42be      	cmp	r6, r7
 800fc86:	fa21 fc05 	lsr.w	ip, r1, r5
 800fc8a:	ea44 030c 	orr.w	r3, r4, ip
 800fc8e:	bf8c      	ite	hi
 800fc90:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800fc94:	2400      	movls	r4, #0
 800fc96:	fa01 f000 	lsl.w	r0, r1, r0
 800fc9a:	40ec      	lsrs	r4, r5
 800fc9c:	ea40 0204 	orr.w	r2, r0, r4
 800fca0:	e7dd      	b.n	800fc5e <__b2d+0x4a>
 800fca2:	ea44 030c 	orr.w	r3, r4, ip
 800fca6:	460a      	mov	r2, r1
 800fca8:	e7d9      	b.n	800fc5e <__b2d+0x4a>
 800fcaa:	bf00      	nop
 800fcac:	3ff00000 	.word	0x3ff00000

0800fcb0 <__d2b>:
 800fcb0:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800fcb4:	460e      	mov	r6, r1
 800fcb6:	2101      	movs	r1, #1
 800fcb8:	ec59 8b10 	vmov	r8, r9, d0
 800fcbc:	4615      	mov	r5, r2
 800fcbe:	f7ff fcb5 	bl	800f62c <_Balloc>
 800fcc2:	f3c9 540a 	ubfx	r4, r9, #20, #11
 800fcc6:	4607      	mov	r7, r0
 800fcc8:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800fccc:	bb34      	cbnz	r4, 800fd1c <__d2b+0x6c>
 800fcce:	9301      	str	r3, [sp, #4]
 800fcd0:	f1b8 0300 	subs.w	r3, r8, #0
 800fcd4:	d027      	beq.n	800fd26 <__d2b+0x76>
 800fcd6:	a802      	add	r0, sp, #8
 800fcd8:	f840 3d08 	str.w	r3, [r0, #-8]!
 800fcdc:	f7ff fd89 	bl	800f7f2 <__lo0bits>
 800fce0:	9900      	ldr	r1, [sp, #0]
 800fce2:	b1f0      	cbz	r0, 800fd22 <__d2b+0x72>
 800fce4:	9a01      	ldr	r2, [sp, #4]
 800fce6:	f1c0 0320 	rsb	r3, r0, #32
 800fcea:	fa02 f303 	lsl.w	r3, r2, r3
 800fcee:	430b      	orrs	r3, r1
 800fcf0:	40c2      	lsrs	r2, r0
 800fcf2:	617b      	str	r3, [r7, #20]
 800fcf4:	9201      	str	r2, [sp, #4]
 800fcf6:	9b01      	ldr	r3, [sp, #4]
 800fcf8:	61bb      	str	r3, [r7, #24]
 800fcfa:	2b00      	cmp	r3, #0
 800fcfc:	bf14      	ite	ne
 800fcfe:	2102      	movne	r1, #2
 800fd00:	2101      	moveq	r1, #1
 800fd02:	6139      	str	r1, [r7, #16]
 800fd04:	b1c4      	cbz	r4, 800fd38 <__d2b+0x88>
 800fd06:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 800fd0a:	4404      	add	r4, r0
 800fd0c:	6034      	str	r4, [r6, #0]
 800fd0e:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800fd12:	6028      	str	r0, [r5, #0]
 800fd14:	4638      	mov	r0, r7
 800fd16:	b003      	add	sp, #12
 800fd18:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800fd1c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800fd20:	e7d5      	b.n	800fcce <__d2b+0x1e>
 800fd22:	6179      	str	r1, [r7, #20]
 800fd24:	e7e7      	b.n	800fcf6 <__d2b+0x46>
 800fd26:	a801      	add	r0, sp, #4
 800fd28:	f7ff fd63 	bl	800f7f2 <__lo0bits>
 800fd2c:	9b01      	ldr	r3, [sp, #4]
 800fd2e:	617b      	str	r3, [r7, #20]
 800fd30:	2101      	movs	r1, #1
 800fd32:	6139      	str	r1, [r7, #16]
 800fd34:	3020      	adds	r0, #32
 800fd36:	e7e5      	b.n	800fd04 <__d2b+0x54>
 800fd38:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 800fd3c:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800fd40:	6030      	str	r0, [r6, #0]
 800fd42:	6918      	ldr	r0, [r3, #16]
 800fd44:	f7ff fd36 	bl	800f7b4 <__hi0bits>
 800fd48:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 800fd4c:	e7e1      	b.n	800fd12 <__d2b+0x62>

0800fd4e <__ratio>:
 800fd4e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800fd52:	4688      	mov	r8, r1
 800fd54:	4669      	mov	r1, sp
 800fd56:	4681      	mov	r9, r0
 800fd58:	f7ff ff5c 	bl	800fc14 <__b2d>
 800fd5c:	a901      	add	r1, sp, #4
 800fd5e:	4640      	mov	r0, r8
 800fd60:	ec57 6b10 	vmov	r6, r7, d0
 800fd64:	f7ff ff56 	bl	800fc14 <__b2d>
 800fd68:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800fd6c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800fd70:	eba3 0c02 	sub.w	ip, r3, r2
 800fd74:	e9dd 3200 	ldrd	r3, r2, [sp]
 800fd78:	1a9b      	subs	r3, r3, r2
 800fd7a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800fd7e:	ec5b ab10 	vmov	sl, fp, d0
 800fd82:	2b00      	cmp	r3, #0
 800fd84:	bfce      	itee	gt
 800fd86:	463a      	movgt	r2, r7
 800fd88:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800fd8c:	465a      	movle	r2, fp
 800fd8e:	4659      	mov	r1, fp
 800fd90:	463d      	mov	r5, r7
 800fd92:	bfd4      	ite	le
 800fd94:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 800fd98:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 800fd9c:	4630      	mov	r0, r6
 800fd9e:	ee10 2a10 	vmov	r2, s0
 800fda2:	460b      	mov	r3, r1
 800fda4:	4629      	mov	r1, r5
 800fda6:	f7f0 fd21 	bl	80007ec <__aeabi_ddiv>
 800fdaa:	ec41 0b10 	vmov	d0, r0, r1
 800fdae:	b003      	add	sp, #12
 800fdb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800fdb4 <__copybits>:
 800fdb4:	3901      	subs	r1, #1
 800fdb6:	b510      	push	{r4, lr}
 800fdb8:	1149      	asrs	r1, r1, #5
 800fdba:	6914      	ldr	r4, [r2, #16]
 800fdbc:	3101      	adds	r1, #1
 800fdbe:	f102 0314 	add.w	r3, r2, #20
 800fdc2:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800fdc6:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800fdca:	42a3      	cmp	r3, r4
 800fdcc:	4602      	mov	r2, r0
 800fdce:	d303      	bcc.n	800fdd8 <__copybits+0x24>
 800fdd0:	2300      	movs	r3, #0
 800fdd2:	428a      	cmp	r2, r1
 800fdd4:	d305      	bcc.n	800fde2 <__copybits+0x2e>
 800fdd6:	bd10      	pop	{r4, pc}
 800fdd8:	f853 2b04 	ldr.w	r2, [r3], #4
 800fddc:	f840 2b04 	str.w	r2, [r0], #4
 800fde0:	e7f3      	b.n	800fdca <__copybits+0x16>
 800fde2:	f842 3b04 	str.w	r3, [r2], #4
 800fde6:	e7f4      	b.n	800fdd2 <__copybits+0x1e>

0800fde8 <__any_on>:
 800fde8:	f100 0214 	add.w	r2, r0, #20
 800fdec:	6900      	ldr	r0, [r0, #16]
 800fdee:	114b      	asrs	r3, r1, #5
 800fdf0:	4298      	cmp	r0, r3
 800fdf2:	b510      	push	{r4, lr}
 800fdf4:	db11      	blt.n	800fe1a <__any_on+0x32>
 800fdf6:	dd0a      	ble.n	800fe0e <__any_on+0x26>
 800fdf8:	f011 011f 	ands.w	r1, r1, #31
 800fdfc:	d007      	beq.n	800fe0e <__any_on+0x26>
 800fdfe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800fe02:	fa24 f001 	lsr.w	r0, r4, r1
 800fe06:	fa00 f101 	lsl.w	r1, r0, r1
 800fe0a:	428c      	cmp	r4, r1
 800fe0c:	d10b      	bne.n	800fe26 <__any_on+0x3e>
 800fe0e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800fe12:	4293      	cmp	r3, r2
 800fe14:	d803      	bhi.n	800fe1e <__any_on+0x36>
 800fe16:	2000      	movs	r0, #0
 800fe18:	bd10      	pop	{r4, pc}
 800fe1a:	4603      	mov	r3, r0
 800fe1c:	e7f7      	b.n	800fe0e <__any_on+0x26>
 800fe1e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800fe22:	2900      	cmp	r1, #0
 800fe24:	d0f5      	beq.n	800fe12 <__any_on+0x2a>
 800fe26:	2001      	movs	r0, #1
 800fe28:	e7f6      	b.n	800fe18 <__any_on+0x30>

0800fe2a <_calloc_r>:
 800fe2a:	b538      	push	{r3, r4, r5, lr}
 800fe2c:	fb02 f401 	mul.w	r4, r2, r1
 800fe30:	4621      	mov	r1, r4
 800fe32:	f000 f809 	bl	800fe48 <_malloc_r>
 800fe36:	4605      	mov	r5, r0
 800fe38:	b118      	cbz	r0, 800fe42 <_calloc_r+0x18>
 800fe3a:	4622      	mov	r2, r4
 800fe3c:	2100      	movs	r1, #0
 800fe3e:	f7fe fa8e 	bl	800e35e <memset>
 800fe42:	4628      	mov	r0, r5
 800fe44:	bd38      	pop	{r3, r4, r5, pc}
	...

0800fe48 <_malloc_r>:
 800fe48:	b570      	push	{r4, r5, r6, lr}
 800fe4a:	1ccd      	adds	r5, r1, #3
 800fe4c:	f025 0503 	bic.w	r5, r5, #3
 800fe50:	3508      	adds	r5, #8
 800fe52:	2d0c      	cmp	r5, #12
 800fe54:	bf38      	it	cc
 800fe56:	250c      	movcc	r5, #12
 800fe58:	2d00      	cmp	r5, #0
 800fe5a:	4606      	mov	r6, r0
 800fe5c:	db01      	blt.n	800fe62 <_malloc_r+0x1a>
 800fe5e:	42a9      	cmp	r1, r5
 800fe60:	d903      	bls.n	800fe6a <_malloc_r+0x22>
 800fe62:	230c      	movs	r3, #12
 800fe64:	6033      	str	r3, [r6, #0]
 800fe66:	2000      	movs	r0, #0
 800fe68:	bd70      	pop	{r4, r5, r6, pc}
 800fe6a:	f000 f87f 	bl	800ff6c <__malloc_lock>
 800fe6e:	4a21      	ldr	r2, [pc, #132]	; (800fef4 <_malloc_r+0xac>)
 800fe70:	6814      	ldr	r4, [r2, #0]
 800fe72:	4621      	mov	r1, r4
 800fe74:	b991      	cbnz	r1, 800fe9c <_malloc_r+0x54>
 800fe76:	4c20      	ldr	r4, [pc, #128]	; (800fef8 <_malloc_r+0xb0>)
 800fe78:	6823      	ldr	r3, [r4, #0]
 800fe7a:	b91b      	cbnz	r3, 800fe84 <_malloc_r+0x3c>
 800fe7c:	4630      	mov	r0, r6
 800fe7e:	f000 f83d 	bl	800fefc <_sbrk_r>
 800fe82:	6020      	str	r0, [r4, #0]
 800fe84:	4629      	mov	r1, r5
 800fe86:	4630      	mov	r0, r6
 800fe88:	f000 f838 	bl	800fefc <_sbrk_r>
 800fe8c:	1c43      	adds	r3, r0, #1
 800fe8e:	d124      	bne.n	800feda <_malloc_r+0x92>
 800fe90:	230c      	movs	r3, #12
 800fe92:	6033      	str	r3, [r6, #0]
 800fe94:	4630      	mov	r0, r6
 800fe96:	f000 f86a 	bl	800ff6e <__malloc_unlock>
 800fe9a:	e7e4      	b.n	800fe66 <_malloc_r+0x1e>
 800fe9c:	680b      	ldr	r3, [r1, #0]
 800fe9e:	1b5b      	subs	r3, r3, r5
 800fea0:	d418      	bmi.n	800fed4 <_malloc_r+0x8c>
 800fea2:	2b0b      	cmp	r3, #11
 800fea4:	d90f      	bls.n	800fec6 <_malloc_r+0x7e>
 800fea6:	600b      	str	r3, [r1, #0]
 800fea8:	50cd      	str	r5, [r1, r3]
 800feaa:	18cc      	adds	r4, r1, r3
 800feac:	4630      	mov	r0, r6
 800feae:	f000 f85e 	bl	800ff6e <__malloc_unlock>
 800feb2:	f104 000b 	add.w	r0, r4, #11
 800feb6:	1d23      	adds	r3, r4, #4
 800feb8:	f020 0007 	bic.w	r0, r0, #7
 800febc:	1ac3      	subs	r3, r0, r3
 800febe:	d0d3      	beq.n	800fe68 <_malloc_r+0x20>
 800fec0:	425a      	negs	r2, r3
 800fec2:	50e2      	str	r2, [r4, r3]
 800fec4:	e7d0      	b.n	800fe68 <_malloc_r+0x20>
 800fec6:	428c      	cmp	r4, r1
 800fec8:	684b      	ldr	r3, [r1, #4]
 800feca:	bf16      	itet	ne
 800fecc:	6063      	strne	r3, [r4, #4]
 800fece:	6013      	streq	r3, [r2, #0]
 800fed0:	460c      	movne	r4, r1
 800fed2:	e7eb      	b.n	800feac <_malloc_r+0x64>
 800fed4:	460c      	mov	r4, r1
 800fed6:	6849      	ldr	r1, [r1, #4]
 800fed8:	e7cc      	b.n	800fe74 <_malloc_r+0x2c>
 800feda:	1cc4      	adds	r4, r0, #3
 800fedc:	f024 0403 	bic.w	r4, r4, #3
 800fee0:	42a0      	cmp	r0, r4
 800fee2:	d005      	beq.n	800fef0 <_malloc_r+0xa8>
 800fee4:	1a21      	subs	r1, r4, r0
 800fee6:	4630      	mov	r0, r6
 800fee8:	f000 f808 	bl	800fefc <_sbrk_r>
 800feec:	3001      	adds	r0, #1
 800feee:	d0cf      	beq.n	800fe90 <_malloc_r+0x48>
 800fef0:	6025      	str	r5, [r4, #0]
 800fef2:	e7db      	b.n	800feac <_malloc_r+0x64>
 800fef4:	20004f48 	.word	0x20004f48
 800fef8:	20004f4c 	.word	0x20004f4c

0800fefc <_sbrk_r>:
 800fefc:	b538      	push	{r3, r4, r5, lr}
 800fefe:	4c06      	ldr	r4, [pc, #24]	; (800ff18 <_sbrk_r+0x1c>)
 800ff00:	2300      	movs	r3, #0
 800ff02:	4605      	mov	r5, r0
 800ff04:	4608      	mov	r0, r1
 800ff06:	6023      	str	r3, [r4, #0]
 800ff08:	f7f7 fc14 	bl	8007734 <_sbrk>
 800ff0c:	1c43      	adds	r3, r0, #1
 800ff0e:	d102      	bne.n	800ff16 <_sbrk_r+0x1a>
 800ff10:	6823      	ldr	r3, [r4, #0]
 800ff12:	b103      	cbz	r3, 800ff16 <_sbrk_r+0x1a>
 800ff14:	602b      	str	r3, [r5, #0]
 800ff16:	bd38      	pop	{r3, r4, r5, pc}
 800ff18:	20005230 	.word	0x20005230

0800ff1c <strncmp>:
 800ff1c:	b510      	push	{r4, lr}
 800ff1e:	b16a      	cbz	r2, 800ff3c <strncmp+0x20>
 800ff20:	3901      	subs	r1, #1
 800ff22:	1884      	adds	r4, r0, r2
 800ff24:	f810 3b01 	ldrb.w	r3, [r0], #1
 800ff28:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ff2c:	4293      	cmp	r3, r2
 800ff2e:	d103      	bne.n	800ff38 <strncmp+0x1c>
 800ff30:	42a0      	cmp	r0, r4
 800ff32:	d001      	beq.n	800ff38 <strncmp+0x1c>
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d1f5      	bne.n	800ff24 <strncmp+0x8>
 800ff38:	1a98      	subs	r0, r3, r2
 800ff3a:	bd10      	pop	{r4, pc}
 800ff3c:	4610      	mov	r0, r2
 800ff3e:	e7fc      	b.n	800ff3a <strncmp+0x1e>

0800ff40 <__ascii_wctomb>:
 800ff40:	b149      	cbz	r1, 800ff56 <__ascii_wctomb+0x16>
 800ff42:	2aff      	cmp	r2, #255	; 0xff
 800ff44:	bf85      	ittet	hi
 800ff46:	238a      	movhi	r3, #138	; 0x8a
 800ff48:	6003      	strhi	r3, [r0, #0]
 800ff4a:	700a      	strbls	r2, [r1, #0]
 800ff4c:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 800ff50:	bf98      	it	ls
 800ff52:	2001      	movls	r0, #1
 800ff54:	4770      	bx	lr
 800ff56:	4608      	mov	r0, r1
 800ff58:	4770      	bx	lr
	...

0800ff5c <malloc>:
 800ff5c:	4b02      	ldr	r3, [pc, #8]	; (800ff68 <malloc+0xc>)
 800ff5e:	4601      	mov	r1, r0
 800ff60:	6818      	ldr	r0, [r3, #0]
 800ff62:	f7ff bf71 	b.w	800fe48 <_malloc_r>
 800ff66:	bf00      	nop
 800ff68:	20000018 	.word	0x20000018

0800ff6c <__malloc_lock>:
 800ff6c:	4770      	bx	lr

0800ff6e <__malloc_unlock>:
 800ff6e:	4770      	bx	lr

0800ff70 <_init>:
 800ff70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff72:	bf00      	nop
 800ff74:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff76:	bc08      	pop	{r3}
 800ff78:	469e      	mov	lr, r3
 800ff7a:	4770      	bx	lr

0800ff7c <_fini>:
 800ff7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ff7e:	bf00      	nop
 800ff80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ff82:	bc08      	pop	{r3}
 800ff84:	469e      	mov	lr, r3
 800ff86:	4770      	bx	lr
