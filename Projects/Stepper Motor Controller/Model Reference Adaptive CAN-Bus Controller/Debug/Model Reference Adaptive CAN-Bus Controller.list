
Model Reference Adaptive CAN-Bus Controller.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000194  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00011398  080001a0  080001a0  000101a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00040ed8  08011538  08011538  00021538  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08052410  08052410  000701e4  2**0
                  CONTENTS
  4 .ARM          00000008  08052410  08052410  00062410  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08052418  08052418  000701e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08052418  08052418  00062418  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0805241c  0805241c  0006241c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001e4  20000000  08052420  00070000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000055a8  200001e4  08052604  000701e4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000578c  08052604  0007578c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000701e4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00026f4e  00000000  00000000  00070214  2**0
                  CONTENTS, READONLY, DEBUGGING
 13 .debug_abbrev 00004f1d  00000000  00000000  00097162  2**0
                  CONTENTS, READONLY, DEBUGGING
 14 .debug_aranges 00001c98  00000000  00000000  0009c080  2**3
                  CONTENTS, READONLY, DEBUGGING
 15 .debug_ranges 00001aa8  00000000  00000000  0009dd18  2**3
                  CONTENTS, READONLY, DEBUGGING
 16 .debug_macro  0001a3ec  00000000  00000000  0009f7c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 17 .debug_line   00018f7c  00000000  00000000  000b9bac  2**0
                  CONTENTS, READONLY, DEBUGGING
 18 .debug_str    000a08a2  00000000  00000000  000d2b28  2**0
                  CONTENTS, READONLY, DEBUGGING
 19 .comment      0000007b  00000000  00000000  001733ca  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000815c  00000000  00000000  00173448  2**2
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	; (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	; (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	; (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001e4 	.word	0x200001e4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08011520 	.word	0x08011520

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	; (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	; (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	; (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001e8 	.word	0x200001e8
 80001dc:	08011520 	.word	0x08011520

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <__aeabi_drsub>:
 80001f0:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001f4:	e002      	b.n	80001fc <__adddf3>
 80001f6:	bf00      	nop

080001f8 <__aeabi_dsub>:
 80001f8:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001fc <__adddf3>:
 80001fc:	b530      	push	{r4, r5, lr}
 80001fe:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000202:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000206:	ea94 0f05 	teq	r4, r5
 800020a:	bf08      	it	eq
 800020c:	ea90 0f02 	teqeq	r0, r2
 8000210:	bf1f      	itttt	ne
 8000212:	ea54 0c00 	orrsne.w	ip, r4, r0
 8000216:	ea55 0c02 	orrsne.w	ip, r5, r2
 800021a:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 800021e:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000222:	f000 80e2 	beq.w	80003ea <__adddf3+0x1ee>
 8000226:	ea4f 5454 	mov.w	r4, r4, lsr #21
 800022a:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 800022e:	bfb8      	it	lt
 8000230:	426d      	neglt	r5, r5
 8000232:	dd0c      	ble.n	800024e <__adddf3+0x52>
 8000234:	442c      	add	r4, r5
 8000236:	ea80 0202 	eor.w	r2, r0, r2
 800023a:	ea81 0303 	eor.w	r3, r1, r3
 800023e:	ea82 0000 	eor.w	r0, r2, r0
 8000242:	ea83 0101 	eor.w	r1, r3, r1
 8000246:	ea80 0202 	eor.w	r2, r0, r2
 800024a:	ea81 0303 	eor.w	r3, r1, r3
 800024e:	2d36      	cmp	r5, #54	; 0x36
 8000250:	bf88      	it	hi
 8000252:	bd30      	pophi	{r4, r5, pc}
 8000254:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000258:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800025c:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000260:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000264:	d002      	beq.n	800026c <__adddf3+0x70>
 8000266:	4240      	negs	r0, r0
 8000268:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800026c:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000270:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000274:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000278:	d002      	beq.n	8000280 <__adddf3+0x84>
 800027a:	4252      	negs	r2, r2
 800027c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000280:	ea94 0f05 	teq	r4, r5
 8000284:	f000 80a7 	beq.w	80003d6 <__adddf3+0x1da>
 8000288:	f1a4 0401 	sub.w	r4, r4, #1
 800028c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000290:	db0d      	blt.n	80002ae <__adddf3+0xb2>
 8000292:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000296:	fa22 f205 	lsr.w	r2, r2, r5
 800029a:	1880      	adds	r0, r0, r2
 800029c:	f141 0100 	adc.w	r1, r1, #0
 80002a0:	fa03 f20e 	lsl.w	r2, r3, lr
 80002a4:	1880      	adds	r0, r0, r2
 80002a6:	fa43 f305 	asr.w	r3, r3, r5
 80002aa:	4159      	adcs	r1, r3
 80002ac:	e00e      	b.n	80002cc <__adddf3+0xd0>
 80002ae:	f1a5 0520 	sub.w	r5, r5, #32
 80002b2:	f10e 0e20 	add.w	lr, lr, #32
 80002b6:	2a01      	cmp	r2, #1
 80002b8:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002bc:	bf28      	it	cs
 80002be:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002c2:	fa43 f305 	asr.w	r3, r3, r5
 80002c6:	18c0      	adds	r0, r0, r3
 80002c8:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002cc:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002d0:	d507      	bpl.n	80002e2 <__adddf3+0xe6>
 80002d2:	f04f 0e00 	mov.w	lr, #0
 80002d6:	f1dc 0c00 	rsbs	ip, ip, #0
 80002da:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002de:	eb6e 0101 	sbc.w	r1, lr, r1
 80002e2:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002e6:	d31b      	bcc.n	8000320 <__adddf3+0x124>
 80002e8:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002ec:	d30c      	bcc.n	8000308 <__adddf3+0x10c>
 80002ee:	0849      	lsrs	r1, r1, #1
 80002f0:	ea5f 0030 	movs.w	r0, r0, rrx
 80002f4:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002f8:	f104 0401 	add.w	r4, r4, #1
 80002fc:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000300:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000304:	f080 809a 	bcs.w	800043c <__adddf3+0x240>
 8000308:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800030c:	bf08      	it	eq
 800030e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000312:	f150 0000 	adcs.w	r0, r0, #0
 8000316:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800031a:	ea41 0105 	orr.w	r1, r1, r5
 800031e:	bd30      	pop	{r4, r5, pc}
 8000320:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 8000324:	4140      	adcs	r0, r0
 8000326:	eb41 0101 	adc.w	r1, r1, r1
 800032a:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 800032e:	f1a4 0401 	sub.w	r4, r4, #1
 8000332:	d1e9      	bne.n	8000308 <__adddf3+0x10c>
 8000334:	f091 0f00 	teq	r1, #0
 8000338:	bf04      	itt	eq
 800033a:	4601      	moveq	r1, r0
 800033c:	2000      	moveq	r0, #0
 800033e:	fab1 f381 	clz	r3, r1
 8000342:	bf08      	it	eq
 8000344:	3320      	addeq	r3, #32
 8000346:	f1a3 030b 	sub.w	r3, r3, #11
 800034a:	f1b3 0220 	subs.w	r2, r3, #32
 800034e:	da0c      	bge.n	800036a <__adddf3+0x16e>
 8000350:	320c      	adds	r2, #12
 8000352:	dd08      	ble.n	8000366 <__adddf3+0x16a>
 8000354:	f102 0c14 	add.w	ip, r2, #20
 8000358:	f1c2 020c 	rsb	r2, r2, #12
 800035c:	fa01 f00c 	lsl.w	r0, r1, ip
 8000360:	fa21 f102 	lsr.w	r1, r1, r2
 8000364:	e00c      	b.n	8000380 <__adddf3+0x184>
 8000366:	f102 0214 	add.w	r2, r2, #20
 800036a:	bfd8      	it	le
 800036c:	f1c2 0c20 	rsble	ip, r2, #32
 8000370:	fa01 f102 	lsl.w	r1, r1, r2
 8000374:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000378:	bfdc      	itt	le
 800037a:	ea41 010c 	orrle.w	r1, r1, ip
 800037e:	4090      	lslle	r0, r2
 8000380:	1ae4      	subs	r4, r4, r3
 8000382:	bfa2      	ittt	ge
 8000384:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000388:	4329      	orrge	r1, r5
 800038a:	bd30      	popge	{r4, r5, pc}
 800038c:	ea6f 0404 	mvn.w	r4, r4
 8000390:	3c1f      	subs	r4, #31
 8000392:	da1c      	bge.n	80003ce <__adddf3+0x1d2>
 8000394:	340c      	adds	r4, #12
 8000396:	dc0e      	bgt.n	80003b6 <__adddf3+0x1ba>
 8000398:	f104 0414 	add.w	r4, r4, #20
 800039c:	f1c4 0220 	rsb	r2, r4, #32
 80003a0:	fa20 f004 	lsr.w	r0, r0, r4
 80003a4:	fa01 f302 	lsl.w	r3, r1, r2
 80003a8:	ea40 0003 	orr.w	r0, r0, r3
 80003ac:	fa21 f304 	lsr.w	r3, r1, r4
 80003b0:	ea45 0103 	orr.w	r1, r5, r3
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	f1c4 040c 	rsb	r4, r4, #12
 80003ba:	f1c4 0220 	rsb	r2, r4, #32
 80003be:	fa20 f002 	lsr.w	r0, r0, r2
 80003c2:	fa01 f304 	lsl.w	r3, r1, r4
 80003c6:	ea40 0003 	orr.w	r0, r0, r3
 80003ca:	4629      	mov	r1, r5
 80003cc:	bd30      	pop	{r4, r5, pc}
 80003ce:	fa21 f004 	lsr.w	r0, r1, r4
 80003d2:	4629      	mov	r1, r5
 80003d4:	bd30      	pop	{r4, r5, pc}
 80003d6:	f094 0f00 	teq	r4, #0
 80003da:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003de:	bf06      	itte	eq
 80003e0:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003e4:	3401      	addeq	r4, #1
 80003e6:	3d01      	subne	r5, #1
 80003e8:	e74e      	b.n	8000288 <__adddf3+0x8c>
 80003ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003ee:	bf18      	it	ne
 80003f0:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003f4:	d029      	beq.n	800044a <__adddf3+0x24e>
 80003f6:	ea94 0f05 	teq	r4, r5
 80003fa:	bf08      	it	eq
 80003fc:	ea90 0f02 	teqeq	r0, r2
 8000400:	d005      	beq.n	800040e <__adddf3+0x212>
 8000402:	ea54 0c00 	orrs.w	ip, r4, r0
 8000406:	bf04      	itt	eq
 8000408:	4619      	moveq	r1, r3
 800040a:	4610      	moveq	r0, r2
 800040c:	bd30      	pop	{r4, r5, pc}
 800040e:	ea91 0f03 	teq	r1, r3
 8000412:	bf1e      	ittt	ne
 8000414:	2100      	movne	r1, #0
 8000416:	2000      	movne	r0, #0
 8000418:	bd30      	popne	{r4, r5, pc}
 800041a:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 800041e:	d105      	bne.n	800042c <__adddf3+0x230>
 8000420:	0040      	lsls	r0, r0, #1
 8000422:	4149      	adcs	r1, r1
 8000424:	bf28      	it	cs
 8000426:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 800042a:	bd30      	pop	{r4, r5, pc}
 800042c:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000430:	bf3c      	itt	cc
 8000432:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 8000436:	bd30      	popcc	{r4, r5, pc}
 8000438:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 800043c:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000440:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000444:	f04f 0000 	mov.w	r0, #0
 8000448:	bd30      	pop	{r4, r5, pc}
 800044a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800044e:	bf1a      	itte	ne
 8000450:	4619      	movne	r1, r3
 8000452:	4610      	movne	r0, r2
 8000454:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000458:	bf1c      	itt	ne
 800045a:	460b      	movne	r3, r1
 800045c:	4602      	movne	r2, r0
 800045e:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000462:	bf06      	itte	eq
 8000464:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000468:	ea91 0f03 	teqeq	r1, r3
 800046c:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000470:	bd30      	pop	{r4, r5, pc}
 8000472:	bf00      	nop

08000474 <__aeabi_ui2d>:
 8000474:	f090 0f00 	teq	r0, #0
 8000478:	bf04      	itt	eq
 800047a:	2100      	moveq	r1, #0
 800047c:	4770      	bxeq	lr
 800047e:	b530      	push	{r4, r5, lr}
 8000480:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000484:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000488:	f04f 0500 	mov.w	r5, #0
 800048c:	f04f 0100 	mov.w	r1, #0
 8000490:	e750      	b.n	8000334 <__adddf3+0x138>
 8000492:	bf00      	nop

08000494 <__aeabi_i2d>:
 8000494:	f090 0f00 	teq	r0, #0
 8000498:	bf04      	itt	eq
 800049a:	2100      	moveq	r1, #0
 800049c:	4770      	bxeq	lr
 800049e:	b530      	push	{r4, r5, lr}
 80004a0:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80004a4:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80004a8:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 80004ac:	bf48      	it	mi
 80004ae:	4240      	negmi	r0, r0
 80004b0:	f04f 0100 	mov.w	r1, #0
 80004b4:	e73e      	b.n	8000334 <__adddf3+0x138>
 80004b6:	bf00      	nop

080004b8 <__aeabi_f2d>:
 80004b8:	0042      	lsls	r2, r0, #1
 80004ba:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004be:	ea4f 0131 	mov.w	r1, r1, rrx
 80004c2:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004c6:	bf1f      	itttt	ne
 80004c8:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004cc:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004d0:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004d4:	4770      	bxne	lr
 80004d6:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004da:	bf08      	it	eq
 80004dc:	4770      	bxeq	lr
 80004de:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004e2:	bf04      	itt	eq
 80004e4:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004e8:	4770      	bxeq	lr
 80004ea:	b530      	push	{r4, r5, lr}
 80004ec:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004f0:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004f4:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004f8:	e71c      	b.n	8000334 <__adddf3+0x138>
 80004fa:	bf00      	nop

080004fc <__aeabi_ul2d>:
 80004fc:	ea50 0201 	orrs.w	r2, r0, r1
 8000500:	bf08      	it	eq
 8000502:	4770      	bxeq	lr
 8000504:	b530      	push	{r4, r5, lr}
 8000506:	f04f 0500 	mov.w	r5, #0
 800050a:	e00a      	b.n	8000522 <__aeabi_l2d+0x16>

0800050c <__aeabi_l2d>:
 800050c:	ea50 0201 	orrs.w	r2, r0, r1
 8000510:	bf08      	it	eq
 8000512:	4770      	bxeq	lr
 8000514:	b530      	push	{r4, r5, lr}
 8000516:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 800051a:	d502      	bpl.n	8000522 <__aeabi_l2d+0x16>
 800051c:	4240      	negs	r0, r0
 800051e:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000522:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000526:	f104 0432 	add.w	r4, r4, #50	; 0x32
 800052a:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 800052e:	f43f aed8 	beq.w	80002e2 <__adddf3+0xe6>
 8000532:	f04f 0203 	mov.w	r2, #3
 8000536:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800053a:	bf18      	it	ne
 800053c:	3203      	addne	r2, #3
 800053e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000542:	bf18      	it	ne
 8000544:	3203      	addne	r2, #3
 8000546:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 800054a:	f1c2 0320 	rsb	r3, r2, #32
 800054e:	fa00 fc03 	lsl.w	ip, r0, r3
 8000552:	fa20 f002 	lsr.w	r0, r0, r2
 8000556:	fa01 fe03 	lsl.w	lr, r1, r3
 800055a:	ea40 000e 	orr.w	r0, r0, lr
 800055e:	fa21 f102 	lsr.w	r1, r1, r2
 8000562:	4414      	add	r4, r2
 8000564:	e6bd      	b.n	80002e2 <__adddf3+0xe6>
 8000566:	bf00      	nop

08000568 <__aeabi_dmul>:
 8000568:	b570      	push	{r4, r5, r6, lr}
 800056a:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800056e:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000572:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000576:	bf1d      	ittte	ne
 8000578:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800057c:	ea94 0f0c 	teqne	r4, ip
 8000580:	ea95 0f0c 	teqne	r5, ip
 8000584:	f000 f8de 	bleq	8000744 <__aeabi_dmul+0x1dc>
 8000588:	442c      	add	r4, r5
 800058a:	ea81 0603 	eor.w	r6, r1, r3
 800058e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000592:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000596:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800059a:	bf18      	it	ne
 800059c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 80005a0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80005a4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80005a8:	d038      	beq.n	800061c <__aeabi_dmul+0xb4>
 80005aa:	fba0 ce02 	umull	ip, lr, r0, r2
 80005ae:	f04f 0500 	mov.w	r5, #0
 80005b2:	fbe1 e502 	umlal	lr, r5, r1, r2
 80005b6:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005ba:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005be:	f04f 0600 	mov.w	r6, #0
 80005c2:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005c6:	f09c 0f00 	teq	ip, #0
 80005ca:	bf18      	it	ne
 80005cc:	f04e 0e01 	orrne.w	lr, lr, #1
 80005d0:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005d4:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005d8:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005dc:	d204      	bcs.n	80005e8 <__aeabi_dmul+0x80>
 80005de:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005e2:	416d      	adcs	r5, r5
 80005e4:	eb46 0606 	adc.w	r6, r6, r6
 80005e8:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005ec:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005f0:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005f4:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005f8:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005fc:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000600:	bf88      	it	hi
 8000602:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000606:	d81e      	bhi.n	8000646 <__aeabi_dmul+0xde>
 8000608:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800060c:	bf08      	it	eq
 800060e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 8000612:	f150 0000 	adcs.w	r0, r0, #0
 8000616:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800061a:	bd70      	pop	{r4, r5, r6, pc}
 800061c:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000620:	ea46 0101 	orr.w	r1, r6, r1
 8000624:	ea40 0002 	orr.w	r0, r0, r2
 8000628:	ea81 0103 	eor.w	r1, r1, r3
 800062c:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000630:	bfc2      	ittt	gt
 8000632:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000636:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 800063a:	bd70      	popgt	{r4, r5, r6, pc}
 800063c:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000640:	f04f 0e00 	mov.w	lr, #0
 8000644:	3c01      	subs	r4, #1
 8000646:	f300 80ab 	bgt.w	80007a0 <__aeabi_dmul+0x238>
 800064a:	f114 0f36 	cmn.w	r4, #54	; 0x36
 800064e:	bfde      	ittt	le
 8000650:	2000      	movle	r0, #0
 8000652:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 8000656:	bd70      	pople	{r4, r5, r6, pc}
 8000658:	f1c4 0400 	rsb	r4, r4, #0
 800065c:	3c20      	subs	r4, #32
 800065e:	da35      	bge.n	80006cc <__aeabi_dmul+0x164>
 8000660:	340c      	adds	r4, #12
 8000662:	dc1b      	bgt.n	800069c <__aeabi_dmul+0x134>
 8000664:	f104 0414 	add.w	r4, r4, #20
 8000668:	f1c4 0520 	rsb	r5, r4, #32
 800066c:	fa00 f305 	lsl.w	r3, r0, r5
 8000670:	fa20 f004 	lsr.w	r0, r0, r4
 8000674:	fa01 f205 	lsl.w	r2, r1, r5
 8000678:	ea40 0002 	orr.w	r0, r0, r2
 800067c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000680:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000684:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000688:	fa21 f604 	lsr.w	r6, r1, r4
 800068c:	eb42 0106 	adc.w	r1, r2, r6
 8000690:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000694:	bf08      	it	eq
 8000696:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800069a:	bd70      	pop	{r4, r5, r6, pc}
 800069c:	f1c4 040c 	rsb	r4, r4, #12
 80006a0:	f1c4 0520 	rsb	r5, r4, #32
 80006a4:	fa00 f304 	lsl.w	r3, r0, r4
 80006a8:	fa20 f005 	lsr.w	r0, r0, r5
 80006ac:	fa01 f204 	lsl.w	r2, r1, r4
 80006b0:	ea40 0002 	orr.w	r0, r0, r2
 80006b4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006b8:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006bc:	f141 0100 	adc.w	r1, r1, #0
 80006c0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006c4:	bf08      	it	eq
 80006c6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ca:	bd70      	pop	{r4, r5, r6, pc}
 80006cc:	f1c4 0520 	rsb	r5, r4, #32
 80006d0:	fa00 f205 	lsl.w	r2, r0, r5
 80006d4:	ea4e 0e02 	orr.w	lr, lr, r2
 80006d8:	fa20 f304 	lsr.w	r3, r0, r4
 80006dc:	fa01 f205 	lsl.w	r2, r1, r5
 80006e0:	ea43 0302 	orr.w	r3, r3, r2
 80006e4:	fa21 f004 	lsr.w	r0, r1, r4
 80006e8:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006ec:	fa21 f204 	lsr.w	r2, r1, r4
 80006f0:	ea20 0002 	bic.w	r0, r0, r2
 80006f4:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006f8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006fc:	bf08      	it	eq
 80006fe:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000702:	bd70      	pop	{r4, r5, r6, pc}
 8000704:	f094 0f00 	teq	r4, #0
 8000708:	d10f      	bne.n	800072a <__aeabi_dmul+0x1c2>
 800070a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800070e:	0040      	lsls	r0, r0, #1
 8000710:	eb41 0101 	adc.w	r1, r1, r1
 8000714:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000718:	bf08      	it	eq
 800071a:	3c01      	subeq	r4, #1
 800071c:	d0f7      	beq.n	800070e <__aeabi_dmul+0x1a6>
 800071e:	ea41 0106 	orr.w	r1, r1, r6
 8000722:	f095 0f00 	teq	r5, #0
 8000726:	bf18      	it	ne
 8000728:	4770      	bxne	lr
 800072a:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 800072e:	0052      	lsls	r2, r2, #1
 8000730:	eb43 0303 	adc.w	r3, r3, r3
 8000734:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000738:	bf08      	it	eq
 800073a:	3d01      	subeq	r5, #1
 800073c:	d0f7      	beq.n	800072e <__aeabi_dmul+0x1c6>
 800073e:	ea43 0306 	orr.w	r3, r3, r6
 8000742:	4770      	bx	lr
 8000744:	ea94 0f0c 	teq	r4, ip
 8000748:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800074c:	bf18      	it	ne
 800074e:	ea95 0f0c 	teqne	r5, ip
 8000752:	d00c      	beq.n	800076e <__aeabi_dmul+0x206>
 8000754:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000758:	bf18      	it	ne
 800075a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800075e:	d1d1      	bne.n	8000704 <__aeabi_dmul+0x19c>
 8000760:	ea81 0103 	eor.w	r1, r1, r3
 8000764:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000768:	f04f 0000 	mov.w	r0, #0
 800076c:	bd70      	pop	{r4, r5, r6, pc}
 800076e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000772:	bf06      	itte	eq
 8000774:	4610      	moveq	r0, r2
 8000776:	4619      	moveq	r1, r3
 8000778:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800077c:	d019      	beq.n	80007b2 <__aeabi_dmul+0x24a>
 800077e:	ea94 0f0c 	teq	r4, ip
 8000782:	d102      	bne.n	800078a <__aeabi_dmul+0x222>
 8000784:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000788:	d113      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800078a:	ea95 0f0c 	teq	r5, ip
 800078e:	d105      	bne.n	800079c <__aeabi_dmul+0x234>
 8000790:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000794:	bf1c      	itt	ne
 8000796:	4610      	movne	r0, r2
 8000798:	4619      	movne	r1, r3
 800079a:	d10a      	bne.n	80007b2 <__aeabi_dmul+0x24a>
 800079c:	ea81 0103 	eor.w	r1, r1, r3
 80007a0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007a4:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007a8:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80007ac:	f04f 0000 	mov.w	r0, #0
 80007b0:	bd70      	pop	{r4, r5, r6, pc}
 80007b2:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 80007b6:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007ba:	bd70      	pop	{r4, r5, r6, pc}

080007bc <__aeabi_ddiv>:
 80007bc:	b570      	push	{r4, r5, r6, lr}
 80007be:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007c2:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007c6:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007ca:	bf1d      	ittte	ne
 80007cc:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007d0:	ea94 0f0c 	teqne	r4, ip
 80007d4:	ea95 0f0c 	teqne	r5, ip
 80007d8:	f000 f8a7 	bleq	800092a <__aeabi_ddiv+0x16e>
 80007dc:	eba4 0405 	sub.w	r4, r4, r5
 80007e0:	ea81 0e03 	eor.w	lr, r1, r3
 80007e4:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007ec:	f000 8088 	beq.w	8000900 <__aeabi_ddiv+0x144>
 80007f0:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007f4:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007f8:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007fc:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000800:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000804:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000808:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800080c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 8000810:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 8000814:	429d      	cmp	r5, r3
 8000816:	bf08      	it	eq
 8000818:	4296      	cmpeq	r6, r2
 800081a:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 800081e:	f504 7440 	add.w	r4, r4, #768	; 0x300
 8000822:	d202      	bcs.n	800082a <__aeabi_ddiv+0x6e>
 8000824:	085b      	lsrs	r3, r3, #1
 8000826:	ea4f 0232 	mov.w	r2, r2, rrx
 800082a:	1ab6      	subs	r6, r6, r2
 800082c:	eb65 0503 	sbc.w	r5, r5, r3
 8000830:	085b      	lsrs	r3, r3, #1
 8000832:	ea4f 0232 	mov.w	r2, r2, rrx
 8000836:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 800083a:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 000c 	orrcs.w	r0, r0, ip
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000880:	085b      	lsrs	r3, r3, #1
 8000882:	ea4f 0232 	mov.w	r2, r2, rrx
 8000886:	ebb6 0e02 	subs.w	lr, r6, r2
 800088a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800088e:	bf22      	ittt	cs
 8000890:	1ab6      	subcs	r6, r6, r2
 8000892:	4675      	movcs	r5, lr
 8000894:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000898:	ea55 0e06 	orrs.w	lr, r5, r6
 800089c:	d018      	beq.n	80008d0 <__aeabi_ddiv+0x114>
 800089e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 80008a2:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 80008a6:	ea4f 1606 	mov.w	r6, r6, lsl #4
 80008aa:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 80008ae:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 80008b2:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 80008b6:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008ba:	d1c0      	bne.n	800083e <__aeabi_ddiv+0x82>
 80008bc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008c0:	d10b      	bne.n	80008da <__aeabi_ddiv+0x11e>
 80008c2:	ea41 0100 	orr.w	r1, r1, r0
 80008c6:	f04f 0000 	mov.w	r0, #0
 80008ca:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008ce:	e7b6      	b.n	800083e <__aeabi_ddiv+0x82>
 80008d0:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008d4:	bf04      	itt	eq
 80008d6:	4301      	orreq	r1, r0
 80008d8:	2000      	moveq	r0, #0
 80008da:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008de:	bf88      	it	hi
 80008e0:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008e4:	f63f aeaf 	bhi.w	8000646 <__aeabi_dmul+0xde>
 80008e8:	ebb5 0c03 	subs.w	ip, r5, r3
 80008ec:	bf04      	itt	eq
 80008ee:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008f2:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008f6:	f150 0000 	adcs.w	r0, r0, #0
 80008fa:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	pop	{r4, r5, r6, pc}
 8000900:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000904:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000908:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800090c:	bfc2      	ittt	gt
 800090e:	ebd4 050c 	rsbsgt	r5, r4, ip
 8000912:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000916:	bd70      	popgt	{r4, r5, r6, pc}
 8000918:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800091c:	f04f 0e00 	mov.w	lr, #0
 8000920:	3c01      	subs	r4, #1
 8000922:	e690      	b.n	8000646 <__aeabi_dmul+0xde>
 8000924:	ea45 0e06 	orr.w	lr, r5, r6
 8000928:	e68d      	b.n	8000646 <__aeabi_dmul+0xde>
 800092a:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 800092e:	ea94 0f0c 	teq	r4, ip
 8000932:	bf08      	it	eq
 8000934:	ea95 0f0c 	teqeq	r5, ip
 8000938:	f43f af3b 	beq.w	80007b2 <__aeabi_dmul+0x24a>
 800093c:	ea94 0f0c 	teq	r4, ip
 8000940:	d10a      	bne.n	8000958 <__aeabi_ddiv+0x19c>
 8000942:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000946:	f47f af34 	bne.w	80007b2 <__aeabi_dmul+0x24a>
 800094a:	ea95 0f0c 	teq	r5, ip
 800094e:	f47f af25 	bne.w	800079c <__aeabi_dmul+0x234>
 8000952:	4610      	mov	r0, r2
 8000954:	4619      	mov	r1, r3
 8000956:	e72c      	b.n	80007b2 <__aeabi_dmul+0x24a>
 8000958:	ea95 0f0c 	teq	r5, ip
 800095c:	d106      	bne.n	800096c <__aeabi_ddiv+0x1b0>
 800095e:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000962:	f43f aefd 	beq.w	8000760 <__aeabi_dmul+0x1f8>
 8000966:	4610      	mov	r0, r2
 8000968:	4619      	mov	r1, r3
 800096a:	e722      	b.n	80007b2 <__aeabi_dmul+0x24a>
 800096c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000970:	bf18      	it	ne
 8000972:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000976:	f47f aec5 	bne.w	8000704 <__aeabi_dmul+0x19c>
 800097a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 800097e:	f47f af0d 	bne.w	800079c <__aeabi_dmul+0x234>
 8000982:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000986:	f47f aeeb 	bne.w	8000760 <__aeabi_dmul+0x1f8>
 800098a:	e712      	b.n	80007b2 <__aeabi_dmul+0x24a>

0800098c <__gedf2>:
 800098c:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000990:	e006      	b.n	80009a0 <__cmpdf2+0x4>
 8000992:	bf00      	nop

08000994 <__ledf2>:
 8000994:	f04f 0c01 	mov.w	ip, #1
 8000998:	e002      	b.n	80009a0 <__cmpdf2+0x4>
 800099a:	bf00      	nop

0800099c <__cmpdf2>:
 800099c:	f04f 0c01 	mov.w	ip, #1
 80009a0:	f84d cd04 	str.w	ip, [sp, #-4]!
 80009a4:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009a8:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009ac:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009b0:	bf18      	it	ne
 80009b2:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 80009b6:	d01b      	beq.n	80009f0 <__cmpdf2+0x54>
 80009b8:	b001      	add	sp, #4
 80009ba:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009be:	bf0c      	ite	eq
 80009c0:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009c4:	ea91 0f03 	teqne	r1, r3
 80009c8:	bf02      	ittt	eq
 80009ca:	ea90 0f02 	teqeq	r0, r2
 80009ce:	2000      	moveq	r0, #0
 80009d0:	4770      	bxeq	lr
 80009d2:	f110 0f00 	cmn.w	r0, #0
 80009d6:	ea91 0f03 	teq	r1, r3
 80009da:	bf58      	it	pl
 80009dc:	4299      	cmppl	r1, r3
 80009de:	bf08      	it	eq
 80009e0:	4290      	cmpeq	r0, r2
 80009e2:	bf2c      	ite	cs
 80009e4:	17d8      	asrcs	r0, r3, #31
 80009e6:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009ea:	f040 0001 	orr.w	r0, r0, #1
 80009ee:	4770      	bx	lr
 80009f0:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009f4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f8:	d102      	bne.n	8000a00 <__cmpdf2+0x64>
 80009fa:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009fe:	d107      	bne.n	8000a10 <__cmpdf2+0x74>
 8000a00:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a04:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a08:	d1d6      	bne.n	80009b8 <__cmpdf2+0x1c>
 8000a0a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a0e:	d0d3      	beq.n	80009b8 <__cmpdf2+0x1c>
 8000a10:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000a14:	4770      	bx	lr
 8000a16:	bf00      	nop

08000a18 <__aeabi_cdrcmple>:
 8000a18:	4684      	mov	ip, r0
 8000a1a:	4610      	mov	r0, r2
 8000a1c:	4662      	mov	r2, ip
 8000a1e:	468c      	mov	ip, r1
 8000a20:	4619      	mov	r1, r3
 8000a22:	4663      	mov	r3, ip
 8000a24:	e000      	b.n	8000a28 <__aeabi_cdcmpeq>
 8000a26:	bf00      	nop

08000a28 <__aeabi_cdcmpeq>:
 8000a28:	b501      	push	{r0, lr}
 8000a2a:	f7ff ffb7 	bl	800099c <__cmpdf2>
 8000a2e:	2800      	cmp	r0, #0
 8000a30:	bf48      	it	mi
 8000a32:	f110 0f00 	cmnmi.w	r0, #0
 8000a36:	bd01      	pop	{r0, pc}

08000a38 <__aeabi_dcmpeq>:
 8000a38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a3c:	f7ff fff4 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a40:	bf0c      	ite	eq
 8000a42:	2001      	moveq	r0, #1
 8000a44:	2000      	movne	r0, #0
 8000a46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a4a:	bf00      	nop

08000a4c <__aeabi_dcmplt>:
 8000a4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a50:	f7ff ffea 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a54:	bf34      	ite	cc
 8000a56:	2001      	movcc	r0, #1
 8000a58:	2000      	movcs	r0, #0
 8000a5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5e:	bf00      	nop

08000a60 <__aeabi_dcmple>:
 8000a60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a64:	f7ff ffe0 	bl	8000a28 <__aeabi_cdcmpeq>
 8000a68:	bf94      	ite	ls
 8000a6a:	2001      	movls	r0, #1
 8000a6c:	2000      	movhi	r0, #0
 8000a6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a72:	bf00      	nop

08000a74 <__aeabi_dcmpge>:
 8000a74:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a78:	f7ff ffce 	bl	8000a18 <__aeabi_cdrcmple>
 8000a7c:	bf94      	ite	ls
 8000a7e:	2001      	movls	r0, #1
 8000a80:	2000      	movhi	r0, #0
 8000a82:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a86:	bf00      	nop

08000a88 <__aeabi_dcmpgt>:
 8000a88:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a8c:	f7ff ffc4 	bl	8000a18 <__aeabi_cdrcmple>
 8000a90:	bf34      	ite	cc
 8000a92:	2001      	movcc	r0, #1
 8000a94:	2000      	movcs	r0, #0
 8000a96:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a9a:	bf00      	nop

08000a9c <__aeabi_d2iz>:
 8000a9c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000aa0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000aa4:	d215      	bcs.n	8000ad2 <__aeabi_d2iz+0x36>
 8000aa6:	d511      	bpl.n	8000acc <__aeabi_d2iz+0x30>
 8000aa8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000aac:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000ab0:	d912      	bls.n	8000ad8 <__aeabi_d2iz+0x3c>
 8000ab2:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000ab6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000aba:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000abe:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ac2:	fa23 f002 	lsr.w	r0, r3, r2
 8000ac6:	bf18      	it	ne
 8000ac8:	4240      	negne	r0, r0
 8000aca:	4770      	bx	lr
 8000acc:	f04f 0000 	mov.w	r0, #0
 8000ad0:	4770      	bx	lr
 8000ad2:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ad6:	d105      	bne.n	8000ae4 <__aeabi_d2iz+0x48>
 8000ad8:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000adc:	bf08      	it	eq
 8000ade:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000ae2:	4770      	bx	lr
 8000ae4:	f04f 0000 	mov.w	r0, #0
 8000ae8:	4770      	bx	lr
 8000aea:	bf00      	nop

08000aec <__aeabi_d2uiz>:
 8000aec:	004a      	lsls	r2, r1, #1
 8000aee:	d211      	bcs.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af0:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000af4:	d211      	bcs.n	8000b1a <__aeabi_d2uiz+0x2e>
 8000af6:	d50d      	bpl.n	8000b14 <__aeabi_d2uiz+0x28>
 8000af8:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000afc:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b00:	d40e      	bmi.n	8000b20 <__aeabi_d2uiz+0x34>
 8000b02:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b06:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b0a:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b0e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b12:	4770      	bx	lr
 8000b14:	f04f 0000 	mov.w	r0, #0
 8000b18:	4770      	bx	lr
 8000b1a:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b1e:	d102      	bne.n	8000b26 <__aeabi_d2uiz+0x3a>
 8000b20:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8000b24:	4770      	bx	lr
 8000b26:	f04f 0000 	mov.w	r0, #0
 8000b2a:	4770      	bx	lr

08000b2c <__aeabi_d2f>:
 8000b2c:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b30:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000b34:	bf24      	itt	cs
 8000b36:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000b3a:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000b3e:	d90d      	bls.n	8000b5c <__aeabi_d2f+0x30>
 8000b40:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000b44:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000b48:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000b4c:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000b50:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000b54:	bf08      	it	eq
 8000b56:	f020 0001 	biceq.w	r0, r0, #1
 8000b5a:	4770      	bx	lr
 8000b5c:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000b60:	d121      	bne.n	8000ba6 <__aeabi_d2f+0x7a>
 8000b62:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000b66:	bfbc      	itt	lt
 8000b68:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000b6c:	4770      	bxlt	lr
 8000b6e:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000b72:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000b76:	f1c2 0218 	rsb	r2, r2, #24
 8000b7a:	f1c2 0c20 	rsb	ip, r2, #32
 8000b7e:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b82:	fa20 f002 	lsr.w	r0, r0, r2
 8000b86:	bf18      	it	ne
 8000b88:	f040 0001 	orrne.w	r0, r0, #1
 8000b8c:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b90:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b94:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b98:	ea40 000c 	orr.w	r0, r0, ip
 8000b9c:	fa23 f302 	lsr.w	r3, r3, r2
 8000ba0:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000ba4:	e7cc      	b.n	8000b40 <__aeabi_d2f+0x14>
 8000ba6:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000baa:	d107      	bne.n	8000bbc <__aeabi_d2f+0x90>
 8000bac:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000bb0:	bf1e      	ittt	ne
 8000bb2:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000bb6:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000bba:	4770      	bxne	lr
 8000bbc:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000bc0:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000bc4:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000bc8:	4770      	bx	lr
 8000bca:	bf00      	nop

08000bcc <__aeabi_uldivmod>:
 8000bcc:	b953      	cbnz	r3, 8000be4 <__aeabi_uldivmod+0x18>
 8000bce:	b94a      	cbnz	r2, 8000be4 <__aeabi_uldivmod+0x18>
 8000bd0:	2900      	cmp	r1, #0
 8000bd2:	bf08      	it	eq
 8000bd4:	2800      	cmpeq	r0, #0
 8000bd6:	bf1c      	itt	ne
 8000bd8:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000bdc:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000be0:	f000 b972 	b.w	8000ec8 <__aeabi_idiv0>
 8000be4:	f1ad 0c08 	sub.w	ip, sp, #8
 8000be8:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000bec:	f000 f806 	bl	8000bfc <__udivmoddi4>
 8000bf0:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000bf4:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000bf8:	b004      	add	sp, #16
 8000bfa:	4770      	bx	lr

08000bfc <__udivmoddi4>:
 8000bfc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c00:	9e08      	ldr	r6, [sp, #32]
 8000c02:	4604      	mov	r4, r0
 8000c04:	4688      	mov	r8, r1
 8000c06:	2b00      	cmp	r3, #0
 8000c08:	d14b      	bne.n	8000ca2 <__udivmoddi4+0xa6>
 8000c0a:	428a      	cmp	r2, r1
 8000c0c:	4615      	mov	r5, r2
 8000c0e:	d967      	bls.n	8000ce0 <__udivmoddi4+0xe4>
 8000c10:	fab2 f282 	clz	r2, r2
 8000c14:	b14a      	cbz	r2, 8000c2a <__udivmoddi4+0x2e>
 8000c16:	f1c2 0720 	rsb	r7, r2, #32
 8000c1a:	fa01 f302 	lsl.w	r3, r1, r2
 8000c1e:	fa20 f707 	lsr.w	r7, r0, r7
 8000c22:	4095      	lsls	r5, r2
 8000c24:	ea47 0803 	orr.w	r8, r7, r3
 8000c28:	4094      	lsls	r4, r2
 8000c2a:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000c2e:	0c23      	lsrs	r3, r4, #16
 8000c30:	fbb8 f7fe 	udiv	r7, r8, lr
 8000c34:	fa1f fc85 	uxth.w	ip, r5
 8000c38:	fb0e 8817 	mls	r8, lr, r7, r8
 8000c3c:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000c40:	fb07 f10c 	mul.w	r1, r7, ip
 8000c44:	4299      	cmp	r1, r3
 8000c46:	d909      	bls.n	8000c5c <__udivmoddi4+0x60>
 8000c48:	18eb      	adds	r3, r5, r3
 8000c4a:	f107 30ff 	add.w	r0, r7, #4294967295	; 0xffffffff
 8000c4e:	f080 811b 	bcs.w	8000e88 <__udivmoddi4+0x28c>
 8000c52:	4299      	cmp	r1, r3
 8000c54:	f240 8118 	bls.w	8000e88 <__udivmoddi4+0x28c>
 8000c58:	3f02      	subs	r7, #2
 8000c5a:	442b      	add	r3, r5
 8000c5c:	1a5b      	subs	r3, r3, r1
 8000c5e:	b2a4      	uxth	r4, r4
 8000c60:	fbb3 f0fe 	udiv	r0, r3, lr
 8000c64:	fb0e 3310 	mls	r3, lr, r0, r3
 8000c68:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000c6c:	fb00 fc0c 	mul.w	ip, r0, ip
 8000c70:	45a4      	cmp	ip, r4
 8000c72:	d909      	bls.n	8000c88 <__udivmoddi4+0x8c>
 8000c74:	192c      	adds	r4, r5, r4
 8000c76:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000c7a:	f080 8107 	bcs.w	8000e8c <__udivmoddi4+0x290>
 8000c7e:	45a4      	cmp	ip, r4
 8000c80:	f240 8104 	bls.w	8000e8c <__udivmoddi4+0x290>
 8000c84:	3802      	subs	r0, #2
 8000c86:	442c      	add	r4, r5
 8000c88:	ea40 4007 	orr.w	r0, r0, r7, lsl #16
 8000c8c:	eba4 040c 	sub.w	r4, r4, ip
 8000c90:	2700      	movs	r7, #0
 8000c92:	b11e      	cbz	r6, 8000c9c <__udivmoddi4+0xa0>
 8000c94:	40d4      	lsrs	r4, r2
 8000c96:	2300      	movs	r3, #0
 8000c98:	e9c6 4300 	strd	r4, r3, [r6]
 8000c9c:	4639      	mov	r1, r7
 8000c9e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000ca2:	428b      	cmp	r3, r1
 8000ca4:	d909      	bls.n	8000cba <__udivmoddi4+0xbe>
 8000ca6:	2e00      	cmp	r6, #0
 8000ca8:	f000 80eb 	beq.w	8000e82 <__udivmoddi4+0x286>
 8000cac:	2700      	movs	r7, #0
 8000cae:	e9c6 0100 	strd	r0, r1, [r6]
 8000cb2:	4638      	mov	r0, r7
 8000cb4:	4639      	mov	r1, r7
 8000cb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000cba:	fab3 f783 	clz	r7, r3
 8000cbe:	2f00      	cmp	r7, #0
 8000cc0:	d147      	bne.n	8000d52 <__udivmoddi4+0x156>
 8000cc2:	428b      	cmp	r3, r1
 8000cc4:	d302      	bcc.n	8000ccc <__udivmoddi4+0xd0>
 8000cc6:	4282      	cmp	r2, r0
 8000cc8:	f200 80fa 	bhi.w	8000ec0 <__udivmoddi4+0x2c4>
 8000ccc:	1a84      	subs	r4, r0, r2
 8000cce:	eb61 0303 	sbc.w	r3, r1, r3
 8000cd2:	2001      	movs	r0, #1
 8000cd4:	4698      	mov	r8, r3
 8000cd6:	2e00      	cmp	r6, #0
 8000cd8:	d0e0      	beq.n	8000c9c <__udivmoddi4+0xa0>
 8000cda:	e9c6 4800 	strd	r4, r8, [r6]
 8000cde:	e7dd      	b.n	8000c9c <__udivmoddi4+0xa0>
 8000ce0:	b902      	cbnz	r2, 8000ce4 <__udivmoddi4+0xe8>
 8000ce2:	deff      	udf	#255	; 0xff
 8000ce4:	fab2 f282 	clz	r2, r2
 8000ce8:	2a00      	cmp	r2, #0
 8000cea:	f040 808f 	bne.w	8000e0c <__udivmoddi4+0x210>
 8000cee:	1b49      	subs	r1, r1, r5
 8000cf0:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000cf4:	fa1f f885 	uxth.w	r8, r5
 8000cf8:	2701      	movs	r7, #1
 8000cfa:	fbb1 fcfe 	udiv	ip, r1, lr
 8000cfe:	0c23      	lsrs	r3, r4, #16
 8000d00:	fb0e 111c 	mls	r1, lr, ip, r1
 8000d04:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000d08:	fb08 f10c 	mul.w	r1, r8, ip
 8000d0c:	4299      	cmp	r1, r3
 8000d0e:	d907      	bls.n	8000d20 <__udivmoddi4+0x124>
 8000d10:	18eb      	adds	r3, r5, r3
 8000d12:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000d16:	d202      	bcs.n	8000d1e <__udivmoddi4+0x122>
 8000d18:	4299      	cmp	r1, r3
 8000d1a:	f200 80cd 	bhi.w	8000eb8 <__udivmoddi4+0x2bc>
 8000d1e:	4684      	mov	ip, r0
 8000d20:	1a59      	subs	r1, r3, r1
 8000d22:	b2a3      	uxth	r3, r4
 8000d24:	fbb1 f0fe 	udiv	r0, r1, lr
 8000d28:	fb0e 1410 	mls	r4, lr, r0, r1
 8000d2c:	ea43 4404 	orr.w	r4, r3, r4, lsl #16
 8000d30:	fb08 f800 	mul.w	r8, r8, r0
 8000d34:	45a0      	cmp	r8, r4
 8000d36:	d907      	bls.n	8000d48 <__udivmoddi4+0x14c>
 8000d38:	192c      	adds	r4, r5, r4
 8000d3a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000d3e:	d202      	bcs.n	8000d46 <__udivmoddi4+0x14a>
 8000d40:	45a0      	cmp	r8, r4
 8000d42:	f200 80b6 	bhi.w	8000eb2 <__udivmoddi4+0x2b6>
 8000d46:	4618      	mov	r0, r3
 8000d48:	eba4 0408 	sub.w	r4, r4, r8
 8000d4c:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000d50:	e79f      	b.n	8000c92 <__udivmoddi4+0x96>
 8000d52:	f1c7 0c20 	rsb	ip, r7, #32
 8000d56:	40bb      	lsls	r3, r7
 8000d58:	fa22 fe0c 	lsr.w	lr, r2, ip
 8000d5c:	ea4e 0e03 	orr.w	lr, lr, r3
 8000d60:	fa01 f407 	lsl.w	r4, r1, r7
 8000d64:	fa20 f50c 	lsr.w	r5, r0, ip
 8000d68:	fa21 f30c 	lsr.w	r3, r1, ip
 8000d6c:	ea4f 481e 	mov.w	r8, lr, lsr #16
 8000d70:	4325      	orrs	r5, r4
 8000d72:	fbb3 f9f8 	udiv	r9, r3, r8
 8000d76:	0c2c      	lsrs	r4, r5, #16
 8000d78:	fb08 3319 	mls	r3, r8, r9, r3
 8000d7c:	fa1f fa8e 	uxth.w	sl, lr
 8000d80:	ea44 4303 	orr.w	r3, r4, r3, lsl #16
 8000d84:	fb09 f40a 	mul.w	r4, r9, sl
 8000d88:	429c      	cmp	r4, r3
 8000d8a:	fa02 f207 	lsl.w	r2, r2, r7
 8000d8e:	fa00 f107 	lsl.w	r1, r0, r7
 8000d92:	d90b      	bls.n	8000dac <__udivmoddi4+0x1b0>
 8000d94:	eb1e 0303 	adds.w	r3, lr, r3
 8000d98:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000d9c:	f080 8087 	bcs.w	8000eae <__udivmoddi4+0x2b2>
 8000da0:	429c      	cmp	r4, r3
 8000da2:	f240 8084 	bls.w	8000eae <__udivmoddi4+0x2b2>
 8000da6:	f1a9 0902 	sub.w	r9, r9, #2
 8000daa:	4473      	add	r3, lr
 8000dac:	1b1b      	subs	r3, r3, r4
 8000dae:	b2ad      	uxth	r5, r5
 8000db0:	fbb3 f0f8 	udiv	r0, r3, r8
 8000db4:	fb08 3310 	mls	r3, r8, r0, r3
 8000db8:	ea45 4403 	orr.w	r4, r5, r3, lsl #16
 8000dbc:	fb00 fa0a 	mul.w	sl, r0, sl
 8000dc0:	45a2      	cmp	sl, r4
 8000dc2:	d908      	bls.n	8000dd6 <__udivmoddi4+0x1da>
 8000dc4:	eb1e 0404 	adds.w	r4, lr, r4
 8000dc8:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000dcc:	d26b      	bcs.n	8000ea6 <__udivmoddi4+0x2aa>
 8000dce:	45a2      	cmp	sl, r4
 8000dd0:	d969      	bls.n	8000ea6 <__udivmoddi4+0x2aa>
 8000dd2:	3802      	subs	r0, #2
 8000dd4:	4474      	add	r4, lr
 8000dd6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000dda:	fba0 8902 	umull	r8, r9, r0, r2
 8000dde:	eba4 040a 	sub.w	r4, r4, sl
 8000de2:	454c      	cmp	r4, r9
 8000de4:	46c2      	mov	sl, r8
 8000de6:	464b      	mov	r3, r9
 8000de8:	d354      	bcc.n	8000e94 <__udivmoddi4+0x298>
 8000dea:	d051      	beq.n	8000e90 <__udivmoddi4+0x294>
 8000dec:	2e00      	cmp	r6, #0
 8000dee:	d069      	beq.n	8000ec4 <__udivmoddi4+0x2c8>
 8000df0:	ebb1 050a 	subs.w	r5, r1, sl
 8000df4:	eb64 0403 	sbc.w	r4, r4, r3
 8000df8:	fa04 fc0c 	lsl.w	ip, r4, ip
 8000dfc:	40fd      	lsrs	r5, r7
 8000dfe:	40fc      	lsrs	r4, r7
 8000e00:	ea4c 0505 	orr.w	r5, ip, r5
 8000e04:	e9c6 5400 	strd	r5, r4, [r6]
 8000e08:	2700      	movs	r7, #0
 8000e0a:	e747      	b.n	8000c9c <__udivmoddi4+0xa0>
 8000e0c:	f1c2 0320 	rsb	r3, r2, #32
 8000e10:	fa20 f703 	lsr.w	r7, r0, r3
 8000e14:	4095      	lsls	r5, r2
 8000e16:	fa01 f002 	lsl.w	r0, r1, r2
 8000e1a:	fa21 f303 	lsr.w	r3, r1, r3
 8000e1e:	ea4f 4e15 	mov.w	lr, r5, lsr #16
 8000e22:	4338      	orrs	r0, r7
 8000e24:	0c01      	lsrs	r1, r0, #16
 8000e26:	fbb3 f7fe 	udiv	r7, r3, lr
 8000e2a:	fa1f f885 	uxth.w	r8, r5
 8000e2e:	fb0e 3317 	mls	r3, lr, r7, r3
 8000e32:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e36:	fb07 f308 	mul.w	r3, r7, r8
 8000e3a:	428b      	cmp	r3, r1
 8000e3c:	fa04 f402 	lsl.w	r4, r4, r2
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x256>
 8000e42:	1869      	adds	r1, r5, r1
 8000e44:	f107 3cff 	add.w	ip, r7, #4294967295	; 0xffffffff
 8000e48:	d22f      	bcs.n	8000eaa <__udivmoddi4+0x2ae>
 8000e4a:	428b      	cmp	r3, r1
 8000e4c:	d92d      	bls.n	8000eaa <__udivmoddi4+0x2ae>
 8000e4e:	3f02      	subs	r7, #2
 8000e50:	4429      	add	r1, r5
 8000e52:	1acb      	subs	r3, r1, r3
 8000e54:	b281      	uxth	r1, r0
 8000e56:	fbb3 f0fe 	udiv	r0, r3, lr
 8000e5a:	fb0e 3310 	mls	r3, lr, r0, r3
 8000e5e:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e62:	fb00 f308 	mul.w	r3, r0, r8
 8000e66:	428b      	cmp	r3, r1
 8000e68:	d907      	bls.n	8000e7a <__udivmoddi4+0x27e>
 8000e6a:	1869      	adds	r1, r5, r1
 8000e6c:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000e70:	d217      	bcs.n	8000ea2 <__udivmoddi4+0x2a6>
 8000e72:	428b      	cmp	r3, r1
 8000e74:	d915      	bls.n	8000ea2 <__udivmoddi4+0x2a6>
 8000e76:	3802      	subs	r0, #2
 8000e78:	4429      	add	r1, r5
 8000e7a:	1ac9      	subs	r1, r1, r3
 8000e7c:	ea40 4707 	orr.w	r7, r0, r7, lsl #16
 8000e80:	e73b      	b.n	8000cfa <__udivmoddi4+0xfe>
 8000e82:	4637      	mov	r7, r6
 8000e84:	4630      	mov	r0, r6
 8000e86:	e709      	b.n	8000c9c <__udivmoddi4+0xa0>
 8000e88:	4607      	mov	r7, r0
 8000e8a:	e6e7      	b.n	8000c5c <__udivmoddi4+0x60>
 8000e8c:	4618      	mov	r0, r3
 8000e8e:	e6fb      	b.n	8000c88 <__udivmoddi4+0x8c>
 8000e90:	4541      	cmp	r1, r8
 8000e92:	d2ab      	bcs.n	8000dec <__udivmoddi4+0x1f0>
 8000e94:	ebb8 0a02 	subs.w	sl, r8, r2
 8000e98:	eb69 020e 	sbc.w	r2, r9, lr
 8000e9c:	3801      	subs	r0, #1
 8000e9e:	4613      	mov	r3, r2
 8000ea0:	e7a4      	b.n	8000dec <__udivmoddi4+0x1f0>
 8000ea2:	4660      	mov	r0, ip
 8000ea4:	e7e9      	b.n	8000e7a <__udivmoddi4+0x27e>
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	e795      	b.n	8000dd6 <__udivmoddi4+0x1da>
 8000eaa:	4667      	mov	r7, ip
 8000eac:	e7d1      	b.n	8000e52 <__udivmoddi4+0x256>
 8000eae:	4681      	mov	r9, r0
 8000eb0:	e77c      	b.n	8000dac <__udivmoddi4+0x1b0>
 8000eb2:	3802      	subs	r0, #2
 8000eb4:	442c      	add	r4, r5
 8000eb6:	e747      	b.n	8000d48 <__udivmoddi4+0x14c>
 8000eb8:	f1ac 0c02 	sub.w	ip, ip, #2
 8000ebc:	442b      	add	r3, r5
 8000ebe:	e72f      	b.n	8000d20 <__udivmoddi4+0x124>
 8000ec0:	4638      	mov	r0, r7
 8000ec2:	e708      	b.n	8000cd6 <__udivmoddi4+0xda>
 8000ec4:	4637      	mov	r7, r6
 8000ec6:	e6e9      	b.n	8000c9c <__udivmoddi4+0xa0>

08000ec8 <__aeabi_idiv0>:
 8000ec8:	4770      	bx	lr
 8000eca:	bf00      	nop

08000ecc <mrac>:
 *
 * This can be used with multiple outputs and references
 * HINT: Look up my repository Adaptive-Control and look for Model Reference Adaptive Control with Lyapunov rule
 * HINT: The book Adaptive Control by Karl-Johan Åström describe on page 208 how this works. ISBN: 9780486462783
 */
void mrac(float limit, float gain, float* y, float* u, float* r, float* I1, float* I2, uint8_t RDIM){
 8000ecc:	b5b0      	push	{r4, r5, r7, lr}
 8000ece:	b08a      	sub	sp, #40	; 0x28
 8000ed0:	af02      	add	r7, sp, #8
 8000ed2:	ed87 0a05 	vstr	s0, [r7, #20]
 8000ed6:	edc7 0a04 	vstr	s1, [r7, #16]
 8000eda:	60f8      	str	r0, [r7, #12]
 8000edc:	60b9      	str	r1, [r7, #8]
 8000ede:	607a      	str	r2, [r7, #4]
 8000ee0:	603b      	str	r3, [r7, #0]
 8000ee2:	466b      	mov	r3, sp
 8000ee4:	461d      	mov	r5, r3

	// Find the model error
	float e[RDIM];
 8000ee6:	f897 0034 	ldrb.w	r0, [r7, #52]	; 0x34
 8000eea:	4603      	mov	r3, r0
 8000eec:	3b01      	subs	r3, #1
 8000eee:	61fb      	str	r3, [r7, #28]
 8000ef0:	b2c1      	uxtb	r1, r0
 8000ef2:	f04f 0200 	mov.w	r2, #0
 8000ef6:	f04f 0300 	mov.w	r3, #0
 8000efa:	f04f 0400 	mov.w	r4, #0
 8000efe:	0154      	lsls	r4, r2, #5
 8000f00:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000f04:	014b      	lsls	r3, r1, #5
 8000f06:	b2c1      	uxtb	r1, r0
 8000f08:	f04f 0200 	mov.w	r2, #0
 8000f0c:	f04f 0300 	mov.w	r3, #0
 8000f10:	f04f 0400 	mov.w	r4, #0
 8000f14:	0154      	lsls	r4, r2, #5
 8000f16:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 8000f1a:	014b      	lsls	r3, r1, #5
 8000f1c:	4603      	mov	r3, r0
 8000f1e:	009b      	lsls	r3, r3, #2
 8000f20:	3303      	adds	r3, #3
 8000f22:	3307      	adds	r3, #7
 8000f24:	08db      	lsrs	r3, r3, #3
 8000f26:	00db      	lsls	r3, r3, #3
 8000f28:	ebad 0d03 	sub.w	sp, sp, r3
 8000f2c:	ab02      	add	r3, sp, #8
 8000f2e:	3303      	adds	r3, #3
 8000f30:	089b      	lsrs	r3, r3, #2
 8000f32:	009b      	lsls	r3, r3, #2
 8000f34:	61bb      	str	r3, [r7, #24]
	modelerror(e, y, r, RDIM);
 8000f36:	69b8      	ldr	r0, [r7, #24]
 8000f38:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f3c:	687a      	ldr	r2, [r7, #4]
 8000f3e:	68f9      	ldr	r1, [r7, #12]
 8000f40:	f000 f89b 	bl	800107a <modelerror>

	// Integrate
	integral(I1, -gain, r, e, RDIM); // I1 = I1 - gain*r*e
 8000f44:	edd7 7a04 	vldr	s15, [r7, #16]
 8000f48:	eef1 7a67 	vneg.f32	s15, s15
 8000f4c:	69ba      	ldr	r2, [r7, #24]
 8000f4e:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f52:	6879      	ldr	r1, [r7, #4]
 8000f54:	eeb0 0a67 	vmov.f32	s0, s15
 8000f58:	6838      	ldr	r0, [r7, #0]
 8000f5a:	f000 f829 	bl	8000fb0 <integral>
	integral(I2, gain, y, e, RDIM); // I2 = I2 + gain*y*e
 8000f5e:	69ba      	ldr	r2, [r7, #24]
 8000f60:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f64:	68f9      	ldr	r1, [r7, #12]
 8000f66:	ed97 0a04 	vldr	s0, [r7, #16]
 8000f6a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f6c:	f000 f820 	bl	8000fb0 <integral>

	// Saturate
	saturate(I1, limit, RDIM);
 8000f70:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f74:	4619      	mov	r1, r3
 8000f76:	ed97 0a05 	vldr	s0, [r7, #20]
 8000f7a:	6838      	ldr	r0, [r7, #0]
 8000f7c:	f000 f851 	bl	8001022 <saturate>
	saturate(I2, limit, RDIM);
 8000f80:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f84:	4619      	mov	r1, r3
 8000f86:	ed97 0a05 	vldr	s0, [r7, #20]
 8000f8a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8000f8c:	f000 f849 	bl	8001022 <saturate>

	// Find input signal
	findinput(u, r, I1, y, I2, RDIM);
 8000f90:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 8000f94:	9301      	str	r3, [sp, #4]
 8000f96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8000f98:	9300      	str	r3, [sp, #0]
 8000f9a:	68fb      	ldr	r3, [r7, #12]
 8000f9c:	683a      	ldr	r2, [r7, #0]
 8000f9e:	6879      	ldr	r1, [r7, #4]
 8000fa0:	68b8      	ldr	r0, [r7, #8]
 8000fa2:	f000 f895 	bl	80010d0 <findinput>
 8000fa6:	46ad      	mov	sp, r5
}
 8000fa8:	bf00      	nop
 8000faa:	3720      	adds	r7, #32
 8000fac:	46bd      	mov	sp, r7
 8000fae:	bdb0      	pop	{r4, r5, r7, pc}

08000fb0 <integral>:

static void integral(float* I, float gain, float* x, float *e, uint8_t RDIM){
 8000fb0:	b480      	push	{r7}
 8000fb2:	b089      	sub	sp, #36	; 0x24
 8000fb4:	af00      	add	r7, sp, #0
 8000fb6:	6178      	str	r0, [r7, #20]
 8000fb8:	ed87 0a04 	vstr	s0, [r7, #16]
 8000fbc:	60f9      	str	r1, [r7, #12]
 8000fbe:	60ba      	str	r2, [r7, #8]
 8000fc0:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < RDIM; i++)
 8000fc2:	2300      	movs	r3, #0
 8000fc4:	77fb      	strb	r3, [r7, #31]
 8000fc6:	e022      	b.n	800100e <integral+0x5e>
		*(I + i) += gain* *(x + i) * *(e + i);
 8000fc8:	7ffb      	ldrb	r3, [r7, #31]
 8000fca:	009b      	lsls	r3, r3, #2
 8000fcc:	697a      	ldr	r2, [r7, #20]
 8000fce:	4413      	add	r3, r2
 8000fd0:	ed93 7a00 	vldr	s14, [r3]
 8000fd4:	7ffb      	ldrb	r3, [r7, #31]
 8000fd6:	009b      	lsls	r3, r3, #2
 8000fd8:	68fa      	ldr	r2, [r7, #12]
 8000fda:	4413      	add	r3, r2
 8000fdc:	edd3 6a00 	vldr	s13, [r3]
 8000fe0:	edd7 7a04 	vldr	s15, [r7, #16]
 8000fe4:	ee66 6aa7 	vmul.f32	s13, s13, s15
 8000fe8:	7ffb      	ldrb	r3, [r7, #31]
 8000fea:	009b      	lsls	r3, r3, #2
 8000fec:	68ba      	ldr	r2, [r7, #8]
 8000fee:	4413      	add	r3, r2
 8000ff0:	edd3 7a00 	vldr	s15, [r3]
 8000ff4:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8000ff8:	7ffb      	ldrb	r3, [r7, #31]
 8000ffa:	009b      	lsls	r3, r3, #2
 8000ffc:	697a      	ldr	r2, [r7, #20]
 8000ffe:	4413      	add	r3, r2
 8001000:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001004:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i = 0; i < RDIM; i++)
 8001008:	7ffb      	ldrb	r3, [r7, #31]
 800100a:	3301      	adds	r3, #1
 800100c:	77fb      	strb	r3, [r7, #31]
 800100e:	7ffa      	ldrb	r2, [r7, #31]
 8001010:	79fb      	ldrb	r3, [r7, #7]
 8001012:	429a      	cmp	r2, r3
 8001014:	d3d8      	bcc.n	8000fc8 <integral+0x18>
}
 8001016:	bf00      	nop
 8001018:	3724      	adds	r7, #36	; 0x24
 800101a:	46bd      	mov	sp, r7
 800101c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001020:	4770      	bx	lr

08001022 <saturate>:

static void saturate(float* I, float limit, uint8_t RDIM){
 8001022:	b590      	push	{r4, r7, lr}
 8001024:	b087      	sub	sp, #28
 8001026:	af00      	add	r7, sp, #0
 8001028:	60f8      	str	r0, [r7, #12]
 800102a:	ed87 0a02 	vstr	s0, [r7, #8]
 800102e:	460b      	mov	r3, r1
 8001030:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i < RDIM; i++)
 8001032:	2300      	movs	r3, #0
 8001034:	75fb      	strb	r3, [r7, #23]
 8001036:	e018      	b.n	800106a <saturate+0x48>
		*(I + i) = saturation(*(I + i), limit, limit);
 8001038:	7dfb      	ldrb	r3, [r7, #23]
 800103a:	009b      	lsls	r3, r3, #2
 800103c:	68fa      	ldr	r2, [r7, #12]
 800103e:	4413      	add	r3, r2
 8001040:	edd3 7a00 	vldr	s15, [r3]
 8001044:	7dfb      	ldrb	r3, [r7, #23]
 8001046:	009b      	lsls	r3, r3, #2
 8001048:	68fa      	ldr	r2, [r7, #12]
 800104a:	18d4      	adds	r4, r2, r3
 800104c:	ed97 1a02 	vldr	s2, [r7, #8]
 8001050:	edd7 0a02 	vldr	s1, [r7, #8]
 8001054:	eeb0 0a67 	vmov.f32	s0, s15
 8001058:	f000 f876 	bl	8001148 <saturation>
 800105c:	eef0 7a40 	vmov.f32	s15, s0
 8001060:	edc4 7a00 	vstr	s15, [r4]
	for(uint8_t i = 0; i < RDIM; i++)
 8001064:	7dfb      	ldrb	r3, [r7, #23]
 8001066:	3301      	adds	r3, #1
 8001068:	75fb      	strb	r3, [r7, #23]
 800106a:	7dfa      	ldrb	r2, [r7, #23]
 800106c:	79fb      	ldrb	r3, [r7, #7]
 800106e:	429a      	cmp	r2, r3
 8001070:	d3e2      	bcc.n	8001038 <saturate+0x16>
}
 8001072:	bf00      	nop
 8001074:	371c      	adds	r7, #28
 8001076:	46bd      	mov	sp, r7
 8001078:	bd90      	pop	{r4, r7, pc}

0800107a <modelerror>:

static void modelerror(float* e, float* y, float* r, uint8_t RDIM){
 800107a:	b480      	push	{r7}
 800107c:	b087      	sub	sp, #28
 800107e:	af00      	add	r7, sp, #0
 8001080:	60f8      	str	r0, [r7, #12]
 8001082:	60b9      	str	r1, [r7, #8]
 8001084:	607a      	str	r2, [r7, #4]
 8001086:	70fb      	strb	r3, [r7, #3]
	for(uint8_t i = 0; i < RDIM; i++)
 8001088:	2300      	movs	r3, #0
 800108a:	75fb      	strb	r3, [r7, #23]
 800108c:	e016      	b.n	80010bc <modelerror+0x42>
		*(e + i) = *(y + i) - *(r + i);
 800108e:	7dfb      	ldrb	r3, [r7, #23]
 8001090:	009b      	lsls	r3, r3, #2
 8001092:	68ba      	ldr	r2, [r7, #8]
 8001094:	4413      	add	r3, r2
 8001096:	ed93 7a00 	vldr	s14, [r3]
 800109a:	7dfb      	ldrb	r3, [r7, #23]
 800109c:	009b      	lsls	r3, r3, #2
 800109e:	687a      	ldr	r2, [r7, #4]
 80010a0:	4413      	add	r3, r2
 80010a2:	edd3 7a00 	vldr	s15, [r3]
 80010a6:	7dfb      	ldrb	r3, [r7, #23]
 80010a8:	009b      	lsls	r3, r3, #2
 80010aa:	68fa      	ldr	r2, [r7, #12]
 80010ac:	4413      	add	r3, r2
 80010ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80010b2:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i = 0; i < RDIM; i++)
 80010b6:	7dfb      	ldrb	r3, [r7, #23]
 80010b8:	3301      	adds	r3, #1
 80010ba:	75fb      	strb	r3, [r7, #23]
 80010bc:	7dfa      	ldrb	r2, [r7, #23]
 80010be:	78fb      	ldrb	r3, [r7, #3]
 80010c0:	429a      	cmp	r2, r3
 80010c2:	d3e4      	bcc.n	800108e <modelerror+0x14>
}
 80010c4:	bf00      	nop
 80010c6:	371c      	adds	r7, #28
 80010c8:	46bd      	mov	sp, r7
 80010ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010ce:	4770      	bx	lr

080010d0 <findinput>:

static void findinput(float* u, float* r, float* I1, float* y, float* I2, uint8_t RDIM){
 80010d0:	b480      	push	{r7}
 80010d2:	b087      	sub	sp, #28
 80010d4:	af00      	add	r7, sp, #0
 80010d6:	60f8      	str	r0, [r7, #12]
 80010d8:	60b9      	str	r1, [r7, #8]
 80010da:	607a      	str	r2, [r7, #4]
 80010dc:	603b      	str	r3, [r7, #0]
	for(uint8_t i = 0; i < RDIM; i++)
 80010de:	2300      	movs	r3, #0
 80010e0:	75fb      	strb	r3, [r7, #23]
 80010e2:	e026      	b.n	8001132 <findinput+0x62>
		*(u + i) = *(r + i) * *(I1 + i) - *(y + i) * *(I2 + i);
 80010e4:	7dfb      	ldrb	r3, [r7, #23]
 80010e6:	009b      	lsls	r3, r3, #2
 80010e8:	68ba      	ldr	r2, [r7, #8]
 80010ea:	4413      	add	r3, r2
 80010ec:	ed93 7a00 	vldr	s14, [r3]
 80010f0:	7dfb      	ldrb	r3, [r7, #23]
 80010f2:	009b      	lsls	r3, r3, #2
 80010f4:	687a      	ldr	r2, [r7, #4]
 80010f6:	4413      	add	r3, r2
 80010f8:	edd3 7a00 	vldr	s15, [r3]
 80010fc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001100:	7dfb      	ldrb	r3, [r7, #23]
 8001102:	009b      	lsls	r3, r3, #2
 8001104:	683a      	ldr	r2, [r7, #0]
 8001106:	4413      	add	r3, r2
 8001108:	edd3 6a00 	vldr	s13, [r3]
 800110c:	7dfb      	ldrb	r3, [r7, #23]
 800110e:	009b      	lsls	r3, r3, #2
 8001110:	6a3a      	ldr	r2, [r7, #32]
 8001112:	4413      	add	r3, r2
 8001114:	edd3 7a00 	vldr	s15, [r3]
 8001118:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800111c:	7dfb      	ldrb	r3, [r7, #23]
 800111e:	009b      	lsls	r3, r3, #2
 8001120:	68fa      	ldr	r2, [r7, #12]
 8001122:	4413      	add	r3, r2
 8001124:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001128:	edc3 7a00 	vstr	s15, [r3]
	for(uint8_t i = 0; i < RDIM; i++)
 800112c:	7dfb      	ldrb	r3, [r7, #23]
 800112e:	3301      	adds	r3, #1
 8001130:	75fb      	strb	r3, [r7, #23]
 8001132:	7dfa      	ldrb	r2, [r7, #23]
 8001134:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8001138:	429a      	cmp	r2, r3
 800113a:	d3d3      	bcc.n	80010e4 <findinput+0x14>
}
 800113c:	bf00      	nop
 800113e:	371c      	adds	r7, #28
 8001140:	46bd      	mov	sp, r7
 8001142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001146:	4770      	bx	lr

08001148 <saturation>:
#include "../../Headers/Functions.h"

/*
 * This will saturate the input value with limits
 */
float saturation(float input, float lower_limit, float upper_limit){
 8001148:	b480      	push	{r7}
 800114a:	b085      	sub	sp, #20
 800114c:	af00      	add	r7, sp, #0
 800114e:	ed87 0a03 	vstr	s0, [r7, #12]
 8001152:	edc7 0a02 	vstr	s1, [r7, #8]
 8001156:	ed87 1a01 	vstr	s2, [r7, #4]
	if(input > upper_limit){
 800115a:	ed97 7a03 	vldr	s14, [r7, #12]
 800115e:	edd7 7a01 	vldr	s15, [r7, #4]
 8001162:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001166:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800116a:	dd01      	ble.n	8001170 <saturation+0x28>
		return upper_limit;
 800116c:	687b      	ldr	r3, [r7, #4]
 800116e:	e00b      	b.n	8001188 <saturation+0x40>
	}else if(input < lower_limit){
 8001170:	ed97 7a03 	vldr	s14, [r7, #12]
 8001174:	edd7 7a02 	vldr	s15, [r7, #8]
 8001178:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800117c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001180:	d501      	bpl.n	8001186 <saturation+0x3e>
		return lower_limit;
 8001182:	68bb      	ldr	r3, [r7, #8]
 8001184:	e000      	b.n	8001188 <saturation+0x40>
	}else{
		return input; // No action
 8001186:	68fb      	ldr	r3, [r7, #12]
 8001188:	ee07 3a90 	vmov	s15, r3
	}
}
 800118c:	eeb0 0a67 	vmov.f32	s0, s15
 8001190:	3714      	adds	r7, #20
 8001192:	46bd      	mov	sp, r7
 8001194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001198:	4770      	bx	lr

0800119a <Encoder_init>:
 * Use a timer and select combined channels -> Encoder Mode.
 * Then select our prescaler and the counter period
 * Then select Encoder Mode TI1 and TI2.
 * Leave the rest as default
 */
void Encoder_init(Encoder *encoder, TIM_HandleTypeDef *htim, uint16_t one_rotation_pulses) {
 800119a:	b480      	push	{r7}
 800119c:	b085      	sub	sp, #20
 800119e:	af00      	add	r7, sp, #0
 80011a0:	60f8      	str	r0, [r7, #12]
 80011a2:	60b9      	str	r1, [r7, #8]
 80011a4:	4613      	mov	r3, r2
 80011a6:	80fb      	strh	r3, [r7, #6]
	encoder->htim = htim;
 80011a8:	68fb      	ldr	r3, [r7, #12]
 80011aa:	68ba      	ldr	r2, [r7, #8]
 80011ac:	611a      	str	r2, [r3, #16]
	encoder->one_rotation_pulses = one_rotation_pulses;
 80011ae:	68fb      	ldr	r3, [r7, #12]
 80011b0:	88fa      	ldrh	r2, [r7, #6]
 80011b2:	815a      	strh	r2, [r3, #10]
}
 80011b4:	bf00      	nop
 80011b6:	3714      	adds	r7, #20
 80011b8:	46bd      	mov	sp, r7
 80011ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011be:	4770      	bx	lr

080011c0 <Encoder_count>:

void Encoder_count(Encoder *encoder) {
 80011c0:	b580      	push	{r7, lr}
 80011c2:	b082      	sub	sp, #8
 80011c4:	af00      	add	r7, sp, #0
 80011c6:	6078      	str	r0, [r7, #4]
	if (HAL_GetTick() - encoder->tick > 1000L) {
 80011c8:	f007 fd36 	bl	8008c38 <HAL_GetTick>
 80011cc:	4602      	mov	r2, r0
 80011ce:	687b      	ldr	r3, [r7, #4]
 80011d0:	68db      	ldr	r3, [r3, #12]
 80011d2:	1ad3      	subs	r3, r2, r3
 80011d4:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80011d8:	f240 80b3 	bls.w	8001342 <Encoder_count+0x182>
		/* Control TIM for every check_every_ms */
		encoder->cnt2 = encoder->htim->Instance->CNT;
 80011dc:	687b      	ldr	r3, [r7, #4]
 80011de:	691b      	ldr	r3, [r3, #16]
 80011e0:	681b      	ldr	r3, [r3, #0]
 80011e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80011e4:	b29a      	uxth	r2, r3
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	809a      	strh	r2, [r3, #4]

		/* Control the rotation count */
		if (__HAL_TIM_IS_TIM_COUNTING_DOWN(encoder->htim)) {
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	691b      	ldr	r3, [r3, #16]
 80011ee:	681b      	ldr	r3, [r3, #0]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	f003 0310 	and.w	r3, r3, #16
 80011f6:	2b10      	cmp	r3, #16
 80011f8:	d114      	bne.n	8001224 <Encoder_count+0x64>
			encoder->dir = 1;
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	2201      	movs	r2, #1
 80011fe:	701a      	strb	r2, [r3, #0]
			/* __HAL_TIM_IS_TIM_COUNTING_DOWN Exception when the macro is wrong configured */
			if ((encoder->cnt2 > encoder->cnt1) && (encoder->cnt2 - encoder->cnt1 < 100))
 8001200:	687b      	ldr	r3, [r7, #4]
 8001202:	889a      	ldrh	r2, [r3, #4]
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	885b      	ldrh	r3, [r3, #2]
 8001208:	429a      	cmp	r2, r3
 800120a:	d91f      	bls.n	800124c <Encoder_count+0x8c>
 800120c:	687b      	ldr	r3, [r7, #4]
 800120e:	889b      	ldrh	r3, [r3, #4]
 8001210:	461a      	mov	r2, r3
 8001212:	687b      	ldr	r3, [r7, #4]
 8001214:	885b      	ldrh	r3, [r3, #2]
 8001216:	1ad3      	subs	r3, r2, r3
 8001218:	2b63      	cmp	r3, #99	; 0x63
 800121a:	dc17      	bgt.n	800124c <Encoder_count+0x8c>
				encoder->dir = 0;
 800121c:	687b      	ldr	r3, [r7, #4]
 800121e:	2200      	movs	r2, #0
 8001220:	701a      	strb	r2, [r3, #0]
 8001222:	e013      	b.n	800124c <Encoder_count+0x8c>
		} else {
			encoder->dir = 0;
 8001224:	687b      	ldr	r3, [r7, #4]
 8001226:	2200      	movs	r2, #0
 8001228:	701a      	strb	r2, [r3, #0]
			/* __HAL_TIM_IS_TIM_COUNTING_DOWN Excepting when the macro gives error */
			if ((encoder->cnt1 > encoder->cnt2) && (encoder->cnt1 - encoder->cnt2 < 100))
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	885a      	ldrh	r2, [r3, #2]
 800122e:	687b      	ldr	r3, [r7, #4]
 8001230:	889b      	ldrh	r3, [r3, #4]
 8001232:	429a      	cmp	r2, r3
 8001234:	d90a      	bls.n	800124c <Encoder_count+0x8c>
 8001236:	687b      	ldr	r3, [r7, #4]
 8001238:	885b      	ldrh	r3, [r3, #2]
 800123a:	461a      	mov	r2, r3
 800123c:	687b      	ldr	r3, [r7, #4]
 800123e:	889b      	ldrh	r3, [r3, #4]
 8001240:	1ad3      	subs	r3, r2, r3
 8001242:	2b63      	cmp	r3, #99	; 0x63
 8001244:	dc02      	bgt.n	800124c <Encoder_count+0x8c>
				encoder->dir = 1;
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2201      	movs	r2, #1
 800124a:	701a      	strb	r2, [r3, #0]
		}

		if (encoder->dir) {
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d01e      	beq.n	8001292 <Encoder_count+0xd2>
			/* Down Counting */
			if (encoder->cnt1 >= encoder->cnt2)
 8001254:	687b      	ldr	r3, [r7, #4]
 8001256:	885a      	ldrh	r2, [r3, #2]
 8001258:	687b      	ldr	r3, [r7, #4]
 800125a:	889b      	ldrh	r3, [r3, #4]
 800125c:	429a      	cmp	r2, r3
 800125e:	d308      	bcc.n	8001272 <Encoder_count+0xb2>
				encoder->diff = encoder->cnt1 - encoder->cnt2;
 8001260:	687b      	ldr	r3, [r7, #4]
 8001262:	885a      	ldrh	r2, [r3, #2]
 8001264:	687b      	ldr	r3, [r7, #4]
 8001266:	889b      	ldrh	r3, [r3, #4]
 8001268:	1ad3      	subs	r3, r2, r3
 800126a:	b29a      	uxth	r2, r3
 800126c:	687b      	ldr	r3, [r7, #4]
 800126e:	80da      	strh	r2, [r3, #6]
 8001270:	e02d      	b.n	80012ce <Encoder_count+0x10e>
			else
				encoder->diff = (encoder->htim->Instance->ARR + encoder->cnt1) - encoder->cnt2;
 8001272:	687b      	ldr	r3, [r7, #4]
 8001274:	691b      	ldr	r3, [r3, #16]
 8001276:	681b      	ldr	r3, [r3, #0]
 8001278:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800127a:	b29a      	uxth	r2, r3
 800127c:	687b      	ldr	r3, [r7, #4]
 800127e:	885b      	ldrh	r3, [r3, #2]
 8001280:	4413      	add	r3, r2
 8001282:	b29a      	uxth	r2, r3
 8001284:	687b      	ldr	r3, [r7, #4]
 8001286:	889b      	ldrh	r3, [r3, #4]
 8001288:	1ad3      	subs	r3, r2, r3
 800128a:	b29a      	uxth	r2, r3
 800128c:	687b      	ldr	r3, [r7, #4]
 800128e:	80da      	strh	r2, [r3, #6]
 8001290:	e01d      	b.n	80012ce <Encoder_count+0x10e>
		} else {
			/* Up Counting */
			if (encoder->cnt2 >= encoder->cnt1)
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	889a      	ldrh	r2, [r3, #4]
 8001296:	687b      	ldr	r3, [r7, #4]
 8001298:	885b      	ldrh	r3, [r3, #2]
 800129a:	429a      	cmp	r2, r3
 800129c:	d308      	bcc.n	80012b0 <Encoder_count+0xf0>
				encoder->diff = encoder->cnt2 - encoder->cnt1;
 800129e:	687b      	ldr	r3, [r7, #4]
 80012a0:	889a      	ldrh	r2, [r3, #4]
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	885b      	ldrh	r3, [r3, #2]
 80012a6:	1ad3      	subs	r3, r2, r3
 80012a8:	b29a      	uxth	r2, r3
 80012aa:	687b      	ldr	r3, [r7, #4]
 80012ac:	80da      	strh	r2, [r3, #6]
 80012ae:	e00e      	b.n	80012ce <Encoder_count+0x10e>
			else
				encoder->diff = (encoder->htim->Instance->ARR + encoder->cnt2) - encoder->cnt1;
 80012b0:	687b      	ldr	r3, [r7, #4]
 80012b2:	691b      	ldr	r3, [r3, #16]
 80012b4:	681b      	ldr	r3, [r3, #0]
 80012b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80012b8:	b29a      	uxth	r2, r3
 80012ba:	687b      	ldr	r3, [r7, #4]
 80012bc:	889b      	ldrh	r3, [r3, #4]
 80012be:	4413      	add	r3, r2
 80012c0:	b29a      	uxth	r2, r3
 80012c2:	687b      	ldr	r3, [r7, #4]
 80012c4:	885b      	ldrh	r3, [r3, #2]
 80012c6:	1ad3      	subs	r3, r2, r3
 80012c8:	b29a      	uxth	r2, r3
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	80da      	strh	r2, [r3, #6]
		}

		if ((encoder->htim->Instance->SMCR & 0x03) == 0x03) {
 80012ce:	687b      	ldr	r3, [r7, #4]
 80012d0:	691b      	ldr	r3, [r3, #16]
 80012d2:	681b      	ldr	r3, [r3, #0]
 80012d4:	689b      	ldr	r3, [r3, #8]
 80012d6:	f003 0303 	and.w	r3, r3, #3
 80012da:	2b03      	cmp	r3, #3
 80012dc:	d113      	bne.n	8001306 <Encoder_count+0x146>
			/* X4 Mode Countering increase with 4 Pulse */
			encoder->speed = encoder->diff * 60 / 4 / encoder->one_rotation_pulses; //RPM x 60
 80012de:	687b      	ldr	r3, [r7, #4]
 80012e0:	88db      	ldrh	r3, [r3, #6]
 80012e2:	461a      	mov	r2, r3
 80012e4:	4613      	mov	r3, r2
 80012e6:	011b      	lsls	r3, r3, #4
 80012e8:	1a9b      	subs	r3, r3, r2
 80012ea:	009b      	lsls	r3, r3, #2
 80012ec:	2b00      	cmp	r3, #0
 80012ee:	da00      	bge.n	80012f2 <Encoder_count+0x132>
 80012f0:	3303      	adds	r3, #3
 80012f2:	109b      	asrs	r3, r3, #2
 80012f4:	461a      	mov	r2, r3
 80012f6:	687b      	ldr	r3, [r7, #4]
 80012f8:	895b      	ldrh	r3, [r3, #10]
 80012fa:	fb92 f3f3 	sdiv	r3, r2, r3
 80012fe:	b29a      	uxth	r2, r3
 8001300:	687b      	ldr	r3, [r7, #4]
 8001302:	811a      	strh	r2, [r3, #8]
 8001304:	e011      	b.n	800132a <Encoder_count+0x16a>
		} else {
			/* X4 Mode Countering increase with 2 Pulse */
			encoder->speed = encoder->diff * 60 / 2 / encoder->one_rotation_pulses; //RPM x 60
 8001306:	687b      	ldr	r3, [r7, #4]
 8001308:	88db      	ldrh	r3, [r3, #6]
 800130a:	461a      	mov	r2, r3
 800130c:	4613      	mov	r3, r2
 800130e:	011b      	lsls	r3, r3, #4
 8001310:	1a9b      	subs	r3, r3, r2
 8001312:	009b      	lsls	r3, r3, #2
 8001314:	0fda      	lsrs	r2, r3, #31
 8001316:	4413      	add	r3, r2
 8001318:	105b      	asrs	r3, r3, #1
 800131a:	461a      	mov	r2, r3
 800131c:	687b      	ldr	r3, [r7, #4]
 800131e:	895b      	ldrh	r3, [r3, #10]
 8001320:	fb92 f3f3 	sdiv	r3, r2, r3
 8001324:	b29a      	uxth	r2, r3
 8001326:	687b      	ldr	r3, [r7, #4]
 8001328:	811a      	strh	r2, [r3, #8]
		}

		encoder->tick = HAL_GetTick();
 800132a:	f007 fc85 	bl	8008c38 <HAL_GetTick>
 800132e:	4602      	mov	r2, r0
 8001330:	687b      	ldr	r3, [r7, #4]
 8001332:	60da      	str	r2, [r3, #12]
		encoder->cnt1 = encoder->htim->Instance->CNT;
 8001334:	687b      	ldr	r3, [r7, #4]
 8001336:	691b      	ldr	r3, [r3, #16]
 8001338:	681b      	ldr	r3, [r3, #0]
 800133a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800133c:	b29a      	uxth	r2, r3
 800133e:	687b      	ldr	r3, [r7, #4]
 8001340:	805a      	strh	r2, [r3, #2]
	}
}
 8001342:	bf00      	nop
 8001344:	3708      	adds	r7, #8
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}

0800134a <Encoder_getSpeed>:

// Get the speed and also the direction - Unit: RPM*one_rotation_pulses
float Encoder_getSpeed(Encoder *encoder){
 800134a:	b480      	push	{r7}
 800134c:	b083      	sub	sp, #12
 800134e:	af00      	add	r7, sp, #0
 8001350:	6078      	str	r0, [r7, #4]
	return encoder->dir == 1 ? (float) encoder->speed : -((float) encoder->speed);
 8001352:	687b      	ldr	r3, [r7, #4]
 8001354:	781b      	ldrb	r3, [r3, #0]
 8001356:	2b01      	cmp	r3, #1
 8001358:	d106      	bne.n	8001368 <Encoder_getSpeed+0x1e>
 800135a:	687b      	ldr	r3, [r7, #4]
 800135c:	891b      	ldrh	r3, [r3, #8]
 800135e:	ee07 3a90 	vmov	s15, r3
 8001362:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001366:	e007      	b.n	8001378 <Encoder_getSpeed+0x2e>
 8001368:	687b      	ldr	r3, [r7, #4]
 800136a:	891b      	ldrh	r3, [r3, #8]
 800136c:	ee07 3a90 	vmov	s15, r3
 8001370:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001374:	eef1 7a67 	vneg.f32	s15, s15
}
 8001378:	eeb0 0a67 	vmov.f32	s0, s15
 800137c:	370c      	adds	r7, #12
 800137e:	46bd      	mov	sp, r7
 8001380:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001384:	4770      	bx	lr
	...

08001388 <FlashEraseSector>:
static uint32_t SectorAddrs;
static uint8_t SectorNum;

//functions definitions
//1. Erase Sector
void FlashEraseSector() {
 8001388:	b580      	push	{r7, lr}
 800138a:	af00      	add	r7, sp, #0
	HAL_FLASH_Unlock();
 800138c:	f008 fcfc 	bl	8009d88 <HAL_FLASH_Unlock>
	//Erase the required Flash sector
	FLASH_Erase_Sector(SectorNum, FLASH_VOLTAGE_RANGE_3);
 8001390:	4b04      	ldr	r3, [pc, #16]	; (80013a4 <FlashEraseSector+0x1c>)
 8001392:	781b      	ldrb	r3, [r3, #0]
 8001394:	2102      	movs	r1, #2
 8001396:	4618      	mov	r0, r3
 8001398:	f008 fe66 	bl	800a068 <FLASH_Erase_Sector>
	HAL_FLASH_Lock();
 800139c:	f008 fd16 	bl	8009dcc <HAL_FLASH_Lock>
}
 80013a0:	bf00      	nop
 80013a2:	bd80      	pop	{r7, pc}
 80013a4:	20000204 	.word	0x20000204

080013a8 <FlashSetSectorAddrs>:

//2. Set Sector Adress
void FlashSetSectorAddrs(uint8_t sector, uint32_t addrs) {
 80013a8:	b480      	push	{r7}
 80013aa:	b083      	sub	sp, #12
 80013ac:	af00      	add	r7, sp, #0
 80013ae:	4603      	mov	r3, r0
 80013b0:	6039      	str	r1, [r7, #0]
 80013b2:	71fb      	strb	r3, [r7, #7]
	SectorNum = sector;
 80013b4:	4a05      	ldr	r2, [pc, #20]	; (80013cc <FlashSetSectorAddrs+0x24>)
 80013b6:	79fb      	ldrb	r3, [r7, #7]
 80013b8:	7013      	strb	r3, [r2, #0]
	SectorAddrs = addrs;
 80013ba:	4a05      	ldr	r2, [pc, #20]	; (80013d0 <FlashSetSectorAddrs+0x28>)
 80013bc:	683b      	ldr	r3, [r7, #0]
 80013be:	6013      	str	r3, [r2, #0]
}
 80013c0:	bf00      	nop
 80013c2:	370c      	adds	r7, #12
 80013c4:	46bd      	mov	sp, r7
 80013c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013ca:	4770      	bx	lr
 80013cc:	20000204 	.word	0x20000204
 80013d0:	20000200 	.word	0x20000200

080013d4 <FlashWriteN>:

//3. Write Flash
void FlashWriteN(uint32_t idx, void *wrBuf, uint32_t Nsize, DataTypeDef dataType) {
 80013d4:	b590      	push	{r4, r7, lr}
 80013d6:	b08d      	sub	sp, #52	; 0x34
 80013d8:	af00      	add	r7, sp, #0
 80013da:	60f8      	str	r0, [r7, #12]
 80013dc:	60b9      	str	r1, [r7, #8]
 80013de:	607a      	str	r2, [r7, #4]
 80013e0:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = SectorAddrs + idx;
 80013e2:	4b48      	ldr	r3, [pc, #288]	; (8001504 <FlashWriteN+0x130>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	68fa      	ldr	r2, [r7, #12]
 80013e8:	4413      	add	r3, r2
 80013ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	// Converter
	Convert convert;
	uint8_t wrBuf2[4];

	//Unlock Flash
	HAL_FLASH_Unlock();
 80013ec:	f008 fccc 	bl	8009d88 <HAL_FLASH_Unlock>
	//Write to Flash
	switch (dataType) {
 80013f0:	78fb      	ldrb	r3, [r7, #3]
 80013f2:	2b03      	cmp	r3, #3
 80013f4:	d87f      	bhi.n	80014f6 <FlashWriteN+0x122>
 80013f6:	a201      	add	r2, pc, #4	; (adr r2, 80013fc <FlashWriteN+0x28>)
 80013f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80013fc:	0800140d 	.word	0x0800140d
 8001400:	08001443 	.word	0x08001443
 8001404:	0800147b 	.word	0x0800147b
 8001408:	080014b1 	.word	0x080014b1
	case DATA_TYPE_U8:
		for (uint32_t i = 0; i < Nsize; i++) {
 800140c:	2300      	movs	r3, #0
 800140e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001410:	e012      	b.n	8001438 <FlashWriteN+0x64>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_BYTE, flashAddress, ((uint8_t*) wrBuf)[i]);
 8001412:	68ba      	ldr	r2, [r7, #8]
 8001414:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001416:	4413      	add	r3, r2
 8001418:	781b      	ldrb	r3, [r3, #0]
 800141a:	b2db      	uxtb	r3, r3
 800141c:	f04f 0400 	mov.w	r4, #0
 8001420:	461a      	mov	r2, r3
 8001422:	4623      	mov	r3, r4
 8001424:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001426:	2000      	movs	r0, #0
 8001428:	f008 fc5a 	bl	8009ce0 <HAL_FLASH_Program>
			flashAddress++;
 800142c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800142e:	3301      	adds	r3, #1
 8001430:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 0; i < Nsize; i++) {
 8001432:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001434:	3301      	adds	r3, #1
 8001436:	62bb      	str	r3, [r7, #40]	; 0x28
 8001438:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800143a:	687b      	ldr	r3, [r7, #4]
 800143c:	429a      	cmp	r2, r3
 800143e:	d3e8      	bcc.n	8001412 <FlashWriteN+0x3e>
		}
		break;
 8001440:	e059      	b.n	80014f6 <FlashWriteN+0x122>

	case DATA_TYPE_U16:
		for (uint32_t i = 0; i < Nsize; i++) {
 8001442:	2300      	movs	r3, #0
 8001444:	627b      	str	r3, [r7, #36]	; 0x24
 8001446:	e013      	b.n	8001470 <FlashWriteN+0x9c>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_HALFWORD, flashAddress, ((uint16_t*) wrBuf)[i]);
 8001448:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800144a:	005b      	lsls	r3, r3, #1
 800144c:	68ba      	ldr	r2, [r7, #8]
 800144e:	4413      	add	r3, r2
 8001450:	881b      	ldrh	r3, [r3, #0]
 8001452:	b29b      	uxth	r3, r3
 8001454:	f04f 0400 	mov.w	r4, #0
 8001458:	461a      	mov	r2, r3
 800145a:	4623      	mov	r3, r4
 800145c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800145e:	2001      	movs	r0, #1
 8001460:	f008 fc3e 	bl	8009ce0 <HAL_FLASH_Program>
			flashAddress += 2;
 8001464:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001466:	3302      	adds	r3, #2
 8001468:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 0; i < Nsize; i++) {
 800146a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800146c:	3301      	adds	r3, #1
 800146e:	627b      	str	r3, [r7, #36]	; 0x24
 8001470:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001472:	687b      	ldr	r3, [r7, #4]
 8001474:	429a      	cmp	r2, r3
 8001476:	d3e7      	bcc.n	8001448 <FlashWriteN+0x74>
		}
		break;
 8001478:	e03d      	b.n	80014f6 <FlashWriteN+0x122>

	case DATA_TYPE_U32:
		for (uint32_t i = 0; i < Nsize; i++) {
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
 800147e:	e012      	b.n	80014a6 <FlashWriteN+0xd2>
			HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, flashAddress, ((uint32_t*) wrBuf)[i]);
 8001480:	6a3b      	ldr	r3, [r7, #32]
 8001482:	009b      	lsls	r3, r3, #2
 8001484:	68ba      	ldr	r2, [r7, #8]
 8001486:	4413      	add	r3, r2
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	f04f 0400 	mov.w	r4, #0
 800148e:	461a      	mov	r2, r3
 8001490:	4623      	mov	r3, r4
 8001492:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8001494:	2002      	movs	r0, #2
 8001496:	f008 fc23 	bl	8009ce0 <HAL_FLASH_Program>
			flashAddress += 4;
 800149a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800149c:	3304      	adds	r3, #4
 800149e:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 0; i < Nsize; i++) {
 80014a0:	6a3b      	ldr	r3, [r7, #32]
 80014a2:	3301      	adds	r3, #1
 80014a4:	623b      	str	r3, [r7, #32]
 80014a6:	6a3a      	ldr	r2, [r7, #32]
 80014a8:	687b      	ldr	r3, [r7, #4]
 80014aa:	429a      	cmp	r2, r3
 80014ac:	d3e8      	bcc.n	8001480 <FlashWriteN+0xac>
		}
		break;
 80014ae:	e022      	b.n	80014f6 <FlashWriteN+0x122>

	case DATA_TYPE_FLOAT:
		for (uint32_t i = 0; i < Nsize; i++) {
 80014b0:	2300      	movs	r3, #0
 80014b2:	61fb      	str	r3, [r7, #28]
 80014b4:	e01a      	b.n	80014ec <FlashWriteN+0x118>
			// Convert float -> uint8_t
			convert.float_value = ((float*) wrBuf)[i];
 80014b6:	69fb      	ldr	r3, [r7, #28]
 80014b8:	009b      	lsls	r3, r3, #2
 80014ba:	68ba      	ldr	r2, [r7, #8]
 80014bc:	4413      	add	r3, r2
 80014be:	681b      	ldr	r3, [r3, #0]
 80014c0:	61bb      	str	r3, [r7, #24]
			wrBuf2[0] = convert.uint8_values[0];
 80014c2:	7e3b      	ldrb	r3, [r7, #24]
 80014c4:	753b      	strb	r3, [r7, #20]
			wrBuf2[1] = convert.uint8_values[1];
 80014c6:	7e7b      	ldrb	r3, [r7, #25]
 80014c8:	757b      	strb	r3, [r7, #21]
			wrBuf2[2] = convert.uint8_values[2];
 80014ca:	7ebb      	ldrb	r3, [r7, #26]
 80014cc:	75bb      	strb	r3, [r7, #22]
			wrBuf2[3] = convert.uint8_values[3];
 80014ce:	7efb      	ldrb	r3, [r7, #27]
 80014d0:	75fb      	strb	r3, [r7, #23]
			// Write the uint8_t bytes
			FlashWriteN(idx + 4*i, wrBuf2, 4, DATA_TYPE_U8);
 80014d2:	69fb      	ldr	r3, [r7, #28]
 80014d4:	009a      	lsls	r2, r3, #2
 80014d6:	68fb      	ldr	r3, [r7, #12]
 80014d8:	18d0      	adds	r0, r2, r3
 80014da:	f107 0114 	add.w	r1, r7, #20
 80014de:	2300      	movs	r3, #0
 80014e0:	2204      	movs	r2, #4
 80014e2:	f7ff ff77 	bl	80013d4 <FlashWriteN>
		for (uint32_t i = 0; i < Nsize; i++) {
 80014e6:	69fb      	ldr	r3, [r7, #28]
 80014e8:	3301      	adds	r3, #1
 80014ea:	61fb      	str	r3, [r7, #28]
 80014ec:	69fa      	ldr	r2, [r7, #28]
 80014ee:	687b      	ldr	r3, [r7, #4]
 80014f0:	429a      	cmp	r2, r3
 80014f2:	d3e0      	bcc.n	80014b6 <FlashWriteN+0xe2>
		}
		break;
 80014f4:	bf00      	nop
	}
	//Lock the Flash space
	HAL_FLASH_Lock();
 80014f6:	f008 fc69 	bl	8009dcc <HAL_FLASH_Lock>
}
 80014fa:	bf00      	nop
 80014fc:	3734      	adds	r7, #52	; 0x34
 80014fe:	46bd      	mov	sp, r7
 8001500:	bd90      	pop	{r4, r7, pc}
 8001502:	bf00      	nop
 8001504:	20000200 	.word	0x20000200

08001508 <FlashReadN>:
//4. Read Flash
void FlashReadN(uint32_t idx, void *rdBuf, uint32_t Nsize, DataTypeDef dataType) {
 8001508:	b580      	push	{r7, lr}
 800150a:	b08c      	sub	sp, #48	; 0x30
 800150c:	af00      	add	r7, sp, #0
 800150e:	60f8      	str	r0, [r7, #12]
 8001510:	60b9      	str	r1, [r7, #8]
 8001512:	607a      	str	r2, [r7, #4]
 8001514:	70fb      	strb	r3, [r7, #3]
	uint32_t flashAddress = SectorAddrs + idx;
 8001516:	4b3c      	ldr	r3, [pc, #240]	; (8001608 <FlashReadN+0x100>)
 8001518:	681b      	ldr	r3, [r3, #0]
 800151a:	68fa      	ldr	r2, [r7, #12]
 800151c:	4413      	add	r3, r2
 800151e:	62fb      	str	r3, [r7, #44]	; 0x2c

	// Converter
	Convert convert;
	uint8_t rdBuf2[4];

	switch (dataType) {
 8001520:	78fb      	ldrb	r3, [r7, #3]
 8001522:	2b03      	cmp	r3, #3
 8001524:	d86b      	bhi.n	80015fe <FlashReadN+0xf6>
 8001526:	a201      	add	r2, pc, #4	; (adr r2, 800152c <FlashReadN+0x24>)
 8001528:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800152c:	0800153d 	.word	0x0800153d
 8001530:	08001565 	.word	0x08001565
 8001534:	0800158f 	.word	0x0800158f
 8001538:	080015b9 	.word	0x080015b9
	case DATA_TYPE_U8:
		for (uint32_t i = 0; i < Nsize; i++) {
 800153c:	2300      	movs	r3, #0
 800153e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001540:	e00b      	b.n	800155a <FlashReadN+0x52>
			*((uint8_t*) rdBuf + i) = *(uint8_t*) flashAddress;
 8001542:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001544:	68b9      	ldr	r1, [r7, #8]
 8001546:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001548:	440b      	add	r3, r1
 800154a:	7812      	ldrb	r2, [r2, #0]
 800154c:	701a      	strb	r2, [r3, #0]
			flashAddress++;
 800154e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001550:	3301      	adds	r3, #1
 8001552:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 0; i < Nsize; i++) {
 8001554:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001556:	3301      	adds	r3, #1
 8001558:	62bb      	str	r3, [r7, #40]	; 0x28
 800155a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	429a      	cmp	r2, r3
 8001560:	d3ef      	bcc.n	8001542 <FlashReadN+0x3a>
		}
		break;
 8001562:	e04c      	b.n	80015fe <FlashReadN+0xf6>

	case DATA_TYPE_U16:
		for (uint32_t i = 0; i < Nsize; i++) {
 8001564:	2300      	movs	r3, #0
 8001566:	627b      	str	r3, [r7, #36]	; 0x24
 8001568:	e00c      	b.n	8001584 <FlashReadN+0x7c>
			*((uint16_t*) rdBuf + i) = *(uint16_t*) flashAddress;
 800156a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800156c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800156e:	005b      	lsls	r3, r3, #1
 8001570:	68b9      	ldr	r1, [r7, #8]
 8001572:	440b      	add	r3, r1
 8001574:	8812      	ldrh	r2, [r2, #0]
 8001576:	801a      	strh	r2, [r3, #0]
			flashAddress += 2;
 8001578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800157a:	3302      	adds	r3, #2
 800157c:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 0; i < Nsize; i++) {
 800157e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001580:	3301      	adds	r3, #1
 8001582:	627b      	str	r3, [r7, #36]	; 0x24
 8001584:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001586:	687b      	ldr	r3, [r7, #4]
 8001588:	429a      	cmp	r2, r3
 800158a:	d3ee      	bcc.n	800156a <FlashReadN+0x62>
		}
		break;
 800158c:	e037      	b.n	80015fe <FlashReadN+0xf6>

	case DATA_TYPE_U32:
		for (uint32_t i = 0; i < Nsize; i++) {
 800158e:	2300      	movs	r3, #0
 8001590:	623b      	str	r3, [r7, #32]
 8001592:	e00c      	b.n	80015ae <FlashReadN+0xa6>
			*((uint32_t*) rdBuf + i) = *(uint32_t*) flashAddress;
 8001594:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8001596:	6a3b      	ldr	r3, [r7, #32]
 8001598:	009b      	lsls	r3, r3, #2
 800159a:	68b9      	ldr	r1, [r7, #8]
 800159c:	440b      	add	r3, r1
 800159e:	6812      	ldr	r2, [r2, #0]
 80015a0:	601a      	str	r2, [r3, #0]
			flashAddress += 4;
 80015a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80015a4:	3304      	adds	r3, #4
 80015a6:	62fb      	str	r3, [r7, #44]	; 0x2c
		for (uint32_t i = 0; i < Nsize; i++) {
 80015a8:	6a3b      	ldr	r3, [r7, #32]
 80015aa:	3301      	adds	r3, #1
 80015ac:	623b      	str	r3, [r7, #32]
 80015ae:	6a3a      	ldr	r2, [r7, #32]
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	429a      	cmp	r2, r3
 80015b4:	d3ee      	bcc.n	8001594 <FlashReadN+0x8c>
		}
		break;
 80015b6:	e022      	b.n	80015fe <FlashReadN+0xf6>

	case DATA_TYPE_FLOAT:
		for (uint32_t i = 0; i < Nsize; i++) {
 80015b8:	2300      	movs	r3, #0
 80015ba:	61fb      	str	r3, [r7, #28]
 80015bc:	e01a      	b.n	80015f4 <FlashReadN+0xec>
			// Read the uint8_t bytes
			FlashReadN(idx + 4*i, rdBuf2, 4, DATA_TYPE_U8);
 80015be:	69fb      	ldr	r3, [r7, #28]
 80015c0:	009a      	lsls	r2, r3, #2
 80015c2:	68fb      	ldr	r3, [r7, #12]
 80015c4:	18d0      	adds	r0, r2, r3
 80015c6:	f107 0114 	add.w	r1, r7, #20
 80015ca:	2300      	movs	r3, #0
 80015cc:	2204      	movs	r2, #4
 80015ce:	f7ff ff9b 	bl	8001508 <FlashReadN>
			// Convert uint8_t -> float
			convert.uint8_values[0] = rdBuf2[0];
 80015d2:	7d3b      	ldrb	r3, [r7, #20]
 80015d4:	763b      	strb	r3, [r7, #24]
			convert.uint8_values[1] = rdBuf2[1];
 80015d6:	7d7b      	ldrb	r3, [r7, #21]
 80015d8:	767b      	strb	r3, [r7, #25]
			convert.uint8_values[2] = rdBuf2[2];
 80015da:	7dbb      	ldrb	r3, [r7, #22]
 80015dc:	76bb      	strb	r3, [r7, #26]
			convert.uint8_values[3] = rdBuf2[3];
 80015de:	7dfb      	ldrb	r3, [r7, #23]
 80015e0:	76fb      	strb	r3, [r7, #27]
			*((float*) rdBuf + i) = convert.float_value;
 80015e2:	69fb      	ldr	r3, [r7, #28]
 80015e4:	009b      	lsls	r3, r3, #2
 80015e6:	68ba      	ldr	r2, [r7, #8]
 80015e8:	4413      	add	r3, r2
 80015ea:	69ba      	ldr	r2, [r7, #24]
 80015ec:	601a      	str	r2, [r3, #0]
		for (uint32_t i = 0; i < Nsize; i++) {
 80015ee:	69fb      	ldr	r3, [r7, #28]
 80015f0:	3301      	adds	r3, #1
 80015f2:	61fb      	str	r3, [r7, #28]
 80015f4:	69fa      	ldr	r2, [r7, #28]
 80015f6:	687b      	ldr	r3, [r7, #4]
 80015f8:	429a      	cmp	r2, r3
 80015fa:	d3e0      	bcc.n	80015be <FlashReadN+0xb6>
		}
		break;
 80015fc:	bf00      	nop
	}
}
 80015fe:	bf00      	nop
 8001600:	3730      	adds	r7, #48	; 0x30
 8001602:	46bd      	mov	sp, r7
 8001604:	bd80      	pop	{r7, pc}
 8001606:	bf00      	nop
 8001608:	20000200 	.word	0x20000200

0800160c <fillCircleHelper>:
			ILI9341_DrawPixel(spi, x0 - y, y0 - x, color);
			ILI9341_DrawPixel(spi, x0 - x, y0 - y, color);
		}
	}
}
static void fillCircleHelper(ILI9341_SPI *spi, int16_t x0, int16_t y0, int16_t r, uint8_t cornername, int16_t delta, uint16_t color) {
 800160c:	b580      	push	{r7, lr}
 800160e:	b08a      	sub	sp, #40	; 0x28
 8001610:	af02      	add	r7, sp, #8
 8001612:	60f8      	str	r0, [r7, #12]
 8001614:	4608      	mov	r0, r1
 8001616:	4611      	mov	r1, r2
 8001618:	461a      	mov	r2, r3
 800161a:	4603      	mov	r3, r0
 800161c:	817b      	strh	r3, [r7, #10]
 800161e:	460b      	mov	r3, r1
 8001620:	813b      	strh	r3, [r7, #8]
 8001622:	4613      	mov	r3, r2
 8001624:	80fb      	strh	r3, [r7, #6]
	int16_t f = 1 - r;
 8001626:	88fb      	ldrh	r3, [r7, #6]
 8001628:	f1c3 0301 	rsb	r3, r3, #1
 800162c:	b29b      	uxth	r3, r3
 800162e:	83fb      	strh	r3, [r7, #30]
	int16_t ddF_x = 1;
 8001630:	2301      	movs	r3, #1
 8001632:	83bb      	strh	r3, [r7, #28]
	int16_t ddF_y = -2 * r;
 8001634:	88fb      	ldrh	r3, [r7, #6]
 8001636:	461a      	mov	r2, r3
 8001638:	03d2      	lsls	r2, r2, #15
 800163a:	1ad3      	subs	r3, r2, r3
 800163c:	005b      	lsls	r3, r3, #1
 800163e:	b29b      	uxth	r3, r3
 8001640:	837b      	strh	r3, [r7, #26]
	int16_t x = 0;
 8001642:	2300      	movs	r3, #0
 8001644:	833b      	strh	r3, [r7, #24]
	int16_t y = r;
 8001646:	88fb      	ldrh	r3, [r7, #6]
 8001648:	82fb      	strh	r3, [r7, #22]

	while (x < y) {
 800164a:	e095      	b.n	8001778 <fillCircleHelper+0x16c>
		if (f >= 0) {
 800164c:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8001650:	2b00      	cmp	r3, #0
 8001652:	db0e      	blt.n	8001672 <fillCircleHelper+0x66>
			y--;
 8001654:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001658:	b29b      	uxth	r3, r3
 800165a:	3b01      	subs	r3, #1
 800165c:	b29b      	uxth	r3, r3
 800165e:	82fb      	strh	r3, [r7, #22]
			ddF_y += 2;
 8001660:	8b7b      	ldrh	r3, [r7, #26]
 8001662:	3302      	adds	r3, #2
 8001664:	b29b      	uxth	r3, r3
 8001666:	837b      	strh	r3, [r7, #26]
			f += ddF_y;
 8001668:	8bfa      	ldrh	r2, [r7, #30]
 800166a:	8b7b      	ldrh	r3, [r7, #26]
 800166c:	4413      	add	r3, r2
 800166e:	b29b      	uxth	r3, r3
 8001670:	83fb      	strh	r3, [r7, #30]
		}
		x++;
 8001672:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001676:	b29b      	uxth	r3, r3
 8001678:	3301      	adds	r3, #1
 800167a:	b29b      	uxth	r3, r3
 800167c:	833b      	strh	r3, [r7, #24]
		ddF_x += 2;
 800167e:	8bbb      	ldrh	r3, [r7, #28]
 8001680:	3302      	adds	r3, #2
 8001682:	b29b      	uxth	r3, r3
 8001684:	83bb      	strh	r3, [r7, #28]
		f += ddF_x;
 8001686:	8bfa      	ldrh	r2, [r7, #30]
 8001688:	8bbb      	ldrh	r3, [r7, #28]
 800168a:	4413      	add	r3, r2
 800168c:	b29b      	uxth	r3, r3
 800168e:	83fb      	strh	r3, [r7, #30]

		if (cornername & 0x1) {
 8001690:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001694:	f003 0301 	and.w	r3, r3, #1
 8001698:	2b00      	cmp	r3, #0
 800169a:	d033      	beq.n	8001704 <fillCircleHelper+0xf8>
			ILI9341_drawFastVLine(spi, x0 + x, y0 - y, 2 * y + 1 + delta, color);
 800169c:	897a      	ldrh	r2, [r7, #10]
 800169e:	8b3b      	ldrh	r3, [r7, #24]
 80016a0:	4413      	add	r3, r2
 80016a2:	b29b      	uxth	r3, r3
 80016a4:	b219      	sxth	r1, r3
 80016a6:	893a      	ldrh	r2, [r7, #8]
 80016a8:	8afb      	ldrh	r3, [r7, #22]
 80016aa:	1ad3      	subs	r3, r2, r3
 80016ac:	b29b      	uxth	r3, r3
 80016ae:	b218      	sxth	r0, r3
 80016b0:	8afb      	ldrh	r3, [r7, #22]
 80016b2:	005b      	lsls	r3, r3, #1
 80016b4:	b29a      	uxth	r2, r3
 80016b6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80016b8:	4413      	add	r3, r2
 80016ba:	b29b      	uxth	r3, r3
 80016bc:	3301      	adds	r3, #1
 80016be:	b29b      	uxth	r3, r3
 80016c0:	b21a      	sxth	r2, r3
 80016c2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80016c4:	9300      	str	r3, [sp, #0]
 80016c6:	4613      	mov	r3, r2
 80016c8:	4602      	mov	r2, r0
 80016ca:	68f8      	ldr	r0, [r7, #12]
 80016cc:	f000 faac 	bl	8001c28 <ILI9341_drawFastVLine>
			ILI9341_drawFastVLine(spi, x0 + y, y0 - x, 2 * x + 1 + delta, color);
 80016d0:	897a      	ldrh	r2, [r7, #10]
 80016d2:	8afb      	ldrh	r3, [r7, #22]
 80016d4:	4413      	add	r3, r2
 80016d6:	b29b      	uxth	r3, r3
 80016d8:	b219      	sxth	r1, r3
 80016da:	893a      	ldrh	r2, [r7, #8]
 80016dc:	8b3b      	ldrh	r3, [r7, #24]
 80016de:	1ad3      	subs	r3, r2, r3
 80016e0:	b29b      	uxth	r3, r3
 80016e2:	b218      	sxth	r0, r3
 80016e4:	8b3b      	ldrh	r3, [r7, #24]
 80016e6:	005b      	lsls	r3, r3, #1
 80016e8:	b29a      	uxth	r2, r3
 80016ea:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80016ec:	4413      	add	r3, r2
 80016ee:	b29b      	uxth	r3, r3
 80016f0:	3301      	adds	r3, #1
 80016f2:	b29b      	uxth	r3, r3
 80016f4:	b21a      	sxth	r2, r3
 80016f6:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80016f8:	9300      	str	r3, [sp, #0]
 80016fa:	4613      	mov	r3, r2
 80016fc:	4602      	mov	r2, r0
 80016fe:	68f8      	ldr	r0, [r7, #12]
 8001700:	f000 fa92 	bl	8001c28 <ILI9341_drawFastVLine>
		}
		if (cornername & 0x2) {
 8001704:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001708:	f003 0302 	and.w	r3, r3, #2
 800170c:	2b00      	cmp	r3, #0
 800170e:	d033      	beq.n	8001778 <fillCircleHelper+0x16c>
			ILI9341_drawFastVLine(spi, x0 - x, y0 - y, 2 * y + 1 + delta, color);
 8001710:	897a      	ldrh	r2, [r7, #10]
 8001712:	8b3b      	ldrh	r3, [r7, #24]
 8001714:	1ad3      	subs	r3, r2, r3
 8001716:	b29b      	uxth	r3, r3
 8001718:	b219      	sxth	r1, r3
 800171a:	893a      	ldrh	r2, [r7, #8]
 800171c:	8afb      	ldrh	r3, [r7, #22]
 800171e:	1ad3      	subs	r3, r2, r3
 8001720:	b29b      	uxth	r3, r3
 8001722:	b218      	sxth	r0, r3
 8001724:	8afb      	ldrh	r3, [r7, #22]
 8001726:	005b      	lsls	r3, r3, #1
 8001728:	b29a      	uxth	r2, r3
 800172a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 800172c:	4413      	add	r3, r2
 800172e:	b29b      	uxth	r3, r3
 8001730:	3301      	adds	r3, #1
 8001732:	b29b      	uxth	r3, r3
 8001734:	b21a      	sxth	r2, r3
 8001736:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001738:	9300      	str	r3, [sp, #0]
 800173a:	4613      	mov	r3, r2
 800173c:	4602      	mov	r2, r0
 800173e:	68f8      	ldr	r0, [r7, #12]
 8001740:	f000 fa72 	bl	8001c28 <ILI9341_drawFastVLine>
			ILI9341_drawFastVLine(spi, x0 - y, y0 - x, 2 * x + 1 + delta, color);
 8001744:	897a      	ldrh	r2, [r7, #10]
 8001746:	8afb      	ldrh	r3, [r7, #22]
 8001748:	1ad3      	subs	r3, r2, r3
 800174a:	b29b      	uxth	r3, r3
 800174c:	b219      	sxth	r1, r3
 800174e:	893a      	ldrh	r2, [r7, #8]
 8001750:	8b3b      	ldrh	r3, [r7, #24]
 8001752:	1ad3      	subs	r3, r2, r3
 8001754:	b29b      	uxth	r3, r3
 8001756:	b218      	sxth	r0, r3
 8001758:	8b3b      	ldrh	r3, [r7, #24]
 800175a:	005b      	lsls	r3, r3, #1
 800175c:	b29a      	uxth	r2, r3
 800175e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001760:	4413      	add	r3, r2
 8001762:	b29b      	uxth	r3, r3
 8001764:	3301      	adds	r3, #1
 8001766:	b29b      	uxth	r3, r3
 8001768:	b21a      	sxth	r2, r3
 800176a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800176c:	9300      	str	r3, [sp, #0]
 800176e:	4613      	mov	r3, r2
 8001770:	4602      	mov	r2, r0
 8001772:	68f8      	ldr	r0, [r7, #12]
 8001774:	f000 fa58 	bl	8001c28 <ILI9341_drawFastVLine>
	while (x < y) {
 8001778:	f9b7 2018 	ldrsh.w	r2, [r7, #24]
 800177c:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8001780:	429a      	cmp	r2, r3
 8001782:	f6ff af63 	blt.w	800164c <fillCircleHelper+0x40>
		}
	}
}
 8001786:	bf00      	nop
 8001788:	3720      	adds	r7, #32
 800178a:	46bd      	mov	sp, r7
 800178c:	bd80      	pop	{r7, pc}

0800178e <ILI9341_SendCommand>:

// Write Command to LCD
static void ILI9341_SendCommand(ILI9341_SPI *spi, uint8_t com) {
 800178e:	b580      	push	{r7, lr}
 8001790:	b084      	sub	sp, #16
 8001792:	af00      	add	r7, sp, #0
 8001794:	6078      	str	r0, [r7, #4]
 8001796:	460b      	mov	r3, r1
 8001798:	70fb      	strb	r3, [r7, #3]
	//*(__IO uint8_t *)(0x60000000) = com;
	uint8_t tmpCmd = com;
 800179a:	78fb      	ldrb	r3, [r7, #3]
 800179c:	73fb      	strb	r3, [r7, #15]
	//Set DC HIGH for COMMAND mode
	HAL_GPIO_WritePin(spi->DC_PORT, spi->DC_PIN, GPIO_PIN_RESET);
 800179e:	687b      	ldr	r3, [r7, #4]
 80017a0:	6918      	ldr	r0, [r3, #16]
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	8a9b      	ldrh	r3, [r3, #20]
 80017a6:	2200      	movs	r2, #0
 80017a8:	4619      	mov	r1, r3
 80017aa:	f008 fe3f 	bl	800a42c <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(spi->LCD_CS_PORT, spi->LCD_CS_PIN, GPIO_PIN_RESET);
 80017ae:	687b      	ldr	r3, [r7, #4]
 80017b0:	6898      	ldr	r0, [r3, #8]
 80017b2:	687b      	ldr	r3, [r7, #4]
 80017b4:	899b      	ldrh	r3, [r3, #12]
 80017b6:	2200      	movs	r2, #0
 80017b8:	4619      	mov	r1, r3
 80017ba:	f008 fe37 	bl	800a42c <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(spi->lcdHandle, &tmpCmd, 1, 5);
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6858      	ldr	r0, [r3, #4]
 80017c2:	f107 010f 	add.w	r1, r7, #15
 80017c6:	2305      	movs	r3, #5
 80017c8:	2201      	movs	r2, #1
 80017ca:	f009 fb41 	bl	800ae50 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(spi->LCD_CS_PORT, spi->LCD_CS_PIN, GPIO_PIN_SET);
 80017ce:	687b      	ldr	r3, [r7, #4]
 80017d0:	6898      	ldr	r0, [r3, #8]
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	899b      	ldrh	r3, [r3, #12]
 80017d6:	2201      	movs	r2, #1
 80017d8:	4619      	mov	r1, r3
 80017da:	f008 fe27 	bl	800a42c <HAL_GPIO_WritePin>
}
 80017de:	bf00      	nop
 80017e0:	3710      	adds	r7, #16
 80017e2:	46bd      	mov	sp, r7
 80017e4:	bd80      	pop	{r7, pc}

080017e6 <ILI9341_SendData>:

// Write data to LCD
static void ILI9341_SendData(ILI9341_SPI *spi, uint8_t data) {
 80017e6:	b580      	push	{r7, lr}
 80017e8:	b084      	sub	sp, #16
 80017ea:	af00      	add	r7, sp, #0
 80017ec:	6078      	str	r0, [r7, #4]
 80017ee:	460b      	mov	r3, r1
 80017f0:	70fb      	strb	r3, [r7, #3]
	//*(__IO uint8_t *)(0x60040000) = data;
	uint8_t tmpCmd = data;
 80017f2:	78fb      	ldrb	r3, [r7, #3]
 80017f4:	73fb      	strb	r3, [r7, #15]
	//Set DC LOW for DATA mode
	HAL_GPIO_WritePin(spi->DC_PORT, spi->DC_PIN, GPIO_PIN_SET);
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6918      	ldr	r0, [r3, #16]
 80017fa:	687b      	ldr	r3, [r7, #4]
 80017fc:	8a9b      	ldrh	r3, [r3, #20]
 80017fe:	2201      	movs	r2, #1
 8001800:	4619      	mov	r1, r3
 8001802:	f008 fe13 	bl	800a42c <HAL_GPIO_WritePin>
	//Put CS LOW
	HAL_GPIO_WritePin(spi->LCD_CS_PORT, spi->LCD_CS_PIN, GPIO_PIN_RESET);
 8001806:	687b      	ldr	r3, [r7, #4]
 8001808:	6898      	ldr	r0, [r3, #8]
 800180a:	687b      	ldr	r3, [r7, #4]
 800180c:	899b      	ldrh	r3, [r3, #12]
 800180e:	2200      	movs	r2, #0
 8001810:	4619      	mov	r1, r3
 8001812:	f008 fe0b 	bl	800a42c <HAL_GPIO_WritePin>
	//Write byte using SPI
	HAL_SPI_Transmit(spi->lcdHandle, &tmpCmd, 1, 5);
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6858      	ldr	r0, [r3, #4]
 800181a:	f107 010f 	add.w	r1, r7, #15
 800181e:	2305      	movs	r3, #5
 8001820:	2201      	movs	r2, #1
 8001822:	f009 fb15 	bl	800ae50 <HAL_SPI_Transmit>
	//Bring CS HIGH
	HAL_GPIO_WritePin(spi->LCD_CS_PORT, spi->LCD_CS_PIN, GPIO_PIN_SET);
 8001826:	687b      	ldr	r3, [r7, #4]
 8001828:	6898      	ldr	r0, [r3, #8]
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	899b      	ldrh	r3, [r3, #12]
 800182e:	2201      	movs	r2, #1
 8001830:	4619      	mov	r1, r3
 8001832:	f008 fdfb 	bl	800a42c <HAL_GPIO_WritePin>
}
 8001836:	bf00      	nop
 8001838:	3710      	adds	r7, #16
 800183a:	46bd      	mov	sp, r7
 800183c:	bd80      	pop	{r7, pc}

0800183e <ILI9341_SetCursorPosition>:
	//Bring CS HIGH
	HAL_GPIO_WritePin(spi->LCD_CS_PORT, spi->LCD_CS_PIN, GPIO_PIN_SET);
}

// Set cursor position
void ILI9341_SetCursorPosition(ILI9341_SPI *spi, uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 800183e:	b580      	push	{r7, lr}
 8001840:	b084      	sub	sp, #16
 8001842:	af00      	add	r7, sp, #0
 8001844:	60f8      	str	r0, [r7, #12]
 8001846:	4608      	mov	r0, r1
 8001848:	4611      	mov	r1, r2
 800184a:	461a      	mov	r2, r3
 800184c:	4603      	mov	r3, r0
 800184e:	817b      	strh	r3, [r7, #10]
 8001850:	460b      	mov	r3, r1
 8001852:	813b      	strh	r3, [r7, #8]
 8001854:	4613      	mov	r3, r2
 8001856:	80fb      	strh	r3, [r7, #6]
	ILI9341_SendCommand(spi, ILI9341_COLUMN_ADDR);
 8001858:	212a      	movs	r1, #42	; 0x2a
 800185a:	68f8      	ldr	r0, [r7, #12]
 800185c:	f7ff ff97 	bl	800178e <ILI9341_SendCommand>
	ILI9341_SendData(spi, x1 >> 8);
 8001860:	897b      	ldrh	r3, [r7, #10]
 8001862:	0a1b      	lsrs	r3, r3, #8
 8001864:	b29b      	uxth	r3, r3
 8001866:	b2db      	uxtb	r3, r3
 8001868:	4619      	mov	r1, r3
 800186a:	68f8      	ldr	r0, [r7, #12]
 800186c:	f7ff ffbb 	bl	80017e6 <ILI9341_SendData>
	ILI9341_SendData(spi, x1 & 0xFF);
 8001870:	897b      	ldrh	r3, [r7, #10]
 8001872:	b2db      	uxtb	r3, r3
 8001874:	4619      	mov	r1, r3
 8001876:	68f8      	ldr	r0, [r7, #12]
 8001878:	f7ff ffb5 	bl	80017e6 <ILI9341_SendData>
	ILI9341_SendData(spi, x2 >> 8);
 800187c:	88fb      	ldrh	r3, [r7, #6]
 800187e:	0a1b      	lsrs	r3, r3, #8
 8001880:	b29b      	uxth	r3, r3
 8001882:	b2db      	uxtb	r3, r3
 8001884:	4619      	mov	r1, r3
 8001886:	68f8      	ldr	r0, [r7, #12]
 8001888:	f7ff ffad 	bl	80017e6 <ILI9341_SendData>
	ILI9341_SendData(spi, x2 & 0xFF);
 800188c:	88fb      	ldrh	r3, [r7, #6]
 800188e:	b2db      	uxtb	r3, r3
 8001890:	4619      	mov	r1, r3
 8001892:	68f8      	ldr	r0, [r7, #12]
 8001894:	f7ff ffa7 	bl	80017e6 <ILI9341_SendData>

	ILI9341_SendCommand(spi, ILI9341_PAGE_ADDR);
 8001898:	212b      	movs	r1, #43	; 0x2b
 800189a:	68f8      	ldr	r0, [r7, #12]
 800189c:	f7ff ff77 	bl	800178e <ILI9341_SendCommand>
	ILI9341_SendData(spi, y1 >> 8);
 80018a0:	893b      	ldrh	r3, [r7, #8]
 80018a2:	0a1b      	lsrs	r3, r3, #8
 80018a4:	b29b      	uxth	r3, r3
 80018a6:	b2db      	uxtb	r3, r3
 80018a8:	4619      	mov	r1, r3
 80018aa:	68f8      	ldr	r0, [r7, #12]
 80018ac:	f7ff ff9b 	bl	80017e6 <ILI9341_SendData>
	ILI9341_SendData(spi, y1 & 0xFF);
 80018b0:	893b      	ldrh	r3, [r7, #8]
 80018b2:	b2db      	uxtb	r3, r3
 80018b4:	4619      	mov	r1, r3
 80018b6:	68f8      	ldr	r0, [r7, #12]
 80018b8:	f7ff ff95 	bl	80017e6 <ILI9341_SendData>
	ILI9341_SendData(spi, y2 >> 8);
 80018bc:	8b3b      	ldrh	r3, [r7, #24]
 80018be:	0a1b      	lsrs	r3, r3, #8
 80018c0:	b29b      	uxth	r3, r3
 80018c2:	b2db      	uxtb	r3, r3
 80018c4:	4619      	mov	r1, r3
 80018c6:	68f8      	ldr	r0, [r7, #12]
 80018c8:	f7ff ff8d 	bl	80017e6 <ILI9341_SendData>
	ILI9341_SendData(spi, y2 & 0xFF);
 80018cc:	8b3b      	ldrh	r3, [r7, #24]
 80018ce:	b2db      	uxtb	r3, r3
 80018d0:	4619      	mov	r1, r3
 80018d2:	68f8      	ldr	r0, [r7, #12]
 80018d4:	f7ff ff87 	bl	80017e6 <ILI9341_SendData>
	ILI9341_SendCommand(spi, ILI9341_GRAM);
 80018d8:	212c      	movs	r1, #44	; 0x2c
 80018da:	68f8      	ldr	r0, [r7, #12]
 80018dc:	f7ff ff57 	bl	800178e <ILI9341_SendCommand>
}
 80018e0:	bf00      	nop
 80018e2:	3710      	adds	r7, #16
 80018e4:	46bd      	mov	sp, r7
 80018e6:	bd80      	pop	{r7, pc}

080018e8 <ILI9341_DrawPixel>:

void ILI9341_DrawPixel(ILI9341_SPI *spi, uint16_t x, uint16_t y, uint16_t color) {
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b086      	sub	sp, #24
 80018ec:	af02      	add	r7, sp, #8
 80018ee:	60f8      	str	r0, [r7, #12]
 80018f0:	4608      	mov	r0, r1
 80018f2:	4611      	mov	r1, r2
 80018f4:	461a      	mov	r2, r3
 80018f6:	4603      	mov	r3, r0
 80018f8:	817b      	strh	r3, [r7, #10]
 80018fa:	460b      	mov	r3, r1
 80018fc:	813b      	strh	r3, [r7, #8]
 80018fe:	4613      	mov	r3, r2
 8001900:	80fb      	strh	r3, [r7, #6]
	ILI9341_SetCursorPosition(spi, x, y, x, y);
 8001902:	8978      	ldrh	r0, [r7, #10]
 8001904:	893a      	ldrh	r2, [r7, #8]
 8001906:	8979      	ldrh	r1, [r7, #10]
 8001908:	893b      	ldrh	r3, [r7, #8]
 800190a:	9300      	str	r3, [sp, #0]
 800190c:	4603      	mov	r3, r0
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f7ff ff95 	bl	800183e <ILI9341_SetCursorPosition>
	ILI9341_SendData(spi, color >> 8);
 8001914:	88fb      	ldrh	r3, [r7, #6]
 8001916:	0a1b      	lsrs	r3, r3, #8
 8001918:	b29b      	uxth	r3, r3
 800191a:	b2db      	uxtb	r3, r3
 800191c:	4619      	mov	r1, r3
 800191e:	68f8      	ldr	r0, [r7, #12]
 8001920:	f7ff ff61 	bl	80017e6 <ILI9341_SendData>
	ILI9341_SendData(spi, color & 0xFF);
 8001924:	88fb      	ldrh	r3, [r7, #6]
 8001926:	b2db      	uxtb	r3, r3
 8001928:	4619      	mov	r1, r3
 800192a:	68f8      	ldr	r0, [r7, #12]
 800192c:	f7ff ff5b 	bl	80017e6 <ILI9341_SendData>
}
 8001930:	bf00      	nop
 8001932:	3710      	adds	r7, #16
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <ILI9341_Fill>:

//6. Fill the entire screen with a background color
void ILI9341_Fill(ILI9341_SPI *spi, uint16_t color) {
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af02      	add	r7, sp, #8
 800193e:	6078      	str	r0, [r7, #4]
 8001940:	460b      	mov	r3, r1
 8001942:	807b      	strh	r3, [r7, #2]
	uint32_t n = ILI9341_PIXEL_COUNT;
 8001944:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 8001948:	60fb      	str	r3, [r7, #12]
	//uint16_t myColor = 0xFF;

	if (spi->rotationNum == 1 || spi->rotationNum == 3) {
 800194a:	687b      	ldr	r3, [r7, #4]
 800194c:	781b      	ldrb	r3, [r3, #0]
 800194e:	2b01      	cmp	r3, #1
 8001950:	d003      	beq.n	800195a <ILI9341_Fill+0x22>
 8001952:	687b      	ldr	r3, [r7, #4]
 8001954:	781b      	ldrb	r3, [r3, #0]
 8001956:	2b03      	cmp	r3, #3
 8001958:	d109      	bne.n	800196e <ILI9341_Fill+0x36>
		ILI9341_SetCursorPosition(spi, 0, 0, ILI9341_WIDTH - 1, ILI9341_HEIGHT - 1);
 800195a:	f240 133f 	movw	r3, #319	; 0x13f
 800195e:	9300      	str	r3, [sp, #0]
 8001960:	23ef      	movs	r3, #239	; 0xef
 8001962:	2200      	movs	r2, #0
 8001964:	2100      	movs	r1, #0
 8001966:	6878      	ldr	r0, [r7, #4]
 8001968:	f7ff ff69 	bl	800183e <ILI9341_SetCursorPosition>
 800196c:	e010      	b.n	8001990 <ILI9341_Fill+0x58>
	} else if (spi->rotationNum == 2 || spi->rotationNum == 4) {
 800196e:	687b      	ldr	r3, [r7, #4]
 8001970:	781b      	ldrb	r3, [r3, #0]
 8001972:	2b02      	cmp	r3, #2
 8001974:	d003      	beq.n	800197e <ILI9341_Fill+0x46>
 8001976:	687b      	ldr	r3, [r7, #4]
 8001978:	781b      	ldrb	r3, [r3, #0]
 800197a:	2b04      	cmp	r3, #4
 800197c:	d11a      	bne.n	80019b4 <ILI9341_Fill+0x7c>
		ILI9341_SetCursorPosition(spi, 0, 0, ILI9341_HEIGHT - 1, ILI9341_WIDTH - 1);
 800197e:	23ef      	movs	r3, #239	; 0xef
 8001980:	9300      	str	r3, [sp, #0]
 8001982:	f240 133f 	movw	r3, #319	; 0x13f
 8001986:	2200      	movs	r2, #0
 8001988:	2100      	movs	r1, #0
 800198a:	6878      	ldr	r0, [r7, #4]
 800198c:	f7ff ff57 	bl	800183e <ILI9341_SetCursorPosition>
	}

	while (n) {
 8001990:	e010      	b.n	80019b4 <ILI9341_Fill+0x7c>
		n--;
 8001992:	68fb      	ldr	r3, [r7, #12]
 8001994:	3b01      	subs	r3, #1
 8001996:	60fb      	str	r3, [r7, #12]
		ILI9341_SendData(spi, color >> 8);
 8001998:	887b      	ldrh	r3, [r7, #2]
 800199a:	0a1b      	lsrs	r3, r3, #8
 800199c:	b29b      	uxth	r3, r3
 800199e:	b2db      	uxtb	r3, r3
 80019a0:	4619      	mov	r1, r3
 80019a2:	6878      	ldr	r0, [r7, #4]
 80019a4:	f7ff ff1f 	bl	80017e6 <ILI9341_SendData>
		ILI9341_SendData(spi, color & 0xff);
 80019a8:	887b      	ldrh	r3, [r7, #2]
 80019aa:	b2db      	uxtb	r3, r3
 80019ac:	4619      	mov	r1, r3
 80019ae:	6878      	ldr	r0, [r7, #4]
 80019b0:	f7ff ff19 	bl	80017e6 <ILI9341_SendData>
	while (n) {
 80019b4:	68fb      	ldr	r3, [r7, #12]
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d1eb      	bne.n	8001992 <ILI9341_Fill+0x5a>
	}
}
 80019ba:	bf00      	nop
 80019bc:	3710      	adds	r7, #16
 80019be:	46bd      	mov	sp, r7
 80019c0:	bd80      	pop	{r7, pc}

080019c2 <ILI9341_Fill_Rect>:
//7. Rectangle drawing functions
void ILI9341_Fill_Rect(ILI9341_SPI *spi, unsigned int x0, unsigned int y0, unsigned int x1, unsigned int y1, uint16_t color) {
 80019c2:	b580      	push	{r7, lr}
 80019c4:	b088      	sub	sp, #32
 80019c6:	af02      	add	r7, sp, #8
 80019c8:	60f8      	str	r0, [r7, #12]
 80019ca:	60b9      	str	r1, [r7, #8]
 80019cc:	607a      	str	r2, [r7, #4]
 80019ce:	603b      	str	r3, [r7, #0]
	uint32_t n = ((x1 + 1) - x0) * ((y1 + 1) - y0);
 80019d0:	683a      	ldr	r2, [r7, #0]
 80019d2:	68bb      	ldr	r3, [r7, #8]
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	3301      	adds	r3, #1
 80019d8:	6a39      	ldr	r1, [r7, #32]
 80019da:	687a      	ldr	r2, [r7, #4]
 80019dc:	1a8a      	subs	r2, r1, r2
 80019de:	3201      	adds	r2, #1
 80019e0:	fb02 f303 	mul.w	r3, r2, r3
 80019e4:	617b      	str	r3, [r7, #20]
	if (n > ILI9341_PIXEL_COUNT)
 80019e6:	697b      	ldr	r3, [r7, #20]
 80019e8:	f5b3 3f96 	cmp.w	r3, #76800	; 0x12c00
 80019ec:	d902      	bls.n	80019f4 <ILI9341_Fill_Rect+0x32>
		n = ILI9341_PIXEL_COUNT;
 80019ee:	f44f 3396 	mov.w	r3, #76800	; 0x12c00
 80019f2:	617b      	str	r3, [r7, #20]
	ILI9341_SetCursorPosition(spi, x0, y0, x1, y1);
 80019f4:	68bb      	ldr	r3, [r7, #8]
 80019f6:	b299      	uxth	r1, r3
 80019f8:	687b      	ldr	r3, [r7, #4]
 80019fa:	b29a      	uxth	r2, r3
 80019fc:	683b      	ldr	r3, [r7, #0]
 80019fe:	b298      	uxth	r0, r3
 8001a00:	6a3b      	ldr	r3, [r7, #32]
 8001a02:	b29b      	uxth	r3, r3
 8001a04:	9300      	str	r3, [sp, #0]
 8001a06:	4603      	mov	r3, r0
 8001a08:	68f8      	ldr	r0, [r7, #12]
 8001a0a:	f7ff ff18 	bl	800183e <ILI9341_SetCursorPosition>
	while (n) {
 8001a0e:	e010      	b.n	8001a32 <ILI9341_Fill_Rect+0x70>
		n--;
 8001a10:	697b      	ldr	r3, [r7, #20]
 8001a12:	3b01      	subs	r3, #1
 8001a14:	617b      	str	r3, [r7, #20]
		ILI9341_SendData(spi, color >> 8);
 8001a16:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a18:	0a1b      	lsrs	r3, r3, #8
 8001a1a:	b29b      	uxth	r3, r3
 8001a1c:	b2db      	uxtb	r3, r3
 8001a1e:	4619      	mov	r1, r3
 8001a20:	68f8      	ldr	r0, [r7, #12]
 8001a22:	f7ff fee0 	bl	80017e6 <ILI9341_SendData>
		ILI9341_SendData(spi, color & 0xff);
 8001a26:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001a28:	b2db      	uxtb	r3, r3
 8001a2a:	4619      	mov	r1, r3
 8001a2c:	68f8      	ldr	r0, [r7, #12]
 8001a2e:	f7ff feda 	bl	80017e6 <ILI9341_SendData>
	while (n) {
 8001a32:	697b      	ldr	r3, [r7, #20]
 8001a34:	2b00      	cmp	r3, #0
 8001a36:	d1eb      	bne.n	8001a10 <ILI9341_Fill_Rect+0x4e>
	}
}
 8001a38:	bf00      	nop
 8001a3a:	3718      	adds	r7, #24
 8001a3c:	46bd      	mov	sp, r7
 8001a3e:	bd80      	pop	{r7, pc}

08001a40 <ILI9341_fillCircle>:
		ILI9341_DrawPixel(spi, x0 + y, y0 - x, color);
		ILI9341_DrawPixel(spi, x0 - y, y0 - x, color);
	}
}

void ILI9341_fillCircle(ILI9341_SPI *spi, int16_t x0, int16_t y0, int16_t r, uint16_t color) {
 8001a40:	b580      	push	{r7, lr}
 8001a42:	b088      	sub	sp, #32
 8001a44:	af04      	add	r7, sp, #16
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	4608      	mov	r0, r1
 8001a4a:	4611      	mov	r1, r2
 8001a4c:	461a      	mov	r2, r3
 8001a4e:	4603      	mov	r3, r0
 8001a50:	817b      	strh	r3, [r7, #10]
 8001a52:	460b      	mov	r3, r1
 8001a54:	813b      	strh	r3, [r7, #8]
 8001a56:	4613      	mov	r3, r2
 8001a58:	80fb      	strh	r3, [r7, #6]
	ILI9341_drawFastVLine(spi, x0, y0 - r, 2 * r + 1, color);
 8001a5a:	893a      	ldrh	r2, [r7, #8]
 8001a5c:	88fb      	ldrh	r3, [r7, #6]
 8001a5e:	1ad3      	subs	r3, r2, r3
 8001a60:	b29b      	uxth	r3, r3
 8001a62:	b21a      	sxth	r2, r3
 8001a64:	88fb      	ldrh	r3, [r7, #6]
 8001a66:	005b      	lsls	r3, r3, #1
 8001a68:	b29b      	uxth	r3, r3
 8001a6a:	3301      	adds	r3, #1
 8001a6c:	b29b      	uxth	r3, r3
 8001a6e:	b218      	sxth	r0, r3
 8001a70:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001a74:	8b3b      	ldrh	r3, [r7, #24]
 8001a76:	9300      	str	r3, [sp, #0]
 8001a78:	4603      	mov	r3, r0
 8001a7a:	68f8      	ldr	r0, [r7, #12]
 8001a7c:	f000 f8d4 	bl	8001c28 <ILI9341_drawFastVLine>
	fillCircleHelper(spi, x0, y0, r, 3, 0, color);
 8001a80:	f9b7 0006 	ldrsh.w	r0, [r7, #6]
 8001a84:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001a88:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001a8c:	8b3b      	ldrh	r3, [r7, #24]
 8001a8e:	9302      	str	r3, [sp, #8]
 8001a90:	2300      	movs	r3, #0
 8001a92:	9301      	str	r3, [sp, #4]
 8001a94:	2303      	movs	r3, #3
 8001a96:	9300      	str	r3, [sp, #0]
 8001a98:	4603      	mov	r3, r0
 8001a9a:	68f8      	ldr	r0, [r7, #12]
 8001a9c:	f7ff fdb6 	bl	800160c <fillCircleHelper>
}
 8001aa0:	bf00      	nop
 8001aa2:	3710      	adds	r7, #16
 8001aa4:	46bd      	mov	sp, r7
 8001aa6:	bd80      	pop	{r7, pc}

08001aa8 <ILI9341_drawLine>:

//9. Line drawing functions
void ILI9341_drawLine(ILI9341_SPI *spi, int16_t x0, int16_t y0, int16_t x1, int16_t y1, uint16_t color) {
 8001aa8:	b580      	push	{r7, lr}
 8001aaa:	b08a      	sub	sp, #40	; 0x28
 8001aac:	af00      	add	r7, sp, #0
 8001aae:	60f8      	str	r0, [r7, #12]
 8001ab0:	4608      	mov	r0, r1
 8001ab2:	4611      	mov	r1, r2
 8001ab4:	461a      	mov	r2, r3
 8001ab6:	4603      	mov	r3, r0
 8001ab8:	817b      	strh	r3, [r7, #10]
 8001aba:	460b      	mov	r3, r1
 8001abc:	813b      	strh	r3, [r7, #8]
 8001abe:	4613      	mov	r3, r2
 8001ac0:	80fb      	strh	r3, [r7, #6]
	int16_t steep = abs(y1 - y0) > abs(x1 - x0);
 8001ac2:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8001ac6:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001aca:	1ad3      	subs	r3, r2, r3
 8001acc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001ad0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001ad4:	f9b7 1006 	ldrsh.w	r1, [r7, #6]
 8001ad8:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001adc:	1acb      	subs	r3, r1, r3
 8001ade:	2b00      	cmp	r3, #0
 8001ae0:	bfb8      	it	lt
 8001ae2:	425b      	neglt	r3, r3
 8001ae4:	429a      	cmp	r2, r3
 8001ae6:	bfcc      	ite	gt
 8001ae8:	2301      	movgt	r3, #1
 8001aea:	2300      	movle	r3, #0
 8001aec:	b2db      	uxtb	r3, r3
 8001aee:	847b      	strh	r3, [r7, #34]	; 0x22
	if (steep) {
 8001af0:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001af4:	2b00      	cmp	r3, #0
 8001af6:	d00b      	beq.n	8001b10 <ILI9341_drawLine+0x68>
		swap_ILI9341(x0, y0);
 8001af8:	897b      	ldrh	r3, [r7, #10]
 8001afa:	843b      	strh	r3, [r7, #32]
 8001afc:	893b      	ldrh	r3, [r7, #8]
 8001afe:	817b      	strh	r3, [r7, #10]
 8001b00:	8c3b      	ldrh	r3, [r7, #32]
 8001b02:	813b      	strh	r3, [r7, #8]
		swap_ILI9341(x1, y1);
 8001b04:	88fb      	ldrh	r3, [r7, #6]
 8001b06:	83fb      	strh	r3, [r7, #30]
 8001b08:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001b0a:	80fb      	strh	r3, [r7, #6]
 8001b0c:	8bfb      	ldrh	r3, [r7, #30]
 8001b0e:	863b      	strh	r3, [r7, #48]	; 0x30
	}

	if (x0 > x1) {
 8001b10:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001b14:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001b18:	429a      	cmp	r2, r3
 8001b1a:	dd0b      	ble.n	8001b34 <ILI9341_drawLine+0x8c>
		swap_ILI9341(x0, x1);
 8001b1c:	897b      	ldrh	r3, [r7, #10]
 8001b1e:	83bb      	strh	r3, [r7, #28]
 8001b20:	88fb      	ldrh	r3, [r7, #6]
 8001b22:	817b      	strh	r3, [r7, #10]
 8001b24:	8bbb      	ldrh	r3, [r7, #28]
 8001b26:	80fb      	strh	r3, [r7, #6]
		swap_ILI9341(y0, y1);
 8001b28:	893b      	ldrh	r3, [r7, #8]
 8001b2a:	837b      	strh	r3, [r7, #26]
 8001b2c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8001b2e:	813b      	strh	r3, [r7, #8]
 8001b30:	8b7b      	ldrh	r3, [r7, #26]
 8001b32:	863b      	strh	r3, [r7, #48]	; 0x30
	}

	int16_t dx, dy;
	dx = x1 - x0;
 8001b34:	88fa      	ldrh	r2, [r7, #6]
 8001b36:	897b      	ldrh	r3, [r7, #10]
 8001b38:	1ad3      	subs	r3, r2, r3
 8001b3a:	b29b      	uxth	r3, r3
 8001b3c:	833b      	strh	r3, [r7, #24]
	dy = abs(y1 - y0);
 8001b3e:	f9b7 2030 	ldrsh.w	r2, [r7, #48]	; 0x30
 8001b42:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001b46:	1ad3      	subs	r3, r2, r3
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	bfb8      	it	lt
 8001b4c:	425b      	neglt	r3, r3
 8001b4e:	82fb      	strh	r3, [r7, #22]

	int16_t err = dx / 2;
 8001b50:	f9b7 3018 	ldrsh.w	r3, [r7, #24]
 8001b54:	0fda      	lsrs	r2, r3, #31
 8001b56:	4413      	add	r3, r2
 8001b58:	105b      	asrs	r3, r3, #1
 8001b5a:	84fb      	strh	r3, [r7, #38]	; 0x26
	int16_t ystep;

	if (y0 < y1) {
 8001b5c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001b60:	f9b7 3030 	ldrsh.w	r3, [r7, #48]	; 0x30
 8001b64:	429a      	cmp	r2, r3
 8001b66:	da02      	bge.n	8001b6e <ILI9341_drawLine+0xc6>
		ystep = 1;
 8001b68:	2301      	movs	r3, #1
 8001b6a:	84bb      	strh	r3, [r7, #36]	; 0x24
 8001b6c:	e02d      	b.n	8001bca <ILI9341_drawLine+0x122>
	} else {
		ystep = -1;
 8001b6e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001b72:	84bb      	strh	r3, [r7, #36]	; 0x24
	}

	for (; x0 <= x1; x0++) {
 8001b74:	e029      	b.n	8001bca <ILI9341_drawLine+0x122>
		if (steep) {
 8001b76:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d006      	beq.n	8001b8c <ILI9341_drawLine+0xe4>
			ILI9341_DrawPixel(spi, y0, x0, color);
 8001b7e:	8939      	ldrh	r1, [r7, #8]
 8001b80:	897a      	ldrh	r2, [r7, #10]
 8001b82:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001b84:	68f8      	ldr	r0, [r7, #12]
 8001b86:	f7ff feaf 	bl	80018e8 <ILI9341_DrawPixel>
 8001b8a:	e005      	b.n	8001b98 <ILI9341_drawLine+0xf0>
		} else {
			ILI9341_DrawPixel(spi, x0, y0, color);
 8001b8c:	8979      	ldrh	r1, [r7, #10]
 8001b8e:	893a      	ldrh	r2, [r7, #8]
 8001b90:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8001b92:	68f8      	ldr	r0, [r7, #12]
 8001b94:	f7ff fea8 	bl	80018e8 <ILI9341_DrawPixel>
		}
		err -= dy;
 8001b98:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001b9a:	8afb      	ldrh	r3, [r7, #22]
 8001b9c:	1ad3      	subs	r3, r2, r3
 8001b9e:	b29b      	uxth	r3, r3
 8001ba0:	84fb      	strh	r3, [r7, #38]	; 0x26
		if (err < 0) {
 8001ba2:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	da09      	bge.n	8001bbe <ILI9341_drawLine+0x116>
			y0 += ystep;
 8001baa:	893a      	ldrh	r2, [r7, #8]
 8001bac:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001bae:	4413      	add	r3, r2
 8001bb0:	b29b      	uxth	r3, r3
 8001bb2:	813b      	strh	r3, [r7, #8]
			err += dx;
 8001bb4:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 8001bb6:	8b3b      	ldrh	r3, [r7, #24]
 8001bb8:	4413      	add	r3, r2
 8001bba:	b29b      	uxth	r3, r3
 8001bbc:	84fb      	strh	r3, [r7, #38]	; 0x26
	for (; x0 <= x1; x0++) {
 8001bbe:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001bc2:	b29b      	uxth	r3, r3
 8001bc4:	3301      	adds	r3, #1
 8001bc6:	b29b      	uxth	r3, r3
 8001bc8:	817b      	strh	r3, [r7, #10]
 8001bca:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001bce:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001bd2:	429a      	cmp	r2, r3
 8001bd4:	ddcf      	ble.n	8001b76 <ILI9341_drawLine+0xce>
		}
	}
}
 8001bd6:	bf00      	nop
 8001bd8:	3728      	adds	r7, #40	; 0x28
 8001bda:	46bd      	mov	sp, r7
 8001bdc:	bd80      	pop	{r7, pc}

08001bde <ILI9341_drawFastHLine>:

void ILI9341_drawFastHLine(ILI9341_SPI *spi, int16_t x, int16_t y, int16_t w, uint16_t color) {
 8001bde:	b580      	push	{r7, lr}
 8001be0:	b086      	sub	sp, #24
 8001be2:	af02      	add	r7, sp, #8
 8001be4:	60f8      	str	r0, [r7, #12]
 8001be6:	4608      	mov	r0, r1
 8001be8:	4611      	mov	r1, r2
 8001bea:	461a      	mov	r2, r3
 8001bec:	4603      	mov	r3, r0
 8001bee:	817b      	strh	r3, [r7, #10]
 8001bf0:	460b      	mov	r3, r1
 8001bf2:	813b      	strh	r3, [r7, #8]
 8001bf4:	4613      	mov	r3, r2
 8001bf6:	80fb      	strh	r3, [r7, #6]
	ILI9341_drawLine(spi, x, y, x + w - 1, y, color);
 8001bf8:	897a      	ldrh	r2, [r7, #10]
 8001bfa:	88fb      	ldrh	r3, [r7, #6]
 8001bfc:	4413      	add	r3, r2
 8001bfe:	b29b      	uxth	r3, r3
 8001c00:	3b01      	subs	r3, #1
 8001c02:	b29b      	uxth	r3, r3
 8001c04:	b218      	sxth	r0, r3
 8001c06:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001c0a:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001c0e:	8b3b      	ldrh	r3, [r7, #24]
 8001c10:	9301      	str	r3, [sp, #4]
 8001c12:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001c16:	9300      	str	r3, [sp, #0]
 8001c18:	4603      	mov	r3, r0
 8001c1a:	68f8      	ldr	r0, [r7, #12]
 8001c1c:	f7ff ff44 	bl	8001aa8 <ILI9341_drawLine>
}
 8001c20:	bf00      	nop
 8001c22:	3710      	adds	r7, #16
 8001c24:	46bd      	mov	sp, r7
 8001c26:	bd80      	pop	{r7, pc}

08001c28 <ILI9341_drawFastVLine>:

void ILI9341_drawFastVLine(ILI9341_SPI *spi, int16_t x, int16_t y, int16_t h, uint16_t color) {
 8001c28:	b590      	push	{r4, r7, lr}
 8001c2a:	b087      	sub	sp, #28
 8001c2c:	af02      	add	r7, sp, #8
 8001c2e:	60f8      	str	r0, [r7, #12]
 8001c30:	4608      	mov	r0, r1
 8001c32:	4611      	mov	r1, r2
 8001c34:	461a      	mov	r2, r3
 8001c36:	4603      	mov	r3, r0
 8001c38:	817b      	strh	r3, [r7, #10]
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	813b      	strh	r3, [r7, #8]
 8001c3e:	4613      	mov	r3, r2
 8001c40:	80fb      	strh	r3, [r7, #6]
	ILI9341_drawLine(spi, x, y, x, y + h - 1, color);
 8001c42:	893a      	ldrh	r2, [r7, #8]
 8001c44:	88fb      	ldrh	r3, [r7, #6]
 8001c46:	4413      	add	r3, r2
 8001c48:	b29b      	uxth	r3, r3
 8001c4a:	3b01      	subs	r3, #1
 8001c4c:	b29b      	uxth	r3, r3
 8001c4e:	b21b      	sxth	r3, r3
 8001c50:	f9b7 400a 	ldrsh.w	r4, [r7, #10]
 8001c54:	f9b7 0008 	ldrsh.w	r0, [r7, #8]
 8001c58:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001c5c:	8c3a      	ldrh	r2, [r7, #32]
 8001c5e:	9201      	str	r2, [sp, #4]
 8001c60:	9300      	str	r3, [sp, #0]
 8001c62:	4623      	mov	r3, r4
 8001c64:	4602      	mov	r2, r0
 8001c66:	68f8      	ldr	r0, [r7, #12]
 8001c68:	f7ff ff1e 	bl	8001aa8 <ILI9341_drawLine>
}
 8001c6c:	bf00      	nop
 8001c6e:	3714      	adds	r7, #20
 8001c70:	46bd      	mov	sp, r7
 8001c72:	bd90      	pop	{r4, r7, pc}

08001c74 <ILI9341_drawChar>:
		ILI9341_drawFastHLine(spi, a, y, b - a + 1, color);
	}
}

// Text printing functions
void ILI9341_drawChar(ILI9341_SPI *spi, int16_t x, int16_t y, unsigned char c, uint16_t color, uint16_t bg, uint8_t size) {
 8001c74:	b5b0      	push	{r4, r5, r7, lr}
 8001c76:	b088      	sub	sp, #32
 8001c78:	af02      	add	r7, sp, #8
 8001c7a:	60f8      	str	r0, [r7, #12]
 8001c7c:	4608      	mov	r0, r1
 8001c7e:	4611      	mov	r1, r2
 8001c80:	461a      	mov	r2, r3
 8001c82:	4603      	mov	r3, r0
 8001c84:	817b      	strh	r3, [r7, #10]
 8001c86:	460b      	mov	r3, r1
 8001c88:	813b      	strh	r3, [r7, #8]
 8001c8a:	4613      	mov	r3, r2
 8001c8c:	71fb      	strb	r3, [r7, #7]
	if (spi->rotationNum == 1 || spi->rotationNum == 3) {
 8001c8e:	68fb      	ldr	r3, [r7, #12]
 8001c90:	781b      	ldrb	r3, [r3, #0]
 8001c92:	2b01      	cmp	r3, #1
 8001c94:	d003      	beq.n	8001c9e <ILI9341_drawChar+0x2a>
 8001c96:	68fb      	ldr	r3, [r7, #12]
 8001c98:	781b      	ldrb	r3, [r3, #0]
 8001c9a:	2b03      	cmp	r3, #3
 8001c9c:	d121      	bne.n	8001ce2 <ILI9341_drawChar+0x6e>
		if ((x >= ILI9341_WIDTH) || // Clip right
 8001c9e:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001ca2:	2bef      	cmp	r3, #239	; 0xef
 8001ca4:	f300 8122 	bgt.w	8001eec <ILI9341_drawChar+0x278>
 8001ca8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001cac:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001cb0:	f280 811c 	bge.w	8001eec <ILI9341_drawChar+0x278>
				(y >= ILI9341_HEIGHT) || // Clip bottom
				((x + 6 * size - 1) < 0) || // Clip left
 8001cb4:	f9b7 100a 	ldrsh.w	r1, [r7, #10]
 8001cb8:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001cbc:	4613      	mov	r3, r2
 8001cbe:	005b      	lsls	r3, r3, #1
 8001cc0:	4413      	add	r3, r2
 8001cc2:	005b      	lsls	r3, r3, #1
 8001cc4:	440b      	add	r3, r1
 8001cc6:	3b01      	subs	r3, #1
				(y >= ILI9341_HEIGHT) || // Clip bottom
 8001cc8:	2b00      	cmp	r3, #0
 8001cca:	f2c0 810f 	blt.w	8001eec <ILI9341_drawChar+0x278>
				((y + 8 * size - 1) < 0))   // Clip top
 8001cce:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001cd2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001cd6:	00db      	lsls	r3, r3, #3
 8001cd8:	4413      	add	r3, r2
 8001cda:	3b01      	subs	r3, #1
				((x + 6 * size - 1) < 0) || // Clip left
 8001cdc:	2b00      	cmp	r3, #0
 8001cde:	da23      	bge.n	8001d28 <ILI9341_drawChar+0xb4>
			return;
 8001ce0:	e104      	b.n	8001eec <ILI9341_drawChar+0x278>
	} else {
		if ((y >= ILI9341_WIDTH) || // Clip right
 8001ce2:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001ce6:	2bef      	cmp	r3, #239	; 0xef
 8001ce8:	f300 8102 	bgt.w	8001ef0 <ILI9341_drawChar+0x27c>
 8001cec:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001cf0:	f5b3 7fa0 	cmp.w	r3, #320	; 0x140
 8001cf4:	f280 80fc 	bge.w	8001ef0 <ILI9341_drawChar+0x27c>
				(x >= ILI9341_HEIGHT) || // Clip bottom
				((y + 6 * size - 1) < 0) || // Clip left
 8001cf8:	f9b7 1008 	ldrsh.w	r1, [r7, #8]
 8001cfc:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001d00:	4613      	mov	r3, r2
 8001d02:	005b      	lsls	r3, r3, #1
 8001d04:	4413      	add	r3, r2
 8001d06:	005b      	lsls	r3, r3, #1
 8001d08:	440b      	add	r3, r1
 8001d0a:	3b01      	subs	r3, #1
				(x >= ILI9341_HEIGHT) || // Clip bottom
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	f2c0 80ef 	blt.w	8001ef0 <ILI9341_drawChar+0x27c>
				((x + 8 * size - 1) < 0))   // Clip top
 8001d12:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001d16:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d1a:	00db      	lsls	r3, r3, #3
 8001d1c:	4413      	add	r3, r2
 8001d1e:	3b01      	subs	r3, #1
				((y + 6 * size - 1) < 0) || // Clip left
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	f2c0 80e5 	blt.w	8001ef0 <ILI9341_drawChar+0x27c>
 8001d26:	e000      	b.n	8001d2a <ILI9341_drawChar+0xb6>
		if ((x >= ILI9341_WIDTH) || // Clip right
 8001d28:	bf00      	nop
			return;
	}

	if (!spi->_cp437 && (c >= 176))
 8001d2a:	68fb      	ldr	r3, [r7, #12]
 8001d2c:	785b      	ldrb	r3, [r3, #1]
 8001d2e:	2b00      	cmp	r3, #0
 8001d30:	d105      	bne.n	8001d3e <ILI9341_drawChar+0xca>
 8001d32:	79fb      	ldrb	r3, [r7, #7]
 8001d34:	2baf      	cmp	r3, #175	; 0xaf
 8001d36:	d902      	bls.n	8001d3e <ILI9341_drawChar+0xca>
		c++; // Handle 'classic' charset behavior
 8001d38:	79fb      	ldrb	r3, [r7, #7]
 8001d3a:	3301      	adds	r3, #1
 8001d3c:	71fb      	strb	r3, [r7, #7]

	for (int8_t i = 0; i < 6; i++) {
 8001d3e:	2300      	movs	r3, #0
 8001d40:	75fb      	strb	r3, [r7, #23]
 8001d42:	e0cd      	b.n	8001ee0 <ILI9341_drawChar+0x26c>
		uint8_t line;
		if (i == 5)
 8001d44:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d48:	2b05      	cmp	r3, #5
 8001d4a:	d102      	bne.n	8001d52 <ILI9341_drawChar+0xde>
			line = 0x0;
 8001d4c:	2300      	movs	r3, #0
 8001d4e:	75bb      	strb	r3, [r7, #22]
 8001d50:	e00b      	b.n	8001d6a <ILI9341_drawChar+0xf6>
		else
			line = pgm_read_byte_ILI9341(font1 + (c * 5) + i);
 8001d52:	79fa      	ldrb	r2, [r7, #7]
 8001d54:	4613      	mov	r3, r2
 8001d56:	009b      	lsls	r3, r3, #2
 8001d58:	4413      	add	r3, r2
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d60:	4413      	add	r3, r2
 8001d62:	4a65      	ldr	r2, [pc, #404]	; (8001ef8 <ILI9341_drawChar+0x284>)
 8001d64:	4413      	add	r3, r2
 8001d66:	781b      	ldrb	r3, [r3, #0]
 8001d68:	75bb      	strb	r3, [r7, #22]
		for (int8_t j = 0; j < 8; j++) {
 8001d6a:	2300      	movs	r3, #0
 8001d6c:	757b      	strb	r3, [r7, #21]
 8001d6e:	e0ac      	b.n	8001eca <ILI9341_drawChar+0x256>
			if (line & 0x1) {
 8001d70:	7dbb      	ldrb	r3, [r7, #22]
 8001d72:	f003 0301 	and.w	r3, r3, #1
 8001d76:	2b00      	cmp	r3, #0
 8001d78:	d04d      	beq.n	8001e16 <ILI9341_drawChar+0x1a2>
				if (size == 1) // default size
 8001d7a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001d7e:	2b01      	cmp	r3, #1
 8001d80:	d110      	bne.n	8001da4 <ILI9341_drawChar+0x130>
					ILI9341_DrawPixel(spi, x + i, y + j, color);
 8001d82:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001d86:	b29a      	uxth	r2, r3
 8001d88:	897b      	ldrh	r3, [r7, #10]
 8001d8a:	4413      	add	r3, r2
 8001d8c:	b299      	uxth	r1, r3
 8001d8e:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001d92:	b29a      	uxth	r2, r3
 8001d94:	893b      	ldrh	r3, [r7, #8]
 8001d96:	4413      	add	r3, r2
 8001d98:	b29a      	uxth	r2, r3
 8001d9a:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001d9c:	68f8      	ldr	r0, [r7, #12]
 8001d9e:	f7ff fda3 	bl	80018e8 <ILI9341_DrawPixel>
 8001da2:	e089      	b.n	8001eb8 <ILI9341_drawChar+0x244>
				else {  // big size
					ILI9341_Fill_Rect(spi, x + (i * size), y + (j * size), size + x + (i * size), size + 1 + y + (j * size), color);
 8001da4:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001da8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001dac:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8001db0:	fb01 f303 	mul.w	r3, r1, r3
 8001db4:	4413      	add	r3, r2
 8001db6:	4618      	mov	r0, r3
 8001db8:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001dbc:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001dc0:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8001dc4:	fb01 f303 	mul.w	r3, r1, r3
 8001dc8:	4413      	add	r3, r2
 8001dca:	461c      	mov	r4, r3
 8001dcc:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001dd0:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001dd4:	441a      	add	r2, r3
 8001dd6:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001dda:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8001dde:	fb01 f303 	mul.w	r3, r1, r3
 8001de2:	4413      	add	r3, r2
 8001de4:	461d      	mov	r5, r3
 8001de6:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001dea:	1c5a      	adds	r2, r3, #1
 8001dec:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001df0:	441a      	add	r2, r3
 8001df2:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001df6:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8001dfa:	fb01 f303 	mul.w	r3, r1, r3
 8001dfe:	4413      	add	r3, r2
 8001e00:	461a      	mov	r2, r3
 8001e02:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e04:	9301      	str	r3, [sp, #4]
 8001e06:	9200      	str	r2, [sp, #0]
 8001e08:	462b      	mov	r3, r5
 8001e0a:	4622      	mov	r2, r4
 8001e0c:	4601      	mov	r1, r0
 8001e0e:	68f8      	ldr	r0, [r7, #12]
 8001e10:	f7ff fdd7 	bl	80019c2 <ILI9341_Fill_Rect>
 8001e14:	e050      	b.n	8001eb8 <ILI9341_drawChar+0x244>
				}
			} else if (bg != color) {
 8001e16:	8dba      	ldrh	r2, [r7, #44]	; 0x2c
 8001e18:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8001e1a:	429a      	cmp	r2, r3
 8001e1c:	d04c      	beq.n	8001eb8 <ILI9341_drawChar+0x244>
				if (size == 1) // default size
 8001e1e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e22:	2b01      	cmp	r3, #1
 8001e24:	d110      	bne.n	8001e48 <ILI9341_drawChar+0x1d4>
					ILI9341_DrawPixel(spi, x + i, y + j, bg);
 8001e26:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e2a:	b29a      	uxth	r2, r3
 8001e2c:	897b      	ldrh	r3, [r7, #10]
 8001e2e:	4413      	add	r3, r2
 8001e30:	b299      	uxth	r1, r3
 8001e32:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001e36:	b29a      	uxth	r2, r3
 8001e38:	893b      	ldrh	r3, [r7, #8]
 8001e3a:	4413      	add	r3, r2
 8001e3c:	b29a      	uxth	r2, r3
 8001e3e:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001e40:	68f8      	ldr	r0, [r7, #12]
 8001e42:	f7ff fd51 	bl	80018e8 <ILI9341_DrawPixel>
 8001e46:	e037      	b.n	8001eb8 <ILI9341_drawChar+0x244>
				else {  // big size
					ILI9341_Fill_Rect(spi, x + i * size, y + j * size, size + x + i * size, size + 1 + y + j * size, bg);
 8001e48:	f9b7 200a 	ldrsh.w	r2, [r7, #10]
 8001e4c:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e50:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8001e54:	fb01 f303 	mul.w	r3, r1, r3
 8001e58:	4413      	add	r3, r2
 8001e5a:	4618      	mov	r0, r3
 8001e5c:	f9b7 2008 	ldrsh.w	r2, [r7, #8]
 8001e60:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001e64:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8001e68:	fb01 f303 	mul.w	r3, r1, r3
 8001e6c:	4413      	add	r3, r2
 8001e6e:	461c      	mov	r4, r3
 8001e70:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8001e74:	f9b7 300a 	ldrsh.w	r3, [r7, #10]
 8001e78:	441a      	add	r2, r3
 8001e7a:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001e7e:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8001e82:	fb01 f303 	mul.w	r3, r1, r3
 8001e86:	4413      	add	r3, r2
 8001e88:	461d      	mov	r5, r3
 8001e8a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8001e8e:	1c5a      	adds	r2, r3, #1
 8001e90:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001e94:	441a      	add	r2, r3
 8001e96:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001e9a:	f897 1030 	ldrb.w	r1, [r7, #48]	; 0x30
 8001e9e:	fb01 f303 	mul.w	r3, r1, r3
 8001ea2:	4413      	add	r3, r2
 8001ea4:	461a      	mov	r2, r3
 8001ea6:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8001ea8:	9301      	str	r3, [sp, #4]
 8001eaa:	9200      	str	r2, [sp, #0]
 8001eac:	462b      	mov	r3, r5
 8001eae:	4622      	mov	r2, r4
 8001eb0:	4601      	mov	r1, r0
 8001eb2:	68f8      	ldr	r0, [r7, #12]
 8001eb4:	f7ff fd85 	bl	80019c2 <ILI9341_Fill_Rect>
				}
			}
			line >>= 1;
 8001eb8:	7dbb      	ldrb	r3, [r7, #22]
 8001eba:	085b      	lsrs	r3, r3, #1
 8001ebc:	75bb      	strb	r3, [r7, #22]
		for (int8_t j = 0; j < 8; j++) {
 8001ebe:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001ec2:	b2db      	uxtb	r3, r3
 8001ec4:	3301      	adds	r3, #1
 8001ec6:	b2db      	uxtb	r3, r3
 8001ec8:	757b      	strb	r3, [r7, #21]
 8001eca:	f997 3015 	ldrsb.w	r3, [r7, #21]
 8001ece:	2b07      	cmp	r3, #7
 8001ed0:	f77f af4e 	ble.w	8001d70 <ILI9341_drawChar+0xfc>
	for (int8_t i = 0; i < 6; i++) {
 8001ed4:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ed8:	b2db      	uxtb	r3, r3
 8001eda:	3301      	adds	r3, #1
 8001edc:	b2db      	uxtb	r3, r3
 8001ede:	75fb      	strb	r3, [r7, #23]
 8001ee0:	f997 3017 	ldrsb.w	r3, [r7, #23]
 8001ee4:	2b05      	cmp	r3, #5
 8001ee6:	f77f af2d 	ble.w	8001d44 <ILI9341_drawChar+0xd0>
 8001eea:	e002      	b.n	8001ef2 <ILI9341_drawChar+0x27e>
			return;
 8001eec:	bf00      	nop
 8001eee:	e000      	b.n	8001ef2 <ILI9341_drawChar+0x27e>
			return;
 8001ef0:	bf00      	nop
		}
	}
}
 8001ef2:	3718      	adds	r7, #24
 8001ef4:	46bd      	mov	sp, r7
 8001ef6:	bdb0      	pop	{r4, r5, r7, pc}
 8001ef8:	08011aec 	.word	0x08011aec

08001efc <ILI9341_printText>:
void ILI9341_printText(ILI9341_SPI *spi, char text[], int16_t x, int16_t y, uint16_t color, uint16_t bg, uint8_t size) {
 8001efc:	b580      	push	{r7, lr}
 8001efe:	b08a      	sub	sp, #40	; 0x28
 8001f00:	af04      	add	r7, sp, #16
 8001f02:	60f8      	str	r0, [r7, #12]
 8001f04:	60b9      	str	r1, [r7, #8]
 8001f06:	4611      	mov	r1, r2
 8001f08:	461a      	mov	r2, r3
 8001f0a:	460b      	mov	r3, r1
 8001f0c:	80fb      	strh	r3, [r7, #6]
 8001f0e:	4613      	mov	r3, r2
 8001f10:	80bb      	strh	r3, [r7, #4]
	int16_t offset;
	offset = size * 6;
 8001f12:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001f16:	b29b      	uxth	r3, r3
 8001f18:	461a      	mov	r2, r3
 8001f1a:	0052      	lsls	r2, r2, #1
 8001f1c:	4413      	add	r3, r2
 8001f1e:	005b      	lsls	r3, r3, #1
 8001f20:	b29b      	uxth	r3, r3
 8001f22:	82bb      	strh	r3, [r7, #20]
	for (uint16_t i = 0; i < 40 && text[i] != NULL; i++) {
 8001f24:	2300      	movs	r3, #0
 8001f26:	82fb      	strh	r3, [r7, #22]
 8001f28:	e01c      	b.n	8001f64 <ILI9341_printText+0x68>
		ILI9341_drawChar(spi, x + (offset * i), y, text[i], color, bg, size);
 8001f2a:	8abb      	ldrh	r3, [r7, #20]
 8001f2c:	8afa      	ldrh	r2, [r7, #22]
 8001f2e:	fb12 f303 	smulbb	r3, r2, r3
 8001f32:	b29a      	uxth	r2, r3
 8001f34:	88fb      	ldrh	r3, [r7, #6]
 8001f36:	4413      	add	r3, r2
 8001f38:	b29b      	uxth	r3, r3
 8001f3a:	b219      	sxth	r1, r3
 8001f3c:	8afb      	ldrh	r3, [r7, #22]
 8001f3e:	68ba      	ldr	r2, [r7, #8]
 8001f40:	4413      	add	r3, r2
 8001f42:	7818      	ldrb	r0, [r3, #0]
 8001f44:	f9b7 2004 	ldrsh.w	r2, [r7, #4]
 8001f48:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8001f4c:	9302      	str	r3, [sp, #8]
 8001f4e:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8001f50:	9301      	str	r3, [sp, #4]
 8001f52:	8c3b      	ldrh	r3, [r7, #32]
 8001f54:	9300      	str	r3, [sp, #0]
 8001f56:	4603      	mov	r3, r0
 8001f58:	68f8      	ldr	r0, [r7, #12]
 8001f5a:	f7ff fe8b 	bl	8001c74 <ILI9341_drawChar>
	for (uint16_t i = 0; i < 40 && text[i] != NULL; i++) {
 8001f5e:	8afb      	ldrh	r3, [r7, #22]
 8001f60:	3301      	adds	r3, #1
 8001f62:	82fb      	strh	r3, [r7, #22]
 8001f64:	8afb      	ldrh	r3, [r7, #22]
 8001f66:	2b27      	cmp	r3, #39	; 0x27
 8001f68:	d805      	bhi.n	8001f76 <ILI9341_printText+0x7a>
 8001f6a:	8afb      	ldrh	r3, [r7, #22]
 8001f6c:	68ba      	ldr	r2, [r7, #8]
 8001f6e:	4413      	add	r3, r2
 8001f70:	781b      	ldrb	r3, [r3, #0]
 8001f72:	2b00      	cmp	r3, #0
 8001f74:	d1d9      	bne.n	8001f2a <ILI9341_printText+0x2e>
	}
}
 8001f76:	bf00      	nop
 8001f78:	3718      	adds	r7, #24
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}

08001f7e <ILI9341_printImage>:

// Image print (RGB 565, 2 bytes per pixel)
void ILI9341_printImage(ILI9341_SPI *spi, uint16_t x, uint16_t y, uint16_t w, uint16_t h, const uint8_t *data, uint32_t size) {
 8001f7e:	b580      	push	{r7, lr}
 8001f80:	b088      	sub	sp, #32
 8001f82:	af02      	add	r7, sp, #8
 8001f84:	60f8      	str	r0, [r7, #12]
 8001f86:	4608      	mov	r0, r1
 8001f88:	4611      	mov	r1, r2
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	4603      	mov	r3, r0
 8001f8e:	817b      	strh	r3, [r7, #10]
 8001f90:	460b      	mov	r3, r1
 8001f92:	813b      	strh	r3, [r7, #8]
 8001f94:	4613      	mov	r3, r2
 8001f96:	80fb      	strh	r3, [r7, #6]
	uint32_t n = size;
 8001f98:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001f9a:	613b      	str	r3, [r7, #16]
	ILI9341_SetCursorPosition(spi, x, y, w + x - 1, h + y - 1);
 8001f9c:	88fa      	ldrh	r2, [r7, #6]
 8001f9e:	897b      	ldrh	r3, [r7, #10]
 8001fa0:	4413      	add	r3, r2
 8001fa2:	b29b      	uxth	r3, r3
 8001fa4:	3b01      	subs	r3, #1
 8001fa6:	b298      	uxth	r0, r3
 8001fa8:	8c3a      	ldrh	r2, [r7, #32]
 8001faa:	893b      	ldrh	r3, [r7, #8]
 8001fac:	4413      	add	r3, r2
 8001fae:	b29b      	uxth	r3, r3
 8001fb0:	3b01      	subs	r3, #1
 8001fb2:	b29b      	uxth	r3, r3
 8001fb4:	893a      	ldrh	r2, [r7, #8]
 8001fb6:	8979      	ldrh	r1, [r7, #10]
 8001fb8:	9300      	str	r3, [sp, #0]
 8001fba:	4603      	mov	r3, r0
 8001fbc:	68f8      	ldr	r0, [r7, #12]
 8001fbe:	f7ff fc3e 	bl	800183e <ILI9341_SetCursorPosition>
	for (uint32_t i = 0; i < n; i++) {
 8001fc2:	2300      	movs	r3, #0
 8001fc4:	617b      	str	r3, [r7, #20]
 8001fc6:	e00a      	b.n	8001fde <ILI9341_printImage+0x60>
		ILI9341_SendData(spi, data[i]);
 8001fc8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001fca:	697b      	ldr	r3, [r7, #20]
 8001fcc:	4413      	add	r3, r2
 8001fce:	781b      	ldrb	r3, [r3, #0]
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	68f8      	ldr	r0, [r7, #12]
 8001fd4:	f7ff fc07 	bl	80017e6 <ILI9341_SendData>
	for (uint32_t i = 0; i < n; i++) {
 8001fd8:	697b      	ldr	r3, [r7, #20]
 8001fda:	3301      	adds	r3, #1
 8001fdc:	617b      	str	r3, [r7, #20]
 8001fde:	697a      	ldr	r2, [r7, #20]
 8001fe0:	693b      	ldr	r3, [r7, #16]
 8001fe2:	429a      	cmp	r2, r3
 8001fe4:	d3f0      	bcc.n	8001fc8 <ILI9341_printImage+0x4a>
	}
}
 8001fe6:	bf00      	nop
 8001fe8:	3718      	adds	r7, #24
 8001fea:	46bd      	mov	sp, r7
 8001fec:	bd80      	pop	{r7, pc}
	...

08001ff0 <ILI9341_setRotation>:

// Set screen rotation
void ILI9341_setRotation(ILI9341_SPI *spi, uint8_t rotate) {
 8001ff0:	b580      	push	{r7, lr}
 8001ff2:	b082      	sub	sp, #8
 8001ff4:	af00      	add	r7, sp, #0
 8001ff6:	6078      	str	r0, [r7, #4]
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	70fb      	strb	r3, [r7, #3]
	if(spi->ScreenOrientation == rotate)
 8001ffc:	687b      	ldr	r3, [r7, #4]
 8001ffe:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 8002002:	78fa      	ldrb	r2, [r7, #3]
 8002004:	429a      	cmp	r2, r3
 8002006:	d050      	beq.n	80020aa <ILI9341_setRotation+0xba>
		return; // No action

	spi->ScreenOrientation = rotate;
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	78fa      	ldrb	r2, [r7, #3]
 800200c:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
	switch (rotate) {
 8002010:	78fb      	ldrb	r3, [r7, #3]
 8002012:	3b01      	subs	r3, #1
 8002014:	2b03      	cmp	r3, #3
 8002016:	d83b      	bhi.n	8002090 <ILI9341_setRotation+0xa0>
 8002018:	a201      	add	r2, pc, #4	; (adr r2, 8002020 <ILI9341_setRotation+0x30>)
 800201a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800201e:	bf00      	nop
 8002020:	08002031 	.word	0x08002031
 8002024:	08002049 	.word	0x08002049
 8002028:	08002061 	.word	0x08002061
 800202c:	08002079 	.word	0x08002079
	case 1:
		spi->rotationNum = 1;
 8002030:	687b      	ldr	r3, [r7, #4]
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
		ILI9341_SendCommand(spi, ILI9341_MEMCONTROL);
 8002036:	2136      	movs	r1, #54	; 0x36
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff fba8 	bl	800178e <ILI9341_SendCommand>
		ILI9341_SendData(spi, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 800203e:	2188      	movs	r1, #136	; 0x88
 8002040:	6878      	ldr	r0, [r7, #4]
 8002042:	f7ff fbd0 	bl	80017e6 <ILI9341_SendData>
		break;
 8002046:	e031      	b.n	80020ac <ILI9341_setRotation+0xbc>
	case 2:
		spi->rotationNum = 2;
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	2202      	movs	r2, #2
 800204c:	701a      	strb	r2, [r3, #0]
		ILI9341_SendCommand(spi, ILI9341_MEMCONTROL);
 800204e:	2136      	movs	r1, #54	; 0x36
 8002050:	6878      	ldr	r0, [r7, #4]
 8002052:	f7ff fb9c 	bl	800178e <ILI9341_SendCommand>
		ILI9341_SendData(spi, ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8002056:	2128      	movs	r1, #40	; 0x28
 8002058:	6878      	ldr	r0, [r7, #4]
 800205a:	f7ff fbc4 	bl	80017e6 <ILI9341_SendData>
		break;
 800205e:	e025      	b.n	80020ac <ILI9341_setRotation+0xbc>
	case 3:
		spi->rotationNum = 3;
 8002060:	687b      	ldr	r3, [r7, #4]
 8002062:	2203      	movs	r2, #3
 8002064:	701a      	strb	r2, [r3, #0]
		ILI9341_SendCommand(spi, ILI9341_MEMCONTROL);
 8002066:	2136      	movs	r1, #54	; 0x36
 8002068:	6878      	ldr	r0, [r7, #4]
 800206a:	f7ff fb90 	bl	800178e <ILI9341_SendCommand>
		ILI9341_SendData(spi, ILI9341_MADCTL_MX | ILI9341_MADCTL_BGR);
 800206e:	2148      	movs	r1, #72	; 0x48
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff fbb8 	bl	80017e6 <ILI9341_SendData>
		break;
 8002076:	e019      	b.n	80020ac <ILI9341_setRotation+0xbc>
	case 4:
		spi->rotationNum = 4;
 8002078:	687b      	ldr	r3, [r7, #4]
 800207a:	2204      	movs	r2, #4
 800207c:	701a      	strb	r2, [r3, #0]
		ILI9341_SendCommand(spi, ILI9341_MEMCONTROL);
 800207e:	2136      	movs	r1, #54	; 0x36
 8002080:	6878      	ldr	r0, [r7, #4]
 8002082:	f7ff fb84 	bl	800178e <ILI9341_SendCommand>
		ILI9341_SendData(spi, ILI9341_MADCTL_MX | ILI9341_MADCTL_MY | ILI9341_MADCTL_MV | ILI9341_MADCTL_BGR);
 8002086:	21e8      	movs	r1, #232	; 0xe8
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff fbac 	bl	80017e6 <ILI9341_SendData>
		break;
 800208e:	e00d      	b.n	80020ac <ILI9341_setRotation+0xbc>
	default:
		spi->rotationNum = 1;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	2201      	movs	r2, #1
 8002094:	701a      	strb	r2, [r3, #0]
		ILI9341_SendCommand(spi, ILI9341_MEMCONTROL);
 8002096:	2136      	movs	r1, #54	; 0x36
 8002098:	6878      	ldr	r0, [r7, #4]
 800209a:	f7ff fb78 	bl	800178e <ILI9341_SendCommand>
		ILI9341_SendData(spi, ILI9341_MADCTL_MY | ILI9341_MADCTL_BGR);
 800209e:	2188      	movs	r1, #136	; 0x88
 80020a0:	6878      	ldr	r0, [r7, #4]
 80020a2:	f7ff fba0 	bl	80017e6 <ILI9341_SendData>
		break;
 80020a6:	bf00      	nop
 80020a8:	e000      	b.n	80020ac <ILI9341_setRotation+0xbc>
		return; // No action
 80020aa:	bf00      	nop
	}
}
 80020ac:	3708      	adds	r7, #8
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}
 80020b2:	bf00      	nop

080020b4 <ILI9341_Init>:
 * CPHA = 1 Edge
 * Prescaler = 8 (be careful for this. Lower than 8 can cause trouble with the touch)
 * First bit = MBS first
 * CPOL = Low
 */
void ILI9341_Init(ILI9341_SPI *spi, SPI_HandleTypeDef *lcdHandle, GPIO_TypeDef *LCD_CS_PORT, uint16_t LCD_CS_PIN, GPIO_TypeDef *DC_PORT, uint16_t DC_PIN, GPIO_TypeDef *RESET_PORT, uint16_t RESET_PIN, GPIO_TypeDef *CS_PORT_TOUCH, uint16_t CS_PIN_TOUCH) {
 80020b4:	b5b0      	push	{r4, r5, r7, lr}
 80020b6:	b08e      	sub	sp, #56	; 0x38
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
 80020c0:	807b      	strh	r3, [r7, #2]
	//Copy SPI settings
	spi->lcdHandle = lcdHandle;
 80020c2:	68fb      	ldr	r3, [r7, #12]
 80020c4:	68ba      	ldr	r2, [r7, #8]
 80020c6:	605a      	str	r2, [r3, #4]
	//CS pin
	spi->LCD_CS_PORT = LCD_CS_PORT;
 80020c8:	68fb      	ldr	r3, [r7, #12]
 80020ca:	687a      	ldr	r2, [r7, #4]
 80020cc:	609a      	str	r2, [r3, #8]
	spi->LCD_CS_PIN = LCD_CS_PIN;
 80020ce:	68fb      	ldr	r3, [r7, #12]
 80020d0:	887a      	ldrh	r2, [r7, #2]
 80020d2:	819a      	strh	r2, [r3, #12]
	//DC pin
	spi->DC_PORT = DC_PORT;
 80020d4:	68fb      	ldr	r3, [r7, #12]
 80020d6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80020d8:	611a      	str	r2, [r3, #16]
	spi->DC_PIN = DC_PIN;
 80020da:	68fb      	ldr	r3, [r7, #12]
 80020dc:	f8b7 204c 	ldrh.w	r2, [r7, #76]	; 0x4c
 80020e0:	829a      	strh	r2, [r3, #20]
	HAL_GPIO_WritePin(spi->DC_PORT, spi->DC_PIN, GPIO_PIN_SET);
 80020e2:	68fb      	ldr	r3, [r7, #12]
 80020e4:	6918      	ldr	r0, [r3, #16]
 80020e6:	68fb      	ldr	r3, [r7, #12]
 80020e8:	8a9b      	ldrh	r3, [r3, #20]
 80020ea:	2201      	movs	r2, #1
 80020ec:	4619      	mov	r1, r3
 80020ee:	f008 f99d 	bl	800a42c <HAL_GPIO_WritePin>
	//RESET pin
	spi->RESET_PORT = RESET_PORT;
 80020f2:	68fb      	ldr	r3, [r7, #12]
 80020f4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80020f6:	619a      	str	r2, [r3, #24]
	spi->RESET_PIN = RESET_PIN;
 80020f8:	68fb      	ldr	r3, [r7, #12]
 80020fa:	f8b7 2054 	ldrh.w	r2, [r7, #84]	; 0x54
 80020fe:	839a      	strh	r2, [r3, #28]
	HAL_GPIO_WritePin(spi->RESET_PORT, spi->RESET_PIN, GPIO_PIN_SET); //Turn LCD ON
 8002100:	68fb      	ldr	r3, [r7, #12]
 8002102:	6998      	ldr	r0, [r3, #24]
 8002104:	68fb      	ldr	r3, [r7, #12]
 8002106:	8b9b      	ldrh	r3, [r3, #28]
 8002108:	2201      	movs	r2, #1
 800210a:	4619      	mov	r1, r3
 800210c:	f008 f98e 	bl	800a42c <HAL_GPIO_WritePin>
	// Initial parameters
	spi->_cp437 = 0; // False
 8002110:	68fb      	ldr	r3, [r7, #12]
 8002112:	2200      	movs	r2, #0
 8002114:	705a      	strb	r2, [r3, #1]
	spi->rotationNum = 1;
 8002116:	68fb      	ldr	r3, [r7, #12]
 8002118:	2201      	movs	r2, #1
 800211a:	701a      	strb	r2, [r3, #0]

	ILI9341_SendCommand(spi, ILI9341_RESET); // software reset comand
 800211c:	2101      	movs	r1, #1
 800211e:	68f8      	ldr	r0, [r7, #12]
 8002120:	f7ff fb35 	bl	800178e <ILI9341_SendCommand>
	HAL_Delay(100);
 8002124:	2064      	movs	r0, #100	; 0x64
 8002126:	f006 fd93 	bl	8008c50 <HAL_Delay>
	ILI9341_SendCommand(spi, ILI9341_DISPLAY_OFF); // display off
 800212a:	2128      	movs	r1, #40	; 0x28
 800212c:	68f8      	ldr	r0, [r7, #12]
 800212e:	f7ff fb2e 	bl	800178e <ILI9341_SendCommand>
	//------------power control------------------------------
	ILI9341_SendCommand(spi, ILI9341_POWER1); // power control
 8002132:	21c0      	movs	r1, #192	; 0xc0
 8002134:	68f8      	ldr	r0, [r7, #12]
 8002136:	f7ff fb2a 	bl	800178e <ILI9341_SendCommand>
	ILI9341_SendData(spi, 0x26); // GVDD = 4.75v
 800213a:	2126      	movs	r1, #38	; 0x26
 800213c:	68f8      	ldr	r0, [r7, #12]
 800213e:	f7ff fb52 	bl	80017e6 <ILI9341_SendData>
	ILI9341_SendCommand(spi, ILI9341_POWER2); // power control
 8002142:	21c1      	movs	r1, #193	; 0xc1
 8002144:	68f8      	ldr	r0, [r7, #12]
 8002146:	f7ff fb22 	bl	800178e <ILI9341_SendCommand>
	ILI9341_SendData(spi, 0x11); // AVDD=VCIx2, VGH=VCIx7, VGL=-VCIx3
 800214a:	2111      	movs	r1, #17
 800214c:	68f8      	ldr	r0, [r7, #12]
 800214e:	f7ff fb4a 	bl	80017e6 <ILI9341_SendData>
	//--------------VCOM-------------------------------------
	ILI9341_SendCommand(spi, ILI9341_VCOM1); // vcom control
 8002152:	21c5      	movs	r1, #197	; 0xc5
 8002154:	68f8      	ldr	r0, [r7, #12]
 8002156:	f7ff fb1a 	bl	800178e <ILI9341_SendCommand>
	ILI9341_SendData(spi, 0x35); // Set the VCOMH voltage (0x35 = 4.025v)
 800215a:	2135      	movs	r1, #53	; 0x35
 800215c:	68f8      	ldr	r0, [r7, #12]
 800215e:	f7ff fb42 	bl	80017e6 <ILI9341_SendData>
	ILI9341_SendData(spi, 0x3e); // Set the VCOML voltage (0x3E = -0.950v)
 8002162:	213e      	movs	r1, #62	; 0x3e
 8002164:	68f8      	ldr	r0, [r7, #12]
 8002166:	f7ff fb3e 	bl	80017e6 <ILI9341_SendData>
	ILI9341_SendCommand(spi, ILI9341_VCOM2); // vcom control
 800216a:	21c7      	movs	r1, #199	; 0xc7
 800216c:	68f8      	ldr	r0, [r7, #12]
 800216e:	f7ff fb0e 	bl	800178e <ILI9341_SendCommand>
	ILI9341_SendData(spi, 0xbe);
 8002172:	21be      	movs	r1, #190	; 0xbe
 8002174:	68f8      	ldr	r0, [r7, #12]
 8002176:	f7ff fb36 	bl	80017e6 <ILI9341_SendData>

	//------------memory access control------------------------
	ILI9341_SendCommand(spi, ILI9341_MAC); // memory access control
 800217a:	2136      	movs	r1, #54	; 0x36
 800217c:	68f8      	ldr	r0, [r7, #12]
 800217e:	f7ff fb06 	bl	800178e <ILI9341_SendCommand>
	ILI9341_SendData(spi, 0x48);
 8002182:	2148      	movs	r1, #72	; 0x48
 8002184:	68f8      	ldr	r0, [r7, #12]
 8002186:	f7ff fb2e 	bl	80017e6 <ILI9341_SendData>

	ILI9341_SendCommand(spi, ILI9341_PIXEL_FORMAT); // pixel format set
 800218a:	213a      	movs	r1, #58	; 0x3a
 800218c:	68f8      	ldr	r0, [r7, #12]
 800218e:	f7ff fafe 	bl	800178e <ILI9341_SendCommand>
	ILI9341_SendData(spi, 0x55); // 16bit /pixel
 8002192:	2155      	movs	r1, #85	; 0x55
 8002194:	68f8      	ldr	r0, [r7, #12]
 8002196:	f7ff fb26 	bl	80017e6 <ILI9341_SendData>

	ILI9341_SendCommand(spi, ILI9341_FRC);
 800219a:	21b1      	movs	r1, #177	; 0xb1
 800219c:	68f8      	ldr	r0, [r7, #12]
 800219e:	f7ff faf6 	bl	800178e <ILI9341_SendCommand>
	ILI9341_SendData(spi, 0);
 80021a2:	2100      	movs	r1, #0
 80021a4:	68f8      	ldr	r0, [r7, #12]
 80021a6:	f7ff fb1e 	bl	80017e6 <ILI9341_SendData>
	ILI9341_SendData(spi, 0x1F);
 80021aa:	211f      	movs	r1, #31
 80021ac:	68f8      	ldr	r0, [r7, #12]
 80021ae:	f7ff fb1a 	bl	80017e6 <ILI9341_SendData>
	//-------------ddram ----------------------------
	ILI9341_SendCommand(spi, ILI9341_COLUMN_ADDR); // column set
 80021b2:	212a      	movs	r1, #42	; 0x2a
 80021b4:	68f8      	ldr	r0, [r7, #12]
 80021b6:	f7ff faea 	bl	800178e <ILI9341_SendCommand>
	ILI9341_SendData(spi, 0x00); // x0_HIGH---0
 80021ba:	2100      	movs	r1, #0
 80021bc:	68f8      	ldr	r0, [r7, #12]
 80021be:	f7ff fb12 	bl	80017e6 <ILI9341_SendData>
	ILI9341_SendData(spi, 0x00); // x0_LOW----0
 80021c2:	2100      	movs	r1, #0
 80021c4:	68f8      	ldr	r0, [r7, #12]
 80021c6:	f7ff fb0e 	bl	80017e6 <ILI9341_SendData>
	ILI9341_SendData(spi, 0x00); // x1_HIGH---240
 80021ca:	2100      	movs	r1, #0
 80021cc:	68f8      	ldr	r0, [r7, #12]
 80021ce:	f7ff fb0a 	bl	80017e6 <ILI9341_SendData>
	ILI9341_SendData(spi, 0xEF); // x1_LOW----240
 80021d2:	21ef      	movs	r1, #239	; 0xef
 80021d4:	68f8      	ldr	r0, [r7, #12]
 80021d6:	f7ff fb06 	bl	80017e6 <ILI9341_SendData>
	ILI9341_SendCommand(spi, ILI9341_PAGE_ADDR); // page address set
 80021da:	212b      	movs	r1, #43	; 0x2b
 80021dc:	68f8      	ldr	r0, [r7, #12]
 80021de:	f7ff fad6 	bl	800178e <ILI9341_SendCommand>
	ILI9341_SendData(spi, 0x00); // y0_HIGH---0
 80021e2:	2100      	movs	r1, #0
 80021e4:	68f8      	ldr	r0, [r7, #12]
 80021e6:	f7ff fafe 	bl	80017e6 <ILI9341_SendData>
	ILI9341_SendData(spi, 0x00); // y0_LOW----0
 80021ea:	2100      	movs	r1, #0
 80021ec:	68f8      	ldr	r0, [r7, #12]
 80021ee:	f7ff fafa 	bl	80017e6 <ILI9341_SendData>
	ILI9341_SendData(spi, 0x01); // y1_HIGH---320
 80021f2:	2101      	movs	r1, #1
 80021f4:	68f8      	ldr	r0, [r7, #12]
 80021f6:	f7ff faf6 	bl	80017e6 <ILI9341_SendData>
	ILI9341_SendData(spi, 0x3F); // y1_LOW----320
 80021fa:	213f      	movs	r1, #63	; 0x3f
 80021fc:	68f8      	ldr	r0, [r7, #12]
 80021fe:	f7ff faf2 	bl	80017e6 <ILI9341_SendData>

	ILI9341_SendCommand(spi, ILI9341_TEARING_OFF); // tearing effect off
 8002202:	2134      	movs	r1, #52	; 0x34
 8002204:	68f8      	ldr	r0, [r7, #12]
 8002206:	f7ff fac2 	bl	800178e <ILI9341_SendCommand>
	//LCD_write_cmd(ILI9341_TEARING_ON); // tearing effect on
	//LCD_write_cmd(ILI9341_DISPLAY_INVERSION); // display inversion
	ILI9341_SendCommand(spi, ILI9341_Entry_Mode_Set); // entry mode set
 800220a:	21b7      	movs	r1, #183	; 0xb7
 800220c:	68f8      	ldr	r0, [r7, #12]
 800220e:	f7ff fabe 	bl	800178e <ILI9341_SendCommand>
	// Deep Standby Mode: OFF
	// Set the output level of gate driver G1-G320: Normal display
	// Low voltage detection: Disable
	ILI9341_SendData(spi, 0x07);
 8002212:	2107      	movs	r1, #7
 8002214:	68f8      	ldr	r0, [r7, #12]
 8002216:	f7ff fae6 	bl	80017e6 <ILI9341_SendData>
	//-----------------display------------------------
	ILI9341_SendCommand(spi, ILI9341_DFC); // display function control
 800221a:	21b6      	movs	r1, #182	; 0xb6
 800221c:	68f8      	ldr	r0, [r7, #12]
 800221e:	f7ff fab6 	bl	800178e <ILI9341_SendCommand>
	//Set the scan mode in non-display area
	//Determine source/VCOM output in a non-display area in the partial display mode
	ILI9341_SendData(spi, 0x0a);
 8002222:	210a      	movs	r1, #10
 8002224:	68f8      	ldr	r0, [r7, #12]
 8002226:	f7ff fade 	bl	80017e6 <ILI9341_SendData>
	//Select whether the liquid crystal type is normally white type or normally black type
	//Sets the direction of scan by the gate driver in the range determined by SCN and NL
	//Select the shift direction of outputs from the source driver
	//Sets the gate driver pin arrangement in combination with the GS bit to select the optimal scan mode for the module
	//Specify the scan cycle interval of gate driver in non-display area when PTG to select interval scan
	ILI9341_SendData(spi, 0x82);
 800222a:	2182      	movs	r1, #130	; 0x82
 800222c:	68f8      	ldr	r0, [r7, #12]
 800222e:	f7ff fada 	bl	80017e6 <ILI9341_SendData>
	// Sets the number of lines to drive the LCD at an interval of 8 lines
	ILI9341_SendData(spi, 0x27);
 8002232:	2127      	movs	r1, #39	; 0x27
 8002234:	68f8      	ldr	r0, [r7, #12]
 8002236:	f7ff fad6 	bl	80017e6 <ILI9341_SendData>
	ILI9341_SendData(spi, 0x00); // clock divisor
 800223a:	2100      	movs	r1, #0
 800223c:	68f8      	ldr	r0, [r7, #12]
 800223e:	f7ff fad2 	bl	80017e6 <ILI9341_SendData>

	ILI9341_SendCommand(spi, ILI9341_SLEEP_OUT); // sleep out
 8002242:	2111      	movs	r1, #17
 8002244:	68f8      	ldr	r0, [r7, #12]
 8002246:	f7ff faa2 	bl	800178e <ILI9341_SendCommand>
	HAL_Delay(100);
 800224a:	2064      	movs	r0, #100	; 0x64
 800224c:	f006 fd00 	bl	8008c50 <HAL_Delay>
	ILI9341_SendCommand(spi, ILI9341_DISPLAY_ON); // display on
 8002250:	2129      	movs	r1, #41	; 0x29
 8002252:	68f8      	ldr	r0, [r7, #12]
 8002254:	f7ff fa9b 	bl	800178e <ILI9341_SendCommand>
	HAL_Delay(100);
 8002258:	2064      	movs	r0, #100	; 0x64
 800225a:	f006 fcf9 	bl	8008c50 <HAL_Delay>
	ILI9341_SendCommand(spi, ILI9341_GRAM); // memory write
 800225e:	212c      	movs	r1, #44	; 0x2c
 8002260:	68f8      	ldr	r0, [r7, #12]
 8002262:	f7ff fa94 	bl	800178e <ILI9341_SendCommand>
	HAL_Delay(5);
 8002266:	2005      	movs	r0, #5
 8002268:	f006 fcf2 	bl	8008c50 <HAL_Delay>
	//Touch Screen SPI
	// Declare structures - uninitialized
	TS_TOUCH_RAW_Def myRawTouchDef;
	TS_TOUCH_RAW_Def localRawTouch;
	TS_CALIBRATE_Def myTS_Calibrate;
	spi->myTS_Calibrate = myTS_Calibrate;
 800226c:	68fb      	ldr	r3, [r7, #12]
 800226e:	f103 043c 	add.w	r4, r3, #60	; 0x3c
 8002272:	f107 0514 	add.w	r5, r7, #20
 8002276:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8002278:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800227a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800227e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
	spi->localRawTouch = localRawTouch;
 8002282:	68fb      	ldr	r3, [r7, #12]
 8002284:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8002286:	62da      	str	r2, [r3, #44]	; 0x2c
	spi->myRawTouchDef = myRawTouchDef;
 8002288:	68fb      	ldr	r3, [r7, #12]
 800228a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800228c:	631a      	str	r2, [r3, #48]	; 0x30

	//Chip-Select Port and Pin
	spi->CS_PORT_TOUCH = CS_PORT_TOUCH;
 800228e:	68fb      	ldr	r3, [r7, #12]
 8002290:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8002292:	621a      	str	r2, [r3, #32]
	spi->CS_PIN_TOUCH = CS_PIN_TOUCH;
 8002294:	68fb      	ldr	r3, [r7, #12]
 8002296:	f8b7 205c 	ldrh.w	r2, [r7, #92]	; 0x5c
 800229a:	849a      	strh	r2, [r3, #36]	; 0x24
	// Initial parameters
	spi->CMD_Default = 0x84;
 800229c:	68fb      	ldr	r3, [r7, #12]
 800229e:	2284      	movs	r2, #132	; 0x84
 80022a0:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26

}
 80022a4:	bf00      	nop
 80022a6:	3738      	adds	r7, #56	; 0x38
 80022a8:	46bd      	mov	sp, r7
 80022aa:	bdb0      	pop	{r4, r5, r7, pc}

080022ac <TSC2046_SendCommand>:

#include "LCD_ILI9341.h"

//Functions definitions
// Send TSC2046 Command and wait for a response
static uint16_t TSC2046_SendCommand(ILI9341_SPI *spi, uint8_t cmd) {
 80022ac:	b580      	push	{r7, lr}
 80022ae:	b084      	sub	sp, #16
 80022b0:	af00      	add	r7, sp, #0
 80022b2:	6078      	str	r0, [r7, #4]
 80022b4:	460b      	mov	r3, r1
 80022b6:	70fb      	strb	r3, [r7, #3]
	uint8_t spiBuf[3] = { 0, 0, 0 };
 80022b8:	2300      	movs	r3, #0
 80022ba:	723b      	strb	r3, [r7, #8]
 80022bc:	2300      	movs	r3, #0
 80022be:	727b      	strb	r3, [r7, #9]
 80022c0:	2300      	movs	r3, #0
 80022c2:	72bb      	strb	r3, [r7, #10]
	uint16_t return16 = 0;
 80022c4:	2300      	movs	r3, #0
 80022c6:	81fb      	strh	r3, [r7, #14]

	HAL_GPIO_WritePin(spi->CS_PORT_TOUCH, spi->CS_PIN_TOUCH, GPIO_PIN_RESET);
 80022c8:	687b      	ldr	r3, [r7, #4]
 80022ca:	6a18      	ldr	r0, [r3, #32]
 80022cc:	687b      	ldr	r3, [r7, #4]
 80022ce:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80022d0:	2200      	movs	r2, #0
 80022d2:	4619      	mov	r1, r3
 80022d4:	f008 f8aa 	bl	800a42c <HAL_GPIO_WritePin>
	spiBuf[0] = cmd;
 80022d8:	78fb      	ldrb	r3, [r7, #3]
 80022da:	723b      	strb	r3, [r7, #8]
	HAL_SPI_Transmit(spi->lcdHandle, spiBuf, 1, 10);
 80022dc:	687b      	ldr	r3, [r7, #4]
 80022de:	6858      	ldr	r0, [r3, #4]
 80022e0:	f107 0108 	add.w	r1, r7, #8
 80022e4:	230a      	movs	r3, #10
 80022e6:	2201      	movs	r2, #1
 80022e8:	f008 fdb2 	bl	800ae50 <HAL_SPI_Transmit>
	//Wait for response (3 ms)
	//HAL_Delay(3);
	if (HAL_SPI_Receive(spi->lcdHandle, &spiBuf[1], 2, 10) == HAL_OK){
 80022ec:	687b      	ldr	r3, [r7, #4]
 80022ee:	6858      	ldr	r0, [r3, #4]
 80022f0:	f107 0308 	add.w	r3, r7, #8
 80022f4:	1c59      	adds	r1, r3, #1
 80022f6:	230a      	movs	r3, #10
 80022f8:	2202      	movs	r2, #2
 80022fa:	f008 fedd 	bl	800b0b8 <HAL_SPI_Receive>
 80022fe:	4603      	mov	r3, r0
 8002300:	2b00      	cmp	r3, #0
 8002302:	d10a      	bne.n	800231a <TSC2046_SendCommand+0x6e>
		return16 = (spiBuf[1] << 4) + (spiBuf[2] >> 4);
 8002304:	7a7b      	ldrb	r3, [r7, #9]
 8002306:	b29b      	uxth	r3, r3
 8002308:	011b      	lsls	r3, r3, #4
 800230a:	b29a      	uxth	r2, r3
 800230c:	7abb      	ldrb	r3, [r7, #10]
 800230e:	091b      	lsrs	r3, r3, #4
 8002310:	b2db      	uxtb	r3, r3
 8002312:	b29b      	uxth	r3, r3
 8002314:	4413      	add	r3, r2
 8002316:	81fb      	strh	r3, [r7, #14]
 8002318:	e001      	b.n	800231e <TSC2046_SendCommand+0x72>
	}else{
		return16 = 0;
 800231a:	2300      	movs	r3, #0
 800231c:	81fb      	strh	r3, [r7, #14]
	}
	HAL_GPIO_WritePin(spi->CS_PORT_TOUCH, spi->CS_PIN_TOUCH, GPIO_PIN_SET);
 800231e:	687b      	ldr	r3, [r7, #4]
 8002320:	6a18      	ldr	r0, [r3, #32]
 8002322:	687b      	ldr	r3, [r7, #4]
 8002324:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8002326:	2201      	movs	r2, #1
 8002328:	4619      	mov	r1, r3
 800232a:	f008 f87f 	bl	800a42c <HAL_GPIO_WritePin>

	return return16;
 800232e:	89fb      	ldrh	r3, [r7, #14]
}
 8002330:	4618      	mov	r0, r3
 8002332:	3710      	adds	r7, #16
 8002334:	46bd      	mov	sp, r7
 8002336:	bd80      	pop	{r7, pc}

08002338 <TSC2046_getRaw_X>:

// Get raw touch data
//i. get x-axis raw touch 12-bit value
static uint16_t TSC2046_getRaw_X(ILI9341_SPI *spi) {
 8002338:	b580      	push	{r7, lr}
 800233a:	b082      	sub	sp, #8
 800233c:	af00      	add	r7, sp, #0
 800233e:	6078      	str	r0, [r7, #4]
	return TSC2046_SendCommand(spi, CMD_X_AXIS | spi->CMD_Default);
 8002340:	687b      	ldr	r3, [r7, #4]
 8002342:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002346:	f043 0350 	orr.w	r3, r3, #80	; 0x50
 800234a:	b2db      	uxtb	r3, r3
 800234c:	4619      	mov	r1, r3
 800234e:	6878      	ldr	r0, [r7, #4]
 8002350:	f7ff ffac 	bl	80022ac <TSC2046_SendCommand>
 8002354:	4603      	mov	r3, r0
}
 8002356:	4618      	mov	r0, r3
 8002358:	3708      	adds	r7, #8
 800235a:	46bd      	mov	sp, r7
 800235c:	bd80      	pop	{r7, pc}

0800235e <TSC2046_getRaw_Y>:
//ii. get y-axis raw touch 12-bit value
static uint16_t TSC2046_getRaw_Y(ILI9341_SPI *spi) {
 800235e:	b580      	push	{r7, lr}
 8002360:	b082      	sub	sp, #8
 8002362:	af00      	add	r7, sp, #0
 8002364:	6078      	str	r0, [r7, #4]
	return TSC2046_SendCommand(spi, CMD_Y_AXIS | spi->CMD_Default);
 8002366:	687b      	ldr	r3, [r7, #4]
 8002368:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 800236c:	f043 0310 	orr.w	r3, r3, #16
 8002370:	b2db      	uxtb	r3, r3
 8002372:	4619      	mov	r1, r3
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f7ff ff99 	bl	80022ac <TSC2046_SendCommand>
 800237a:	4603      	mov	r3, r0
}
 800237c:	4618      	mov	r0, r3
 800237e:	3708      	adds	r7, #8
 8002380:	46bd      	mov	sp, r7
 8002382:	bd80      	pop	{r7, pc}

08002384 <TSC2046_getRaw_Z>:
//iii. get z-axis raw touch 12-bit value
static uint16_t TSC2046_getRaw_Z(ILI9341_SPI *spi) {
 8002384:	b580      	push	{r7, lr}
 8002386:	b082      	sub	sp, #8
 8002388:	af00      	add	r7, sp, #0
 800238a:	6078      	str	r0, [r7, #4]
	return TSC2046_SendCommand(spi, CMD_Z_AXIS | spi->CMD_Default);
 800238c:	687b      	ldr	r3, [r7, #4]
 800238e:	f893 3026 	ldrb.w	r3, [r3, #38]	; 0x26
 8002392:	f043 0330 	orr.w	r3, r3, #48	; 0x30
 8002396:	b2db      	uxtb	r3, r3
 8002398:	4619      	mov	r1, r3
 800239a:	6878      	ldr	r0, [r7, #4]
 800239c:	f7ff ff86 	bl	80022ac <TSC2046_SendCommand>
 80023a0:	4603      	mov	r3, r0
}
 80023a2:	4618      	mov	r0, r3
 80023a4:	3708      	adds	r7, #8
 80023a6:	46bd      	mov	sp, r7
 80023a8:	bd80      	pop	{r7, pc}
	...

080023ac <TSC2046_TL_point>:

// Print calibration points
//i. Top-Left corner point
static void TSC2046_TL_point(ILI9341_SPI *spi) {
 80023ac:	b580      	push	{r7, lr}
 80023ae:	b086      	sub	sp, #24
 80023b0:	af04      	add	r7, sp, #16
 80023b2:	6078      	str	r0, [r7, #4]
	ILI9341_fillCircle(spi, 1, 1, 3, COLOR_RED);
 80023b4:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023b8:	9300      	str	r3, [sp, #0]
 80023ba:	2303      	movs	r3, #3
 80023bc:	2201      	movs	r2, #1
 80023be:	2101      	movs	r1, #1
 80023c0:	6878      	ldr	r0, [r7, #4]
 80023c2:	f7ff fb3d 	bl	8001a40 <ILI9341_fillCircle>
	ILI9341_printText(spi, "Press here", 20, 30, COLOR_RED, COLOR_RED, 1);
 80023c6:	2301      	movs	r3, #1
 80023c8:	9302      	str	r3, [sp, #8]
 80023ca:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023ce:	9301      	str	r3, [sp, #4]
 80023d0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80023d4:	9300      	str	r3, [sp, #0]
 80023d6:	231e      	movs	r3, #30
 80023d8:	2214      	movs	r2, #20
 80023da:	4904      	ldr	r1, [pc, #16]	; (80023ec <TSC2046_TL_point+0x40>)
 80023dc:	6878      	ldr	r0, [r7, #4]
 80023de:	f7ff fd8d 	bl	8001efc <ILI9341_printText>
}
 80023e2:	bf00      	nop
 80023e4:	3708      	adds	r7, #8
 80023e6:	46bd      	mov	sp, r7
 80023e8:	bd80      	pop	{r7, pc}
 80023ea:	bf00      	nop
 80023ec:	08011538 	.word	0x08011538

080023f0 <TSC2046_BR_point>:
//ii. Bottom-Right corner point
static void TSC2046_BR_point(ILI9341_SPI *spi) {
 80023f0:	b580      	push	{r7, lr}
 80023f2:	b086      	sub	sp, #24
 80023f4:	af04      	add	r7, sp, #16
 80023f6:	6078      	str	r0, [r7, #4]
	ILI9341_fillCircle(spi, spi->myTS_Calibrate.Width - 1, spi->myTS_Calibrate.Height - 1, 3, COLOR_RED);
 80023f8:	687b      	ldr	r3, [r7, #4]
 80023fa:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 80023fe:	3b01      	subs	r3, #1
 8002400:	b29b      	uxth	r3, r3
 8002402:	b219      	sxth	r1, r3
 8002404:	687b      	ldr	r3, [r7, #4]
 8002406:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 800240a:	3b01      	subs	r3, #1
 800240c:	b29b      	uxth	r3, r3
 800240e:	b21a      	sxth	r2, r3
 8002410:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002414:	9300      	str	r3, [sp, #0]
 8002416:	2303      	movs	r3, #3
 8002418:	6878      	ldr	r0, [r7, #4]
 800241a:	f7ff fb11 	bl	8001a40 <ILI9341_fillCircle>
	ILI9341_printText(spi, "Press here", spi->myTS_Calibrate.Width - 80, spi->myTS_Calibrate.Height - 40, COLOR_RED, COLOR_RED, 1);
 800241e:	687b      	ldr	r3, [r7, #4]
 8002420:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002424:	3b50      	subs	r3, #80	; 0x50
 8002426:	b29b      	uxth	r3, r3
 8002428:	b21a      	sxth	r2, r3
 800242a:	687b      	ldr	r3, [r7, #4]
 800242c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002430:	3b28      	subs	r3, #40	; 0x28
 8002432:	b29b      	uxth	r3, r3
 8002434:	b219      	sxth	r1, r3
 8002436:	2301      	movs	r3, #1
 8002438:	9302      	str	r3, [sp, #8]
 800243a:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 800243e:	9301      	str	r3, [sp, #4]
 8002440:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002444:	9300      	str	r3, [sp, #0]
 8002446:	460b      	mov	r3, r1
 8002448:	4903      	ldr	r1, [pc, #12]	; (8002458 <TSC2046_BR_point+0x68>)
 800244a:	6878      	ldr	r0, [r7, #4]
 800244c:	f7ff fd56 	bl	8001efc <ILI9341_printText>
}
 8002450:	bf00      	nop
 8002452:	3708      	adds	r7, #8
 8002454:	46bd      	mov	sp, r7
 8002456:	bd80      	pop	{r7, pc}
 8002458:	08011538 	.word	0x08011538

0800245c <TSC2046_GetRawTouch>:
static uint8_t TSC2046_getOrientation(ILI9341_SPI *spi) {
	return ILI9341_getRotation(spi);
}

// Poll for touch status
static void TSC2046_GetRawTouch(ILI9341_SPI *spi) {
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
 8002462:	6078      	str	r0, [r7, #4]

	//Assign raw touch based on orientation
	switch (spi->ScreenOrientation) {
 8002464:	687b      	ldr	r3, [r7, #4]
 8002466:	f893 3027 	ldrb.w	r3, [r3, #39]	; 0x27
 800246a:	3b01      	subs	r3, #1
 800246c:	2b03      	cmp	r3, #3
 800246e:	d877      	bhi.n	8002560 <TSC2046_GetRawTouch+0x104>
 8002470:	a201      	add	r2, pc, #4	; (adr r2, 8002478 <TSC2046_GetRawTouch+0x1c>)
 8002472:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002476:	bf00      	nop
 8002478:	08002489 	.word	0x08002489
 800247c:	080024bf 	.word	0x080024bf
 8002480:	080024fb 	.word	0x080024fb
 8002484:	08002531 	.word	0x08002531
	case 1:
		spi->localRawTouch.x_touch = 4095 - TSC2046_getRaw_X(spi);
 8002488:	6878      	ldr	r0, [r7, #4]
 800248a:	f7ff ff55 	bl	8002338 <TSC2046_getRaw_X>
 800248e:	4603      	mov	r3, r0
 8002490:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8002494:	330f      	adds	r3, #15
 8002496:	b29a      	uxth	r2, r3
 8002498:	687b      	ldr	r3, [r7, #4]
 800249a:	859a      	strh	r2, [r3, #44]	; 0x2c
		spi->localRawTouch.y_touch = TSC2046_getRaw_Y(spi);
 800249c:	6878      	ldr	r0, [r7, #4]
 800249e:	f7ff ff5e 	bl	800235e <TSC2046_getRaw_Y>
 80024a2:	4603      	mov	r3, r0
 80024a4:	461a      	mov	r2, r3
 80024a6:	687b      	ldr	r3, [r7, #4]
 80024a8:	85da      	strh	r2, [r3, #46]	; 0x2e
		spi->myTS_Calibrate.Width = 230;
 80024aa:	687b      	ldr	r3, [r7, #4]
 80024ac:	22e6      	movs	r2, #230	; 0xe6
 80024ae:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		spi->myTS_Calibrate.Height = 320;
 80024b2:	687b      	ldr	r3, [r7, #4]
 80024b4:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80024b8:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		break;
 80024bc:	e050      	b.n	8002560 <TSC2046_GetRawTouch+0x104>

	case 2:
		spi->localRawTouch.x_touch = 4095 - TSC2046_getRaw_Y(spi);
 80024be:	6878      	ldr	r0, [r7, #4]
 80024c0:	f7ff ff4d 	bl	800235e <TSC2046_getRaw_Y>
 80024c4:	4603      	mov	r3, r0
 80024c6:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80024ca:	330f      	adds	r3, #15
 80024cc:	b29a      	uxth	r2, r3
 80024ce:	687b      	ldr	r3, [r7, #4]
 80024d0:	859a      	strh	r2, [r3, #44]	; 0x2c
		spi->localRawTouch.y_touch = 4095 - TSC2046_getRaw_X(spi);
 80024d2:	6878      	ldr	r0, [r7, #4]
 80024d4:	f7ff ff30 	bl	8002338 <TSC2046_getRaw_X>
 80024d8:	4603      	mov	r3, r0
 80024da:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 80024de:	330f      	adds	r3, #15
 80024e0:	b29a      	uxth	r2, r3
 80024e2:	687b      	ldr	r3, [r7, #4]
 80024e4:	85da      	strh	r2, [r3, #46]	; 0x2e
		spi->myTS_Calibrate.Width = 320;
 80024e6:	687b      	ldr	r3, [r7, #4]
 80024e8:	f44f 72a0 	mov.w	r2, #320	; 0x140
 80024ec:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		spi->myTS_Calibrate.Height = 240;
 80024f0:	687b      	ldr	r3, [r7, #4]
 80024f2:	22f0      	movs	r2, #240	; 0xf0
 80024f4:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		break;
 80024f8:	e032      	b.n	8002560 <TSC2046_GetRawTouch+0x104>

	case 3:
		spi->localRawTouch.x_touch = TSC2046_getRaw_X(spi);
 80024fa:	6878      	ldr	r0, [r7, #4]
 80024fc:	f7ff ff1c 	bl	8002338 <TSC2046_getRaw_X>
 8002500:	4603      	mov	r3, r0
 8002502:	461a      	mov	r2, r3
 8002504:	687b      	ldr	r3, [r7, #4]
 8002506:	859a      	strh	r2, [r3, #44]	; 0x2c
		spi->localRawTouch.y_touch = 4095 - TSC2046_getRaw_Y(spi);
 8002508:	6878      	ldr	r0, [r7, #4]
 800250a:	f7ff ff28 	bl	800235e <TSC2046_getRaw_Y>
 800250e:	4603      	mov	r3, r0
 8002510:	f5c3 637f 	rsb	r3, r3, #4080	; 0xff0
 8002514:	330f      	adds	r3, #15
 8002516:	b29a      	uxth	r2, r3
 8002518:	687b      	ldr	r3, [r7, #4]
 800251a:	85da      	strh	r2, [r3, #46]	; 0x2e
		spi->myTS_Calibrate.Width = 230;
 800251c:	687b      	ldr	r3, [r7, #4]
 800251e:	22e6      	movs	r2, #230	; 0xe6
 8002520:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		spi->myTS_Calibrate.Height = 320;
 8002524:	687b      	ldr	r3, [r7, #4]
 8002526:	f44f 72a0 	mov.w	r2, #320	; 0x140
 800252a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		break;
 800252e:	e017      	b.n	8002560 <TSC2046_GetRawTouch+0x104>

	case 4:
		spi->localRawTouch.x_touch = TSC2046_getRaw_Y(spi);
 8002530:	6878      	ldr	r0, [r7, #4]
 8002532:	f7ff ff14 	bl	800235e <TSC2046_getRaw_Y>
 8002536:	4603      	mov	r3, r0
 8002538:	461a      	mov	r2, r3
 800253a:	687b      	ldr	r3, [r7, #4]
 800253c:	859a      	strh	r2, [r3, #44]	; 0x2c
		spi->localRawTouch.y_touch = TSC2046_getRaw_X(spi);
 800253e:	6878      	ldr	r0, [r7, #4]
 8002540:	f7ff fefa 	bl	8002338 <TSC2046_getRaw_X>
 8002544:	4603      	mov	r3, r0
 8002546:	461a      	mov	r2, r3
 8002548:	687b      	ldr	r3, [r7, #4]
 800254a:	85da      	strh	r2, [r3, #46]	; 0x2e
		spi->myTS_Calibrate.Width = 320;
 800254c:	687b      	ldr	r3, [r7, #4]
 800254e:	f44f 72a0 	mov.w	r2, #320	; 0x140
 8002552:	f8a3 2054 	strh.w	r2, [r3, #84]	; 0x54
		spi->myTS_Calibrate.Height = 240;
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	22f0      	movs	r2, #240	; 0xf0
 800255a:	f8a3 2056 	strh.w	r2, [r3, #86]	; 0x56
		break;
 800255e:	bf00      	nop
	}
	// These are for the calibration
	spi->myRawTouchDef.x_touch = spi->localRawTouch.x_touch;
 8002560:	687b      	ldr	r3, [r7, #4]
 8002562:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8002564:	687b      	ldr	r3, [r7, #4]
 8002566:	861a      	strh	r2, [r3, #48]	; 0x30
	spi->myRawTouchDef.y_touch = spi->localRawTouch.y_touch;
 8002568:	687b      	ldr	r3, [r7, #4]
 800256a:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 800256c:	687b      	ldr	r3, [r7, #4]
 800256e:	865a      	strh	r2, [r3, #50]	; 0x32
}
 8002570:	bf00      	nop
 8002572:	3708      	adds	r7, #8
 8002574:	46bd      	mov	sp, r7
 8002576:	bd80      	pop	{r7, pc}

08002578 <TSC2046_Calibrate>:

// Calibrate resistive touch panel
void TSC2046_Calibrate(ILI9341_SPI *spi) {
 8002578:	b590      	push	{r4, r7, lr}
 800257a:	b085      	sub	sp, #20
 800257c:	af00      	add	r7, sp, #0
 800257e:	6078      	str	r0, [r7, #4]
	// Set rotation
	ILI9341_setRotation(spi, 2);
 8002580:	2102      	movs	r1, #2
 8002582:	6878      	ldr	r0, [r7, #4]
 8002584:	f7ff fd34 	bl	8001ff0 <ILI9341_setRotation>

	uint16_t watchVar1 = 0;
 8002588:	2300      	movs	r3, #0
 800258a:	81bb      	strh	r3, [r7, #12]
	//Get Top-Left corner calibration coordinate
	TSC2046_TL_point(spi);
 800258c:	6878      	ldr	r0, [r7, #4]
 800258e:	f7ff ff0d 	bl	80023ac <TSC2046_TL_point>
	spi->myTS_Calibrate.TL_X = 0;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	2200      	movs	r2, #0
 8002596:	879a      	strh	r2, [r3, #60]	; 0x3c
	spi->myTS_Calibrate.TL_Y = 0;
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	2200      	movs	r2, #0
 800259c:	87da      	strh	r2, [r3, #62]	; 0x3e
	spi->myTS_Calibrate.BR_X = 0;
 800259e:	687b      	ldr	r3, [r7, #4]
 80025a0:	2200      	movs	r2, #0
 80025a2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	spi->myTS_Calibrate.BR_Y = 0;
 80025a6:	687b      	ldr	r3, [r7, #4]
 80025a8:	2200      	movs	r2, #0
 80025aa:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
	spi->myRawTouchDef.y_touch = 0;
 80025ae:	687b      	ldr	r3, [r7, #4]
 80025b0:	2200      	movs	r2, #0
 80025b2:	865a      	strh	r2, [r3, #50]	; 0x32
	spi->myRawTouchDef.x_touch = 0;
 80025b4:	687b      	ldr	r3, [r7, #4]
 80025b6:	2200      	movs	r2, #0
 80025b8:	861a      	strh	r2, [r3, #48]	; 0x30

	while (1) {
		watchVar1 = TSC2046_getRaw_Z(spi);
 80025ba:	6878      	ldr	r0, [r7, #4]
 80025bc:	f7ff fee2 	bl	8002384 <TSC2046_getRaw_Z>
 80025c0:	4603      	mov	r3, r0
 80025c2:	81bb      	strh	r3, [r7, #12]
		if (watchVar1 > 50) {
 80025c4:	89bb      	ldrh	r3, [r7, #12]
 80025c6:	2b32      	cmp	r3, #50	; 0x32
 80025c8:	d91c      	bls.n	8002604 <TSC2046_Calibrate+0x8c>
			for (uint8_t i = 0; i < 10; i++) {
 80025ca:	2300      	movs	r3, #0
 80025cc:	73fb      	strb	r3, [r7, #15]
 80025ce:	e015      	b.n	80025fc <TSC2046_Calibrate+0x84>

				TSC2046_GetRawTouch(spi);
 80025d0:	6878      	ldr	r0, [r7, #4]
 80025d2:	f7ff ff43 	bl	800245c <TSC2046_GetRawTouch>
				spi->myTS_Calibrate.TL_X += spi->myRawTouchDef.x_touch;
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	8f9a      	ldrh	r2, [r3, #60]	; 0x3c
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 80025de:	4413      	add	r3, r2
 80025e0:	b29a      	uxth	r2, r3
 80025e2:	687b      	ldr	r3, [r7, #4]
 80025e4:	879a      	strh	r2, [r3, #60]	; 0x3c
				spi->myTS_Calibrate.TL_Y += spi->myRawTouchDef.y_touch;
 80025e6:	687b      	ldr	r3, [r7, #4]
 80025e8:	8fda      	ldrh	r2, [r3, #62]	; 0x3e
 80025ea:	687b      	ldr	r3, [r7, #4]
 80025ec:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80025ee:	4413      	add	r3, r2
 80025f0:	b29a      	uxth	r2, r3
 80025f2:	687b      	ldr	r3, [r7, #4]
 80025f4:	87da      	strh	r2, [r3, #62]	; 0x3e
			for (uint8_t i = 0; i < 10; i++) {
 80025f6:	7bfb      	ldrb	r3, [r7, #15]
 80025f8:	3301      	adds	r3, #1
 80025fa:	73fb      	strb	r3, [r7, #15]
 80025fc:	7bfb      	ldrb	r3, [r7, #15]
 80025fe:	2b09      	cmp	r3, #9
 8002600:	d9e6      	bls.n	80025d0 <TSC2046_Calibrate+0x58>
			}

			break;
 8002602:	e003      	b.n	800260c <TSC2046_Calibrate+0x94>
		}
		HAL_Delay(10);
 8002604:	200a      	movs	r0, #10
 8002606:	f006 fb23 	bl	8008c50 <HAL_Delay>
		watchVar1 = TSC2046_getRaw_Z(spi);
 800260a:	e7d6      	b.n	80025ba <TSC2046_Calibrate+0x42>
	}
	HAL_Delay(1000);
 800260c:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8002610:	f006 fb1e 	bl	8008c50 <HAL_Delay>
	//Get Bottom-Right corner calibration coordinate
	TSC2046_BR_point(spi);
 8002614:	6878      	ldr	r0, [r7, #4]
 8002616:	f7ff feeb 	bl	80023f0 <TSC2046_BR_point>
	while (1) {
		watchVar1 = TSC2046_getRaw_Z(spi);
 800261a:	6878      	ldr	r0, [r7, #4]
 800261c:	f7ff feb2 	bl	8002384 <TSC2046_getRaw_Z>
 8002620:	4603      	mov	r3, r0
 8002622:	81bb      	strh	r3, [r7, #12]
		if (watchVar1 > 50) {
 8002624:	89bb      	ldrh	r3, [r7, #12]
 8002626:	2b32      	cmp	r3, #50	; 0x32
 8002628:	d920      	bls.n	800266c <TSC2046_Calibrate+0xf4>
			for (uint8_t i = 0; i < 10; i++) {
 800262a:	2300      	movs	r3, #0
 800262c:	73bb      	strb	r3, [r7, #14]
 800262e:	e019      	b.n	8002664 <TSC2046_Calibrate+0xec>
				TSC2046_GetRawTouch(spi);
 8002630:	6878      	ldr	r0, [r7, #4]
 8002632:	f7ff ff13 	bl	800245c <TSC2046_GetRawTouch>
				spi->myTS_Calibrate.BR_X += spi->myRawTouchDef.x_touch;
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	f8b3 2040 	ldrh.w	r2, [r3, #64]	; 0x40
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	8e1b      	ldrh	r3, [r3, #48]	; 0x30
 8002640:	4413      	add	r3, r2
 8002642:	b29a      	uxth	r2, r3
 8002644:	687b      	ldr	r3, [r7, #4]
 8002646:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
				spi->myTS_Calibrate.BR_Y += spi->myRawTouchDef.y_touch;
 800264a:	687b      	ldr	r3, [r7, #4]
 800264c:	f8b3 2042 	ldrh.w	r2, [r3, #66]	; 0x42
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8002654:	4413      	add	r3, r2
 8002656:	b29a      	uxth	r2, r3
 8002658:	687b      	ldr	r3, [r7, #4]
 800265a:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42
			for (uint8_t i = 0; i < 10; i++) {
 800265e:	7bbb      	ldrb	r3, [r7, #14]
 8002660:	3301      	adds	r3, #1
 8002662:	73bb      	strb	r3, [r7, #14]
 8002664:	7bbb      	ldrb	r3, [r7, #14]
 8002666:	2b09      	cmp	r3, #9
 8002668:	d9e2      	bls.n	8002630 <TSC2046_Calibrate+0xb8>
			}
			break;
 800266a:	e003      	b.n	8002674 <TSC2046_Calibrate+0xfc>
		}
		HAL_Delay(10);
 800266c:	200a      	movs	r0, #10
 800266e:	f006 faef 	bl	8008c50 <HAL_Delay>
		watchVar1 = TSC2046_getRaw_Z(spi);
 8002672:	e7d2      	b.n	800261a <TSC2046_Calibrate+0xa2>
	}

	spi->myTS_Calibrate.TL_X *= 0.1;
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 8002678:	4618      	mov	r0, r3
 800267a:	f7fd ff0b 	bl	8000494 <__aeabi_i2d>
 800267e:	a35b      	add	r3, pc, #364	; (adr r3, 80027ec <TSC2046_Calibrate+0x274>)
 8002680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002684:	f7fd ff70 	bl	8000568 <__aeabi_dmul>
 8002688:	4603      	mov	r3, r0
 800268a:	460c      	mov	r4, r1
 800268c:	4618      	mov	r0, r3
 800268e:	4621      	mov	r1, r4
 8002690:	f7fe fa2c 	bl	8000aec <__aeabi_d2uiz>
 8002694:	4603      	mov	r3, r0
 8002696:	b29a      	uxth	r2, r3
 8002698:	687b      	ldr	r3, [r7, #4]
 800269a:	879a      	strh	r2, [r3, #60]	; 0x3c
	spi->myTS_Calibrate.TL_Y *= 0.1;
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fd fef7 	bl	8000494 <__aeabi_i2d>
 80026a6:	a351      	add	r3, pc, #324	; (adr r3, 80027ec <TSC2046_Calibrate+0x274>)
 80026a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ac:	f7fd ff5c 	bl	8000568 <__aeabi_dmul>
 80026b0:	4603      	mov	r3, r0
 80026b2:	460c      	mov	r4, r1
 80026b4:	4618      	mov	r0, r3
 80026b6:	4621      	mov	r1, r4
 80026b8:	f7fe fa18 	bl	8000aec <__aeabi_d2uiz>
 80026bc:	4603      	mov	r3, r0
 80026be:	b29a      	uxth	r2, r3
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	87da      	strh	r2, [r3, #62]	; 0x3e

	spi->myTS_Calibrate.BR_X *= 0.1;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fd fee2 	bl	8000494 <__aeabi_i2d>
 80026d0:	a346      	add	r3, pc, #280	; (adr r3, 80027ec <TSC2046_Calibrate+0x274>)
 80026d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026d6:	f7fd ff47 	bl	8000568 <__aeabi_dmul>
 80026da:	4603      	mov	r3, r0
 80026dc:	460c      	mov	r4, r1
 80026de:	4618      	mov	r0, r3
 80026e0:	4621      	mov	r1, r4
 80026e2:	f7fe fa03 	bl	8000aec <__aeabi_d2uiz>
 80026e6:	4603      	mov	r3, r0
 80026e8:	b29a      	uxth	r2, r3
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
	spi->myTS_Calibrate.BR_Y *= 0.1;
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fd fecc 	bl	8000494 <__aeabi_i2d>
 80026fc:	a33b      	add	r3, pc, #236	; (adr r3, 80027ec <TSC2046_Calibrate+0x274>)
 80026fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002702:	f7fd ff31 	bl	8000568 <__aeabi_dmul>
 8002706:	4603      	mov	r3, r0
 8002708:	460c      	mov	r4, r1
 800270a:	4618      	mov	r0, r3
 800270c:	4621      	mov	r1, r4
 800270e:	f7fe f9ed 	bl	8000aec <__aeabi_d2uiz>
 8002712:	4603      	mov	r3, r0
 8002714:	b29a      	uxth	r2, r3
 8002716:	687b      	ldr	r3, [r7, #4]
 8002718:	f8a3 2042 	strh.w	r2, [r3, #66]	; 0x42

	//1. Calculate X_Diff, Y_Diff
	spi->myTS_Calibrate.Scale_X = (spi->myTS_Calibrate.Width + 0.0f) / (spi->myTS_Calibrate.BR_X - spi->myTS_Calibrate.TL_X + 0.0f);
 800271c:	687b      	ldr	r3, [r7, #4]
 800271e:	f8b3 3054 	ldrh.w	r3, [r3, #84]	; 0x54
 8002722:	ee07 3a90 	vmov	s15, r3
 8002726:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800272a:	ed9f 7a2f 	vldr	s14, [pc, #188]	; 80027e8 <TSC2046_Calibrate+0x270>
 800272e:	ee77 6a87 	vadd.f32	s13, s15, s14
 8002732:	687b      	ldr	r3, [r7, #4]
 8002734:	f8b3 3040 	ldrh.w	r3, [r3, #64]	; 0x40
 8002738:	461a      	mov	r2, r3
 800273a:	687b      	ldr	r3, [r7, #4]
 800273c:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800273e:	1ad3      	subs	r3, r2, r3
 8002740:	ee07 3a90 	vmov	s15, r3
 8002744:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002748:	ed9f 7a27 	vldr	s14, [pc, #156]	; 80027e8 <TSC2046_Calibrate+0x270>
 800274c:	ee37 7a87 	vadd.f32	s14, s15, s14
 8002750:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002754:	687b      	ldr	r3, [r7, #4]
 8002756:	edc3 7a11 	vstr	s15, [r3, #68]	; 0x44
	spi->myTS_Calibrate.Scale_Y = (spi->myTS_Calibrate.Height + 0.0f) / (spi->myTS_Calibrate.BR_Y - spi->myTS_Calibrate.TL_Y + 0.0f);
 800275a:	687b      	ldr	r3, [r7, #4]
 800275c:	f8b3 3056 	ldrh.w	r3, [r3, #86]	; 0x56
 8002760:	ee07 3a90 	vmov	s15, r3
 8002764:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002768:	ed9f 7a1f 	vldr	s14, [pc, #124]	; 80027e8 <TSC2046_Calibrate+0x270>
 800276c:	ee77 6a87 	vadd.f32	s13, s15, s14
 8002770:	687b      	ldr	r3, [r7, #4]
 8002772:	f8b3 3042 	ldrh.w	r3, [r3, #66]	; 0x42
 8002776:	461a      	mov	r2, r3
 8002778:	687b      	ldr	r3, [r7, #4]
 800277a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800277c:	1ad3      	subs	r3, r2, r3
 800277e:	ee07 3a90 	vmov	s15, r3
 8002782:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002786:	ed9f 7a18 	vldr	s14, [pc, #96]	; 80027e8 <TSC2046_Calibrate+0x270>
 800278a:	ee37 7a87 	vadd.f32	s14, s15, s14
 800278e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	edc3 7a12 	vstr	s15, [r3, #72]	; 0x48
	//2. Calculate Scalling ()
	spi->myTS_Calibrate.Bias_X = -1 - spi->myTS_Calibrate.Scale_X * spi->myTS_Calibrate.TL_X; // -1 is for bias. Change this so you have 100% accuracy at center of the LCD
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 800279e:	687b      	ldr	r3, [r7, #4]
 80027a0:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 80027a2:	ee07 3a90 	vmov	s15, r3
 80027a6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027aa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027ae:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80027b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027b6:	687b      	ldr	r3, [r7, #4]
 80027b8:	edc3 7a13 	vstr	s15, [r3, #76]	; 0x4c
	spi->myTS_Calibrate.Bias_Y = -1 - spi->myTS_Calibrate.Scale_Y * spi->myTS_Calibrate.TL_Y; // -1 is for bias. Change this so you have 100% accuracy at center of the LCD
 80027bc:	687b      	ldr	r3, [r7, #4]
 80027be:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80027c2:	687b      	ldr	r3, [r7, #4]
 80027c4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80027c6:	ee07 3a90 	vmov	s15, r3
 80027ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80027d2:	eebf 7a00 	vmov.f32	s14, #240	; 0xbf800000 -1.0
 80027d6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	edc3 7a14 	vstr	s15, [r3, #80]	; 0x50

}
 80027e0:	bf00      	nop
 80027e2:	3714      	adds	r7, #20
 80027e4:	46bd      	mov	sp, r7
 80027e6:	bd90      	pop	{r4, r7, pc}
 80027e8:	00000000 	.word	0x00000000
 80027ec:	9999999a 	.word	0x9999999a
 80027f0:	3fb99999 	.word	0x3fb99999
 80027f4:	00000000 	.word	0x00000000

080027f8 <TSC2046_GetTouchData>:

// Get touch sccreen data
void TSC2046_GetTouchData(ILI9341_SPI *spi) {
 80027f8:	b590      	push	{r4, r7, lr}
 80027fa:	b085      	sub	sp, #20
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]

	uint16_t temp16x = 0, temp16y = 0;
 8002800:	2300      	movs	r3, #0
 8002802:	81fb      	strh	r3, [r7, #14]
 8002804:	2300      	movs	r3, #0
 8002806:	81bb      	strh	r3, [r7, #12]
	//Is screen pressed
	if (TSC2046_getRaw_Z(spi) > 50) {
 8002808:	6878      	ldr	r0, [r7, #4]
 800280a:	f7ff fdbb 	bl	8002384 <TSC2046_getRaw_Z>
 800280e:	4603      	mov	r3, r0
 8002810:	2b32      	cmp	r3, #50	; 0x32
 8002812:	d940      	bls.n	8002896 <TSC2046_GetTouchData+0x9e>
		spi->myTsData.isPressed = 1; // True
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	2201      	movs	r2, #1
 8002818:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
		//Read touch data
		for (uint8_t i = 0; i < 10; i++) {
 800281c:	2300      	movs	r3, #0
 800281e:	72fb      	strb	r3, [r7, #11]
 8002820:	e00f      	b.n	8002842 <TSC2046_GetTouchData+0x4a>
			TSC2046_GetRawTouch(spi);
 8002822:	6878      	ldr	r0, [r7, #4]
 8002824:	f7ff fe1a 	bl	800245c <TSC2046_GetRawTouch>
			temp16x += spi->localRawTouch.x_touch;
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800282c:	89fb      	ldrh	r3, [r7, #14]
 800282e:	4413      	add	r3, r2
 8002830:	81fb      	strh	r3, [r7, #14]
			temp16y += spi->localRawTouch.y_touch;
 8002832:	687b      	ldr	r3, [r7, #4]
 8002834:	8dda      	ldrh	r2, [r3, #46]	; 0x2e
 8002836:	89bb      	ldrh	r3, [r7, #12]
 8002838:	4413      	add	r3, r2
 800283a:	81bb      	strh	r3, [r7, #12]
		for (uint8_t i = 0; i < 10; i++) {
 800283c:	7afb      	ldrb	r3, [r7, #11]
 800283e:	3301      	adds	r3, #1
 8002840:	72fb      	strb	r3, [r7, #11]
 8002842:	7afb      	ldrb	r3, [r7, #11]
 8002844:	2b09      	cmp	r3, #9
 8002846:	d9ec      	bls.n	8002822 <TSC2046_GetTouchData+0x2a>
		}
		spi->localRawTouch.x_touch = temp16x * 0.1;
 8002848:	89fb      	ldrh	r3, [r7, #14]
 800284a:	4618      	mov	r0, r3
 800284c:	f7fd fe22 	bl	8000494 <__aeabi_i2d>
 8002850:	a32d      	add	r3, pc, #180	; (adr r3, 8002908 <TSC2046_GetTouchData+0x110>)
 8002852:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002856:	f7fd fe87 	bl	8000568 <__aeabi_dmul>
 800285a:	4603      	mov	r3, r0
 800285c:	460c      	mov	r4, r1
 800285e:	4618      	mov	r0, r3
 8002860:	4621      	mov	r1, r4
 8002862:	f7fe f943 	bl	8000aec <__aeabi_d2uiz>
 8002866:	4603      	mov	r3, r0
 8002868:	b29a      	uxth	r2, r3
 800286a:	687b      	ldr	r3, [r7, #4]
 800286c:	859a      	strh	r2, [r3, #44]	; 0x2c
		spi->localRawTouch.y_touch = temp16y * 0.1;
 800286e:	89bb      	ldrh	r3, [r7, #12]
 8002870:	4618      	mov	r0, r3
 8002872:	f7fd fe0f 	bl	8000494 <__aeabi_i2d>
 8002876:	a324      	add	r3, pc, #144	; (adr r3, 8002908 <TSC2046_GetTouchData+0x110>)
 8002878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800287c:	f7fd fe74 	bl	8000568 <__aeabi_dmul>
 8002880:	4603      	mov	r3, r0
 8002882:	460c      	mov	r4, r1
 8002884:	4618      	mov	r0, r3
 8002886:	4621      	mov	r1, r4
 8002888:	f7fe f930 	bl	8000aec <__aeabi_d2uiz>
 800288c:	4603      	mov	r3, r0
 800288e:	b29a      	uxth	r2, r3
 8002890:	687b      	ldr	r3, [r7, #4]
 8002892:	85da      	strh	r2, [r3, #46]	; 0x2e
 8002894:	e003      	b.n	800289e <TSC2046_GetTouchData+0xa6>
	} else
		spi->myTsData.isPressed = 0; // false
 8002896:	687b      	ldr	r3, [r7, #4]
 8002898:	2200      	movs	r2, #0
 800289a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

	//X_Touch value
	spi->myTsData.X = spi->myTS_Calibrate.Scale_X * spi->localRawTouch.x_touch + spi->myTS_Calibrate.Bias_X;
 800289e:	687b      	ldr	r3, [r7, #4]
 80028a0:	ed93 7a11 	vldr	s14, [r3, #68]	; 0x44
 80028a4:	687b      	ldr	r3, [r7, #4]
 80028a6:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80028a8:	ee07 3a90 	vmov	s15, r3
 80028ac:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028b0:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028b4:	687b      	ldr	r3, [r7, #4]
 80028b6:	edd3 7a13 	vldr	s15, [r3, #76]	; 0x4c
 80028ba:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028c2:	ee17 3a90 	vmov	r3, s15
 80028c6:	b29a      	uxth	r2, r3
 80028c8:	687b      	ldr	r3, [r7, #4]
 80028ca:	86da      	strh	r2, [r3, #54]	; 0x36

	//Y_Touch value
	spi->myTsData.Y = spi->myTS_Calibrate.Scale_Y * spi->localRawTouch.y_touch + spi->myTS_Calibrate.Bias_Y;
 80028cc:	687b      	ldr	r3, [r7, #4]
 80028ce:	ed93 7a12 	vldr	s14, [r3, #72]	; 0x48
 80028d2:	687b      	ldr	r3, [r7, #4]
 80028d4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80028d6:	ee07 3a90 	vmov	s15, r3
 80028da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028de:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028e2:	687b      	ldr	r3, [r7, #4]
 80028e4:	edd3 7a14 	vldr	s15, [r3, #80]	; 0x50
 80028e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028ec:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028f0:	ee17 3a90 	vmov	r3, s15
 80028f4:	b29a      	uxth	r2, r3
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	871a      	strh	r2, [r3, #56]	; 0x38
}
 80028fa:	bf00      	nop
 80028fc:	3714      	adds	r7, #20
 80028fe:	46bd      	mov	sp, r7
 8002900:	bd90      	pop	{r4, r7, pc}
 8002902:	bf00      	nop
 8002904:	f3af 8000 	nop.w
 8002908:	9999999a 	.word	0x9999999a
 800290c:	3fb99999 	.word	0x3fb99999

08002910 <show_main_frame_mrac>:
 */

#include "LCDTools.h"

// Create the main frame for mrac
void show_main_frame_mrac(ILI9341_SPI* spi, bool closedloop_on, bool update_main_frame){
 8002910:	b580      	push	{r7, lr}
 8002912:	b086      	sub	sp, #24
 8002914:	af04      	add	r7, sp, #16
 8002916:	6078      	str	r0, [r7, #4]
 8002918:	460b      	mov	r3, r1
 800291a:	70fb      	strb	r3, [r7, #3]
 800291c:	4613      	mov	r3, r2
 800291e:	70bb      	strb	r3, [r7, #2]
	// Set rotation
	ILI9341_setRotation(spi, 2);
 8002920:	2102      	movs	r1, #2
 8002922:	6878      	ldr	r0, [r7, #4]
 8002924:	f7ff fb64 	bl	8001ff0 <ILI9341_setRotation>

	if(update_main_frame == true){
 8002928:	78bb      	ldrb	r3, [r7, #2]
 800292a:	2b00      	cmp	r3, #0
 800292c:	f000 809f 	beq.w	8002a6e <show_main_frame_mrac+0x15e>
		// Set background
		ILI9341_Fill(spi, COLOR_NAVY);
 8002930:	210f      	movs	r1, #15
 8002932:	6878      	ldr	r0, [r7, #4]
 8002934:	f7ff f800 	bl	8001938 <ILI9341_Fill>

		// Print frame - large square
		ILI9341_drawFastHLine(spi, 5, 235, 310, COLOR_GREEN);
 8002938:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800293c:	9300      	str	r3, [sp, #0]
 800293e:	f44f 739b 	mov.w	r3, #310	; 0x136
 8002942:	22eb      	movs	r2, #235	; 0xeb
 8002944:	2105      	movs	r1, #5
 8002946:	6878      	ldr	r0, [r7, #4]
 8002948:	f7ff f949 	bl	8001bde <ILI9341_drawFastHLine>
		ILI9341_drawFastHLine(spi, 5, 5, 310, COLOR_GREEN);
 800294c:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002950:	9300      	str	r3, [sp, #0]
 8002952:	f44f 739b 	mov.w	r3, #310	; 0x136
 8002956:	2205      	movs	r2, #5
 8002958:	2105      	movs	r1, #5
 800295a:	6878      	ldr	r0, [r7, #4]
 800295c:	f7ff f93f 	bl	8001bde <ILI9341_drawFastHLine>
		ILI9341_drawFastVLine(spi, 5, 5, 230, COLOR_GREEN);
 8002960:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002964:	9300      	str	r3, [sp, #0]
 8002966:	23e6      	movs	r3, #230	; 0xe6
 8002968:	2205      	movs	r2, #5
 800296a:	2105      	movs	r1, #5
 800296c:	6878      	ldr	r0, [r7, #4]
 800296e:	f7ff f95b 	bl	8001c28 <ILI9341_drawFastVLine>
		ILI9341_drawFastVLine(spi, 315, 5, 230, COLOR_GREEN);
 8002972:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002976:	9300      	str	r3, [sp, #0]
 8002978:	23e6      	movs	r3, #230	; 0xe6
 800297a:	2205      	movs	r2, #5
 800297c:	f240 113b 	movw	r1, #315	; 0x13b
 8002980:	6878      	ldr	r0, [r7, #4]
 8002982:	f7ff f951 	bl	8001c28 <ILI9341_drawFastVLine>

		// Print buttons - Small squares
		ILI9341_drawFastVLine(spi, 50, 5, 230, COLOR_GREEN);
 8002986:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800298a:	9300      	str	r3, [sp, #0]
 800298c:	23e6      	movs	r3, #230	; 0xe6
 800298e:	2205      	movs	r2, #5
 8002990:	2132      	movs	r1, #50	; 0x32
 8002992:	6878      	ldr	r0, [r7, #4]
 8002994:	f7ff f948 	bl	8001c28 <ILI9341_drawFastVLine>
		ILI9341_drawFastHLine(spi, 5, 49, 45, COLOR_GREEN);
 8002998:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 800299c:	9300      	str	r3, [sp, #0]
 800299e:	232d      	movs	r3, #45	; 0x2d
 80029a0:	2231      	movs	r2, #49	; 0x31
 80029a2:	2105      	movs	r1, #5
 80029a4:	6878      	ldr	r0, [r7, #4]
 80029a6:	f7ff f91a 	bl	8001bde <ILI9341_drawFastHLine>
		ILI9341_drawFastHLine(spi, 5, 96, 45, COLOR_GREEN);
 80029aa:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80029ae:	9300      	str	r3, [sp, #0]
 80029b0:	232d      	movs	r3, #45	; 0x2d
 80029b2:	2260      	movs	r2, #96	; 0x60
 80029b4:	2105      	movs	r1, #5
 80029b6:	6878      	ldr	r0, [r7, #4]
 80029b8:	f7ff f911 	bl	8001bde <ILI9341_drawFastHLine>
		ILI9341_drawFastHLine(spi, 5, 143, 45, COLOR_GREEN);
 80029bc:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80029c0:	9300      	str	r3, [sp, #0]
 80029c2:	232d      	movs	r3, #45	; 0x2d
 80029c4:	228f      	movs	r2, #143	; 0x8f
 80029c6:	2105      	movs	r1, #5
 80029c8:	6878      	ldr	r0, [r7, #4]
 80029ca:	f7ff f908 	bl	8001bde <ILI9341_drawFastHLine>
		ILI9341_drawFastHLine(spi, 5, 190, 45, COLOR_GREEN);
 80029ce:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80029d2:	9300      	str	r3, [sp, #0]
 80029d4:	232d      	movs	r3, #45	; 0x2d
 80029d6:	22be      	movs	r2, #190	; 0xbe
 80029d8:	2105      	movs	r1, #5
 80029da:	6878      	ldr	r0, [r7, #4]
 80029dc:	f7ff f8ff 	bl	8001bde <ILI9341_drawFastHLine>
		ILI9341_drawFastHLine(spi, 5, 235, 45, COLOR_GREEN);
 80029e0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80029e4:	9300      	str	r3, [sp, #0]
 80029e6:	232d      	movs	r3, #45	; 0x2d
 80029e8:	22eb      	movs	r2, #235	; 0xeb
 80029ea:	2105      	movs	r1, #5
 80029ec:	6878      	ldr	r0, [r7, #4]
 80029ee:	f7ff f8f6 	bl	8001bde <ILI9341_drawFastHLine>

		// This line is for the input and output text
		ILI9341_drawFastHLine(spi, 50, 30, 265, COLOR_GREEN);
 80029f2:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80029f6:	9300      	str	r3, [sp, #0]
 80029f8:	f240 1309 	movw	r3, #265	; 0x109
 80029fc:	221e      	movs	r2, #30
 80029fe:	2132      	movs	r1, #50	; 0x32
 8002a00:	6878      	ldr	r0, [r7, #4]
 8002a02:	f7ff f8ec 	bl	8001bde <ILI9341_drawFastHLine>

		// Apply them
		ILI9341_printImage(spi, 8, 8, 40, 40, mrac_gain_icon, 40*80*sizeof(uint8_t));
 8002a06:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8002a0a:	9302      	str	r3, [sp, #8]
 8002a0c:	4b29      	ldr	r3, [pc, #164]	; (8002ab4 <show_main_frame_mrac+0x1a4>)
 8002a0e:	9301      	str	r3, [sp, #4]
 8002a10:	2328      	movs	r3, #40	; 0x28
 8002a12:	9300      	str	r3, [sp, #0]
 8002a14:	2328      	movs	r3, #40	; 0x28
 8002a16:	2208      	movs	r2, #8
 8002a18:	2108      	movs	r1, #8
 8002a1a:	6878      	ldr	r0, [r7, #4]
 8002a1c:	f7ff faaf 	bl	8001f7e <ILI9341_printImage>
		ILI9341_printImage(spi, 8, 55, 40, 40, mrac_saturation_icon, 40*80*sizeof(uint8_t));
 8002a20:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8002a24:	9302      	str	r3, [sp, #8]
 8002a26:	4b24      	ldr	r3, [pc, #144]	; (8002ab8 <show_main_frame_mrac+0x1a8>)
 8002a28:	9301      	str	r3, [sp, #4]
 8002a2a:	2328      	movs	r3, #40	; 0x28
 8002a2c:	9300      	str	r3, [sp, #0]
 8002a2e:	2328      	movs	r3, #40	; 0x28
 8002a30:	2237      	movs	r2, #55	; 0x37
 8002a32:	2108      	movs	r1, #8
 8002a34:	6878      	ldr	r0, [r7, #4]
 8002a36:	f7ff faa2 	bl	8001f7e <ILI9341_printImage>
		ILI9341_printImage(spi, 8, 100, 40, 40, valve_delay_icon, 40*80*sizeof(uint8_t));
 8002a3a:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8002a3e:	9302      	str	r3, [sp, #8]
 8002a40:	4b1e      	ldr	r3, [pc, #120]	; (8002abc <show_main_frame_mrac+0x1ac>)
 8002a42:	9301      	str	r3, [sp, #4]
 8002a44:	2328      	movs	r3, #40	; 0x28
 8002a46:	9300      	str	r3, [sp, #0]
 8002a48:	2328      	movs	r3, #40	; 0x28
 8002a4a:	2264      	movs	r2, #100	; 0x64
 8002a4c:	2108      	movs	r1, #8
 8002a4e:	6878      	ldr	r0, [r7, #4]
 8002a50:	f7ff fa95 	bl	8001f7e <ILI9341_printImage>
		ILI9341_printImage(spi, 8, 193, 40, 40, to_screen_1_icon, 40*80*sizeof(uint8_t));
 8002a54:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8002a58:	9302      	str	r3, [sp, #8]
 8002a5a:	4b19      	ldr	r3, [pc, #100]	; (8002ac0 <show_main_frame_mrac+0x1b0>)
 8002a5c:	9301      	str	r3, [sp, #4]
 8002a5e:	2328      	movs	r3, #40	; 0x28
 8002a60:	9300      	str	r3, [sp, #0]
 8002a62:	2328      	movs	r3, #40	; 0x28
 8002a64:	22c1      	movs	r2, #193	; 0xc1
 8002a66:	2108      	movs	r1, #8
 8002a68:	6878      	ldr	r0, [r7, #4]
 8002a6a:	f7ff fa88 	bl	8001f7e <ILI9341_printImage>
	}

	// Change the icon if we are in control mode, or open loop mode
	if(closedloop_on == true)
 8002a6e:	78fb      	ldrb	r3, [r7, #3]
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	d00d      	beq.n	8002a90 <show_main_frame_mrac+0x180>
		ILI9341_printImage(spi, 8, 146, 40, 40, closedloop_icon, 40*80*sizeof(uint8_t));
 8002a74:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8002a78:	9302      	str	r3, [sp, #8]
 8002a7a:	4b12      	ldr	r3, [pc, #72]	; (8002ac4 <show_main_frame_mrac+0x1b4>)
 8002a7c:	9301      	str	r3, [sp, #4]
 8002a7e:	2328      	movs	r3, #40	; 0x28
 8002a80:	9300      	str	r3, [sp, #0]
 8002a82:	2328      	movs	r3, #40	; 0x28
 8002a84:	2292      	movs	r2, #146	; 0x92
 8002a86:	2108      	movs	r1, #8
 8002a88:	6878      	ldr	r0, [r7, #4]
 8002a8a:	f7ff fa78 	bl	8001f7e <ILI9341_printImage>
	else
		ILI9341_printImage(spi, 8, 146, 40, 40, openloop_icon, 40*80*sizeof(uint8_t));

}
 8002a8e:	e00c      	b.n	8002aaa <show_main_frame_mrac+0x19a>
		ILI9341_printImage(spi, 8, 146, 40, 40, openloop_icon, 40*80*sizeof(uint8_t));
 8002a90:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8002a94:	9302      	str	r3, [sp, #8]
 8002a96:	4b0c      	ldr	r3, [pc, #48]	; (8002ac8 <show_main_frame_mrac+0x1b8>)
 8002a98:	9301      	str	r3, [sp, #4]
 8002a9a:	2328      	movs	r3, #40	; 0x28
 8002a9c:	9300      	str	r3, [sp, #0]
 8002a9e:	2328      	movs	r3, #40	; 0x28
 8002aa0:	2292      	movs	r2, #146	; 0x92
 8002aa2:	2108      	movs	r1, #8
 8002aa4:	6878      	ldr	r0, [r7, #4]
 8002aa6:	f7ff fa6a 	bl	8001f7e <ILI9341_printImage>
}
 8002aaa:	bf00      	nop
 8002aac:	3708      	adds	r7, #8
 8002aae:	46bd      	mov	sp, r7
 8002ab0:	bd80      	pop	{r7, pc}
 8002ab2:	bf00      	nop
 8002ab4:	08011fec 	.word	0x08011fec
 8002ab8:	08012c6c 	.word	0x08012c6c
 8002abc:	080138ec 	.word	0x080138ec
 8002ac0:	0801776c 	.word	0x0801776c
 8002ac4:	080151ec 	.word	0x080151ec
 8002ac8:	08015e6c 	.word	0x08015e6c

08002acc <show_j1939_main_frame>:

// Create the main frame for j1939
void show_j1939_main_frame(ILI9341_SPI* spi, bool update_main_frame){
 8002acc:	b580      	push	{r7, lr}
 8002ace:	b086      	sub	sp, #24
 8002ad0:	af04      	add	r7, sp, #16
 8002ad2:	6078      	str	r0, [r7, #4]
 8002ad4:	460b      	mov	r3, r1
 8002ad6:	70fb      	strb	r3, [r7, #3]
	// Set rotation
	ILI9341_setRotation(spi, 2);
 8002ad8:	2102      	movs	r1, #2
 8002ada:	6878      	ldr	r0, [r7, #4]
 8002adc:	f7ff fa88 	bl	8001ff0 <ILI9341_setRotation>

	if(update_main_frame == true){
 8002ae0:	78fb      	ldrb	r3, [r7, #3]
 8002ae2:	2b00      	cmp	r3, #0
 8002ae4:	f000 80a2 	beq.w	8002c2c <show_j1939_main_frame+0x160>
		// Set background
		ILI9341_Fill(spi, COLOR_NAVY);
 8002ae8:	210f      	movs	r1, #15
 8002aea:	6878      	ldr	r0, [r7, #4]
 8002aec:	f7fe ff24 	bl	8001938 <ILI9341_Fill>

		// Print frame - large square
		ILI9341_drawFastHLine(spi, 5, 235, 310, COLOR_GREEN);
 8002af0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002af4:	9300      	str	r3, [sp, #0]
 8002af6:	f44f 739b 	mov.w	r3, #310	; 0x136
 8002afa:	22eb      	movs	r2, #235	; 0xeb
 8002afc:	2105      	movs	r1, #5
 8002afe:	6878      	ldr	r0, [r7, #4]
 8002b00:	f7ff f86d 	bl	8001bde <ILI9341_drawFastHLine>
		ILI9341_drawFastHLine(spi, 5, 5, 310, COLOR_GREEN);
 8002b04:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b08:	9300      	str	r3, [sp, #0]
 8002b0a:	f44f 739b 	mov.w	r3, #310	; 0x136
 8002b0e:	2205      	movs	r2, #5
 8002b10:	2105      	movs	r1, #5
 8002b12:	6878      	ldr	r0, [r7, #4]
 8002b14:	f7ff f863 	bl	8001bde <ILI9341_drawFastHLine>
		ILI9341_drawFastVLine(spi, 5, 5, 230, COLOR_GREEN);
 8002b18:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b1c:	9300      	str	r3, [sp, #0]
 8002b1e:	23e6      	movs	r3, #230	; 0xe6
 8002b20:	2205      	movs	r2, #5
 8002b22:	2105      	movs	r1, #5
 8002b24:	6878      	ldr	r0, [r7, #4]
 8002b26:	f7ff f87f 	bl	8001c28 <ILI9341_drawFastVLine>
		ILI9341_drawFastVLine(spi, 315, 5, 230, COLOR_GREEN);
 8002b2a:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b2e:	9300      	str	r3, [sp, #0]
 8002b30:	23e6      	movs	r3, #230	; 0xe6
 8002b32:	2205      	movs	r2, #5
 8002b34:	f240 113b 	movw	r1, #315	; 0x13b
 8002b38:	6878      	ldr	r0, [r7, #4]
 8002b3a:	f7ff f875 	bl	8001c28 <ILI9341_drawFastVLine>

		// Print buttons - Small squares
		ILI9341_drawFastVLine(spi, 50, 5, 230, COLOR_GREEN);
 8002b3e:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b42:	9300      	str	r3, [sp, #0]
 8002b44:	23e6      	movs	r3, #230	; 0xe6
 8002b46:	2205      	movs	r2, #5
 8002b48:	2132      	movs	r1, #50	; 0x32
 8002b4a:	6878      	ldr	r0, [r7, #4]
 8002b4c:	f7ff f86c 	bl	8001c28 <ILI9341_drawFastVLine>
		ILI9341_drawFastHLine(spi, 5, 49, 45, COLOR_GREEN);
 8002b50:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b54:	9300      	str	r3, [sp, #0]
 8002b56:	232d      	movs	r3, #45	; 0x2d
 8002b58:	2231      	movs	r2, #49	; 0x31
 8002b5a:	2105      	movs	r1, #5
 8002b5c:	6878      	ldr	r0, [r7, #4]
 8002b5e:	f7ff f83e 	bl	8001bde <ILI9341_drawFastHLine>
		ILI9341_drawFastHLine(spi, 5, 96, 45, COLOR_GREEN);
 8002b62:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b66:	9300      	str	r3, [sp, #0]
 8002b68:	232d      	movs	r3, #45	; 0x2d
 8002b6a:	2260      	movs	r2, #96	; 0x60
 8002b6c:	2105      	movs	r1, #5
 8002b6e:	6878      	ldr	r0, [r7, #4]
 8002b70:	f7ff f835 	bl	8001bde <ILI9341_drawFastHLine>
		ILI9341_drawFastHLine(spi, 5, 143, 45, COLOR_GREEN);
 8002b74:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b78:	9300      	str	r3, [sp, #0]
 8002b7a:	232d      	movs	r3, #45	; 0x2d
 8002b7c:	228f      	movs	r2, #143	; 0x8f
 8002b7e:	2105      	movs	r1, #5
 8002b80:	6878      	ldr	r0, [r7, #4]
 8002b82:	f7ff f82c 	bl	8001bde <ILI9341_drawFastHLine>
		ILI9341_drawFastHLine(spi, 5, 190, 45, COLOR_GREEN);
 8002b86:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	232d      	movs	r3, #45	; 0x2d
 8002b8e:	22be      	movs	r2, #190	; 0xbe
 8002b90:	2105      	movs	r1, #5
 8002b92:	6878      	ldr	r0, [r7, #4]
 8002b94:	f7ff f823 	bl	8001bde <ILI9341_drawFastHLine>
		ILI9341_drawFastHLine(spi, 5, 235, 45, COLOR_GREEN);
 8002b98:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002b9c:	9300      	str	r3, [sp, #0]
 8002b9e:	232d      	movs	r3, #45	; 0x2d
 8002ba0:	22eb      	movs	r2, #235	; 0xeb
 8002ba2:	2105      	movs	r1, #5
 8002ba4:	6878      	ldr	r0, [r7, #4]
 8002ba6:	f7ff f81a 	bl	8001bde <ILI9341_drawFastHLine>

		// Apply them
		ILI9341_printImage(spi, 8, 8, 40, 40, set_address_icon, 40*80*sizeof(uint8_t));
 8002baa:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8002bae:	9302      	str	r3, [sp, #8]
 8002bb0:	4b20      	ldr	r3, [pc, #128]	; (8002c34 <show_j1939_main_frame+0x168>)
 8002bb2:	9301      	str	r3, [sp, #4]
 8002bb4:	2328      	movs	r3, #40	; 0x28
 8002bb6:	9300      	str	r3, [sp, #0]
 8002bb8:	2328      	movs	r3, #40	; 0x28
 8002bba:	2208      	movs	r2, #8
 8002bbc:	2108      	movs	r1, #8
 8002bbe:	6878      	ldr	r0, [r7, #4]
 8002bc0:	f7ff f9dd 	bl	8001f7e <ILI9341_printImage>
		ILI9341_printImage(spi, 8, 55, 40, 40, set_configurations_icon, 40*80*sizeof(uint8_t));
 8002bc4:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8002bc8:	9302      	str	r3, [sp, #8]
 8002bca:	4b1b      	ldr	r3, [pc, #108]	; (8002c38 <show_j1939_main_frame+0x16c>)
 8002bcc:	9301      	str	r3, [sp, #4]
 8002bce:	2328      	movs	r3, #40	; 0x28
 8002bd0:	9300      	str	r3, [sp, #0]
 8002bd2:	2328      	movs	r3, #40	; 0x28
 8002bd4:	2237      	movs	r2, #55	; 0x37
 8002bd6:	2108      	movs	r1, #8
 8002bd8:	6878      	ldr	r0, [r7, #4]
 8002bda:	f7ff f9d0 	bl	8001f7e <ILI9341_printImage>
		ILI9341_printImage(spi, 8, 100, 40, 40, error_log_icon, 40*80*sizeof(uint8_t));
 8002bde:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8002be2:	9302      	str	r3, [sp, #8]
 8002be4:	4b15      	ldr	r3, [pc, #84]	; (8002c3c <show_j1939_main_frame+0x170>)
 8002be6:	9301      	str	r3, [sp, #4]
 8002be8:	2328      	movs	r3, #40	; 0x28
 8002bea:	9300      	str	r3, [sp, #0]
 8002bec:	2328      	movs	r3, #40	; 0x28
 8002bee:	2264      	movs	r2, #100	; 0x64
 8002bf0:	2108      	movs	r1, #8
 8002bf2:	6878      	ldr	r0, [r7, #4]
 8002bf4:	f7ff f9c3 	bl	8001f7e <ILI9341_printImage>
		ILI9341_printImage(spi, 8, 146, 40, 40, save_icon, 40*80*sizeof(uint8_t));
 8002bf8:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8002bfc:	9302      	str	r3, [sp, #8]
 8002bfe:	4b10      	ldr	r3, [pc, #64]	; (8002c40 <show_j1939_main_frame+0x174>)
 8002c00:	9301      	str	r3, [sp, #4]
 8002c02:	2328      	movs	r3, #40	; 0x28
 8002c04:	9300      	str	r3, [sp, #0]
 8002c06:	2328      	movs	r3, #40	; 0x28
 8002c08:	2292      	movs	r2, #146	; 0x92
 8002c0a:	2108      	movs	r1, #8
 8002c0c:	6878      	ldr	r0, [r7, #4]
 8002c0e:	f7ff f9b6 	bl	8001f7e <ILI9341_printImage>
		ILI9341_printImage(spi, 8, 193, 40, 40, to_screen_0_icon, 40*80*sizeof(uint8_t));
 8002c12:	f44f 6348 	mov.w	r3, #3200	; 0xc80
 8002c16:	9302      	str	r3, [sp, #8]
 8002c18:	4b0a      	ldr	r3, [pc, #40]	; (8002c44 <show_j1939_main_frame+0x178>)
 8002c1a:	9301      	str	r3, [sp, #4]
 8002c1c:	2328      	movs	r3, #40	; 0x28
 8002c1e:	9300      	str	r3, [sp, #0]
 8002c20:	2328      	movs	r3, #40	; 0x28
 8002c22:	22c1      	movs	r2, #193	; 0xc1
 8002c24:	2108      	movs	r1, #8
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7ff f9a9 	bl	8001f7e <ILI9341_printImage>
	}

}
 8002c2c:	bf00      	nop
 8002c2e:	3708      	adds	r7, #8
 8002c30:	46bd      	mov	sp, r7
 8002c32:	bd80      	pop	{r7, pc}
 8002c34:	080183ec 	.word	0x080183ec
 8002c38:	0801906c 	.word	0x0801906c
 8002c3c:	08019cec 	.word	0x08019cec
 8002c40:	0801456c 	.word	0x0801456c
 8002c44:	08016aec 	.word	0x08016aec

08002c48 <show_j1939_DM1_error_messages_frame>:

// Show 12 j1939 error messages when we pressed the button
void show_j1939_DM1_error_messages_frame(ILI9341_SPI* spi, bool DM1_Messages_Binary[]){
 8002c48:	b580      	push	{r7, lr}
 8002c4a:	b092      	sub	sp, #72	; 0x48
 8002c4c:	af04      	add	r7, sp, #16
 8002c4e:	6078      	str	r0, [r7, #4]
 8002c50:	6039      	str	r1, [r7, #0]
	// Clear the screen , but not the icons
	ILI9341_Fill_Rect(spi, 51, 6, 314, 234, COLOR_NAVY);
 8002c52:	230f      	movs	r3, #15
 8002c54:	9301      	str	r3, [sp, #4]
 8002c56:	23ea      	movs	r3, #234	; 0xea
 8002c58:	9300      	str	r3, [sp, #0]
 8002c5a:	f44f 739d 	mov.w	r3, #314	; 0x13a
 8002c5e:	2206      	movs	r2, #6
 8002c60:	2133      	movs	r1, #51	; 0x33
 8002c62:	6878      	ldr	r0, [r7, #4]
 8002c64:	f7fe fead 	bl	80019c2 <ILI9341_Fill_Rect>

	// Write the title
	ILI9341_drawFastHLine(spi, 50, 30, 265, COLOR_GREEN);
 8002c68:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002c6c:	9300      	str	r3, [sp, #0]
 8002c6e:	f240 1309 	movw	r3, #265	; 0x109
 8002c72:	221e      	movs	r2, #30
 8002c74:	2132      	movs	r1, #50	; 0x32
 8002c76:	6878      	ldr	r0, [r7, #4]
 8002c78:	f7fe ffb1 	bl	8001bde <ILI9341_drawFastHLine>
	char text_message[40];
	sprintf(text_message, "DM1 Error Messages. Green = OK");
 8002c7c:	f107 030c 	add.w	r3, r7, #12
 8002c80:	496c      	ldr	r1, [pc, #432]	; (8002e34 <show_j1939_DM1_error_messages_frame+0x1ec>)
 8002c82:	4618      	mov	r0, r3
 8002c84:	f003 fa12 	bl	80060ac <sprintf_>
	ILI9341_printText(spi, text_message, 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002c88:	f107 010c 	add.w	r1, r7, #12
 8002c8c:	2301      	movs	r3, #1
 8002c8e:	9302      	str	r3, [sp, #8]
 8002c90:	230f      	movs	r3, #15
 8002c92:	9301      	str	r3, [sp, #4]
 8002c94:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002c98:	9300      	str	r3, [sp, #0]
 8002c9a:	230a      	movs	r3, #10
 8002c9c:	2237      	movs	r2, #55	; 0x37
 8002c9e:	6878      	ldr	r0, [r7, #4]
 8002ca0:	f7ff f92c 	bl	8001efc <ILI9341_printText>

	// Print out the error messages and mark them with red if they are true
	uint16_t text_color;
	for(uint8_t i = 0; i < 12; i++){
 8002ca4:	2300      	movs	r3, #0
 8002ca6:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002caa:	e0ac      	b.n	8002e06 <show_j1939_DM1_error_messages_frame+0x1be>
		if(i == 0){
 8002cac:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002cb0:	2b00      	cmp	r3, #0
 8002cb2:	d106      	bne.n	8002cc2 <show_j1939_DM1_error_messages_frame+0x7a>
			sprintf(text_message, "Address not claimed");
 8002cb4:	f107 030c 	add.w	r3, r7, #12
 8002cb8:	495f      	ldr	r1, [pc, #380]	; (8002e38 <show_j1939_DM1_error_messages_frame+0x1f0>)
 8002cba:	4618      	mov	r0, r3
 8002cbc:	f003 f9f6 	bl	80060ac <sprintf_>
 8002cc0:	e077      	b.n	8002db2 <show_j1939_DM1_error_messages_frame+0x16a>
		}else if(i == 1){
 8002cc2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002cc6:	2b01      	cmp	r3, #1
 8002cc8:	d106      	bne.n	8002cd8 <show_j1939_DM1_error_messages_frame+0x90>
			sprintf(text_message, "Inconsistent CAN Control message");
 8002cca:	f107 030c 	add.w	r3, r7, #12
 8002cce:	495b      	ldr	r1, [pc, #364]	; (8002e3c <show_j1939_DM1_error_messages_frame+0x1f4>)
 8002cd0:	4618      	mov	r0, r3
 8002cd2:	f003 f9eb 	bl	80060ac <sprintf_>
 8002cd6:	e06c      	b.n	8002db2 <show_j1939_DM1_error_messages_frame+0x16a>
		}else if(i == 2){
 8002cd8:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002cdc:	2b02      	cmp	r3, #2
 8002cde:	d106      	bne.n	8002cee <show_j1939_DM1_error_messages_frame+0xa6>
			sprintf(text_message, "No CAN Control message received");
 8002ce0:	f107 030c 	add.w	r3, r7, #12
 8002ce4:	4956      	ldr	r1, [pc, #344]	; (8002e40 <show_j1939_DM1_error_messages_frame+0x1f8>)
 8002ce6:	4618      	mov	r0, r3
 8002ce8:	f003 f9e0 	bl	80060ac <sprintf_>
 8002cec:	e061      	b.n	8002db2 <show_j1939_DM1_error_messages_frame+0x16a>
		}else if(i == 3){
 8002cee:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002cf2:	2b03      	cmp	r3, #3
 8002cf4:	d106      	bne.n	8002d04 <show_j1939_DM1_error_messages_frame+0xbc>
			sprintf(text_message, "EEPROM parameter write/read error");
 8002cf6:	f107 030c 	add.w	r3, r7, #12
 8002cfa:	4952      	ldr	r1, [pc, #328]	; (8002e44 <show_j1939_DM1_error_messages_frame+0x1fc>)
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f003 f9d5 	bl	80060ac <sprintf_>
 8002d02:	e056      	b.n	8002db2 <show_j1939_DM1_error_messages_frame+0x16a>
		}else if(i == 4){
 8002d04:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002d08:	2b04      	cmp	r3, #4
 8002d0a:	d106      	bne.n	8002d1a <show_j1939_DM1_error_messages_frame+0xd2>
			sprintf(text_message, "Motor stall detected");
 8002d0c:	f107 030c 	add.w	r3, r7, #12
 8002d10:	494d      	ldr	r1, [pc, #308]	; (8002e48 <show_j1939_DM1_error_messages_frame+0x200>)
 8002d12:	4618      	mov	r0, r3
 8002d14:	f003 f9ca 	bl	80060ac <sprintf_>
 8002d18:	e04b      	b.n	8002db2 <show_j1939_DM1_error_messages_frame+0x16a>
		}else if(i == 5){
 8002d1a:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002d1e:	2b05      	cmp	r3, #5
 8002d20:	d106      	bne.n	8002d30 <show_j1939_DM1_error_messages_frame+0xe8>
			sprintf(text_message, "Undervoltage - Need more voltage");
 8002d22:	f107 030c 	add.w	r3, r7, #12
 8002d26:	4949      	ldr	r1, [pc, #292]	; (8002e4c <show_j1939_DM1_error_messages_frame+0x204>)
 8002d28:	4618      	mov	r0, r3
 8002d2a:	f003 f9bf 	bl	80060ac <sprintf_>
 8002d2e:	e040      	b.n	8002db2 <show_j1939_DM1_error_messages_frame+0x16a>
		}else if(i == 6){
 8002d30:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002d34:	2b06      	cmp	r3, #6
 8002d36:	d106      	bne.n	8002d46 <show_j1939_DM1_error_messages_frame+0xfe>
			sprintf(text_message, "Overvoltage - Need less voltage");
 8002d38:	f107 030c 	add.w	r3, r7, #12
 8002d3c:	4944      	ldr	r1, [pc, #272]	; (8002e50 <show_j1939_DM1_error_messages_frame+0x208>)
 8002d3e:	4618      	mov	r0, r3
 8002d40:	f003 f9b4 	bl	80060ac <sprintf_>
 8002d44:	e035      	b.n	8002db2 <show_j1939_DM1_error_messages_frame+0x16a>
		}else if(i == 7){
 8002d46:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002d4a:	2b07      	cmp	r3, #7
 8002d4c:	d106      	bne.n	8002d5c <show_j1939_DM1_error_messages_frame+0x114>
			sprintf(text_message, "SCU temperature higher than");
 8002d4e:	f107 030c 	add.w	r3, r7, #12
 8002d52:	4940      	ldr	r1, [pc, #256]	; (8002e54 <show_j1939_DM1_error_messages_frame+0x20c>)
 8002d54:	4618      	mov	r0, r3
 8002d56:	f003 f9a9 	bl	80060ac <sprintf_>
 8002d5a:	e02a      	b.n	8002db2 <show_j1939_DM1_error_messages_frame+0x16a>
		}else if(i == 8){
 8002d5c:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002d60:	2b08      	cmp	r3, #8
 8002d62:	d106      	bne.n	8002d72 <show_j1939_DM1_error_messages_frame+0x12a>
			sprintf(text_message, "SCU temperature below");
 8002d64:	f107 030c 	add.w	r3, r7, #12
 8002d68:	493b      	ldr	r1, [pc, #236]	; (8002e58 <show_j1939_DM1_error_messages_frame+0x210>)
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f003 f99e 	bl	80060ac <sprintf_>
 8002d70:	e01f      	b.n	8002db2 <show_j1939_DM1_error_messages_frame+0x16a>
		}else if(i == 9){
 8002d72:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002d76:	2b09      	cmp	r3, #9
 8002d78:	d106      	bne.n	8002d88 <show_j1939_DM1_error_messages_frame+0x140>
			sprintf(text_message, "Current exceeds upper limit");
 8002d7a:	f107 030c 	add.w	r3, r7, #12
 8002d7e:	4937      	ldr	r1, [pc, #220]	; (8002e5c <show_j1939_DM1_error_messages_frame+0x214>)
 8002d80:	4618      	mov	r0, r3
 8002d82:	f003 f993 	bl	80060ac <sprintf_>
 8002d86:	e014      	b.n	8002db2 <show_j1939_DM1_error_messages_frame+0x16a>
		}else if(i == 10){
 8002d88:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002d8c:	2b0a      	cmp	r3, #10
 8002d8e:	d106      	bne.n	8002d9e <show_j1939_DM1_error_messages_frame+0x156>
			sprintf(text_message, "Error position in IDLE Mode");
 8002d90:	f107 030c 	add.w	r3, r7, #12
 8002d94:	4932      	ldr	r1, [pc, #200]	; (8002e60 <show_j1939_DM1_error_messages_frame+0x218>)
 8002d96:	4618      	mov	r0, r3
 8002d98:	f003 f988 	bl	80060ac <sprintf_>
 8002d9c:	e009      	b.n	8002db2 <show_j1939_DM1_error_messages_frame+0x16a>
		}else if(i == 11){
 8002d9e:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002da2:	2b0b      	cmp	r3, #11
 8002da4:	d105      	bne.n	8002db2 <show_j1939_DM1_error_messages_frame+0x16a>
			sprintf(text_message, "Range error for Linearization parameter");
 8002da6:	f107 030c 	add.w	r3, r7, #12
 8002daa:	492e      	ldr	r1, [pc, #184]	; (8002e64 <show_j1939_DM1_error_messages_frame+0x21c>)
 8002dac:	4618      	mov	r0, r3
 8002dae:	f003 f97d 	bl	80060ac <sprintf_>
		}
		text_color = DM1_Messages_Binary[i] == true ? COLOR_RED : COLOR_GREEN;
 8002db2:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002db6:	683a      	ldr	r2, [r7, #0]
 8002db8:	4413      	add	r3, r2
 8002dba:	781b      	ldrb	r3, [r3, #0]
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	d002      	beq.n	8002dc6 <show_j1939_DM1_error_messages_frame+0x17e>
 8002dc0:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 8002dc4:	e001      	b.n	8002dca <show_j1939_DM1_error_messages_frame+0x182>
 8002dc6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002dca:	86bb      	strh	r3, [r7, #52]	; 0x34
		ILI9341_printText(spi, text_message, 55, 35 + 10*i, text_color, COLOR_NAVY, 1);
 8002dcc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002dd0:	b29b      	uxth	r3, r3
 8002dd2:	461a      	mov	r2, r3
 8002dd4:	0092      	lsls	r2, r2, #2
 8002dd6:	4413      	add	r3, r2
 8002dd8:	005b      	lsls	r3, r3, #1
 8002dda:	b29b      	uxth	r3, r3
 8002ddc:	3323      	adds	r3, #35	; 0x23
 8002dde:	b29b      	uxth	r3, r3
 8002de0:	b21a      	sxth	r2, r3
 8002de2:	f107 010c 	add.w	r1, r7, #12
 8002de6:	2301      	movs	r3, #1
 8002de8:	9302      	str	r3, [sp, #8]
 8002dea:	230f      	movs	r3, #15
 8002dec:	9301      	str	r3, [sp, #4]
 8002dee:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8002df0:	9300      	str	r3, [sp, #0]
 8002df2:	4613      	mov	r3, r2
 8002df4:	2237      	movs	r2, #55	; 0x37
 8002df6:	6878      	ldr	r0, [r7, #4]
 8002df8:	f7ff f880 	bl	8001efc <ILI9341_printText>
	for(uint8_t i = 0; i < 12; i++){
 8002dfc:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002e00:	3301      	adds	r3, #1
 8002e02:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
 8002e06:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 8002e0a:	2b0b      	cmp	r3, #11
 8002e0c:	f67f af4e 	bls.w	8002cac <show_j1939_DM1_error_messages_frame+0x64>
	}

	// Place a reset button for the messages
	ILI9341_printImage(spi, 90, 160, 80, 40, reset_button, 80*40*2*sizeof(uint8_t));
 8002e10:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8002e14:	9302      	str	r3, [sp, #8]
 8002e16:	4b14      	ldr	r3, [pc, #80]	; (8002e68 <show_j1939_DM1_error_messages_frame+0x220>)
 8002e18:	9301      	str	r3, [sp, #4]
 8002e1a:	2328      	movs	r3, #40	; 0x28
 8002e1c:	9300      	str	r3, [sp, #0]
 8002e1e:	2350      	movs	r3, #80	; 0x50
 8002e20:	22a0      	movs	r2, #160	; 0xa0
 8002e22:	215a      	movs	r1, #90	; 0x5a
 8002e24:	6878      	ldr	r0, [r7, #4]
 8002e26:	f7ff f8aa 	bl	8001f7e <ILI9341_printImage>
}
 8002e2a:	bf00      	nop
 8002e2c:	3738      	adds	r7, #56	; 0x38
 8002e2e:	46bd      	mov	sp, r7
 8002e30:	bd80      	pop	{r7, pc}
 8002e32:	bf00      	nop
 8002e34:	08011544 	.word	0x08011544
 8002e38:	08011564 	.word	0x08011564
 8002e3c:	08011578 	.word	0x08011578
 8002e40:	0801159c 	.word	0x0801159c
 8002e44:	080115bc 	.word	0x080115bc
 8002e48:	080115e0 	.word	0x080115e0
 8002e4c:	080115f8 	.word	0x080115f8
 8002e50:	0801161c 	.word	0x0801161c
 8002e54:	0801163c 	.word	0x0801163c
 8002e58:	08011658 	.word	0x08011658
 8002e5c:	08011670 	.word	0x08011670
 8002e60:	0801168c 	.word	0x0801168c
 8002e64:	080116a8 	.word	0x080116a8
 8002e68:	08020d6c 	.word	0x08020d6c

08002e6c <show_j1939_CA_names_frame>:

// Show the CA names from where we got when we claimed the address
void show_j1939_CA_names_frame(ILI9341_SPI* spi, uint8_t CA[], uint8_t SA_ACU){
 8002e6c:	b580      	push	{r7, lr}
 8002e6e:	b098      	sub	sp, #96	; 0x60
 8002e70:	af04      	add	r7, sp, #16
 8002e72:	60f8      	str	r0, [r7, #12]
 8002e74:	60b9      	str	r1, [r7, #8]
 8002e76:	4613      	mov	r3, r2
 8002e78:	71fb      	strb	r3, [r7, #7]
	// Clear the screen , but not the icons
	ILI9341_Fill_Rect(spi, 51, 6, 314, 234, COLOR_NAVY);
 8002e7a:	230f      	movs	r3, #15
 8002e7c:	9301      	str	r3, [sp, #4]
 8002e7e:	23ea      	movs	r3, #234	; 0xea
 8002e80:	9300      	str	r3, [sp, #0]
 8002e82:	f44f 739d 	mov.w	r3, #314	; 0x13a
 8002e86:	2206      	movs	r2, #6
 8002e88:	2133      	movs	r1, #51	; 0x33
 8002e8a:	68f8      	ldr	r0, [r7, #12]
 8002e8c:	f7fe fd99 	bl	80019c2 <ILI9341_Fill_Rect>

	// Write the title
	ILI9341_drawFastHLine(spi, 50, 30, 265, COLOR_GREEN);
 8002e90:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8002e94:	9300      	str	r3, [sp, #0]
 8002e96:	f240 1309 	movw	r3, #265	; 0x109
 8002e9a:	221e      	movs	r2, #30
 8002e9c:	2132      	movs	r1, #50	; 0x32
 8002e9e:	68f8      	ldr	r0, [r7, #12]
 8002ea0:	f7fe fe9d 	bl	8001bde <ILI9341_drawFastHLine>
	char text_message[40];
	sprintf(text_message, "CA Names J1939 and source address");
 8002ea4:	f107 0314 	add.w	r3, r7, #20
 8002ea8:	4990      	ldr	r1, [pc, #576]	; (80030ec <show_j1939_CA_names_frame+0x280>)
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f003 f8fe 	bl	80060ac <sprintf_>
	ILI9341_printText(spi, text_message, 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8002eb0:	f107 0114 	add.w	r1, r7, #20
 8002eb4:	2301      	movs	r3, #1
 8002eb6:	9302      	str	r3, [sp, #8]
 8002eb8:	230f      	movs	r3, #15
 8002eba:	9301      	str	r3, [sp, #4]
 8002ebc:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8002ec0:	9300      	str	r3, [sp, #0]
 8002ec2:	230a      	movs	r3, #10
 8002ec4:	2237      	movs	r2, #55	; 0x37
 8002ec6:	68f8      	ldr	r0, [r7, #12]
 8002ec8:	f7ff f818 	bl	8001efc <ILI9341_printText>

	// Print out the CA names
	uint32_t identity_number = ((CA[2] & 0b00011111) << 16) | (CA[1] << 8) | CA[0];
 8002ecc:	68bb      	ldr	r3, [r7, #8]
 8002ece:	3302      	adds	r3, #2
 8002ed0:	781b      	ldrb	r3, [r3, #0]
 8002ed2:	041b      	lsls	r3, r3, #16
 8002ed4:	f403 12f8 	and.w	r2, r3, #2031616	; 0x1f0000
 8002ed8:	68bb      	ldr	r3, [r7, #8]
 8002eda:	3301      	adds	r3, #1
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	021b      	lsls	r3, r3, #8
 8002ee0:	4313      	orrs	r3, r2
 8002ee2:	68ba      	ldr	r2, [r7, #8]
 8002ee4:	7812      	ldrb	r2, [r2, #0]
 8002ee6:	4313      	orrs	r3, r2
 8002ee8:	64bb      	str	r3, [r7, #72]	; 0x48
	uint16_t manufacturer_code = (CA[3] << 3) | (CA[2] >> 5);
 8002eea:	68bb      	ldr	r3, [r7, #8]
 8002eec:	3303      	adds	r3, #3
 8002eee:	781b      	ldrb	r3, [r3, #0]
 8002ef0:	00db      	lsls	r3, r3, #3
 8002ef2:	b21a      	sxth	r2, r3
 8002ef4:	68bb      	ldr	r3, [r7, #8]
 8002ef6:	3302      	adds	r3, #2
 8002ef8:	781b      	ldrb	r3, [r3, #0]
 8002efa:	095b      	lsrs	r3, r3, #5
 8002efc:	b2db      	uxtb	r3, r3
 8002efe:	b21b      	sxth	r3, r3
 8002f00:	4313      	orrs	r3, r2
 8002f02:	b21b      	sxth	r3, r3
 8002f04:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
	uint8_t function_instance = CA[4] >> 3;
 8002f08:	68bb      	ldr	r3, [r7, #8]
 8002f0a:	3304      	adds	r3, #4
 8002f0c:	781b      	ldrb	r3, [r3, #0]
 8002f0e:	08db      	lsrs	r3, r3, #3
 8002f10:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	uint8_t ECU_instance = CA[4] & 0b00000111;
 8002f14:	68bb      	ldr	r3, [r7, #8]
 8002f16:	3304      	adds	r3, #4
 8002f18:	781b      	ldrb	r3, [r3, #0]
 8002f1a:	f003 0307 	and.w	r3, r3, #7
 8002f1e:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
	uint8_t function = CA[5];
 8002f22:	68bb      	ldr	r3, [r7, #8]
 8002f24:	795b      	ldrb	r3, [r3, #5]
 8002f26:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
	uint8_t vehicle_system = CA[6] >> 1;
 8002f2a:	68bb      	ldr	r3, [r7, #8]
 8002f2c:	3306      	adds	r3, #6
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	085b      	lsrs	r3, r3, #1
 8002f32:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
	uint8_t arbitrary_address_capable = CA[7] >> 7;
 8002f36:	68bb      	ldr	r3, [r7, #8]
 8002f38:	3307      	adds	r3, #7
 8002f3a:	781b      	ldrb	r3, [r3, #0]
 8002f3c:	09db      	lsrs	r3, r3, #7
 8002f3e:	f887 3041 	strb.w	r3, [r7, #65]	; 0x41
	uint8_t industry_group = (CA[7] >> 4) & 0b0111;
 8002f42:	68bb      	ldr	r3, [r7, #8]
 8002f44:	3307      	adds	r3, #7
 8002f46:	781b      	ldrb	r3, [r3, #0]
 8002f48:	091b      	lsrs	r3, r3, #4
 8002f4a:	b2db      	uxtb	r3, r3
 8002f4c:	f003 0307 	and.w	r3, r3, #7
 8002f50:	f887 3040 	strb.w	r3, [r7, #64]	; 0x40
	uint8_t vehicle_system_instance = CA[7] & 0b00001111;
 8002f54:	68bb      	ldr	r3, [r7, #8]
 8002f56:	3307      	adds	r3, #7
 8002f58:	781b      	ldrb	r3, [r3, #0]
 8002f5a:	f003 030f 	and.w	r3, r3, #15
 8002f5e:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f

	for(uint8_t i = 0; i < 10; i++){
 8002f62:	2300      	movs	r3, #0
 8002f64:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 8002f68:	e09c      	b.n	80030a4 <show_j1939_CA_names_frame+0x238>
		if(i == 0){
 8002f6a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002f6e:	2b00      	cmp	r3, #0
 8002f70:	d107      	bne.n	8002f82 <show_j1939_CA_names_frame+0x116>
			sprintf(text_message, "Identity:%d", identity_number);
 8002f72:	f107 0314 	add.w	r3, r7, #20
 8002f76:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8002f78:	495d      	ldr	r1, [pc, #372]	; (80030f0 <show_j1939_CA_names_frame+0x284>)
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f003 f896 	bl	80060ac <sprintf_>
 8002f80:	e072      	b.n	8003068 <show_j1939_CA_names_frame+0x1fc>
		}else if(i == 1){
 8002f82:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002f86:	2b01      	cmp	r3, #1
 8002f88:	d108      	bne.n	8002f9c <show_j1939_CA_names_frame+0x130>
			sprintf(text_message, "Manufacturer code:%d", manufacturer_code);
 8002f8a:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 8002f8e:	f107 0314 	add.w	r3, r7, #20
 8002f92:	4958      	ldr	r1, [pc, #352]	; (80030f4 <show_j1939_CA_names_frame+0x288>)
 8002f94:	4618      	mov	r0, r3
 8002f96:	f003 f889 	bl	80060ac <sprintf_>
 8002f9a:	e065      	b.n	8003068 <show_j1939_CA_names_frame+0x1fc>
		}else if(i == 2){
 8002f9c:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002fa0:	2b02      	cmp	r3, #2
 8002fa2:	d108      	bne.n	8002fb6 <show_j1939_CA_names_frame+0x14a>
			sprintf(text_message, "Function instance:%d", function_instance);
 8002fa4:	f897 2045 	ldrb.w	r2, [r7, #69]	; 0x45
 8002fa8:	f107 0314 	add.w	r3, r7, #20
 8002fac:	4952      	ldr	r1, [pc, #328]	; (80030f8 <show_j1939_CA_names_frame+0x28c>)
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f003 f87c 	bl	80060ac <sprintf_>
 8002fb4:	e058      	b.n	8003068 <show_j1939_CA_names_frame+0x1fc>
		}else if(i == 3){
 8002fb6:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002fba:	2b03      	cmp	r3, #3
 8002fbc:	d108      	bne.n	8002fd0 <show_j1939_CA_names_frame+0x164>
			sprintf(text_message, "ECU instance:%d", ECU_instance);
 8002fbe:	f897 2044 	ldrb.w	r2, [r7, #68]	; 0x44
 8002fc2:	f107 0314 	add.w	r3, r7, #20
 8002fc6:	494d      	ldr	r1, [pc, #308]	; (80030fc <show_j1939_CA_names_frame+0x290>)
 8002fc8:	4618      	mov	r0, r3
 8002fca:	f003 f86f 	bl	80060ac <sprintf_>
 8002fce:	e04b      	b.n	8003068 <show_j1939_CA_names_frame+0x1fc>
		}else if(i == 4){
 8002fd0:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002fd4:	2b04      	cmp	r3, #4
 8002fd6:	d108      	bne.n	8002fea <show_j1939_CA_names_frame+0x17e>
			sprintf(text_message, "Function:%d", function);
 8002fd8:	f897 2043 	ldrb.w	r2, [r7, #67]	; 0x43
 8002fdc:	f107 0314 	add.w	r3, r7, #20
 8002fe0:	4947      	ldr	r1, [pc, #284]	; (8003100 <show_j1939_CA_names_frame+0x294>)
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f003 f862 	bl	80060ac <sprintf_>
 8002fe8:	e03e      	b.n	8003068 <show_j1939_CA_names_frame+0x1fc>
		}else if(i == 5){
 8002fea:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8002fee:	2b05      	cmp	r3, #5
 8002ff0:	d108      	bne.n	8003004 <show_j1939_CA_names_frame+0x198>
			sprintf(text_message, "Vehicle system:%d", vehicle_system);
 8002ff2:	f897 2042 	ldrb.w	r2, [r7, #66]	; 0x42
 8002ff6:	f107 0314 	add.w	r3, r7, #20
 8002ffa:	4942      	ldr	r1, [pc, #264]	; (8003104 <show_j1939_CA_names_frame+0x298>)
 8002ffc:	4618      	mov	r0, r3
 8002ffe:	f003 f855 	bl	80060ac <sprintf_>
 8003002:	e031      	b.n	8003068 <show_j1939_CA_names_frame+0x1fc>
		}else if(i == 6){
 8003004:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003008:	2b06      	cmp	r3, #6
 800300a:	d108      	bne.n	800301e <show_j1939_CA_names_frame+0x1b2>
			sprintf(text_message, "Arbitrary address capable:%d", arbitrary_address_capable);
 800300c:	f897 2041 	ldrb.w	r2, [r7, #65]	; 0x41
 8003010:	f107 0314 	add.w	r3, r7, #20
 8003014:	493c      	ldr	r1, [pc, #240]	; (8003108 <show_j1939_CA_names_frame+0x29c>)
 8003016:	4618      	mov	r0, r3
 8003018:	f003 f848 	bl	80060ac <sprintf_>
 800301c:	e024      	b.n	8003068 <show_j1939_CA_names_frame+0x1fc>
		}else if(i == 7){
 800301e:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003022:	2b07      	cmp	r3, #7
 8003024:	d108      	bne.n	8003038 <show_j1939_CA_names_frame+0x1cc>
			sprintf(text_message, "Industry group:%d", industry_group);
 8003026:	f897 2040 	ldrb.w	r2, [r7, #64]	; 0x40
 800302a:	f107 0314 	add.w	r3, r7, #20
 800302e:	4937      	ldr	r1, [pc, #220]	; (800310c <show_j1939_CA_names_frame+0x2a0>)
 8003030:	4618      	mov	r0, r3
 8003032:	f003 f83b 	bl	80060ac <sprintf_>
 8003036:	e017      	b.n	8003068 <show_j1939_CA_names_frame+0x1fc>
		}else if(i == 8){
 8003038:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800303c:	2b08      	cmp	r3, #8
 800303e:	d108      	bne.n	8003052 <show_j1939_CA_names_frame+0x1e6>
			sprintf(text_message, "Vehicle system instance:%d", vehicle_system_instance);
 8003040:	f897 203f 	ldrb.w	r2, [r7, #63]	; 0x3f
 8003044:	f107 0314 	add.w	r3, r7, #20
 8003048:	4931      	ldr	r1, [pc, #196]	; (8003110 <show_j1939_CA_names_frame+0x2a4>)
 800304a:	4618      	mov	r0, r3
 800304c:	f003 f82e 	bl	80060ac <sprintf_>
 8003050:	e00a      	b.n	8003068 <show_j1939_CA_names_frame+0x1fc>
		}else if(i == 9){
 8003052:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 8003056:	2b09      	cmp	r3, #9
 8003058:	d106      	bne.n	8003068 <show_j1939_CA_names_frame+0x1fc>
			sprintf(text_message, "ACU Source address:%d", SA_ACU);
 800305a:	79fa      	ldrb	r2, [r7, #7]
 800305c:	f107 0314 	add.w	r3, r7, #20
 8003060:	492c      	ldr	r1, [pc, #176]	; (8003114 <show_j1939_CA_names_frame+0x2a8>)
 8003062:	4618      	mov	r0, r3
 8003064:	f003 f822 	bl	80060ac <sprintf_>
		}

		ILI9341_printText(spi, text_message, 55, 35 + 10*i, COLOR_YELLOW, COLOR_NAVY, 1);
 8003068:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800306c:	b29b      	uxth	r3, r3
 800306e:	461a      	mov	r2, r3
 8003070:	0092      	lsls	r2, r2, #2
 8003072:	4413      	add	r3, r2
 8003074:	005b      	lsls	r3, r3, #1
 8003076:	b29b      	uxth	r3, r3
 8003078:	3323      	adds	r3, #35	; 0x23
 800307a:	b29b      	uxth	r3, r3
 800307c:	b21a      	sxth	r2, r3
 800307e:	f107 0114 	add.w	r1, r7, #20
 8003082:	2301      	movs	r3, #1
 8003084:	9302      	str	r3, [sp, #8]
 8003086:	230f      	movs	r3, #15
 8003088:	9301      	str	r3, [sp, #4]
 800308a:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800308e:	9300      	str	r3, [sp, #0]
 8003090:	4613      	mov	r3, r2
 8003092:	2237      	movs	r2, #55	; 0x37
 8003094:	68f8      	ldr	r0, [r7, #12]
 8003096:	f7fe ff31 	bl	8001efc <ILI9341_printText>
	for(uint8_t i = 0; i < 10; i++){
 800309a:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 800309e:	3301      	adds	r3, #1
 80030a0:	f887 304f 	strb.w	r3, [r7, #79]	; 0x4f
 80030a4:	f897 304f 	ldrb.w	r3, [r7, #79]	; 0x4f
 80030a8:	2b09      	cmp	r3, #9
 80030aa:	f67f af5e 	bls.w	8002f6a <show_j1939_CA_names_frame+0xfe>
	}

	// Place two buttons - Change and request
	ILI9341_printImage(spi, 90, 160, 80, 40, change_button, 80*40*2*sizeof(uint8_t));
 80030ae:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80030b2:	9302      	str	r3, [sp, #8]
 80030b4:	4b18      	ldr	r3, [pc, #96]	; (8003118 <show_j1939_CA_names_frame+0x2ac>)
 80030b6:	9301      	str	r3, [sp, #4]
 80030b8:	2328      	movs	r3, #40	; 0x28
 80030ba:	9300      	str	r3, [sp, #0]
 80030bc:	2350      	movs	r3, #80	; 0x50
 80030be:	22a0      	movs	r2, #160	; 0xa0
 80030c0:	215a      	movs	r1, #90	; 0x5a
 80030c2:	68f8      	ldr	r0, [r7, #12]
 80030c4:	f7fe ff5b 	bl	8001f7e <ILI9341_printImage>
	ILI9341_printImage(spi, 200, 160, 80, 40, request_button, 80*40*2*sizeof(uint8_t));
 80030c8:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 80030cc:	9302      	str	r3, [sp, #8]
 80030ce:	4b13      	ldr	r3, [pc, #76]	; (800311c <show_j1939_CA_names_frame+0x2b0>)
 80030d0:	9301      	str	r3, [sp, #4]
 80030d2:	2328      	movs	r3, #40	; 0x28
 80030d4:	9300      	str	r3, [sp, #0]
 80030d6:	2350      	movs	r3, #80	; 0x50
 80030d8:	22a0      	movs	r2, #160	; 0xa0
 80030da:	21c8      	movs	r1, #200	; 0xc8
 80030dc:	68f8      	ldr	r0, [r7, #12]
 80030de:	f7fe ff4e 	bl	8001f7e <ILI9341_printImage>

}
 80030e2:	bf00      	nop
 80030e4:	3750      	adds	r7, #80	; 0x50
 80030e6:	46bd      	mov	sp, r7
 80030e8:	bd80      	pop	{r7, pc}
 80030ea:	bf00      	nop
 80030ec:	080116d0 	.word	0x080116d0
 80030f0:	080116f4 	.word	0x080116f4
 80030f4:	08011700 	.word	0x08011700
 80030f8:	08011718 	.word	0x08011718
 80030fc:	08011730 	.word	0x08011730
 8003100:	08011740 	.word	0x08011740
 8003104:	0801174c 	.word	0x0801174c
 8003108:	08011760 	.word	0x08011760
 800310c:	08011780 	.word	0x08011780
 8003110:	08011794 	.word	0x08011794
 8003114:	080117b0 	.word	0x080117b0
 8003118:	0801a96c 	.word	0x0801a96c
 800311c:	0801f46c 	.word	0x0801f46c

08003120 <show_j1939_set_CA_names_numpad>:

// Set the CA names + source address
bool show_j1939_set_CA_names_numpad(ILI9341_SPI* spi, uint8_t CA[], uint8_t* SA_ACU){
 8003120:	b580      	push	{r7, lr}
 8003122:	b09c      	sub	sp, #112	; 0x70
 8003124:	af04      	add	r7, sp, #16
 8003126:	60f8      	str	r0, [r7, #12]
 8003128:	60b9      	str	r1, [r7, #8]
 800312a:	607a      	str	r2, [r7, #4]
	bool decimalbutton_show = false;
 800312c:	2300      	movs	r3, #0
 800312e:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
	bool minusbutton_show = false;
 8003132:	2300      	movs	r3, #0
 8003134:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54

	// Initial values
	float identity_number = ((CA[2] & 0b00011111) << 16) | (CA[1] << 8) | CA[0];
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	3302      	adds	r3, #2
 800313c:	781b      	ldrb	r3, [r3, #0]
 800313e:	041b      	lsls	r3, r3, #16
 8003140:	f403 12f8 	and.w	r2, r3, #2031616	; 0x1f0000
 8003144:	68bb      	ldr	r3, [r7, #8]
 8003146:	3301      	adds	r3, #1
 8003148:	781b      	ldrb	r3, [r3, #0]
 800314a:	021b      	lsls	r3, r3, #8
 800314c:	4313      	orrs	r3, r2
 800314e:	68ba      	ldr	r2, [r7, #8]
 8003150:	7812      	ldrb	r2, [r2, #0]
 8003152:	4313      	orrs	r3, r2
 8003154:	ee07 3a90 	vmov	s15, r3
 8003158:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800315c:	edc7 7a0f 	vstr	s15, [r7, #60]	; 0x3c
	float manufacturer_code = (CA[3] << 3) | (CA[2] >> 5);
 8003160:	68bb      	ldr	r3, [r7, #8]
 8003162:	3303      	adds	r3, #3
 8003164:	781b      	ldrb	r3, [r3, #0]
 8003166:	00db      	lsls	r3, r3, #3
 8003168:	68ba      	ldr	r2, [r7, #8]
 800316a:	3202      	adds	r2, #2
 800316c:	7812      	ldrb	r2, [r2, #0]
 800316e:	0952      	lsrs	r2, r2, #5
 8003170:	b2d2      	uxtb	r2, r2
 8003172:	4313      	orrs	r3, r2
 8003174:	ee07 3a90 	vmov	s15, r3
 8003178:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800317c:	edc7 7a17 	vstr	s15, [r7, #92]	; 0x5c
	float function_instance = CA[4] >> 3;
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	3304      	adds	r3, #4
 8003184:	781b      	ldrb	r3, [r3, #0]
 8003186:	08db      	lsrs	r3, r3, #3
 8003188:	b2db      	uxtb	r3, r3
 800318a:	ee07 3a90 	vmov	s15, r3
 800318e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003192:	edc7 7a0e 	vstr	s15, [r7, #56]	; 0x38
	float ECU_instance = CA[4] & 0b00000111;
 8003196:	68bb      	ldr	r3, [r7, #8]
 8003198:	3304      	adds	r3, #4
 800319a:	781b      	ldrb	r3, [r3, #0]
 800319c:	f003 0307 	and.w	r3, r3, #7
 80031a0:	ee07 3a90 	vmov	s15, r3
 80031a4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031a8:	edc7 7a0d 	vstr	s15, [r7, #52]	; 0x34
	float function = CA[5];
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	3305      	adds	r3, #5
 80031b0:	781b      	ldrb	r3, [r3, #0]
 80031b2:	ee07 3a90 	vmov	s15, r3
 80031b6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80031ba:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
	float vehicle_system = CA[6] >> 1;
 80031be:	68bb      	ldr	r3, [r7, #8]
 80031c0:	3306      	adds	r3, #6
 80031c2:	781b      	ldrb	r3, [r3, #0]
 80031c4:	085b      	lsrs	r3, r3, #1
 80031c6:	b2db      	uxtb	r3, r3
 80031c8:	ee07 3a90 	vmov	s15, r3
 80031cc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031d0:	edc7 7a0b 	vstr	s15, [r7, #44]	; 0x2c
	float arbitrary_address_capable = CA[7] >> 7;
 80031d4:	68bb      	ldr	r3, [r7, #8]
 80031d6:	3307      	adds	r3, #7
 80031d8:	781b      	ldrb	r3, [r3, #0]
 80031da:	09db      	lsrs	r3, r3, #7
 80031dc:	b2db      	uxtb	r3, r3
 80031de:	ee07 3a90 	vmov	s15, r3
 80031e2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80031e6:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
	float industry_group = (CA[7] >> 4) & 0b0111;
 80031ea:	68bb      	ldr	r3, [r7, #8]
 80031ec:	3307      	adds	r3, #7
 80031ee:	781b      	ldrb	r3, [r3, #0]
 80031f0:	091b      	lsrs	r3, r3, #4
 80031f2:	b2db      	uxtb	r3, r3
 80031f4:	f003 0307 	and.w	r3, r3, #7
 80031f8:	ee07 3a90 	vmov	s15, r3
 80031fc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003200:	edc7 7a0a 	vstr	s15, [r7, #40]	; 0x28
	float vehicle_system_instance = CA[7] & 0b00001111;
 8003204:	68bb      	ldr	r3, [r7, #8]
 8003206:	3307      	adds	r3, #7
 8003208:	781b      	ldrb	r3, [r3, #0]
 800320a:	f003 030f 	and.w	r3, r3, #15
 800320e:	ee07 3a90 	vmov	s15, r3
 8003212:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003216:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	float source_address = *SA_ACU;
 800321a:	687b      	ldr	r3, [r7, #4]
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	ee07 3a90 	vmov	s15, r3
 8003222:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003226:	edc7 7a08 	vstr	s15, [r7, #32]
	uint8_t CA_new[9];
	uint8_t status;
	for(uint8_t i = 0; i < 10; i++){
 800322a:	2300      	movs	r3, #0
 800322c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 8003230:	e149      	b.n	80034c6 <show_j1939_set_CA_names_numpad+0x3a6>
		if(i == 0){
 8003232:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003236:	2b00      	cmp	r3, #0
 8003238:	d11b      	bne.n	8003272 <show_j1939_set_CA_names_numpad+0x152>
			status = show_num_pad_frame(spi, decimalbutton_show, minusbutton_show, &identity_number, "Set identity 0 to 2097151");
 800323a:	f107 003c 	add.w	r0, r7, #60	; 0x3c
 800323e:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8003242:	f897 1055 	ldrb.w	r1, [r7, #85]	; 0x55
 8003246:	4b89      	ldr	r3, [pc, #548]	; (800346c <show_j1939_set_CA_names_numpad+0x34c>)
 8003248:	9300      	str	r3, [sp, #0]
 800324a:	4603      	mov	r3, r0
 800324c:	68f8      	ldr	r0, [r7, #12]
 800324e:	f000 fc21 	bl	8003a94 <show_num_pad_frame>
 8003252:	4603      	mov	r3, r0
 8003254:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if(identity_number > 2097151)
 8003258:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 800325c:	ed9f 7a84 	vldr	s14, [pc, #528]	; 8003470 <show_j1939_set_CA_names_numpad+0x350>
 8003260:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003264:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003268:	f340 80fa 	ble.w	8003460 <show_j1939_set_CA_names_numpad+0x340>
				identity_number = 2097151;
 800326c:	4b81      	ldr	r3, [pc, #516]	; (8003474 <show_j1939_set_CA_names_numpad+0x354>)
 800326e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003270:	e0f6      	b.n	8003460 <show_j1939_set_CA_names_numpad+0x340>
		}else if(i == 1){
 8003272:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003276:	2b01      	cmp	r3, #1
 8003278:	d102      	bne.n	8003280 <show_j1939_set_CA_names_numpad+0x160>
			manufacturer_code = 327; // Always
 800327a:	4b7f      	ldr	r3, [pc, #508]	; (8003478 <show_j1939_set_CA_names_numpad+0x358>)
 800327c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800327e:	e0ef      	b.n	8003460 <show_j1939_set_CA_names_numpad+0x340>
		}else if(i == 2){
 8003280:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003284:	2b02      	cmp	r3, #2
 8003286:	d11b      	bne.n	80032c0 <show_j1939_set_CA_names_numpad+0x1a0>
			status = show_num_pad_frame(spi, decimalbutton_show, minusbutton_show, &function_instance, "Set function instance 0 to 15");
 8003288:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800328c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8003290:	f897 1055 	ldrb.w	r1, [r7, #85]	; 0x55
 8003294:	4b79      	ldr	r3, [pc, #484]	; (800347c <show_j1939_set_CA_names_numpad+0x35c>)
 8003296:	9300      	str	r3, [sp, #0]
 8003298:	4603      	mov	r3, r0
 800329a:	68f8      	ldr	r0, [r7, #12]
 800329c:	f000 fbfa 	bl	8003a94 <show_num_pad_frame>
 80032a0:	4603      	mov	r3, r0
 80032a2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if(function_instance > 15)
 80032a6:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80032aa:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80032ae:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032b6:	f340 80d3 	ble.w	8003460 <show_j1939_set_CA_names_numpad+0x340>
				function_instance = 15;
 80032ba:	4b71      	ldr	r3, [pc, #452]	; (8003480 <show_j1939_set_CA_names_numpad+0x360>)
 80032bc:	63bb      	str	r3, [r7, #56]	; 0x38
 80032be:	e0cf      	b.n	8003460 <show_j1939_set_CA_names_numpad+0x340>
		}else if(i == 3){
 80032c0:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80032c4:	2b03      	cmp	r3, #3
 80032c6:	d11b      	bne.n	8003300 <show_j1939_set_CA_names_numpad+0x1e0>
			status = show_num_pad_frame(spi, decimalbutton_show, minusbutton_show, &ECU_instance, "Set ECU instance 0 to 7");
 80032c8:	f107 0034 	add.w	r0, r7, #52	; 0x34
 80032cc:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80032d0:	f897 1055 	ldrb.w	r1, [r7, #85]	; 0x55
 80032d4:	4b6b      	ldr	r3, [pc, #428]	; (8003484 <show_j1939_set_CA_names_numpad+0x364>)
 80032d6:	9300      	str	r3, [sp, #0]
 80032d8:	4603      	mov	r3, r0
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 fbda 	bl	8003a94 <show_num_pad_frame>
 80032e0:	4603      	mov	r3, r0
 80032e2:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if(ECU_instance > 7)
 80032e6:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 80032ea:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80032ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032f6:	f340 80b3 	ble.w	8003460 <show_j1939_set_CA_names_numpad+0x340>
				ECU_instance = 7;
 80032fa:	4b63      	ldr	r3, [pc, #396]	; (8003488 <show_j1939_set_CA_names_numpad+0x368>)
 80032fc:	637b      	str	r3, [r7, #52]	; 0x34
 80032fe:	e0af      	b.n	8003460 <show_j1939_set_CA_names_numpad+0x340>
		}else if(i == 4){
 8003300:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003304:	2b04      	cmp	r3, #4
 8003306:	d11b      	bne.n	8003340 <show_j1939_set_CA_names_numpad+0x220>
			status = show_num_pad_frame(spi, decimalbutton_show, minusbutton_show, &function, "Set function 0 to 255");
 8003308:	f107 0030 	add.w	r0, r7, #48	; 0x30
 800330c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8003310:	f897 1055 	ldrb.w	r1, [r7, #85]	; 0x55
 8003314:	4b5d      	ldr	r3, [pc, #372]	; (800348c <show_j1939_set_CA_names_numpad+0x36c>)
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	4603      	mov	r3, r0
 800331a:	68f8      	ldr	r0, [r7, #12]
 800331c:	f000 fbba 	bl	8003a94 <show_num_pad_frame>
 8003320:	4603      	mov	r3, r0
 8003322:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if(function > 255)
 8003326:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 800332a:	ed9f 7a59 	vldr	s14, [pc, #356]	; 8003490 <show_j1939_set_CA_names_numpad+0x370>
 800332e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003332:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003336:	f340 8093 	ble.w	8003460 <show_j1939_set_CA_names_numpad+0x340>
				function = 255;
 800333a:	4b56      	ldr	r3, [pc, #344]	; (8003494 <show_j1939_set_CA_names_numpad+0x374>)
 800333c:	633b      	str	r3, [r7, #48]	; 0x30
 800333e:	e08f      	b.n	8003460 <show_j1939_set_CA_names_numpad+0x340>
		}else if(i == 5){
 8003340:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003344:	2b05      	cmp	r3, #5
 8003346:	d11a      	bne.n	800337e <show_j1939_set_CA_names_numpad+0x25e>
			status = show_num_pad_frame(spi, decimalbutton_show, minusbutton_show, &vehicle_system, "Set vehicle system 0 to 127");
 8003348:	f107 002c 	add.w	r0, r7, #44	; 0x2c
 800334c:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 8003350:	f897 1055 	ldrb.w	r1, [r7, #85]	; 0x55
 8003354:	4b50      	ldr	r3, [pc, #320]	; (8003498 <show_j1939_set_CA_names_numpad+0x378>)
 8003356:	9300      	str	r3, [sp, #0]
 8003358:	4603      	mov	r3, r0
 800335a:	68f8      	ldr	r0, [r7, #12]
 800335c:	f000 fb9a 	bl	8003a94 <show_num_pad_frame>
 8003360:	4603      	mov	r3, r0
 8003362:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if(vehicle_system > 127)
 8003366:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 800336a:	ed9f 7a4c 	vldr	s14, [pc, #304]	; 800349c <show_j1939_set_CA_names_numpad+0x37c>
 800336e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003372:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003376:	dd73      	ble.n	8003460 <show_j1939_set_CA_names_numpad+0x340>
				vehicle_system = 127;
 8003378:	4b49      	ldr	r3, [pc, #292]	; (80034a0 <show_j1939_set_CA_names_numpad+0x380>)
 800337a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800337c:	e070      	b.n	8003460 <show_j1939_set_CA_names_numpad+0x340>
		}else if(i == 6){
 800337e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003382:	2b06      	cmp	r3, #6
 8003384:	d103      	bne.n	800338e <show_j1939_set_CA_names_numpad+0x26e>
			arbitrary_address_capable = 0; // Always
 8003386:	f04f 0300 	mov.w	r3, #0
 800338a:	65bb      	str	r3, [r7, #88]	; 0x58
 800338c:	e068      	b.n	8003460 <show_j1939_set_CA_names_numpad+0x340>
		}else if(i == 7){
 800338e:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 8003392:	2b07      	cmp	r3, #7
 8003394:	d11a      	bne.n	80033cc <show_j1939_set_CA_names_numpad+0x2ac>
			status = show_num_pad_frame(spi, decimalbutton_show, minusbutton_show, &industry_group, "Set industry group 0 to 7");
 8003396:	f107 0028 	add.w	r0, r7, #40	; 0x28
 800339a:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800339e:	f897 1055 	ldrb.w	r1, [r7, #85]	; 0x55
 80033a2:	4b40      	ldr	r3, [pc, #256]	; (80034a4 <show_j1939_set_CA_names_numpad+0x384>)
 80033a4:	9300      	str	r3, [sp, #0]
 80033a6:	4603      	mov	r3, r0
 80033a8:	68f8      	ldr	r0, [r7, #12]
 80033aa:	f000 fb73 	bl	8003a94 <show_num_pad_frame>
 80033ae:	4603      	mov	r3, r0
 80033b0:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if(industry_group > 7)
 80033b4:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 80033b8:	eeb1 7a0c 	vmov.f32	s14, #28	; 0x40e00000  7.0
 80033bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033c4:	dd4c      	ble.n	8003460 <show_j1939_set_CA_names_numpad+0x340>
				industry_group = 7;
 80033c6:	4b30      	ldr	r3, [pc, #192]	; (8003488 <show_j1939_set_CA_names_numpad+0x368>)
 80033c8:	62bb      	str	r3, [r7, #40]	; 0x28
 80033ca:	e049      	b.n	8003460 <show_j1939_set_CA_names_numpad+0x340>
		}else if(i == 8){
 80033cc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80033d0:	2b08      	cmp	r3, #8
 80033d2:	d11a      	bne.n	800340a <show_j1939_set_CA_names_numpad+0x2ea>
			status = show_num_pad_frame(spi, decimalbutton_show, minusbutton_show, &vehicle_system_instance, "Set vehicle system instance 0 to 15");
 80033d4:	f107 0024 	add.w	r0, r7, #36	; 0x24
 80033d8:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 80033dc:	f897 1055 	ldrb.w	r1, [r7, #85]	; 0x55
 80033e0:	4b31      	ldr	r3, [pc, #196]	; (80034a8 <show_j1939_set_CA_names_numpad+0x388>)
 80033e2:	9300      	str	r3, [sp, #0]
 80033e4:	4603      	mov	r3, r0
 80033e6:	68f8      	ldr	r0, [r7, #12]
 80033e8:	f000 fb54 	bl	8003a94 <show_num_pad_frame>
 80033ec:	4603      	mov	r3, r0
 80033ee:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if(vehicle_system > 15)
 80033f2:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 80033f6:	eeb2 7a0e 	vmov.f32	s14, #46	; 0x41700000  15.0
 80033fa:	eef4 7ac7 	vcmpe.f32	s15, s14
 80033fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003402:	dd2d      	ble.n	8003460 <show_j1939_set_CA_names_numpad+0x340>
				vehicle_system = 15;
 8003404:	4b1e      	ldr	r3, [pc, #120]	; (8003480 <show_j1939_set_CA_names_numpad+0x360>)
 8003406:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003408:	e02a      	b.n	8003460 <show_j1939_set_CA_names_numpad+0x340>
		}else if(i == 9){
 800340a:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 800340e:	2b09      	cmp	r3, #9
 8003410:	d126      	bne.n	8003460 <show_j1939_set_CA_names_numpad+0x340>
			status = show_num_pad_frame(spi, decimalbutton_show, minusbutton_show, &source_address, "Set ACU source address 128 to 143");
 8003412:	f107 0020 	add.w	r0, r7, #32
 8003416:	f897 2054 	ldrb.w	r2, [r7, #84]	; 0x54
 800341a:	f897 1055 	ldrb.w	r1, [r7, #85]	; 0x55
 800341e:	4b23      	ldr	r3, [pc, #140]	; (80034ac <show_j1939_set_CA_names_numpad+0x38c>)
 8003420:	9300      	str	r3, [sp, #0]
 8003422:	4603      	mov	r3, r0
 8003424:	68f8      	ldr	r0, [r7, #12]
 8003426:	f000 fb35 	bl	8003a94 <show_num_pad_frame>
 800342a:	4603      	mov	r3, r0
 800342c:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
			if(source_address < 128)
 8003430:	edd7 7a08 	vldr	s15, [r7, #32]
 8003434:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 80034b0 <show_j1939_set_CA_names_numpad+0x390>
 8003438:	eef4 7ac7 	vcmpe.f32	s15, s14
 800343c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003440:	d503      	bpl.n	800344a <show_j1939_set_CA_names_numpad+0x32a>
				source_address = 128;
 8003442:	f04f 4386 	mov.w	r3, #1124073472	; 0x43000000
 8003446:	623b      	str	r3, [r7, #32]
 8003448:	e00a      	b.n	8003460 <show_j1939_set_CA_names_numpad+0x340>
			else if(source_address > 143)
 800344a:	edd7 7a08 	vldr	s15, [r7, #32]
 800344e:	ed9f 7a19 	vldr	s14, [pc, #100]	; 80034b4 <show_j1939_set_CA_names_numpad+0x394>
 8003452:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003456:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800345a:	dd01      	ble.n	8003460 <show_j1939_set_CA_names_numpad+0x340>
				source_address = 143;
 800345c:	4b16      	ldr	r3, [pc, #88]	; (80034b8 <show_j1939_set_CA_names_numpad+0x398>)
 800345e:	623b      	str	r3, [r7, #32]
		}
		// If we abort
		if(status == false){
 8003460:	f897 3057 	ldrb.w	r3, [r7, #87]	; 0x57
 8003464:	2b00      	cmp	r3, #0
 8003466:	d129      	bne.n	80034bc <show_j1939_set_CA_names_numpad+0x39c>
			return false;
 8003468:	2300      	movs	r3, #0
 800346a:	e130      	b.n	80036ce <show_j1939_set_CA_names_numpad+0x5ae>
 800346c:	080117c8 	.word	0x080117c8
 8003470:	49fffff8 	.word	0x49fffff8
 8003474:	49fffff8 	.word	0x49fffff8
 8003478:	43a38000 	.word	0x43a38000
 800347c:	080117e4 	.word	0x080117e4
 8003480:	41700000 	.word	0x41700000
 8003484:	08011804 	.word	0x08011804
 8003488:	40e00000 	.word	0x40e00000
 800348c:	0801181c 	.word	0x0801181c
 8003490:	437f0000 	.word	0x437f0000
 8003494:	437f0000 	.word	0x437f0000
 8003498:	08011834 	.word	0x08011834
 800349c:	42fe0000 	.word	0x42fe0000
 80034a0:	42fe0000 	.word	0x42fe0000
 80034a4:	08011850 	.word	0x08011850
 80034a8:	0801186c 	.word	0x0801186c
 80034ac:	08011890 	.word	0x08011890
 80034b0:	43000000 	.word	0x43000000
 80034b4:	430f0000 	.word	0x430f0000
 80034b8:	430f0000 	.word	0x430f0000
	for(uint8_t i = 0; i < 10; i++){
 80034bc:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80034c0:	3301      	adds	r3, #1
 80034c2:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
 80034c6:	f897 3056 	ldrb.w	r3, [r7, #86]	; 0x56
 80034ca:	2b09      	cmp	r3, #9
 80034cc:	f67f aeb1 	bls.w	8003232 <show_j1939_set_CA_names_numpad+0x112>
		}
	}
	// Make sure that all are uint8_t for bitwise operations
	uint32_t identity_number_u = identity_number;
 80034d0:	edd7 7a0f 	vldr	s15, [r7, #60]	; 0x3c
 80034d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034d8:	ee17 3a90 	vmov	r3, s15
 80034dc:	653b      	str	r3, [r7, #80]	; 0x50
	uint16_t manufacturer_code_u = manufacturer_code;
 80034de:	edd7 7a17 	vldr	s15, [r7, #92]	; 0x5c
 80034e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034e6:	ee17 3a90 	vmov	r3, s15
 80034ea:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
	uint8_t function_instance_u = function_instance;
 80034ee:	edd7 7a0e 	vldr	s15, [r7, #56]	; 0x38
 80034f2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80034f6:	edc7 7a00 	vstr	s15, [r7]
 80034fa:	683b      	ldr	r3, [r7, #0]
 80034fc:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
	uint8_t ECU_instance_u = ECU_instance;
 8003500:	edd7 7a0d 	vldr	s15, [r7, #52]	; 0x34
 8003504:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003508:	edc7 7a00 	vstr	s15, [r7]
 800350c:	683b      	ldr	r3, [r7, #0]
 800350e:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
	uint8_t function_u = function;
 8003512:	edd7 7a0c 	vldr	s15, [r7, #48]	; 0x30
 8003516:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800351a:	edc7 7a00 	vstr	s15, [r7]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	f887 304b 	strb.w	r3, [r7, #75]	; 0x4b
	uint8_t vehicle_system_u = vehicle_system;
 8003524:	edd7 7a0b 	vldr	s15, [r7, #44]	; 0x2c
 8003528:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800352c:	edc7 7a00 	vstr	s15, [r7]
 8003530:	683b      	ldr	r3, [r7, #0]
 8003532:	f887 304a 	strb.w	r3, [r7, #74]	; 0x4a
	uint8_t arbitrary_address_capable_u = arbitrary_address_capable;
 8003536:	edd7 7a16 	vldr	s15, [r7, #88]	; 0x58
 800353a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800353e:	edc7 7a00 	vstr	s15, [r7]
 8003542:	683b      	ldr	r3, [r7, #0]
 8003544:	f887 3049 	strb.w	r3, [r7, #73]	; 0x49
	uint8_t industry_group_u = industry_group;
 8003548:	edd7 7a0a 	vldr	s15, [r7, #40]	; 0x28
 800354c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003550:	edc7 7a00 	vstr	s15, [r7]
 8003554:	683b      	ldr	r3, [r7, #0]
 8003556:	f887 3048 	strb.w	r3, [r7, #72]	; 0x48
	uint8_t vehicle_system_instance_u = vehicle_system_instance;
 800355a:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800355e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003562:	edc7 7a00 	vstr	s15, [r7]
 8003566:	683b      	ldr	r3, [r7, #0]
 8003568:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t SA_ACU_new = source_address;
 800356c:	edd7 7a08 	vldr	s15, [r7, #32]
 8003570:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003574:	edc7 7a00 	vstr	s15, [r7]
 8003578:	683b      	ldr	r3, [r7, #0]
 800357a:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46

	// Create the data package now
	CA_new[0] = identity_number_u;
 800357e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003580:	b2db      	uxtb	r3, r3
 8003582:	753b      	strb	r3, [r7, #20]
	CA_new[1] = identity_number_u >> 8;
 8003584:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003586:	0a1b      	lsrs	r3, r3, #8
 8003588:	b2db      	uxtb	r3, r3
 800358a:	757b      	strb	r3, [r7, #21]
	CA_new[2] = (manufacturer_code_u << 5) | (identity_number_u >> 16);
 800358c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8003590:	b2db      	uxtb	r3, r3
 8003592:	015b      	lsls	r3, r3, #5
 8003594:	b2da      	uxtb	r2, r3
 8003596:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8003598:	0c1b      	lsrs	r3, r3, #16
 800359a:	b2db      	uxtb	r3, r3
 800359c:	4313      	orrs	r3, r2
 800359e:	b2db      	uxtb	r3, r3
 80035a0:	75bb      	strb	r3, [r7, #22]
	CA_new[3] = manufacturer_code_u >>  3;
 80035a2:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80035a6:	08db      	lsrs	r3, r3, #3
 80035a8:	b29b      	uxth	r3, r3
 80035aa:	b2db      	uxtb	r3, r3
 80035ac:	75fb      	strb	r3, [r7, #23]
	CA_new[4] = (function_instance_u << 3) | ECU_instance_u;
 80035ae:	f897 304d 	ldrb.w	r3, [r7, #77]	; 0x4d
 80035b2:	00db      	lsls	r3, r3, #3
 80035b4:	b25a      	sxtb	r2, r3
 80035b6:	f997 304c 	ldrsb.w	r3, [r7, #76]	; 0x4c
 80035ba:	4313      	orrs	r3, r2
 80035bc:	b25b      	sxtb	r3, r3
 80035be:	b2db      	uxtb	r3, r3
 80035c0:	763b      	strb	r3, [r7, #24]
	CA_new[5] = function_u;
 80035c2:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80035c6:	767b      	strb	r3, [r7, #25]
	CA_new[6] = vehicle_system_u << 1;
 80035c8:	f897 304a 	ldrb.w	r3, [r7, #74]	; 0x4a
 80035cc:	005b      	lsls	r3, r3, #1
 80035ce:	b2db      	uxtb	r3, r3
 80035d0:	76bb      	strb	r3, [r7, #26]
	CA_new[7] = (arbitrary_address_capable_u << 7) | (industry_group_u << 4) | vehicle_system_instance_u;
 80035d2:	f897 3049 	ldrb.w	r3, [r7, #73]	; 0x49
 80035d6:	01db      	lsls	r3, r3, #7
 80035d8:	b25a      	sxtb	r2, r3
 80035da:	f897 3048 	ldrb.w	r3, [r7, #72]	; 0x48
 80035de:	011b      	lsls	r3, r3, #4
 80035e0:	b25b      	sxtb	r3, r3
 80035e2:	4313      	orrs	r3, r2
 80035e4:	b25a      	sxtb	r2, r3
 80035e6:	f997 3047 	ldrsb.w	r3, [r7, #71]	; 0x47
 80035ea:	4313      	orrs	r3, r2
 80035ec:	b25b      	sxtb	r3, r3
 80035ee:	b2db      	uxtb	r3, r3
 80035f0:	76fb      	strb	r3, [r7, #27]

	// Call the frame and show the user the future settings
	bool update_main_frame = true;
 80035f2:	2301      	movs	r3, #1
 80035f4:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
	show_j1939_main_frame(spi, update_main_frame);
 80035f8:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 80035fc:	4619      	mov	r1, r3
 80035fe:	68f8      	ldr	r0, [r7, #12]
 8003600:	f7ff fa64 	bl	8002acc <show_j1939_main_frame>
	show_j1939_CA_names_frame(spi, CA_new, SA_ACU_new);
 8003604:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 8003608:	f107 0314 	add.w	r3, r7, #20
 800360c:	4619      	mov	r1, r3
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f7ff fc2c 	bl	8002e6c <show_j1939_CA_names_frame>

	// Place two buttons - Abort or flash
	ILI9341_printImage(spi, 90, 160, 80, 40, abort_button, 80*40*2*sizeof(uint8_t)); // This will overwrite the "Change" button
 8003614:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003618:	9302      	str	r3, [sp, #8]
 800361a:	4b2f      	ldr	r3, [pc, #188]	; (80036d8 <show_j1939_set_CA_names_numpad+0x5b8>)
 800361c:	9301      	str	r3, [sp, #4]
 800361e:	2328      	movs	r3, #40	; 0x28
 8003620:	9300      	str	r3, [sp, #0]
 8003622:	2350      	movs	r3, #80	; 0x50
 8003624:	22a0      	movs	r2, #160	; 0xa0
 8003626:	215a      	movs	r1, #90	; 0x5a
 8003628:	68f8      	ldr	r0, [r7, #12]
 800362a:	f7fe fca8 	bl	8001f7e <ILI9341_printImage>
	ILI9341_printImage(spi, 200, 160, 80, 40, flash_button, 80*40*2*sizeof(uint8_t));
 800362e:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003632:	9302      	str	r3, [sp, #8]
 8003634:	4b29      	ldr	r3, [pc, #164]	; (80036dc <show_j1939_set_CA_names_numpad+0x5bc>)
 8003636:	9301      	str	r3, [sp, #4]
 8003638:	2328      	movs	r3, #40	; 0x28
 800363a:	9300      	str	r3, [sp, #0]
 800363c:	2350      	movs	r3, #80	; 0x50
 800363e:	22a0      	movs	r2, #160	; 0xa0
 8003640:	21c8      	movs	r1, #200	; 0xc8
 8003642:	68f8      	ldr	r0, [r7, #12]
 8003644:	f7fe fc9b 	bl	8001f7e <ILI9341_printImage>

	// Select buttons if we want to use these settings or not
	while (1) {
		TSC2046_GetTouchData(spi);
 8003648:	68f8      	ldr	r0, [r7, #12]
 800364a:	f7ff f8d5 	bl	80027f8 <TSC2046_GetTouchData>
		uint8_t isPressed = spi->myTsData.isPressed;
 800364e:	68fb      	ldr	r3, [r7, #12]
 8003650:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003654:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
		uint16_t X = spi->myTsData.X;
 8003658:	68fb      	ldr	r3, [r7, #12]
 800365a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800365c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		uint16_t Y = spi->myTsData.Y;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003664:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		if (isPressed == true) {
 8003668:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 800366c:	2b01      	cmp	r3, #1
 800366e:	d1eb      	bne.n	8003648 <show_j1939_set_CA_names_numpad+0x528>
			if(X >= 100 && X <= 160 && Y >= 170 && Y <= 197){
 8003670:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003674:	2b63      	cmp	r3, #99	; 0x63
 8003676:	d90d      	bls.n	8003694 <show_j1939_set_CA_names_numpad+0x574>
 8003678:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800367c:	2ba0      	cmp	r3, #160	; 0xa0
 800367e:	d809      	bhi.n	8003694 <show_j1939_set_CA_names_numpad+0x574>
 8003680:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8003684:	2ba9      	cmp	r3, #169	; 0xa9
 8003686:	d905      	bls.n	8003694 <show_j1939_set_CA_names_numpad+0x574>
 8003688:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 800368c:	2bc5      	cmp	r3, #197	; 0xc5
 800368e:	d801      	bhi.n	8003694 <show_j1939_set_CA_names_numpad+0x574>
				// Abort button - Just quit
				return false;
 8003690:	2300      	movs	r3, #0
 8003692:	e01c      	b.n	80036ce <show_j1939_set_CA_names_numpad+0x5ae>
			}else if (X >= 215 && X <= 277 && Y >= 170 && Y <= 197){
 8003694:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8003698:	2bd6      	cmp	r3, #214	; 0xd6
 800369a:	d9d5      	bls.n	8003648 <show_j1939_set_CA_names_numpad+0x528>
 800369c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80036a0:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 80036a4:	d2d0      	bcs.n	8003648 <show_j1939_set_CA_names_numpad+0x528>
 80036a6:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80036aa:	2ba9      	cmp	r3, #169	; 0xa9
 80036ac:	d9cc      	bls.n	8003648 <show_j1939_set_CA_names_numpad+0x528>
 80036ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80036b2:	2bc5      	cmp	r3, #197	; 0xc5
 80036b4:	d8c8      	bhi.n	8003648 <show_j1939_set_CA_names_numpad+0x528>
				// Flash button - Move over new data and flash
				memcpy(CA, CA_new, 8);
 80036b6:	f107 0314 	add.w	r3, r7, #20
 80036ba:	2208      	movs	r2, #8
 80036bc:	4619      	mov	r1, r3
 80036be:	68b8      	ldr	r0, [r7, #8]
 80036c0:	f00c f91a 	bl	800f8f8 <memcpy>
				*SA_ACU = SA_ACU_new;
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	f897 2046 	ldrb.w	r2, [r7, #70]	; 0x46
 80036ca:	701a      	strb	r2, [r3, #0]
				return true;
 80036cc:	2301      	movs	r3, #1
			}
		}
	}
}
 80036ce:	4618      	mov	r0, r3
 80036d0:	3760      	adds	r7, #96	; 0x60
 80036d2:	46bd      	mov	sp, r7
 80036d4:	bd80      	pop	{r7, pc}
 80036d6:	bf00      	nop
 80036d8:	0801db6c 	.word	0x0801db6c
 80036dc:	0801c26c 	.word	0x0801c26c

080036e0 <show_j1939_set_configurations_numpad>:

bool show_j1939_set_configurations_numpad(ILI9341_SPI* spi, uint16_t EEPROM_values[], uint8_t DM15_Status){
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b08e      	sub	sp, #56	; 0x38
 80036e4:	af04      	add	r7, sp, #16
 80036e6:	60f8      	str	r0, [r7, #12]
 80036e8:	60b9      	str	r1, [r7, #8]
 80036ea:	4613      	mov	r3, r2
 80036ec:	71fb      	strb	r3, [r7, #7]
	bool decimalbutton_show = false;
 80036ee:	2300      	movs	r3, #0
 80036f0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
	bool minusbutton_show = false;
 80036f4:	2300      	movs	r3, #0
 80036f6:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24

	// Initial values
	float Sensor_Stall_Neutral_Enable = EEPROM_values[0];
 80036fa:	68bb      	ldr	r3, [r7, #8]
 80036fc:	881b      	ldrh	r3, [r3, #0]
 80036fe:	ee07 3a90 	vmov	s15, r3
 8003702:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003706:	edc7 7a06 	vstr	s15, [r7, #24]
	float Sensor_Stall_Normal_Enable = EEPROM_values[1];
 800370a:	68bb      	ldr	r3, [r7, #8]
 800370c:	3302      	adds	r3, #2
 800370e:	881b      	ldrh	r3, [r3, #0]
 8003710:	ee07 3a90 	vmov	s15, r3
 8003714:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003718:	edc7 7a05 	vstr	s15, [r7, #20]
	uint8_t status;
	for(uint8_t i = 0; i < 2; i++){
 800371c:	2300      	movs	r3, #0
 800371e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8003722:	e049      	b.n	80037b8 <show_j1939_set_configurations_numpad+0xd8>
		if(i == 0){
 8003724:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003728:	2b00      	cmp	r3, #0
 800372a:	d11b      	bne.n	8003764 <show_j1939_set_configurations_numpad+0x84>
			status = show_num_pad_frame(spi, decimalbutton_show, minusbutton_show, &Sensor_Stall_Neutral_Enable, "Set Sensor Stall Neutral Enable 0 or 1");
 800372c:	f107 0018 	add.w	r0, r7, #24
 8003730:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003734:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003738:	4b61      	ldr	r3, [pc, #388]	; (80038c0 <show_j1939_set_configurations_numpad+0x1e0>)
 800373a:	9300      	str	r3, [sp, #0]
 800373c:	4603      	mov	r3, r0
 800373e:	68f8      	ldr	r0, [r7, #12]
 8003740:	f000 f9a8 	bl	8003a94 <show_num_pad_frame>
 8003744:	4603      	mov	r3, r0
 8003746:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if(Sensor_Stall_Neutral_Enable > 1)
 800374a:	edd7 7a06 	vldr	s15, [r7, #24]
 800374e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003752:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003756:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800375a:	dd22      	ble.n	80037a2 <show_j1939_set_configurations_numpad+0xc2>
				Sensor_Stall_Neutral_Enable = 1;
 800375c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8003760:	61bb      	str	r3, [r7, #24]
 8003762:	e01e      	b.n	80037a2 <show_j1939_set_configurations_numpad+0xc2>
		}else if(i == 1){
 8003764:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8003768:	2b01      	cmp	r3, #1
 800376a:	d11a      	bne.n	80037a2 <show_j1939_set_configurations_numpad+0xc2>
			status = show_num_pad_frame(spi, decimalbutton_show, minusbutton_show, &Sensor_Stall_Normal_Enable, "Set Sensor Stall Normal Enable 0 or 1");
 800376c:	f107 0014 	add.w	r0, r7, #20
 8003770:	f897 2024 	ldrb.w	r2, [r7, #36]	; 0x24
 8003774:	f897 1025 	ldrb.w	r1, [r7, #37]	; 0x25
 8003778:	4b52      	ldr	r3, [pc, #328]	; (80038c4 <show_j1939_set_configurations_numpad+0x1e4>)
 800377a:	9300      	str	r3, [sp, #0]
 800377c:	4603      	mov	r3, r0
 800377e:	68f8      	ldr	r0, [r7, #12]
 8003780:	f000 f988 	bl	8003a94 <show_num_pad_frame>
 8003784:	4603      	mov	r3, r0
 8003786:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			if(Sensor_Stall_Normal_Enable > 1)
 800378a:	edd7 7a05 	vldr	s15, [r7, #20]
 800378e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8003792:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003796:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800379a:	dd02      	ble.n	80037a2 <show_j1939_set_configurations_numpad+0xc2>
				Sensor_Stall_Normal_Enable = 1;
 800379c:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 80037a0:	617b      	str	r3, [r7, #20]
		}
		// If we abort
		if(status == false){
 80037a2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80037a6:	2b00      	cmp	r3, #0
 80037a8:	d101      	bne.n	80037ae <show_j1939_set_configurations_numpad+0xce>
			return false;
 80037aa:	2300      	movs	r3, #0
 80037ac:	e083      	b.n	80038b6 <show_j1939_set_configurations_numpad+0x1d6>
	for(uint8_t i = 0; i < 2; i++){
 80037ae:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80037b2:	3301      	adds	r3, #1
 80037b4:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80037b8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80037bc:	2b01      	cmp	r3, #1
 80037be:	d9b1      	bls.n	8003724 <show_j1939_set_configurations_numpad+0x44>
		}
	}

	// Call the frame and show the user the future settings
	bool update_main_frame = true;
 80037c0:	2301      	movs	r3, #1
 80037c2:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
	show_j1939_main_frame(spi, update_main_frame);
 80037c6:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80037ca:	4619      	mov	r1, r3
 80037cc:	68f8      	ldr	r0, [r7, #12]
 80037ce:	f7ff f97d 	bl	8002acc <show_j1939_main_frame>
	uint16_t EEPROM_values_new[2] = {Sensor_Stall_Normal_Enable, Sensor_Stall_Neutral_Enable};
 80037d2:	edd7 7a05 	vldr	s15, [r7, #20]
 80037d6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037da:	ee17 3a90 	vmov	r3, s15
 80037de:	b29b      	uxth	r3, r3
 80037e0:	823b      	strh	r3, [r7, #16]
 80037e2:	edd7 7a06 	vldr	s15, [r7, #24]
 80037e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80037ea:	ee17 3a90 	vmov	r3, s15
 80037ee:	b29b      	uxth	r3, r3
 80037f0:	827b      	strh	r3, [r7, #18]
	show_j1939_configurations_frame(spi, EEPROM_values_new, DM15_Status);
 80037f2:	79fa      	ldrb	r2, [r7, #7]
 80037f4:	f107 0310 	add.w	r3, r7, #16
 80037f8:	4619      	mov	r1, r3
 80037fa:	68f8      	ldr	r0, [r7, #12]
 80037fc:	f000 f868 	bl	80038d0 <show_j1939_configurations_frame>

	// Place two buttons - Abort or flash
	ILI9341_printImage(spi, 90, 160, 80, 40, abort_button, 80*40*2*sizeof(uint8_t)); // This will overwrite the "Change" button
 8003800:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003804:	9302      	str	r3, [sp, #8]
 8003806:	4b30      	ldr	r3, [pc, #192]	; (80038c8 <show_j1939_set_configurations_numpad+0x1e8>)
 8003808:	9301      	str	r3, [sp, #4]
 800380a:	2328      	movs	r3, #40	; 0x28
 800380c:	9300      	str	r3, [sp, #0]
 800380e:	2350      	movs	r3, #80	; 0x50
 8003810:	22a0      	movs	r2, #160	; 0xa0
 8003812:	215a      	movs	r1, #90	; 0x5a
 8003814:	68f8      	ldr	r0, [r7, #12]
 8003816:	f7fe fbb2 	bl	8001f7e <ILI9341_printImage>
	ILI9341_printImage(spi, 200, 160, 80, 40, flash_button, 80*40*2*sizeof(uint8_t));
 800381a:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 800381e:	9302      	str	r3, [sp, #8]
 8003820:	4b2a      	ldr	r3, [pc, #168]	; (80038cc <show_j1939_set_configurations_numpad+0x1ec>)
 8003822:	9301      	str	r3, [sp, #4]
 8003824:	2328      	movs	r3, #40	; 0x28
 8003826:	9300      	str	r3, [sp, #0]
 8003828:	2350      	movs	r3, #80	; 0x50
 800382a:	22a0      	movs	r2, #160	; 0xa0
 800382c:	21c8      	movs	r1, #200	; 0xc8
 800382e:	68f8      	ldr	r0, [r7, #12]
 8003830:	f7fe fba5 	bl	8001f7e <ILI9341_printImage>

	// Select buttons if we want to use these settings or not
	while (1) {
		TSC2046_GetTouchData(spi);
 8003834:	68f8      	ldr	r0, [r7, #12]
 8003836:	f7fe ffdf 	bl	80027f8 <TSC2046_GetTouchData>
		uint8_t isPressed = spi->myTsData.isPressed;
 800383a:	68fb      	ldr	r3, [r7, #12]
 800383c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003840:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
		uint16_t X = spi->myTsData.X;
 8003844:	68fb      	ldr	r3, [r7, #12]
 8003846:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003848:	843b      	strh	r3, [r7, #32]
		uint16_t Y = spi->myTsData.Y;
 800384a:	68fb      	ldr	r3, [r7, #12]
 800384c:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 800384e:	83fb      	strh	r3, [r7, #30]
		if (isPressed == true) {
 8003850:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8003854:	2b01      	cmp	r3, #1
 8003856:	d1ed      	bne.n	8003834 <show_j1939_set_configurations_numpad+0x154>
			if(X >= 100 && X <= 160 && Y >= 170 && Y <= 197){
 8003858:	8c3b      	ldrh	r3, [r7, #32]
 800385a:	2b63      	cmp	r3, #99	; 0x63
 800385c:	d90a      	bls.n	8003874 <show_j1939_set_configurations_numpad+0x194>
 800385e:	8c3b      	ldrh	r3, [r7, #32]
 8003860:	2ba0      	cmp	r3, #160	; 0xa0
 8003862:	d807      	bhi.n	8003874 <show_j1939_set_configurations_numpad+0x194>
 8003864:	8bfb      	ldrh	r3, [r7, #30]
 8003866:	2ba9      	cmp	r3, #169	; 0xa9
 8003868:	d904      	bls.n	8003874 <show_j1939_set_configurations_numpad+0x194>
 800386a:	8bfb      	ldrh	r3, [r7, #30]
 800386c:	2bc5      	cmp	r3, #197	; 0xc5
 800386e:	d801      	bhi.n	8003874 <show_j1939_set_configurations_numpad+0x194>
				// Abort button - Just quit
				return false;
 8003870:	2300      	movs	r3, #0
 8003872:	e020      	b.n	80038b6 <show_j1939_set_configurations_numpad+0x1d6>
			}else if (X >= 215 && X <= 277 && Y >= 170 && Y <= 197){
 8003874:	8c3b      	ldrh	r3, [r7, #32]
 8003876:	2bd6      	cmp	r3, #214	; 0xd6
 8003878:	d9dc      	bls.n	8003834 <show_j1939_set_configurations_numpad+0x154>
 800387a:	8c3b      	ldrh	r3, [r7, #32]
 800387c:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 8003880:	d2d8      	bcs.n	8003834 <show_j1939_set_configurations_numpad+0x154>
 8003882:	8bfb      	ldrh	r3, [r7, #30]
 8003884:	2ba9      	cmp	r3, #169	; 0xa9
 8003886:	d9d5      	bls.n	8003834 <show_j1939_set_configurations_numpad+0x154>
 8003888:	8bfb      	ldrh	r3, [r7, #30]
 800388a:	2bc5      	cmp	r3, #197	; 0xc5
 800388c:	d8d2      	bhi.n	8003834 <show_j1939_set_configurations_numpad+0x154>
				// Flash button - Move over new data and flash
				EEPROM_values[0] = Sensor_Stall_Normal_Enable;
 800388e:	edd7 7a05 	vldr	s15, [r7, #20]
 8003892:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003896:	ee17 3a90 	vmov	r3, s15
 800389a:	b29a      	uxth	r2, r3
 800389c:	68bb      	ldr	r3, [r7, #8]
 800389e:	801a      	strh	r2, [r3, #0]
				EEPROM_values[1] = Sensor_Stall_Neutral_Enable;
 80038a0:	edd7 7a06 	vldr	s15, [r7, #24]
 80038a4:	68bb      	ldr	r3, [r7, #8]
 80038a6:	3302      	adds	r3, #2
 80038a8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80038ac:	ee17 2a90 	vmov	r2, s15
 80038b0:	b292      	uxth	r2, r2
 80038b2:	801a      	strh	r2, [r3, #0]
				return true;
 80038b4:	2301      	movs	r3, #1
			}
		}
	}

}
 80038b6:	4618      	mov	r0, r3
 80038b8:	3728      	adds	r7, #40	; 0x28
 80038ba:	46bd      	mov	sp, r7
 80038bc:	bd80      	pop	{r7, pc}
 80038be:	bf00      	nop
 80038c0:	080118b4 	.word	0x080118b4
 80038c4:	080118dc 	.word	0x080118dc
 80038c8:	0801db6c 	.word	0x0801db6c
 80038cc:	0801c26c 	.word	0x0801c26c

080038d0 <show_j1939_configurations_frame>:

// Show the configuration frame
void show_j1939_configurations_frame(ILI9341_SPI* spi, uint16_t EEPROM_values[], uint8_t DM15_Status){
 80038d0:	b580      	push	{r7, lr}
 80038d2:	b094      	sub	sp, #80	; 0x50
 80038d4:	af04      	add	r7, sp, #16
 80038d6:	60f8      	str	r0, [r7, #12]
 80038d8:	60b9      	str	r1, [r7, #8]
 80038da:	4613      	mov	r3, r2
 80038dc:	71fb      	strb	r3, [r7, #7]
	// Clear the screen , but not the icons
	ILI9341_Fill_Rect(spi, 51, 6, 314, 234, COLOR_NAVY);
 80038de:	230f      	movs	r3, #15
 80038e0:	9301      	str	r3, [sp, #4]
 80038e2:	23ea      	movs	r3, #234	; 0xea
 80038e4:	9300      	str	r3, [sp, #0]
 80038e6:	f44f 739d 	mov.w	r3, #314	; 0x13a
 80038ea:	2206      	movs	r2, #6
 80038ec:	2133      	movs	r1, #51	; 0x33
 80038ee:	68f8      	ldr	r0, [r7, #12]
 80038f0:	f7fe f867 	bl	80019c2 <ILI9341_Fill_Rect>

	// Write the title
	ILI9341_drawFastHLine(spi, 50, 30, 265, COLOR_GREEN);
 80038f4:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 80038f8:	9300      	str	r3, [sp, #0]
 80038fa:	f240 1309 	movw	r3, #265	; 0x109
 80038fe:	221e      	movs	r2, #30
 8003900:	2132      	movs	r1, #50	; 0x32
 8003902:	68f8      	ldr	r0, [r7, #12]
 8003904:	f7fe f96b 	bl	8001bde <ILI9341_drawFastHLine>
	char text_message[40];
	sprintf(text_message, "Parameter configuration");
 8003908:	f107 0314 	add.w	r3, r7, #20
 800390c:	4956      	ldr	r1, [pc, #344]	; (8003a68 <show_j1939_configurations_frame+0x198>)
 800390e:	4618      	mov	r0, r3
 8003910:	f002 fbcc 	bl	80060ac <sprintf_>
	ILI9341_printText(spi, text_message, 55, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 8003914:	f107 0114 	add.w	r1, r7, #20
 8003918:	2301      	movs	r3, #1
 800391a:	9302      	str	r3, [sp, #8]
 800391c:	230f      	movs	r3, #15
 800391e:	9301      	str	r3, [sp, #4]
 8003920:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003924:	9300      	str	r3, [sp, #0]
 8003926:	230a      	movs	r3, #10
 8003928:	2237      	movs	r2, #55	; 0x37
 800392a:	68f8      	ldr	r0, [r7, #12]
 800392c:	f7fe fae6 	bl	8001efc <ILI9341_printText>

	// Show current settings
	for(uint8_t i = 0; i < 3; i++){
 8003930:	2300      	movs	r3, #0
 8003932:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003936:	e075      	b.n	8003a24 <show_j1939_configurations_frame+0x154>
		if(i == 0){
 8003938:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800393c:	2b00      	cmp	r3, #0
 800393e:	d109      	bne.n	8003954 <show_j1939_configurations_frame+0x84>
			sprintf(text_message, "Sensor Stall Neutral Enable:%d", EEPROM_values[0]);
 8003940:	68bb      	ldr	r3, [r7, #8]
 8003942:	881b      	ldrh	r3, [r3, #0]
 8003944:	461a      	mov	r2, r3
 8003946:	f107 0314 	add.w	r3, r7, #20
 800394a:	4948      	ldr	r1, [pc, #288]	; (8003a6c <show_j1939_configurations_frame+0x19c>)
 800394c:	4618      	mov	r0, r3
 800394e:	f002 fbad 	bl	80060ac <sprintf_>
 8003952:	e043      	b.n	80039dc <show_j1939_configurations_frame+0x10c>
		}else if(i == 1){
 8003954:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003958:	2b01      	cmp	r3, #1
 800395a:	d10a      	bne.n	8003972 <show_j1939_configurations_frame+0xa2>
			sprintf(text_message, "Sensor Stall Normal Enable:%d", EEPROM_values[1]);
 800395c:	68bb      	ldr	r3, [r7, #8]
 800395e:	3302      	adds	r3, #2
 8003960:	881b      	ldrh	r3, [r3, #0]
 8003962:	461a      	mov	r2, r3
 8003964:	f107 0314 	add.w	r3, r7, #20
 8003968:	4941      	ldr	r1, [pc, #260]	; (8003a70 <show_j1939_configurations_frame+0x1a0>)
 800396a:	4618      	mov	r0, r3
 800396c:	f002 fb9e 	bl	80060ac <sprintf_>
 8003970:	e034      	b.n	80039dc <show_j1939_configurations_frame+0x10c>
		}else if(i == 2){
 8003972:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003976:	2b02      	cmp	r3, #2
 8003978:	d130      	bne.n	80039dc <show_j1939_configurations_frame+0x10c>
			if(DM15_Status == 0){
 800397a:	79fb      	ldrb	r3, [r7, #7]
 800397c:	2b00      	cmp	r3, #0
 800397e:	d106      	bne.n	800398e <show_j1939_configurations_frame+0xbe>
				sprintf(text_message, "DM15 status message:Proceed");
 8003980:	f107 0314 	add.w	r3, r7, #20
 8003984:	493b      	ldr	r1, [pc, #236]	; (8003a74 <show_j1939_configurations_frame+0x1a4>)
 8003986:	4618      	mov	r0, r3
 8003988:	f002 fb90 	bl	80060ac <sprintf_>
 800398c:	e026      	b.n	80039dc <show_j1939_configurations_frame+0x10c>
			}else if(DM15_Status == 1){
 800398e:	79fb      	ldrb	r3, [r7, #7]
 8003990:	2b01      	cmp	r3, #1
 8003992:	d106      	bne.n	80039a2 <show_j1939_configurations_frame+0xd2>
				sprintf(text_message, "DM15 status message:Busy");
 8003994:	f107 0314 	add.w	r3, r7, #20
 8003998:	4937      	ldr	r1, [pc, #220]	; (8003a78 <show_j1939_configurations_frame+0x1a8>)
 800399a:	4618      	mov	r0, r3
 800399c:	f002 fb86 	bl	80060ac <sprintf_>
 80039a0:	e01c      	b.n	80039dc <show_j1939_configurations_frame+0x10c>
			}else if(DM15_Status == 4){
 80039a2:	79fb      	ldrb	r3, [r7, #7]
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d106      	bne.n	80039b6 <show_j1939_configurations_frame+0xe6>
				sprintf(text_message, "DM15 status message:Operation completed");
 80039a8:	f107 0314 	add.w	r3, r7, #20
 80039ac:	4933      	ldr	r1, [pc, #204]	; (8003a7c <show_j1939_configurations_frame+0x1ac>)
 80039ae:	4618      	mov	r0, r3
 80039b0:	f002 fb7c 	bl	80060ac <sprintf_>
 80039b4:	e012      	b.n	80039dc <show_j1939_configurations_frame+0x10c>
			}else if(DM15_Status == 5){
 80039b6:	79fb      	ldrb	r3, [r7, #7]
 80039b8:	2b05      	cmp	r3, #5
 80039ba:	d106      	bne.n	80039ca <show_j1939_configurations_frame+0xfa>
				sprintf(text_message, "DM15 status message:Operation failed");
 80039bc:	f107 0314 	add.w	r3, r7, #20
 80039c0:	492f      	ldr	r1, [pc, #188]	; (8003a80 <show_j1939_configurations_frame+0x1b0>)
 80039c2:	4618      	mov	r0, r3
 80039c4:	f002 fb72 	bl	80060ac <sprintf_>
 80039c8:	e008      	b.n	80039dc <show_j1939_configurations_frame+0x10c>
			}else if(DM15_Status == 8){
 80039ca:	79fb      	ldrb	r3, [r7, #7]
 80039cc:	2b08      	cmp	r3, #8
 80039ce:	d105      	bne.n	80039dc <show_j1939_configurations_frame+0x10c>
				sprintf(text_message, "Please, clear the error codes first");
 80039d0:	f107 0314 	add.w	r3, r7, #20
 80039d4:	492b      	ldr	r1, [pc, #172]	; (8003a84 <show_j1939_configurations_frame+0x1b4>)
 80039d6:	4618      	mov	r0, r3
 80039d8:	f002 fb68 	bl	80060ac <sprintf_>
			}
		}
		ILI9341_printText(spi, text_message, 55, 35 + 10*i, COLOR_YELLOW, COLOR_NAVY, 1);
 80039dc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80039e0:	b29b      	uxth	r3, r3
 80039e2:	461a      	mov	r2, r3
 80039e4:	0092      	lsls	r2, r2, #2
 80039e6:	4413      	add	r3, r2
 80039e8:	005b      	lsls	r3, r3, #1
 80039ea:	b29b      	uxth	r3, r3
 80039ec:	3323      	adds	r3, #35	; 0x23
 80039ee:	b29b      	uxth	r3, r3
 80039f0:	b21a      	sxth	r2, r3
 80039f2:	f107 0114 	add.w	r1, r7, #20
 80039f6:	2301      	movs	r3, #1
 80039f8:	9302      	str	r3, [sp, #8]
 80039fa:	230f      	movs	r3, #15
 80039fc:	9301      	str	r3, [sp, #4]
 80039fe:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 8003a02:	9300      	str	r3, [sp, #0]
 8003a04:	4613      	mov	r3, r2
 8003a06:	2237      	movs	r2, #55	; 0x37
 8003a08:	68f8      	ldr	r0, [r7, #12]
 8003a0a:	f7fe fa77 	bl	8001efc <ILI9341_printText>
		sprintf(text_message, ""); // Clear
 8003a0e:	f107 0314 	add.w	r3, r7, #20
 8003a12:	491d      	ldr	r1, [pc, #116]	; (8003a88 <show_j1939_configurations_frame+0x1b8>)
 8003a14:	4618      	mov	r0, r3
 8003a16:	f002 fb49 	bl	80060ac <sprintf_>
	for(uint8_t i = 0; i < 3; i++){
 8003a1a:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a1e:	3301      	adds	r3, #1
 8003a20:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
 8003a24:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8003a28:	2b02      	cmp	r3, #2
 8003a2a:	d985      	bls.n	8003938 <show_j1939_configurations_frame+0x68>
	}

	// Place two buttons - Change and request
	ILI9341_printImage(spi, 90, 160, 80, 40, change_button, 80*40*2*sizeof(uint8_t));
 8003a2c:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003a30:	9302      	str	r3, [sp, #8]
 8003a32:	4b16      	ldr	r3, [pc, #88]	; (8003a8c <show_j1939_configurations_frame+0x1bc>)
 8003a34:	9301      	str	r3, [sp, #4]
 8003a36:	2328      	movs	r3, #40	; 0x28
 8003a38:	9300      	str	r3, [sp, #0]
 8003a3a:	2350      	movs	r3, #80	; 0x50
 8003a3c:	22a0      	movs	r2, #160	; 0xa0
 8003a3e:	215a      	movs	r1, #90	; 0x5a
 8003a40:	68f8      	ldr	r0, [r7, #12]
 8003a42:	f7fe fa9c 	bl	8001f7e <ILI9341_printImage>
	ILI9341_printImage(spi, 200, 160, 80, 40, request_button, 80*40*2*sizeof(uint8_t));
 8003a46:	f44f 53c8 	mov.w	r3, #6400	; 0x1900
 8003a4a:	9302      	str	r3, [sp, #8]
 8003a4c:	4b10      	ldr	r3, [pc, #64]	; (8003a90 <show_j1939_configurations_frame+0x1c0>)
 8003a4e:	9301      	str	r3, [sp, #4]
 8003a50:	2328      	movs	r3, #40	; 0x28
 8003a52:	9300      	str	r3, [sp, #0]
 8003a54:	2350      	movs	r3, #80	; 0x50
 8003a56:	22a0      	movs	r2, #160	; 0xa0
 8003a58:	21c8      	movs	r1, #200	; 0xc8
 8003a5a:	68f8      	ldr	r0, [r7, #12]
 8003a5c:	f7fe fa8f 	bl	8001f7e <ILI9341_printImage>

}
 8003a60:	bf00      	nop
 8003a62:	3740      	adds	r7, #64	; 0x40
 8003a64:	46bd      	mov	sp, r7
 8003a66:	bd80      	pop	{r7, pc}
 8003a68:	08011904 	.word	0x08011904
 8003a6c:	0801191c 	.word	0x0801191c
 8003a70:	0801193c 	.word	0x0801193c
 8003a74:	0801195c 	.word	0x0801195c
 8003a78:	08011978 	.word	0x08011978
 8003a7c:	08011994 	.word	0x08011994
 8003a80:	080119bc 	.word	0x080119bc
 8003a84:	080119e4 	.word	0x080119e4
 8003a88:	08011a08 	.word	0x08011a08
 8003a8c:	0801a96c 	.word	0x0801a96c
 8003a90:	0801f46c 	.word	0x0801f46c

08003a94 <show_num_pad_frame>:

// Create numpad
uint8_t show_num_pad_frame(ILI9341_SPI* spi, bool decimalbutton_show, bool minusbutton_show, float* number_value, char* title){
 8003a94:	b590      	push	{r4, r7, lr}
 8003a96:	b093      	sub	sp, #76	; 0x4c
 8003a98:	af04      	add	r7, sp, #16
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	607b      	str	r3, [r7, #4]
 8003a9e:	460b      	mov	r3, r1
 8003aa0:	72fb      	strb	r3, [r7, #11]
 8003aa2:	4613      	mov	r3, r2
 8003aa4:	72bb      	strb	r3, [r7, #10]
	// Set background
	ILI9341_Fill(spi, COLOR_BLACK);
 8003aa6:	2100      	movs	r1, #0
 8003aa8:	68f8      	ldr	r0, [r7, #12]
 8003aaa:	f7fd ff45 	bl	8001938 <ILI9341_Fill>

	// Set rotation
	ILI9341_setRotation(spi, 2);
 8003aae:	2102      	movs	r1, #2
 8003ab0:	68f8      	ldr	r0, [r7, #12]
 8003ab2:	f7fe fa9d 	bl	8001ff0 <ILI9341_setRotation>

	// Print frame - large square
	ILI9341_drawFastHLine(spi, 5, 235, 310, COLOR_GREEN);
 8003ab6:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003aba:	9300      	str	r3, [sp, #0]
 8003abc:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003ac0:	22eb      	movs	r2, #235	; 0xeb
 8003ac2:	2105      	movs	r1, #5
 8003ac4:	68f8      	ldr	r0, [r7, #12]
 8003ac6:	f7fe f88a 	bl	8001bde <ILI9341_drawFastHLine>
	ILI9341_drawFastHLine(spi, 5, 5, 310, COLOR_GREEN);
 8003aca:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ace:	9300      	str	r3, [sp, #0]
 8003ad0:	f44f 739b 	mov.w	r3, #310	; 0x136
 8003ad4:	2205      	movs	r2, #5
 8003ad6:	2105      	movs	r1, #5
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f7fe f880 	bl	8001bde <ILI9341_drawFastHLine>
	ILI9341_drawFastVLine(spi, 5, 5, 230, COLOR_GREEN);
 8003ade:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003ae2:	9300      	str	r3, [sp, #0]
 8003ae4:	23e6      	movs	r3, #230	; 0xe6
 8003ae6:	2205      	movs	r2, #5
 8003ae8:	2105      	movs	r1, #5
 8003aea:	68f8      	ldr	r0, [r7, #12]
 8003aec:	f7fe f89c 	bl	8001c28 <ILI9341_drawFastVLine>
	ILI9341_drawFastVLine(spi, 315, 5, 230, COLOR_GREEN);
 8003af0:	f44f 63fc 	mov.w	r3, #2016	; 0x7e0
 8003af4:	9300      	str	r3, [sp, #0]
 8003af6:	23e6      	movs	r3, #230	; 0xe6
 8003af8:	2205      	movs	r2, #5
 8003afa:	f240 113b 	movw	r1, #315	; 0x13b
 8003afe:	68f8      	ldr	r0, [r7, #12]
 8003b00:	f7fe f892 	bl	8001c28 <ILI9341_drawFastVLine>

	// Create gray, white square
	ILI9341_Fill_Rect(spi, 6, 6, 314, 55, COLOR_DGRAY);
 8003b04:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003b08:	9301      	str	r3, [sp, #4]
 8003b0a:	2337      	movs	r3, #55	; 0x37
 8003b0c:	9300      	str	r3, [sp, #0]
 8003b0e:	f44f 739d 	mov.w	r3, #314	; 0x13a
 8003b12:	2206      	movs	r2, #6
 8003b14:	2106      	movs	r1, #6
 8003b16:	68f8      	ldr	r0, [r7, #12]
 8003b18:	f7fd ff53 	bl	80019c2 <ILI9341_Fill_Rect>
	ILI9341_Fill_Rect(spi, 12, 24, 308, 50, COLOR_WHITE);
 8003b1c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b20:	9301      	str	r3, [sp, #4]
 8003b22:	2332      	movs	r3, #50	; 0x32
 8003b24:	9300      	str	r3, [sp, #0]
 8003b26:	f44f 739a 	mov.w	r3, #308	; 0x134
 8003b2a:	2218      	movs	r2, #24
 8003b2c:	210c      	movs	r1, #12
 8003b2e:	68f8      	ldr	r0, [r7, #12]
 8003b30:	f7fd ff47 	bl	80019c2 <ILI9341_Fill_Rect>

	// Set title
	ILI9341_printText(spi, title, 12, 12, COLOR_WHITE, COLOR_DGRAY, 1);
 8003b34:	2301      	movs	r3, #1
 8003b36:	9302      	str	r3, [sp, #8]
 8003b38:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003b3c:	9301      	str	r3, [sp, #4]
 8003b3e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b42:	9300      	str	r3, [sp, #0]
 8003b44:	230c      	movs	r3, #12
 8003b46:	220c      	movs	r2, #12
 8003b48:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8003b4a:	68f8      	ldr	r0, [r7, #12]
 8003b4c:	f7fe f9d6 	bl	8001efc <ILI9341_printText>

	// Create buttons
	uint16_t x = 0;
 8003b50:	2300      	movs	r3, #0
 8003b52:	86fb      	strh	r3, [r7, #54]	; 0x36
	char number[3];
	for(uint8_t i = 0; i < 5; i++){
 8003b54:	2300      	movs	r3, #0
 8003b56:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8003b5a:	e182      	b.n	8003e62 <show_num_pad_frame+0x3ce>
		x += 23;
 8003b5c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003b5e:	3317      	adds	r3, #23
 8003b60:	86fb      	strh	r3, [r7, #54]	; 0x36
		// Upper numbers
		ILI9341_Fill_Rect(spi, x, 70, x+40, 110, COLOR_DGRAY);
 8003b62:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8003b64:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003b66:	3328      	adds	r3, #40	; 0x28
 8003b68:	461a      	mov	r2, r3
 8003b6a:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003b6e:	9301      	str	r3, [sp, #4]
 8003b70:	236e      	movs	r3, #110	; 0x6e
 8003b72:	9300      	str	r3, [sp, #0]
 8003b74:	4613      	mov	r3, r2
 8003b76:	2246      	movs	r2, #70	; 0x46
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f7fd ff22 	bl	80019c2 <ILI9341_Fill_Rect>
		ILI9341_Fill_Rect(spi, x+5, 75, x+35, 105, COLOR_WHITE);
 8003b7e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003b80:	3305      	adds	r3, #5
 8003b82:	4619      	mov	r1, r3
 8003b84:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003b86:	3323      	adds	r3, #35	; 0x23
 8003b88:	461a      	mov	r2, r3
 8003b8a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003b8e:	9301      	str	r3, [sp, #4]
 8003b90:	2369      	movs	r3, #105	; 0x69
 8003b92:	9300      	str	r3, [sp, #0]
 8003b94:	4613      	mov	r3, r2
 8003b96:	224b      	movs	r2, #75	; 0x4b
 8003b98:	68f8      	ldr	r0, [r7, #12]
 8003b9a:	f7fd ff12 	bl	80019c2 <ILI9341_Fill_Rect>
		sprintf_(number, "%d", i);
 8003b9e:	f897 2035 	ldrb.w	r2, [r7, #53]	; 0x35
 8003ba2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003ba6:	4998      	ldr	r1, [pc, #608]	; (8003e08 <show_num_pad_frame+0x374>)
 8003ba8:	4618      	mov	r0, r3
 8003baa:	f002 fa7f 	bl	80060ac <sprintf_>
		ILI9341_printText(spi, number, x+16, 83, COLOR_BLACK, COLOR_WHITE, 2);
 8003bae:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003bb0:	3310      	adds	r3, #16
 8003bb2:	b29b      	uxth	r3, r3
 8003bb4:	b21a      	sxth	r2, r3
 8003bb6:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003bba:	2302      	movs	r3, #2
 8003bbc:	9302      	str	r3, [sp, #8]
 8003bbe:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bc2:	9301      	str	r3, [sp, #4]
 8003bc4:	2300      	movs	r3, #0
 8003bc6:	9300      	str	r3, [sp, #0]
 8003bc8:	2353      	movs	r3, #83	; 0x53
 8003bca:	68f8      	ldr	r0, [r7, #12]
 8003bcc:	f7fe f996 	bl	8001efc <ILI9341_printText>

		// Lower numbers
		ILI9341_Fill_Rect(spi, x, 125, x+40, 165, COLOR_DGRAY);
 8003bd0:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8003bd2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003bd4:	3328      	adds	r3, #40	; 0x28
 8003bd6:	461a      	mov	r2, r3
 8003bd8:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003bdc:	9301      	str	r3, [sp, #4]
 8003bde:	23a5      	movs	r3, #165	; 0xa5
 8003be0:	9300      	str	r3, [sp, #0]
 8003be2:	4613      	mov	r3, r2
 8003be4:	227d      	movs	r2, #125	; 0x7d
 8003be6:	68f8      	ldr	r0, [r7, #12]
 8003be8:	f7fd feeb 	bl	80019c2 <ILI9341_Fill_Rect>
		ILI9341_Fill_Rect(spi, x+5, 130, x+35, 160, COLOR_WHITE);
 8003bec:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003bee:	3305      	adds	r3, #5
 8003bf0:	4619      	mov	r1, r3
 8003bf2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003bf4:	3323      	adds	r3, #35	; 0x23
 8003bf6:	461a      	mov	r2, r3
 8003bf8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003bfc:	9301      	str	r3, [sp, #4]
 8003bfe:	23a0      	movs	r3, #160	; 0xa0
 8003c00:	9300      	str	r3, [sp, #0]
 8003c02:	4613      	mov	r3, r2
 8003c04:	2282      	movs	r2, #130	; 0x82
 8003c06:	68f8      	ldr	r0, [r7, #12]
 8003c08:	f7fd fedb 	bl	80019c2 <ILI9341_Fill_Rect>
		sprintf_(number, "%d", i+5);
 8003c0c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003c10:	1d5a      	adds	r2, r3, #5
 8003c12:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003c16:	497c      	ldr	r1, [pc, #496]	; (8003e08 <show_num_pad_frame+0x374>)
 8003c18:	4618      	mov	r0, r3
 8003c1a:	f002 fa47 	bl	80060ac <sprintf_>
		ILI9341_printText(spi, number, x+16, 138, COLOR_BLACK, COLOR_WHITE, 2);
 8003c1e:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c20:	3310      	adds	r3, #16
 8003c22:	b29b      	uxth	r3, r3
 8003c24:	b21a      	sxth	r2, r3
 8003c26:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003c2a:	2302      	movs	r3, #2
 8003c2c:	9302      	str	r3, [sp, #8]
 8003c2e:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c32:	9301      	str	r3, [sp, #4]
 8003c34:	2300      	movs	r3, #0
 8003c36:	9300      	str	r3, [sp, #0]
 8003c38:	238a      	movs	r3, #138	; 0x8a
 8003c3a:	68f8      	ldr	r0, [r7, #12]
 8003c3c:	f7fe f95e 	bl	8001efc <ILI9341_printText>

		// This hide or show the buttons
		if(i == 0 && minusbutton_show == true){
 8003c40:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003c44:	2b00      	cmp	r3, #0
 8003c46:	d121      	bne.n	8003c8c <show_num_pad_frame+0x1f8>
 8003c48:	7abb      	ldrb	r3, [r7, #10]
 8003c4a:	2b00      	cmp	r3, #0
 8003c4c:	d01e      	beq.n	8003c8c <show_num_pad_frame+0x1f8>
			ILI9341_Fill_Rect(spi, x, 180, x+40, 220, COLOR_DGRAY);
 8003c4e:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8003c50:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c52:	3328      	adds	r3, #40	; 0x28
 8003c54:	461a      	mov	r2, r3
 8003c56:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003c5a:	9301      	str	r3, [sp, #4]
 8003c5c:	23dc      	movs	r3, #220	; 0xdc
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	4613      	mov	r3, r2
 8003c62:	22b4      	movs	r2, #180	; 0xb4
 8003c64:	68f8      	ldr	r0, [r7, #12]
 8003c66:	f7fd feac 	bl	80019c2 <ILI9341_Fill_Rect>
			ILI9341_Fill_Rect(spi, x+5, 185, x+35, 215, COLOR_WHITE);
 8003c6a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c6c:	3305      	adds	r3, #5
 8003c6e:	4619      	mov	r1, r3
 8003c70:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c72:	3323      	adds	r3, #35	; 0x23
 8003c74:	461a      	mov	r2, r3
 8003c76:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003c7a:	9301      	str	r3, [sp, #4]
 8003c7c:	23d7      	movs	r3, #215	; 0xd7
 8003c7e:	9300      	str	r3, [sp, #0]
 8003c80:	4613      	mov	r3, r2
 8003c82:	22b9      	movs	r2, #185	; 0xb9
 8003c84:	68f8      	ldr	r0, [r7, #12]
 8003c86:	f7fd fe9c 	bl	80019c2 <ILI9341_Fill_Rect>
 8003c8a:	e024      	b.n	8003cd6 <show_num_pad_frame+0x242>
		}else if(i == 1 && decimalbutton_show == true){
 8003c8c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003c90:	2b01      	cmp	r3, #1
 8003c92:	d120      	bne.n	8003cd6 <show_num_pad_frame+0x242>
 8003c94:	7afb      	ldrb	r3, [r7, #11]
 8003c96:	2b00      	cmp	r3, #0
 8003c98:	d01d      	beq.n	8003cd6 <show_num_pad_frame+0x242>
			ILI9341_Fill_Rect(spi, x, 180, x+40, 220, COLOR_DGRAY);
 8003c9a:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8003c9c:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003c9e:	3328      	adds	r3, #40	; 0x28
 8003ca0:	461a      	mov	r2, r3
 8003ca2:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003ca6:	9301      	str	r3, [sp, #4]
 8003ca8:	23dc      	movs	r3, #220	; 0xdc
 8003caa:	9300      	str	r3, [sp, #0]
 8003cac:	4613      	mov	r3, r2
 8003cae:	22b4      	movs	r2, #180	; 0xb4
 8003cb0:	68f8      	ldr	r0, [r7, #12]
 8003cb2:	f7fd fe86 	bl	80019c2 <ILI9341_Fill_Rect>
			ILI9341_Fill_Rect(spi, x+5, 185, x+35, 215, COLOR_WHITE);
 8003cb6:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003cb8:	3305      	adds	r3, #5
 8003cba:	4619      	mov	r1, r3
 8003cbc:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003cbe:	3323      	adds	r3, #35	; 0x23
 8003cc0:	461a      	mov	r2, r3
 8003cc2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003cc6:	9301      	str	r3, [sp, #4]
 8003cc8:	23d7      	movs	r3, #215	; 0xd7
 8003cca:	9300      	str	r3, [sp, #0]
 8003ccc:	4613      	mov	r3, r2
 8003cce:	22b9      	movs	r2, #185	; 0xb9
 8003cd0:	68f8      	ldr	r0, [r7, #12]
 8003cd2:	f7fd fe76 	bl	80019c2 <ILI9341_Fill_Rect>
		}
		if(i > 1){
 8003cd6:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003cda:	2b01      	cmp	r3, #1
 8003cdc:	d91d      	bls.n	8003d1a <show_num_pad_frame+0x286>
			ILI9341_Fill_Rect(spi, x, 180, x+40, 220, COLOR_DGRAY);
 8003cde:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8003ce0:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003ce2:	3328      	adds	r3, #40	; 0x28
 8003ce4:	461a      	mov	r2, r3
 8003ce6:	f647 33ef 	movw	r3, #31727	; 0x7bef
 8003cea:	9301      	str	r3, [sp, #4]
 8003cec:	23dc      	movs	r3, #220	; 0xdc
 8003cee:	9300      	str	r3, [sp, #0]
 8003cf0:	4613      	mov	r3, r2
 8003cf2:	22b4      	movs	r2, #180	; 0xb4
 8003cf4:	68f8      	ldr	r0, [r7, #12]
 8003cf6:	f7fd fe64 	bl	80019c2 <ILI9341_Fill_Rect>
			ILI9341_Fill_Rect(spi, x+5, 185, x+35, 215, COLOR_WHITE);
 8003cfa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003cfc:	3305      	adds	r3, #5
 8003cfe:	4619      	mov	r1, r3
 8003d00:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d02:	3323      	adds	r3, #35	; 0x23
 8003d04:	461a      	mov	r2, r3
 8003d06:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d0a:	9301      	str	r3, [sp, #4]
 8003d0c:	23d7      	movs	r3, #215	; 0xd7
 8003d0e:	9300      	str	r3, [sp, #0]
 8003d10:	4613      	mov	r3, r2
 8003d12:	22b9      	movs	r2, #185	; 0xb9
 8003d14:	68f8      	ldr	r0, [r7, #12]
 8003d16:	f7fd fe54 	bl	80019c2 <ILI9341_Fill_Rect>
		}

		// Give the buttons a text
		if(i == 0 && minusbutton_show == true){
 8003d1a:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d11a      	bne.n	8003d58 <show_num_pad_frame+0x2c4>
 8003d22:	7abb      	ldrb	r3, [r7, #10]
 8003d24:	2b00      	cmp	r3, #0
 8003d26:	d017      	beq.n	8003d58 <show_num_pad_frame+0x2c4>
			sprintf_(number, "-");
 8003d28:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d2c:	4937      	ldr	r1, [pc, #220]	; (8003e0c <show_num_pad_frame+0x378>)
 8003d2e:	4618      	mov	r0, r3
 8003d30:	f002 f9bc 	bl	80060ac <sprintf_>
			ILI9341_printText(spi, number, x+15, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8003d34:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d36:	330f      	adds	r3, #15
 8003d38:	b29b      	uxth	r3, r3
 8003d3a:	b21a      	sxth	r2, r3
 8003d3c:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003d40:	2302      	movs	r3, #2
 8003d42:	9302      	str	r3, [sp, #8]
 8003d44:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d48:	9301      	str	r3, [sp, #4]
 8003d4a:	2300      	movs	r3, #0
 8003d4c:	9300      	str	r3, [sp, #0]
 8003d4e:	23c1      	movs	r3, #193	; 0xc1
 8003d50:	68f8      	ldr	r0, [r7, #12]
 8003d52:	f7fe f8d3 	bl	8001efc <ILI9341_printText>
 8003d56:	e07c      	b.n	8003e52 <show_num_pad_frame+0x3be>
		}else if(i == 1 && decimalbutton_show == true){
 8003d58:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003d5c:	2b01      	cmp	r3, #1
 8003d5e:	d11a      	bne.n	8003d96 <show_num_pad_frame+0x302>
 8003d60:	7afb      	ldrb	r3, [r7, #11]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d017      	beq.n	8003d96 <show_num_pad_frame+0x302>
			sprintf_(number, ".");
 8003d66:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003d6a:	4929      	ldr	r1, [pc, #164]	; (8003e10 <show_num_pad_frame+0x37c>)
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f002 f99d 	bl	80060ac <sprintf_>
			ILI9341_printText(spi, number, x+15, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8003d72:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003d74:	330f      	adds	r3, #15
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	b21a      	sxth	r2, r3
 8003d7a:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003d7e:	2302      	movs	r3, #2
 8003d80:	9302      	str	r3, [sp, #8]
 8003d82:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003d86:	9301      	str	r3, [sp, #4]
 8003d88:	2300      	movs	r3, #0
 8003d8a:	9300      	str	r3, [sp, #0]
 8003d8c:	23c1      	movs	r3, #193	; 0xc1
 8003d8e:	68f8      	ldr	r0, [r7, #12]
 8003d90:	f7fe f8b4 	bl	8001efc <ILI9341_printText>
 8003d94:	e05d      	b.n	8003e52 <show_num_pad_frame+0x3be>
		}else if(i == 2){
 8003d96:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003d9a:	2b02      	cmp	r3, #2
 8003d9c:	d117      	bne.n	8003dce <show_num_pad_frame+0x33a>
			sprintf_(number, "C");
 8003d9e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003da2:	491c      	ldr	r1, [pc, #112]	; (8003e14 <show_num_pad_frame+0x380>)
 8003da4:	4618      	mov	r0, r3
 8003da6:	f002 f981 	bl	80060ac <sprintf_>
			ILI9341_printText(spi, number, x+15, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8003daa:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003dac:	330f      	adds	r3, #15
 8003dae:	b29b      	uxth	r3, r3
 8003db0:	b21a      	sxth	r2, r3
 8003db2:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003db6:	2302      	movs	r3, #2
 8003db8:	9302      	str	r3, [sp, #8]
 8003dba:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003dbe:	9301      	str	r3, [sp, #4]
 8003dc0:	2300      	movs	r3, #0
 8003dc2:	9300      	str	r3, [sp, #0]
 8003dc4:	23c1      	movs	r3, #193	; 0xc1
 8003dc6:	68f8      	ldr	r0, [r7, #12]
 8003dc8:	f7fe f898 	bl	8001efc <ILI9341_printText>
 8003dcc:	e041      	b.n	8003e52 <show_num_pad_frame+0x3be>
		}else if(i == 3){
 8003dce:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003dd2:	2b03      	cmp	r3, #3
 8003dd4:	d122      	bne.n	8003e1c <show_num_pad_frame+0x388>
			sprintf_(number, "<-");
 8003dd6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003dda:	490f      	ldr	r1, [pc, #60]	; (8003e18 <show_num_pad_frame+0x384>)
 8003ddc:	4618      	mov	r0, r3
 8003dde:	f002 f965 	bl	80060ac <sprintf_>
			ILI9341_printText(spi, number, x+9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8003de2:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003de4:	3309      	adds	r3, #9
 8003de6:	b29b      	uxth	r3, r3
 8003de8:	b21a      	sxth	r2, r3
 8003dea:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003dee:	2302      	movs	r3, #2
 8003df0:	9302      	str	r3, [sp, #8]
 8003df2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003df6:	9301      	str	r3, [sp, #4]
 8003df8:	2300      	movs	r3, #0
 8003dfa:	9300      	str	r3, [sp, #0]
 8003dfc:	23c1      	movs	r3, #193	; 0xc1
 8003dfe:	68f8      	ldr	r0, [r7, #12]
 8003e00:	f7fe f87c 	bl	8001efc <ILI9341_printText>
 8003e04:	e025      	b.n	8003e52 <show_num_pad_frame+0x3be>
 8003e06:	bf00      	nop
 8003e08:	08011a0c 	.word	0x08011a0c
 8003e0c:	08011a10 	.word	0x08011a10
 8003e10:	08011a14 	.word	0x08011a14
 8003e14:	08011a18 	.word	0x08011a18
 8003e18:	08011a1c 	.word	0x08011a1c
		}else if(i == 4){
 8003e1c:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003e20:	2b04      	cmp	r3, #4
 8003e22:	d116      	bne.n	8003e52 <show_num_pad_frame+0x3be>
			sprintf_(number, "OK");
 8003e24:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8003e28:	49c0      	ldr	r1, [pc, #768]	; (800412c <show_num_pad_frame+0x698>)
 8003e2a:	4618      	mov	r0, r3
 8003e2c:	f002 f93e 	bl	80060ac <sprintf_>
			ILI9341_printText(spi, number, x+9, 193, COLOR_BLACK, COLOR_WHITE, 2);
 8003e30:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e32:	3309      	adds	r3, #9
 8003e34:	b29b      	uxth	r3, r3
 8003e36:	b21a      	sxth	r2, r3
 8003e38:	f107 0128 	add.w	r1, r7, #40	; 0x28
 8003e3c:	2302      	movs	r3, #2
 8003e3e:	9302      	str	r3, [sp, #8]
 8003e40:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003e44:	9301      	str	r3, [sp, #4]
 8003e46:	2300      	movs	r3, #0
 8003e48:	9300      	str	r3, [sp, #0]
 8003e4a:	23c1      	movs	r3, #193	; 0xc1
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f7fe f855 	bl	8001efc <ILI9341_printText>
		}
		x += 35; // Space between buttons
 8003e52:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8003e54:	3323      	adds	r3, #35	; 0x23
 8003e56:	86fb      	strh	r3, [r7, #54]	; 0x36
	for(uint8_t i = 0; i < 5; i++){
 8003e58:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003e5c:	3301      	adds	r3, #1
 8003e5e:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 8003e62:	f897 3035 	ldrb.w	r3, [r7, #53]	; 0x35
 8003e66:	2b04      	cmp	r3, #4
 8003e68:	f67f ae78 	bls.w	8003b5c <show_num_pad_frame+0xc8>
	}

	// Here is the logic
	char text[17];
	bool haveDot = false;
 8003e6c:	2300      	movs	r3, #0
 8003e6e:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
	uint8_t k = 0;
 8003e72:	2300      	movs	r3, #0
 8003e74:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33

	// Display the current value
	sprintf_(text, "%f", *number_value); // Float value to text
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	4618      	mov	r0, r3
 8003e7e:	f7fc fb1b 	bl	80004b8 <__aeabi_f2d>
 8003e82:	4603      	mov	r3, r0
 8003e84:	460c      	mov	r4, r1
 8003e86:	f107 0014 	add.w	r0, r7, #20
 8003e8a:	461a      	mov	r2, r3
 8003e8c:	4623      	mov	r3, r4
 8003e8e:	49a8      	ldr	r1, [pc, #672]	; (8004130 <show_num_pad_frame+0x69c>)
 8003e90:	f002 f90c 	bl	80060ac <sprintf_>
	ILI9341_printText(spi, text, 15, 25, COLOR_BLACK, COLOR_WHITE, 3);
 8003e94:	f107 0114 	add.w	r1, r7, #20
 8003e98:	2303      	movs	r3, #3
 8003e9a:	9302      	str	r3, [sp, #8]
 8003e9c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ea0:	9301      	str	r3, [sp, #4]
 8003ea2:	2300      	movs	r3, #0
 8003ea4:	9300      	str	r3, [sp, #0]
 8003ea6:	2319      	movs	r3, #25
 8003ea8:	220f      	movs	r2, #15
 8003eaa:	68f8      	ldr	r0, [r7, #12]
 8003eac:	f7fe f826 	bl	8001efc <ILI9341_printText>
	HAL_Delay(2000);
 8003eb0:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8003eb4:	f004 fecc 	bl	8008c50 <HAL_Delay>
	ILI9341_Fill_Rect(spi, 12, 24, 308, 50, COLOR_WHITE); // Clear
 8003eb8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8003ebc:	9301      	str	r3, [sp, #4]
 8003ebe:	2332      	movs	r3, #50	; 0x32
 8003ec0:	9300      	str	r3, [sp, #0]
 8003ec2:	f44f 739a 	mov.w	r3, #308	; 0x134
 8003ec6:	2218      	movs	r2, #24
 8003ec8:	210c      	movs	r1, #12
 8003eca:	68f8      	ldr	r0, [r7, #12]
 8003ecc:	f7fd fd79 	bl	80019c2 <ILI9341_Fill_Rect>
	memset(text, 0, sizeof(text));
 8003ed0:	f107 0314 	add.w	r3, r7, #20
 8003ed4:	2211      	movs	r2, #17
 8003ed6:	2100      	movs	r1, #0
 8003ed8:	4618      	mov	r0, r3
 8003eda:	f00b fd18 	bl	800f90e <memset>

	// Select numbers
	while (1) {
		TSC2046_GetTouchData(spi);
 8003ede:	68f8      	ldr	r0, [r7, #12]
 8003ee0:	f7fe fc8a 	bl	80027f8 <TSC2046_GetTouchData>
		uint8_t isPressed = spi->myTsData.isPressed;
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003eea:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
		uint16_t X = spi->myTsData.X;
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003ef2:	863b      	strh	r3, [r7, #48]	; 0x30
		uint16_t Y = spi->myTsData.Y;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8003ef8:	85fb      	strh	r3, [r7, #46]	; 0x2e
		if (isPressed == true) {
 8003efa:	f897 3032 	ldrb.w	r3, [r7, #50]	; 0x32
 8003efe:	2b01      	cmp	r3, #1
 8003f00:	f040 81ec 	bne.w	80042dc <show_num_pad_frame+0x848>
			if (X >= 23 && X <= 63 && Y >= 70 && Y <= 110) {
 8003f04:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003f06:	2b16      	cmp	r3, #22
 8003f08:	d91b      	bls.n	8003f42 <show_num_pad_frame+0x4ae>
 8003f0a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003f0c:	2b3f      	cmp	r3, #63	; 0x3f
 8003f0e:	d818      	bhi.n	8003f42 <show_num_pad_frame+0x4ae>
 8003f10:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f12:	2b45      	cmp	r3, #69	; 0x45
 8003f14:	d915      	bls.n	8003f42 <show_num_pad_frame+0x4ae>
 8003f16:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f18:	2b6e      	cmp	r3, #110	; 0x6e
 8003f1a:	d812      	bhi.n	8003f42 <show_num_pad_frame+0x4ae>
				// 0
				if (k >= 0 && k < 16) {
 8003f1c:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f20:	2b0f      	cmp	r3, #15
 8003f22:	f200 81cd 	bhi.w	80042c0 <show_num_pad_frame+0x82c>
					text[k] = '0';
 8003f26:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f2a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003f2e:	4413      	add	r3, r2
 8003f30:	2230      	movs	r2, #48	; 0x30
 8003f32:	f803 2c24 	strb.w	r2, [r3, #-36]
					k++;
 8003f36:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f3a:	3301      	adds	r3, #1
 8003f3c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if (k >= 0 && k < 16) {
 8003f40:	e1be      	b.n	80042c0 <show_num_pad_frame+0x82c>
				}
			} else if (X >= 81 && X <= 121 && Y >= 70 && Y <= 110) {
 8003f42:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003f44:	2b50      	cmp	r3, #80	; 0x50
 8003f46:	d91b      	bls.n	8003f80 <show_num_pad_frame+0x4ec>
 8003f48:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003f4a:	2b79      	cmp	r3, #121	; 0x79
 8003f4c:	d818      	bhi.n	8003f80 <show_num_pad_frame+0x4ec>
 8003f4e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f50:	2b45      	cmp	r3, #69	; 0x45
 8003f52:	d915      	bls.n	8003f80 <show_num_pad_frame+0x4ec>
 8003f54:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f56:	2b6e      	cmp	r3, #110	; 0x6e
 8003f58:	d812      	bhi.n	8003f80 <show_num_pad_frame+0x4ec>
				// 1
				if(k < 16){
 8003f5a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f5e:	2b0f      	cmp	r3, #15
 8003f60:	f200 81ae 	bhi.w	80042c0 <show_num_pad_frame+0x82c>
					text[k] = '1';
 8003f64:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f68:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003f6c:	4413      	add	r3, r2
 8003f6e:	2231      	movs	r2, #49	; 0x31
 8003f70:	f803 2c24 	strb.w	r2, [r3, #-36]
					k++;
 8003f74:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f78:	3301      	adds	r3, #1
 8003f7a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if(k < 16){
 8003f7e:	e19f      	b.n	80042c0 <show_num_pad_frame+0x82c>
				}
			} else if (X >= 139 && X <= 179 && Y >= 70 && Y <= 110) {
 8003f80:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003f82:	2b8a      	cmp	r3, #138	; 0x8a
 8003f84:	d91b      	bls.n	8003fbe <show_num_pad_frame+0x52a>
 8003f86:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003f88:	2bb3      	cmp	r3, #179	; 0xb3
 8003f8a:	d818      	bhi.n	8003fbe <show_num_pad_frame+0x52a>
 8003f8c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f8e:	2b45      	cmp	r3, #69	; 0x45
 8003f90:	d915      	bls.n	8003fbe <show_num_pad_frame+0x52a>
 8003f92:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003f94:	2b6e      	cmp	r3, #110	; 0x6e
 8003f96:	d812      	bhi.n	8003fbe <show_num_pad_frame+0x52a>
				// 2
				if(k < 16){
 8003f98:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003f9c:	2b0f      	cmp	r3, #15
 8003f9e:	f200 818f 	bhi.w	80042c0 <show_num_pad_frame+0x82c>
					text[k] = '2';
 8003fa2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003fa6:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003faa:	4413      	add	r3, r2
 8003fac:	2232      	movs	r2, #50	; 0x32
 8003fae:	f803 2c24 	strb.w	r2, [r3, #-36]
					k++;
 8003fb2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003fb6:	3301      	adds	r3, #1
 8003fb8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if(k < 16){
 8003fbc:	e180      	b.n	80042c0 <show_num_pad_frame+0x82c>
				}
			} else if (X >= 197 && X <= 237 && Y >= 70 && Y <= 110) {
 8003fbe:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003fc0:	2bc4      	cmp	r3, #196	; 0xc4
 8003fc2:	d91b      	bls.n	8003ffc <show_num_pad_frame+0x568>
 8003fc4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003fc6:	2bed      	cmp	r3, #237	; 0xed
 8003fc8:	d818      	bhi.n	8003ffc <show_num_pad_frame+0x568>
 8003fca:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003fcc:	2b45      	cmp	r3, #69	; 0x45
 8003fce:	d915      	bls.n	8003ffc <show_num_pad_frame+0x568>
 8003fd0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8003fd2:	2b6e      	cmp	r3, #110	; 0x6e
 8003fd4:	d812      	bhi.n	8003ffc <show_num_pad_frame+0x568>
				// 3
				if(k < 16){
 8003fd6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003fda:	2b0f      	cmp	r3, #15
 8003fdc:	f200 8170 	bhi.w	80042c0 <show_num_pad_frame+0x82c>
					text[k] = '3';
 8003fe0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003fe4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8003fe8:	4413      	add	r3, r2
 8003fea:	2233      	movs	r2, #51	; 0x33
 8003fec:	f803 2c24 	strb.w	r2, [r3, #-36]
					k++;
 8003ff0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8003ff4:	3301      	adds	r3, #1
 8003ff6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if(k < 16){
 8003ffa:	e161      	b.n	80042c0 <show_num_pad_frame+0x82c>
				}
			} else if (X >= 255 && X <= 295 && Y >= 70 && Y <= 110) {
 8003ffc:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8003ffe:	2bfe      	cmp	r3, #254	; 0xfe
 8004000:	d917      	bls.n	8004032 <show_num_pad_frame+0x59e>
 8004002:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004004:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 8004008:	d213      	bcs.n	8004032 <show_num_pad_frame+0x59e>
 800400a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800400c:	2b45      	cmp	r3, #69	; 0x45
 800400e:	d910      	bls.n	8004032 <show_num_pad_frame+0x59e>
 8004010:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004012:	2b6e      	cmp	r3, #110	; 0x6e
 8004014:	d80d      	bhi.n	8004032 <show_num_pad_frame+0x59e>
				// 4
				text[k] = '4';
 8004016:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800401a:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800401e:	4413      	add	r3, r2
 8004020:	2234      	movs	r2, #52	; 0x34
 8004022:	f803 2c24 	strb.w	r2, [r3, #-36]
				k++;
 8004026:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800402a:	3301      	adds	r3, #1
 800402c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
 8004030:	e146      	b.n	80042c0 <show_num_pad_frame+0x82c>
			} else if (X >= 23 && X <= 63 && Y >= 125 && Y <= 165) {
 8004032:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004034:	2b16      	cmp	r3, #22
 8004036:	d91b      	bls.n	8004070 <show_num_pad_frame+0x5dc>
 8004038:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800403a:	2b3f      	cmp	r3, #63	; 0x3f
 800403c:	d818      	bhi.n	8004070 <show_num_pad_frame+0x5dc>
 800403e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004040:	2b7c      	cmp	r3, #124	; 0x7c
 8004042:	d915      	bls.n	8004070 <show_num_pad_frame+0x5dc>
 8004044:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004046:	2ba5      	cmp	r3, #165	; 0xa5
 8004048:	d812      	bhi.n	8004070 <show_num_pad_frame+0x5dc>
				// 5
				if(k < 16){
 800404a:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800404e:	2b0f      	cmp	r3, #15
 8004050:	f200 8136 	bhi.w	80042c0 <show_num_pad_frame+0x82c>
					text[k] = '5';
 8004054:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004058:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800405c:	4413      	add	r3, r2
 800405e:	2235      	movs	r2, #53	; 0x35
 8004060:	f803 2c24 	strb.w	r2, [r3, #-36]
					k++;
 8004064:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004068:	3301      	adds	r3, #1
 800406a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if(k < 16){
 800406e:	e127      	b.n	80042c0 <show_num_pad_frame+0x82c>
				}
			} else if (X >= 81 && X <= 121 && Y >= 125 && Y <= 165) {
 8004070:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004072:	2b50      	cmp	r3, #80	; 0x50
 8004074:	d91b      	bls.n	80040ae <show_num_pad_frame+0x61a>
 8004076:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004078:	2b79      	cmp	r3, #121	; 0x79
 800407a:	d818      	bhi.n	80040ae <show_num_pad_frame+0x61a>
 800407c:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800407e:	2b7c      	cmp	r3, #124	; 0x7c
 8004080:	d915      	bls.n	80040ae <show_num_pad_frame+0x61a>
 8004082:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004084:	2ba5      	cmp	r3, #165	; 0xa5
 8004086:	d812      	bhi.n	80040ae <show_num_pad_frame+0x61a>
				// 6
				if(k < 16){
 8004088:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800408c:	2b0f      	cmp	r3, #15
 800408e:	f200 8117 	bhi.w	80042c0 <show_num_pad_frame+0x82c>
					text[k] = '6';
 8004092:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004096:	f107 0238 	add.w	r2, r7, #56	; 0x38
 800409a:	4413      	add	r3, r2
 800409c:	2236      	movs	r2, #54	; 0x36
 800409e:	f803 2c24 	strb.w	r2, [r3, #-36]
					k++;
 80040a2:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040a6:	3301      	adds	r3, #1
 80040a8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if(k < 16){
 80040ac:	e108      	b.n	80042c0 <show_num_pad_frame+0x82c>
				}
			} else if (X >= 139 && X <= 179 && Y >= 125 && Y <= 165) {
 80040ae:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80040b0:	2b8a      	cmp	r3, #138	; 0x8a
 80040b2:	d91b      	bls.n	80040ec <show_num_pad_frame+0x658>
 80040b4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80040b6:	2bb3      	cmp	r3, #179	; 0xb3
 80040b8:	d818      	bhi.n	80040ec <show_num_pad_frame+0x658>
 80040ba:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80040bc:	2b7c      	cmp	r3, #124	; 0x7c
 80040be:	d915      	bls.n	80040ec <show_num_pad_frame+0x658>
 80040c0:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80040c2:	2ba5      	cmp	r3, #165	; 0xa5
 80040c4:	d812      	bhi.n	80040ec <show_num_pad_frame+0x658>
				// 7
				if(k < 16){
 80040c6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040ca:	2b0f      	cmp	r3, #15
 80040cc:	f200 80f8 	bhi.w	80042c0 <show_num_pad_frame+0x82c>
					text[k] = '7';
 80040d0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040d4:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80040d8:	4413      	add	r3, r2
 80040da:	2237      	movs	r2, #55	; 0x37
 80040dc:	f803 2c24 	strb.w	r2, [r3, #-36]
					k++;
 80040e0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80040e4:	3301      	adds	r3, #1
 80040e6:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if(k < 16){
 80040ea:	e0e9      	b.n	80042c0 <show_num_pad_frame+0x82c>
				}
			} else if (X >= 197 && X <= 237 && Y >= 125 && Y <= 165) {
 80040ec:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80040ee:	2bc4      	cmp	r3, #196	; 0xc4
 80040f0:	d920      	bls.n	8004134 <show_num_pad_frame+0x6a0>
 80040f2:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80040f4:	2bed      	cmp	r3, #237	; 0xed
 80040f6:	d81d      	bhi.n	8004134 <show_num_pad_frame+0x6a0>
 80040f8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80040fa:	2b7c      	cmp	r3, #124	; 0x7c
 80040fc:	d91a      	bls.n	8004134 <show_num_pad_frame+0x6a0>
 80040fe:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004100:	2ba5      	cmp	r3, #165	; 0xa5
 8004102:	d817      	bhi.n	8004134 <show_num_pad_frame+0x6a0>
				// 8
				if(k < 16){
 8004104:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004108:	2b0f      	cmp	r3, #15
 800410a:	f200 80d9 	bhi.w	80042c0 <show_num_pad_frame+0x82c>
					text[k] = '8';
 800410e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004112:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004116:	4413      	add	r3, r2
 8004118:	2238      	movs	r2, #56	; 0x38
 800411a:	f803 2c24 	strb.w	r2, [r3, #-36]
					k++;
 800411e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004122:	3301      	adds	r3, #1
 8004124:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if(k < 16){
 8004128:	e0ca      	b.n	80042c0 <show_num_pad_frame+0x82c>
 800412a:	bf00      	nop
 800412c:	08011a20 	.word	0x08011a20
 8004130:	08011a24 	.word	0x08011a24
				}
			} else if (X >= 255 && X <= 295 && Y >= 125 && Y <= 165) {
 8004134:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004136:	2bfe      	cmp	r3, #254	; 0xfe
 8004138:	d91c      	bls.n	8004174 <show_num_pad_frame+0x6e0>
 800413a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800413c:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 8004140:	d218      	bcs.n	8004174 <show_num_pad_frame+0x6e0>
 8004142:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004144:	2b7c      	cmp	r3, #124	; 0x7c
 8004146:	d915      	bls.n	8004174 <show_num_pad_frame+0x6e0>
 8004148:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800414a:	2ba5      	cmp	r3, #165	; 0xa5
 800414c:	d812      	bhi.n	8004174 <show_num_pad_frame+0x6e0>
				// 9
				if(k < 16){
 800414e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004152:	2b0f      	cmp	r3, #15
 8004154:	f200 80b4 	bhi.w	80042c0 <show_num_pad_frame+0x82c>
					text[k] = '9';
 8004158:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800415c:	f107 0238 	add.w	r2, r7, #56	; 0x38
 8004160:	4413      	add	r3, r2
 8004162:	2239      	movs	r2, #57	; 0x39
 8004164:	f803 2c24 	strb.w	r2, [r3, #-36]
					k++;
 8004168:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800416c:	3301      	adds	r3, #1
 800416e:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if(k < 16){
 8004172:	e0a5      	b.n	80042c0 <show_num_pad_frame+0x82c>
				}
			} else if (X >= 23 && X <= 63 && Y >= 180 && Y <= 220) {
 8004174:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004176:	2b16      	cmp	r3, #22
 8004178:	d91f      	bls.n	80041ba <show_num_pad_frame+0x726>
 800417a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800417c:	2b3f      	cmp	r3, #63	; 0x3f
 800417e:	d81c      	bhi.n	80041ba <show_num_pad_frame+0x726>
 8004180:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004182:	2bb3      	cmp	r3, #179	; 0xb3
 8004184:	d919      	bls.n	80041ba <show_num_pad_frame+0x726>
 8004186:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004188:	2bdc      	cmp	r3, #220	; 0xdc
 800418a:	d816      	bhi.n	80041ba <show_num_pad_frame+0x726>
				// -
				if (minusbutton_show == true && k == 0) {
 800418c:	7abb      	ldrb	r3, [r7, #10]
 800418e:	2b00      	cmp	r3, #0
 8004190:	f000 8093 	beq.w	80042ba <show_num_pad_frame+0x826>
 8004194:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004198:	2b00      	cmp	r3, #0
 800419a:	f040 808e 	bne.w	80042ba <show_num_pad_frame+0x826>
					text[k] = '-';
 800419e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80041a2:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80041a6:	4413      	add	r3, r2
 80041a8:	222d      	movs	r2, #45	; 0x2d
 80041aa:	f803 2c24 	strb.w	r2, [r3, #-36]
					k++;
 80041ae:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80041b2:	3301      	adds	r3, #1
 80041b4:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				if (minusbutton_show == true && k == 0) {
 80041b8:	e07f      	b.n	80042ba <show_num_pad_frame+0x826>
				}
			} else if (X >= 81 && X <= 121 && Y >= 180 && Y <= 220) {
 80041ba:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80041bc:	2b50      	cmp	r3, #80	; 0x50
 80041be:	d92b      	bls.n	8004218 <show_num_pad_frame+0x784>
 80041c0:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80041c2:	2b79      	cmp	r3, #121	; 0x79
 80041c4:	d828      	bhi.n	8004218 <show_num_pad_frame+0x784>
 80041c6:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80041c8:	2bb3      	cmp	r3, #179	; 0xb3
 80041ca:	d925      	bls.n	8004218 <show_num_pad_frame+0x784>
 80041cc:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80041ce:	2bdc      	cmp	r3, #220	; 0xdc
 80041d0:	d822      	bhi.n	8004218 <show_num_pad_frame+0x784>
				// .
				if (decimalbutton_show == true && k > 0 && haveDot == false && k < 16) {
 80041d2:	7afb      	ldrb	r3, [r7, #11]
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d072      	beq.n	80042be <show_num_pad_frame+0x82a>
 80041d8:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80041dc:	2b00      	cmp	r3, #0
 80041de:	d06e      	beq.n	80042be <show_num_pad_frame+0x82a>
 80041e0:	f897 3034 	ldrb.w	r3, [r7, #52]	; 0x34
 80041e4:	f083 0301 	eor.w	r3, r3, #1
 80041e8:	b2db      	uxtb	r3, r3
 80041ea:	2b00      	cmp	r3, #0
 80041ec:	d067      	beq.n	80042be <show_num_pad_frame+0x82a>
 80041ee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80041f2:	2b0f      	cmp	r3, #15
 80041f4:	d863      	bhi.n	80042be <show_num_pad_frame+0x82a>
					text[k] = '.';
 80041f6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 80041fa:	f107 0238 	add.w	r2, r7, #56	; 0x38
 80041fe:	4413      	add	r3, r2
 8004200:	222e      	movs	r2, #46	; 0x2e
 8004202:	f803 2c24 	strb.w	r2, [r3, #-36]
					k++;
 8004206:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 800420a:	3301      	adds	r3, #1
 800420c:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					haveDot = true;
 8004210:	2301      	movs	r3, #1
 8004212:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				if (decimalbutton_show == true && k > 0 && haveDot == false && k < 16) {
 8004216:	e052      	b.n	80042be <show_num_pad_frame+0x82a>
				}
			} else if (X >= 139 && X <= 179 && Y >= 180 && Y <= 220) {
 8004218:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800421a:	2b8a      	cmp	r3, #138	; 0x8a
 800421c:	d922      	bls.n	8004264 <show_num_pad_frame+0x7d0>
 800421e:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004220:	2bb3      	cmp	r3, #179	; 0xb3
 8004222:	d81f      	bhi.n	8004264 <show_num_pad_frame+0x7d0>
 8004224:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004226:	2bb3      	cmp	r3, #179	; 0xb3
 8004228:	d91c      	bls.n	8004264 <show_num_pad_frame+0x7d0>
 800422a:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 800422c:	2bdc      	cmp	r3, #220	; 0xdc
 800422e:	d819      	bhi.n	8004264 <show_num_pad_frame+0x7d0>
				// C
				memset(text, 0, sizeof(text));
 8004230:	f107 0314 	add.w	r3, r7, #20
 8004234:	2211      	movs	r2, #17
 8004236:	2100      	movs	r1, #0
 8004238:	4618      	mov	r0, r3
 800423a:	f00b fb68 	bl	800f90e <memset>
				k = 0;
 800423e:	2300      	movs	r3, #0
 8004240:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
				haveDot = false;
 8004244:	2300      	movs	r3, #0
 8004246:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
				ILI9341_Fill_Rect(spi, 12, 24, 308, 50, COLOR_WHITE); // Clear
 800424a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800424e:	9301      	str	r3, [sp, #4]
 8004250:	2332      	movs	r3, #50	; 0x32
 8004252:	9300      	str	r3, [sp, #0]
 8004254:	f44f 739a 	mov.w	r3, #308	; 0x134
 8004258:	2218      	movs	r2, #24
 800425a:	210c      	movs	r1, #12
 800425c:	68f8      	ldr	r0, [r7, #12]
 800425e:	f7fd fbb0 	bl	80019c2 <ILI9341_Fill_Rect>
 8004262:	e02d      	b.n	80042c0 <show_num_pad_frame+0x82c>
			} else if (X >= 197 && X <= 237 && Y >= 180 && Y <= 220) {
 8004264:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004266:	2bc4      	cmp	r3, #196	; 0xc4
 8004268:	d90a      	bls.n	8004280 <show_num_pad_frame+0x7ec>
 800426a:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 800426c:	2bed      	cmp	r3, #237	; 0xed
 800426e:	d807      	bhi.n	8004280 <show_num_pad_frame+0x7ec>
 8004270:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004272:	2bb3      	cmp	r3, #179	; 0xb3
 8004274:	d904      	bls.n	8004280 <show_num_pad_frame+0x7ec>
 8004276:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004278:	2bdc      	cmp	r3, #220	; 0xdc
 800427a:	d801      	bhi.n	8004280 <show_num_pad_frame+0x7ec>
				// <-
				return 0;
 800427c:	2300      	movs	r3, #0
 800427e:	e031      	b.n	80042e4 <show_num_pad_frame+0x850>
			} else if (X >= 255 && X <= 295 && Y >= 180 && Y <= 220) {
 8004280:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004282:	2bfe      	cmp	r3, #254	; 0xfe
 8004284:	d91c      	bls.n	80042c0 <show_num_pad_frame+0x82c>
 8004286:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 8004288:	f5b3 7f94 	cmp.w	r3, #296	; 0x128
 800428c:	d218      	bcs.n	80042c0 <show_num_pad_frame+0x82c>
 800428e:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004290:	2bb3      	cmp	r3, #179	; 0xb3
 8004292:	d915      	bls.n	80042c0 <show_num_pad_frame+0x82c>
 8004294:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8004296:	2bdc      	cmp	r3, #220	; 0xdc
 8004298:	d812      	bhi.n	80042c0 <show_num_pad_frame+0x82c>
				// OK
				*number_value = (float)atof(text); // char array to float
 800429a:	f107 0314 	add.w	r3, r7, #20
 800429e:	4618      	mov	r0, r3
 80042a0:	f00b fafc 	bl	800f89c <atof>
 80042a4:	ec54 3b10 	vmov	r3, r4, d0
 80042a8:	4618      	mov	r0, r3
 80042aa:	4621      	mov	r1, r4
 80042ac:	f7fc fc3e 	bl	8000b2c <__aeabi_d2f>
 80042b0:	4602      	mov	r2, r0
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	601a      	str	r2, [r3, #0]
				return 1;
 80042b6:	2301      	movs	r3, #1
 80042b8:	e014      	b.n	80042e4 <show_num_pad_frame+0x850>
				if (minusbutton_show == true && k == 0) {
 80042ba:	bf00      	nop
 80042bc:	e000      	b.n	80042c0 <show_num_pad_frame+0x82c>
				if (decimalbutton_show == true && k > 0 && haveDot == false && k < 16) {
 80042be:	bf00      	nop
			}
			// Display the selected number text
			ILI9341_printText(spi, text, 15, 25, COLOR_BLACK, COLOR_WHITE, 3);
 80042c0:	f107 0114 	add.w	r1, r7, #20
 80042c4:	2303      	movs	r3, #3
 80042c6:	9302      	str	r3, [sp, #8]
 80042c8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80042cc:	9301      	str	r3, [sp, #4]
 80042ce:	2300      	movs	r3, #0
 80042d0:	9300      	str	r3, [sp, #0]
 80042d2:	2319      	movs	r3, #25
 80042d4:	220f      	movs	r2, #15
 80042d6:	68f8      	ldr	r0, [r7, #12]
 80042d8:	f7fd fe10 	bl	8001efc <ILI9341_printText>
		}
		osDelay(100); // Wait 100 ms so we don't double click
 80042dc:	2064      	movs	r0, #100	; 0x64
 80042de:	f008 feb3 	bl	800d048 <osDelay>
	while (1) {
 80042e2:	e5fc      	b.n	8003ede <show_num_pad_frame+0x44a>
	}
}
 80042e4:	4618      	mov	r0, r3
 80042e6:	373c      	adds	r7, #60	; 0x3c
 80042e8:	46bd      	mov	sp, r7
 80042ea:	bd90      	pop	{r4, r7, pc}

080042ec <show_question_save_settings_dialog>:

uint8_t show_question_save_settings_dialog(ILI9341_SPI *spi){
 80042ec:	b580      	push	{r7, lr}
 80042ee:	b088      	sub	sp, #32
 80042f0:	af04      	add	r7, sp, #16
 80042f2:	6078      	str	r0, [r7, #4]
	ILI9341_printImage(spi, 40, 80, 250, 83, question_save_settings_dialog, 500*83*sizeof(uint8_t));
 80042f4:	f24a 231c 	movw	r3, #41500	; 0xa21c
 80042f8:	9302      	str	r3, [sp, #8]
 80042fa:	4b43      	ldr	r3, [pc, #268]	; (8004408 <show_question_save_settings_dialog+0x11c>)
 80042fc:	9301      	str	r3, [sp, #4]
 80042fe:	2353      	movs	r3, #83	; 0x53
 8004300:	9300      	str	r3, [sp, #0]
 8004302:	23fa      	movs	r3, #250	; 0xfa
 8004304:	2250      	movs	r2, #80	; 0x50
 8004306:	2128      	movs	r1, #40	; 0x28
 8004308:	6878      	ldr	r0, [r7, #4]
 800430a:	f7fd fe38 	bl	8001f7e <ILI9341_printImage>
	// Select numbers
	while (1) {
		TSC2046_GetTouchData(spi);
 800430e:	6878      	ldr	r0, [r7, #4]
 8004310:	f7fe fa72 	bl	80027f8 <TSC2046_GetTouchData>
		uint8_t isPressed = spi->myTsData.isPressed;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800431a:	73fb      	strb	r3, [r7, #15]
		uint16_t X = spi->myTsData.X;
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004320:	81bb      	strh	r3, [r7, #12]
		uint16_t Y = spi->myTsData.Y;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8004326:	817b      	strh	r3, [r7, #10]
		if (isPressed == true) {
 8004328:	7bfb      	ldrb	r3, [r7, #15]
 800432a:	2b01      	cmp	r3, #1
 800432c:	d163      	bne.n	80043f6 <show_question_save_settings_dialog+0x10a>
			if (X >= 120 && X <= 155 && Y >= 140 && Y <= 155) {
 800432e:	89bb      	ldrh	r3, [r7, #12]
 8004330:	2b77      	cmp	r3, #119	; 0x77
 8004332:	d92e      	bls.n	8004392 <show_question_save_settings_dialog+0xa6>
 8004334:	89bb      	ldrh	r3, [r7, #12]
 8004336:	2b9b      	cmp	r3, #155	; 0x9b
 8004338:	d82b      	bhi.n	8004392 <show_question_save_settings_dialog+0xa6>
 800433a:	897b      	ldrh	r3, [r7, #10]
 800433c:	2b8b      	cmp	r3, #139	; 0x8b
 800433e:	d928      	bls.n	8004392 <show_question_save_settings_dialog+0xa6>
 8004340:	897b      	ldrh	r3, [r7, #10]
 8004342:	2b9b      	cmp	r3, #155	; 0x9b
 8004344:	d825      	bhi.n	8004392 <show_question_save_settings_dialog+0xa6>
				ILI9341_drawFastHLine(spi, 123, 136, 37, COLOR_MAGENTA);
 8004346:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800434a:	9300      	str	r3, [sp, #0]
 800434c:	2325      	movs	r3, #37	; 0x25
 800434e:	2288      	movs	r2, #136	; 0x88
 8004350:	217b      	movs	r1, #123	; 0x7b
 8004352:	6878      	ldr	r0, [r7, #4]
 8004354:	f7fd fc43 	bl	8001bde <ILI9341_drawFastHLine>
				ILI9341_drawFastHLine(spi, 123, 154, 37, COLOR_MAGENTA);
 8004358:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800435c:	9300      	str	r3, [sp, #0]
 800435e:	2325      	movs	r3, #37	; 0x25
 8004360:	229a      	movs	r2, #154	; 0x9a
 8004362:	217b      	movs	r1, #123	; 0x7b
 8004364:	6878      	ldr	r0, [r7, #4]
 8004366:	f7fd fc3a 	bl	8001bde <ILI9341_drawFastHLine>
				ILI9341_drawFastVLine(spi, 123, 137, 17, COLOR_MAGENTA);
 800436a:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800436e:	9300      	str	r3, [sp, #0]
 8004370:	2311      	movs	r3, #17
 8004372:	2289      	movs	r2, #137	; 0x89
 8004374:	217b      	movs	r1, #123	; 0x7b
 8004376:	6878      	ldr	r0, [r7, #4]
 8004378:	f7fd fc56 	bl	8001c28 <ILI9341_drawFastVLine>
				ILI9341_drawFastVLine(spi, 160, 137, 17, COLOR_MAGENTA);
 800437c:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8004380:	9300      	str	r3, [sp, #0]
 8004382:	2311      	movs	r3, #17
 8004384:	2289      	movs	r2, #137	; 0x89
 8004386:	21a0      	movs	r1, #160	; 0xa0
 8004388:	6878      	ldr	r0, [r7, #4]
 800438a:	f7fd fc4d 	bl	8001c28 <ILI9341_drawFastVLine>
				return 1; // Yes
 800438e:	2301      	movs	r3, #1
 8004390:	e035      	b.n	80043fe <show_question_save_settings_dialog+0x112>
			}else if(X >= 170 && X <= 205 && Y >= 140 && Y <= 155){
 8004392:	89bb      	ldrh	r3, [r7, #12]
 8004394:	2ba9      	cmp	r3, #169	; 0xa9
 8004396:	d92e      	bls.n	80043f6 <show_question_save_settings_dialog+0x10a>
 8004398:	89bb      	ldrh	r3, [r7, #12]
 800439a:	2bcd      	cmp	r3, #205	; 0xcd
 800439c:	d82b      	bhi.n	80043f6 <show_question_save_settings_dialog+0x10a>
 800439e:	897b      	ldrh	r3, [r7, #10]
 80043a0:	2b8b      	cmp	r3, #139	; 0x8b
 80043a2:	d928      	bls.n	80043f6 <show_question_save_settings_dialog+0x10a>
 80043a4:	897b      	ldrh	r3, [r7, #10]
 80043a6:	2b9b      	cmp	r3, #155	; 0x9b
 80043a8:	d825      	bhi.n	80043f6 <show_question_save_settings_dialog+0x10a>
				ILI9341_drawFastHLine(spi, 170, 136, 38, COLOR_MAGENTA);
 80043aa:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80043ae:	9300      	str	r3, [sp, #0]
 80043b0:	2326      	movs	r3, #38	; 0x26
 80043b2:	2288      	movs	r2, #136	; 0x88
 80043b4:	21aa      	movs	r1, #170	; 0xaa
 80043b6:	6878      	ldr	r0, [r7, #4]
 80043b8:	f7fd fc11 	bl	8001bde <ILI9341_drawFastHLine>
				ILI9341_drawFastHLine(spi, 170, 154, 38, COLOR_MAGENTA);
 80043bc:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80043c0:	9300      	str	r3, [sp, #0]
 80043c2:	2326      	movs	r3, #38	; 0x26
 80043c4:	229a      	movs	r2, #154	; 0x9a
 80043c6:	21aa      	movs	r1, #170	; 0xaa
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f7fd fc08 	bl	8001bde <ILI9341_drawFastHLine>
				ILI9341_drawFastVLine(spi, 170, 137, 17, COLOR_MAGENTA);
 80043ce:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80043d2:	9300      	str	r3, [sp, #0]
 80043d4:	2311      	movs	r3, #17
 80043d6:	2289      	movs	r2, #137	; 0x89
 80043d8:	21aa      	movs	r1, #170	; 0xaa
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7fd fc24 	bl	8001c28 <ILI9341_drawFastVLine>
				ILI9341_drawFastVLine(spi, 207, 137, 17, COLOR_MAGENTA);
 80043e0:	f64f 031f 	movw	r3, #63519	; 0xf81f
 80043e4:	9300      	str	r3, [sp, #0]
 80043e6:	2311      	movs	r3, #17
 80043e8:	2289      	movs	r2, #137	; 0x89
 80043ea:	21cf      	movs	r1, #207	; 0xcf
 80043ec:	6878      	ldr	r0, [r7, #4]
 80043ee:	f7fd fc1b 	bl	8001c28 <ILI9341_drawFastVLine>
				return 0; // NO
 80043f2:	2300      	movs	r3, #0
 80043f4:	e003      	b.n	80043fe <show_question_save_settings_dialog+0x112>
			}
		}
		osDelay(100); // Wait 100 ms so we don't double click
 80043f6:	2064      	movs	r0, #100	; 0x64
 80043f8:	f008 fe26 	bl	800d048 <osDelay>
	while (1) {
 80043fc:	e787      	b.n	800430e <show_question_save_settings_dialog+0x22>
	}
}
 80043fe:	4618      	mov	r0, r3
 8004400:	3710      	adds	r7, #16
 8004402:	46bd      	mov	sp, r7
 8004404:	bd80      	pop	{r7, pc}
 8004406:	bf00      	nop
 8004408:	0802266c 	.word	0x0802266c

0800440c <show_plot_frame>:

static void move(uint16_t i, uint16_t inputs0[], uint16_t inputs1[], uint16_t outputs[], uint16_t references[], uint16_t new_input0, uint16_t new_input1, uint16_t new_output, uint16_t new_reference);

void show_plot_frame(ILI9341_SPI *spi, float new_input0_float, float new_input1_float, float new_output_float, float new_reference_float, uint16_t new_input0_uint, uint16_t new_input1_uint, uint16_t new_output_uint, uint16_t new_reference_uint, bool only_move_array, bool clear_plot) {
 800440c:	b590      	push	{r4, r7, lr}
 800440e:	b095      	sub	sp, #84	; 0x54
 8004410:	af06      	add	r7, sp, #24
 8004412:	61f8      	str	r0, [r7, #28]
 8004414:	ed87 0a06 	vstr	s0, [r7, #24]
 8004418:	edc7 0a05 	vstr	s1, [r7, #20]
 800441c:	ed87 1a04 	vstr	s2, [r7, #16]
 8004420:	edc7 1a03 	vstr	s3, [r7, #12]
 8004424:	4608      	mov	r0, r1
 8004426:	4611      	mov	r1, r2
 8004428:	461a      	mov	r2, r3
 800442a:	4603      	mov	r3, r0
 800442c:	817b      	strh	r3, [r7, #10]
 800442e:	460b      	mov	r3, r1
 8004430:	813b      	strh	r3, [r7, #8]
 8004432:	4613      	mov	r3, r2
 8004434:	80fb      	strh	r3, [r7, #6]
	static uint16_t outputs[264];
	static uint16_t references[264];
	// Add more static arrays here

	// If we want to clear the plot for some reason
	if(clear_plot == true){
 8004436:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 800443a:	2b00      	cmp	r3, #0
 800443c:	d017      	beq.n	800446e <show_plot_frame+0x62>
		memset(inputs0, 0, sizeof(inputs0));
 800443e:	f44f 7204 	mov.w	r2, #528	; 0x210
 8004442:	2100      	movs	r1, #0
 8004444:	489e      	ldr	r0, [pc, #632]	; (80046c0 <show_plot_frame+0x2b4>)
 8004446:	f00b fa62 	bl	800f90e <memset>
		memset(inputs1, 0, sizeof(inputs1));
 800444a:	f44f 7204 	mov.w	r2, #528	; 0x210
 800444e:	2100      	movs	r1, #0
 8004450:	489c      	ldr	r0, [pc, #624]	; (80046c4 <show_plot_frame+0x2b8>)
 8004452:	f00b fa5c 	bl	800f90e <memset>
		memset(outputs, 0, sizeof(outputs));
 8004456:	f44f 7204 	mov.w	r2, #528	; 0x210
 800445a:	2100      	movs	r1, #0
 800445c:	489a      	ldr	r0, [pc, #616]	; (80046c8 <show_plot_frame+0x2bc>)
 800445e:	f00b fa56 	bl	800f90e <memset>
		memset(references, 0, sizeof(references));
 8004462:	f44f 7204 	mov.w	r2, #528	; 0x210
 8004466:	2100      	movs	r1, #0
 8004468:	4898      	ldr	r0, [pc, #608]	; (80046cc <show_plot_frame+0x2c0>)
 800446a:	f00b fa50 	bl	800f90e <memset>
		// Add here
	}

	if (only_move_array == false) {
 800446e:	f897 304c 	ldrb.w	r3, [r7, #76]	; 0x4c
 8004472:	f083 0301 	eor.w	r3, r3, #1
 8004476:	b2db      	uxtb	r3, r3
 8004478:	2b00      	cmp	r3, #0
 800447a:	f000 80fd 	beq.w	8004678 <show_plot_frame+0x26c>
		// Update the text
		char text[20];
		sprintf_(text, "Input0:%0.2f ", new_input0_float);
 800447e:	69b8      	ldr	r0, [r7, #24]
 8004480:	f7fc f81a 	bl	80004b8 <__aeabi_f2d>
 8004484:	4603      	mov	r3, r0
 8004486:	460c      	mov	r4, r1
 8004488:	f107 0020 	add.w	r0, r7, #32
 800448c:	461a      	mov	r2, r3
 800448e:	4623      	mov	r3, r4
 8004490:	498f      	ldr	r1, [pc, #572]	; (80046d0 <show_plot_frame+0x2c4>)
 8004492:	f001 fe0b 	bl	80060ac <sprintf_>
		ILI9341_printText(spi, text, 55, 10, COLOR_RED, COLOR_NAVY, 1);
 8004496:	f107 0120 	add.w	r1, r7, #32
 800449a:	2301      	movs	r3, #1
 800449c:	9302      	str	r3, [sp, #8]
 800449e:	230f      	movs	r3, #15
 80044a0:	9301      	str	r3, [sp, #4]
 80044a2:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80044a6:	9300      	str	r3, [sp, #0]
 80044a8:	230a      	movs	r3, #10
 80044aa:	2237      	movs	r2, #55	; 0x37
 80044ac:	69f8      	ldr	r0, [r7, #28]
 80044ae:	f7fd fd25 	bl	8001efc <ILI9341_printText>
		sprintf_(text, "Input1:%0.2f  ", new_input1_float);
 80044b2:	6978      	ldr	r0, [r7, #20]
 80044b4:	f7fc f800 	bl	80004b8 <__aeabi_f2d>
 80044b8:	4603      	mov	r3, r0
 80044ba:	460c      	mov	r4, r1
 80044bc:	f107 0020 	add.w	r0, r7, #32
 80044c0:	461a      	mov	r2, r3
 80044c2:	4623      	mov	r3, r4
 80044c4:	4983      	ldr	r1, [pc, #524]	; (80046d4 <show_plot_frame+0x2c8>)
 80044c6:	f001 fdf1 	bl	80060ac <sprintf_>
		ILI9341_printText(spi, text, 145, 10, COLOR_YELLOW, COLOR_NAVY, 1);
 80044ca:	f107 0120 	add.w	r1, r7, #32
 80044ce:	2301      	movs	r3, #1
 80044d0:	9302      	str	r3, [sp, #8]
 80044d2:	230f      	movs	r3, #15
 80044d4:	9301      	str	r3, [sp, #4]
 80044d6:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	230a      	movs	r3, #10
 80044de:	2291      	movs	r2, #145	; 0x91
 80044e0:	69f8      	ldr	r0, [r7, #28]
 80044e2:	f7fd fd0b 	bl	8001efc <ILI9341_printText>
		sprintf_(text, "Ref:%0.2f", new_reference_float);
 80044e6:	68f8      	ldr	r0, [r7, #12]
 80044e8:	f7fb ffe6 	bl	80004b8 <__aeabi_f2d>
 80044ec:	4603      	mov	r3, r0
 80044ee:	460c      	mov	r4, r1
 80044f0:	f107 0020 	add.w	r0, r7, #32
 80044f4:	461a      	mov	r2, r3
 80044f6:	4623      	mov	r3, r4
 80044f8:	4977      	ldr	r1, [pc, #476]	; (80046d8 <show_plot_frame+0x2cc>)
 80044fa:	f001 fdd7 	bl	80060ac <sprintf_>
		ILI9341_printText(spi, text, 240, 10, COLOR_MAGENTA, COLOR_NAVY, 1);
 80044fe:	f107 0120 	add.w	r1, r7, #32
 8004502:	2301      	movs	r3, #1
 8004504:	9302      	str	r3, [sp, #8]
 8004506:	230f      	movs	r3, #15
 8004508:	9301      	str	r3, [sp, #4]
 800450a:	f64f 031f 	movw	r3, #63519	; 0xf81f
 800450e:	9300      	str	r3, [sp, #0]
 8004510:	230a      	movs	r3, #10
 8004512:	22f0      	movs	r2, #240	; 0xf0
 8004514:	69f8      	ldr	r0, [r7, #28]
 8004516:	f7fd fcf1 	bl	8001efc <ILI9341_printText>
		sprintf_(text, "Output:%0.2f    ", new_output_float);
 800451a:	6938      	ldr	r0, [r7, #16]
 800451c:	f7fb ffcc 	bl	80004b8 <__aeabi_f2d>
 8004520:	4603      	mov	r3, r0
 8004522:	460c      	mov	r4, r1
 8004524:	f107 0020 	add.w	r0, r7, #32
 8004528:	461a      	mov	r2, r3
 800452a:	4623      	mov	r3, r4
 800452c:	496b      	ldr	r1, [pc, #428]	; (80046dc <show_plot_frame+0x2d0>)
 800452e:	f001 fdbd 	bl	80060ac <sprintf_>
		ILI9341_printText(spi, text, 55, 20, COLOR_CYAN, COLOR_NAVY, 1);
 8004532:	f107 0120 	add.w	r1, r7, #32
 8004536:	2301      	movs	r3, #1
 8004538:	9302      	str	r3, [sp, #8]
 800453a:	230f      	movs	r3, #15
 800453c:	9301      	str	r3, [sp, #4]
 800453e:	f240 73ff 	movw	r3, #2047	; 0x7ff
 8004542:	9300      	str	r3, [sp, #0]
 8004544:	2314      	movs	r3, #20
 8004546:	2237      	movs	r2, #55	; 0x37
 8004548:	69f8      	ldr	r0, [r7, #28]
 800454a:	f7fd fcd7 	bl	8001efc <ILI9341_printText>
		// Add more printText functions here

		// Change
		for (int16_t i = 51; i < 315; i++) {
 800454e:	2333      	movs	r3, #51	; 0x33
 8004550:	86fb      	strh	r3, [r7, #54]	; 0x36
 8004552:	e08a      	b.n	800466a <show_plot_frame+0x25e>
			// Clear
			ILI9341_DrawPixel(spi, i, -inputs0[i - 51] + 234, COLOR_NAVY);
 8004554:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8004556:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800455a:	3b33      	subs	r3, #51	; 0x33
 800455c:	4a58      	ldr	r2, [pc, #352]	; (80046c0 <show_plot_frame+0x2b4>)
 800455e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004562:	f1c3 03ea 	rsb	r3, r3, #234	; 0xea
 8004566:	b29a      	uxth	r2, r3
 8004568:	230f      	movs	r3, #15
 800456a:	69f8      	ldr	r0, [r7, #28]
 800456c:	f7fd f9bc 	bl	80018e8 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(spi, i, -inputs1[i - 51] + 234, COLOR_NAVY);
 8004570:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8004572:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8004576:	3b33      	subs	r3, #51	; 0x33
 8004578:	4a52      	ldr	r2, [pc, #328]	; (80046c4 <show_plot_frame+0x2b8>)
 800457a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800457e:	f1c3 03ea 	rsb	r3, r3, #234	; 0xea
 8004582:	b29a      	uxth	r2, r3
 8004584:	230f      	movs	r3, #15
 8004586:	69f8      	ldr	r0, [r7, #28]
 8004588:	f7fd f9ae 	bl	80018e8 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(spi, i, -outputs[i - 51] + 234, COLOR_NAVY);
 800458c:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 800458e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8004592:	3b33      	subs	r3, #51	; 0x33
 8004594:	4a4c      	ldr	r2, [pc, #304]	; (80046c8 <show_plot_frame+0x2bc>)
 8004596:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800459a:	f1c3 03ea 	rsb	r3, r3, #234	; 0xea
 800459e:	b29a      	uxth	r2, r3
 80045a0:	230f      	movs	r3, #15
 80045a2:	69f8      	ldr	r0, [r7, #28]
 80045a4:	f7fd f9a0 	bl	80018e8 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(spi, i, -references[i - 51] + 234, COLOR_NAVY);
 80045a8:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 80045aa:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80045ae:	3b33      	subs	r3, #51	; 0x33
 80045b0:	4a46      	ldr	r2, [pc, #280]	; (80046cc <show_plot_frame+0x2c0>)
 80045b2:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045b6:	f1c3 03ea 	rsb	r3, r3, #234	; 0xea
 80045ba:	b29a      	uxth	r2, r3
 80045bc:	230f      	movs	r3, #15
 80045be:	69f8      	ldr	r0, [r7, #28]
 80045c0:	f7fd f992 	bl	80018e8 <ILI9341_DrawPixel>
			// Add more clear pixels here

			// Move
			move(i, inputs0, inputs1, outputs, references, new_input0_uint, new_input1_uint, new_output_uint, new_reference_uint);
 80045c4:	8ef8      	ldrh	r0, [r7, #54]	; 0x36
 80045c6:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 80045ca:	9304      	str	r3, [sp, #16]
 80045cc:	88fb      	ldrh	r3, [r7, #6]
 80045ce:	9303      	str	r3, [sp, #12]
 80045d0:	893b      	ldrh	r3, [r7, #8]
 80045d2:	9302      	str	r3, [sp, #8]
 80045d4:	897b      	ldrh	r3, [r7, #10]
 80045d6:	9301      	str	r3, [sp, #4]
 80045d8:	4b3c      	ldr	r3, [pc, #240]	; (80046cc <show_plot_frame+0x2c0>)
 80045da:	9300      	str	r3, [sp, #0]
 80045dc:	4b3a      	ldr	r3, [pc, #232]	; (80046c8 <show_plot_frame+0x2bc>)
 80045de:	4a39      	ldr	r2, [pc, #228]	; (80046c4 <show_plot_frame+0x2b8>)
 80045e0:	4937      	ldr	r1, [pc, #220]	; (80046c0 <show_plot_frame+0x2b4>)
 80045e2:	f000 f87d 	bl	80046e0 <move>
			// Add more move arrays here

			// Fill
			ILI9341_DrawPixel(spi, i, -inputs0[i - 51] + 234, COLOR_RED);
 80045e6:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 80045e8:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 80045ec:	3b33      	subs	r3, #51	; 0x33
 80045ee:	4a34      	ldr	r2, [pc, #208]	; (80046c0 <show_plot_frame+0x2b4>)
 80045f0:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 80045f4:	f1c3 03ea 	rsb	r3, r3, #234	; 0xea
 80045f8:	b29a      	uxth	r2, r3
 80045fa:	f44f 4378 	mov.w	r3, #63488	; 0xf800
 80045fe:	69f8      	ldr	r0, [r7, #28]
 8004600:	f7fd f972 	bl	80018e8 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(spi, i, -inputs1[i - 51] + 234, COLOR_YELLOW);
 8004604:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8004606:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800460a:	3b33      	subs	r3, #51	; 0x33
 800460c:	4a2d      	ldr	r2, [pc, #180]	; (80046c4 <show_plot_frame+0x2b8>)
 800460e:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004612:	f1c3 03ea 	rsb	r3, r3, #234	; 0xea
 8004616:	b29a      	uxth	r2, r3
 8004618:	f64f 73e0 	movw	r3, #65504	; 0xffe0
 800461c:	69f8      	ldr	r0, [r7, #28]
 800461e:	f7fd f963 	bl	80018e8 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(spi, i, -outputs[i - 51] + 234, COLOR_CYAN);
 8004622:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8004624:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8004628:	3b33      	subs	r3, #51	; 0x33
 800462a:	4a27      	ldr	r2, [pc, #156]	; (80046c8 <show_plot_frame+0x2bc>)
 800462c:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8004630:	f1c3 03ea 	rsb	r3, r3, #234	; 0xea
 8004634:	b29a      	uxth	r2, r3
 8004636:	f240 73ff 	movw	r3, #2047	; 0x7ff
 800463a:	69f8      	ldr	r0, [r7, #28]
 800463c:	f7fd f954 	bl	80018e8 <ILI9341_DrawPixel>
			ILI9341_DrawPixel(spi, i, -references[i - 51] + 234, COLOR_MAGENTA);
 8004640:	8ef9      	ldrh	r1, [r7, #54]	; 0x36
 8004642:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8004646:	3b33      	subs	r3, #51	; 0x33
 8004648:	4a20      	ldr	r2, [pc, #128]	; (80046cc <show_plot_frame+0x2c0>)
 800464a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800464e:	f1c3 03ea 	rsb	r3, r3, #234	; 0xea
 8004652:	b29a      	uxth	r2, r3
 8004654:	f64f 031f 	movw	r3, #63519	; 0xf81f
 8004658:	69f8      	ldr	r0, [r7, #28]
 800465a:	f7fd f945 	bl	80018e8 <ILI9341_DrawPixel>
		for (int16_t i = 51; i < 315; i++) {
 800465e:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 8004662:	b29b      	uxth	r3, r3
 8004664:	3301      	adds	r3, #1
 8004666:	b29b      	uxth	r3, r3
 8004668:	86fb      	strh	r3, [r7, #54]	; 0x36
 800466a:	f9b7 3036 	ldrsh.w	r3, [r7, #54]	; 0x36
 800466e:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 8004672:	f77f af6f 	ble.w	8004554 <show_plot_frame+0x148>
		for (int16_t i = 51; i < 315; i++) {
			move(i, inputs0, inputs1, outputs, references, new_input0_uint, new_input1_uint, new_output_uint, new_reference_uint);
			// Add more move arrays here
		}
	}
}
 8004676:	e01e      	b.n	80046b6 <show_plot_frame+0x2aa>
		for (int16_t i = 51; i < 315; i++) {
 8004678:	2333      	movs	r3, #51	; 0x33
 800467a:	86bb      	strh	r3, [r7, #52]	; 0x34
 800467c:	e016      	b.n	80046ac <show_plot_frame+0x2a0>
			move(i, inputs0, inputs1, outputs, references, new_input0_uint, new_input1_uint, new_output_uint, new_reference_uint);
 800467e:	8eb8      	ldrh	r0, [r7, #52]	; 0x34
 8004680:	f8b7 3048 	ldrh.w	r3, [r7, #72]	; 0x48
 8004684:	9304      	str	r3, [sp, #16]
 8004686:	88fb      	ldrh	r3, [r7, #6]
 8004688:	9303      	str	r3, [sp, #12]
 800468a:	893b      	ldrh	r3, [r7, #8]
 800468c:	9302      	str	r3, [sp, #8]
 800468e:	897b      	ldrh	r3, [r7, #10]
 8004690:	9301      	str	r3, [sp, #4]
 8004692:	4b0e      	ldr	r3, [pc, #56]	; (80046cc <show_plot_frame+0x2c0>)
 8004694:	9300      	str	r3, [sp, #0]
 8004696:	4b0c      	ldr	r3, [pc, #48]	; (80046c8 <show_plot_frame+0x2bc>)
 8004698:	4a0a      	ldr	r2, [pc, #40]	; (80046c4 <show_plot_frame+0x2b8>)
 800469a:	4909      	ldr	r1, [pc, #36]	; (80046c0 <show_plot_frame+0x2b4>)
 800469c:	f000 f820 	bl	80046e0 <move>
		for (int16_t i = 51; i < 315; i++) {
 80046a0:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80046a4:	b29b      	uxth	r3, r3
 80046a6:	3301      	adds	r3, #1
 80046a8:	b29b      	uxth	r3, r3
 80046aa:	86bb      	strh	r3, [r7, #52]	; 0x34
 80046ac:	f9b7 3034 	ldrsh.w	r3, [r7, #52]	; 0x34
 80046b0:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80046b4:	dde3      	ble.n	800467e <show_plot_frame+0x272>
}
 80046b6:	bf00      	nop
 80046b8:	373c      	adds	r7, #60	; 0x3c
 80046ba:	46bd      	mov	sp, r7
 80046bc:	bd90      	pop	{r4, r7, pc}
 80046be:	bf00      	nop
 80046c0:	20000208 	.word	0x20000208
 80046c4:	20000418 	.word	0x20000418
 80046c8:	20000628 	.word	0x20000628
 80046cc:	20000838 	.word	0x20000838
 80046d0:	08011a28 	.word	0x08011a28
 80046d4:	08011a38 	.word	0x08011a38
 80046d8:	08011a48 	.word	0x08011a48
 80046dc:	08011a54 	.word	0x08011a54

080046e0 <move>:

static void move(uint16_t i, uint16_t inputs0[], uint16_t inputs1[], uint16_t outputs[], uint16_t references[], uint16_t new_input0, uint16_t new_input1, uint16_t new_output, uint16_t new_reference) {
 80046e0:	b480      	push	{r7}
 80046e2:	b085      	sub	sp, #20
 80046e4:	af00      	add	r7, sp, #0
 80046e6:	60b9      	str	r1, [r7, #8]
 80046e8:	607a      	str	r2, [r7, #4]
 80046ea:	603b      	str	r3, [r7, #0]
 80046ec:	4603      	mov	r3, r0
 80046ee:	81fb      	strh	r3, [r7, #14]
	if (i < 314) {
 80046f0:	89fb      	ldrh	r3, [r7, #14]
 80046f2:	f5b3 7f9d 	cmp.w	r3, #314	; 0x13a
 80046f6:	d240      	bcs.n	800477a <move+0x9a>
		// We can only move values that have a next element
		inputs0[i - 51] = inputs0[i - 50];
 80046f8:	89fb      	ldrh	r3, [r7, #14]
 80046fa:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80046fe:	3b32      	subs	r3, #50	; 0x32
 8004700:	005b      	lsls	r3, r3, #1
 8004702:	68ba      	ldr	r2, [r7, #8]
 8004704:	441a      	add	r2, r3
 8004706:	89fb      	ldrh	r3, [r7, #14]
 8004708:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800470c:	3b33      	subs	r3, #51	; 0x33
 800470e:	005b      	lsls	r3, r3, #1
 8004710:	68b9      	ldr	r1, [r7, #8]
 8004712:	440b      	add	r3, r1
 8004714:	8812      	ldrh	r2, [r2, #0]
 8004716:	801a      	strh	r2, [r3, #0]
		inputs1[i - 51] = inputs1[i - 50];
 8004718:	89fb      	ldrh	r3, [r7, #14]
 800471a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800471e:	3b32      	subs	r3, #50	; 0x32
 8004720:	005b      	lsls	r3, r3, #1
 8004722:	687a      	ldr	r2, [r7, #4]
 8004724:	441a      	add	r2, r3
 8004726:	89fb      	ldrh	r3, [r7, #14]
 8004728:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800472c:	3b33      	subs	r3, #51	; 0x33
 800472e:	005b      	lsls	r3, r3, #1
 8004730:	6879      	ldr	r1, [r7, #4]
 8004732:	440b      	add	r3, r1
 8004734:	8812      	ldrh	r2, [r2, #0]
 8004736:	801a      	strh	r2, [r3, #0]
		outputs[i - 51] = outputs[i - 50];
 8004738:	89fb      	ldrh	r3, [r7, #14]
 800473a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800473e:	3b32      	subs	r3, #50	; 0x32
 8004740:	005b      	lsls	r3, r3, #1
 8004742:	683a      	ldr	r2, [r7, #0]
 8004744:	441a      	add	r2, r3
 8004746:	89fb      	ldrh	r3, [r7, #14]
 8004748:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800474c:	3b33      	subs	r3, #51	; 0x33
 800474e:	005b      	lsls	r3, r3, #1
 8004750:	6839      	ldr	r1, [r7, #0]
 8004752:	440b      	add	r3, r1
 8004754:	8812      	ldrh	r2, [r2, #0]
 8004756:	801a      	strh	r2, [r3, #0]
		references[i - 51] = references[i - 50];
 8004758:	89fb      	ldrh	r3, [r7, #14]
 800475a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800475e:	3b32      	subs	r3, #50	; 0x32
 8004760:	005b      	lsls	r3, r3, #1
 8004762:	69ba      	ldr	r2, [r7, #24]
 8004764:	441a      	add	r2, r3
 8004766:	89fb      	ldrh	r3, [r7, #14]
 8004768:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800476c:	3b33      	subs	r3, #51	; 0x33
 800476e:	005b      	lsls	r3, r3, #1
 8004770:	69b9      	ldr	r1, [r7, #24]
 8004772:	440b      	add	r3, r1
 8004774:	8812      	ldrh	r2, [r2, #0]
 8004776:	801a      	strh	r2, [r3, #0]
			references[i - 51] = new_reference;
		} else {
			references[i - 51] = 203;
		}
	}
}
 8004778:	e057      	b.n	800482a <move+0x14a>
		if (new_input0 < 203) {
 800477a:	8bbb      	ldrh	r3, [r7, #28]
 800477c:	2bca      	cmp	r3, #202	; 0xca
 800477e:	d809      	bhi.n	8004794 <move+0xb4>
			inputs0[i - 51] = new_input0;
 8004780:	89fb      	ldrh	r3, [r7, #14]
 8004782:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 8004786:	3b33      	subs	r3, #51	; 0x33
 8004788:	005b      	lsls	r3, r3, #1
 800478a:	68ba      	ldr	r2, [r7, #8]
 800478c:	4413      	add	r3, r2
 800478e:	8bba      	ldrh	r2, [r7, #28]
 8004790:	801a      	strh	r2, [r3, #0]
 8004792:	e008      	b.n	80047a6 <move+0xc6>
			inputs0[i - 51] = 203;
 8004794:	89fb      	ldrh	r3, [r7, #14]
 8004796:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800479a:	3b33      	subs	r3, #51	; 0x33
 800479c:	005b      	lsls	r3, r3, #1
 800479e:	68ba      	ldr	r2, [r7, #8]
 80047a0:	4413      	add	r3, r2
 80047a2:	22cb      	movs	r2, #203	; 0xcb
 80047a4:	801a      	strh	r2, [r3, #0]
		if (new_input1 < 203) {
 80047a6:	8c3b      	ldrh	r3, [r7, #32]
 80047a8:	2bca      	cmp	r3, #202	; 0xca
 80047aa:	d809      	bhi.n	80047c0 <move+0xe0>
			inputs1[i - 51] = new_input1;
 80047ac:	89fb      	ldrh	r3, [r7, #14]
 80047ae:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80047b2:	3b33      	subs	r3, #51	; 0x33
 80047b4:	005b      	lsls	r3, r3, #1
 80047b6:	687a      	ldr	r2, [r7, #4]
 80047b8:	4413      	add	r3, r2
 80047ba:	8c3a      	ldrh	r2, [r7, #32]
 80047bc:	801a      	strh	r2, [r3, #0]
 80047be:	e008      	b.n	80047d2 <move+0xf2>
			inputs1[i - 51] = 203;
 80047c0:	89fb      	ldrh	r3, [r7, #14]
 80047c2:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80047c6:	3b33      	subs	r3, #51	; 0x33
 80047c8:	005b      	lsls	r3, r3, #1
 80047ca:	687a      	ldr	r2, [r7, #4]
 80047cc:	4413      	add	r3, r2
 80047ce:	22cb      	movs	r2, #203	; 0xcb
 80047d0:	801a      	strh	r2, [r3, #0]
		if (new_output < 203) {
 80047d2:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80047d4:	2bca      	cmp	r3, #202	; 0xca
 80047d6:	d809      	bhi.n	80047ec <move+0x10c>
			outputs[i - 51] = new_output;
 80047d8:	89fb      	ldrh	r3, [r7, #14]
 80047da:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80047de:	3b33      	subs	r3, #51	; 0x33
 80047e0:	005b      	lsls	r3, r3, #1
 80047e2:	683a      	ldr	r2, [r7, #0]
 80047e4:	4413      	add	r3, r2
 80047e6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80047e8:	801a      	strh	r2, [r3, #0]
 80047ea:	e008      	b.n	80047fe <move+0x11e>
			outputs[i - 51] = 203;
 80047ec:	89fb      	ldrh	r3, [r7, #14]
 80047ee:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 80047f2:	3b33      	subs	r3, #51	; 0x33
 80047f4:	005b      	lsls	r3, r3, #1
 80047f6:	683a      	ldr	r2, [r7, #0]
 80047f8:	4413      	add	r3, r2
 80047fa:	22cb      	movs	r2, #203	; 0xcb
 80047fc:	801a      	strh	r2, [r3, #0]
		if (new_reference < 203) {
 80047fe:	8d3b      	ldrh	r3, [r7, #40]	; 0x28
 8004800:	2bca      	cmp	r3, #202	; 0xca
 8004802:	d809      	bhi.n	8004818 <move+0x138>
			references[i - 51] = new_reference;
 8004804:	89fb      	ldrh	r3, [r7, #14]
 8004806:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800480a:	3b33      	subs	r3, #51	; 0x33
 800480c:	005b      	lsls	r3, r3, #1
 800480e:	69ba      	ldr	r2, [r7, #24]
 8004810:	4413      	add	r3, r2
 8004812:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 8004814:	801a      	strh	r2, [r3, #0]
}
 8004816:	e008      	b.n	800482a <move+0x14a>
			references[i - 51] = 203;
 8004818:	89fb      	ldrh	r3, [r7, #14]
 800481a:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800481e:	3b33      	subs	r3, #51	; 0x33
 8004820:	005b      	lsls	r3, r3, #1
 8004822:	69ba      	ldr	r2, [r7, #24]
 8004824:	4413      	add	r3, r2
 8004826:	22cb      	movs	r2, #203	; 0xcb
 8004828:	801a      	strh	r2, [r3, #0]
}
 800482a:	bf00      	nop
 800482c:	3714      	adds	r7, #20
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <_out_buffer>:
} out_fct_wrap_type;


// internal buffer output
static inline void _out_buffer(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004836:	b480      	push	{r7}
 8004838:	b085      	sub	sp, #20
 800483a:	af00      	add	r7, sp, #0
 800483c:	60b9      	str	r1, [r7, #8]
 800483e:	607a      	str	r2, [r7, #4]
 8004840:	603b      	str	r3, [r7, #0]
 8004842:	4603      	mov	r3, r0
 8004844:	73fb      	strb	r3, [r7, #15]
  if (idx < maxlen) {
 8004846:	687a      	ldr	r2, [r7, #4]
 8004848:	683b      	ldr	r3, [r7, #0]
 800484a:	429a      	cmp	r2, r3
 800484c:	d204      	bcs.n	8004858 <_out_buffer+0x22>
    ((char*)buffer)[idx] = character;
 800484e:	68ba      	ldr	r2, [r7, #8]
 8004850:	687b      	ldr	r3, [r7, #4]
 8004852:	4413      	add	r3, r2
 8004854:	7bfa      	ldrb	r2, [r7, #15]
 8004856:	701a      	strb	r2, [r3, #0]
  }
}
 8004858:	bf00      	nop
 800485a:	3714      	adds	r7, #20
 800485c:	46bd      	mov	sp, r7
 800485e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004862:	4770      	bx	lr

08004864 <_out_null>:


// internal null output
static inline void _out_null(char character, void* buffer, size_t idx, size_t maxlen)
{
 8004864:	b480      	push	{r7}
 8004866:	b085      	sub	sp, #20
 8004868:	af00      	add	r7, sp, #0
 800486a:	60b9      	str	r1, [r7, #8]
 800486c:	607a      	str	r2, [r7, #4]
 800486e:	603b      	str	r3, [r7, #0]
 8004870:	4603      	mov	r3, r0
 8004872:	73fb      	strb	r3, [r7, #15]
  (void)character; (void)buffer; (void)idx; (void)maxlen;
}
 8004874:	bf00      	nop
 8004876:	3714      	adds	r7, #20
 8004878:	46bd      	mov	sp, r7
 800487a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800487e:	4770      	bx	lr

08004880 <_strnlen_s>:


// internal secure strlen
// \return The length of the string (excluding the terminating 0) limited by 'maxsize'
static inline unsigned int _strnlen_s(const char* str, size_t maxsize)
{
 8004880:	b480      	push	{r7}
 8004882:	b085      	sub	sp, #20
 8004884:	af00      	add	r7, sp, #0
 8004886:	6078      	str	r0, [r7, #4]
 8004888:	6039      	str	r1, [r7, #0]
  const char* s;
  for (s = str; *s && maxsize--; ++s);
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	60fb      	str	r3, [r7, #12]
 800488e:	e002      	b.n	8004896 <_strnlen_s+0x16>
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	3301      	adds	r3, #1
 8004894:	60fb      	str	r3, [r7, #12]
 8004896:	68fb      	ldr	r3, [r7, #12]
 8004898:	781b      	ldrb	r3, [r3, #0]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d004      	beq.n	80048a8 <_strnlen_s+0x28>
 800489e:	683b      	ldr	r3, [r7, #0]
 80048a0:	1e5a      	subs	r2, r3, #1
 80048a2:	603a      	str	r2, [r7, #0]
 80048a4:	2b00      	cmp	r3, #0
 80048a6:	d1f3      	bne.n	8004890 <_strnlen_s+0x10>
  return (unsigned int)(s - str);
 80048a8:	68fa      	ldr	r2, [r7, #12]
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	1ad3      	subs	r3, r2, r3
}
 80048ae:	4618      	mov	r0, r3
 80048b0:	3714      	adds	r7, #20
 80048b2:	46bd      	mov	sp, r7
 80048b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048b8:	4770      	bx	lr

080048ba <_is_digit>:


// internal test if char is a digit (0-9)
// \return true if char is a digit
static inline bool _is_digit(char ch)
{
 80048ba:	b480      	push	{r7}
 80048bc:	b083      	sub	sp, #12
 80048be:	af00      	add	r7, sp, #0
 80048c0:	4603      	mov	r3, r0
 80048c2:	71fb      	strb	r3, [r7, #7]
  return (ch >= '0') && (ch <= '9');
 80048c4:	79fb      	ldrb	r3, [r7, #7]
 80048c6:	2b2f      	cmp	r3, #47	; 0x2f
 80048c8:	d904      	bls.n	80048d4 <_is_digit+0x1a>
 80048ca:	79fb      	ldrb	r3, [r7, #7]
 80048cc:	2b39      	cmp	r3, #57	; 0x39
 80048ce:	d801      	bhi.n	80048d4 <_is_digit+0x1a>
 80048d0:	2301      	movs	r3, #1
 80048d2:	e000      	b.n	80048d6 <_is_digit+0x1c>
 80048d4:	2300      	movs	r3, #0
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	b2db      	uxtb	r3, r3
}
 80048dc:	4618      	mov	r0, r3
 80048de:	370c      	adds	r7, #12
 80048e0:	46bd      	mov	sp, r7
 80048e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048e6:	4770      	bx	lr

080048e8 <_atoi>:


// internal ASCII string to unsigned int conversion
static unsigned int _atoi(const char** str)
{
 80048e8:	b580      	push	{r7, lr}
 80048ea:	b084      	sub	sp, #16
 80048ec:	af00      	add	r7, sp, #0
 80048ee:	6078      	str	r0, [r7, #4]
  unsigned int i = 0U;
 80048f0:	2300      	movs	r3, #0
 80048f2:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 80048f4:	e00e      	b.n	8004914 <_atoi+0x2c>
    i = i * 10U + (unsigned int)(*((*str)++) - '0');
 80048f6:	68fa      	ldr	r2, [r7, #12]
 80048f8:	4613      	mov	r3, r2
 80048fa:	009b      	lsls	r3, r3, #2
 80048fc:	4413      	add	r3, r2
 80048fe:	005b      	lsls	r3, r3, #1
 8004900:	4618      	mov	r0, r3
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	681b      	ldr	r3, [r3, #0]
 8004906:	1c59      	adds	r1, r3, #1
 8004908:	687a      	ldr	r2, [r7, #4]
 800490a:	6011      	str	r1, [r2, #0]
 800490c:	781b      	ldrb	r3, [r3, #0]
 800490e:	4403      	add	r3, r0
 8004910:	3b30      	subs	r3, #48	; 0x30
 8004912:	60fb      	str	r3, [r7, #12]
  while (_is_digit(**str)) {
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	681b      	ldr	r3, [r3, #0]
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	4618      	mov	r0, r3
 800491c:	f7ff ffcd 	bl	80048ba <_is_digit>
 8004920:	4603      	mov	r3, r0
 8004922:	2b00      	cmp	r3, #0
 8004924:	d1e7      	bne.n	80048f6 <_atoi+0xe>
  }
  return i;
 8004926:	68fb      	ldr	r3, [r7, #12]
}
 8004928:	4618      	mov	r0, r3
 800492a:	3710      	adds	r7, #16
 800492c:	46bd      	mov	sp, r7
 800492e:	bd80      	pop	{r7, pc}

08004930 <_out_rev>:


// output the specified string in reverse, taking care of any zero-padding
static size_t _out_rev(out_fct_type out, char* buffer, size_t idx, size_t maxlen, const char* buf, size_t len, unsigned int width, unsigned int flags)
{
 8004930:	b590      	push	{r4, r7, lr}
 8004932:	b087      	sub	sp, #28
 8004934:	af00      	add	r7, sp, #0
 8004936:	60f8      	str	r0, [r7, #12]
 8004938:	60b9      	str	r1, [r7, #8]
 800493a:	607a      	str	r2, [r7, #4]
 800493c:	603b      	str	r3, [r7, #0]
  const size_t start_idx = idx;
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	613b      	str	r3, [r7, #16]

  // pad spaces up to given width
  if (!(flags & FLAGS_LEFT) && !(flags & FLAGS_ZEROPAD)) {
 8004942:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004944:	f003 0302 	and.w	r3, r3, #2
 8004948:	2b00      	cmp	r3, #0
 800494a:	d125      	bne.n	8004998 <_out_rev+0x68>
 800494c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800494e:	f003 0301 	and.w	r3, r3, #1
 8004952:	2b00      	cmp	r3, #0
 8004954:	d120      	bne.n	8004998 <_out_rev+0x68>
    for (size_t i = len; i < width; i++) {
 8004956:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004958:	617b      	str	r3, [r7, #20]
 800495a:	e00a      	b.n	8004972 <_out_rev+0x42>
      out(' ', buffer, idx++, maxlen);
 800495c:	687a      	ldr	r2, [r7, #4]
 800495e:	1c53      	adds	r3, r2, #1
 8004960:	607b      	str	r3, [r7, #4]
 8004962:	68fc      	ldr	r4, [r7, #12]
 8004964:	683b      	ldr	r3, [r7, #0]
 8004966:	68b9      	ldr	r1, [r7, #8]
 8004968:	2020      	movs	r0, #32
 800496a:	47a0      	blx	r4
    for (size_t i = len; i < width; i++) {
 800496c:	697b      	ldr	r3, [r7, #20]
 800496e:	3301      	adds	r3, #1
 8004970:	617b      	str	r3, [r7, #20]
 8004972:	697a      	ldr	r2, [r7, #20]
 8004974:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004976:	429a      	cmp	r2, r3
 8004978:	d3f0      	bcc.n	800495c <_out_rev+0x2c>
    }
  }

  // reverse string
  while (len) {
 800497a:	e00d      	b.n	8004998 <_out_rev+0x68>
    out(buf[--len], buffer, idx++, maxlen);
 800497c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800497e:	3b01      	subs	r3, #1
 8004980:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004982:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8004984:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004986:	4413      	add	r3, r2
 8004988:	7818      	ldrb	r0, [r3, #0]
 800498a:	687a      	ldr	r2, [r7, #4]
 800498c:	1c53      	adds	r3, r2, #1
 800498e:	607b      	str	r3, [r7, #4]
 8004990:	68fc      	ldr	r4, [r7, #12]
 8004992:	683b      	ldr	r3, [r7, #0]
 8004994:	68b9      	ldr	r1, [r7, #8]
 8004996:	47a0      	blx	r4
  while (len) {
 8004998:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800499a:	2b00      	cmp	r3, #0
 800499c:	d1ee      	bne.n	800497c <_out_rev+0x4c>
  }

  // append pad spaces up to given width
  if (flags & FLAGS_LEFT) {
 800499e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80049a0:	f003 0302 	and.w	r3, r3, #2
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	d00e      	beq.n	80049c6 <_out_rev+0x96>
    while (idx - start_idx < width) {
 80049a8:	e007      	b.n	80049ba <_out_rev+0x8a>
      out(' ', buffer, idx++, maxlen);
 80049aa:	687a      	ldr	r2, [r7, #4]
 80049ac:	1c53      	adds	r3, r2, #1
 80049ae:	607b      	str	r3, [r7, #4]
 80049b0:	68fc      	ldr	r4, [r7, #12]
 80049b2:	683b      	ldr	r3, [r7, #0]
 80049b4:	68b9      	ldr	r1, [r7, #8]
 80049b6:	2020      	movs	r0, #32
 80049b8:	47a0      	blx	r4
    while (idx - start_idx < width) {
 80049ba:	687a      	ldr	r2, [r7, #4]
 80049bc:	693b      	ldr	r3, [r7, #16]
 80049be:	1ad3      	subs	r3, r2, r3
 80049c0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d8f1      	bhi.n	80049aa <_out_rev+0x7a>
    }
  }

  return idx;
 80049c6:	687b      	ldr	r3, [r7, #4]
}
 80049c8:	4618      	mov	r0, r3
 80049ca:	371c      	adds	r7, #28
 80049cc:	46bd      	mov	sp, r7
 80049ce:	bd90      	pop	{r4, r7, pc}

080049d0 <_ntoa_format>:


// internal itoa format
static size_t _ntoa_format(out_fct_type out, char* buffer, size_t idx, size_t maxlen, char* buf, size_t len, bool negative, unsigned int base, unsigned int prec, unsigned int width, unsigned int flags)
{
 80049d0:	b580      	push	{r7, lr}
 80049d2:	b088      	sub	sp, #32
 80049d4:	af04      	add	r7, sp, #16
 80049d6:	60f8      	str	r0, [r7, #12]
 80049d8:	60b9      	str	r1, [r7, #8]
 80049da:	607a      	str	r2, [r7, #4]
 80049dc:	603b      	str	r3, [r7, #0]
  // pad leading zeros
  if (!(flags & FLAGS_LEFT)) {
 80049de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049e0:	f003 0302 	and.w	r3, r3, #2
 80049e4:	2b00      	cmp	r3, #0
 80049e6:	d136      	bne.n	8004a56 <_ntoa_format+0x86>
    if (width && (flags & FLAGS_ZEROPAD) && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 80049e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d018      	beq.n	8004a20 <_ntoa_format+0x50>
 80049ee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80049f0:	f003 0301 	and.w	r3, r3, #1
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d013      	beq.n	8004a20 <_ntoa_format+0x50>
 80049f8:	f897 3020 	ldrb.w	r3, [r7, #32]
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d104      	bne.n	8004a0a <_ntoa_format+0x3a>
 8004a00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a02:	f003 030c 	and.w	r3, r3, #12
 8004a06:	2b00      	cmp	r3, #0
 8004a08:	d00a      	beq.n	8004a20 <_ntoa_format+0x50>
      width--;
 8004a0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a0c:	3b01      	subs	r3, #1
 8004a0e:	62fb      	str	r3, [r7, #44]	; 0x2c
    }
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004a10:	e006      	b.n	8004a20 <_ntoa_format+0x50>
      buf[len++] = '0';
 8004a12:	69fb      	ldr	r3, [r7, #28]
 8004a14:	1c5a      	adds	r2, r3, #1
 8004a16:	61fa      	str	r2, [r7, #28]
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	4413      	add	r3, r2
 8004a1c:	2230      	movs	r2, #48	; 0x30
 8004a1e:	701a      	strb	r2, [r3, #0]
    while ((len < prec) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004a20:	69fa      	ldr	r2, [r7, #28]
 8004a22:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a24:	429a      	cmp	r2, r3
 8004a26:	d20a      	bcs.n	8004a3e <_ntoa_format+0x6e>
 8004a28:	69fb      	ldr	r3, [r7, #28]
 8004a2a:	2b1f      	cmp	r3, #31
 8004a2c:	d9f1      	bls.n	8004a12 <_ntoa_format+0x42>
    }
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004a2e:	e006      	b.n	8004a3e <_ntoa_format+0x6e>
      buf[len++] = '0';
 8004a30:	69fb      	ldr	r3, [r7, #28]
 8004a32:	1c5a      	adds	r2, r3, #1
 8004a34:	61fa      	str	r2, [r7, #28]
 8004a36:	69ba      	ldr	r2, [r7, #24]
 8004a38:	4413      	add	r3, r2
 8004a3a:	2230      	movs	r2, #48	; 0x30
 8004a3c:	701a      	strb	r2, [r3, #0]
    while ((flags & FLAGS_ZEROPAD) && (len < width) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004a3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a40:	f003 0301 	and.w	r3, r3, #1
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d006      	beq.n	8004a56 <_ntoa_format+0x86>
 8004a48:	69fa      	ldr	r2, [r7, #28]
 8004a4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a4c:	429a      	cmp	r2, r3
 8004a4e:	d202      	bcs.n	8004a56 <_ntoa_format+0x86>
 8004a50:	69fb      	ldr	r3, [r7, #28]
 8004a52:	2b1f      	cmp	r3, #31
 8004a54:	d9ec      	bls.n	8004a30 <_ntoa_format+0x60>
    }
  }

  // handle hash
  if (flags & FLAGS_HASH) {
 8004a56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a58:	f003 0310 	and.w	r3, r3, #16
 8004a5c:	2b00      	cmp	r3, #0
 8004a5e:	d058      	beq.n	8004b12 <_ntoa_format+0x142>
    if (!(flags & FLAGS_PRECISION) && len && ((len == prec) || (len == width))) {
 8004a60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004a62:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a66:	2b00      	cmp	r3, #0
 8004a68:	d116      	bne.n	8004a98 <_ntoa_format+0xc8>
 8004a6a:	69fb      	ldr	r3, [r7, #28]
 8004a6c:	2b00      	cmp	r3, #0
 8004a6e:	d013      	beq.n	8004a98 <_ntoa_format+0xc8>
 8004a70:	69fa      	ldr	r2, [r7, #28]
 8004a72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004a74:	429a      	cmp	r2, r3
 8004a76:	d003      	beq.n	8004a80 <_ntoa_format+0xb0>
 8004a78:	69fa      	ldr	r2, [r7, #28]
 8004a7a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004a7c:	429a      	cmp	r2, r3
 8004a7e:	d10b      	bne.n	8004a98 <_ntoa_format+0xc8>
      len--;
 8004a80:	69fb      	ldr	r3, [r7, #28]
 8004a82:	3b01      	subs	r3, #1
 8004a84:	61fb      	str	r3, [r7, #28]
      if (len && (base == 16U)) {
 8004a86:	69fb      	ldr	r3, [r7, #28]
 8004a88:	2b00      	cmp	r3, #0
 8004a8a:	d005      	beq.n	8004a98 <_ntoa_format+0xc8>
 8004a8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a8e:	2b10      	cmp	r3, #16
 8004a90:	d102      	bne.n	8004a98 <_ntoa_format+0xc8>
        len--;
 8004a92:	69fb      	ldr	r3, [r7, #28]
 8004a94:	3b01      	subs	r3, #1
 8004a96:	61fb      	str	r3, [r7, #28]
      }
    }
    if ((base == 16U) && !(flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004a98:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004a9a:	2b10      	cmp	r3, #16
 8004a9c:	d10f      	bne.n	8004abe <_ntoa_format+0xee>
 8004a9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004aa0:	f003 0320 	and.w	r3, r3, #32
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d10a      	bne.n	8004abe <_ntoa_format+0xee>
 8004aa8:	69fb      	ldr	r3, [r7, #28]
 8004aaa:	2b1f      	cmp	r3, #31
 8004aac:	d807      	bhi.n	8004abe <_ntoa_format+0xee>
      buf[len++] = 'x';
 8004aae:	69fb      	ldr	r3, [r7, #28]
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	61fa      	str	r2, [r7, #28]
 8004ab4:	69ba      	ldr	r2, [r7, #24]
 8004ab6:	4413      	add	r3, r2
 8004ab8:	2278      	movs	r2, #120	; 0x78
 8004aba:	701a      	strb	r2, [r3, #0]
 8004abc:	e01f      	b.n	8004afe <_ntoa_format+0x12e>
    }
    else if ((base == 16U) && (flags & FLAGS_UPPERCASE) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004abe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ac0:	2b10      	cmp	r3, #16
 8004ac2:	d10f      	bne.n	8004ae4 <_ntoa_format+0x114>
 8004ac4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004ac6:	f003 0320 	and.w	r3, r3, #32
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00a      	beq.n	8004ae4 <_ntoa_format+0x114>
 8004ace:	69fb      	ldr	r3, [r7, #28]
 8004ad0:	2b1f      	cmp	r3, #31
 8004ad2:	d807      	bhi.n	8004ae4 <_ntoa_format+0x114>
      buf[len++] = 'X';
 8004ad4:	69fb      	ldr	r3, [r7, #28]
 8004ad6:	1c5a      	adds	r2, r3, #1
 8004ad8:	61fa      	str	r2, [r7, #28]
 8004ada:	69ba      	ldr	r2, [r7, #24]
 8004adc:	4413      	add	r3, r2
 8004ade:	2258      	movs	r2, #88	; 0x58
 8004ae0:	701a      	strb	r2, [r3, #0]
 8004ae2:	e00c      	b.n	8004afe <_ntoa_format+0x12e>
    }
    else if ((base == 2U) && (len < PRINTF_NTOA_BUFFER_SIZE)) {
 8004ae4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004ae6:	2b02      	cmp	r3, #2
 8004ae8:	d109      	bne.n	8004afe <_ntoa_format+0x12e>
 8004aea:	69fb      	ldr	r3, [r7, #28]
 8004aec:	2b1f      	cmp	r3, #31
 8004aee:	d806      	bhi.n	8004afe <_ntoa_format+0x12e>
      buf[len++] = 'b';
 8004af0:	69fb      	ldr	r3, [r7, #28]
 8004af2:	1c5a      	adds	r2, r3, #1
 8004af4:	61fa      	str	r2, [r7, #28]
 8004af6:	69ba      	ldr	r2, [r7, #24]
 8004af8:	4413      	add	r3, r2
 8004afa:	2262      	movs	r2, #98	; 0x62
 8004afc:	701a      	strb	r2, [r3, #0]
    }
    if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8004afe:	69fb      	ldr	r3, [r7, #28]
 8004b00:	2b1f      	cmp	r3, #31
 8004b02:	d806      	bhi.n	8004b12 <_ntoa_format+0x142>
      buf[len++] = '0';
 8004b04:	69fb      	ldr	r3, [r7, #28]
 8004b06:	1c5a      	adds	r2, r3, #1
 8004b08:	61fa      	str	r2, [r7, #28]
 8004b0a:	69ba      	ldr	r2, [r7, #24]
 8004b0c:	4413      	add	r3, r2
 8004b0e:	2230      	movs	r2, #48	; 0x30
 8004b10:	701a      	strb	r2, [r3, #0]
    }
  }

  if (len < PRINTF_NTOA_BUFFER_SIZE) {
 8004b12:	69fb      	ldr	r3, [r7, #28]
 8004b14:	2b1f      	cmp	r3, #31
 8004b16:	d824      	bhi.n	8004b62 <_ntoa_format+0x192>
    if (negative) {
 8004b18:	f897 3020 	ldrb.w	r3, [r7, #32]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d007      	beq.n	8004b30 <_ntoa_format+0x160>
      buf[len++] = '-';
 8004b20:	69fb      	ldr	r3, [r7, #28]
 8004b22:	1c5a      	adds	r2, r3, #1
 8004b24:	61fa      	str	r2, [r7, #28]
 8004b26:	69ba      	ldr	r2, [r7, #24]
 8004b28:	4413      	add	r3, r2
 8004b2a:	222d      	movs	r2, #45	; 0x2d
 8004b2c:	701a      	strb	r2, [r3, #0]
 8004b2e:	e018      	b.n	8004b62 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_PLUS) {
 8004b30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b32:	f003 0304 	and.w	r3, r3, #4
 8004b36:	2b00      	cmp	r3, #0
 8004b38:	d007      	beq.n	8004b4a <_ntoa_format+0x17a>
      buf[len++] = '+';  // ignore the space if the '+' exists
 8004b3a:	69fb      	ldr	r3, [r7, #28]
 8004b3c:	1c5a      	adds	r2, r3, #1
 8004b3e:	61fa      	str	r2, [r7, #28]
 8004b40:	69ba      	ldr	r2, [r7, #24]
 8004b42:	4413      	add	r3, r2
 8004b44:	222b      	movs	r2, #43	; 0x2b
 8004b46:	701a      	strb	r2, [r3, #0]
 8004b48:	e00b      	b.n	8004b62 <_ntoa_format+0x192>
    }
    else if (flags & FLAGS_SPACE) {
 8004b4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b4c:	f003 0308 	and.w	r3, r3, #8
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	d006      	beq.n	8004b62 <_ntoa_format+0x192>
      buf[len++] = ' ';
 8004b54:	69fb      	ldr	r3, [r7, #28]
 8004b56:	1c5a      	adds	r2, r3, #1
 8004b58:	61fa      	str	r2, [r7, #28]
 8004b5a:	69ba      	ldr	r2, [r7, #24]
 8004b5c:	4413      	add	r3, r2
 8004b5e:	2220      	movs	r2, #32
 8004b60:	701a      	strb	r2, [r3, #0]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 8004b62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004b64:	9303      	str	r3, [sp, #12]
 8004b66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004b68:	9302      	str	r3, [sp, #8]
 8004b6a:	69fb      	ldr	r3, [r7, #28]
 8004b6c:	9301      	str	r3, [sp, #4]
 8004b6e:	69bb      	ldr	r3, [r7, #24]
 8004b70:	9300      	str	r3, [sp, #0]
 8004b72:	683b      	ldr	r3, [r7, #0]
 8004b74:	687a      	ldr	r2, [r7, #4]
 8004b76:	68b9      	ldr	r1, [r7, #8]
 8004b78:	68f8      	ldr	r0, [r7, #12]
 8004b7a:	f7ff fed9 	bl	8004930 <_out_rev>
 8004b7e:	4603      	mov	r3, r0
}
 8004b80:	4618      	mov	r0, r3
 8004b82:	3710      	adds	r7, #16
 8004b84:	46bd      	mov	sp, r7
 8004b86:	bd80      	pop	{r7, pc}

08004b88 <_ntoa_long>:


// internal itoa for 'long' type
static size_t _ntoa_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long value, bool negative, unsigned long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004b88:	b580      	push	{r7, lr}
 8004b8a:	b096      	sub	sp, #88	; 0x58
 8004b8c:	af08      	add	r7, sp, #32
 8004b8e:	60f8      	str	r0, [r7, #12]
 8004b90:	60b9      	str	r1, [r7, #8]
 8004b92:	607a      	str	r2, [r7, #4]
 8004b94:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8004b96:	2300      	movs	r3, #0
 8004b98:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8004b9a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d103      	bne.n	8004ba8 <_ntoa_long+0x20>
    flags &= ~FLAGS_HASH;
 8004ba0:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004ba2:	f023 0310 	bic.w	r3, r3, #16
 8004ba6:	657b      	str	r3, [r7, #84]	; 0x54
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8004ba8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004baa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004bae:	2b00      	cmp	r3, #0
 8004bb0:	d002      	beq.n	8004bb8 <_ntoa_long+0x30>
 8004bb2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bb4:	2b00      	cmp	r3, #0
 8004bb6:	d033      	beq.n	8004c20 <_ntoa_long+0x98>
    do {
      const char digit = (char)(value % base);
 8004bb8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004bba:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8004bbc:	fbb3 f2f2 	udiv	r2, r3, r2
 8004bc0:	6cb9      	ldr	r1, [r7, #72]	; 0x48
 8004bc2:	fb01 f202 	mul.w	r2, r1, r2
 8004bc6:	1a9b      	subs	r3, r3, r2
 8004bc8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8004bcc:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004bd0:	2b09      	cmp	r3, #9
 8004bd2:	d804      	bhi.n	8004bde <_ntoa_long+0x56>
 8004bd4:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004bd8:	3330      	adds	r3, #48	; 0x30
 8004bda:	b2da      	uxtb	r2, r3
 8004bdc:	e00d      	b.n	8004bfa <_ntoa_long+0x72>
 8004bde:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004be0:	f003 0320 	and.w	r3, r3, #32
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d001      	beq.n	8004bec <_ntoa_long+0x64>
 8004be8:	2241      	movs	r2, #65	; 0x41
 8004bea:	e000      	b.n	8004bee <_ntoa_long+0x66>
 8004bec:	2261      	movs	r2, #97	; 0x61
 8004bee:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004bf2:	4413      	add	r3, r2
 8004bf4:	b2db      	uxtb	r3, r3
 8004bf6:	3b0a      	subs	r3, #10
 8004bf8:	b2da      	uxtb	r2, r3
 8004bfa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004bfc:	1c59      	adds	r1, r3, #1
 8004bfe:	6379      	str	r1, [r7, #52]	; 0x34
 8004c00:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004c04:	440b      	add	r3, r1
 8004c06:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8004c0a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8004c0c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004c12:	643b      	str	r3, [r7, #64]	; 0x40
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8004c14:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8004c16:	2b00      	cmp	r3, #0
 8004c18:	d002      	beq.n	8004c20 <_ntoa_long+0x98>
 8004c1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c1c:	2b1f      	cmp	r3, #31
 8004c1e:	d9cb      	bls.n	8004bb8 <_ntoa_long+0x30>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8004c20:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004c22:	9306      	str	r3, [sp, #24]
 8004c24:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004c26:	9305      	str	r3, [sp, #20]
 8004c28:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8004c2a:	9304      	str	r3, [sp, #16]
 8004c2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8004c2e:	9303      	str	r3, [sp, #12]
 8004c30:	f897 3044 	ldrb.w	r3, [r7, #68]	; 0x44
 8004c34:	9302      	str	r3, [sp, #8]
 8004c36:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004c38:	9301      	str	r3, [sp, #4]
 8004c3a:	f107 0310 	add.w	r3, r7, #16
 8004c3e:	9300      	str	r3, [sp, #0]
 8004c40:	683b      	ldr	r3, [r7, #0]
 8004c42:	687a      	ldr	r2, [r7, #4]
 8004c44:	68b9      	ldr	r1, [r7, #8]
 8004c46:	68f8      	ldr	r0, [r7, #12]
 8004c48:	f7ff fec2 	bl	80049d0 <_ntoa_format>
 8004c4c:	4603      	mov	r3, r0
}
 8004c4e:	4618      	mov	r0, r3
 8004c50:	3738      	adds	r7, #56	; 0x38
 8004c52:	46bd      	mov	sp, r7
 8004c54:	bd80      	pop	{r7, pc}

08004c56 <_ntoa_long_long>:


// internal itoa for 'long long' type
#if defined(PRINTF_SUPPORT_LONG_LONG)
static size_t _ntoa_long_long(out_fct_type out, char* buffer, size_t idx, size_t maxlen, unsigned long long value, bool negative, unsigned long long base, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004c56:	b590      	push	{r4, r7, lr}
 8004c58:	b097      	sub	sp, #92	; 0x5c
 8004c5a:	af08      	add	r7, sp, #32
 8004c5c:	60f8      	str	r0, [r7, #12]
 8004c5e:	60b9      	str	r1, [r7, #8]
 8004c60:	607a      	str	r2, [r7, #4]
 8004c62:	603b      	str	r3, [r7, #0]
  char buf[PRINTF_NTOA_BUFFER_SIZE];
  size_t len = 0U;
 8004c64:	2300      	movs	r3, #0
 8004c66:	637b      	str	r3, [r7, #52]	; 0x34

  // no hash for 0 values
  if (!value) {
 8004c68:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004c6c:	4323      	orrs	r3, r4
 8004c6e:	d103      	bne.n	8004c78 <_ntoa_long_long+0x22>
    flags &= ~FLAGS_HASH;
 8004c70:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c72:	f023 0310 	bic.w	r3, r3, #16
 8004c76:	66bb      	str	r3, [r7, #104]	; 0x68
  }

  // write if precision != 0 and value is != 0
  if (!(flags & FLAGS_PRECISION) || value) {
 8004c78:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004c7a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004c7e:	2b00      	cmp	r3, #0
 8004c80:	d003      	beq.n	8004c8a <_ntoa_long_long+0x34>
 8004c82:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004c86:	4323      	orrs	r3, r4
 8004c88:	d039      	beq.n	8004cfe <_ntoa_long_long+0xa8>
    do {
      const char digit = (char)(value % base);
 8004c8a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004c8e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004c92:	f7fb ff9b 	bl	8000bcc <__aeabi_uldivmod>
 8004c96:	461c      	mov	r4, r3
 8004c98:	4613      	mov	r3, r2
 8004c9a:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      buf[len++] = digit < 10 ? '0' + digit : (flags & FLAGS_UPPERCASE ? 'A' : 'a') + digit - 10;
 8004c9e:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004ca2:	2b09      	cmp	r3, #9
 8004ca4:	d804      	bhi.n	8004cb0 <_ntoa_long_long+0x5a>
 8004ca6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004caa:	3330      	adds	r3, #48	; 0x30
 8004cac:	b2da      	uxtb	r2, r3
 8004cae:	e00d      	b.n	8004ccc <_ntoa_long_long+0x76>
 8004cb0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8004cb2:	f003 0320 	and.w	r3, r3, #32
 8004cb6:	2b00      	cmp	r3, #0
 8004cb8:	d001      	beq.n	8004cbe <_ntoa_long_long+0x68>
 8004cba:	2241      	movs	r2, #65	; 0x41
 8004cbc:	e000      	b.n	8004cc0 <_ntoa_long_long+0x6a>
 8004cbe:	2261      	movs	r2, #97	; 0x61
 8004cc0:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8004cc4:	4413      	add	r3, r2
 8004cc6:	b2db      	uxtb	r3, r3
 8004cc8:	3b0a      	subs	r3, #10
 8004cca:	b2da      	uxtb	r2, r3
 8004ccc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cce:	1c59      	adds	r1, r3, #1
 8004cd0:	6379      	str	r1, [r7, #52]	; 0x34
 8004cd2:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004cd6:	440b      	add	r3, r1
 8004cd8:	f803 2c28 	strb.w	r2, [r3, #-40]
      value /= base;
 8004cdc:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004ce0:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8004ce4:	f7fb ff72 	bl	8000bcc <__aeabi_uldivmod>
 8004ce8:	4603      	mov	r3, r0
 8004cea:	460c      	mov	r4, r1
 8004cec:	e9c7 3412 	strd	r3, r4, [r7, #72]	; 0x48
    } while (value && (len < PRINTF_NTOA_BUFFER_SIZE));
 8004cf0:	e9d7 3412 	ldrd	r3, r4, [r7, #72]	; 0x48
 8004cf4:	4323      	orrs	r3, r4
 8004cf6:	d002      	beq.n	8004cfe <_ntoa_long_long+0xa8>
 8004cf8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004cfa:	2b1f      	cmp	r3, #31
 8004cfc:	d9c5      	bls.n	8004c8a <_ntoa_long_long+0x34>
  }

  return _ntoa_format(out, buffer, idx, maxlen, buf, len, negative, (unsigned int)base, prec, width, flags);
 8004cfe:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 8004d00:	6eba      	ldr	r2, [r7, #104]	; 0x68
 8004d02:	9206      	str	r2, [sp, #24]
 8004d04:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 8004d06:	9205      	str	r2, [sp, #20]
 8004d08:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 8004d0a:	9204      	str	r2, [sp, #16]
 8004d0c:	9303      	str	r3, [sp, #12]
 8004d0e:	f897 3050 	ldrb.w	r3, [r7, #80]	; 0x50
 8004d12:	9302      	str	r3, [sp, #8]
 8004d14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8004d16:	9301      	str	r3, [sp, #4]
 8004d18:	f107 0310 	add.w	r3, r7, #16
 8004d1c:	9300      	str	r3, [sp, #0]
 8004d1e:	683b      	ldr	r3, [r7, #0]
 8004d20:	687a      	ldr	r2, [r7, #4]
 8004d22:	68b9      	ldr	r1, [r7, #8]
 8004d24:	68f8      	ldr	r0, [r7, #12]
 8004d26:	f7ff fe53 	bl	80049d0 <_ntoa_format>
 8004d2a:	4603      	mov	r3, r0
}
 8004d2c:	4618      	mov	r0, r3
 8004d2e:	373c      	adds	r7, #60	; 0x3c
 8004d30:	46bd      	mov	sp, r7
 8004d32:	bd90      	pop	{r4, r7, pc}
 8004d34:	0000      	movs	r0, r0
	...

08004d38 <_ftoa>:
#endif


// internal ftoa for fixed decimal floating point
static size_t _ftoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8004d38:	b590      	push	{r4, r7, lr}
 8004d3a:	b09d      	sub	sp, #116	; 0x74
 8004d3c:	af04      	add	r7, sp, #16
 8004d3e:	6178      	str	r0, [r7, #20]
 8004d40:	6139      	str	r1, [r7, #16]
 8004d42:	60fa      	str	r2, [r7, #12]
 8004d44:	60bb      	str	r3, [r7, #8]
 8004d46:	ed87 0b00 	vstr	d0, [r7]
  char buf[PRINTF_FTOA_BUFFER_SIZE];
  size_t len  = 0U;
 8004d4a:	2300      	movs	r3, #0
 8004d4c:	65fb      	str	r3, [r7, #92]	; 0x5c
  double diff = 0.0;
 8004d4e:	f04f 0300 	mov.w	r3, #0
 8004d52:	f04f 0400 	mov.w	r4, #0
 8004d56:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  // powers of 10
  static const double pow10[] = { 1, 10, 100, 1000, 10000, 100000, 1000000, 10000000, 100000000, 1000000000 };

  // test for special values
  if (value != value)
 8004d5a:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004d5e:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d62:	f7fb fe69 	bl	8000a38 <__aeabi_dcmpeq>
 8004d66:	4603      	mov	r3, r0
 8004d68:	2b00      	cmp	r3, #0
 8004d6a:	d10f      	bne.n	8004d8c <_ftoa+0x54>
    return _out_rev(out, buffer, idx, maxlen, "nan", 3, width, flags);
 8004d6c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004d6e:	9303      	str	r3, [sp, #12]
 8004d70:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004d72:	9302      	str	r3, [sp, #8]
 8004d74:	2303      	movs	r3, #3
 8004d76:	9301      	str	r3, [sp, #4]
 8004d78:	4baf      	ldr	r3, [pc, #700]	; (8005038 <_ftoa+0x300>)
 8004d7a:	9300      	str	r3, [sp, #0]
 8004d7c:	68bb      	ldr	r3, [r7, #8]
 8004d7e:	68fa      	ldr	r2, [r7, #12]
 8004d80:	6939      	ldr	r1, [r7, #16]
 8004d82:	6978      	ldr	r0, [r7, #20]
 8004d84:	f7ff fdd4 	bl	8004930 <_out_rev>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	e237      	b.n	80051fc <_ftoa+0x4c4>
  if (value < -DBL_MAX)
 8004d8c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004d90:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8004d94:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004d98:	f7fb fe58 	bl	8000a4c <__aeabi_dcmplt>
 8004d9c:	4603      	mov	r3, r0
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d00f      	beq.n	8004dc2 <_ftoa+0x8a>
    return _out_rev(out, buffer, idx, maxlen, "fni-", 4, width, flags);
 8004da2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004da4:	9303      	str	r3, [sp, #12]
 8004da6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004da8:	9302      	str	r3, [sp, #8]
 8004daa:	2304      	movs	r3, #4
 8004dac:	9301      	str	r3, [sp, #4]
 8004dae:	4ba3      	ldr	r3, [pc, #652]	; (800503c <_ftoa+0x304>)
 8004db0:	9300      	str	r3, [sp, #0]
 8004db2:	68bb      	ldr	r3, [r7, #8]
 8004db4:	68fa      	ldr	r2, [r7, #12]
 8004db6:	6939      	ldr	r1, [r7, #16]
 8004db8:	6978      	ldr	r0, [r7, #20]
 8004dba:	f7ff fdb9 	bl	8004930 <_out_rev>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	e21c      	b.n	80051fc <_ftoa+0x4c4>
  if (value > DBL_MAX)
 8004dc2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8004dc6:	4b9e      	ldr	r3, [pc, #632]	; (8005040 <_ftoa+0x308>)
 8004dc8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004dcc:	f7fb fe5c 	bl	8000a88 <__aeabi_dcmpgt>
 8004dd0:	4603      	mov	r3, r0
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d01d      	beq.n	8004e12 <_ftoa+0xda>
    return _out_rev(out, buffer, idx, maxlen, (flags & FLAGS_PLUS) ? "fni+" : "fni", (flags & FLAGS_PLUS) ? 4U : 3U, width, flags);
 8004dd6:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004dd8:	f003 0304 	and.w	r3, r3, #4
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d001      	beq.n	8004de4 <_ftoa+0xac>
 8004de0:	4b98      	ldr	r3, [pc, #608]	; (8005044 <_ftoa+0x30c>)
 8004de2:	e000      	b.n	8004de6 <_ftoa+0xae>
 8004de4:	4b98      	ldr	r3, [pc, #608]	; (8005048 <_ftoa+0x310>)
 8004de6:	6fba      	ldr	r2, [r7, #120]	; 0x78
 8004de8:	f002 0204 	and.w	r2, r2, #4
 8004dec:	2a00      	cmp	r2, #0
 8004dee:	d001      	beq.n	8004df4 <_ftoa+0xbc>
 8004df0:	2204      	movs	r2, #4
 8004df2:	e000      	b.n	8004df6 <_ftoa+0xbe>
 8004df4:	2203      	movs	r2, #3
 8004df6:	6fb9      	ldr	r1, [r7, #120]	; 0x78
 8004df8:	9103      	str	r1, [sp, #12]
 8004dfa:	6f79      	ldr	r1, [r7, #116]	; 0x74
 8004dfc:	9102      	str	r1, [sp, #8]
 8004dfe:	9201      	str	r2, [sp, #4]
 8004e00:	9300      	str	r3, [sp, #0]
 8004e02:	68bb      	ldr	r3, [r7, #8]
 8004e04:	68fa      	ldr	r2, [r7, #12]
 8004e06:	6939      	ldr	r1, [r7, #16]
 8004e08:	6978      	ldr	r0, [r7, #20]
 8004e0a:	f7ff fd91 	bl	8004930 <_out_rev>
 8004e0e:	4603      	mov	r3, r0
 8004e10:	e1f4      	b.n	80051fc <_ftoa+0x4c4>

  // test for very large values
  // standard printf behavior is to print EVERY whole number digit -- which could be 100s of characters overflowing your buffers == bad
  if ((value > PRINTF_MAX_FLOAT) || (value < -PRINTF_MAX_FLOAT)) {
 8004e12:	a385      	add	r3, pc, #532	; (adr r3, 8005028 <_ftoa+0x2f0>)
 8004e14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e18:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e1c:	f7fb fe34 	bl	8000a88 <__aeabi_dcmpgt>
 8004e20:	4603      	mov	r3, r0
 8004e22:	2b00      	cmp	r3, #0
 8004e24:	d109      	bne.n	8004e3a <_ftoa+0x102>
 8004e26:	a382      	add	r3, pc, #520	; (adr r3, 8005030 <_ftoa+0x2f8>)
 8004e28:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004e2c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e30:	f7fb fe0c 	bl	8000a4c <__aeabi_dcmplt>
 8004e34:	4603      	mov	r3, r0
 8004e36:	2b00      	cmp	r3, #0
 8004e38:	d00f      	beq.n	8004e5a <_ftoa+0x122>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
    return _etoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8004e3a:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e3c:	9302      	str	r3, [sp, #8]
 8004e3e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8004e40:	9301      	str	r3, [sp, #4]
 8004e42:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004e44:	9300      	str	r3, [sp, #0]
 8004e46:	ed97 0b00 	vldr	d0, [r7]
 8004e4a:	68bb      	ldr	r3, [r7, #8]
 8004e4c:	68fa      	ldr	r2, [r7, #12]
 8004e4e:	6939      	ldr	r1, [r7, #16]
 8004e50:	6978      	ldr	r0, [r7, #20]
 8004e52:	f000 f9dd 	bl	8005210 <_etoa>
 8004e56:	4603      	mov	r3, r0
 8004e58:	e1d0      	b.n	80051fc <_ftoa+0x4c4>
    return 0U;
#endif
  }

  // test for negative
  bool negative = false;
 8004e5a:	2300      	movs	r3, #0
 8004e5c:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
  if (value < 0) {
 8004e60:	f04f 0200 	mov.w	r2, #0
 8004e64:	f04f 0300 	mov.w	r3, #0
 8004e68:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004e6c:	f7fb fdee 	bl	8000a4c <__aeabi_dcmplt>
 8004e70:	4603      	mov	r3, r0
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d00e      	beq.n	8004e94 <_ftoa+0x15c>
    negative = true;
 8004e76:	2301      	movs	r3, #1
 8004e78:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
    value = 0 - value;
 8004e7c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004e80:	f04f 0000 	mov.w	r0, #0
 8004e84:	f04f 0100 	mov.w	r1, #0
 8004e88:	f7fb f9b6 	bl	80001f8 <__aeabi_dsub>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	460c      	mov	r4, r1
 8004e90:	e9c7 3400 	strd	r3, r4, [r7]
  }

  // set default precision, if not set explicitly
  if (!(flags & FLAGS_PRECISION)) {
 8004e94:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8004e96:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d10e      	bne.n	8004ebc <_ftoa+0x184>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 8004e9e:	2306      	movs	r3, #6
 8004ea0:	673b      	str	r3, [r7, #112]	; 0x70
  }
  // limit precision to 9, cause a prec >= 10 can lead to overflow errors
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8004ea2:	e00b      	b.n	8004ebc <_ftoa+0x184>
    buf[len++] = '0';
 8004ea4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ea6:	1c5a      	adds	r2, r3, #1
 8004ea8:	65fa      	str	r2, [r7, #92]	; 0x5c
 8004eaa:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8004eae:	4413      	add	r3, r2
 8004eb0:	2230      	movs	r2, #48	; 0x30
 8004eb2:	f803 2c48 	strb.w	r2, [r3, #-72]
    prec--;
 8004eb6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004eb8:	3b01      	subs	r3, #1
 8004eba:	673b      	str	r3, [r7, #112]	; 0x70
  while ((len < PRINTF_FTOA_BUFFER_SIZE) && (prec > 9U)) {
 8004ebc:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8004ebe:	2b1f      	cmp	r3, #31
 8004ec0:	d802      	bhi.n	8004ec8 <_ftoa+0x190>
 8004ec2:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ec4:	2b09      	cmp	r3, #9
 8004ec6:	d8ed      	bhi.n	8004ea4 <_ftoa+0x16c>
  }

  int whole = (int)value;
 8004ec8:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ecc:	f7fb fde6 	bl	8000a9c <__aeabi_d2iz>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	657b      	str	r3, [r7, #84]	; 0x54
  double tmp = (value - whole) * pow10[prec];
 8004ed4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004ed6:	f7fb fadd 	bl	8000494 <__aeabi_i2d>
 8004eda:	4603      	mov	r3, r0
 8004edc:	460c      	mov	r4, r1
 8004ede:	461a      	mov	r2, r3
 8004ee0:	4623      	mov	r3, r4
 8004ee2:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004ee6:	f7fb f987 	bl	80001f8 <__aeabi_dsub>
 8004eea:	4603      	mov	r3, r0
 8004eec:	460c      	mov	r4, r1
 8004eee:	4618      	mov	r0, r3
 8004ef0:	4621      	mov	r1, r4
 8004ef2:	4a56      	ldr	r2, [pc, #344]	; (800504c <_ftoa+0x314>)
 8004ef4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004ef6:	00db      	lsls	r3, r3, #3
 8004ef8:	4413      	add	r3, r2
 8004efa:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004efe:	461a      	mov	r2, r3
 8004f00:	4623      	mov	r3, r4
 8004f02:	f7fb fb31 	bl	8000568 <__aeabi_dmul>
 8004f06:	4603      	mov	r3, r0
 8004f08:	460c      	mov	r4, r1
 8004f0a:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  unsigned long frac = (unsigned long)tmp;
 8004f0e:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004f12:	f7fb fdeb 	bl	8000aec <__aeabi_d2uiz>
 8004f16:	4603      	mov	r3, r0
 8004f18:	653b      	str	r3, [r7, #80]	; 0x50
  diff = tmp - frac;
 8004f1a:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004f1c:	f7fb faaa 	bl	8000474 <__aeabi_ui2d>
 8004f20:	4603      	mov	r3, r0
 8004f22:	460c      	mov	r4, r1
 8004f24:	461a      	mov	r2, r3
 8004f26:	4623      	mov	r3, r4
 8004f28:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8004f2c:	f7fb f964 	bl	80001f8 <__aeabi_dsub>
 8004f30:	4603      	mov	r3, r0
 8004f32:	460c      	mov	r4, r1
 8004f34:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40

  if (diff > 0.5) {
 8004f38:	f04f 0200 	mov.w	r2, #0
 8004f3c:	4b44      	ldr	r3, [pc, #272]	; (8005050 <_ftoa+0x318>)
 8004f3e:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004f42:	f7fb fda1 	bl	8000a88 <__aeabi_dcmpgt>
 8004f46:	4603      	mov	r3, r0
 8004f48:	2b00      	cmp	r3, #0
 8004f4a:	d018      	beq.n	8004f7e <_ftoa+0x246>
    ++frac;
 8004f4c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f4e:	3301      	adds	r3, #1
 8004f50:	653b      	str	r3, [r7, #80]	; 0x50
    // handle rollover, e.g. case 0.99 with prec 1 is 1.0
    if (frac >= pow10[prec]) {
 8004f52:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8004f54:	f7fb fa8e 	bl	8000474 <__aeabi_ui2d>
 8004f58:	4a3c      	ldr	r2, [pc, #240]	; (800504c <_ftoa+0x314>)
 8004f5a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004f5c:	00db      	lsls	r3, r3, #3
 8004f5e:	4413      	add	r3, r2
 8004f60:	e9d3 3400 	ldrd	r3, r4, [r3]
 8004f64:	461a      	mov	r2, r3
 8004f66:	4623      	mov	r3, r4
 8004f68:	f7fb fd84 	bl	8000a74 <__aeabi_dcmpge>
 8004f6c:	4603      	mov	r3, r0
 8004f6e:	2b00      	cmp	r3, #0
 8004f70:	d01a      	beq.n	8004fa8 <_ftoa+0x270>
      frac = 0;
 8004f72:	2300      	movs	r3, #0
 8004f74:	653b      	str	r3, [r7, #80]	; 0x50
      ++whole;
 8004f76:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004f78:	3301      	adds	r3, #1
 8004f7a:	657b      	str	r3, [r7, #84]	; 0x54
 8004f7c:	e014      	b.n	8004fa8 <_ftoa+0x270>
    }
  }
  else if (diff < 0.5) {
 8004f7e:	f04f 0200 	mov.w	r2, #0
 8004f82:	4b33      	ldr	r3, [pc, #204]	; (8005050 <_ftoa+0x318>)
 8004f84:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004f88:	f7fb fd60 	bl	8000a4c <__aeabi_dcmplt>
 8004f8c:	4603      	mov	r3, r0
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	d10a      	bne.n	8004fa8 <_ftoa+0x270>
  }
  else if ((frac == 0U) || (frac & 1U)) {
 8004f92:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d004      	beq.n	8004fa2 <_ftoa+0x26a>
 8004f98:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004f9a:	f003 0301 	and.w	r3, r3, #1
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d002      	beq.n	8004fa8 <_ftoa+0x270>
    // if halfway, round up if odd OR if last digit is 0
    ++frac;
 8004fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8004fa4:	3301      	adds	r3, #1
 8004fa6:	653b      	str	r3, [r7, #80]	; 0x50
  }

  if (prec == 0U) {
 8004fa8:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d136      	bne.n	800501c <_ftoa+0x2e4>
    diff = value - (double)whole;
 8004fae:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8004fb0:	f7fb fa70 	bl	8000494 <__aeabi_i2d>
 8004fb4:	4603      	mov	r3, r0
 8004fb6:	460c      	mov	r4, r1
 8004fb8:	461a      	mov	r2, r3
 8004fba:	4623      	mov	r3, r4
 8004fbc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004fc0:	f7fb f91a 	bl	80001f8 <__aeabi_dsub>
 8004fc4:	4603      	mov	r3, r0
 8004fc6:	460c      	mov	r4, r1
 8004fc8:	e9c7 3410 	strd	r3, r4, [r7, #64]	; 0x40
    if ((!(diff < 0.5) || (diff > 0.5)) && (whole & 1)) {
 8004fcc:	2301      	movs	r3, #1
 8004fce:	461c      	mov	r4, r3
 8004fd0:	f04f 0200 	mov.w	r2, #0
 8004fd4:	4b1e      	ldr	r3, [pc, #120]	; (8005050 <_ftoa+0x318>)
 8004fd6:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004fda:	f7fb fd37 	bl	8000a4c <__aeabi_dcmplt>
 8004fde:	4603      	mov	r3, r0
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d101      	bne.n	8004fe8 <_ftoa+0x2b0>
 8004fe4:	2300      	movs	r3, #0
 8004fe6:	461c      	mov	r4, r3
 8004fe8:	b2e3      	uxtb	r3, r4
 8004fea:	f083 0301 	eor.w	r3, r3, #1
 8004fee:	b2db      	uxtb	r3, r3
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d109      	bne.n	8005008 <_ftoa+0x2d0>
 8004ff4:	f04f 0200 	mov.w	r2, #0
 8004ff8:	4b15      	ldr	r3, [pc, #84]	; (8005050 <_ftoa+0x318>)
 8004ffa:	e9d7 0110 	ldrd	r0, r1, [r7, #64]	; 0x40
 8004ffe:	f7fb fd43 	bl	8000a88 <__aeabi_dcmpgt>
 8005002:	4603      	mov	r3, r0
 8005004:	2b00      	cmp	r3, #0
 8005006:	d069      	beq.n	80050dc <_ftoa+0x3a4>
 8005008:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	f000 8087 	beq.w	8005122 <_ftoa+0x3ea>
      // exactly 0.5 and ODD, then round up
      // 1.5 -> 2, but 2.5 -> 2
      ++whole;
 8005014:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005016:	3301      	adds	r3, #1
 8005018:	657b      	str	r3, [r7, #84]	; 0x54
 800501a:	e082      	b.n	8005122 <_ftoa+0x3ea>
    }
  }
  else {
    unsigned int count = prec;
 800501c:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800501e:	64fb      	str	r3, [r7, #76]	; 0x4c
    // now do fractional part, as an unsigned number
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005020:	e039      	b.n	8005096 <_ftoa+0x35e>
 8005022:	bf00      	nop
 8005024:	f3af 8000 	nop.w
 8005028:	00000000 	.word	0x00000000
 800502c:	41cdcd65 	.word	0x41cdcd65
 8005030:	00000000 	.word	0x00000000
 8005034:	c1cdcd65 	.word	0xc1cdcd65
 8005038:	08011a68 	.word	0x08011a68
 800503c:	08011a6c 	.word	0x08011a6c
 8005040:	7fefffff 	.word	0x7fefffff
 8005044:	08011a74 	.word	0x08011a74
 8005048:	08011a7c 	.word	0x08011a7c
 800504c:	0802c888 	.word	0x0802c888
 8005050:	3fe00000 	.word	0x3fe00000
      --count;
 8005054:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005056:	3b01      	subs	r3, #1
 8005058:	64fb      	str	r3, [r7, #76]	; 0x4c
      buf[len++] = (char)(48U + (frac % 10U));
 800505a:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800505c:	4b69      	ldr	r3, [pc, #420]	; (8005204 <_ftoa+0x4cc>)
 800505e:	fba3 2301 	umull	r2, r3, r3, r1
 8005062:	08da      	lsrs	r2, r3, #3
 8005064:	4613      	mov	r3, r2
 8005066:	009b      	lsls	r3, r3, #2
 8005068:	4413      	add	r3, r2
 800506a:	005b      	lsls	r3, r3, #1
 800506c:	1aca      	subs	r2, r1, r3
 800506e:	b2d2      	uxtb	r2, r2
 8005070:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005072:	1c59      	adds	r1, r3, #1
 8005074:	65f9      	str	r1, [r7, #92]	; 0x5c
 8005076:	3230      	adds	r2, #48	; 0x30
 8005078:	b2d2      	uxtb	r2, r2
 800507a:	f107 0160 	add.w	r1, r7, #96	; 0x60
 800507e:	440b      	add	r3, r1
 8005080:	f803 2c48 	strb.w	r2, [r3, #-72]
      if (!(frac /= 10U)) {
 8005084:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005086:	4a5f      	ldr	r2, [pc, #380]	; (8005204 <_ftoa+0x4cc>)
 8005088:	fba2 2303 	umull	r2, r3, r2, r3
 800508c:	08db      	lsrs	r3, r3, #3
 800508e:	653b      	str	r3, [r7, #80]	; 0x50
 8005090:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005092:	2b00      	cmp	r3, #0
 8005094:	d003      	beq.n	800509e <_ftoa+0x366>
    while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005096:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005098:	2b1f      	cmp	r3, #31
 800509a:	d9db      	bls.n	8005054 <_ftoa+0x31c>
 800509c:	e00a      	b.n	80050b4 <_ftoa+0x37c>
        break;
 800509e:	bf00      	nop
      }
    }
    // add extra 0s
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80050a0:	e008      	b.n	80050b4 <_ftoa+0x37c>
      buf[len++] = '0';
 80050a2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050a4:	1c5a      	adds	r2, r3, #1
 80050a6:	65fa      	str	r2, [r7, #92]	; 0x5c
 80050a8:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80050ac:	4413      	add	r3, r2
 80050ae:	2230      	movs	r2, #48	; 0x30
 80050b0:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < PRINTF_FTOA_BUFFER_SIZE) && (count-- > 0U)) {
 80050b4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050b6:	2b1f      	cmp	r3, #31
 80050b8:	d804      	bhi.n	80050c4 <_ftoa+0x38c>
 80050ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80050bc:	1e5a      	subs	r2, r3, #1
 80050be:	64fa      	str	r2, [r7, #76]	; 0x4c
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d1ee      	bne.n	80050a2 <_ftoa+0x36a>
    }
    if (len < PRINTF_FTOA_BUFFER_SIZE) {
 80050c4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050c6:	2b1f      	cmp	r3, #31
 80050c8:	d82b      	bhi.n	8005122 <_ftoa+0x3ea>
      // add decimal
      buf[len++] = '.';
 80050ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050cc:	1c5a      	adds	r2, r3, #1
 80050ce:	65fa      	str	r2, [r7, #92]	; 0x5c
 80050d0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80050d4:	4413      	add	r3, r2
 80050d6:	222e      	movs	r2, #46	; 0x2e
 80050d8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  // do whole part, number is reversed
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 80050dc:	e021      	b.n	8005122 <_ftoa+0x3ea>
    buf[len++] = (char)(48 + (whole % 10));
 80050de:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80050e0:	4b49      	ldr	r3, [pc, #292]	; (8005208 <_ftoa+0x4d0>)
 80050e2:	fb83 1302 	smull	r1, r3, r3, r2
 80050e6:	1099      	asrs	r1, r3, #2
 80050e8:	17d3      	asrs	r3, r2, #31
 80050ea:	1ac9      	subs	r1, r1, r3
 80050ec:	460b      	mov	r3, r1
 80050ee:	009b      	lsls	r3, r3, #2
 80050f0:	440b      	add	r3, r1
 80050f2:	005b      	lsls	r3, r3, #1
 80050f4:	1ad1      	subs	r1, r2, r3
 80050f6:	b2ca      	uxtb	r2, r1
 80050f8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80050fa:	1c59      	adds	r1, r3, #1
 80050fc:	65f9      	str	r1, [r7, #92]	; 0x5c
 80050fe:	3230      	adds	r2, #48	; 0x30
 8005100:	b2d2      	uxtb	r2, r2
 8005102:	f107 0160 	add.w	r1, r7, #96	; 0x60
 8005106:	440b      	add	r3, r1
 8005108:	f803 2c48 	strb.w	r2, [r3, #-72]
    if (!(whole /= 10)) {
 800510c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800510e:	4a3e      	ldr	r2, [pc, #248]	; (8005208 <_ftoa+0x4d0>)
 8005110:	fb82 1203 	smull	r1, r2, r2, r3
 8005114:	1092      	asrs	r2, r2, #2
 8005116:	17db      	asrs	r3, r3, #31
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	657b      	str	r3, [r7, #84]	; 0x54
 800511c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800511e:	2b00      	cmp	r3, #0
 8005120:	d003      	beq.n	800512a <_ftoa+0x3f2>
  while (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005122:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005124:	2b1f      	cmp	r3, #31
 8005126:	d9da      	bls.n	80050de <_ftoa+0x3a6>
 8005128:	e000      	b.n	800512c <_ftoa+0x3f4>
      break;
 800512a:	bf00      	nop
    }
  }

  // pad leading zeros
  if (!(flags & FLAGS_LEFT) && (flags & FLAGS_ZEROPAD)) {
 800512c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800512e:	f003 0302 	and.w	r3, r3, #2
 8005132:	2b00      	cmp	r3, #0
 8005134:	d124      	bne.n	8005180 <_ftoa+0x448>
 8005136:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b00      	cmp	r3, #0
 800513e:	d01f      	beq.n	8005180 <_ftoa+0x448>
    if (width && (negative || (flags & (FLAGS_PLUS | FLAGS_SPACE)))) {
 8005140:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005142:	2b00      	cmp	r3, #0
 8005144:	d015      	beq.n	8005172 <_ftoa+0x43a>
 8005146:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800514a:	2b00      	cmp	r3, #0
 800514c:	d104      	bne.n	8005158 <_ftoa+0x420>
 800514e:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8005150:	f003 030c 	and.w	r3, r3, #12
 8005154:	2b00      	cmp	r3, #0
 8005156:	d00c      	beq.n	8005172 <_ftoa+0x43a>
      width--;
 8005158:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800515a:	3b01      	subs	r3, #1
 800515c:	677b      	str	r3, [r7, #116]	; 0x74
    }
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 800515e:	e008      	b.n	8005172 <_ftoa+0x43a>
      buf[len++] = '0';
 8005160:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005162:	1c5a      	adds	r2, r3, #1
 8005164:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005166:	f107 0260 	add.w	r2, r7, #96	; 0x60
 800516a:	4413      	add	r3, r2
 800516c:	2230      	movs	r2, #48	; 0x30
 800516e:	f803 2c48 	strb.w	r2, [r3, #-72]
    while ((len < width) && (len < PRINTF_FTOA_BUFFER_SIZE)) {
 8005172:	6dfa      	ldr	r2, [r7, #92]	; 0x5c
 8005174:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8005176:	429a      	cmp	r2, r3
 8005178:	d202      	bcs.n	8005180 <_ftoa+0x448>
 800517a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800517c:	2b1f      	cmp	r3, #31
 800517e:	d9ef      	bls.n	8005160 <_ftoa+0x428>
    }
  }

  if (len < PRINTF_FTOA_BUFFER_SIZE) {
 8005180:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005182:	2b1f      	cmp	r3, #31
 8005184:	d82a      	bhi.n	80051dc <_ftoa+0x4a4>
    if (negative) {
 8005186:	f897 305b 	ldrb.w	r3, [r7, #91]	; 0x5b
 800518a:	2b00      	cmp	r3, #0
 800518c:	d009      	beq.n	80051a2 <_ftoa+0x46a>
      buf[len++] = '-';
 800518e:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8005190:	1c5a      	adds	r2, r3, #1
 8005192:	65fa      	str	r2, [r7, #92]	; 0x5c
 8005194:	f107 0260 	add.w	r2, r7, #96	; 0x60
 8005198:	4413      	add	r3, r2
 800519a:	222d      	movs	r2, #45	; 0x2d
 800519c:	f803 2c48 	strb.w	r2, [r3, #-72]
 80051a0:	e01c      	b.n	80051dc <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_PLUS) {
 80051a2:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051a4:	f003 0304 	and.w	r3, r3, #4
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d009      	beq.n	80051c0 <_ftoa+0x488>
      buf[len++] = '+';  // ignore the space if the '+' exists
 80051ac:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051ae:	1c5a      	adds	r2, r3, #1
 80051b0:	65fa      	str	r2, [r7, #92]	; 0x5c
 80051b2:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80051b6:	4413      	add	r3, r2
 80051b8:	222b      	movs	r2, #43	; 0x2b
 80051ba:	f803 2c48 	strb.w	r2, [r3, #-72]
 80051be:	e00d      	b.n	80051dc <_ftoa+0x4a4>
    }
    else if (flags & FLAGS_SPACE) {
 80051c0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051c2:	f003 0308 	and.w	r3, r3, #8
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d008      	beq.n	80051dc <_ftoa+0x4a4>
      buf[len++] = ' ';
 80051ca:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051cc:	1c5a      	adds	r2, r3, #1
 80051ce:	65fa      	str	r2, [r7, #92]	; 0x5c
 80051d0:	f107 0260 	add.w	r2, r7, #96	; 0x60
 80051d4:	4413      	add	r3, r2
 80051d6:	2220      	movs	r2, #32
 80051d8:	f803 2c48 	strb.w	r2, [r3, #-72]
    }
  }

  return _out_rev(out, buffer, idx, maxlen, buf, len, width, flags);
 80051dc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80051de:	9303      	str	r3, [sp, #12]
 80051e0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80051e2:	9302      	str	r3, [sp, #8]
 80051e4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 80051e6:	9301      	str	r3, [sp, #4]
 80051e8:	f107 0318 	add.w	r3, r7, #24
 80051ec:	9300      	str	r3, [sp, #0]
 80051ee:	68bb      	ldr	r3, [r7, #8]
 80051f0:	68fa      	ldr	r2, [r7, #12]
 80051f2:	6939      	ldr	r1, [r7, #16]
 80051f4:	6978      	ldr	r0, [r7, #20]
 80051f6:	f7ff fb9b 	bl	8004930 <_out_rev>
 80051fa:	4603      	mov	r3, r0
}
 80051fc:	4618      	mov	r0, r3
 80051fe:	3764      	adds	r7, #100	; 0x64
 8005200:	46bd      	mov	sp, r7
 8005202:	bd90      	pop	{r4, r7, pc}
 8005204:	cccccccd 	.word	0xcccccccd
 8005208:	66666667 	.word	0x66666667
 800520c:	00000000 	.word	0x00000000

08005210 <_etoa>:


#if defined(PRINTF_SUPPORT_EXPONENTIAL)
// internal ftoa variant for exponential floating-point type, contributed by Martijn Jasperse <m.jasperse@gmail.com>
static size_t _etoa(out_fct_type out, char* buffer, size_t idx, size_t maxlen, double value, unsigned int prec, unsigned int width, unsigned int flags)
{
 8005210:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005214:	b09d      	sub	sp, #116	; 0x74
 8005216:	af06      	add	r7, sp, #24
 8005218:	61f8      	str	r0, [r7, #28]
 800521a:	61b9      	str	r1, [r7, #24]
 800521c:	617a      	str	r2, [r7, #20]
 800521e:	613b      	str	r3, [r7, #16]
 8005220:	ed87 0b02 	vstr	d0, [r7, #8]
  // check for NaN and special values
  if ((value != value) || (value > DBL_MAX) || (value < -DBL_MAX)) {
 8005224:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005228:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800522c:	f7fb fc04 	bl	8000a38 <__aeabi_dcmpeq>
 8005230:	4603      	mov	r3, r0
 8005232:	2b00      	cmp	r3, #0
 8005234:	d014      	beq.n	8005260 <_etoa+0x50>
 8005236:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800523a:	4bc9      	ldr	r3, [pc, #804]	; (8005560 <_etoa+0x350>)
 800523c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005240:	f7fb fc22 	bl	8000a88 <__aeabi_dcmpgt>
 8005244:	4603      	mov	r3, r0
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10a      	bne.n	8005260 <_etoa+0x50>
 800524a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800524e:	f46f 1380 	mvn.w	r3, #1048576	; 0x100000
 8005252:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005256:	f7fb fbf9 	bl	8000a4c <__aeabi_dcmplt>
 800525a:	4603      	mov	r3, r0
 800525c:	2b00      	cmp	r3, #0
 800525e:	d012      	beq.n	8005286 <_etoa+0x76>
    return _ftoa(out, buffer, idx, maxlen, value, prec, width, flags);
 8005260:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005264:	9302      	str	r3, [sp, #8]
 8005266:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800526a:	9301      	str	r3, [sp, #4]
 800526c:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005270:	9300      	str	r3, [sp, #0]
 8005272:	ed97 0b02 	vldr	d0, [r7, #8]
 8005276:	693b      	ldr	r3, [r7, #16]
 8005278:	697a      	ldr	r2, [r7, #20]
 800527a:	69b9      	ldr	r1, [r7, #24]
 800527c:	69f8      	ldr	r0, [r7, #28]
 800527e:	f7ff fd5b 	bl	8004d38 <_ftoa>
 8005282:	4603      	mov	r3, r0
 8005284:	e24f      	b.n	8005726 <_etoa+0x516>
  }

  // determine the sign
  const bool negative = value < 0;
 8005286:	2301      	movs	r3, #1
 8005288:	461c      	mov	r4, r3
 800528a:	f04f 0200 	mov.w	r2, #0
 800528e:	f04f 0300 	mov.w	r3, #0
 8005292:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005296:	f7fb fbd9 	bl	8000a4c <__aeabi_dcmplt>
 800529a:	4603      	mov	r3, r0
 800529c:	2b00      	cmp	r3, #0
 800529e:	d101      	bne.n	80052a4 <_etoa+0x94>
 80052a0:	2300      	movs	r3, #0
 80052a2:	461c      	mov	r4, r3
 80052a4:	f887 404b 	strb.w	r4, [r7, #75]	; 0x4b
  if (negative) {
 80052a8:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 80052ac:	2b00      	cmp	r3, #0
 80052ae:	d005      	beq.n	80052bc <_etoa+0xac>
    value = -value;
 80052b0:	68bb      	ldr	r3, [r7, #8]
 80052b2:	60bb      	str	r3, [r7, #8]
 80052b4:	68fb      	ldr	r3, [r7, #12]
 80052b6:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000
 80052ba:	60fb      	str	r3, [r7, #12]
  }

  // default precision
  if (!(flags & FLAGS_PRECISION)) {
 80052bc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80052c0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80052c4:	2b00      	cmp	r3, #0
 80052c6:	d102      	bne.n	80052ce <_etoa+0xbe>
    prec = PRINTF_DEFAULT_FLOAT_PRECISION;
 80052c8:	2306      	movs	r3, #6
 80052ca:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
  union {
    uint64_t U;
    double   F;
  } conv;

  conv.F = value;
 80052ce:	e9d7 3402 	ldrd	r3, r4, [r7, #8]
 80052d2:	e9c7 3408 	strd	r3, r4, [r7, #32]
  int exp2 = (int)((conv.U >> 52U) & 0x07FFU) - 1023;           // effectively log2
 80052d6:	e9d7 1208 	ldrd	r1, r2, [r7, #32]
 80052da:	f04f 0300 	mov.w	r3, #0
 80052de:	f04f 0400 	mov.w	r4, #0
 80052e2:	0d13      	lsrs	r3, r2, #20
 80052e4:	2400      	movs	r4, #0
 80052e6:	f3c3 030a 	ubfx	r3, r3, #0, #11
 80052ea:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80052ee:	647b      	str	r3, [r7, #68]	; 0x44
  conv.U = (conv.U & ((1ULL << 52U) - 1U)) | (1023ULL << 52U);  // drop the exponent so conv.F is now in [1,2)
 80052f0:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80052f4:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80052f8:	4a9a      	ldr	r2, [pc, #616]	; (8005564 <_etoa+0x354>)
 80052fa:	ea03 0801 	and.w	r8, r3, r1
 80052fe:	ea04 0902 	and.w	r9, r4, r2
 8005302:	f04f 0100 	mov.w	r1, #0
 8005306:	4a98      	ldr	r2, [pc, #608]	; (8005568 <_etoa+0x358>)
 8005308:	ea48 0301 	orr.w	r3, r8, r1
 800530c:	ea49 0402 	orr.w	r4, r9, r2
 8005310:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // now approximate log10 from the log2 integer part and an expansion of ln around 1.5
  int expval = (int)(0.1760912590558 + exp2 * 0.301029995663981 + (conv.F - 1.5) * 0.289529654602168);
 8005314:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8005316:	f7fb f8bd 	bl	8000494 <__aeabi_i2d>
 800531a:	a385      	add	r3, pc, #532	; (adr r3, 8005530 <_etoa+0x320>)
 800531c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005320:	f7fb f922 	bl	8000568 <__aeabi_dmul>
 8005324:	4603      	mov	r3, r0
 8005326:	460c      	mov	r4, r1
 8005328:	4618      	mov	r0, r3
 800532a:	4621      	mov	r1, r4
 800532c:	a382      	add	r3, pc, #520	; (adr r3, 8005538 <_etoa+0x328>)
 800532e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005332:	f7fa ff63 	bl	80001fc <__adddf3>
 8005336:	4603      	mov	r3, r0
 8005338:	460c      	mov	r4, r1
 800533a:	4698      	mov	r8, r3
 800533c:	46a1      	mov	r9, r4
 800533e:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 8005342:	f04f 0200 	mov.w	r2, #0
 8005346:	4b89      	ldr	r3, [pc, #548]	; (800556c <_etoa+0x35c>)
 8005348:	f7fa ff56 	bl	80001f8 <__aeabi_dsub>
 800534c:	4603      	mov	r3, r0
 800534e:	460c      	mov	r4, r1
 8005350:	4618      	mov	r0, r3
 8005352:	4621      	mov	r1, r4
 8005354:	a37a      	add	r3, pc, #488	; (adr r3, 8005540 <_etoa+0x330>)
 8005356:	e9d3 2300 	ldrd	r2, r3, [r3]
 800535a:	f7fb f905 	bl	8000568 <__aeabi_dmul>
 800535e:	4603      	mov	r3, r0
 8005360:	460c      	mov	r4, r1
 8005362:	461a      	mov	r2, r3
 8005364:	4623      	mov	r3, r4
 8005366:	4640      	mov	r0, r8
 8005368:	4649      	mov	r1, r9
 800536a:	f7fa ff47 	bl	80001fc <__adddf3>
 800536e:	4603      	mov	r3, r0
 8005370:	460c      	mov	r4, r1
 8005372:	4618      	mov	r0, r3
 8005374:	4621      	mov	r1, r4
 8005376:	f7fb fb91 	bl	8000a9c <__aeabi_d2iz>
 800537a:	4603      	mov	r3, r0
 800537c:	657b      	str	r3, [r7, #84]	; 0x54
  // now we want to compute 10^expval but we want to be sure it won't overflow
  exp2 = (int)(expval * 3.321928094887362 + 0.5);
 800537e:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005380:	f7fb f888 	bl	8000494 <__aeabi_i2d>
 8005384:	a370      	add	r3, pc, #448	; (adr r3, 8005548 <_etoa+0x338>)
 8005386:	e9d3 2300 	ldrd	r2, r3, [r3]
 800538a:	f7fb f8ed 	bl	8000568 <__aeabi_dmul>
 800538e:	4603      	mov	r3, r0
 8005390:	460c      	mov	r4, r1
 8005392:	4618      	mov	r0, r3
 8005394:	4621      	mov	r1, r4
 8005396:	f04f 0200 	mov.w	r2, #0
 800539a:	4b75      	ldr	r3, [pc, #468]	; (8005570 <_etoa+0x360>)
 800539c:	f7fa ff2e 	bl	80001fc <__adddf3>
 80053a0:	4603      	mov	r3, r0
 80053a2:	460c      	mov	r4, r1
 80053a4:	4618      	mov	r0, r3
 80053a6:	4621      	mov	r1, r4
 80053a8:	f7fb fb78 	bl	8000a9c <__aeabi_d2iz>
 80053ac:	4603      	mov	r3, r0
 80053ae:	647b      	str	r3, [r7, #68]	; 0x44
  const double z  = expval * 2.302585092994046 - exp2 * 0.6931471805599453;
 80053b0:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80053b2:	f7fb f86f 	bl	8000494 <__aeabi_i2d>
 80053b6:	a366      	add	r3, pc, #408	; (adr r3, 8005550 <_etoa+0x340>)
 80053b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053bc:	f7fb f8d4 	bl	8000568 <__aeabi_dmul>
 80053c0:	4603      	mov	r3, r0
 80053c2:	460c      	mov	r4, r1
 80053c4:	4698      	mov	r8, r3
 80053c6:	46a1      	mov	r9, r4
 80053c8:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80053ca:	f7fb f863 	bl	8000494 <__aeabi_i2d>
 80053ce:	a362      	add	r3, pc, #392	; (adr r3, 8005558 <_etoa+0x348>)
 80053d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d4:	f7fb f8c8 	bl	8000568 <__aeabi_dmul>
 80053d8:	4603      	mov	r3, r0
 80053da:	460c      	mov	r4, r1
 80053dc:	461a      	mov	r2, r3
 80053de:	4623      	mov	r3, r4
 80053e0:	4640      	mov	r0, r8
 80053e2:	4649      	mov	r1, r9
 80053e4:	f7fa ff08 	bl	80001f8 <__aeabi_dsub>
 80053e8:	4603      	mov	r3, r0
 80053ea:	460c      	mov	r4, r1
 80053ec:	e9c7 340e 	strd	r3, r4, [r7, #56]	; 0x38
  const double z2 = z * z;
 80053f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80053f4:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 80053f8:	f7fb f8b6 	bl	8000568 <__aeabi_dmul>
 80053fc:	4603      	mov	r3, r0
 80053fe:	460c      	mov	r4, r1
 8005400:	e9c7 340c 	strd	r3, r4, [r7, #48]	; 0x30
  conv.U = (uint64_t)(exp2 + 1023) << 52U;
 8005404:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8005406:	f203 33ff 	addw	r3, r3, #1023	; 0x3ff
 800540a:	4619      	mov	r1, r3
 800540c:	ea4f 72e1 	mov.w	r2, r1, asr #31
 8005410:	f04f 0300 	mov.w	r3, #0
 8005414:	f04f 0400 	mov.w	r4, #0
 8005418:	050c      	lsls	r4, r1, #20
 800541a:	2300      	movs	r3, #0
 800541c:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // compute exp(z) using continued fractions, see https://en.wikipedia.org/wiki/Exponential_function#Continued_fractions_for_ex
  conv.F *= 1 + 2 * z / (2 - z + (z2 / (6 + (z2 / (10 + z2 / 14)))));
 8005420:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005424:	e9d7 010e 	ldrd	r0, r1, [r7, #56]	; 0x38
 8005428:	4602      	mov	r2, r0
 800542a:	460b      	mov	r3, r1
 800542c:	f7fa fee6 	bl	80001fc <__adddf3>
 8005430:	4603      	mov	r3, r0
 8005432:	460c      	mov	r4, r1
 8005434:	469a      	mov	sl, r3
 8005436:	46a3      	mov	fp, r4
 8005438:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800543c:	f04f 0000 	mov.w	r0, #0
 8005440:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8005444:	f7fa fed8 	bl	80001f8 <__aeabi_dsub>
 8005448:	4603      	mov	r3, r0
 800544a:	460c      	mov	r4, r1
 800544c:	e9c7 3400 	strd	r3, r4, [r7]
 8005450:	f04f 0200 	mov.w	r2, #0
 8005454:	4b47      	ldr	r3, [pc, #284]	; (8005574 <_etoa+0x364>)
 8005456:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800545a:	f7fb f9af 	bl	80007bc <__aeabi_ddiv>
 800545e:	4603      	mov	r3, r0
 8005460:	460c      	mov	r4, r1
 8005462:	4618      	mov	r0, r3
 8005464:	4621      	mov	r1, r4
 8005466:	f04f 0200 	mov.w	r2, #0
 800546a:	4b43      	ldr	r3, [pc, #268]	; (8005578 <_etoa+0x368>)
 800546c:	f7fa fec6 	bl	80001fc <__adddf3>
 8005470:	4603      	mov	r3, r0
 8005472:	460c      	mov	r4, r1
 8005474:	461a      	mov	r2, r3
 8005476:	4623      	mov	r3, r4
 8005478:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800547c:	f7fb f99e 	bl	80007bc <__aeabi_ddiv>
 8005480:	4603      	mov	r3, r0
 8005482:	460c      	mov	r4, r1
 8005484:	4618      	mov	r0, r3
 8005486:	4621      	mov	r1, r4
 8005488:	f04f 0200 	mov.w	r2, #0
 800548c:	4b3b      	ldr	r3, [pc, #236]	; (800557c <_etoa+0x36c>)
 800548e:	f7fa feb5 	bl	80001fc <__adddf3>
 8005492:	4603      	mov	r3, r0
 8005494:	460c      	mov	r4, r1
 8005496:	461a      	mov	r2, r3
 8005498:	4623      	mov	r3, r4
 800549a:	e9d7 010c 	ldrd	r0, r1, [r7, #48]	; 0x30
 800549e:	f7fb f98d 	bl	80007bc <__aeabi_ddiv>
 80054a2:	4603      	mov	r3, r0
 80054a4:	460c      	mov	r4, r1
 80054a6:	461a      	mov	r2, r3
 80054a8:	4623      	mov	r3, r4
 80054aa:	e9d7 0100 	ldrd	r0, r1, [r7]
 80054ae:	f7fa fea5 	bl	80001fc <__adddf3>
 80054b2:	4603      	mov	r3, r0
 80054b4:	460c      	mov	r4, r1
 80054b6:	461a      	mov	r2, r3
 80054b8:	4623      	mov	r3, r4
 80054ba:	4650      	mov	r0, sl
 80054bc:	4659      	mov	r1, fp
 80054be:	f7fb f97d 	bl	80007bc <__aeabi_ddiv>
 80054c2:	4603      	mov	r3, r0
 80054c4:	460c      	mov	r4, r1
 80054c6:	4618      	mov	r0, r3
 80054c8:	4621      	mov	r1, r4
 80054ca:	f04f 0200 	mov.w	r2, #0
 80054ce:	4b26      	ldr	r3, [pc, #152]	; (8005568 <_etoa+0x358>)
 80054d0:	f7fa fe94 	bl	80001fc <__adddf3>
 80054d4:	4603      	mov	r3, r0
 80054d6:	460c      	mov	r4, r1
 80054d8:	461a      	mov	r2, r3
 80054da:	4623      	mov	r3, r4
 80054dc:	4640      	mov	r0, r8
 80054de:	4649      	mov	r1, r9
 80054e0:	f7fb f842 	bl	8000568 <__aeabi_dmul>
 80054e4:	4603      	mov	r3, r0
 80054e6:	460c      	mov	r4, r1
 80054e8:	e9c7 3408 	strd	r3, r4, [r7, #32]
  // correct for rounding errors
  if (value < conv.F) {
 80054ec:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 80054f0:	461a      	mov	r2, r3
 80054f2:	4623      	mov	r3, r4
 80054f4:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80054f8:	f7fb faa8 	bl	8000a4c <__aeabi_dcmplt>
 80054fc:	4603      	mov	r3, r0
 80054fe:	2b00      	cmp	r3, #0
 8005500:	d00d      	beq.n	800551e <_etoa+0x30e>
    expval--;
 8005502:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005504:	3b01      	subs	r3, #1
 8005506:	657b      	str	r3, [r7, #84]	; 0x54
    conv.F /= 10;
 8005508:	e9d7 0108 	ldrd	r0, r1, [r7, #32]
 800550c:	f04f 0200 	mov.w	r2, #0
 8005510:	4b19      	ldr	r3, [pc, #100]	; (8005578 <_etoa+0x368>)
 8005512:	f7fb f953 	bl	80007bc <__aeabi_ddiv>
 8005516:	4603      	mov	r3, r0
 8005518:	460c      	mov	r4, r1
 800551a:	e9c7 3408 	strd	r3, r4, [r7, #32]
  }

  // the exponent format is "%+03d" and largest value is "307", so set aside 4-5 characters
  unsigned int minwidth = ((expval < 100) && (expval > -100)) ? 4U : 5U;
 800551e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005520:	2b63      	cmp	r3, #99	; 0x63
 8005522:	dc2d      	bgt.n	8005580 <_etoa+0x370>
 8005524:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005526:	f113 0f63 	cmn.w	r3, #99	; 0x63
 800552a:	db29      	blt.n	8005580 <_etoa+0x370>
 800552c:	2304      	movs	r3, #4
 800552e:	e028      	b.n	8005582 <_etoa+0x372>
 8005530:	509f79fb 	.word	0x509f79fb
 8005534:	3fd34413 	.word	0x3fd34413
 8005538:	8b60c8b3 	.word	0x8b60c8b3
 800553c:	3fc68a28 	.word	0x3fc68a28
 8005540:	636f4361 	.word	0x636f4361
 8005544:	3fd287a7 	.word	0x3fd287a7
 8005548:	0979a371 	.word	0x0979a371
 800554c:	400a934f 	.word	0x400a934f
 8005550:	bbb55516 	.word	0xbbb55516
 8005554:	40026bb1 	.word	0x40026bb1
 8005558:	fefa39ef 	.word	0xfefa39ef
 800555c:	3fe62e42 	.word	0x3fe62e42
 8005560:	7fefffff 	.word	0x7fefffff
 8005564:	000fffff 	.word	0x000fffff
 8005568:	3ff00000 	.word	0x3ff00000
 800556c:	3ff80000 	.word	0x3ff80000
 8005570:	3fe00000 	.word	0x3fe00000
 8005574:	402c0000 	.word	0x402c0000
 8005578:	40240000 	.word	0x40240000
 800557c:	40180000 	.word	0x40180000
 8005580:	2305      	movs	r3, #5
 8005582:	653b      	str	r3, [r7, #80]	; 0x50

  // in "%g" mode, "prec" is the number of *significant figures* not decimals
  if (flags & FLAGS_ADAPT_EXP) {
 8005584:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8005588:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800558c:	2b00      	cmp	r3, #0
 800558e:	d03d      	beq.n	800560c <_etoa+0x3fc>
    // do we want to fall-back to "%f" mode?
    if ((value >= 1e-4) && (value < 1e6)) {
 8005590:	a367      	add	r3, pc, #412	; (adr r3, 8005730 <_etoa+0x520>)
 8005592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005596:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800559a:	f7fb fa6b 	bl	8000a74 <__aeabi_dcmpge>
 800559e:	4603      	mov	r3, r0
 80055a0:	2b00      	cmp	r3, #0
 80055a2:	d024      	beq.n	80055ee <_etoa+0x3de>
 80055a4:	a364      	add	r3, pc, #400	; (adr r3, 8005738 <_etoa+0x528>)
 80055a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055aa:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80055ae:	f7fb fa4d 	bl	8000a4c <__aeabi_dcmplt>
 80055b2:	4603      	mov	r3, r0
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	d01a      	beq.n	80055ee <_etoa+0x3de>
      if ((int)prec > expval) {
 80055b8:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055bc:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 80055be:	429a      	cmp	r2, r3
 80055c0:	da07      	bge.n	80055d2 <_etoa+0x3c2>
        prec = (unsigned)((int)prec - expval - 1);
 80055c2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80055c6:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	3b01      	subs	r3, #1
 80055cc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80055d0:	e002      	b.n	80055d8 <_etoa+0x3c8>
      }
      else {
        prec = 0;
 80055d2:	2300      	movs	r3, #0
 80055d4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
      flags |= FLAGS_PRECISION;   // make sure _ftoa respects precision
 80055d8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055dc:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80055e0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
      // no characters in exponent
      minwidth = 0U;
 80055e4:	2300      	movs	r3, #0
 80055e6:	653b      	str	r3, [r7, #80]	; 0x50
      expval   = 0;
 80055e8:	2300      	movs	r3, #0
 80055ea:	657b      	str	r3, [r7, #84]	; 0x54
 80055ec:	e00e      	b.n	800560c <_etoa+0x3fc>
    }
    else {
      // we use one sigfig for the whole part
      if ((prec > 0) && (flags & FLAGS_PRECISION)) {
 80055ee:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d00a      	beq.n	800560c <_etoa+0x3fc>
 80055f6:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80055fa:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80055fe:	2b00      	cmp	r3, #0
 8005600:	d004      	beq.n	800560c <_etoa+0x3fc>
        --prec;
 8005602:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 8005606:	3b01      	subs	r3, #1
 8005608:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
      }
    }
  }

  // will everything fit?
  unsigned int fwidth = width;
 800560c:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8005610:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (width > minwidth) {
 8005612:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005616:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005618:	429a      	cmp	r2, r3
 800561a:	d904      	bls.n	8005626 <_etoa+0x416>
    // we didn't fall-back so subtract the characters required for the exponent
    fwidth -= minwidth;
 800561c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800561e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005620:	1ad3      	subs	r3, r2, r3
 8005622:	64fb      	str	r3, [r7, #76]	; 0x4c
 8005624:	e001      	b.n	800562a <_etoa+0x41a>
  } else {
    // not enough characters, so go back to default sizing
    fwidth = 0U;
 8005626:	2300      	movs	r3, #0
 8005628:	64fb      	str	r3, [r7, #76]	; 0x4c
  }
  if ((flags & FLAGS_LEFT) && minwidth) {
 800562a:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800562e:	f003 0302 	and.w	r3, r3, #2
 8005632:	2b00      	cmp	r3, #0
 8005634:	d004      	beq.n	8005640 <_etoa+0x430>
 8005636:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005638:	2b00      	cmp	r3, #0
 800563a:	d001      	beq.n	8005640 <_etoa+0x430>
    // if we're padding on the right, DON'T pad the floating part
    fwidth = 0U;
 800563c:	2300      	movs	r3, #0
 800563e:	64fb      	str	r3, [r7, #76]	; 0x4c
  }

  // rescale the float value
  if (expval) {
 8005640:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005642:	2b00      	cmp	r3, #0
 8005644:	d00b      	beq.n	800565e <_etoa+0x44e>
    value /= conv.F;
 8005646:	e9d7 3408 	ldrd	r3, r4, [r7, #32]
 800564a:	461a      	mov	r2, r3
 800564c:	4623      	mov	r3, r4
 800564e:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8005652:	f7fb f8b3 	bl	80007bc <__aeabi_ddiv>
 8005656:	4603      	mov	r3, r0
 8005658:	460c      	mov	r4, r1
 800565a:	e9c7 3402 	strd	r3, r4, [r7, #8]
  }

  // output the floating part
  const size_t start_idx = idx;
 800565e:	697b      	ldr	r3, [r7, #20]
 8005660:	62fb      	str	r3, [r7, #44]	; 0x2c
  idx = _ftoa(out, buffer, idx, maxlen, negative ? -value : value, prec, fwidth, flags & ~FLAGS_ADAPT_EXP);
 8005662:	f897 304b 	ldrb.w	r3, [r7, #75]	; 0x4b
 8005666:	2b00      	cmp	r3, #0
 8005668:	d004      	beq.n	8005674 <_etoa+0x464>
 800566a:	68bd      	ldr	r5, [r7, #8]
 800566c:	68fb      	ldr	r3, [r7, #12]
 800566e:	f083 4600 	eor.w	r6, r3, #2147483648	; 0x80000000
 8005672:	e001      	b.n	8005678 <_etoa+0x468>
 8005674:	e9d7 5602 	ldrd	r5, r6, [r7, #8]
 8005678:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800567c:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8005680:	9302      	str	r3, [sp, #8]
 8005682:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005684:	9301      	str	r3, [sp, #4]
 8005686:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800568a:	9300      	str	r3, [sp, #0]
 800568c:	ec46 5b10 	vmov	d0, r5, r6
 8005690:	693b      	ldr	r3, [r7, #16]
 8005692:	697a      	ldr	r2, [r7, #20]
 8005694:	69b9      	ldr	r1, [r7, #24]
 8005696:	69f8      	ldr	r0, [r7, #28]
 8005698:	f7ff fb4e 	bl	8004d38 <_ftoa>
 800569c:	6178      	str	r0, [r7, #20]

  // output the exponent part
  if (minwidth) {
 800569e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80056a0:	2b00      	cmp	r3, #0
 80056a2:	d03f      	beq.n	8005724 <_etoa+0x514>
    // output the exponential symbol
    out((flags & FLAGS_UPPERCASE) ? 'E' : 'e', buffer, idx++, maxlen);
 80056a4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056a8:	f003 0320 	and.w	r3, r3, #32
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d001      	beq.n	80056b4 <_etoa+0x4a4>
 80056b0:	2045      	movs	r0, #69	; 0x45
 80056b2:	e000      	b.n	80056b6 <_etoa+0x4a6>
 80056b4:	2065      	movs	r0, #101	; 0x65
 80056b6:	697a      	ldr	r2, [r7, #20]
 80056b8:	1c53      	adds	r3, r2, #1
 80056ba:	617b      	str	r3, [r7, #20]
 80056bc:	69fc      	ldr	r4, [r7, #28]
 80056be:	693b      	ldr	r3, [r7, #16]
 80056c0:	69b9      	ldr	r1, [r7, #24]
 80056c2:	47a0      	blx	r4
    // output the exponent value
    idx = _ntoa_long(out, buffer, idx, maxlen, (expval < 0) ? -expval : expval, expval < 0, 10, 0, minwidth-1, FLAGS_ZEROPAD | FLAGS_PLUS);
 80056c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056c6:	2b00      	cmp	r3, #0
 80056c8:	bfb8      	it	lt
 80056ca:	425b      	neglt	r3, r3
 80056cc:	4618      	mov	r0, r3
 80056ce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80056d0:	0fdb      	lsrs	r3, r3, #31
 80056d2:	b2db      	uxtb	r3, r3
 80056d4:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 80056d6:	3a01      	subs	r2, #1
 80056d8:	2105      	movs	r1, #5
 80056da:	9105      	str	r1, [sp, #20]
 80056dc:	9204      	str	r2, [sp, #16]
 80056de:	2200      	movs	r2, #0
 80056e0:	9203      	str	r2, [sp, #12]
 80056e2:	220a      	movs	r2, #10
 80056e4:	9202      	str	r2, [sp, #8]
 80056e6:	9301      	str	r3, [sp, #4]
 80056e8:	9000      	str	r0, [sp, #0]
 80056ea:	693b      	ldr	r3, [r7, #16]
 80056ec:	697a      	ldr	r2, [r7, #20]
 80056ee:	69b9      	ldr	r1, [r7, #24]
 80056f0:	69f8      	ldr	r0, [r7, #28]
 80056f2:	f7ff fa49 	bl	8004b88 <_ntoa_long>
 80056f6:	6178      	str	r0, [r7, #20]
    // might need to right-pad spaces
    if (flags & FLAGS_LEFT) {
 80056f8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80056fc:	f003 0302 	and.w	r3, r3, #2
 8005700:	2b00      	cmp	r3, #0
 8005702:	d00f      	beq.n	8005724 <_etoa+0x514>
      while (idx - start_idx < width) out(' ', buffer, idx++, maxlen);
 8005704:	e007      	b.n	8005716 <_etoa+0x506>
 8005706:	697a      	ldr	r2, [r7, #20]
 8005708:	1c53      	adds	r3, r2, #1
 800570a:	617b      	str	r3, [r7, #20]
 800570c:	69fc      	ldr	r4, [r7, #28]
 800570e:	693b      	ldr	r3, [r7, #16]
 8005710:	69b9      	ldr	r1, [r7, #24]
 8005712:	2020      	movs	r0, #32
 8005714:	47a0      	blx	r4
 8005716:	697a      	ldr	r2, [r7, #20]
 8005718:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800571a:	1ad3      	subs	r3, r2, r3
 800571c:	f8d7 2084 	ldr.w	r2, [r7, #132]	; 0x84
 8005720:	429a      	cmp	r2, r3
 8005722:	d8f0      	bhi.n	8005706 <_etoa+0x4f6>
    }
  }
  return idx;
 8005724:	697b      	ldr	r3, [r7, #20]
}
 8005726:	4618      	mov	r0, r3
 8005728:	375c      	adds	r7, #92	; 0x5c
 800572a:	46bd      	mov	sp, r7
 800572c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005730:	eb1c432d 	.word	0xeb1c432d
 8005734:	3f1a36e2 	.word	0x3f1a36e2
 8005738:	00000000 	.word	0x00000000
 800573c:	412e8480 	.word	0x412e8480

08005740 <_vsnprintf>:
#endif  // PRINTF_SUPPORT_FLOAT


// internal vsnprintf
static int _vsnprintf(out_fct_type out, char* buffer, const size_t maxlen, const char* format, va_list va)
{
 8005740:	b5b0      	push	{r4, r5, r7, lr}
 8005742:	b0a0      	sub	sp, #128	; 0x80
 8005744:	af0a      	add	r7, sp, #40	; 0x28
 8005746:	60f8      	str	r0, [r7, #12]
 8005748:	60b9      	str	r1, [r7, #8]
 800574a:	607a      	str	r2, [r7, #4]
 800574c:	603b      	str	r3, [r7, #0]
  unsigned int flags, width, precision, n;
  size_t idx = 0U;
 800574e:	2300      	movs	r3, #0
 8005750:	647b      	str	r3, [r7, #68]	; 0x44

  if (!buffer) {
 8005752:	68bb      	ldr	r3, [r7, #8]
 8005754:	2b00      	cmp	r3, #0
 8005756:	f040 8492 	bne.w	800607e <_vsnprintf+0x93e>
    // use null output function
    out = _out_null;
 800575a:	4ba0      	ldr	r3, [pc, #640]	; (80059dc <_vsnprintf+0x29c>)
 800575c:	60fb      	str	r3, [r7, #12]
  }

  while (*format)
 800575e:	f000 bc8e 	b.w	800607e <_vsnprintf+0x93e>
  {
    // format specifier?  %[flags][width][.precision][length]
    if (*format != '%') {
 8005762:	683b      	ldr	r3, [r7, #0]
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b25      	cmp	r3, #37	; 0x25
 8005768:	d00d      	beq.n	8005786 <_vsnprintf+0x46>
      // no
      out(*format, buffer, idx++, maxlen);
 800576a:	683b      	ldr	r3, [r7, #0]
 800576c:	7818      	ldrb	r0, [r3, #0]
 800576e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005770:	1c53      	adds	r3, r2, #1
 8005772:	647b      	str	r3, [r7, #68]	; 0x44
 8005774:	68fc      	ldr	r4, [r7, #12]
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	68b9      	ldr	r1, [r7, #8]
 800577a:	47a0      	blx	r4
      format++;
 800577c:	683b      	ldr	r3, [r7, #0]
 800577e:	3301      	adds	r3, #1
 8005780:	603b      	str	r3, [r7, #0]
      continue;
 8005782:	f000 bc7c 	b.w	800607e <_vsnprintf+0x93e>
    }
    else {
      // yes, evaluate it
      format++;
 8005786:	683b      	ldr	r3, [r7, #0]
 8005788:	3301      	adds	r3, #1
 800578a:	603b      	str	r3, [r7, #0]
    }

    // evaluate flags
    flags = 0U;
 800578c:	2300      	movs	r3, #0
 800578e:	657b      	str	r3, [r7, #84]	; 0x54
    do {
      switch (*format) {
 8005790:	683b      	ldr	r3, [r7, #0]
 8005792:	781b      	ldrb	r3, [r3, #0]
 8005794:	3b20      	subs	r3, #32
 8005796:	2b10      	cmp	r3, #16
 8005798:	d856      	bhi.n	8005848 <_vsnprintf+0x108>
 800579a:	a201      	add	r2, pc, #4	; (adr r2, 80057a0 <_vsnprintf+0x60>)
 800579c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80057a0:	08005821 	.word	0x08005821
 80057a4:	08005849 	.word	0x08005849
 80057a8:	08005849 	.word	0x08005849
 80057ac:	08005835 	.word	0x08005835
 80057b0:	08005849 	.word	0x08005849
 80057b4:	08005849 	.word	0x08005849
 80057b8:	08005849 	.word	0x08005849
 80057bc:	08005849 	.word	0x08005849
 80057c0:	08005849 	.word	0x08005849
 80057c4:	08005849 	.word	0x08005849
 80057c8:	08005849 	.word	0x08005849
 80057cc:	0800580d 	.word	0x0800580d
 80057d0:	08005849 	.word	0x08005849
 80057d4:	080057f9 	.word	0x080057f9
 80057d8:	08005849 	.word	0x08005849
 80057dc:	08005849 	.word	0x08005849
 80057e0:	080057e5 	.word	0x080057e5
        case '0': flags |= FLAGS_ZEROPAD; format++; n = 1U; break;
 80057e4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057e6:	f043 0301 	orr.w	r3, r3, #1
 80057ea:	657b      	str	r3, [r7, #84]	; 0x54
 80057ec:	683b      	ldr	r3, [r7, #0]
 80057ee:	3301      	adds	r3, #1
 80057f0:	603b      	str	r3, [r7, #0]
 80057f2:	2301      	movs	r3, #1
 80057f4:	64bb      	str	r3, [r7, #72]	; 0x48
 80057f6:	e02a      	b.n	800584e <_vsnprintf+0x10e>
        case '-': flags |= FLAGS_LEFT;    format++; n = 1U; break;
 80057f8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80057fa:	f043 0302 	orr.w	r3, r3, #2
 80057fe:	657b      	str	r3, [r7, #84]	; 0x54
 8005800:	683b      	ldr	r3, [r7, #0]
 8005802:	3301      	adds	r3, #1
 8005804:	603b      	str	r3, [r7, #0]
 8005806:	2301      	movs	r3, #1
 8005808:	64bb      	str	r3, [r7, #72]	; 0x48
 800580a:	e020      	b.n	800584e <_vsnprintf+0x10e>
        case '+': flags |= FLAGS_PLUS;    format++; n = 1U; break;
 800580c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800580e:	f043 0304 	orr.w	r3, r3, #4
 8005812:	657b      	str	r3, [r7, #84]	; 0x54
 8005814:	683b      	ldr	r3, [r7, #0]
 8005816:	3301      	adds	r3, #1
 8005818:	603b      	str	r3, [r7, #0]
 800581a:	2301      	movs	r3, #1
 800581c:	64bb      	str	r3, [r7, #72]	; 0x48
 800581e:	e016      	b.n	800584e <_vsnprintf+0x10e>
        case ' ': flags |= FLAGS_SPACE;   format++; n = 1U; break;
 8005820:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005822:	f043 0308 	orr.w	r3, r3, #8
 8005826:	657b      	str	r3, [r7, #84]	; 0x54
 8005828:	683b      	ldr	r3, [r7, #0]
 800582a:	3301      	adds	r3, #1
 800582c:	603b      	str	r3, [r7, #0]
 800582e:	2301      	movs	r3, #1
 8005830:	64bb      	str	r3, [r7, #72]	; 0x48
 8005832:	e00c      	b.n	800584e <_vsnprintf+0x10e>
        case '#': flags |= FLAGS_HASH;    format++; n = 1U; break;
 8005834:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005836:	f043 0310 	orr.w	r3, r3, #16
 800583a:	657b      	str	r3, [r7, #84]	; 0x54
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	3301      	adds	r3, #1
 8005840:	603b      	str	r3, [r7, #0]
 8005842:	2301      	movs	r3, #1
 8005844:	64bb      	str	r3, [r7, #72]	; 0x48
 8005846:	e002      	b.n	800584e <_vsnprintf+0x10e>
        default :                                   n = 0U; break;
 8005848:	2300      	movs	r3, #0
 800584a:	64bb      	str	r3, [r7, #72]	; 0x48
 800584c:	bf00      	nop
      }
    } while (n);
 800584e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8005850:	2b00      	cmp	r3, #0
 8005852:	d19d      	bne.n	8005790 <_vsnprintf+0x50>

    // evaluate width field
    width = 0U;
 8005854:	2300      	movs	r3, #0
 8005856:	653b      	str	r3, [r7, #80]	; 0x50
    if (_is_digit(*format)) {
 8005858:	683b      	ldr	r3, [r7, #0]
 800585a:	781b      	ldrb	r3, [r3, #0]
 800585c:	4618      	mov	r0, r3
 800585e:	f7ff f82c 	bl	80048ba <_is_digit>
 8005862:	4603      	mov	r3, r0
 8005864:	2b00      	cmp	r3, #0
 8005866:	d005      	beq.n	8005874 <_vsnprintf+0x134>
      width = _atoi(&format);
 8005868:	463b      	mov	r3, r7
 800586a:	4618      	mov	r0, r3
 800586c:	f7ff f83c 	bl	80048e8 <_atoi>
 8005870:	6538      	str	r0, [r7, #80]	; 0x50
 8005872:	e018      	b.n	80058a6 <_vsnprintf+0x166>
    }
    else if (*format == '*') {
 8005874:	683b      	ldr	r3, [r7, #0]
 8005876:	781b      	ldrb	r3, [r3, #0]
 8005878:	2b2a      	cmp	r3, #42	; 0x2a
 800587a:	d114      	bne.n	80058a6 <_vsnprintf+0x166>
      const int w = va_arg(va, int);
 800587c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800587e:	1d1a      	adds	r2, r3, #4
 8005880:	66ba      	str	r2, [r7, #104]	; 0x68
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	633b      	str	r3, [r7, #48]	; 0x30
      if (w < 0) {
 8005886:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005888:	2b00      	cmp	r3, #0
 800588a:	da07      	bge.n	800589c <_vsnprintf+0x15c>
        flags |= FLAGS_LEFT;    // reverse padding
 800588c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800588e:	f043 0302 	orr.w	r3, r3, #2
 8005892:	657b      	str	r3, [r7, #84]	; 0x54
        width = (unsigned int)-w;
 8005894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005896:	425b      	negs	r3, r3
 8005898:	653b      	str	r3, [r7, #80]	; 0x50
 800589a:	e001      	b.n	80058a0 <_vsnprintf+0x160>
      }
      else {
        width = (unsigned int)w;
 800589c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800589e:	653b      	str	r3, [r7, #80]	; 0x50
      }
      format++;
 80058a0:	683b      	ldr	r3, [r7, #0]
 80058a2:	3301      	adds	r3, #1
 80058a4:	603b      	str	r3, [r7, #0]
    }

    // evaluate precision field
    precision = 0U;
 80058a6:	2300      	movs	r3, #0
 80058a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    if (*format == '.') {
 80058aa:	683b      	ldr	r3, [r7, #0]
 80058ac:	781b      	ldrb	r3, [r3, #0]
 80058ae:	2b2e      	cmp	r3, #46	; 0x2e
 80058b0:	d124      	bne.n	80058fc <_vsnprintf+0x1bc>
      flags |= FLAGS_PRECISION;
 80058b2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80058b4:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80058b8:	657b      	str	r3, [r7, #84]	; 0x54
      format++;
 80058ba:	683b      	ldr	r3, [r7, #0]
 80058bc:	3301      	adds	r3, #1
 80058be:	603b      	str	r3, [r7, #0]
      if (_is_digit(*format)) {
 80058c0:	683b      	ldr	r3, [r7, #0]
 80058c2:	781b      	ldrb	r3, [r3, #0]
 80058c4:	4618      	mov	r0, r3
 80058c6:	f7fe fff8 	bl	80048ba <_is_digit>
 80058ca:	4603      	mov	r3, r0
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d005      	beq.n	80058dc <_vsnprintf+0x19c>
        precision = _atoi(&format);
 80058d0:	463b      	mov	r3, r7
 80058d2:	4618      	mov	r0, r3
 80058d4:	f7ff f808 	bl	80048e8 <_atoi>
 80058d8:	64f8      	str	r0, [r7, #76]	; 0x4c
 80058da:	e00f      	b.n	80058fc <_vsnprintf+0x1bc>
      }
      else if (*format == '*') {
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	781b      	ldrb	r3, [r3, #0]
 80058e0:	2b2a      	cmp	r3, #42	; 0x2a
 80058e2:	d10b      	bne.n	80058fc <_vsnprintf+0x1bc>
        const int prec = (int)va_arg(va, int);
 80058e4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 80058e6:	1d1a      	adds	r2, r3, #4
 80058e8:	66ba      	str	r2, [r7, #104]	; 0x68
 80058ea:	681b      	ldr	r3, [r3, #0]
 80058ec:	62fb      	str	r3, [r7, #44]	; 0x2c
        precision = prec > 0 ? (unsigned int)prec : 0U;
 80058ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80058f0:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 80058f4:	64fb      	str	r3, [r7, #76]	; 0x4c
        format++;
 80058f6:	683b      	ldr	r3, [r7, #0]
 80058f8:	3301      	adds	r3, #1
 80058fa:	603b      	str	r3, [r7, #0]
      }
    }

    // evaluate length field
    switch (*format) {
 80058fc:	683b      	ldr	r3, [r7, #0]
 80058fe:	781b      	ldrb	r3, [r3, #0]
 8005900:	3b68      	subs	r3, #104	; 0x68
 8005902:	2b12      	cmp	r3, #18
 8005904:	d866      	bhi.n	80059d4 <_vsnprintf+0x294>
 8005906:	a201      	add	r2, pc, #4	; (adr r2, 800590c <_vsnprintf+0x1cc>)
 8005908:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800590c:	0800597f 	.word	0x0800597f
 8005910:	080059d5 	.word	0x080059d5
 8005914:	080059b5 	.word	0x080059b5
 8005918:	080059d5 	.word	0x080059d5
 800591c:	08005959 	.word	0x08005959
 8005920:	080059d5 	.word	0x080059d5
 8005924:	080059d5 	.word	0x080059d5
 8005928:	080059d5 	.word	0x080059d5
 800592c:	080059d5 	.word	0x080059d5
 8005930:	080059d5 	.word	0x080059d5
 8005934:	080059d5 	.word	0x080059d5
 8005938:	080059d5 	.word	0x080059d5
 800593c:	080059a5 	.word	0x080059a5
 8005940:	080059d5 	.word	0x080059d5
 8005944:	080059d5 	.word	0x080059d5
 8005948:	080059d5 	.word	0x080059d5
 800594c:	080059d5 	.word	0x080059d5
 8005950:	080059d5 	.word	0x080059d5
 8005954:	080059c5 	.word	0x080059c5
      case 'l' :
        flags |= FLAGS_LONG;
 8005958:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800595a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800595e:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8005960:	683b      	ldr	r3, [r7, #0]
 8005962:	3301      	adds	r3, #1
 8005964:	603b      	str	r3, [r7, #0]
        if (*format == 'l') {
 8005966:	683b      	ldr	r3, [r7, #0]
 8005968:	781b      	ldrb	r3, [r3, #0]
 800596a:	2b6c      	cmp	r3, #108	; 0x6c
 800596c:	d134      	bne.n	80059d8 <_vsnprintf+0x298>
          flags |= FLAGS_LONG_LONG;
 800596e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005970:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005974:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 8005976:	683b      	ldr	r3, [r7, #0]
 8005978:	3301      	adds	r3, #1
 800597a:	603b      	str	r3, [r7, #0]
        }
        break;
 800597c:	e02c      	b.n	80059d8 <_vsnprintf+0x298>
      case 'h' :
        flags |= FLAGS_SHORT;
 800597e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005980:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005984:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 8005986:	683b      	ldr	r3, [r7, #0]
 8005988:	3301      	adds	r3, #1
 800598a:	603b      	str	r3, [r7, #0]
        if (*format == 'h') {
 800598c:	683b      	ldr	r3, [r7, #0]
 800598e:	781b      	ldrb	r3, [r3, #0]
 8005990:	2b68      	cmp	r3, #104	; 0x68
 8005992:	d125      	bne.n	80059e0 <_vsnprintf+0x2a0>
          flags |= FLAGS_CHAR;
 8005994:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005996:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800599a:	657b      	str	r3, [r7, #84]	; 0x54
          format++;
 800599c:	683b      	ldr	r3, [r7, #0]
 800599e:	3301      	adds	r3, #1
 80059a0:	603b      	str	r3, [r7, #0]
        }
        break;
 80059a2:	e01d      	b.n	80059e0 <_vsnprintf+0x2a0>
#if defined(PRINTF_SUPPORT_PTRDIFF_T)
      case 't' :
        flags |= (sizeof(ptrdiff_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80059a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059a6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059aa:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80059ac:	683b      	ldr	r3, [r7, #0]
 80059ae:	3301      	adds	r3, #1
 80059b0:	603b      	str	r3, [r7, #0]
        break;
 80059b2:	e016      	b.n	80059e2 <_vsnprintf+0x2a2>
#endif
      case 'j' :
        flags |= (sizeof(intmax_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80059b4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059b6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80059ba:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	3301      	adds	r3, #1
 80059c0:	603b      	str	r3, [r7, #0]
        break;
 80059c2:	e00e      	b.n	80059e2 <_vsnprintf+0x2a2>
      case 'z' :
        flags |= (sizeof(size_t) == sizeof(long) ? FLAGS_LONG : FLAGS_LONG_LONG);
 80059c4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80059c6:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80059ca:	657b      	str	r3, [r7, #84]	; 0x54
        format++;
 80059cc:	683b      	ldr	r3, [r7, #0]
 80059ce:	3301      	adds	r3, #1
 80059d0:	603b      	str	r3, [r7, #0]
        break;
 80059d2:	e006      	b.n	80059e2 <_vsnprintf+0x2a2>
      default :
        break;
 80059d4:	bf00      	nop
 80059d6:	e004      	b.n	80059e2 <_vsnprintf+0x2a2>
        break;
 80059d8:	bf00      	nop
 80059da:	e002      	b.n	80059e2 <_vsnprintf+0x2a2>
 80059dc:	08004865 	.word	0x08004865
        break;
 80059e0:	bf00      	nop
    }

    // evaluate specifier
    switch (*format) {
 80059e2:	683b      	ldr	r3, [r7, #0]
 80059e4:	781b      	ldrb	r3, [r3, #0]
 80059e6:	3b25      	subs	r3, #37	; 0x25
 80059e8:	2b53      	cmp	r3, #83	; 0x53
 80059ea:	f200 833b 	bhi.w	8006064 <_vsnprintf+0x924>
 80059ee:	a201      	add	r2, pc, #4	; (adr r2, 80059f4 <_vsnprintf+0x2b4>)
 80059f0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80059f4:	0800604d 	.word	0x0800604d
 80059f8:	08006065 	.word	0x08006065
 80059fc:	08006065 	.word	0x08006065
 8005a00:	08006065 	.word	0x08006065
 8005a04:	08006065 	.word	0x08006065
 8005a08:	08006065 	.word	0x08006065
 8005a0c:	08006065 	.word	0x08006065
 8005a10:	08006065 	.word	0x08006065
 8005a14:	08006065 	.word	0x08006065
 8005a18:	08006065 	.word	0x08006065
 8005a1c:	08006065 	.word	0x08006065
 8005a20:	08006065 	.word	0x08006065
 8005a24:	08006065 	.word	0x08006065
 8005a28:	08006065 	.word	0x08006065
 8005a2c:	08006065 	.word	0x08006065
 8005a30:	08006065 	.word	0x08006065
 8005a34:	08006065 	.word	0x08006065
 8005a38:	08006065 	.word	0x08006065
 8005a3c:	08006065 	.word	0x08006065
 8005a40:	08006065 	.word	0x08006065
 8005a44:	08006065 	.word	0x08006065
 8005a48:	08006065 	.word	0x08006065
 8005a4c:	08006065 	.word	0x08006065
 8005a50:	08006065 	.word	0x08006065
 8005a54:	08006065 	.word	0x08006065
 8005a58:	08006065 	.word	0x08006065
 8005a5c:	08006065 	.word	0x08006065
 8005a60:	08006065 	.word	0x08006065
 8005a64:	08006065 	.word	0x08006065
 8005a68:	08006065 	.word	0x08006065
 8005a6c:	08006065 	.word	0x08006065
 8005a70:	08006065 	.word	0x08006065
 8005a74:	08005e1d 	.word	0x08005e1d
 8005a78:	08005dd1 	.word	0x08005dd1
 8005a7c:	08005e1d 	.word	0x08005e1d
 8005a80:	08006065 	.word	0x08006065
 8005a84:	08006065 	.word	0x08006065
 8005a88:	08006065 	.word	0x08006065
 8005a8c:	08006065 	.word	0x08006065
 8005a90:	08006065 	.word	0x08006065
 8005a94:	08006065 	.word	0x08006065
 8005a98:	08006065 	.word	0x08006065
 8005a9c:	08006065 	.word	0x08006065
 8005aa0:	08006065 	.word	0x08006065
 8005aa4:	08006065 	.word	0x08006065
 8005aa8:	08006065 	.word	0x08006065
 8005aac:	08006065 	.word	0x08006065
 8005ab0:	08006065 	.word	0x08006065
 8005ab4:	08006065 	.word	0x08006065
 8005ab8:	08006065 	.word	0x08006065
 8005abc:	08006065 	.word	0x08006065
 8005ac0:	08005b45 	.word	0x08005b45
 8005ac4:	08006065 	.word	0x08006065
 8005ac8:	08006065 	.word	0x08006065
 8005acc:	08006065 	.word	0x08006065
 8005ad0:	08006065 	.word	0x08006065
 8005ad4:	08006065 	.word	0x08006065
 8005ad8:	08006065 	.word	0x08006065
 8005adc:	08006065 	.word	0x08006065
 8005ae0:	08006065 	.word	0x08006065
 8005ae4:	08006065 	.word	0x08006065
 8005ae8:	08005b45 	.word	0x08005b45
 8005aec:	08005e89 	.word	0x08005e89
 8005af0:	08005b45 	.word	0x08005b45
 8005af4:	08005e1d 	.word	0x08005e1d
 8005af8:	08005dd1 	.word	0x08005dd1
 8005afc:	08005e1d 	.word	0x08005e1d
 8005b00:	08006065 	.word	0x08006065
 8005b04:	08005b45 	.word	0x08005b45
 8005b08:	08006065 	.word	0x08006065
 8005b0c:	08006065 	.word	0x08006065
 8005b10:	08006065 	.word	0x08006065
 8005b14:	08006065 	.word	0x08006065
 8005b18:	08006065 	.word	0x08006065
 8005b1c:	08005b45 	.word	0x08005b45
 8005b20:	08005fc1 	.word	0x08005fc1
 8005b24:	08006065 	.word	0x08006065
 8005b28:	08006065 	.word	0x08006065
 8005b2c:	08005efd 	.word	0x08005efd
 8005b30:	08006065 	.word	0x08006065
 8005b34:	08005b45 	.word	0x08005b45
 8005b38:	08006065 	.word	0x08006065
 8005b3c:	08006065 	.word	0x08006065
 8005b40:	08005b45 	.word	0x08005b45
      case 'X' :
      case 'o' :
      case 'b' : {
        // set the base
        unsigned int base;
        if (*format == 'x' || *format == 'X') {
 8005b44:	683b      	ldr	r3, [r7, #0]
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	2b78      	cmp	r3, #120	; 0x78
 8005b4a:	d003      	beq.n	8005b54 <_vsnprintf+0x414>
 8005b4c:	683b      	ldr	r3, [r7, #0]
 8005b4e:	781b      	ldrb	r3, [r3, #0]
 8005b50:	2b58      	cmp	r3, #88	; 0x58
 8005b52:	d102      	bne.n	8005b5a <_vsnprintf+0x41a>
          base = 16U;
 8005b54:	2310      	movs	r3, #16
 8005b56:	643b      	str	r3, [r7, #64]	; 0x40
 8005b58:	e013      	b.n	8005b82 <_vsnprintf+0x442>
        }
        else if (*format == 'o') {
 8005b5a:	683b      	ldr	r3, [r7, #0]
 8005b5c:	781b      	ldrb	r3, [r3, #0]
 8005b5e:	2b6f      	cmp	r3, #111	; 0x6f
 8005b60:	d102      	bne.n	8005b68 <_vsnprintf+0x428>
          base =  8U;
 8005b62:	2308      	movs	r3, #8
 8005b64:	643b      	str	r3, [r7, #64]	; 0x40
 8005b66:	e00c      	b.n	8005b82 <_vsnprintf+0x442>
        }
        else if (*format == 'b') {
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	781b      	ldrb	r3, [r3, #0]
 8005b6c:	2b62      	cmp	r3, #98	; 0x62
 8005b6e:	d102      	bne.n	8005b76 <_vsnprintf+0x436>
          base =  2U;
 8005b70:	2302      	movs	r3, #2
 8005b72:	643b      	str	r3, [r7, #64]	; 0x40
 8005b74:	e005      	b.n	8005b82 <_vsnprintf+0x442>
        }
        else {
          base = 10U;
 8005b76:	230a      	movs	r3, #10
 8005b78:	643b      	str	r3, [r7, #64]	; 0x40
          flags &= ~FLAGS_HASH;   // no hash for dec format
 8005b7a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b7c:	f023 0310 	bic.w	r3, r3, #16
 8005b80:	657b      	str	r3, [r7, #84]	; 0x54
        }
        // uppercase
        if (*format == 'X') {
 8005b82:	683b      	ldr	r3, [r7, #0]
 8005b84:	781b      	ldrb	r3, [r3, #0]
 8005b86:	2b58      	cmp	r3, #88	; 0x58
 8005b88:	d103      	bne.n	8005b92 <_vsnprintf+0x452>
          flags |= FLAGS_UPPERCASE;
 8005b8a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005b8c:	f043 0320 	orr.w	r3, r3, #32
 8005b90:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // no plus or space flag for u, x, X, o, b
        if ((*format != 'i') && (*format != 'd')) {
 8005b92:	683b      	ldr	r3, [r7, #0]
 8005b94:	781b      	ldrb	r3, [r3, #0]
 8005b96:	2b69      	cmp	r3, #105	; 0x69
 8005b98:	d007      	beq.n	8005baa <_vsnprintf+0x46a>
 8005b9a:	683b      	ldr	r3, [r7, #0]
 8005b9c:	781b      	ldrb	r3, [r3, #0]
 8005b9e:	2b64      	cmp	r3, #100	; 0x64
 8005ba0:	d003      	beq.n	8005baa <_vsnprintf+0x46a>
          flags &= ~(FLAGS_PLUS | FLAGS_SPACE);
 8005ba2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ba4:	f023 030c 	bic.w	r3, r3, #12
 8005ba8:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // ignore '0' flag when precision is given
        if (flags & FLAGS_PRECISION) {
 8005baa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d003      	beq.n	8005bbc <_vsnprintf+0x47c>
          flags &= ~FLAGS_ZEROPAD;
 8005bb4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bb6:	f023 0301 	bic.w	r3, r3, #1
 8005bba:	657b      	str	r3, [r7, #84]	; 0x54
        }

        // convert the integer
        if ((*format == 'i') || (*format == 'd')) {
 8005bbc:	683b      	ldr	r3, [r7, #0]
 8005bbe:	781b      	ldrb	r3, [r3, #0]
 8005bc0:	2b69      	cmp	r3, #105	; 0x69
 8005bc2:	d004      	beq.n	8005bce <_vsnprintf+0x48e>
 8005bc4:	683b      	ldr	r3, [r7, #0]
 8005bc6:	781b      	ldrb	r3, [r3, #0]
 8005bc8:	2b64      	cmp	r3, #100	; 0x64
 8005bca:	f040 808d 	bne.w	8005ce8 <_vsnprintf+0x5a8>
          // signed
          if (flags & FLAGS_LONG_LONG) {
 8005bce:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005bd0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005bd4:	2b00      	cmp	r3, #0
 8005bd6:	d02e      	beq.n	8005c36 <_vsnprintf+0x4f6>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            const long long value = va_arg(va, long long);
 8005bd8:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005bda:	3307      	adds	r3, #7
 8005bdc:	f023 0307 	bic.w	r3, r3, #7
 8005be0:	f103 0208 	add.w	r2, r3, #8
 8005be4:	66ba      	str	r2, [r7, #104]	; 0x68
 8005be6:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005bea:	e9c7 3404 	strd	r3, r4, [r7, #16]
            idx = _ntoa_long_long(out, buffer, idx, maxlen, (unsigned long long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8005bee:	e9d7 3404 	ldrd	r3, r4, [r7, #16]
 8005bf2:	2b00      	cmp	r3, #0
 8005bf4:	f174 0200 	sbcs.w	r2, r4, #0
 8005bf8:	da02      	bge.n	8005c00 <_vsnprintf+0x4c0>
 8005bfa:	425b      	negs	r3, r3
 8005bfc:	eb64 0444 	sbc.w	r4, r4, r4, lsl #1
 8005c00:	4619      	mov	r1, r3
 8005c02:	4622      	mov	r2, r4
 8005c04:	697b      	ldr	r3, [r7, #20]
 8005c06:	0fdb      	lsrs	r3, r3, #31
 8005c08:	b2d8      	uxtb	r0, r3
 8005c0a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005c0c:	f04f 0400 	mov.w	r4, #0
 8005c10:	6d7d      	ldr	r5, [r7, #84]	; 0x54
 8005c12:	9508      	str	r5, [sp, #32]
 8005c14:	6d3d      	ldr	r5, [r7, #80]	; 0x50
 8005c16:	9507      	str	r5, [sp, #28]
 8005c18:	6cfd      	ldr	r5, [r7, #76]	; 0x4c
 8005c1a:	9506      	str	r5, [sp, #24]
 8005c1c:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8005c20:	9002      	str	r0, [sp, #8]
 8005c22:	e9cd 1200 	strd	r1, r2, [sp]
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c2a:	68b9      	ldr	r1, [r7, #8]
 8005c2c:	68f8      	ldr	r0, [r7, #12]
 8005c2e:	f7ff f812 	bl	8004c56 <_ntoa_long_long>
 8005c32:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8005c34:	e0c8      	b.n	8005dc8 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8005c36:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c38:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005c3c:	2b00      	cmp	r3, #0
 8005c3e:	d01e      	beq.n	8005c7e <_vsnprintf+0x53e>
            const long value = va_arg(va, long);
 8005c40:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c42:	1d1a      	adds	r2, r3, #4
 8005c44:	66ba      	str	r2, [r7, #104]	; 0x68
 8005c46:	681b      	ldr	r3, [r3, #0]
 8005c48:	61fb      	str	r3, [r7, #28]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8005c4a:	69fb      	ldr	r3, [r7, #28]
 8005c4c:	2b00      	cmp	r3, #0
 8005c4e:	bfb8      	it	lt
 8005c50:	425b      	neglt	r3, r3
 8005c52:	4619      	mov	r1, r3
 8005c54:	69fb      	ldr	r3, [r7, #28]
 8005c56:	0fdb      	lsrs	r3, r3, #31
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005c5c:	9205      	str	r2, [sp, #20]
 8005c5e:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005c60:	9204      	str	r2, [sp, #16]
 8005c62:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005c64:	9203      	str	r2, [sp, #12]
 8005c66:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005c68:	9202      	str	r2, [sp, #8]
 8005c6a:	9301      	str	r3, [sp, #4]
 8005c6c:	9100      	str	r1, [sp, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005c72:	68b9      	ldr	r1, [r7, #8]
 8005c74:	68f8      	ldr	r0, [r7, #12]
 8005c76:	f7fe ff87 	bl	8004b88 <_ntoa_long>
 8005c7a:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8005c7c:	e0a4      	b.n	8005dc8 <_vsnprintf+0x688>
          }
          else {
            const int value = (flags & FLAGS_CHAR) ? (char)va_arg(va, int) : (flags & FLAGS_SHORT) ? (short int)va_arg(va, int) : va_arg(va, int);
 8005c7e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c80:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	d005      	beq.n	8005c94 <_vsnprintf+0x554>
 8005c88:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005c8a:	1d1a      	adds	r2, r3, #4
 8005c8c:	66ba      	str	r2, [r7, #104]	; 0x68
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	b2db      	uxtb	r3, r3
 8005c92:	e00e      	b.n	8005cb2 <_vsnprintf+0x572>
 8005c94:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005c96:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005c9a:	2b00      	cmp	r3, #0
 8005c9c:	d005      	beq.n	8005caa <_vsnprintf+0x56a>
 8005c9e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005ca0:	1d1a      	adds	r2, r3, #4
 8005ca2:	66ba      	str	r2, [r7, #104]	; 0x68
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	b21b      	sxth	r3, r3
 8005ca8:	e003      	b.n	8005cb2 <_vsnprintf+0x572>
 8005caa:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cac:	1d1a      	adds	r2, r3, #4
 8005cae:	66ba      	str	r2, [r7, #104]	; 0x68
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	623b      	str	r3, [r7, #32]
            idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned int)(value > 0 ? value : 0 - value), value < 0, base, precision, width, flags);
 8005cb4:	6a3b      	ldr	r3, [r7, #32]
 8005cb6:	2b00      	cmp	r3, #0
 8005cb8:	bfb8      	it	lt
 8005cba:	425b      	neglt	r3, r3
 8005cbc:	4619      	mov	r1, r3
 8005cbe:	6a3b      	ldr	r3, [r7, #32]
 8005cc0:	0fdb      	lsrs	r3, r3, #31
 8005cc2:	b2db      	uxtb	r3, r3
 8005cc4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005cc6:	9205      	str	r2, [sp, #20]
 8005cc8:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005cca:	9204      	str	r2, [sp, #16]
 8005ccc:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005cce:	9203      	str	r2, [sp, #12]
 8005cd0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005cd2:	9202      	str	r2, [sp, #8]
 8005cd4:	9301      	str	r3, [sp, #4]
 8005cd6:	9100      	str	r1, [sp, #0]
 8005cd8:	687b      	ldr	r3, [r7, #4]
 8005cda:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005cdc:	68b9      	ldr	r1, [r7, #8]
 8005cde:	68f8      	ldr	r0, [r7, #12]
 8005ce0:	f7fe ff52 	bl	8004b88 <_ntoa_long>
 8005ce4:	6478      	str	r0, [r7, #68]	; 0x44
          if (flags & FLAGS_LONG_LONG) {
 8005ce6:	e06f      	b.n	8005dc8 <_vsnprintf+0x688>
          }
        }
        else {
          // unsigned
          if (flags & FLAGS_LONG_LONG) {
 8005ce8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005cea:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005cee:	2b00      	cmp	r3, #0
 8005cf0:	d020      	beq.n	8005d34 <_vsnprintf+0x5f4>
#if defined(PRINTF_SUPPORT_LONG_LONG)
            idx = _ntoa_long_long(out, buffer, idx, maxlen, va_arg(va, unsigned long long), false, base, precision, width, flags);
 8005cf2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005cf4:	3307      	adds	r3, #7
 8005cf6:	f023 0307 	bic.w	r3, r3, #7
 8005cfa:	f103 0208 	add.w	r2, r3, #8
 8005cfe:	66ba      	str	r2, [r7, #104]	; 0x68
 8005d00:	e9d3 3400 	ldrd	r3, r4, [r3]
 8005d04:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d06:	4611      	mov	r1, r2
 8005d08:	f04f 0200 	mov.w	r2, #0
 8005d0c:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8005d0e:	9008      	str	r0, [sp, #32]
 8005d10:	6d38      	ldr	r0, [r7, #80]	; 0x50
 8005d12:	9007      	str	r0, [sp, #28]
 8005d14:	6cf8      	ldr	r0, [r7, #76]	; 0x4c
 8005d16:	9006      	str	r0, [sp, #24]
 8005d18:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	9202      	str	r2, [sp, #8]
 8005d20:	e9cd 3400 	strd	r3, r4, [sp]
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d28:	68b9      	ldr	r1, [r7, #8]
 8005d2a:	68f8      	ldr	r0, [r7, #12]
 8005d2c:	f7fe ff93 	bl	8004c56 <_ntoa_long_long>
 8005d30:	6478      	str	r0, [r7, #68]	; 0x44
 8005d32:	e049      	b.n	8005dc8 <_vsnprintf+0x688>
#endif
          }
          else if (flags & FLAGS_LONG) {
 8005d34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d36:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005d3a:	2b00      	cmp	r3, #0
 8005d3c:	d016      	beq.n	8005d6c <_vsnprintf+0x62c>
            idx = _ntoa_long(out, buffer, idx, maxlen, va_arg(va, unsigned long), false, base, precision, width, flags);
 8005d3e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d40:	1d1a      	adds	r2, r3, #4
 8005d42:	66ba      	str	r2, [r7, #104]	; 0x68
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005d48:	9205      	str	r2, [sp, #20]
 8005d4a:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005d4c:	9204      	str	r2, [sp, #16]
 8005d4e:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005d50:	9203      	str	r2, [sp, #12]
 8005d52:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8005d54:	9202      	str	r2, [sp, #8]
 8005d56:	2200      	movs	r2, #0
 8005d58:	9201      	str	r2, [sp, #4]
 8005d5a:	9300      	str	r3, [sp, #0]
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005d60:	68b9      	ldr	r1, [r7, #8]
 8005d62:	68f8      	ldr	r0, [r7, #12]
 8005d64:	f7fe ff10 	bl	8004b88 <_ntoa_long>
 8005d68:	6478      	str	r0, [r7, #68]	; 0x44
 8005d6a:	e02d      	b.n	8005dc8 <_vsnprintf+0x688>
          }
          else {
            const unsigned int value = (flags & FLAGS_CHAR) ? (unsigned char)va_arg(va, unsigned int) : (flags & FLAGS_SHORT) ? (unsigned short int)va_arg(va, unsigned int) : va_arg(va, unsigned int);
 8005d6c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005d72:	2b00      	cmp	r3, #0
 8005d74:	d005      	beq.n	8005d82 <_vsnprintf+0x642>
 8005d76:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d78:	1d1a      	adds	r2, r3, #4
 8005d7a:	66ba      	str	r2, [r7, #104]	; 0x68
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	e00e      	b.n	8005da0 <_vsnprintf+0x660>
 8005d82:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005d84:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005d88:	2b00      	cmp	r3, #0
 8005d8a:	d005      	beq.n	8005d98 <_vsnprintf+0x658>
 8005d8c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d8e:	1d1a      	adds	r2, r3, #4
 8005d90:	66ba      	str	r2, [r7, #104]	; 0x68
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	b29b      	uxth	r3, r3
 8005d96:	e003      	b.n	8005da0 <_vsnprintf+0x660>
 8005d98:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005d9a:	1d1a      	adds	r2, r3, #4
 8005d9c:	66ba      	str	r2, [r7, #104]	; 0x68
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	627b      	str	r3, [r7, #36]	; 0x24
            idx = _ntoa_long(out, buffer, idx, maxlen, value, false, base, precision, width, flags);
 8005da2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005da4:	9305      	str	r3, [sp, #20]
 8005da6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005da8:	9304      	str	r3, [sp, #16]
 8005daa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dac:	9303      	str	r3, [sp, #12]
 8005dae:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005db0:	9302      	str	r3, [sp, #8]
 8005db2:	2300      	movs	r3, #0
 8005db4:	9301      	str	r3, [sp, #4]
 8005db6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005db8:	9300      	str	r3, [sp, #0]
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005dbe:	68b9      	ldr	r1, [r7, #8]
 8005dc0:	68f8      	ldr	r0, [r7, #12]
 8005dc2:	f7fe fee1 	bl	8004b88 <_ntoa_long>
 8005dc6:	6478      	str	r0, [r7, #68]	; 0x44
          }
        }
        format++;
 8005dc8:	683b      	ldr	r3, [r7, #0]
 8005dca:	3301      	adds	r3, #1
 8005dcc:	603b      	str	r3, [r7, #0]
        break;
 8005dce:	e156      	b.n	800607e <_vsnprintf+0x93e>
      }
#if defined(PRINTF_SUPPORT_FLOAT)
      case 'f' :
      case 'F' :
        if (*format == 'F') flags |= FLAGS_UPPERCASE;
 8005dd0:	683b      	ldr	r3, [r7, #0]
 8005dd2:	781b      	ldrb	r3, [r3, #0]
 8005dd4:	2b46      	cmp	r3, #70	; 0x46
 8005dd6:	d103      	bne.n	8005de0 <_vsnprintf+0x6a0>
 8005dd8:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005dda:	f043 0320 	orr.w	r3, r3, #32
 8005dde:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _ftoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8005de0:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005de2:	3307      	adds	r3, #7
 8005de4:	f023 0307 	bic.w	r3, r3, #7
 8005de8:	f103 0208 	add.w	r2, r3, #8
 8005dec:	66ba      	str	r2, [r7, #104]	; 0x68
 8005dee:	ed93 7b00 	vldr	d7, [r3]
 8005df2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005df4:	9302      	str	r3, [sp, #8]
 8005df6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005df8:	9301      	str	r3, [sp, #4]
 8005dfa:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005dfc:	9300      	str	r3, [sp, #0]
 8005dfe:	eeb0 0a47 	vmov.f32	s0, s14
 8005e02:	eef0 0a67 	vmov.f32	s1, s15
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e0a:	68b9      	ldr	r1, [r7, #8]
 8005e0c:	68f8      	ldr	r0, [r7, #12]
 8005e0e:	f7fe ff93 	bl	8004d38 <_ftoa>
 8005e12:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8005e14:	683b      	ldr	r3, [r7, #0]
 8005e16:	3301      	adds	r3, #1
 8005e18:	603b      	str	r3, [r7, #0]
        break;
 8005e1a:	e130      	b.n	800607e <_vsnprintf+0x93e>
#if defined(PRINTF_SUPPORT_EXPONENTIAL)
      case 'e':
      case 'E':
      case 'g':
      case 'G':
        if ((*format == 'g')||(*format == 'G')) flags |= FLAGS_ADAPT_EXP;
 8005e1c:	683b      	ldr	r3, [r7, #0]
 8005e1e:	781b      	ldrb	r3, [r3, #0]
 8005e20:	2b67      	cmp	r3, #103	; 0x67
 8005e22:	d003      	beq.n	8005e2c <_vsnprintf+0x6ec>
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	781b      	ldrb	r3, [r3, #0]
 8005e28:	2b47      	cmp	r3, #71	; 0x47
 8005e2a:	d103      	bne.n	8005e34 <_vsnprintf+0x6f4>
 8005e2c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e2e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8005e32:	657b      	str	r3, [r7, #84]	; 0x54
        if ((*format == 'E')||(*format == 'G')) flags |= FLAGS_UPPERCASE;
 8005e34:	683b      	ldr	r3, [r7, #0]
 8005e36:	781b      	ldrb	r3, [r3, #0]
 8005e38:	2b45      	cmp	r3, #69	; 0x45
 8005e3a:	d003      	beq.n	8005e44 <_vsnprintf+0x704>
 8005e3c:	683b      	ldr	r3, [r7, #0]
 8005e3e:	781b      	ldrb	r3, [r3, #0]
 8005e40:	2b47      	cmp	r3, #71	; 0x47
 8005e42:	d103      	bne.n	8005e4c <_vsnprintf+0x70c>
 8005e44:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e46:	f043 0320 	orr.w	r3, r3, #32
 8005e4a:	657b      	str	r3, [r7, #84]	; 0x54
        idx = _etoa(out, buffer, idx, maxlen, va_arg(va, double), precision, width, flags);
 8005e4c:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005e4e:	3307      	adds	r3, #7
 8005e50:	f023 0307 	bic.w	r3, r3, #7
 8005e54:	f103 0208 	add.w	r2, r3, #8
 8005e58:	66ba      	str	r2, [r7, #104]	; 0x68
 8005e5a:	ed93 7b00 	vldr	d7, [r3]
 8005e5e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e60:	9302      	str	r3, [sp, #8]
 8005e62:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8005e64:	9301      	str	r3, [sp, #4]
 8005e66:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005e68:	9300      	str	r3, [sp, #0]
 8005e6a:	eeb0 0a47 	vmov.f32	s0, s14
 8005e6e:	eef0 0a67 	vmov.f32	s1, s15
 8005e72:	687b      	ldr	r3, [r7, #4]
 8005e74:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e76:	68b9      	ldr	r1, [r7, #8]
 8005e78:	68f8      	ldr	r0, [r7, #12]
 8005e7a:	f7ff f9c9 	bl	8005210 <_etoa>
 8005e7e:	6478      	str	r0, [r7, #68]	; 0x44
        format++;
 8005e80:	683b      	ldr	r3, [r7, #0]
 8005e82:	3301      	adds	r3, #1
 8005e84:	603b      	str	r3, [r7, #0]
        break;
 8005e86:	e0fa      	b.n	800607e <_vsnprintf+0x93e>
#endif  // PRINTF_SUPPORT_EXPONENTIAL
#endif  // PRINTF_SUPPORT_FLOAT
      case 'c' : {
        unsigned int l = 1U;
 8005e88:	2301      	movs	r3, #1
 8005e8a:	63fb      	str	r3, [r7, #60]	; 0x3c
        // pre padding
        if (!(flags & FLAGS_LEFT)) {
 8005e8c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005e8e:	f003 0302 	and.w	r3, r3, #2
 8005e92:	2b00      	cmp	r3, #0
 8005e94:	d10e      	bne.n	8005eb4 <_vsnprintf+0x774>
          while (l++ < width) {
 8005e96:	e007      	b.n	8005ea8 <_vsnprintf+0x768>
            out(' ', buffer, idx++, maxlen);
 8005e98:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005e9a:	1c53      	adds	r3, r2, #1
 8005e9c:	647b      	str	r3, [r7, #68]	; 0x44
 8005e9e:	68fc      	ldr	r4, [r7, #12]
 8005ea0:	687b      	ldr	r3, [r7, #4]
 8005ea2:	68b9      	ldr	r1, [r7, #8]
 8005ea4:	2020      	movs	r0, #32
 8005ea6:	47a0      	blx	r4
          while (l++ < width) {
 8005ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eaa:	1c5a      	adds	r2, r3, #1
 8005eac:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005eae:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005eb0:	429a      	cmp	r2, r3
 8005eb2:	d8f1      	bhi.n	8005e98 <_vsnprintf+0x758>
          }
        }
        // char output
        out((char)va_arg(va, int), buffer, idx++, maxlen);
 8005eb4:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005eb6:	1d1a      	adds	r2, r3, #4
 8005eb8:	66ba      	str	r2, [r7, #104]	; 0x68
 8005eba:	681b      	ldr	r3, [r3, #0]
 8005ebc:	b2d8      	uxtb	r0, r3
 8005ebe:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005ec0:	1c53      	adds	r3, r2, #1
 8005ec2:	647b      	str	r3, [r7, #68]	; 0x44
 8005ec4:	68fc      	ldr	r4, [r7, #12]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	68b9      	ldr	r1, [r7, #8]
 8005eca:	47a0      	blx	r4
        // post padding
        if (flags & FLAGS_LEFT) {
 8005ecc:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005ece:	f003 0302 	and.w	r3, r3, #2
 8005ed2:	2b00      	cmp	r3, #0
 8005ed4:	d00e      	beq.n	8005ef4 <_vsnprintf+0x7b4>
          while (l++ < width) {
 8005ed6:	e007      	b.n	8005ee8 <_vsnprintf+0x7a8>
            out(' ', buffer, idx++, maxlen);
 8005ed8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005eda:	1c53      	adds	r3, r2, #1
 8005edc:	647b      	str	r3, [r7, #68]	; 0x44
 8005ede:	68fc      	ldr	r4, [r7, #12]
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	68b9      	ldr	r1, [r7, #8]
 8005ee4:	2020      	movs	r0, #32
 8005ee6:	47a0      	blx	r4
          while (l++ < width) {
 8005ee8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005eea:	1c5a      	adds	r2, r3, #1
 8005eec:	63fa      	str	r2, [r7, #60]	; 0x3c
 8005eee:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005ef0:	429a      	cmp	r2, r3
 8005ef2:	d8f1      	bhi.n	8005ed8 <_vsnprintf+0x798>
          }
        }
        format++;
 8005ef4:	683b      	ldr	r3, [r7, #0]
 8005ef6:	3301      	adds	r3, #1
 8005ef8:	603b      	str	r3, [r7, #0]
        break;
 8005efa:	e0c0      	b.n	800607e <_vsnprintf+0x93e>
      }

      case 's' : {
        const char* p = va_arg(va, char*);
 8005efc:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005efe:	1d1a      	adds	r2, r3, #4
 8005f00:	66ba      	str	r2, [r7, #104]	; 0x68
 8005f02:	681b      	ldr	r3, [r3, #0]
 8005f04:	63bb      	str	r3, [r7, #56]	; 0x38
        unsigned int l = _strnlen_s(p, precision ? precision : (size_t)-1);
 8005f06:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f08:	2b00      	cmp	r3, #0
 8005f0a:	d001      	beq.n	8005f10 <_vsnprintf+0x7d0>
 8005f0c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f0e:	e001      	b.n	8005f14 <_vsnprintf+0x7d4>
 8005f10:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8005f14:	4619      	mov	r1, r3
 8005f16:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8005f18:	f7fe fcb2 	bl	8004880 <_strnlen_s>
 8005f1c:	6378      	str	r0, [r7, #52]	; 0x34
        // pre padding
        if (flags & FLAGS_PRECISION) {
 8005f1e:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f20:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f24:	2b00      	cmp	r3, #0
 8005f26:	d005      	beq.n	8005f34 <_vsnprintf+0x7f4>
          l = (l < precision ? l : precision);
 8005f28:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8005f2a:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f2c:	4293      	cmp	r3, r2
 8005f2e:	bf28      	it	cs
 8005f30:	4613      	movcs	r3, r2
 8005f32:	637b      	str	r3, [r7, #52]	; 0x34
        }
        if (!(flags & FLAGS_LEFT)) {
 8005f34:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f36:	f003 0302 	and.w	r3, r3, #2
 8005f3a:	2b00      	cmp	r3, #0
 8005f3c:	d11a      	bne.n	8005f74 <_vsnprintf+0x834>
          while (l++ < width) {
 8005f3e:	e007      	b.n	8005f50 <_vsnprintf+0x810>
            out(' ', buffer, idx++, maxlen);
 8005f40:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f42:	1c53      	adds	r3, r2, #1
 8005f44:	647b      	str	r3, [r7, #68]	; 0x44
 8005f46:	68fc      	ldr	r4, [r7, #12]
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	68b9      	ldr	r1, [r7, #8]
 8005f4c:	2020      	movs	r0, #32
 8005f4e:	47a0      	blx	r4
          while (l++ < width) {
 8005f50:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	637a      	str	r2, [r7, #52]	; 0x34
 8005f56:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d8f1      	bhi.n	8005f40 <_vsnprintf+0x800>
          }
        }
        // string output
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8005f5c:	e00a      	b.n	8005f74 <_vsnprintf+0x834>
          out(*(p++), buffer, idx++, maxlen);
 8005f5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f60:	1c5a      	adds	r2, r3, #1
 8005f62:	63ba      	str	r2, [r7, #56]	; 0x38
 8005f64:	7818      	ldrb	r0, [r3, #0]
 8005f66:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f68:	1c53      	adds	r3, r2, #1
 8005f6a:	647b      	str	r3, [r7, #68]	; 0x44
 8005f6c:	68fc      	ldr	r4, [r7, #12]
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	68b9      	ldr	r1, [r7, #8]
 8005f72:	47a0      	blx	r4
        while ((*p != 0) && (!(flags & FLAGS_PRECISION) || precision--)) {
 8005f74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005f76:	781b      	ldrb	r3, [r3, #0]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d009      	beq.n	8005f90 <_vsnprintf+0x850>
 8005f7c:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f7e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005f82:	2b00      	cmp	r3, #0
 8005f84:	d0eb      	beq.n	8005f5e <_vsnprintf+0x81e>
 8005f86:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8005f88:	1e5a      	subs	r2, r3, #1
 8005f8a:	64fa      	str	r2, [r7, #76]	; 0x4c
 8005f8c:	2b00      	cmp	r3, #0
 8005f8e:	d1e6      	bne.n	8005f5e <_vsnprintf+0x81e>
        }
        // post padding
        if (flags & FLAGS_LEFT) {
 8005f90:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005f92:	f003 0302 	and.w	r3, r3, #2
 8005f96:	2b00      	cmp	r3, #0
 8005f98:	d00e      	beq.n	8005fb8 <_vsnprintf+0x878>
          while (l++ < width) {
 8005f9a:	e007      	b.n	8005fac <_vsnprintf+0x86c>
            out(' ', buffer, idx++, maxlen);
 8005f9c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005f9e:	1c53      	adds	r3, r2, #1
 8005fa0:	647b      	str	r3, [r7, #68]	; 0x44
 8005fa2:	68fc      	ldr	r4, [r7, #12]
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	68b9      	ldr	r1, [r7, #8]
 8005fa8:	2020      	movs	r0, #32
 8005faa:	47a0      	blx	r4
          while (l++ < width) {
 8005fac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005fae:	1c5a      	adds	r2, r3, #1
 8005fb0:	637a      	str	r2, [r7, #52]	; 0x34
 8005fb2:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fb4:	429a      	cmp	r2, r3
 8005fb6:	d8f1      	bhi.n	8005f9c <_vsnprintf+0x85c>
          }
        }
        format++;
 8005fb8:	683b      	ldr	r3, [r7, #0]
 8005fba:	3301      	adds	r3, #1
 8005fbc:	603b      	str	r3, [r7, #0]
        break;
 8005fbe:	e05e      	b.n	800607e <_vsnprintf+0x93e>
      }

      case 'p' : {
        width = sizeof(void*) * 2U;
 8005fc0:	2308      	movs	r3, #8
 8005fc2:	653b      	str	r3, [r7, #80]	; 0x50
        flags |= FLAGS_ZEROPAD | FLAGS_UPPERCASE;
 8005fc4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8005fc6:	f043 0321 	orr.w	r3, r3, #33	; 0x21
 8005fca:	657b      	str	r3, [r7, #84]	; 0x54
#if defined(PRINTF_SUPPORT_LONG_LONG)
        const bool is_ll = sizeof(uintptr_t) == sizeof(long long);
 8005fcc:	2300      	movs	r3, #0
 8005fce:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        if (is_ll) {
 8005fd2:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8005fd6:	2b00      	cmp	r3, #0
 8005fd8:	d01d      	beq.n	8006016 <_vsnprintf+0x8d6>
          idx = _ntoa_long_long(out, buffer, idx, maxlen, (uintptr_t)va_arg(va, void*), false, 16U, precision, width, flags);
 8005fda:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8005fdc:	1d1a      	adds	r2, r3, #4
 8005fde:	66ba      	str	r2, [r7, #104]	; 0x68
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	f04f 0400 	mov.w	r4, #0
 8005fe6:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 8005fe8:	9208      	str	r2, [sp, #32]
 8005fea:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 8005fec:	9207      	str	r2, [sp, #28]
 8005fee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8005ff0:	9206      	str	r2, [sp, #24]
 8005ff2:	f04f 0110 	mov.w	r1, #16
 8005ff6:	f04f 0200 	mov.w	r2, #0
 8005ffa:	e9cd 1204 	strd	r1, r2, [sp, #16]
 8005ffe:	2200      	movs	r2, #0
 8006000:	9202      	str	r2, [sp, #8]
 8006002:	e9cd 3400 	strd	r3, r4, [sp]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800600a:	68b9      	ldr	r1, [r7, #8]
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f7fe fe22 	bl	8004c56 <_ntoa_long_long>
 8006012:	6478      	str	r0, [r7, #68]	; 0x44
 8006014:	e016      	b.n	8006044 <_vsnprintf+0x904>
        }
        else {
#endif
          idx = _ntoa_long(out, buffer, idx, maxlen, (unsigned long)((uintptr_t)va_arg(va, void*)), false, 16U, precision, width, flags);
 8006016:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 8006018:	1d1a      	adds	r2, r3, #4
 800601a:	66ba      	str	r2, [r7, #104]	; 0x68
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	461a      	mov	r2, r3
 8006020:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8006022:	9305      	str	r3, [sp, #20]
 8006024:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006026:	9304      	str	r3, [sp, #16]
 8006028:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800602a:	9303      	str	r3, [sp, #12]
 800602c:	2310      	movs	r3, #16
 800602e:	9302      	str	r3, [sp, #8]
 8006030:	2300      	movs	r3, #0
 8006032:	9301      	str	r3, [sp, #4]
 8006034:	9200      	str	r2, [sp, #0]
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800603a:	68b9      	ldr	r1, [r7, #8]
 800603c:	68f8      	ldr	r0, [r7, #12]
 800603e:	f7fe fda3 	bl	8004b88 <_ntoa_long>
 8006042:	6478      	str	r0, [r7, #68]	; 0x44
#if defined(PRINTF_SUPPORT_LONG_LONG)
        }
#endif
        format++;
 8006044:	683b      	ldr	r3, [r7, #0]
 8006046:	3301      	adds	r3, #1
 8006048:	603b      	str	r3, [r7, #0]
        break;
 800604a:	e018      	b.n	800607e <_vsnprintf+0x93e>
      }

      case '%' :
        out('%', buffer, idx++, maxlen);
 800604c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800604e:	1c53      	adds	r3, r2, #1
 8006050:	647b      	str	r3, [r7, #68]	; 0x44
 8006052:	68fc      	ldr	r4, [r7, #12]
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	68b9      	ldr	r1, [r7, #8]
 8006058:	2025      	movs	r0, #37	; 0x25
 800605a:	47a0      	blx	r4
        format++;
 800605c:	683b      	ldr	r3, [r7, #0]
 800605e:	3301      	adds	r3, #1
 8006060:	603b      	str	r3, [r7, #0]
        break;
 8006062:	e00c      	b.n	800607e <_vsnprintf+0x93e>

      default :
        out(*format, buffer, idx++, maxlen);
 8006064:	683b      	ldr	r3, [r7, #0]
 8006066:	7818      	ldrb	r0, [r3, #0]
 8006068:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800606a:	1c53      	adds	r3, r2, #1
 800606c:	647b      	str	r3, [r7, #68]	; 0x44
 800606e:	68fc      	ldr	r4, [r7, #12]
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	68b9      	ldr	r1, [r7, #8]
 8006074:	47a0      	blx	r4
        format++;
 8006076:	683b      	ldr	r3, [r7, #0]
 8006078:	3301      	adds	r3, #1
 800607a:	603b      	str	r3, [r7, #0]
        break;
 800607c:	bf00      	nop
  while (*format)
 800607e:	683b      	ldr	r3, [r7, #0]
 8006080:	781b      	ldrb	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	f47f ab6d 	bne.w	8005762 <_vsnprintf+0x22>
    }
  }

  // termination
  out((char)0, buffer, idx < maxlen ? idx : maxlen - 1U, maxlen);
 8006088:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	429a      	cmp	r2, r3
 800608e:	d302      	bcc.n	8006096 <_vsnprintf+0x956>
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	1e5a      	subs	r2, r3, #1
 8006094:	e000      	b.n	8006098 <_vsnprintf+0x958>
 8006096:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006098:	68fc      	ldr	r4, [r7, #12]
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	68b9      	ldr	r1, [r7, #8]
 800609e:	2000      	movs	r0, #0
 80060a0:	47a0      	blx	r4

  // return written chars without terminating \0
  return (int)idx;
 80060a2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
}
 80060a4:	4618      	mov	r0, r3
 80060a6:	3758      	adds	r7, #88	; 0x58
 80060a8:	46bd      	mov	sp, r7
 80060aa:	bdb0      	pop	{r4, r5, r7, pc}

080060ac <sprintf_>:
  return ret;
}


int sprintf_(char* buffer, const char* format, ...)
{
 80060ac:	b40e      	push	{r1, r2, r3}
 80060ae:	b580      	push	{r7, lr}
 80060b0:	b087      	sub	sp, #28
 80060b2:	af02      	add	r7, sp, #8
 80060b4:	6078      	str	r0, [r7, #4]
  va_list va;
  va_start(va, format);
 80060b6:	f107 0320 	add.w	r3, r7, #32
 80060ba:	60bb      	str	r3, [r7, #8]
  const int ret = _vsnprintf(_out_buffer, buffer, (size_t)-1, format, va);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	9300      	str	r3, [sp, #0]
 80060c0:	69fb      	ldr	r3, [r7, #28]
 80060c2:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80060c6:	6879      	ldr	r1, [r7, #4]
 80060c8:	4805      	ldr	r0, [pc, #20]	; (80060e0 <sprintf_+0x34>)
 80060ca:	f7ff fb39 	bl	8005740 <_vsnprintf>
 80060ce:	60f8      	str	r0, [r7, #12]
  va_end(va);
  return ret;
 80060d0:	68fb      	ldr	r3, [r7, #12]
}
 80060d2:	4618      	mov	r0, r3
 80060d4:	3714      	adds	r7, #20
 80060d6:	46bd      	mov	sp, r7
 80060d8:	e8bd 4080 	ldmia.w	sp!, {r7, lr}
 80060dc:	b003      	add	sp, #12
 80060de:	4770      	bx	lr
 80060e0:	08004837 	.word	0x08004837

080060e4 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* CAN 통신 초기화  */
bool CANSPI_Initialize(void)
{
 80060e4:	b580      	push	{r7, lr}
 80060e6:	b088      	sub	sp, #32
 80060e8:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;

  /* Rx Mask values 초기화 */
  RXM0reg.RXM0SIDH = 0x00;
 80060ea:	2300      	movs	r3, #0
 80060ec:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 80060ee:	2300      	movs	r3, #0
 80060f0:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 80060f2:	2300      	movs	r3, #0
 80060f4:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 80060f6:	2300      	movs	r3, #0
 80060f8:	71fb      	strb	r3, [r7, #7]

  RXM1reg.RXM1SIDH = 0x00;
 80060fa:	2300      	movs	r3, #0
 80060fc:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 80060fe:	2300      	movs	r3, #0
 8006100:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 8006102:	2300      	movs	r3, #0
 8006104:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 8006106:	2300      	movs	r3, #0
 8006108:	70fb      	strb	r3, [r7, #3]

  /* Rx Filter values 초기화 */
  RXF0reg.RXF0SIDH = 0x00;
 800610a:	2300      	movs	r3, #0
 800610c:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 800610e:	2300      	movs	r3, #0
 8006110:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 8006112:	2300      	movs	r3, #0
 8006114:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 8006116:	2300      	movs	r3, #0
 8006118:	77fb      	strb	r3, [r7, #31]

  RXF1reg.RXF1SIDH = 0x00;
 800611a:	2300      	movs	r3, #0
 800611c:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 800611e:	2308      	movs	r3, #8
 8006120:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8006122:	2300      	movs	r3, #0
 8006124:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 8006126:	2300      	movs	r3, #0
 8006128:	76fb      	strb	r3, [r7, #27]

  RXF2reg.RXF2SIDH = 0x00;
 800612a:	2300      	movs	r3, #0
 800612c:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 800612e:	2300      	movs	r3, #0
 8006130:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8006132:	2300      	movs	r3, #0
 8006134:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 8006136:	2300      	movs	r3, #0
 8006138:	75fb      	strb	r3, [r7, #23]

  RXF3reg.RXF3SIDH = 0x00;
 800613a:	2300      	movs	r3, #0
 800613c:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 800613e:	2300      	movs	r3, #0
 8006140:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8006142:	2300      	movs	r3, #0
 8006144:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 8006146:	2300      	movs	r3, #0
 8006148:	74fb      	strb	r3, [r7, #19]

  RXF4reg.RXF4SIDH = 0x00;
 800614a:	2300      	movs	r3, #0
 800614c:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 800614e:	2300      	movs	r3, #0
 8006150:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8006152:	2300      	movs	r3, #0
 8006154:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 8006156:	2300      	movs	r3, #0
 8006158:	73fb      	strb	r3, [r7, #15]

  RXF5reg.RXF5SIDH = 0x00;
 800615a:	2300      	movs	r3, #0
 800615c:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 800615e:	2308      	movs	r3, #8
 8006160:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8006162:	2300      	movs	r3, #0
 8006164:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8006166:	2300      	movs	r3, #0
 8006168:	72fb      	strb	r3, [r7, #11]

  /* MCP2515 초기화, SPI 통신 상태 확인 */
  if(!MCP2515_Initialize())
 800616a:	f000 ff3f 	bl	8006fec <MCP2515_Initialize>
 800616e:	4603      	mov	r3, r0
 8006170:	f083 0301 	eor.w	r3, r3, #1
 8006174:	b2db      	uxtb	r3, r3
 8006176:	2b00      	cmp	r3, #0
 8006178:	d001      	beq.n	800617e <CANSPI_Initialize+0x9a>
    return false;
 800617a:	2300      	movs	r3, #0
 800617c:	e05e      	b.n	800623c <CANSPI_Initialize+0x158>

  /* Configuration 모드로 설정 */
  if(!MCP2515_SetConfigMode())
 800617e:	f000 ff57 	bl	8007030 <MCP2515_SetConfigMode>
 8006182:	4603      	mov	r3, r0
 8006184:	f083 0301 	eor.w	r3, r3, #1
 8006188:	b2db      	uxtb	r3, r3
 800618a:	2b00      	cmp	r3, #0
 800618c:	d001      	beq.n	8006192 <CANSPI_Initialize+0xae>
    return false;
 800618e:	2300      	movs	r3, #0
 8006190:	e054      	b.n	800623c <CANSPI_Initialize+0x158>

  /* Filter & Mask 값 설정 */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8006192:	1d3b      	adds	r3, r7, #4
 8006194:	461a      	mov	r2, r3
 8006196:	2123      	movs	r1, #35	; 0x23
 8006198:	2020      	movs	r0, #32
 800619a:	f000 ffed 	bl	8007178 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 800619e:	463b      	mov	r3, r7
 80061a0:	461a      	mov	r2, r3
 80061a2:	2127      	movs	r1, #39	; 0x27
 80061a4:	2024      	movs	r0, #36	; 0x24
 80061a6:	f000 ffe7 	bl	8007178 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 80061aa:	f107 031c 	add.w	r3, r7, #28
 80061ae:	461a      	mov	r2, r3
 80061b0:	2103      	movs	r1, #3
 80061b2:	2000      	movs	r0, #0
 80061b4:	f000 ffe0 	bl	8007178 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 80061b8:	f107 0318 	add.w	r3, r7, #24
 80061bc:	461a      	mov	r2, r3
 80061be:	2107      	movs	r1, #7
 80061c0:	2004      	movs	r0, #4
 80061c2:	f000 ffd9 	bl	8007178 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 80061c6:	f107 0314 	add.w	r3, r7, #20
 80061ca:	461a      	mov	r2, r3
 80061cc:	210b      	movs	r1, #11
 80061ce:	2008      	movs	r0, #8
 80061d0:	f000 ffd2 	bl	8007178 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 80061d4:	f107 0310 	add.w	r3, r7, #16
 80061d8:	461a      	mov	r2, r3
 80061da:	2113      	movs	r1, #19
 80061dc:	2010      	movs	r0, #16
 80061de:	f000 ffcb 	bl	8007178 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 80061e2:	f107 030c 	add.w	r3, r7, #12
 80061e6:	461a      	mov	r2, r3
 80061e8:	2117      	movs	r1, #23
 80061ea:	2014      	movs	r0, #20
 80061ec:	f000 ffc4 	bl	8007178 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 80061f0:	f107 0308 	add.w	r3, r7, #8
 80061f4:	461a      	mov	r2, r3
 80061f6:	211b      	movs	r1, #27
 80061f8:	2018      	movs	r0, #24
 80061fa:	f000 ffbd 	bl	8007178 <MCP2515_WriteByteSequence>

  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 80061fe:	2104      	movs	r1, #4
 8006200:	2060      	movs	r0, #96	; 0x60
 8006202:	f000 ff95 	bl	8007130 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8006206:	2101      	movs	r1, #1
 8006208:	2070      	movs	r0, #112	; 0x70
 800620a:	f000 ff91 	bl	8007130 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */

  /* 00(SJW 1tq) 000000 */
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 800620e:	2100      	movs	r1, #0
 8006210:	202a      	movs	r0, #42	; 0x2a
 8006212:	f000 ff8d 	bl	8007130 <MCP2515_WriteByte>

  /* 1 1 100(5tq) 101(6tq) */
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8006216:	21e5      	movs	r1, #229	; 0xe5
 8006218:	2029      	movs	r0, #41	; 0x29
 800621a:	f000 ff89 	bl	8007130 <MCP2515_WriteByte>

  /* 1 0 000 011(4tq) */
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 800621e:	2183      	movs	r1, #131	; 0x83
 8006220:	2028      	movs	r0, #40	; 0x28
 8006222:	f000 ff85 	bl	8007130 <MCP2515_WriteByte>

  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 8006226:	f000 ff21 	bl	800706c <MCP2515_SetNormalMode>
 800622a:	4603      	mov	r3, r0
 800622c:	f083 0301 	eor.w	r3, r3, #1
 8006230:	b2db      	uxtb	r3, r3
 8006232:	2b00      	cmp	r3, #0
 8006234:	d001      	beq.n	800623a <CANSPI_Initialize+0x156>
    return false;
 8006236:	2300      	movs	r3, #0
 8006238:	e000      	b.n	800623c <CANSPI_Initialize+0x158>

  return true;
 800623a:	2301      	movs	r3, #1
}
 800623c:	4618      	mov	r0, r3
 800623e:	3720      	adds	r7, #32
 8006240:	46bd      	mov	sp, r7
 8006242:	bd80      	pop	{r7, pc}

08006244 <CANSPI_Transmit>:

/* CAN 메시지 전송 */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg)
{
 8006244:	b580      	push	{r7, lr}
 8006246:	b084      	sub	sp, #16
 8006248:	af00      	add	r7, sp, #0
 800624a:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 800624c:	2300      	movs	r3, #0
 800624e:	73fb      	strb	r3, [r7, #15]

  idReg.tempSIDH = 0;
 8006250:	4b36      	ldr	r3, [pc, #216]	; (800632c <CANSPI_Transmit+0xe8>)
 8006252:	2200      	movs	r2, #0
 8006254:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8006256:	4b35      	ldr	r3, [pc, #212]	; (800632c <CANSPI_Transmit+0xe8>)
 8006258:	2200      	movs	r2, #0
 800625a:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 800625c:	4b33      	ldr	r3, [pc, #204]	; (800632c <CANSPI_Transmit+0xe8>)
 800625e:	2200      	movs	r2, #0
 8006260:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8006262:	4b32      	ldr	r3, [pc, #200]	; (800632c <CANSPI_Transmit+0xe8>)
 8006264:	2200      	movs	r2, #0
 8006266:	70da      	strb	r2, [r3, #3]

  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8006268:	f000 fff4 	bl	8007254 <MCP2515_ReadStatus>
 800626c:	4603      	mov	r3, r0
 800626e:	461a      	mov	r2, r3
 8006270:	4b2f      	ldr	r3, [pc, #188]	; (8006330 <CANSPI_Transmit+0xec>)
 8006272:	701a      	strb	r2, [r3, #0]

  /* 현재 Transmission 이 Pending 되지 않은 버퍼를 찾아서 전송한다. */
  if (ctrlStatus.TXB0REQ != 1)
 8006274:	4b2e      	ldr	r3, [pc, #184]	; (8006330 <CANSPI_Transmit+0xec>)
 8006276:	781b      	ldrb	r3, [r3, #0]
 8006278:	f003 0304 	and.w	r3, r3, #4
 800627c:	b2db      	uxtb	r3, r3
 800627e:	2b00      	cmp	r3, #0
 8006280:	d115      	bne.n	80062ae <CANSPI_Transmit+0x6a>
  {
    /* ID Type에 맞게 변환 */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8006282:	687b      	ldr	r3, [r7, #4]
 8006284:	6858      	ldr	r0, [r3, #4]
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	781b      	ldrb	r3, [r3, #0]
 800628a:	4a28      	ldr	r2, [pc, #160]	; (800632c <CANSPI_Transmit+0xe8>)
 800628c:	4619      	mov	r1, r3
 800628e:	f000 f928 	bl	80064e2 <convertCANid2Reg>

    /* Tx Buffer에 전송할 데이터 Loading */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	7a1a      	ldrb	r2, [r3, #8]
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	3309      	adds	r3, #9
 800629a:	4924      	ldr	r1, [pc, #144]	; (800632c <CANSPI_Transmit+0xe8>)
 800629c:	2040      	movs	r0, #64	; 0x40
 800629e:	f000 ff95 	bl	80071cc <MCP2515_LoadTxSequence>

    /* Tx Buffer의 데이터 전송요청 */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 80062a2:	2081      	movs	r0, #129	; 0x81
 80062a4:	f000 ffbc 	bl	8007220 <MCP2515_RequestToSend>

    returnValue = 1;
 80062a8:	2301      	movs	r3, #1
 80062aa:	73fb      	strb	r3, [r7, #15]
 80062ac:	e038      	b.n	8006320 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 80062ae:	4b20      	ldr	r3, [pc, #128]	; (8006330 <CANSPI_Transmit+0xec>)
 80062b0:	781b      	ldrb	r3, [r3, #0]
 80062b2:	f003 0310 	and.w	r3, r3, #16
 80062b6:	b2db      	uxtb	r3, r3
 80062b8:	2b00      	cmp	r3, #0
 80062ba:	d115      	bne.n	80062e8 <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80062bc:	687b      	ldr	r3, [r7, #4]
 80062be:	6858      	ldr	r0, [r3, #4]
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	781b      	ldrb	r3, [r3, #0]
 80062c4:	4a19      	ldr	r2, [pc, #100]	; (800632c <CANSPI_Transmit+0xe8>)
 80062c6:	4619      	mov	r1, r3
 80062c8:	f000 f90b 	bl	80064e2 <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 80062cc:	687b      	ldr	r3, [r7, #4]
 80062ce:	7a1a      	ldrb	r2, [r3, #8]
 80062d0:	687b      	ldr	r3, [r7, #4]
 80062d2:	3309      	adds	r3, #9
 80062d4:	4915      	ldr	r1, [pc, #84]	; (800632c <CANSPI_Transmit+0xe8>)
 80062d6:	2042      	movs	r0, #66	; 0x42
 80062d8:	f000 ff78 	bl	80071cc <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 80062dc:	2082      	movs	r0, #130	; 0x82
 80062de:	f000 ff9f 	bl	8007220 <MCP2515_RequestToSend>

    returnValue = 1;
 80062e2:	2301      	movs	r3, #1
 80062e4:	73fb      	strb	r3, [r7, #15]
 80062e6:	e01b      	b.n	8006320 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 80062e8:	4b11      	ldr	r3, [pc, #68]	; (8006330 <CANSPI_Transmit+0xec>)
 80062ea:	781b      	ldrb	r3, [r3, #0]
 80062ec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062f0:	b2db      	uxtb	r3, r3
 80062f2:	2b00      	cmp	r3, #0
 80062f4:	d114      	bne.n	8006320 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	6858      	ldr	r0, [r3, #4]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	781b      	ldrb	r3, [r3, #0]
 80062fe:	4a0b      	ldr	r2, [pc, #44]	; (800632c <CANSPI_Transmit+0xe8>)
 8006300:	4619      	mov	r1, r3
 8006302:	f000 f8ee 	bl	80064e2 <convertCANid2Reg>

    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	7a1a      	ldrb	r2, [r3, #8]
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	3309      	adds	r3, #9
 800630e:	4907      	ldr	r1, [pc, #28]	; (800632c <CANSPI_Transmit+0xe8>)
 8006310:	2044      	movs	r0, #68	; 0x44
 8006312:	f000 ff5b 	bl	80071cc <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 8006316:	2084      	movs	r0, #132	; 0x84
 8006318:	f000 ff82 	bl	8007220 <MCP2515_RequestToSend>

    returnValue = 1;
 800631c:	2301      	movs	r3, #1
 800631e:	73fb      	strb	r3, [r7, #15]
  }

  return (returnValue);
 8006320:	7bfb      	ldrb	r3, [r7, #15]
}
 8006322:	4618      	mov	r0, r3
 8006324:	3710      	adds	r7, #16
 8006326:	46bd      	mov	sp, r7
 8006328:	bd80      	pop	{r7, pc}
 800632a:	bf00      	nop
 800632c:	20005398 	.word	0x20005398
 8006330:	20005394 	.word	0x20005394

08006334 <CANSPI_Receive>:

/* CAN 메시지 수신 */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg)
{
 8006334:	b580      	push	{r7, lr}
 8006336:	b088      	sub	sp, #32
 8006338:	af00      	add	r7, sp, #0
 800633a:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 800633c:	2300      	movs	r3, #0
 800633e:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;

  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 8006340:	f000 ffa4 	bl	800728c <MCP2515_GetRxStatus>
 8006344:	4603      	mov	r3, r0
 8006346:	733b      	strb	r3, [r7, #12]

  /* 버퍼에 수신된 메시지가 있는지 확인 */
  if (rxStatus.rxBuffer != 0)
 8006348:	7b3b      	ldrb	r3, [r7, #12]
 800634a:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800634e:	b2db      	uxtb	r3, r3
 8006350:	2b00      	cmp	r3, #0
 8006352:	d066      	beq.n	8006422 <CANSPI_Receive+0xee>
  {
    /* 어떤 버퍼에 메시지가 있는지 확인 후 처리 */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 8006354:	7b3b      	ldrb	r3, [r7, #12]
 8006356:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800635a:	b2db      	uxtb	r3, r3
 800635c:	2b40      	cmp	r3, #64	; 0x40
 800635e:	bf0c      	ite	eq
 8006360:	2301      	moveq	r3, #1
 8006362:	2300      	movne	r3, #0
 8006364:	b2da      	uxtb	r2, r3
 8006366:	7b3b      	ldrb	r3, [r7, #12]
 8006368:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800636c:	b2db      	uxtb	r3, r3
 800636e:	2bc0      	cmp	r3, #192	; 0xc0
 8006370:	bf0c      	ite	eq
 8006372:	2301      	moveq	r3, #1
 8006374:	2300      	movne	r3, #0
 8006376:	b2db      	uxtb	r3, r3
 8006378:	4313      	orrs	r3, r2
 800637a:	b2db      	uxtb	r3, r3
 800637c:	2b00      	cmp	r3, #0
 800637e:	d007      	beq.n	8006390 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8006380:	f107 0310 	add.w	r3, r7, #16
 8006384:	220d      	movs	r2, #13
 8006386:	4619      	mov	r1, r3
 8006388:	2090      	movs	r0, #144	; 0x90
 800638a:	f000 feaf 	bl	80070ec <MCP2515_ReadRxSequence>
 800638e:	e00c      	b.n	80063aa <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8006390:	7b3b      	ldrb	r3, [r7, #12]
 8006392:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 8006396:	b2db      	uxtb	r3, r3
 8006398:	2b80      	cmp	r3, #128	; 0x80
 800639a:	d106      	bne.n	80063aa <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 800639c:	f107 0310 	add.w	r3, r7, #16
 80063a0:	220d      	movs	r2, #13
 80063a2:	4619      	mov	r1, r3
 80063a4:	2094      	movs	r0, #148	; 0x94
 80063a6:	f000 fea1 	bl	80070ec <MCP2515_ReadRxSequence>
    }

    /* Extended 타입 */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 80063aa:	7b3b      	ldrb	r3, [r7, #12]
 80063ac:	f003 0318 	and.w	r3, r3, #24
 80063b0:	b2db      	uxtb	r3, r3
 80063b2:	2b10      	cmp	r3, #16
 80063b4:	d10c      	bne.n	80063d0 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2202      	movs	r2, #2
 80063ba:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80063bc:	7cb8      	ldrb	r0, [r7, #18]
 80063be:	7cf9      	ldrb	r1, [r7, #19]
 80063c0:	7c3a      	ldrb	r2, [r7, #16]
 80063c2:	7c7b      	ldrb	r3, [r7, #17]
 80063c4:	f000 f832 	bl	800642c <convertReg2ExtendedCANid>
 80063c8:	4602      	mov	r2, r0
 80063ca:	687b      	ldr	r3, [r7, #4]
 80063cc:	605a      	str	r2, [r3, #4]
 80063ce:	e00b      	b.n	80063e8 <CANSPI_Receive+0xb4>
    }
    else
    {
      /* Standard 타입 */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 80063d0:	687b      	ldr	r3, [r7, #4]
 80063d2:	2201      	movs	r2, #1
 80063d4:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 80063d6:	7c3b      	ldrb	r3, [r7, #16]
 80063d8:	7c7a      	ldrb	r2, [r7, #17]
 80063da:	4611      	mov	r1, r2
 80063dc:	4618      	mov	r0, r3
 80063de:	f000 f863 	bl	80064a8 <convertReg2StandardCANid>
 80063e2:	4602      	mov	r2, r0
 80063e4:	687b      	ldr	r3, [r7, #4]
 80063e6:	605a      	str	r2, [r3, #4]
    }

    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 80063e8:	7d3a      	ldrb	r2, [r7, #20]
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 80063ee:	7d7a      	ldrb	r2, [r7, #21]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 80063f4:	7dba      	ldrb	r2, [r7, #22]
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 80063fa:	7dfa      	ldrb	r2, [r7, #23]
 80063fc:	687b      	ldr	r3, [r7, #4]
 80063fe:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8006400:	7e3a      	ldrb	r2, [r7, #24]
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 8006406:	7e7a      	ldrb	r2, [r7, #25]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 800640c:	7eba      	ldrb	r2, [r7, #26]
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8006412:	7efa      	ldrb	r2, [r7, #27]
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 8006418:	7f3a      	ldrb	r2, [r7, #28]
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	741a      	strb	r2, [r3, #16]

    returnValue = 1;
 800641e:	2301      	movs	r3, #1
 8006420:	77fb      	strb	r3, [r7, #31]
  }

  return (returnValue);
 8006422:	7ffb      	ldrb	r3, [r7, #31]
}
 8006424:	4618      	mov	r0, r3
 8006426:	3720      	adds	r7, #32
 8006428:	46bd      	mov	sp, r7
 800642a:	bd80      	pop	{r7, pc}

0800642c <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* Register 저장값을 Extended ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 800642c:	b490      	push	{r4, r7}
 800642e:	b086      	sub	sp, #24
 8006430:	af00      	add	r7, sp, #0
 8006432:	4604      	mov	r4, r0
 8006434:	4608      	mov	r0, r1
 8006436:	4611      	mov	r1, r2
 8006438:	461a      	mov	r2, r3
 800643a:	4623      	mov	r3, r4
 800643c:	71fb      	strb	r3, [r7, #7]
 800643e:	4603      	mov	r3, r0
 8006440:	71bb      	strb	r3, [r7, #6]
 8006442:	460b      	mov	r3, r1
 8006444:	717b      	strb	r3, [r7, #5]
 8006446:	4613      	mov	r3, r2
 8006448:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 800644a:	2300      	movs	r3, #0
 800644c:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 800644e:	2300      	movs	r3, #0
 8006450:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;

  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 8006452:	793b      	ldrb	r3, [r7, #4]
 8006454:	f003 0303 	and.w	r3, r3, #3
 8006458:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 800645a:	793b      	ldrb	r3, [r7, #4]
 800645c:	095b      	lsrs	r3, r3, #5
 800645e:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 8006460:	797b      	ldrb	r3, [r7, #5]
 8006462:	00db      	lsls	r3, r3, #3
 8006464:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 8006466:	7bbb      	ldrb	r3, [r7, #14]
 8006468:	693a      	ldr	r2, [r7, #16]
 800646a:	4413      	add	r3, r2
 800646c:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 800646e:	693b      	ldr	r3, [r7, #16]
 8006470:	009b      	lsls	r3, r3, #2
 8006472:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 8006474:	7bfb      	ldrb	r3, [r7, #15]
 8006476:	693a      	ldr	r2, [r7, #16]
 8006478:	4413      	add	r3, r2
 800647a:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800647c:	693b      	ldr	r3, [r7, #16]
 800647e:	021b      	lsls	r3, r3, #8
 8006480:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 8006482:	79fb      	ldrb	r3, [r7, #7]
 8006484:	693a      	ldr	r2, [r7, #16]
 8006486:	4413      	add	r3, r2
 8006488:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 800648a:	693b      	ldr	r3, [r7, #16]
 800648c:	021b      	lsls	r3, r3, #8
 800648e:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8006490:	79bb      	ldrb	r3, [r7, #6]
 8006492:	693a      	ldr	r2, [r7, #16]
 8006494:	4413      	add	r3, r2
 8006496:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;
 8006498:	693b      	ldr	r3, [r7, #16]
 800649a:	617b      	str	r3, [r7, #20]
  return (returnValue);
 800649c:	697b      	ldr	r3, [r7, #20]
}
 800649e:	4618      	mov	r0, r3
 80064a0:	3718      	adds	r7, #24
 80064a2:	46bd      	mov	sp, r7
 80064a4:	bc90      	pop	{r4, r7}
 80064a6:	4770      	bx	lr

080064a8 <convertReg2StandardCANid>:

/* Register 저장값을 Standard ID 타입으로 변환하기 위한 함수 */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b085      	sub	sp, #20
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	4603      	mov	r3, r0
 80064b0:	460a      	mov	r2, r1
 80064b2:	71fb      	strb	r3, [r7, #7]
 80064b4:	4613      	mov	r3, r2
 80064b6:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 80064b8:	2300      	movs	r3, #0
 80064ba:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;

  ConvertedID = (tempRXBn_SIDH << 3);
 80064bc:	79fb      	ldrb	r3, [r7, #7]
 80064be:	00db      	lsls	r3, r3, #3
 80064c0:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 80064c2:	79bb      	ldrb	r3, [r7, #6]
 80064c4:	095b      	lsrs	r3, r3, #5
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	461a      	mov	r2, r3
 80064ca:	68bb      	ldr	r3, [r7, #8]
 80064cc:	4413      	add	r3, r2
 80064ce:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	60fb      	str	r3, [r7, #12]

  return (returnValue);
 80064d4:	68fb      	ldr	r3, [r7, #12]
}
 80064d6:	4618      	mov	r0, r3
 80064d8:	3714      	adds	r7, #20
 80064da:	46bd      	mov	sp, r7
 80064dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e0:	4770      	bx	lr

080064e2 <convertCANid2Reg>:

/* CAN ID를 Register에 저장하기 위한 변환 함수 */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg)
{
 80064e2:	b480      	push	{r7}
 80064e4:	b087      	sub	sp, #28
 80064e6:	af00      	add	r7, sp, #0
 80064e8:	60f8      	str	r0, [r7, #12]
 80064ea:	460b      	mov	r3, r1
 80064ec:	607a      	str	r2, [r7, #4]
 80064ee:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 80064f0:	2300      	movs	r3, #0
 80064f2:	75fb      	strb	r3, [r7, #23]

  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B)
 80064f4:	7afb      	ldrb	r3, [r7, #11]
 80064f6:	2b02      	cmp	r3, #2
 80064f8:	d12e      	bne.n	8006558 <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 80064fa:	68fb      	ldr	r3, [r7, #12]
 80064fc:	b2da      	uxtb	r2, r3
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8006502:	68fb      	ldr	r3, [r7, #12]
 8006504:	0a1b      	lsrs	r3, r3, #8
 8006506:	60fb      	str	r3, [r7, #12]

    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	b2da      	uxtb	r2, r3
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8006510:	68fb      	ldr	r3, [r7, #12]
 8006512:	0a1b      	lsrs	r3, r3, #8
 8006514:	60fb      	str	r3, [r7, #12]

    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 8006516:	68fb      	ldr	r3, [r7, #12]
 8006518:	b2db      	uxtb	r3, r3
 800651a:	f003 0303 	and.w	r3, r3, #3
 800651e:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8006520:	68fb      	ldr	r3, [r7, #12]
 8006522:	00db      	lsls	r3, r3, #3
 8006524:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 8006526:	68fb      	ldr	r3, [r7, #12]
 8006528:	b2db      	uxtb	r3, r3
 800652a:	f023 031f 	bic.w	r3, r3, #31
 800652e:	b2da      	uxtb	r2, r3
 8006530:	7dfb      	ldrb	r3, [r7, #23]
 8006532:	4413      	add	r3, r2
 8006534:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 8006536:	7dfb      	ldrb	r3, [r7, #23]
 8006538:	3308      	adds	r3, #8
 800653a:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 800653c:	7dfb      	ldrb	r3, [r7, #23]
 800653e:	f023 0314 	bic.w	r3, r3, #20
 8006542:	b2da      	uxtb	r2, r3
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	705a      	strb	r2, [r3, #1]

    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 8006548:	68fb      	ldr	r3, [r7, #12]
 800654a:	0a1b      	lsrs	r3, r3, #8
 800654c:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 800654e:	68fb      	ldr	r3, [r7, #12]
 8006550:	b2da      	uxtb	r2, r3
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 8006556:	e013      	b.n	8006580 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	2200      	movs	r2, #0
 800655c:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 800655e:	687b      	ldr	r3, [r7, #4]
 8006560:	2200      	movs	r2, #0
 8006562:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 8006564:	68fb      	ldr	r3, [r7, #12]
 8006566:	015b      	lsls	r3, r3, #5
 8006568:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 800656a:	68fb      	ldr	r3, [r7, #12]
 800656c:	b2da      	uxtb	r2, r3
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 8006572:	68fb      	ldr	r3, [r7, #12]
 8006574:	0a1b      	lsrs	r3, r3, #8
 8006576:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 8006578:	68fb      	ldr	r3, [r7, #12]
 800657a:	b2da      	uxtb	r2, r3
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	701a      	strb	r2, [r3, #0]
}
 8006580:	bf00      	nop
 8006582:	371c      	adds	r7, #28
 8006584:	46bd      	mov	sp, r7
 8006586:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658a:	4770      	bx	lr

0800658c <write_CAN_message>:
static bool CAN_connected = false;
static uCAN_MSG txMessage;
static uCAN_MSG rxMessage;

// Write an extended CAN message
static void write_CAN_message(uint32_t ID, uint8_t data[]) {
 800658c:	b580      	push	{r7, lr}
 800658e:	b082      	sub	sp, #8
 8006590:	af00      	add	r7, sp, #0
 8006592:	6078      	str	r0, [r7, #4]
 8006594:	6039      	str	r1, [r7, #0]
	txMessage.frame.idType = dEXTENDED_CAN_MSG_ID_2_0B;
 8006596:	4b18      	ldr	r3, [pc, #96]	; (80065f8 <write_CAN_message+0x6c>)
 8006598:	2202      	movs	r2, #2
 800659a:	701a      	strb	r2, [r3, #0]
	txMessage.frame.id = ID;
 800659c:	4a16      	ldr	r2, [pc, #88]	; (80065f8 <write_CAN_message+0x6c>)
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	6053      	str	r3, [r2, #4]
	txMessage.frame.dlc = 8;
 80065a2:	4b15      	ldr	r3, [pc, #84]	; (80065f8 <write_CAN_message+0x6c>)
 80065a4:	2208      	movs	r2, #8
 80065a6:	721a      	strb	r2, [r3, #8]
	txMessage.frame.data0 = data[0];
 80065a8:	683b      	ldr	r3, [r7, #0]
 80065aa:	781a      	ldrb	r2, [r3, #0]
 80065ac:	4b12      	ldr	r3, [pc, #72]	; (80065f8 <write_CAN_message+0x6c>)
 80065ae:	725a      	strb	r2, [r3, #9]
	txMessage.frame.data1 = data[1];
 80065b0:	683b      	ldr	r3, [r7, #0]
 80065b2:	785a      	ldrb	r2, [r3, #1]
 80065b4:	4b10      	ldr	r3, [pc, #64]	; (80065f8 <write_CAN_message+0x6c>)
 80065b6:	729a      	strb	r2, [r3, #10]
	txMessage.frame.data2 = data[2];
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	789a      	ldrb	r2, [r3, #2]
 80065bc:	4b0e      	ldr	r3, [pc, #56]	; (80065f8 <write_CAN_message+0x6c>)
 80065be:	72da      	strb	r2, [r3, #11]
	txMessage.frame.data3 = data[3];
 80065c0:	683b      	ldr	r3, [r7, #0]
 80065c2:	78da      	ldrb	r2, [r3, #3]
 80065c4:	4b0c      	ldr	r3, [pc, #48]	; (80065f8 <write_CAN_message+0x6c>)
 80065c6:	731a      	strb	r2, [r3, #12]
	txMessage.frame.data4 = data[4];
 80065c8:	683b      	ldr	r3, [r7, #0]
 80065ca:	791a      	ldrb	r2, [r3, #4]
 80065cc:	4b0a      	ldr	r3, [pc, #40]	; (80065f8 <write_CAN_message+0x6c>)
 80065ce:	735a      	strb	r2, [r3, #13]
	txMessage.frame.data5 = data[5];
 80065d0:	683b      	ldr	r3, [r7, #0]
 80065d2:	795a      	ldrb	r2, [r3, #5]
 80065d4:	4b08      	ldr	r3, [pc, #32]	; (80065f8 <write_CAN_message+0x6c>)
 80065d6:	739a      	strb	r2, [r3, #14]
	txMessage.frame.data6 = data[6];
 80065d8:	683b      	ldr	r3, [r7, #0]
 80065da:	799a      	ldrb	r2, [r3, #6]
 80065dc:	4b06      	ldr	r3, [pc, #24]	; (80065f8 <write_CAN_message+0x6c>)
 80065de:	73da      	strb	r2, [r3, #15]
	txMessage.frame.data7 = data[7];
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	79da      	ldrb	r2, [r3, #7]
 80065e4:	4b04      	ldr	r3, [pc, #16]	; (80065f8 <write_CAN_message+0x6c>)
 80065e6:	741a      	strb	r2, [r3, #16]
	CANSPI_Transmit(&txMessage);
 80065e8:	4803      	ldr	r0, [pc, #12]	; (80065f8 <write_CAN_message+0x6c>)
 80065ea:	f7ff fe2b 	bl	8006244 <CANSPI_Transmit>
}
 80065ee:	bf00      	nop
 80065f0:	3708      	adds	r7, #8
 80065f2:	46bd      	mov	sp, r7
 80065f4:	bd80      	pop	{r7, pc}
 80065f6:	bf00      	nop
 80065f8:	20000a4c 	.word	0x20000a4c

080065fc <read_CAN_message>:

// Read the extended  CAN message
static bool read_CAN_message(uint32_t* ID, uint8_t data[]){
 80065fc:	b580      	push	{r7, lr}
 80065fe:	b084      	sub	sp, #16
 8006600:	af00      	add	r7, sp, #0
 8006602:	6078      	str	r0, [r7, #4]
 8006604:	6039      	str	r1, [r7, #0]
	bool available = CANSPI_Receive(&rxMessage);
 8006606:	481f      	ldr	r0, [pc, #124]	; (8006684 <read_CAN_message+0x88>)
 8006608:	f7ff fe94 	bl	8006334 <CANSPI_Receive>
 800660c:	4603      	mov	r3, r0
 800660e:	2b00      	cmp	r3, #0
 8006610:	bf14      	ite	ne
 8006612:	2301      	movne	r3, #1
 8006614:	2300      	moveq	r3, #0
 8006616:	73fb      	strb	r3, [r7, #15]
	if(available){
 8006618:	7bfb      	ldrb	r3, [r7, #15]
 800661a:	2b00      	cmp	r3, #0
 800661c:	d02c      	beq.n	8006678 <read_CAN_message+0x7c>
		//uint8_t idType = rxMessage.frame.idType; // Extended ID type
		*ID = rxMessage.frame.id;
 800661e:	4b19      	ldr	r3, [pc, #100]	; (8006684 <read_CAN_message+0x88>)
 8006620:	685a      	ldr	r2, [r3, #4]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	601a      	str	r2, [r3, #0]
		data[0] = rxMessage.frame.data0;
 8006626:	4b17      	ldr	r3, [pc, #92]	; (8006684 <read_CAN_message+0x88>)
 8006628:	7a5a      	ldrb	r2, [r3, #9]
 800662a:	683b      	ldr	r3, [r7, #0]
 800662c:	701a      	strb	r2, [r3, #0]
		data[1] = rxMessage.frame.data1;
 800662e:	683b      	ldr	r3, [r7, #0]
 8006630:	3301      	adds	r3, #1
 8006632:	4a14      	ldr	r2, [pc, #80]	; (8006684 <read_CAN_message+0x88>)
 8006634:	7a92      	ldrb	r2, [r2, #10]
 8006636:	701a      	strb	r2, [r3, #0]
		data[2] = rxMessage.frame.data2;
 8006638:	683b      	ldr	r3, [r7, #0]
 800663a:	3302      	adds	r3, #2
 800663c:	4a11      	ldr	r2, [pc, #68]	; (8006684 <read_CAN_message+0x88>)
 800663e:	7ad2      	ldrb	r2, [r2, #11]
 8006640:	701a      	strb	r2, [r3, #0]
		data[3] = rxMessage.frame.data3;
 8006642:	683b      	ldr	r3, [r7, #0]
 8006644:	3303      	adds	r3, #3
 8006646:	4a0f      	ldr	r2, [pc, #60]	; (8006684 <read_CAN_message+0x88>)
 8006648:	7b12      	ldrb	r2, [r2, #12]
 800664a:	701a      	strb	r2, [r3, #0]
		data[4] = rxMessage.frame.data4;
 800664c:	683b      	ldr	r3, [r7, #0]
 800664e:	3304      	adds	r3, #4
 8006650:	4a0c      	ldr	r2, [pc, #48]	; (8006684 <read_CAN_message+0x88>)
 8006652:	7b52      	ldrb	r2, [r2, #13]
 8006654:	701a      	strb	r2, [r3, #0]
		data[5] = rxMessage.frame.data5;
 8006656:	683b      	ldr	r3, [r7, #0]
 8006658:	3305      	adds	r3, #5
 800665a:	4a0a      	ldr	r2, [pc, #40]	; (8006684 <read_CAN_message+0x88>)
 800665c:	7b92      	ldrb	r2, [r2, #14]
 800665e:	701a      	strb	r2, [r3, #0]
		data[6] = rxMessage.frame.data6;
 8006660:	683b      	ldr	r3, [r7, #0]
 8006662:	3306      	adds	r3, #6
 8006664:	4a07      	ldr	r2, [pc, #28]	; (8006684 <read_CAN_message+0x88>)
 8006666:	7bd2      	ldrb	r2, [r2, #15]
 8006668:	701a      	strb	r2, [r3, #0]
		data[7] = rxMessage.frame.data7;
 800666a:	683b      	ldr	r3, [r7, #0]
 800666c:	3307      	adds	r3, #7
 800666e:	4a05      	ldr	r2, [pc, #20]	; (8006684 <read_CAN_message+0x88>)
 8006670:	7c12      	ldrb	r2, [r2, #16]
 8006672:	701a      	strb	r2, [r3, #0]
		return available;
 8006674:	7bfb      	ldrb	r3, [r7, #15]
 8006676:	e000      	b.n	800667a <read_CAN_message+0x7e>
	}
	return available;
 8006678:	7bfb      	ldrb	r3, [r7, #15]
}
 800667a:	4618      	mov	r0, r3
 800667c:	3710      	adds	r7, #16
 800667e:	46bd      	mov	sp, r7
 8006680:	bd80      	pop	{r7, pc}
 8006682:	bf00      	nop
 8006684:	20000a60 	.word	0x20000a60

08006688 <send_j1939_TP_CM_BAM>:

// Transport Protocol Connexion Management Broadcast Announce Message
static void send_j1939_TP_CM_BAM(J1939* j1939, uint16_t message_size, uint8_t packages_to_send, uint32_t PGN){
 8006688:	b580      	push	{r7, lr}
 800668a:	b088      	sub	sp, #32
 800668c:	af00      	add	r7, sp, #0
 800668e:	60f8      	str	r0, [r7, #12]
 8006690:	607b      	str	r3, [r7, #4]
 8006692:	460b      	mov	r3, r1
 8006694:	817b      	strh	r3, [r7, #10]
 8006696:	4613      	mov	r3, r2
 8006698:	727b      	strb	r3, [r7, #9]
	// ID
	uint32_t ID = (0x1CECFF << 8) | j1939->SA_ECU;
 800669a:	68fb      	ldr	r3, [r7, #12]
 800669c:	785b      	ldrb	r3, [r3, #1]
 800669e:	461a      	mov	r2, r3
 80066a0:	4b16      	ldr	r3, [pc, #88]	; (80066fc <send_j1939_TP_CM_BAM+0x74>)
 80066a2:	4313      	orrs	r3, r2
 80066a4:	61fb      	str	r3, [r7, #28]

	// Fill the data
	uint8_t data[8];
	data[0] = 0x20; // Control byte - Standard
 80066a6:	2320      	movs	r3, #32
 80066a8:	753b      	strb	r3, [r7, #20]
	data[1] = message_size; // Message size LSB. Total message size is 9 to 1785 bytes
 80066aa:	897b      	ldrh	r3, [r7, #10]
 80066ac:	b2db      	uxtb	r3, r3
 80066ae:	757b      	strb	r3, [r7, #21]
	data[2] = message_size >> 8; // Message size MSB
 80066b0:	897b      	ldrh	r3, [r7, #10]
 80066b2:	0a1b      	lsrs	r3, r3, #8
 80066b4:	b29b      	uxth	r3, r3
 80066b6:	b2db      	uxtb	r3, r3
 80066b8:	75bb      	strb	r3, [r7, #22]
	data[3] = packages_to_send; // Packages to send is 2 to 255 packages
 80066ba:	7a7b      	ldrb	r3, [r7, #9]
 80066bc:	75fb      	strb	r3, [r7, #23]
	data[4] = 0xFF; // Reserved
 80066be:	23ff      	movs	r3, #255	; 0xff
 80066c0:	763b      	strb	r3, [r7, #24]
	data[5] = PGN; // PGN LSB
 80066c2:	687b      	ldr	r3, [r7, #4]
 80066c4:	b2db      	uxtb	r3, r3
 80066c6:	767b      	strb	r3, [r7, #25]
	data[6] = PGN >> 8; // PGN
 80066c8:	687b      	ldr	r3, [r7, #4]
 80066ca:	0a1b      	lsrs	r3, r3, #8
 80066cc:	b2db      	uxtb	r3, r3
 80066ce:	76bb      	strb	r3, [r7, #26]
	data[7] = PGN >> 16; // PGN MSB
 80066d0:	687b      	ldr	r3, [r7, #4]
 80066d2:	0c1b      	lsrs	r3, r3, #16
 80066d4:	b2db      	uxtb	r3, r3
 80066d6:	76fb      	strb	r3, [r7, #27]

	// Write and wait 1000 ms then 100 ms
	HAL_Delay(1000);
 80066d8:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80066dc:	f002 fab8 	bl	8008c50 <HAL_Delay>
	write_CAN_message(ID, data);
 80066e0:	f107 0314 	add.w	r3, r7, #20
 80066e4:	4619      	mov	r1, r3
 80066e6:	69f8      	ldr	r0, [r7, #28]
 80066e8:	f7ff ff50 	bl	800658c <write_CAN_message>
	HAL_Delay(100);
 80066ec:	2064      	movs	r0, #100	; 0x64
 80066ee:	f002 faaf 	bl	8008c50 <HAL_Delay>
}
 80066f2:	bf00      	nop
 80066f4:	3720      	adds	r7, #32
 80066f6:	46bd      	mov	sp, r7
 80066f8:	bd80      	pop	{r7, pc}
 80066fa:	bf00      	nop
 80066fc:	1cecff00 	.word	0x1cecff00

08006700 <send_j1939_TP_DT>:

// Transport Protocol Data Transfer
static void send_j1939_TP_DT(J1939* j1939, uint8_t data[], uint16_t message_size, uint8_t packages_to_send){
 8006700:	b580      	push	{r7, lr}
 8006702:	b088      	sub	sp, #32
 8006704:	af00      	add	r7, sp, #0
 8006706:	60f8      	str	r0, [r7, #12]
 8006708:	60b9      	str	r1, [r7, #8]
 800670a:	4611      	mov	r1, r2
 800670c:	461a      	mov	r2, r3
 800670e:	460b      	mov	r3, r1
 8006710:	80fb      	strh	r3, [r7, #6]
 8006712:	4613      	mov	r3, r2
 8006714:	717b      	strb	r3, [r7, #5]
	uint32_t ID = (0x1CEBFF << 8) | j1939->SA_ECU;
 8006716:	68fb      	ldr	r3, [r7, #12]
 8006718:	785b      	ldrb	r3, [r3, #1]
 800671a:	461a      	mov	r2, r3
 800671c:	4b20      	ldr	r3, [pc, #128]	; (80067a0 <send_j1939_TP_DT+0xa0>)
 800671e:	4313      	orrs	r3, r2
 8006720:	61bb      	str	r3, [r7, #24]
	uint8_t package[8];
	uint16_t sended_bytes = 0;
 8006722:	2300      	movs	r3, #0
 8006724:	83fb      	strh	r3, [r7, #30]
	for(uint8_t i = 1; i <= packages_to_send; i++){
 8006726:	2301      	movs	r3, #1
 8006728:	777b      	strb	r3, [r7, #29]
 800672a:	e031      	b.n	8006790 <send_j1939_TP_DT+0x90>
		// Number of package
		package[0] = i;
 800672c:	7f7b      	ldrb	r3, [r7, #29]
 800672e:	743b      	strb	r3, [r7, #16]

		// Data
		for(uint8_t j = 0; j < 7; j++){
 8006730:	2300      	movs	r3, #0
 8006732:	773b      	strb	r3, [r7, #28]
 8006734:	e01d      	b.n	8006772 <send_j1939_TP_DT+0x72>
			if(sended_bytes < message_size)
 8006736:	8bfa      	ldrh	r2, [r7, #30]
 8006738:	88fb      	ldrh	r3, [r7, #6]
 800673a:	429a      	cmp	r2, r3
 800673c:	d20e      	bcs.n	800675c <send_j1939_TP_DT+0x5c>
				package[j+1] = data[sended_bytes++];
 800673e:	8bfb      	ldrh	r3, [r7, #30]
 8006740:	1c5a      	adds	r2, r3, #1
 8006742:	83fa      	strh	r2, [r7, #30]
 8006744:	461a      	mov	r2, r3
 8006746:	68bb      	ldr	r3, [r7, #8]
 8006748:	441a      	add	r2, r3
 800674a:	7f3b      	ldrb	r3, [r7, #28]
 800674c:	3301      	adds	r3, #1
 800674e:	7812      	ldrb	r2, [r2, #0]
 8006750:	f107 0120 	add.w	r1, r7, #32
 8006754:	440b      	add	r3, r1
 8006756:	f803 2c10 	strb.w	r2, [r3, #-16]
 800675a:	e007      	b.n	800676c <send_j1939_TP_DT+0x6c>
			else
				package[j+1] = 0xFF; // No data
 800675c:	7f3b      	ldrb	r3, [r7, #28]
 800675e:	3301      	adds	r3, #1
 8006760:	f107 0220 	add.w	r2, r7, #32
 8006764:	4413      	add	r3, r2
 8006766:	22ff      	movs	r2, #255	; 0xff
 8006768:	f803 2c10 	strb.w	r2, [r3, #-16]
		for(uint8_t j = 0; j < 7; j++){
 800676c:	7f3b      	ldrb	r3, [r7, #28]
 800676e:	3301      	adds	r3, #1
 8006770:	773b      	strb	r3, [r7, #28]
 8006772:	7f3b      	ldrb	r3, [r7, #28]
 8006774:	2b06      	cmp	r3, #6
 8006776:	d9de      	bls.n	8006736 <send_j1939_TP_DT+0x36>
		}

		// Send wait 100 ms
		write_CAN_message(ID, package);
 8006778:	f107 0310 	add.w	r3, r7, #16
 800677c:	4619      	mov	r1, r3
 800677e:	69b8      	ldr	r0, [r7, #24]
 8006780:	f7ff ff04 	bl	800658c <write_CAN_message>
		HAL_Delay(100);
 8006784:	2064      	movs	r0, #100	; 0x64
 8006786:	f002 fa63 	bl	8008c50 <HAL_Delay>
	for(uint8_t i = 1; i <= packages_to_send; i++){
 800678a:	7f7b      	ldrb	r3, [r7, #29]
 800678c:	3301      	adds	r3, #1
 800678e:	777b      	strb	r3, [r7, #29]
 8006790:	7f7a      	ldrb	r2, [r7, #29]
 8006792:	797b      	ldrb	r3, [r7, #5]
 8006794:	429a      	cmp	r2, r3
 8006796:	d9c9      	bls.n	800672c <send_j1939_TP_DT+0x2c>
	}
}
 8006798:	bf00      	nop
 800679a:	3720      	adds	r7, #32
 800679c:	46bd      	mov	sp, r7
 800679e:	bd80      	pop	{r7, pc}
 80067a0:	1cebff00 	.word	0x1cebff00

080067a4 <connect_can_bus>:

// Connect can-bus, if we are not connected
static void connect_can_bus(J1939* j1939){
 80067a4:	b580      	push	{r7, lr}
 80067a6:	b082      	sub	sp, #8
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
	if(CAN_connected == false){
 80067ac:	4b19      	ldr	r3, [pc, #100]	; (8006814 <connect_can_bus+0x70>)
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	f083 0301 	eor.w	r3, r3, #1
 80067b4:	b2db      	uxtb	r3, r3
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d027      	beq.n	800680a <connect_can_bus+0x66>
		memset(j1939->CA, 0, 8);
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	3302      	adds	r3, #2
 80067be:	2208      	movs	r2, #8
 80067c0:	2100      	movs	r1, #0
 80067c2:	4618      	mov	r0, r3
 80067c4:	f009 f8a3 	bl	800f90e <memset>
		memset(j1939->DM1_Messages_Binary, 0, 12);
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	330a      	adds	r3, #10
 80067cc:	220c      	movs	r2, #12
 80067ce:	2100      	movs	r1, #0
 80067d0:	4618      	mov	r0, r3
 80067d2:	f009 f89c 	bl	800f90e <memset>
		memset(j1939->DM16_data, 0, 8);
 80067d6:	687b      	ldr	r3, [r7, #4]
 80067d8:	3317      	adds	r3, #23
 80067da:	2208      	movs	r2, #8
 80067dc:	2100      	movs	r1, #0
 80067de:	4618      	mov	r0, r3
 80067e0:	f009 f895 	bl	800f90e <memset>
		memset(j1939->EEPROM_values, 0, 2*sizeof(uint16_t));
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	3320      	adds	r3, #32
 80067e8:	2204      	movs	r2, #4
 80067ea:	2100      	movs	r1, #0
 80067ec:	4618      	mov	r0, r3
 80067ee:	f009 f88e 	bl	800f90e <memset>
		j1939->SA_ACU = 0;
 80067f2:	687b      	ldr	r3, [r7, #4]
 80067f4:	2200      	movs	r2, #0
 80067f6:	701a      	strb	r2, [r3, #0]
		j1939->DM15_Status = DM15_Proceed;
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	2200      	movs	r2, #0
 80067fc:	759a      	strb	r2, [r3, #22]
		CAN_connected = CANSPI_Initialize();
 80067fe:	f7ff fc71 	bl	80060e4 <CANSPI_Initialize>
 8006802:	4603      	mov	r3, r0
 8006804:	461a      	mov	r2, r3
 8006806:	4b03      	ldr	r3, [pc, #12]	; (8006814 <connect_can_bus+0x70>)
 8006808:	701a      	strb	r2, [r3, #0]
	}
}
 800680a:	bf00      	nop
 800680c:	3708      	adds	r7, #8
 800680e:	46bd      	mov	sp, r7
 8006810:	bd80      	pop	{r7, pc}
 8006812:	bf00      	nop
 8006814:	20000a48 	.word	0x20000a48

08006818 <write_CAN_PGN_request>:

// Special case for sending a request in J1939 of 3 bytes of PNG
static void write_CAN_PGN_request(uint32_t ID, uint8_t data[]){
 8006818:	b580      	push	{r7, lr}
 800681a:	b082      	sub	sp, #8
 800681c:	af00      	add	r7, sp, #0
 800681e:	6078      	str	r0, [r7, #4]
 8006820:	6039      	str	r1, [r7, #0]
	txMessage.frame.idType = dEXTENDED_CAN_MSG_ID_2_0B;
 8006822:	4b0e      	ldr	r3, [pc, #56]	; (800685c <write_CAN_PGN_request+0x44>)
 8006824:	2202      	movs	r2, #2
 8006826:	701a      	strb	r2, [r3, #0]
	txMessage.frame.id = ID;
 8006828:	4a0c      	ldr	r2, [pc, #48]	; (800685c <write_CAN_PGN_request+0x44>)
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	6053      	str	r3, [r2, #4]
	txMessage.frame.dlc = 3;
 800682e:	4b0b      	ldr	r3, [pc, #44]	; (800685c <write_CAN_PGN_request+0x44>)
 8006830:	2203      	movs	r2, #3
 8006832:	721a      	strb	r2, [r3, #8]
	txMessage.frame.data0 = data[0];
 8006834:	683b      	ldr	r3, [r7, #0]
 8006836:	781a      	ldrb	r2, [r3, #0]
 8006838:	4b08      	ldr	r3, [pc, #32]	; (800685c <write_CAN_PGN_request+0x44>)
 800683a:	725a      	strb	r2, [r3, #9]
	txMessage.frame.data1 = data[1];
 800683c:	683b      	ldr	r3, [r7, #0]
 800683e:	785a      	ldrb	r2, [r3, #1]
 8006840:	4b06      	ldr	r3, [pc, #24]	; (800685c <write_CAN_PGN_request+0x44>)
 8006842:	729a      	strb	r2, [r3, #10]
	txMessage.frame.data2 = data[2];
 8006844:	683b      	ldr	r3, [r7, #0]
 8006846:	789a      	ldrb	r2, [r3, #2]
 8006848:	4b04      	ldr	r3, [pc, #16]	; (800685c <write_CAN_PGN_request+0x44>)
 800684a:	72da      	strb	r2, [r3, #11]
	CANSPI_Transmit(&txMessage);
 800684c:	4803      	ldr	r0, [pc, #12]	; (800685c <write_CAN_PGN_request+0x44>)
 800684e:	f7ff fcf9 	bl	8006244 <CANSPI_Transmit>
}
 8006852:	bf00      	nop
 8006854:	3708      	adds	r7, #8
 8006856:	46bd      	mov	sp, r7
 8006858:	bd80      	pop	{r7, pc}
 800685a:	bf00      	nop
 800685c:	20000a4c 	.word	0x20000a4c

08006860 <DM14_Memory_access_request>:

// Send a memory request for access EEPROM
static void DM14_Memory_access_request(uint32_t ID, uint16_t length, uint8_t command, uint32_t pointer, uint16_t key){
 8006860:	b580      	push	{r7, lr}
 8006862:	b086      	sub	sp, #24
 8006864:	af00      	add	r7, sp, #0
 8006866:	60f8      	str	r0, [r7, #12]
 8006868:	607b      	str	r3, [r7, #4]
 800686a:	460b      	mov	r3, r1
 800686c:	817b      	strh	r3, [r7, #10]
 800686e:	4613      	mov	r3, r2
 8006870:	727b      	strb	r3, [r7, #9]
	uint8_t data[8];
	data[0] = length; // Length LSB
 8006872:	897b      	ldrh	r3, [r7, #10]
 8006874:	b2db      	uxtb	r3, r3
 8006876:	743b      	strb	r3, [r7, #16]
	data[1] = (length >> 3) | (0 << 4) | (command << 1) | 1; // Length MSB, Pointer Type(Diagnostic message = 0), Command, 1 (Always)
 8006878:	897b      	ldrh	r3, [r7, #10]
 800687a:	08db      	lsrs	r3, r3, #3
 800687c:	b29b      	uxth	r3, r3
 800687e:	b25a      	sxtb	r2, r3
 8006880:	7a7b      	ldrb	r3, [r7, #9]
 8006882:	005b      	lsls	r3, r3, #1
 8006884:	b25b      	sxtb	r3, r3
 8006886:	4313      	orrs	r3, r2
 8006888:	b25b      	sxtb	r3, r3
 800688a:	f043 0301 	orr.w	r3, r3, #1
 800688e:	b25b      	sxtb	r3, r3
 8006890:	b2db      	uxtb	r3, r3
 8006892:	747b      	strb	r3, [r7, #17]
	data[2] = pointer; // Pointer LSB
 8006894:	687b      	ldr	r3, [r7, #4]
 8006896:	b2db      	uxtb	r3, r3
 8006898:	74bb      	strb	r3, [r7, #18]
	data[3] = pointer >> 8;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	0a1b      	lsrs	r3, r3, #8
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	74fb      	strb	r3, [r7, #19]
	data[4] = pointer >> 16; // Pointer MSB
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	0c1b      	lsrs	r3, r3, #16
 80068a6:	b2db      	uxtb	r3, r3
 80068a8:	753b      	strb	r3, [r7, #20]
	data[5] = 0x1; // Pointer extension 1 for access EEPROM
 80068aa:	2301      	movs	r3, #1
 80068ac:	757b      	strb	r3, [r7, #21]
	data[6] = key; // Key LSB
 80068ae:	8c3b      	ldrh	r3, [r7, #32]
 80068b0:	b2db      	uxtb	r3, r3
 80068b2:	75bb      	strb	r3, [r7, #22]
	data[7] = key >> 8; // Key MSB
 80068b4:	8c3b      	ldrh	r3, [r7, #32]
 80068b6:	0a1b      	lsrs	r3, r3, #8
 80068b8:	b29b      	uxth	r3, r3
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	75fb      	strb	r3, [r7, #23]
	write_CAN_message(ID, data);
 80068be:	f107 0310 	add.w	r3, r7, #16
 80068c2:	4619      	mov	r1, r3
 80068c4:	68f8      	ldr	r0, [r7, #12]
 80068c6:	f7ff fe61 	bl	800658c <write_CAN_message>
}
 80068ca:	bf00      	nop
 80068cc:	3718      	adds	r7, #24
 80068ce:	46bd      	mov	sp, r7
 80068d0:	bd80      	pop	{r7, pc}
	...

080068d4 <write_1939_request_for_claim_address>:


// Write a claim address to ACU
void write_1939_request_for_claim_address(J1939* j1939){
 80068d4:	b580      	push	{r7, lr}
 80068d6:	b084      	sub	sp, #16
 80068d8:	af00      	add	r7, sp, #0
 80068da:	6078      	str	r0, [r7, #4]
	connect_can_bus(j1939);
 80068dc:	6878      	ldr	r0, [r7, #4]
 80068de:	f7ff ff61 	bl	80067a4 <connect_can_bus>
	uint8_t data[3] = {0x0, 0xEE, 0x00};
 80068e2:	2300      	movs	r3, #0
 80068e4:	723b      	strb	r3, [r7, #8]
 80068e6:	23ee      	movs	r3, #238	; 0xee
 80068e8:	727b      	strb	r3, [r7, #9]
 80068ea:	2300      	movs	r3, #0
 80068ec:	72bb      	strb	r3, [r7, #10]
	uint32_t ID = 0x18EAFFFE; // FE = 254 = Peer to Peer, FF = Boradcast
 80068ee:	4b07      	ldr	r3, [pc, #28]	; (800690c <write_1939_request_for_claim_address+0x38>)
 80068f0:	60fb      	str	r3, [r7, #12]
	write_CAN_PGN_request(ID, data);
 80068f2:	f107 0308 	add.w	r3, r7, #8
 80068f6:	4619      	mov	r1, r3
 80068f8:	68f8      	ldr	r0, [r7, #12]
 80068fa:	f7ff ff8d 	bl	8006818 <write_CAN_PGN_request>
	HAL_Delay(100);
 80068fe:	2064      	movs	r0, #100	; 0x64
 8006900:	f002 f9a6 	bl	8008c50 <HAL_Delay>
}
 8006904:	bf00      	nop
 8006906:	3710      	adds	r7, #16
 8006908:	46bd      	mov	sp, r7
 800690a:	bd80      	pop	{r7, pc}
 800690c:	18eafffe 	.word	0x18eafffe

08006910 <write_1939_configuration_request>:

// Request configuration parameters
void write_1939_configuration_request(J1939* j1939, uint8_t command){
 8006910:	b580      	push	{r7, lr}
 8006912:	b08a      	sub	sp, #40	; 0x28
 8006914:	af02      	add	r7, sp, #8
 8006916:	6078      	str	r0, [r7, #4]
 8006918:	460b      	mov	r3, r1
 800691a:	70fb      	strb	r3, [r7, #3]
	uint32_t ID = (0x18D9 << 16) | (j1939->SA_ACU << 8) | j1939->SA_ECU;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	781b      	ldrb	r3, [r3, #0]
 8006920:	021b      	lsls	r3, r3, #8
 8006922:	f043 53c6 	orr.w	r3, r3, #415236096	; 0x18c00000
 8006926:	f443 13c8 	orr.w	r3, r3, #1638400	; 0x190000
 800692a:	687a      	ldr	r2, [r7, #4]
 800692c:	7852      	ldrb	r2, [r2, #1]
 800692e:	4313      	orrs	r3, r2
 8006930:	61bb      	str	r3, [r7, #24]
	HAL_Delay(1000);
 8006932:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8006936:	f002 f98b 	bl	8008c50 <HAL_Delay>
	 *
	 * Length:
	 * 1 = Sensor_Stall_Neutral_Enable
	 * 1 = Sensor_Stall_Normal_Enable
	 */
	const uint8_t length_eeprom_values[2] = {1, 1}; // Between 1 and 7 only!
 800693a:	4b84      	ldr	r3, [pc, #528]	; (8006b4c <write_1939_configuration_request+0x23c>)
 800693c:	881b      	ldrh	r3, [r3, #0]
 800693e:	82bb      	strh	r3, [r7, #20]
	const uint32_t pointers_eeprom_address[2] = {646, 647}; // Same indexing for j1939->EEPROM_values
 8006940:	4a83      	ldr	r2, [pc, #524]	; (8006b50 <write_1939_configuration_request+0x240>)
 8006942:	f107 030c 	add.w	r3, r7, #12
 8006946:	e892 0003 	ldmia.w	r2, {r0, r1}
 800694a:	e883 0003 	stmia.w	r3, {r0, r1}

	// DM14(Ask) -> DM15(Status) -> DM16(Read/Write) -> DM14(Close)
	for(uint8_t i = 0; i < 2; i++){
 800694e:	2300      	movs	r3, #0
 8006950:	77fb      	strb	r3, [r7, #31]
 8006952:	e0ec      	b.n	8006b2e <write_1939_configuration_request+0x21e>
		// Send a DM14 request
		if(command == DM14_Read)
 8006954:	78fb      	ldrb	r3, [r7, #3]
 8006956:	2b01      	cmp	r3, #1
 8006958:	d116      	bne.n	8006988 <write_1939_configuration_request+0x78>
			DM14_Memory_access_request(ID, length_eeprom_values[i], DM14_Read, pointers_eeprom_address[i], 0xFFFF); // 0xFFFF = No key
 800695a:	7ffb      	ldrb	r3, [r7, #31]
 800695c:	f107 0220 	add.w	r2, r7, #32
 8006960:	4413      	add	r3, r2
 8006962:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8006966:	b299      	uxth	r1, r3
 8006968:	7ffb      	ldrb	r3, [r7, #31]
 800696a:	009b      	lsls	r3, r3, #2
 800696c:	f107 0220 	add.w	r2, r7, #32
 8006970:	4413      	add	r3, r2
 8006972:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8006976:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800697a:	9300      	str	r3, [sp, #0]
 800697c:	4613      	mov	r3, r2
 800697e:	2201      	movs	r2, #1
 8006980:	69b8      	ldr	r0, [r7, #24]
 8006982:	f7ff ff6d 	bl	8006860 <DM14_Memory_access_request>
 8006986:	e018      	b.n	80069ba <write_1939_configuration_request+0xaa>
		else if (command == DM14_Write)
 8006988:	78fb      	ldrb	r3, [r7, #3]
 800698a:	2b02      	cmp	r3, #2
 800698c:	d115      	bne.n	80069ba <write_1939_configuration_request+0xaa>
			DM14_Memory_access_request(ID, length_eeprom_values[i], DM14_Write, pointers_eeprom_address[i], 0x2505); // 0x2505 = Write key
 800698e:	7ffb      	ldrb	r3, [r7, #31]
 8006990:	f107 0220 	add.w	r2, r7, #32
 8006994:	4413      	add	r3, r2
 8006996:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 800699a:	b299      	uxth	r1, r3
 800699c:	7ffb      	ldrb	r3, [r7, #31]
 800699e:	009b      	lsls	r3, r3, #2
 80069a0:	f107 0220 	add.w	r2, r7, #32
 80069a4:	4413      	add	r3, r2
 80069a6:	f853 2c14 	ldr.w	r2, [r3, #-20]
 80069aa:	f242 5305 	movw	r3, #9477	; 0x2505
 80069ae:	9300      	str	r3, [sp, #0]
 80069b0:	4613      	mov	r3, r2
 80069b2:	2202      	movs	r2, #2
 80069b4:	69b8      	ldr	r0, [r7, #24]
 80069b6:	f7ff ff53 	bl	8006860 <DM14_Memory_access_request>

		// Read until we got a DM15 message response - We expecting DM15_Proceed
		j1939->DM15_Status = DM15_Reserved;
 80069ba:	687b      	ldr	r3, [r7, #4]
 80069bc:	2207      	movs	r2, #7
 80069be:	759a      	strb	r2, [r3, #22]
		while(j1939->DM15_Status == DM15_Reserved){
 80069c0:	e00c      	b.n	80069dc <write_1939_configuration_request+0xcc>
			read_1939_message(j1939); // Will update j1939->DM15_Status
 80069c2:	6878      	ldr	r0, [r7, #4]
 80069c4:	f000 f958 	bl	8006c78 <read_1939_message>
			if(j1939->DM1_Messages_Binary[1]){
 80069c8:	687b      	ldr	r3, [r7, #4]
 80069ca:	7adb      	ldrb	r3, [r3, #11]
 80069cc:	2b00      	cmp	r3, #0
 80069ce:	f040 80b3 	bne.w	8006b38 <write_1939_configuration_request+0x228>
				// Inconsistent CAN Control message
				return;
			}else if(j1939->DM1_Messages_Binary[2]){
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	7b1b      	ldrb	r3, [r3, #12]
 80069d6:	2b00      	cmp	r3, #0
 80069d8:	f040 80b0 	bne.w	8006b3c <write_1939_configuration_request+0x22c>
		while(j1939->DM15_Status == DM15_Reserved){
 80069dc:	687b      	ldr	r3, [r7, #4]
 80069de:	7d9b      	ldrb	r3, [r3, #22]
 80069e0:	2b07      	cmp	r3, #7
 80069e2:	d0ee      	beq.n	80069c2 <write_1939_configuration_request+0xb2>
				return;
			}
		}

		// What does it say
		if(j1939->DM15_Status == DM15_Proceed){
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	7d9b      	ldrb	r3, [r3, #22]
 80069e8:	2b00      	cmp	r3, #0
 80069ea:	f040 8099 	bne.w	8006b20 <write_1939_configuration_request+0x210>
			if(command == DM14_Read){
 80069ee:	78fb      	ldrb	r3, [r7, #3]
 80069f0:	2b01      	cmp	r3, #1
 80069f2:	d149      	bne.n	8006a88 <write_1939_configuration_request+0x178>
				// Read the EEPROM values of ECU and give them to the EEPROM_values array
				memset(j1939->DM16_data, 0, 8); // j1939->DM16_data[0] will become between 1 and 7 only!
 80069f4:	687b      	ldr	r3, [r7, #4]
 80069f6:	3317      	adds	r3, #23
 80069f8:	2208      	movs	r2, #8
 80069fa:	2100      	movs	r1, #0
 80069fc:	4618      	mov	r0, r3
 80069fe:	f008 ff86 	bl	800f90e <memset>
				while(j1939->DM16_data[0] == 0){
 8006a02:	e007      	b.n	8006a14 <write_1939_configuration_request+0x104>
					read_1939_message(j1939); // As long DM16_data[0], then we have not receive our DM16 data yet
 8006a04:	6878      	ldr	r0, [r7, #4]
 8006a06:	f000 f937 	bl	8006c78 <read_1939_message>
					if(j1939->DM1_Messages_Binary[3]){
 8006a0a:	687b      	ldr	r3, [r7, #4]
 8006a0c:	7b5b      	ldrb	r3, [r3, #13]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	f040 8096 	bne.w	8006b40 <write_1939_configuration_request+0x230>
				while(j1939->DM16_data[0] == 0){
 8006a14:	687b      	ldr	r3, [r7, #4]
 8006a16:	7ddb      	ldrb	r3, [r3, #23]
 8006a18:	2b00      	cmp	r3, #0
 8006a1a:	d0f3      	beq.n	8006a04 <write_1939_configuration_request+0xf4>
						// EEPROM parameter write/read error
						return;
					}
				}
				j1939->EEPROM_values[i] = 0;
 8006a1c:	7ffa      	ldrb	r2, [r7, #31]
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	3210      	adds	r2, #16
 8006a22:	2100      	movs	r1, #0
 8006a24:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				for(uint8_t j = 1; j <= j1939->DM16_data[0]; j++){
 8006a28:	2301      	movs	r3, #1
 8006a2a:	77bb      	strb	r3, [r7, #30]
 8006a2c:	e01b      	b.n	8006a66 <write_1939_configuration_request+0x156>
					j1939->EEPROM_values[i] |= j1939->DM16_data[j] << 8*(j-1); // EEPROM_values are uint16_t
 8006a2e:	7ffa      	ldrb	r2, [r7, #31]
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	3210      	adds	r2, #16
 8006a34:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006a38:	b21a      	sxth	r2, r3
 8006a3a:	7fbb      	ldrb	r3, [r7, #30]
 8006a3c:	6879      	ldr	r1, [r7, #4]
 8006a3e:	440b      	add	r3, r1
 8006a40:	7ddb      	ldrb	r3, [r3, #23]
 8006a42:	4619      	mov	r1, r3
 8006a44:	7fbb      	ldrb	r3, [r7, #30]
 8006a46:	3b01      	subs	r3, #1
 8006a48:	00db      	lsls	r3, r3, #3
 8006a4a:	fa01 f303 	lsl.w	r3, r1, r3
 8006a4e:	b21b      	sxth	r3, r3
 8006a50:	4313      	orrs	r3, r2
 8006a52:	b21b      	sxth	r3, r3
 8006a54:	7ffa      	ldrb	r2, [r7, #31]
 8006a56:	b299      	uxth	r1, r3
 8006a58:	687b      	ldr	r3, [r7, #4]
 8006a5a:	3210      	adds	r2, #16
 8006a5c:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
				for(uint8_t j = 1; j <= j1939->DM16_data[0]; j++){
 8006a60:	7fbb      	ldrb	r3, [r7, #30]
 8006a62:	3301      	adds	r3, #1
 8006a64:	77bb      	strb	r3, [r7, #30]
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	7ddb      	ldrb	r3, [r3, #23]
 8006a6a:	7fba      	ldrb	r2, [r7, #30]
 8006a6c:	429a      	cmp	r2, r3
 8006a6e:	d9de      	bls.n	8006a2e <write_1939_configuration_request+0x11e>
				}

				// Read until we got a DM15 message response - We expecting DM15_Operation_Completed
				j1939->DM15_Status = DM15_Reserved;
 8006a70:	687b      	ldr	r3, [r7, #4]
 8006a72:	2207      	movs	r2, #7
 8006a74:	759a      	strb	r2, [r3, #22]
				while(j1939->DM15_Status == DM15_Reserved){
 8006a76:	e002      	b.n	8006a7e <write_1939_configuration_request+0x16e>
					read_1939_message(j1939); // Will update j1939->DM15_Status
 8006a78:	6878      	ldr	r0, [r7, #4]
 8006a7a:	f000 f8fd 	bl	8006c78 <read_1939_message>
				while(j1939->DM15_Status == DM15_Reserved){
 8006a7e:	687b      	ldr	r3, [r7, #4]
 8006a80:	7d9b      	ldrb	r3, [r3, #22]
 8006a82:	2b07      	cmp	r3, #7
 8006a84:	d0f8      	beq.n	8006a78 <write_1939_configuration_request+0x168>
 8006a86:	e04b      	b.n	8006b20 <write_1939_configuration_request+0x210>
				}
			}else if (command == DM14_Write){
 8006a88:	78fb      	ldrb	r3, [r7, #3]
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d148      	bne.n	8006b20 <write_1939_configuration_request+0x210>
				// Write the EEPROM_values to data and send it to the ECU EEPROM
				memset(j1939->DM16_data, 0, 8);
 8006a8e:	687b      	ldr	r3, [r7, #4]
 8006a90:	3317      	adds	r3, #23
 8006a92:	2208      	movs	r2, #8
 8006a94:	2100      	movs	r1, #0
 8006a96:	4618      	mov	r0, r3
 8006a98:	f008 ff39 	bl	800f90e <memset>
				j1939->DM16_data[0] = length_eeprom_values[i]; // Between 1 and 7 only!
 8006a9c:	7ffb      	ldrb	r3, [r7, #31]
 8006a9e:	f107 0220 	add.w	r2, r7, #32
 8006aa2:	4413      	add	r3, r2
 8006aa4:	f813 2c0c 	ldrb.w	r2, [r3, #-12]
 8006aa8:	687b      	ldr	r3, [r7, #4]
 8006aaa:	75da      	strb	r2, [r3, #23]
				for(uint8_t j = 1; j <= j1939->DM16_data[0]; j++){
 8006aac:	2301      	movs	r3, #1
 8006aae:	777b      	strb	r3, [r7, #29]
 8006ab0:	e012      	b.n	8006ad8 <write_1939_configuration_request+0x1c8>
					j1939->DM16_data[j] = j1939->EEPROM_values[i] >> 8*(j-1); // EEPROM_values are uint16_t
 8006ab2:	7ffa      	ldrb	r2, [r7, #31]
 8006ab4:	687b      	ldr	r3, [r7, #4]
 8006ab6:	3210      	adds	r2, #16
 8006ab8:	f833 3012 	ldrh.w	r3, [r3, r2, lsl #1]
 8006abc:	461a      	mov	r2, r3
 8006abe:	7f7b      	ldrb	r3, [r7, #29]
 8006ac0:	3b01      	subs	r3, #1
 8006ac2:	00db      	lsls	r3, r3, #3
 8006ac4:	411a      	asrs	r2, r3
 8006ac6:	7f7b      	ldrb	r3, [r7, #29]
 8006ac8:	b2d1      	uxtb	r1, r2
 8006aca:	687a      	ldr	r2, [r7, #4]
 8006acc:	4413      	add	r3, r2
 8006ace:	460a      	mov	r2, r1
 8006ad0:	75da      	strb	r2, [r3, #23]
				for(uint8_t j = 1; j <= j1939->DM16_data[0]; j++){
 8006ad2:	7f7b      	ldrb	r3, [r7, #29]
 8006ad4:	3301      	adds	r3, #1
 8006ad6:	777b      	strb	r3, [r7, #29]
 8006ad8:	687b      	ldr	r3, [r7, #4]
 8006ada:	7ddb      	ldrb	r3, [r3, #23]
 8006adc:	7f7a      	ldrb	r2, [r7, #29]
 8006ade:	429a      	cmp	r2, r3
 8006ae0:	d9e7      	bls.n	8006ab2 <write_1939_configuration_request+0x1a2>
				}
				write_CAN_message(ID, j1939->DM16_data);
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	3317      	adds	r3, #23
 8006ae6:	4619      	mov	r1, r3
 8006ae8:	69b8      	ldr	r0, [r7, #24]
 8006aea:	f7ff fd4f 	bl	800658c <write_CAN_message>
				// Close the read operation of DM14
				DM14_Memory_access_request(ID, length_eeprom_values[i], DM14_Operation_Completed, pointers_eeprom_address[i], 0xFFFF);
 8006aee:	7ffb      	ldrb	r3, [r7, #31]
 8006af0:	f107 0220 	add.w	r2, r7, #32
 8006af4:	4413      	add	r3, r2
 8006af6:	f813 3c0c 	ldrb.w	r3, [r3, #-12]
 8006afa:	b299      	uxth	r1, r3
 8006afc:	7ffb      	ldrb	r3, [r7, #31]
 8006afe:	009b      	lsls	r3, r3, #2
 8006b00:	f107 0220 	add.w	r2, r7, #32
 8006b04:	4413      	add	r3, r2
 8006b06:	f853 2c14 	ldr.w	r2, [r3, #-20]
 8006b0a:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8006b0e:	9300      	str	r3, [sp, #0]
 8006b10:	4613      	mov	r3, r2
 8006b12:	2204      	movs	r2, #4
 8006b14:	69b8      	ldr	r0, [r7, #24]
 8006b16:	f7ff fea3 	bl	8006860 <DM14_Memory_access_request>
				j1939->DM15_Status = DM15_Operation_Completed;
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	2204      	movs	r2, #4
 8006b1e:	759a      	strb	r2, [r3, #22]
			}
		}


		// Break the for-loop and return
		if(j1939->DM15_Status == DM15_Busy){
 8006b20:	687b      	ldr	r3, [r7, #4]
 8006b22:	7d9b      	ldrb	r3, [r3, #22]
 8006b24:	2b01      	cmp	r3, #1
 8006b26:	d00d      	beq.n	8006b44 <write_1939_configuration_request+0x234>
	for(uint8_t i = 0; i < 2; i++){
 8006b28:	7ffb      	ldrb	r3, [r7, #31]
 8006b2a:	3301      	adds	r3, #1
 8006b2c:	77fb      	strb	r3, [r7, #31]
 8006b2e:	7ffb      	ldrb	r3, [r7, #31]
 8006b30:	2b01      	cmp	r3, #1
 8006b32:	f67f af0f 	bls.w	8006954 <write_1939_configuration_request+0x44>
 8006b36:	e006      	b.n	8006b46 <write_1939_configuration_request+0x236>
				return;
 8006b38:	bf00      	nop
 8006b3a:	e004      	b.n	8006b46 <write_1939_configuration_request+0x236>
				return;
 8006b3c:	bf00      	nop
 8006b3e:	e002      	b.n	8006b46 <write_1939_configuration_request+0x236>
						return;
 8006b40:	bf00      	nop
 8006b42:	e000      	b.n	8006b46 <write_1939_configuration_request+0x236>
			break; // One single Busy status, then we cannot do anything yet
 8006b44:	bf00      	nop
		}
	}
}
 8006b46:	3720      	adds	r7, #32
 8006b48:	46bd      	mov	sp, r7
 8006b4a:	bd80      	pop	{r7, pc}
 8006b4c:	08011a80 	.word	0x08011a80
 8006b50:	08011a84 	.word	0x08011a84

08006b54 <write_1939_CA_names_and_source_address>:

// Write the new CA and SA
void write_1939_CA_names_and_source_address(J1939* j1939){
 8006b54:	b580      	push	{r7, lr}
 8006b56:	b086      	sub	sp, #24
 8006b58:	af00      	add	r7, sp, #0
 8006b5a:	6078      	str	r0, [r7, #4]
	// Begin first to send BAM
	send_j1939_TP_CM_BAM(j1939, 0x9, 0x2, 0x00FED8); // 0x00FED8 = Commanded Address PGN
 8006b5c:	f64f 63d8 	movw	r3, #65240	; 0xfed8
 8006b60:	2202      	movs	r2, #2
 8006b62:	2109      	movs	r1, #9
 8006b64:	6878      	ldr	r0, [r7, #4]
 8006b66:	f7ff fd8f 	bl	8006688 <send_j1939_TP_CM_BAM>

	// Send packages
	uint8_t data[9];
	memcpy(data, j1939->CA, 8); // Fill all CA to data
 8006b6a:	687b      	ldr	r3, [r7, #4]
 8006b6c:	1c99      	adds	r1, r3, #2
 8006b6e:	f107 030c 	add.w	r3, r7, #12
 8006b72:	2208      	movs	r2, #8
 8006b74:	4618      	mov	r0, r3
 8006b76:	f008 febf 	bl	800f8f8 <memcpy>
	data[8] = j1939->SA_ACU; // New address
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	781b      	ldrb	r3, [r3, #0]
 8006b7e:	753b      	strb	r3, [r7, #20]
	send_j1939_TP_DT(j1939, data, 0x9, 0x2);
 8006b80:	f107 010c 	add.w	r1, r7, #12
 8006b84:	2302      	movs	r3, #2
 8006b86:	2209      	movs	r2, #9
 8006b88:	6878      	ldr	r0, [r7, #4]
 8006b8a:	f7ff fdb9 	bl	8006700 <send_j1939_TP_DT>
}
 8006b8e:	bf00      	nop
 8006b90:	3718      	adds	r7, #24
 8006b92:	46bd      	mov	sp, r7
 8006b94:	bd80      	pop	{r7, pc}
	...

08006b98 <write_1939_auxiliary_valve_command>:

// Write flow between -250 and 250. CA NAME need to have 0x81 (129d) Function code
void write_1939_auxiliary_valve_command(uint8_t DA, J1939* j1939, float flow){
 8006b98:	b580      	push	{r7, lr}
 8006b9a:	b088      	sub	sp, #32
 8006b9c:	af00      	add	r7, sp, #0
 8006b9e:	4603      	mov	r3, r0
 8006ba0:	60b9      	str	r1, [r7, #8]
 8006ba2:	ed87 0a01 	vstr	s0, [r7, #4]
 8006ba6:	73fb      	strb	r3, [r7, #15]
	uint8_t state;
	if (flow > 0 && flow <= 250) {
 8006ba8:	edd7 7a01 	vldr	s15, [r7, #4]
 8006bac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006bb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bb4:	dd0b      	ble.n	8006bce <write_1939_auxiliary_valve_command+0x36>
 8006bb6:	edd7 7a01 	vldr	s15, [r7, #4]
 8006bba:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8006c6c <write_1939_auxiliary_valve_command+0xd4>
 8006bbe:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bc6:	d802      	bhi.n	8006bce <write_1939_auxiliary_valve_command+0x36>
		state = 0x1; // Extend
 8006bc8:	2301      	movs	r3, #1
 8006bca:	77fb      	strb	r3, [r7, #31]
 8006bcc:	e020      	b.n	8006c10 <write_1939_auxiliary_valve_command+0x78>
	} else if (flow < 0 && flow >= -250) {
 8006bce:	edd7 7a01 	vldr	s15, [r7, #4]
 8006bd2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8006bd6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bda:	d50b      	bpl.n	8006bf4 <write_1939_auxiliary_valve_command+0x5c>
 8006bdc:	edd7 7a01 	vldr	s15, [r7, #4]
 8006be0:	ed9f 7a23 	vldr	s14, [pc, #140]	; 8006c70 <write_1939_auxiliary_valve_command+0xd8>
 8006be4:	eef4 7ac7 	vcmpe.f32	s15, s14
 8006be8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006bec:	db02      	blt.n	8006bf4 <write_1939_auxiliary_valve_command+0x5c>
		state = 0x2; // Retract
 8006bee:	2302      	movs	r3, #2
 8006bf0:	77fb      	strb	r3, [r7, #31]
 8006bf2:	e00d      	b.n	8006c10 <write_1939_auxiliary_valve_command+0x78>
	}else if (flow == 255){
 8006bf4:	edd7 7a01 	vldr	s15, [r7, #4]
 8006bf8:	ed9f 7a1e 	vldr	s14, [pc, #120]	; 8006c74 <write_1939_auxiliary_valve_command+0xdc>
 8006bfc:	eef4 7a47 	vcmp.f32	s15, s14
 8006c00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8006c04:	d102      	bne.n	8006c0c <write_1939_auxiliary_valve_command+0x74>
		state = 0xE; // Safety mode
 8006c06:	230e      	movs	r3, #14
 8006c08:	77fb      	strb	r3, [r7, #31]
 8006c0a:	e001      	b.n	8006c10 <write_1939_auxiliary_valve_command+0x78>
	} else {
		state = 0x0; // Neutral
 8006c0c:	2300      	movs	r3, #0
 8006c0e:	77fb      	strb	r3, [r7, #31]
	}


	uint32_t ID = (0x0CFE << 16) | (DA << 8) | j1939->SA_ECU;
 8006c10:	7bfb      	ldrb	r3, [r7, #15]
 8006c12:	021b      	lsls	r3, r3, #8
 8006c14:	f043 634f 	orr.w	r3, r3, #217055232	; 0xcf00000
 8006c18:	f443 2360 	orr.w	r3, r3, #917504	; 0xe0000
 8006c1c:	68ba      	ldr	r2, [r7, #8]
 8006c1e:	7852      	ldrb	r2, [r2, #1]
 8006c20:	4313      	orrs	r3, r2
 8006c22:	61bb      	str	r3, [r7, #24]
	uint8_t data[8] = {fabsf(flow), 0xFF, state, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
 8006c24:	edd7 7a01 	vldr	s15, [r7, #4]
 8006c28:	eef0 7ae7 	vabs.f32	s15, s15
 8006c2c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8006c30:	edc7 7a00 	vstr	s15, [r7]
 8006c34:	683b      	ldr	r3, [r7, #0]
 8006c36:	b2db      	uxtb	r3, r3
 8006c38:	743b      	strb	r3, [r7, #16]
 8006c3a:	23ff      	movs	r3, #255	; 0xff
 8006c3c:	747b      	strb	r3, [r7, #17]
 8006c3e:	7ffb      	ldrb	r3, [r7, #31]
 8006c40:	74bb      	strb	r3, [r7, #18]
 8006c42:	23ff      	movs	r3, #255	; 0xff
 8006c44:	74fb      	strb	r3, [r7, #19]
 8006c46:	23ff      	movs	r3, #255	; 0xff
 8006c48:	753b      	strb	r3, [r7, #20]
 8006c4a:	23ff      	movs	r3, #255	; 0xff
 8006c4c:	757b      	strb	r3, [r7, #21]
 8006c4e:	23ff      	movs	r3, #255	; 0xff
 8006c50:	75bb      	strb	r3, [r7, #22]
 8006c52:	23ff      	movs	r3, #255	; 0xff
 8006c54:	75fb      	strb	r3, [r7, #23]
	write_CAN_message(ID, data);
 8006c56:	f107 0310 	add.w	r3, r7, #16
 8006c5a:	4619      	mov	r1, r3
 8006c5c:	69b8      	ldr	r0, [r7, #24]
 8006c5e:	f7ff fc95 	bl	800658c <write_CAN_message>
}
 8006c62:	bf00      	nop
 8006c64:	3720      	adds	r7, #32
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}
 8006c6a:	bf00      	nop
 8006c6c:	437a0000 	.word	0x437a0000
 8006c70:	c37a0000 	.word	0xc37a0000
 8006c74:	437f0000 	.word	0x437f0000

08006c78 <read_1939_message>:

// Read the 1939 message
void read_1939_message(J1939* j1939) {
 8006c78:	b580      	push	{r7, lr}
 8006c7a:	b088      	sub	sp, #32
 8006c7c:	af00      	add	r7, sp, #0
 8006c7e:	6078      	str	r0, [r7, #4]
	// Check if we have connected the CAN
	connect_can_bus(j1939);
 8006c80:	6878      	ldr	r0, [r7, #4]
 8006c82:	f7ff fd8f 	bl	80067a4 <connect_can_bus>

	uint32_t ID;
	uint8_t data[8];
	if (read_CAN_message(&ID, data) && CAN_connected) {
 8006c86:	f107 0208 	add.w	r2, r7, #8
 8006c8a:	f107 0310 	add.w	r3, r7, #16
 8006c8e:	4611      	mov	r1, r2
 8006c90:	4618      	mov	r0, r3
 8006c92:	f7ff fcb3 	bl	80065fc <read_CAN_message>
 8006c96:	4603      	mov	r3, r0
 8006c98:	2b00      	cmp	r3, #0
 8006c9a:	f000 81a2 	beq.w	8006fe2 <read_1939_message+0x36a>
 8006c9e:	4ba5      	ldr	r3, [pc, #660]	; (8006f34 <read_1939_message+0x2bc>)
 8006ca0:	781b      	ldrb	r3, [r3, #0]
 8006ca2:	2b00      	cmp	r3, #0
 8006ca4:	f000 819d 	beq.w	8006fe2 <read_1939_message+0x36a>
		uint8_t id0 = ID >> 24;
 8006ca8:	693b      	ldr	r3, [r7, #16]
 8006caa:	0e1b      	lsrs	r3, r3, #24
 8006cac:	77fb      	strb	r3, [r7, #31]
		uint8_t id1 = ID >> 16;
 8006cae:	693b      	ldr	r3, [r7, #16]
 8006cb0:	0c1b      	lsrs	r3, r3, #16
 8006cb2:	77bb      	strb	r3, [r7, #30]
		uint8_t id2 = ID >> 8;
 8006cb4:	693b      	ldr	r3, [r7, #16]
 8006cb6:	0a1b      	lsrs	r3, r3, #8
 8006cb8:	777b      	strb	r3, [r7, #29]
		uint8_t id3 = ID;
 8006cba:	693b      	ldr	r3, [r7, #16]
 8006cbc:	773b      	strb	r3, [r7, #28]
		// Check what message we got
		if (id0 == 0x18 && id1 == 0xEE && id2 == 0xFF && id3 != 0xFE) {
 8006cbe:	7ffb      	ldrb	r3, [r7, #31]
 8006cc0:	2b18      	cmp	r3, #24
 8006cc2:	d114      	bne.n	8006cee <read_1939_message+0x76>
 8006cc4:	7fbb      	ldrb	r3, [r7, #30]
 8006cc6:	2bee      	cmp	r3, #238	; 0xee
 8006cc8:	d111      	bne.n	8006cee <read_1939_message+0x76>
 8006cca:	7f7b      	ldrb	r3, [r7, #29]
 8006ccc:	2bff      	cmp	r3, #255	; 0xff
 8006cce:	d10e      	bne.n	8006cee <read_1939_message+0x76>
 8006cd0:	7f3b      	ldrb	r3, [r7, #28]
 8006cd2:	2bfe      	cmp	r3, #254	; 0xfe
 8006cd4:	d00b      	beq.n	8006cee <read_1939_message+0x76>
			// Address claimed
			j1939->SA_ACU = id3;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	7f3a      	ldrb	r2, [r7, #28]
 8006cda:	701a      	strb	r2, [r3, #0]
			memcpy(j1939->CA, data, 8);
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	3302      	adds	r3, #2
 8006ce0:	461a      	mov	r2, r3
 8006ce2:	f107 0308 	add.w	r3, r7, #8
 8006ce6:	cb03      	ldmia	r3!, {r0, r1}
 8006ce8:	6010      	str	r0, [r2, #0]
 8006cea:	6051      	str	r1, [r2, #4]
 8006cec:	e179      	b.n	8006fe2 <read_1939_message+0x36a>
		} else if (id0 == 0x18 && id1 == 0xEE && id2 == 0xFF && id3 == 0xFE) {
 8006cee:	7ffb      	ldrb	r3, [r7, #31]
 8006cf0:	2b18      	cmp	r3, #24
 8006cf2:	d117      	bne.n	8006d24 <read_1939_message+0xac>
 8006cf4:	7fbb      	ldrb	r3, [r7, #30]
 8006cf6:	2bee      	cmp	r3, #238	; 0xee
 8006cf8:	d114      	bne.n	8006d24 <read_1939_message+0xac>
 8006cfa:	7f7b      	ldrb	r3, [r7, #29]
 8006cfc:	2bff      	cmp	r3, #255	; 0xff
 8006cfe:	d111      	bne.n	8006d24 <read_1939_message+0xac>
 8006d00:	7f3b      	ldrb	r3, [r7, #28]
 8006d02:	2bfe      	cmp	r3, #254	; 0xfe
 8006d04:	d10e      	bne.n	8006d24 <read_1939_message+0xac>
			// Address not claimed
			j1939->SA_ACU = 0;
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	2200      	movs	r2, #0
 8006d0a:	701a      	strb	r2, [r3, #0]
			j1939->DM1_Messages_Binary[0] = true;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	2201      	movs	r2, #1
 8006d10:	729a      	strb	r2, [r3, #10]
			memcpy(j1939->CA, data, 8);
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	3302      	adds	r3, #2
 8006d16:	461a      	mov	r2, r3
 8006d18:	f107 0308 	add.w	r3, r7, #8
 8006d1c:	cb03      	ldmia	r3!, {r0, r1}
 8006d1e:	6010      	str	r0, [r2, #0]
 8006d20:	6051      	str	r1, [r2, #4]
 8006d22:	e15e      	b.n	8006fe2 <read_1939_message+0x36a>
		} else if (id0 == 0x18 && id1 == 0xFE && id2 == 0xCA && id3 == j1939->SA_ACU) {
 8006d24:	7ffb      	ldrb	r3, [r7, #31]
 8006d26:	2b18      	cmp	r3, #24
 8006d28:	f040 8106 	bne.w	8006f38 <read_1939_message+0x2c0>
 8006d2c:	7fbb      	ldrb	r3, [r7, #30]
 8006d2e:	2bfe      	cmp	r3, #254	; 0xfe
 8006d30:	f040 8102 	bne.w	8006f38 <read_1939_message+0x2c0>
 8006d34:	7f7b      	ldrb	r3, [r7, #29]
 8006d36:	2bca      	cmp	r3, #202	; 0xca
 8006d38:	f040 80fe 	bne.w	8006f38 <read_1939_message+0x2c0>
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	781b      	ldrb	r3, [r3, #0]
 8006d40:	7f3a      	ldrb	r2, [r7, #28]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	f040 80f8 	bne.w	8006f38 <read_1939_message+0x2c0>
			// DM1 message from ACU till ECU
			if (data[0] == 0x00 && data[1] == 0xFF && data[2] == 0x00 && data[3] == 0x00 && data[4] == 0x00 && data[5] == 0x00 && data[6] == 0xFF && data[7] == 0xFF) {
 8006d48:	7a3b      	ldrb	r3, [r7, #8]
 8006d4a:	2b00      	cmp	r3, #0
 8006d4c:	d115      	bne.n	8006d7a <read_1939_message+0x102>
 8006d4e:	7a7b      	ldrb	r3, [r7, #9]
 8006d50:	2bff      	cmp	r3, #255	; 0xff
 8006d52:	d112      	bne.n	8006d7a <read_1939_message+0x102>
 8006d54:	7abb      	ldrb	r3, [r7, #10]
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d10f      	bne.n	8006d7a <read_1939_message+0x102>
 8006d5a:	7afb      	ldrb	r3, [r7, #11]
 8006d5c:	2b00      	cmp	r3, #0
 8006d5e:	d10c      	bne.n	8006d7a <read_1939_message+0x102>
 8006d60:	7b3b      	ldrb	r3, [r7, #12]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d109      	bne.n	8006d7a <read_1939_message+0x102>
 8006d66:	7b7b      	ldrb	r3, [r7, #13]
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d106      	bne.n	8006d7a <read_1939_message+0x102>
 8006d6c:	7bbb      	ldrb	r3, [r7, #14]
 8006d6e:	2bff      	cmp	r3, #255	; 0xff
 8006d70:	d103      	bne.n	8006d7a <read_1939_message+0x102>
 8006d72:	7bfb      	ldrb	r3, [r7, #15]
 8006d74:	2bff      	cmp	r3, #255	; 0xff
 8006d76:	f000 80dc 	beq.w	8006f32 <read_1939_message+0x2ba>
				// No error
			} else {
				// Error - Check only SPN and J1939 FMI:s - The rest are reserved
				uint8_t SPN_byte_3 = data[2];
 8006d7a:	7abb      	ldrb	r3, [r7, #10]
 8006d7c:	76fb      	strb	r3, [r7, #27]
				uint8_t SPN_byte_4 = data[3];
 8006d7e:	7afb      	ldrb	r3, [r7, #11]
 8006d80:	76bb      	strb	r3, [r7, #26]
				uint8_t SPN_byte_5 = data[4] >> 5;
 8006d82:	7b3b      	ldrb	r3, [r7, #12]
 8006d84:	095b      	lsrs	r3, r3, #5
 8006d86:	767b      	strb	r3, [r7, #25]
				uint8_t FMI_byte = data[4] & ~(0b11100000);
 8006d88:	7b3b      	ldrb	r3, [r7, #12]
 8006d8a:	f003 031f 	and.w	r3, r3, #31
 8006d8e:	763b      	strb	r3, [r7, #24]
				if(SPN_byte_3 == 0x3F && SPN_byte_4 == 0xF0 && SPN_byte_5 == 0x7 && FMI_byte == 0x13){
 8006d90:	7efb      	ldrb	r3, [r7, #27]
 8006d92:	2b3f      	cmp	r3, #63	; 0x3f
 8006d94:	d10f      	bne.n	8006db6 <read_1939_message+0x13e>
 8006d96:	7ebb      	ldrb	r3, [r7, #26]
 8006d98:	2bf0      	cmp	r3, #240	; 0xf0
 8006d9a:	d10c      	bne.n	8006db6 <read_1939_message+0x13e>
 8006d9c:	7e7b      	ldrb	r3, [r7, #25]
 8006d9e:	2b07      	cmp	r3, #7
 8006da0:	d109      	bne.n	8006db6 <read_1939_message+0x13e>
 8006da2:	7e3b      	ldrb	r3, [r7, #24]
 8006da4:	2b13      	cmp	r3, #19
 8006da6:	d106      	bne.n	8006db6 <read_1939_message+0x13e>
					// Inconsistent CAN Control message
					j1939->DM1_Messages_Binary[1] = true;
 8006da8:	687b      	ldr	r3, [r7, #4]
 8006daa:	2201      	movs	r2, #1
 8006dac:	72da      	strb	r2, [r3, #11]
					j1939->DM15_Status = DM15_Error_Codes;
 8006dae:	687b      	ldr	r3, [r7, #4]
 8006db0:	2208      	movs	r2, #8
 8006db2:	759a      	strb	r2, [r3, #22]
 8006db4:	e0bd      	b.n	8006f32 <read_1939_message+0x2ba>
				}else if(SPN_byte_3 == 0x3F && SPN_byte_4 == 0xF0 && SPN_byte_5 == 0x7 && FMI_byte == 0x9){
 8006db6:	7efb      	ldrb	r3, [r7, #27]
 8006db8:	2b3f      	cmp	r3, #63	; 0x3f
 8006dba:	d10f      	bne.n	8006ddc <read_1939_message+0x164>
 8006dbc:	7ebb      	ldrb	r3, [r7, #26]
 8006dbe:	2bf0      	cmp	r3, #240	; 0xf0
 8006dc0:	d10c      	bne.n	8006ddc <read_1939_message+0x164>
 8006dc2:	7e7b      	ldrb	r3, [r7, #25]
 8006dc4:	2b07      	cmp	r3, #7
 8006dc6:	d109      	bne.n	8006ddc <read_1939_message+0x164>
 8006dc8:	7e3b      	ldrb	r3, [r7, #24]
 8006dca:	2b09      	cmp	r3, #9
 8006dcc:	d106      	bne.n	8006ddc <read_1939_message+0x164>
					// No CAN Control message received = TIME OUT
					j1939->DM1_Messages_Binary[2] = true;
 8006dce:	687b      	ldr	r3, [r7, #4]
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	731a      	strb	r2, [r3, #12]
					j1939->DM15_Status = DM15_Error_Codes;
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	2208      	movs	r2, #8
 8006dd8:	759a      	strb	r2, [r3, #22]
 8006dda:	e0aa      	b.n	8006f32 <read_1939_message+0x2ba>
				}else if(SPN_byte_3 == 0x74 && SPN_byte_4 == 0x2 && SPN_byte_5 == 0x0 && FMI_byte == 0x2){
 8006ddc:	7efb      	ldrb	r3, [r7, #27]
 8006dde:	2b74      	cmp	r3, #116	; 0x74
 8006de0:	d10f      	bne.n	8006e02 <read_1939_message+0x18a>
 8006de2:	7ebb      	ldrb	r3, [r7, #26]
 8006de4:	2b02      	cmp	r3, #2
 8006de6:	d10c      	bne.n	8006e02 <read_1939_message+0x18a>
 8006de8:	7e7b      	ldrb	r3, [r7, #25]
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d109      	bne.n	8006e02 <read_1939_message+0x18a>
 8006dee:	7e3b      	ldrb	r3, [r7, #24]
 8006df0:	2b02      	cmp	r3, #2
 8006df2:	d106      	bne.n	8006e02 <read_1939_message+0x18a>
					// EEPROM parameter write/read error
					j1939->DM1_Messages_Binary[3] = true;
 8006df4:	687b      	ldr	r3, [r7, #4]
 8006df6:	2201      	movs	r2, #1
 8006df8:	735a      	strb	r2, [r3, #13]
					j1939->DM15_Status = DM15_Error_Codes;
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	2208      	movs	r2, #8
 8006dfe:	759a      	strb	r2, [r3, #22]
 8006e00:	e097      	b.n	8006f32 <read_1939_message+0x2ba>
				}else if(SPN_byte_3 == 0x40 && SPN_byte_4 == 0xF0 && SPN_byte_5 == 0x7 && FMI_byte == 0x0){
 8006e02:	7efb      	ldrb	r3, [r7, #27]
 8006e04:	2b40      	cmp	r3, #64	; 0x40
 8006e06:	d10f      	bne.n	8006e28 <read_1939_message+0x1b0>
 8006e08:	7ebb      	ldrb	r3, [r7, #26]
 8006e0a:	2bf0      	cmp	r3, #240	; 0xf0
 8006e0c:	d10c      	bne.n	8006e28 <read_1939_message+0x1b0>
 8006e0e:	7e7b      	ldrb	r3, [r7, #25]
 8006e10:	2b07      	cmp	r3, #7
 8006e12:	d109      	bne.n	8006e28 <read_1939_message+0x1b0>
 8006e14:	7e3b      	ldrb	r3, [r7, #24]
 8006e16:	2b00      	cmp	r3, #0
 8006e18:	d106      	bne.n	8006e28 <read_1939_message+0x1b0>
					// Stepper motor stall detected
					j1939->DM1_Messages_Binary[4] = true;
 8006e1a:	687b      	ldr	r3, [r7, #4]
 8006e1c:	2201      	movs	r2, #1
 8006e1e:	739a      	strb	r2, [r3, #14]
					j1939->DM15_Status = DM15_Error_Codes;
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	2208      	movs	r2, #8
 8006e24:	759a      	strb	r2, [r3, #22]
 8006e26:	e084      	b.n	8006f32 <read_1939_message+0x2ba>
				}else if(SPN_byte_3 == 0x9E && SPN_byte_4 == 0x0 && SPN_byte_5 == 0x0 && FMI_byte == 0x12){
 8006e28:	7efb      	ldrb	r3, [r7, #27]
 8006e2a:	2b9e      	cmp	r3, #158	; 0x9e
 8006e2c:	d10f      	bne.n	8006e4e <read_1939_message+0x1d6>
 8006e2e:	7ebb      	ldrb	r3, [r7, #26]
 8006e30:	2b00      	cmp	r3, #0
 8006e32:	d10c      	bne.n	8006e4e <read_1939_message+0x1d6>
 8006e34:	7e7b      	ldrb	r3, [r7, #25]
 8006e36:	2b00      	cmp	r3, #0
 8006e38:	d109      	bne.n	8006e4e <read_1939_message+0x1d6>
 8006e3a:	7e3b      	ldrb	r3, [r7, #24]
 8006e3c:	2b12      	cmp	r3, #18
 8006e3e:	d106      	bne.n	8006e4e <read_1939_message+0x1d6>
					// Undervoltage SONCEBOZ value (VDC<U_MINOFF)
					j1939->DM1_Messages_Binary[5] = true;
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	2201      	movs	r2, #1
 8006e44:	73da      	strb	r2, [r3, #15]
					j1939->DM15_Status = DM15_Error_Codes;
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	2208      	movs	r2, #8
 8006e4a:	759a      	strb	r2, [r3, #22]
 8006e4c:	e071      	b.n	8006f32 <read_1939_message+0x2ba>
				}else if(SPN_byte_3 == 0x9E && SPN_byte_4 == 0x0 && SPN_byte_5 == 0x0 && FMI_byte == 0x10){
 8006e4e:	7efb      	ldrb	r3, [r7, #27]
 8006e50:	2b9e      	cmp	r3, #158	; 0x9e
 8006e52:	d10f      	bne.n	8006e74 <read_1939_message+0x1fc>
 8006e54:	7ebb      	ldrb	r3, [r7, #26]
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d10c      	bne.n	8006e74 <read_1939_message+0x1fc>
 8006e5a:	7e7b      	ldrb	r3, [r7, #25]
 8006e5c:	2b00      	cmp	r3, #0
 8006e5e:	d109      	bne.n	8006e74 <read_1939_message+0x1fc>
 8006e60:	7e3b      	ldrb	r3, [r7, #24]
 8006e62:	2b10      	cmp	r3, #16
 8006e64:	d106      	bne.n	8006e74 <read_1939_message+0x1fc>
					// Overvoltage SONCEBOZ value (VDC>U_MAXOFF)
					j1939->DM1_Messages_Binary[6] = true;
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	2201      	movs	r2, #1
 8006e6a:	741a      	strb	r2, [r3, #16]
					j1939->DM15_Status = DM15_Error_Codes;
 8006e6c:	687b      	ldr	r3, [r7, #4]
 8006e6e:	2208      	movs	r2, #8
 8006e70:	759a      	strb	r2, [r3, #22]
 8006e72:	e05e      	b.n	8006f32 <read_1939_message+0x2ba>
				}else if(SPN_byte_3 == 0x42 && SPN_byte_4 == 0xF0 && SPN_byte_5 == 0x7 && FMI_byte == 0x0){
 8006e74:	7efb      	ldrb	r3, [r7, #27]
 8006e76:	2b42      	cmp	r3, #66	; 0x42
 8006e78:	d10f      	bne.n	8006e9a <read_1939_message+0x222>
 8006e7a:	7ebb      	ldrb	r3, [r7, #26]
 8006e7c:	2bf0      	cmp	r3, #240	; 0xf0
 8006e7e:	d10c      	bne.n	8006e9a <read_1939_message+0x222>
 8006e80:	7e7b      	ldrb	r3, [r7, #25]
 8006e82:	2b07      	cmp	r3, #7
 8006e84:	d109      	bne.n	8006e9a <read_1939_message+0x222>
 8006e86:	7e3b      	ldrb	r3, [r7, #24]
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d106      	bne.n	8006e9a <read_1939_message+0x222>
					// SCU temperature higher than T_MAXOFF
					j1939->DM1_Messages_Binary[7] = true;
 8006e8c:	687b      	ldr	r3, [r7, #4]
 8006e8e:	2201      	movs	r2, #1
 8006e90:	745a      	strb	r2, [r3, #17]
					j1939->DM15_Status = DM15_Error_Codes;
 8006e92:	687b      	ldr	r3, [r7, #4]
 8006e94:	2208      	movs	r2, #8
 8006e96:	759a      	strb	r2, [r3, #22]
 8006e98:	e04b      	b.n	8006f32 <read_1939_message+0x2ba>
				}else if(SPN_byte_3 == 0x42 && SPN_byte_4 == 0xF0 && SPN_byte_5 == 0x7 && FMI_byte == 0x1){
 8006e9a:	7efb      	ldrb	r3, [r7, #27]
 8006e9c:	2b42      	cmp	r3, #66	; 0x42
 8006e9e:	d10f      	bne.n	8006ec0 <read_1939_message+0x248>
 8006ea0:	7ebb      	ldrb	r3, [r7, #26]
 8006ea2:	2bf0      	cmp	r3, #240	; 0xf0
 8006ea4:	d10c      	bne.n	8006ec0 <read_1939_message+0x248>
 8006ea6:	7e7b      	ldrb	r3, [r7, #25]
 8006ea8:	2b07      	cmp	r3, #7
 8006eaa:	d109      	bne.n	8006ec0 <read_1939_message+0x248>
 8006eac:	7e3b      	ldrb	r3, [r7, #24]
 8006eae:	2b01      	cmp	r3, #1
 8006eb0:	d106      	bne.n	8006ec0 <read_1939_message+0x248>
					// SCU temperature below T_MINOFF
					j1939->DM1_Messages_Binary[8] = true;
 8006eb2:	687b      	ldr	r3, [r7, #4]
 8006eb4:	2201      	movs	r2, #1
 8006eb6:	749a      	strb	r2, [r3, #18]
					j1939->DM15_Status = DM15_Error_Codes;
 8006eb8:	687b      	ldr	r3, [r7, #4]
 8006eba:	2208      	movs	r2, #8
 8006ebc:	759a      	strb	r2, [r3, #22]
 8006ebe:	e038      	b.n	8006f32 <read_1939_message+0x2ba>
				}else if(SPN_byte_3 == 0x44 && SPN_byte_4 == 0xF0 && SPN_byte_5 == 0x7 && FMI_byte == 0x0){
 8006ec0:	7efb      	ldrb	r3, [r7, #27]
 8006ec2:	2b44      	cmp	r3, #68	; 0x44
 8006ec4:	d10f      	bne.n	8006ee6 <read_1939_message+0x26e>
 8006ec6:	7ebb      	ldrb	r3, [r7, #26]
 8006ec8:	2bf0      	cmp	r3, #240	; 0xf0
 8006eca:	d10c      	bne.n	8006ee6 <read_1939_message+0x26e>
 8006ecc:	7e7b      	ldrb	r3, [r7, #25]
 8006ece:	2b07      	cmp	r3, #7
 8006ed0:	d109      	bne.n	8006ee6 <read_1939_message+0x26e>
 8006ed2:	7e3b      	ldrb	r3, [r7, #24]
 8006ed4:	2b00      	cmp	r3, #0
 8006ed6:	d106      	bne.n	8006ee6 <read_1939_message+0x26e>
					// Current exceeds upper limit I_MAX
					j1939->DM1_Messages_Binary[9] = true;
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	2201      	movs	r2, #1
 8006edc:	74da      	strb	r2, [r3, #19]
					j1939->DM15_Status = DM15_Error_Codes;
 8006ede:	687b      	ldr	r3, [r7, #4]
 8006ee0:	2208      	movs	r2, #8
 8006ee2:	759a      	strb	r2, [r3, #22]
 8006ee4:	e025      	b.n	8006f32 <read_1939_message+0x2ba>
				}else if(SPN_byte_3 == 0x43 && SPN_byte_4 == 0xF0 && SPN_byte_5 == 0x7 && FMI_byte == 0x2){
 8006ee6:	7efb      	ldrb	r3, [r7, #27]
 8006ee8:	2b43      	cmp	r3, #67	; 0x43
 8006eea:	d10f      	bne.n	8006f0c <read_1939_message+0x294>
 8006eec:	7ebb      	ldrb	r3, [r7, #26]
 8006eee:	2bf0      	cmp	r3, #240	; 0xf0
 8006ef0:	d10c      	bne.n	8006f0c <read_1939_message+0x294>
 8006ef2:	7e7b      	ldrb	r3, [r7, #25]
 8006ef4:	2b07      	cmp	r3, #7
 8006ef6:	d109      	bne.n	8006f0c <read_1939_message+0x294>
 8006ef8:	7e3b      	ldrb	r3, [r7, #24]
 8006efa:	2b02      	cmp	r3, #2
 8006efc:	d106      	bne.n	8006f0c <read_1939_message+0x294>
					// Error position in IDLE Mode
					j1939->DM1_Messages_Binary[10] = true;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	2201      	movs	r2, #1
 8006f02:	751a      	strb	r2, [r3, #20]
					j1939->DM15_Status = DM15_Error_Codes;
 8006f04:	687b      	ldr	r3, [r7, #4]
 8006f06:	2208      	movs	r2, #8
 8006f08:	759a      	strb	r2, [r3, #22]
 8006f0a:	e012      	b.n	8006f32 <read_1939_message+0x2ba>
				}else if(SPN_byte_3 == 0x76 && SPN_byte_4 == 0x2 && SPN_byte_5 == 0x0 && FMI_byte == 0x2){
 8006f0c:	7efb      	ldrb	r3, [r7, #27]
 8006f0e:	2b76      	cmp	r3, #118	; 0x76
 8006f10:	d164      	bne.n	8006fdc <read_1939_message+0x364>
 8006f12:	7ebb      	ldrb	r3, [r7, #26]
 8006f14:	2b02      	cmp	r3, #2
 8006f16:	d161      	bne.n	8006fdc <read_1939_message+0x364>
 8006f18:	7e7b      	ldrb	r3, [r7, #25]
 8006f1a:	2b00      	cmp	r3, #0
 8006f1c:	d15e      	bne.n	8006fdc <read_1939_message+0x364>
 8006f1e:	7e3b      	ldrb	r3, [r7, #24]
 8006f20:	2b02      	cmp	r3, #2
 8006f22:	d15b      	bne.n	8006fdc <read_1939_message+0x364>
					// Range error for Linearization parameter in EEPROM
					j1939->DM1_Messages_Binary[11] = true;
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	2201      	movs	r2, #1
 8006f28:	755a      	strb	r2, [r3, #21]
					j1939->DM15_Status = DM15_Error_Codes;
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	2208      	movs	r2, #8
 8006f2e:	759a      	strb	r2, [r3, #22]
			if (data[0] == 0x00 && data[1] == 0xFF && data[2] == 0x00 && data[3] == 0x00 && data[4] == 0x00 && data[5] == 0x00 && data[6] == 0xFF && data[7] == 0xFF) {
 8006f30:	e054      	b.n	8006fdc <read_1939_message+0x364>
 8006f32:	e053      	b.n	8006fdc <read_1939_message+0x364>
 8006f34:	20000a48 	.word	0x20000a48
				}
			}
		} else if (id0 == 0x18 && id1 == 0xD8 && id2 == j1939->SA_ECU && id3 == j1939->SA_ACU) {
 8006f38:	7ffb      	ldrb	r3, [r7, #31]
 8006f3a:	2b18      	cmp	r3, #24
 8006f3c:	d12e      	bne.n	8006f9c <read_1939_message+0x324>
 8006f3e:	7fbb      	ldrb	r3, [r7, #30]
 8006f40:	2bd8      	cmp	r3, #216	; 0xd8
 8006f42:	d12b      	bne.n	8006f9c <read_1939_message+0x324>
 8006f44:	687b      	ldr	r3, [r7, #4]
 8006f46:	785b      	ldrb	r3, [r3, #1]
 8006f48:	7f7a      	ldrb	r2, [r7, #29]
 8006f4a:	429a      	cmp	r2, r3
 8006f4c:	d126      	bne.n	8006f9c <read_1939_message+0x324>
 8006f4e:	687b      	ldr	r3, [r7, #4]
 8006f50:	781b      	ldrb	r3, [r3, #0]
 8006f52:	7f3a      	ldrb	r2, [r7, #28]
 8006f54:	429a      	cmp	r2, r3
 8006f56:	d121      	bne.n	8006f9c <read_1939_message+0x324>
			// DM15 message - When we send DM14 message we will get DM15 message from ACU to ECU
			uint8_t status = (data[1] >> 1) & ~(0b11110000);
 8006f58:	7a7b      	ldrb	r3, [r7, #9]
 8006f5a:	085b      	lsrs	r3, r3, #1
 8006f5c:	b2db      	uxtb	r3, r3
 8006f5e:	f003 030f 	and.w	r3, r3, #15
 8006f62:	75fb      	strb	r3, [r7, #23]
			if(status == DM15_Proceed){
 8006f64:	7dfb      	ldrb	r3, [r7, #23]
 8006f66:	2b00      	cmp	r3, #0
 8006f68:	d103      	bne.n	8006f72 <read_1939_message+0x2fa>
				j1939->DM15_Status = DM15_Proceed;
 8006f6a:	687b      	ldr	r3, [r7, #4]
 8006f6c:	2200      	movs	r2, #0
 8006f6e:	759a      	strb	r2, [r3, #22]
		} else if (id0 == 0x18 && id1 == 0xD8 && id2 == j1939->SA_ECU && id3 == j1939->SA_ACU) {
 8006f70:	e036      	b.n	8006fe0 <read_1939_message+0x368>
			}else if(status == DM15_Busy){
 8006f72:	7dfb      	ldrb	r3, [r7, #23]
 8006f74:	2b01      	cmp	r3, #1
 8006f76:	d103      	bne.n	8006f80 <read_1939_message+0x308>
				j1939->DM15_Status = DM15_Busy;
 8006f78:	687b      	ldr	r3, [r7, #4]
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	759a      	strb	r2, [r3, #22]
		} else if (id0 == 0x18 && id1 == 0xD8 && id2 == j1939->SA_ECU && id3 == j1939->SA_ACU) {
 8006f7e:	e02f      	b.n	8006fe0 <read_1939_message+0x368>
			}else if(status == DM15_Operation_Completed){
 8006f80:	7dfb      	ldrb	r3, [r7, #23]
 8006f82:	2b04      	cmp	r3, #4
 8006f84:	d103      	bne.n	8006f8e <read_1939_message+0x316>
				j1939->DM15_Status = DM15_Operation_Completed;
 8006f86:	687b      	ldr	r3, [r7, #4]
 8006f88:	2204      	movs	r2, #4
 8006f8a:	759a      	strb	r2, [r3, #22]
		} else if (id0 == 0x18 && id1 == 0xD8 && id2 == j1939->SA_ECU && id3 == j1939->SA_ACU) {
 8006f8c:	e028      	b.n	8006fe0 <read_1939_message+0x368>
			}else if(status == DM15_Operation_Failed){
 8006f8e:	7dfb      	ldrb	r3, [r7, #23]
 8006f90:	2b05      	cmp	r3, #5
 8006f92:	d125      	bne.n	8006fe0 <read_1939_message+0x368>
				j1939->DM15_Status = DM15_Operation_Failed;
 8006f94:	687b      	ldr	r3, [r7, #4]
 8006f96:	2205      	movs	r2, #5
 8006f98:	759a      	strb	r2, [r3, #22]
		} else if (id0 == 0x18 && id1 == 0xD8 && id2 == j1939->SA_ECU && id3 == j1939->SA_ACU) {
 8006f9a:	e021      	b.n	8006fe0 <read_1939_message+0x368>
			}
		} else if (id0 == 0x18 && id1 == 0xD7 && id2 == j1939->SA_ECU && id3 == j1939->SA_ACU) {
 8006f9c:	7ffb      	ldrb	r3, [r7, #31]
 8006f9e:	2b18      	cmp	r3, #24
 8006fa0:	d11f      	bne.n	8006fe2 <read_1939_message+0x36a>
 8006fa2:	7fbb      	ldrb	r3, [r7, #30]
 8006fa4:	2bd7      	cmp	r3, #215	; 0xd7
 8006fa6:	d11c      	bne.n	8006fe2 <read_1939_message+0x36a>
 8006fa8:	687b      	ldr	r3, [r7, #4]
 8006faa:	785b      	ldrb	r3, [r3, #1]
 8006fac:	7f7a      	ldrb	r2, [r7, #29]
 8006fae:	429a      	cmp	r2, r3
 8006fb0:	d117      	bne.n	8006fe2 <read_1939_message+0x36a>
 8006fb2:	687b      	ldr	r3, [r7, #4]
 8006fb4:	781b      	ldrb	r3, [r3, #0]
 8006fb6:	7f3a      	ldrb	r2, [r7, #28]
 8006fb8:	429a      	cmp	r2, r3
 8006fba:	d112      	bne.n	8006fe2 <read_1939_message+0x36a>
			// DM16 message from ACU to ECU
			memset(j1939->DM16_data, 0, 8);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	3317      	adds	r3, #23
 8006fc0:	2208      	movs	r2, #8
 8006fc2:	2100      	movs	r1, #0
 8006fc4:	4618      	mov	r0, r3
 8006fc6:	f008 fca2 	bl	800f90e <memset>
			memcpy(j1939->DM16_data, data, 8); // Byte1(Number of occurrences 1-7) to Byte2 -> Byte8 - Raw binary data
 8006fca:	687b      	ldr	r3, [r7, #4]
 8006fcc:	3317      	adds	r3, #23
 8006fce:	461a      	mov	r2, r3
 8006fd0:	f107 0308 	add.w	r3, r7, #8
 8006fd4:	cb03      	ldmia	r3!, {r0, r1}
 8006fd6:	6010      	str	r0, [r2, #0]
 8006fd8:	6051      	str	r1, [r2, #4]
		}
	}
}
 8006fda:	e002      	b.n	8006fe2 <read_1939_message+0x36a>
			if (data[0] == 0x00 && data[1] == 0xFF && data[2] == 0x00 && data[3] == 0x00 && data[4] == 0x00 && data[5] == 0x00 && data[6] == 0xFF && data[7] == 0xFF) {
 8006fdc:	bf00      	nop
 8006fde:	e000      	b.n	8006fe2 <read_1939_message+0x36a>
		} else if (id0 == 0x18 && id1 == 0xD8 && id2 == j1939->SA_ECU && id3 == j1939->SA_ACU) {
 8006fe0:	bf00      	nop
}
 8006fe2:	bf00      	nop
 8006fe4:	3720      	adds	r7, #32
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	bd80      	pop	{r7, pc}
 8006fea:	bf00      	nop

08006fec <MCP2515_Initialize>:
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* MCP2515 초기화 */
bool MCP2515_Initialize(void)
{
 8006fec:	b580      	push	{r7, lr}
 8006fee:	b082      	sub	sp, #8
 8006ff0:	af00      	add	r7, sp, #0
  MCP2515_CS_HIGH();
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	2140      	movs	r1, #64	; 0x40
 8006ff6:	480c      	ldr	r0, [pc, #48]	; (8007028 <MCP2515_Initialize+0x3c>)
 8006ff8:	f003 fa18 	bl	800a42c <HAL_GPIO_WritePin>

  uint8_t loop = 10;
 8006ffc:	230a      	movs	r3, #10
 8006ffe:	71fb      	strb	r3, [r7, #7]

  do {
    /* SPI Ready 확인 */
    if(HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8007000:	480a      	ldr	r0, [pc, #40]	; (800702c <MCP2515_Initialize+0x40>)
 8007002:	f004 fb04 	bl	800b60e <HAL_SPI_GetState>
 8007006:	4603      	mov	r3, r0
 8007008:	2b01      	cmp	r3, #1
 800700a:	d101      	bne.n	8007010 <MCP2515_Initialize+0x24>
      return true;
 800700c:	2301      	movs	r3, #1
 800700e:	e006      	b.n	800701e <MCP2515_Initialize+0x32>

    loop--;
 8007010:	79fb      	ldrb	r3, [r7, #7]
 8007012:	3b01      	subs	r3, #1
 8007014:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8007016:	79fb      	ldrb	r3, [r7, #7]
 8007018:	2b00      	cmp	r3, #0
 800701a:	d1f1      	bne.n	8007000 <MCP2515_Initialize+0x14>

  return false;
 800701c:	2300      	movs	r3, #0
}
 800701e:	4618      	mov	r0, r3
 8007020:	3708      	adds	r7, #8
 8007022:	46bd      	mov	sp, r7
 8007024:	bd80      	pop	{r7, pc}
 8007026:	bf00      	nop
 8007028:	40020400 	.word	0x40020400
 800702c:	200055e4 	.word	0x200055e4

08007030 <MCP2515_SetConfigMode>:

/* MCP2515 를 설정모드로 전환 */
bool MCP2515_SetConfigMode(void)
{
 8007030:	b580      	push	{r7, lr}
 8007032:	b082      	sub	sp, #8
 8007034:	af00      	add	r7, sp, #0
  /* CANCTRL Register Configuration 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8007036:	2180      	movs	r1, #128	; 0x80
 8007038:	200f      	movs	r0, #15
 800703a:	f000 f879 	bl	8007130 <MCP2515_WriteByte>

  uint8_t loop = 10;
 800703e:	230a      	movs	r3, #10
 8007040:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 8007042:	200e      	movs	r0, #14
 8007044:	f000 f830 	bl	80070a8 <MCP2515_ReadByte>
 8007048:	4603      	mov	r3, r0
 800704a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800704e:	2b80      	cmp	r3, #128	; 0x80
 8007050:	d101      	bne.n	8007056 <MCP2515_SetConfigMode+0x26>
      return true;
 8007052:	2301      	movs	r3, #1
 8007054:	e006      	b.n	8007064 <MCP2515_SetConfigMode+0x34>

    loop--;
 8007056:	79fb      	ldrb	r3, [r7, #7]
 8007058:	3b01      	subs	r3, #1
 800705a:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 800705c:	79fb      	ldrb	r3, [r7, #7]
 800705e:	2b00      	cmp	r3, #0
 8007060:	d1ef      	bne.n	8007042 <MCP2515_SetConfigMode+0x12>

  return false;
 8007062:	2300      	movs	r3, #0
}
 8007064:	4618      	mov	r0, r3
 8007066:	3708      	adds	r7, #8
 8007068:	46bd      	mov	sp, r7
 800706a:	bd80      	pop	{r7, pc}

0800706c <MCP2515_SetNormalMode>:

/* MCP2515 를 Normal모드로 전환 */
bool MCP2515_SetNormalMode(void)
{
 800706c:	b580      	push	{r7, lr}
 800706e:	b082      	sub	sp, #8
 8007070:	af00      	add	r7, sp, #0
  /* CANCTRL Register Normal 모드 설정 */
  MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8007072:	2100      	movs	r1, #0
 8007074:	200f      	movs	r0, #15
 8007076:	f000 f85b 	bl	8007130 <MCP2515_WriteByte>

  uint8_t loop = 10;
 800707a:	230a      	movs	r3, #10
 800707c:	71fb      	strb	r3, [r7, #7]

  do {
    /* 모드전환 확인 */
    if((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 800707e:	200e      	movs	r0, #14
 8007080:	f000 f812 	bl	80070a8 <MCP2515_ReadByte>
 8007084:	4603      	mov	r3, r0
 8007086:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800708a:	2b00      	cmp	r3, #0
 800708c:	d101      	bne.n	8007092 <MCP2515_SetNormalMode+0x26>
      return true;
 800708e:	2301      	movs	r3, #1
 8007090:	e006      	b.n	80070a0 <MCP2515_SetNormalMode+0x34>

    loop--;
 8007092:	79fb      	ldrb	r3, [r7, #7]
 8007094:	3b01      	subs	r3, #1
 8007096:	71fb      	strb	r3, [r7, #7]
  } while(loop > 0);
 8007098:	79fb      	ldrb	r3, [r7, #7]
 800709a:	2b00      	cmp	r3, #0
 800709c:	d1ef      	bne.n	800707e <MCP2515_SetNormalMode+0x12>

  return false;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3708      	adds	r7, #8
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <MCP2515_ReadByte>:
  MCP2515_CS_HIGH();
}

/* 1바이트 읽기 */
uint8_t MCP2515_ReadByte (uint8_t address)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b084      	sub	sp, #16
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	4603      	mov	r3, r0
 80070b0:	71fb      	strb	r3, [r7, #7]
  uint8_t retVal;

  MCP2515_CS_LOW();
 80070b2:	2200      	movs	r2, #0
 80070b4:	2140      	movs	r1, #64	; 0x40
 80070b6:	480c      	ldr	r0, [pc, #48]	; (80070e8 <MCP2515_ReadByte+0x40>)
 80070b8:	f003 f9b8 	bl	800a42c <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ);
 80070bc:	2003      	movs	r0, #3
 80070be:	f000 f901 	bl	80072c4 <SPI_Tx>
  SPI_Tx(address);
 80070c2:	79fb      	ldrb	r3, [r7, #7]
 80070c4:	4618      	mov	r0, r3
 80070c6:	f000 f8fd 	bl	80072c4 <SPI_Tx>
  retVal = SPI_Rx();
 80070ca:	f000 f921 	bl	8007310 <SPI_Rx>
 80070ce:	4603      	mov	r3, r0
 80070d0:	73fb      	strb	r3, [r7, #15]

  MCP2515_CS_HIGH();
 80070d2:	2201      	movs	r2, #1
 80070d4:	2140      	movs	r1, #64	; 0x40
 80070d6:	4804      	ldr	r0, [pc, #16]	; (80070e8 <MCP2515_ReadByte+0x40>)
 80070d8:	f003 f9a8 	bl	800a42c <HAL_GPIO_WritePin>

  return retVal;
 80070dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80070de:	4618      	mov	r0, r3
 80070e0:	3710      	adds	r7, #16
 80070e2:	46bd      	mov	sp, r7
 80070e4:	bd80      	pop	{r7, pc}
 80070e6:	bf00      	nop
 80070e8:	40020400 	.word	0x40020400

080070ec <MCP2515_ReadRxSequence>:

/* Sequential Bytes 읽기 */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length)
{
 80070ec:	b580      	push	{r7, lr}
 80070ee:	b082      	sub	sp, #8
 80070f0:	af00      	add	r7, sp, #0
 80070f2:	4603      	mov	r3, r0
 80070f4:	6039      	str	r1, [r7, #0]
 80070f6:	71fb      	strb	r3, [r7, #7]
 80070f8:	4613      	mov	r3, r2
 80070fa:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 80070fc:	2200      	movs	r2, #0
 80070fe:	2140      	movs	r1, #64	; 0x40
 8007100:	480a      	ldr	r0, [pc, #40]	; (800712c <MCP2515_ReadRxSequence+0x40>)
 8007102:	f003 f993 	bl	800a42c <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8007106:	79fb      	ldrb	r3, [r7, #7]
 8007108:	4618      	mov	r0, r3
 800710a:	f000 f8db 	bl	80072c4 <SPI_Tx>
  SPI_RxBuffer(data, length);
 800710e:	79bb      	ldrb	r3, [r7, #6]
 8007110:	4619      	mov	r1, r3
 8007112:	6838      	ldr	r0, [r7, #0]
 8007114:	f000 f90c 	bl	8007330 <SPI_RxBuffer>

  MCP2515_CS_HIGH();
 8007118:	2201      	movs	r2, #1
 800711a:	2140      	movs	r1, #64	; 0x40
 800711c:	4803      	ldr	r0, [pc, #12]	; (800712c <MCP2515_ReadRxSequence+0x40>)
 800711e:	f003 f985 	bl	800a42c <HAL_GPIO_WritePin>
}
 8007122:	bf00      	nop
 8007124:	3708      	adds	r7, #8
 8007126:	46bd      	mov	sp, r7
 8007128:	bd80      	pop	{r7, pc}
 800712a:	bf00      	nop
 800712c:	40020400 	.word	0x40020400

08007130 <MCP2515_WriteByte>:

/* 1바이트 쓰기 */
void MCP2515_WriteByte(uint8_t address, uint8_t data)
{
 8007130:	b580      	push	{r7, lr}
 8007132:	b082      	sub	sp, #8
 8007134:	af00      	add	r7, sp, #0
 8007136:	4603      	mov	r3, r0
 8007138:	460a      	mov	r2, r1
 800713a:	71fb      	strb	r3, [r7, #7]
 800713c:	4613      	mov	r3, r2
 800713e:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8007140:	2200      	movs	r2, #0
 8007142:	2140      	movs	r1, #64	; 0x40
 8007144:	480b      	ldr	r0, [pc, #44]	; (8007174 <MCP2515_WriteByte+0x44>)
 8007146:	f003 f971 	bl	800a42c <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 800714a:	2002      	movs	r0, #2
 800714c:	f000 f8ba 	bl	80072c4 <SPI_Tx>
  SPI_Tx(address);
 8007150:	79fb      	ldrb	r3, [r7, #7]
 8007152:	4618      	mov	r0, r3
 8007154:	f000 f8b6 	bl	80072c4 <SPI_Tx>
  SPI_Tx(data);
 8007158:	79bb      	ldrb	r3, [r7, #6]
 800715a:	4618      	mov	r0, r3
 800715c:	f000 f8b2 	bl	80072c4 <SPI_Tx>

  MCP2515_CS_HIGH();
 8007160:	2201      	movs	r2, #1
 8007162:	2140      	movs	r1, #64	; 0x40
 8007164:	4803      	ldr	r0, [pc, #12]	; (8007174 <MCP2515_WriteByte+0x44>)
 8007166:	f003 f961 	bl	800a42c <HAL_GPIO_WritePin>
}
 800716a:	bf00      	nop
 800716c:	3708      	adds	r7, #8
 800716e:	46bd      	mov	sp, r7
 8007170:	bd80      	pop	{r7, pc}
 8007172:	bf00      	nop
 8007174:	40020400 	.word	0x40020400

08007178 <MCP2515_WriteByteSequence>:

/* Sequential Bytes 쓰기 */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress, uint8_t *data)
{
 8007178:	b580      	push	{r7, lr}
 800717a:	b082      	sub	sp, #8
 800717c:	af00      	add	r7, sp, #0
 800717e:	4603      	mov	r3, r0
 8007180:	603a      	str	r2, [r7, #0]
 8007182:	71fb      	strb	r3, [r7, #7]
 8007184:	460b      	mov	r3, r1
 8007186:	71bb      	strb	r3, [r7, #6]
  MCP2515_CS_LOW();
 8007188:	2200      	movs	r2, #0
 800718a:	2140      	movs	r1, #64	; 0x40
 800718c:	480e      	ldr	r0, [pc, #56]	; (80071c8 <MCP2515_WriteByteSequence+0x50>)
 800718e:	f003 f94d 	bl	800a42c <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_WRITE);
 8007192:	2002      	movs	r0, #2
 8007194:	f000 f896 	bl	80072c4 <SPI_Tx>
  SPI_Tx(startAddress);
 8007198:	79fb      	ldrb	r3, [r7, #7]
 800719a:	4618      	mov	r0, r3
 800719c:	f000 f892 	bl	80072c4 <SPI_Tx>
  SPI_TxBuffer(data, (endAddress - startAddress + 1));
 80071a0:	79ba      	ldrb	r2, [r7, #6]
 80071a2:	79fb      	ldrb	r3, [r7, #7]
 80071a4:	1ad3      	subs	r3, r2, r3
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	3301      	adds	r3, #1
 80071aa:	b2db      	uxtb	r3, r3
 80071ac:	4619      	mov	r1, r3
 80071ae:	6838      	ldr	r0, [r7, #0]
 80071b0:	f000 f89a 	bl	80072e8 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 80071b4:	2201      	movs	r2, #1
 80071b6:	2140      	movs	r1, #64	; 0x40
 80071b8:	4803      	ldr	r0, [pc, #12]	; (80071c8 <MCP2515_WriteByteSequence+0x50>)
 80071ba:	f003 f937 	bl	800a42c <HAL_GPIO_WritePin>
}
 80071be:	bf00      	nop
 80071c0:	3708      	adds	r7, #8
 80071c2:	46bd      	mov	sp, r7
 80071c4:	bd80      	pop	{r7, pc}
 80071c6:	bf00      	nop
 80071c8:	40020400 	.word	0x40020400

080071cc <MCP2515_LoadTxSequence>:

/* TxBuffer에 Sequential Bytes 쓰기 */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc, uint8_t *data)
{
 80071cc:	b580      	push	{r7, lr}
 80071ce:	b084      	sub	sp, #16
 80071d0:	af00      	add	r7, sp, #0
 80071d2:	60b9      	str	r1, [r7, #8]
 80071d4:	607b      	str	r3, [r7, #4]
 80071d6:	4603      	mov	r3, r0
 80071d8:	73fb      	strb	r3, [r7, #15]
 80071da:	4613      	mov	r3, r2
 80071dc:	73bb      	strb	r3, [r7, #14]
  MCP2515_CS_LOW();
 80071de:	2200      	movs	r2, #0
 80071e0:	2140      	movs	r1, #64	; 0x40
 80071e2:	480e      	ldr	r0, [pc, #56]	; (800721c <MCP2515_LoadTxSequence+0x50>)
 80071e4:	f003 f922 	bl	800a42c <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 80071e8:	7bfb      	ldrb	r3, [r7, #15]
 80071ea:	4618      	mov	r0, r3
 80071ec:	f000 f86a 	bl	80072c4 <SPI_Tx>
  SPI_TxBuffer(idReg, 4);
 80071f0:	2104      	movs	r1, #4
 80071f2:	68b8      	ldr	r0, [r7, #8]
 80071f4:	f000 f878 	bl	80072e8 <SPI_TxBuffer>
  SPI_Tx(dlc);
 80071f8:	7bbb      	ldrb	r3, [r7, #14]
 80071fa:	4618      	mov	r0, r3
 80071fc:	f000 f862 	bl	80072c4 <SPI_Tx>
  SPI_TxBuffer(data, dlc);
 8007200:	7bbb      	ldrb	r3, [r7, #14]
 8007202:	4619      	mov	r1, r3
 8007204:	6878      	ldr	r0, [r7, #4]
 8007206:	f000 f86f 	bl	80072e8 <SPI_TxBuffer>

  MCP2515_CS_HIGH();
 800720a:	2201      	movs	r2, #1
 800720c:	2140      	movs	r1, #64	; 0x40
 800720e:	4803      	ldr	r0, [pc, #12]	; (800721c <MCP2515_LoadTxSequence+0x50>)
 8007210:	f003 f90c 	bl	800a42c <HAL_GPIO_WritePin>
}
 8007214:	bf00      	nop
 8007216:	3710      	adds	r7, #16
 8007218:	46bd      	mov	sp, r7
 800721a:	bd80      	pop	{r7, pc}
 800721c:	40020400 	.word	0x40020400

08007220 <MCP2515_RequestToSend>:
  MCP2515_CS_HIGH();
}

/* RTS 명령을 통해서 TxBuffer 전송 */
void MCP2515_RequestToSend(uint8_t instruction)
{
 8007220:	b580      	push	{r7, lr}
 8007222:	b082      	sub	sp, #8
 8007224:	af00      	add	r7, sp, #0
 8007226:	4603      	mov	r3, r0
 8007228:	71fb      	strb	r3, [r7, #7]
  MCP2515_CS_LOW();
 800722a:	2200      	movs	r2, #0
 800722c:	2140      	movs	r1, #64	; 0x40
 800722e:	4808      	ldr	r0, [pc, #32]	; (8007250 <MCP2515_RequestToSend+0x30>)
 8007230:	f003 f8fc 	bl	800a42c <HAL_GPIO_WritePin>

  SPI_Tx(instruction);
 8007234:	79fb      	ldrb	r3, [r7, #7]
 8007236:	4618      	mov	r0, r3
 8007238:	f000 f844 	bl	80072c4 <SPI_Tx>

  MCP2515_CS_HIGH();
 800723c:	2201      	movs	r2, #1
 800723e:	2140      	movs	r1, #64	; 0x40
 8007240:	4803      	ldr	r0, [pc, #12]	; (8007250 <MCP2515_RequestToSend+0x30>)
 8007242:	f003 f8f3 	bl	800a42c <HAL_GPIO_WritePin>
}
 8007246:	bf00      	nop
 8007248:	3708      	adds	r7, #8
 800724a:	46bd      	mov	sp, r7
 800724c:	bd80      	pop	{r7, pc}
 800724e:	bf00      	nop
 8007250:	40020400 	.word	0x40020400

08007254 <MCP2515_ReadStatus>:

/* MCP2515 Status 확인 */
uint8_t MCP2515_ReadStatus(void)
{
 8007254:	b580      	push	{r7, lr}
 8007256:	b082      	sub	sp, #8
 8007258:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 800725a:	2200      	movs	r2, #0
 800725c:	2140      	movs	r1, #64	; 0x40
 800725e:	480a      	ldr	r0, [pc, #40]	; (8007288 <MCP2515_ReadStatus+0x34>)
 8007260:	f003 f8e4 	bl	800a42c <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_READ_STATUS);
 8007264:	20a0      	movs	r0, #160	; 0xa0
 8007266:	f000 f82d 	bl	80072c4 <SPI_Tx>
  retVal = SPI_Rx();
 800726a:	f000 f851 	bl	8007310 <SPI_Rx>
 800726e:	4603      	mov	r3, r0
 8007270:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 8007272:	2201      	movs	r2, #1
 8007274:	2140      	movs	r1, #64	; 0x40
 8007276:	4804      	ldr	r0, [pc, #16]	; (8007288 <MCP2515_ReadStatus+0x34>)
 8007278:	f003 f8d8 	bl	800a42c <HAL_GPIO_WritePin>

  return retVal;
 800727c:	79fb      	ldrb	r3, [r7, #7]
}
 800727e:	4618      	mov	r0, r3
 8007280:	3708      	adds	r7, #8
 8007282:	46bd      	mov	sp, r7
 8007284:	bd80      	pop	{r7, pc}
 8007286:	bf00      	nop
 8007288:	40020400 	.word	0x40020400

0800728c <MCP2515_GetRxStatus>:

/* MCP2515 RxStatus 레지스터 확인 */
uint8_t MCP2515_GetRxStatus(void)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
  uint8_t retVal;

  MCP2515_CS_LOW();
 8007292:	2200      	movs	r2, #0
 8007294:	2140      	movs	r1, #64	; 0x40
 8007296:	480a      	ldr	r0, [pc, #40]	; (80072c0 <MCP2515_GetRxStatus+0x34>)
 8007298:	f003 f8c8 	bl	800a42c <HAL_GPIO_WritePin>

  SPI_Tx(MCP2515_RX_STATUS);
 800729c:	20b0      	movs	r0, #176	; 0xb0
 800729e:	f000 f811 	bl	80072c4 <SPI_Tx>
  retVal = SPI_Rx();
 80072a2:	f000 f835 	bl	8007310 <SPI_Rx>
 80072a6:	4603      	mov	r3, r0
 80072a8:	71fb      	strb	r3, [r7, #7]

  MCP2515_CS_HIGH();
 80072aa:	2201      	movs	r2, #1
 80072ac:	2140      	movs	r1, #64	; 0x40
 80072ae:	4804      	ldr	r0, [pc, #16]	; (80072c0 <MCP2515_GetRxStatus+0x34>)
 80072b0:	f003 f8bc 	bl	800a42c <HAL_GPIO_WritePin>

  return retVal;
 80072b4:	79fb      	ldrb	r3, [r7, #7]
}
 80072b6:	4618      	mov	r0, r3
 80072b8:	3708      	adds	r7, #8
 80072ba:	46bd      	mov	sp, r7
 80072bc:	bd80      	pop	{r7, pc}
 80072be:	bf00      	nop
 80072c0:	40020400 	.word	0x40020400

080072c4 <SPI_Tx>:
  MCP2515_CS_HIGH();
}

/* SPI Tx Wrapper 함수 */
static void SPI_Tx(uint8_t data)
{
 80072c4:	b580      	push	{r7, lr}
 80072c6:	b082      	sub	sp, #8
 80072c8:	af00      	add	r7, sp, #0
 80072ca:	4603      	mov	r3, r0
 80072cc:	71fb      	strb	r3, [r7, #7]
  HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 80072ce:	1df9      	adds	r1, r7, #7
 80072d0:	230a      	movs	r3, #10
 80072d2:	2201      	movs	r2, #1
 80072d4:	4803      	ldr	r0, [pc, #12]	; (80072e4 <SPI_Tx+0x20>)
 80072d6:	f003 fdbb 	bl	800ae50 <HAL_SPI_Transmit>
}
 80072da:	bf00      	nop
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}
 80072e2:	bf00      	nop
 80072e4:	200055e4 	.word	0x200055e4

080072e8 <SPI_TxBuffer>:

/* SPI Tx Wrapper 함수 */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b082      	sub	sp, #8
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
 80072f0:	460b      	mov	r3, r1
 80072f2:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 80072f4:	78fb      	ldrb	r3, [r7, #3]
 80072f6:	b29a      	uxth	r2, r3
 80072f8:	230a      	movs	r3, #10
 80072fa:	6879      	ldr	r1, [r7, #4]
 80072fc:	4803      	ldr	r0, [pc, #12]	; (800730c <SPI_TxBuffer+0x24>)
 80072fe:	f003 fda7 	bl	800ae50 <HAL_SPI_Transmit>
}
 8007302:	bf00      	nop
 8007304:	3708      	adds	r7, #8
 8007306:	46bd      	mov	sp, r7
 8007308:	bd80      	pop	{r7, pc}
 800730a:	bf00      	nop
 800730c:	200055e4 	.word	0x200055e4

08007310 <SPI_Rx>:

/* SPI Rx Wrapper 함수 */
static uint8_t SPI_Rx(void)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b082      	sub	sp, #8
 8007314:	af00      	add	r7, sp, #0
  uint8_t retVal;
  HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8007316:	1df9      	adds	r1, r7, #7
 8007318:	230a      	movs	r3, #10
 800731a:	2201      	movs	r2, #1
 800731c:	4803      	ldr	r0, [pc, #12]	; (800732c <SPI_Rx+0x1c>)
 800731e:	f003 fecb 	bl	800b0b8 <HAL_SPI_Receive>
  return retVal;
 8007322:	79fb      	ldrb	r3, [r7, #7]
}
 8007324:	4618      	mov	r0, r3
 8007326:	3708      	adds	r7, #8
 8007328:	46bd      	mov	sp, r7
 800732a:	bd80      	pop	{r7, pc}
 800732c:	200055e4 	.word	0x200055e4

08007330 <SPI_RxBuffer>:

/* SPI Rx Wrapper 함수 */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length)
{
 8007330:	b580      	push	{r7, lr}
 8007332:	b082      	sub	sp, #8
 8007334:	af00      	add	r7, sp, #0
 8007336:	6078      	str	r0, [r7, #4]
 8007338:	460b      	mov	r3, r1
 800733a:	70fb      	strb	r3, [r7, #3]
  HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 800733c:	78fb      	ldrb	r3, [r7, #3]
 800733e:	b29a      	uxth	r2, r3
 8007340:	230a      	movs	r3, #10
 8007342:	6879      	ldr	r1, [r7, #4]
 8007344:	4803      	ldr	r0, [pc, #12]	; (8007354 <SPI_RxBuffer+0x24>)
 8007346:	f003 feb7 	bl	800b0b8 <HAL_SPI_Receive>
}
 800734a:	bf00      	nop
 800734c:	3708      	adds	r7, #8
 800734e:	46bd      	mov	sp, r7
 8007350:	bd80      	pop	{r7, pc}
 8007352:	bf00      	nop
 8007354:	200055e4 	.word	0x200055e4

08007358 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007358:	b580      	push	{r7, lr}
 800735a:	b08e      	sub	sp, #56	; 0x38
 800735c:	af06      	add	r7, sp, #24
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 800735e:	f001 fc35 	bl	8008bcc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007362:	f000 f8f7 	bl	8007554 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007366:	f000 fb2f 	bl	80079c8 <MX_GPIO_Init>
  MX_DMA_Init();
 800736a:	f000 faf7 	bl	800795c <MX_DMA_Init>
  MX_ADC1_Init();
 800736e:	f000 f95d 	bl	800762c <MX_ADC1_Init>
  MX_SPI1_Init();
 8007372:	f000 f9bd 	bl	80076f0 <MX_SPI1_Init>
  MX_SPI2_Init();
 8007376:	f000 f9f1 	bl	800775c <MX_SPI2_Init>
  MX_TIM2_Init();
 800737a:	f000 fa25 	bl	80077c8 <MX_TIM2_Init>
  MX_TIM5_Init();
 800737e:	f000 fa6f 	bl	8007860 <MX_TIM5_Init>
  MX_USART2_UART_Init();
 8007382:	f000 fac1 	bl	8007908 <MX_USART2_UART_Init>
  /* USER CODE BEGIN 2 */

	// Start encoder
	HAL_TIM_Encoder_Start(&htim5, TIM_CHANNEL_ALL);
 8007386:	213c      	movs	r1, #60	; 0x3c
 8007388:	4859      	ldr	r0, [pc, #356]	; (80074f0 <main+0x198>)
 800738a:	f004 fb64 	bl	800ba56 <HAL_TIM_Encoder_Start>
	Encoder_init(&encoder, &htim5, one_rotation_pulses);
 800738e:	eef3 7a0e 	vmov.f32	s15, #62	; 0x41f00000  30.0
 8007392:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8007396:	ee17 3a90 	vmov	r3, s15
 800739a:	b29b      	uxth	r3, r3
 800739c:	461a      	mov	r2, r3
 800739e:	4954      	ldr	r1, [pc, #336]	; (80074f0 <main+0x198>)
 80073a0:	4854      	ldr	r0, [pc, #336]	; (80074f4 <main+0x19c>)
 80073a2:	f7f9 fefa 	bl	800119a <Encoder_init>

	// Start ADC with DMA
	HAL_TIM_Base_Start(&htim2);
 80073a6:	4854      	ldr	r0, [pc, #336]	; (80074f8 <main+0x1a0>)
 80073a8:	f004 fa7b 	bl	800b8a2 <HAL_TIM_Base_Start>
	HAL_ADC_Start_DMA(&hadc1, (uint32_t*) adcData, 2);
 80073ac:	2202      	movs	r2, #2
 80073ae:	4953      	ldr	r1, [pc, #332]	; (80074fc <main+0x1a4>)
 80073b0:	4853      	ldr	r0, [pc, #332]	; (8007500 <main+0x1a8>)
 80073b2:	f001 fcb3 	bl	8008d1c <HAL_ADC_Start_DMA>

	// Start DMA for UART
	HAL_UART_Receive_DMA(&huart2, UART_RX_DATA, 1);
 80073b6:	2201      	movs	r2, #1
 80073b8:	4952      	ldr	r1, [pc, #328]	; (8007504 <main+0x1ac>)
 80073ba:	4853      	ldr	r0, [pc, #332]	; (8007508 <main+0x1b0>)
 80073bc:	f005 f812 	bl	800c3e4 <HAL_UART_Receive_DMA>

	// Set the address and sector for F401RE CPU where we are going to store the settings. Look at chapter 3.3 at document RM0368 for STM32F401xB/C and STM32F401xD/E processors
	FlashSetSectorAddrs(7, 0x08060000);
 80073c0:	4952      	ldr	r1, [pc, #328]	; (800750c <main+0x1b4>)
 80073c2:	2007      	movs	r0, #7
 80073c4:	f7f9 fff0 	bl	80013a8 <FlashSetSectorAddrs>

	// Init LCD
	ILI9341_Init(&lcd_spi, &hspi2, LCD_CS_GPIO_Port, LCD_CS_Pin, LCD_DC_GPIO_Port, LCD_DC_Pin, LCD_RST_GPIO_Port, LCD_RST_Pin, TS_CS_GPIO_Port, TS_CS_Pin);
 80073c8:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073cc:	9305      	str	r3, [sp, #20]
 80073ce:	4b50      	ldr	r3, [pc, #320]	; (8007510 <main+0x1b8>)
 80073d0:	9304      	str	r3, [sp, #16]
 80073d2:	f44f 7380 	mov.w	r3, #256	; 0x100
 80073d6:	9303      	str	r3, [sp, #12]
 80073d8:	4b4e      	ldr	r3, [pc, #312]	; (8007514 <main+0x1bc>)
 80073da:	9302      	str	r3, [sp, #8]
 80073dc:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073e0:	9301      	str	r3, [sp, #4]
 80073e2:	4b4c      	ldr	r3, [pc, #304]	; (8007514 <main+0x1bc>)
 80073e4:	9300      	str	r3, [sp, #0]
 80073e6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80073ea:	4a49      	ldr	r2, [pc, #292]	; (8007510 <main+0x1b8>)
 80073ec:	494a      	ldr	r1, [pc, #296]	; (8007518 <main+0x1c0>)
 80073ee:	484b      	ldr	r0, [pc, #300]	; (800751c <main+0x1c4>)
 80073f0:	f7fa fe60 	bl	80020b4 <ILI9341_Init>

	// Show welcome screen
	ILI9341_setRotation(&lcd_spi, 2);
 80073f4:	2102      	movs	r1, #2
 80073f6:	4849      	ldr	r0, [pc, #292]	; (800751c <main+0x1c4>)
 80073f8:	f7fa fdfa 	bl	8001ff0 <ILI9341_setRotation>
	ILI9341_printImage(&lcd_spi, 0, 0, 320, 240, windowsME_intro, 640 * 240 * sizeof(uint8_t));
 80073fc:	f44f 3316 	mov.w	r3, #153600	; 0x25800
 8007400:	9302      	str	r3, [sp, #8]
 8007402:	4b47      	ldr	r3, [pc, #284]	; (8007520 <main+0x1c8>)
 8007404:	9301      	str	r3, [sp, #4]
 8007406:	23f0      	movs	r3, #240	; 0xf0
 8007408:	9300      	str	r3, [sp, #0]
 800740a:	f44f 73a0 	mov.w	r3, #320	; 0x140
 800740e:	2200      	movs	r2, #0
 8007410:	2100      	movs	r1, #0
 8007412:	4842      	ldr	r0, [pc, #264]	; (800751c <main+0x1c4>)
 8007414:	f7fa fdb3 	bl	8001f7e <ILI9341_printImage>
	HAL_Delay(5000);
 8007418:	f241 3088 	movw	r0, #5000	; 0x1388
 800741c:	f001 fc18 	bl	8008c50 <HAL_Delay>

	// Load the user configurations
	float rdBuf[7];
	FlashReadN(0, rdBuf, 7, DATA_TYPE_FLOAT);
 8007420:	4639      	mov	r1, r7
 8007422:	2303      	movs	r3, #3
 8007424:	2207      	movs	r2, #7
 8007426:	2000      	movs	r0, #0
 8007428:	f7fa f86e 	bl	8001508 <FlashReadN>
	lcd_spi.myTS_Calibrate.Scale_X = rdBuf[0];
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	4a3b      	ldr	r2, [pc, #236]	; (800751c <main+0x1c4>)
 8007430:	6453      	str	r3, [r2, #68]	; 0x44
	lcd_spi.myTS_Calibrate.Scale_Y = rdBuf[1];
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	4a39      	ldr	r2, [pc, #228]	; (800751c <main+0x1c4>)
 8007436:	6493      	str	r3, [r2, #72]	; 0x48
	lcd_spi.myTS_Calibrate.Bias_X = rdBuf[2];
 8007438:	68bb      	ldr	r3, [r7, #8]
 800743a:	4a38      	ldr	r2, [pc, #224]	; (800751c <main+0x1c4>)
 800743c:	64d3      	str	r3, [r2, #76]	; 0x4c
	lcd_spi.myTS_Calibrate.Bias_Y = rdBuf[3];
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	4a36      	ldr	r2, [pc, #216]	; (800751c <main+0x1c4>)
 8007442:	6513      	str	r3, [r2, #80]	; 0x50
	mrac_gain = isnanf(rdBuf[4]) != 0 ? 0.0001 : rdBuf[4];
 8007444:	edd7 7a04 	vldr	s15, [r7, #16]
 8007448:	eef4 7a67 	vcmp.f32	s15, s15
 800744c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007450:	d601      	bvs.n	8007456 <main+0xfe>
 8007452:	693b      	ldr	r3, [r7, #16]
 8007454:	e000      	b.n	8007458 <main+0x100>
 8007456:	4b33      	ldr	r3, [pc, #204]	; (8007524 <main+0x1cc>)
 8007458:	4a33      	ldr	r2, [pc, #204]	; (8007528 <main+0x1d0>)
 800745a:	6013      	str	r3, [r2, #0]
	mrac_saturation = isnanf(rdBuf[5]) != 0 ? 1 : rdBuf[5];
 800745c:	edd7 7a05 	vldr	s15, [r7, #20]
 8007460:	eef4 7a67 	vcmp.f32	s15, s15
 8007464:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007468:	d601      	bvs.n	800746e <main+0x116>
 800746a:	697b      	ldr	r3, [r7, #20]
 800746c:	e001      	b.n	8007472 <main+0x11a>
 800746e:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 8007472:	4a2e      	ldr	r2, [pc, #184]	; (800752c <main+0x1d4>)
 8007474:	6013      	str	r3, [r2, #0]
	valve_delay = isnanf(rdBuf[6]) != 0 ? 1 : rdBuf[6];
 8007476:	edd7 7a06 	vldr	s15, [r7, #24]
 800747a:	eef4 7a67 	vcmp.f32	s15, s15
 800747e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8007482:	d601      	bvs.n	8007488 <main+0x130>
 8007484:	69bb      	ldr	r3, [r7, #24]
 8007486:	e001      	b.n	800748c <main+0x134>
 8007488:	f04f 537e 	mov.w	r3, #1065353216	; 0x3f800000
 800748c:	4a28      	ldr	r2, [pc, #160]	; (8007530 <main+0x1d8>)
 800748e:	6013      	str	r3, [r2, #0]

	// Calibrate the touch if blue Nucleo board button is pressed
	if (HAL_GPIO_ReadPin(CALIBRATE_GPIO_Port, CALIBRATE_Pin) == GPIO_PIN_RESET) {
 8007490:	f44f 5100 	mov.w	r1, #8192	; 0x2000
 8007494:	481f      	ldr	r0, [pc, #124]	; (8007514 <main+0x1bc>)
 8007496:	f002 ffb1 	bl	800a3fc <HAL_GPIO_ReadPin>
 800749a:	4603      	mov	r3, r0
 800749c:	2b00      	cmp	r3, #0
 800749e:	d102      	bne.n	80074a6 <main+0x14e>
		TSC2046_Calibrate(&lcd_spi);
 80074a0:	481e      	ldr	r0, [pc, #120]	; (800751c <main+0x1c4>)
 80074a2:	f7fb f869 	bl	8002578 <TSC2046_Calibrate>
	}

	// Create initial frame
	bool update_main_frame = true;
 80074a6:	2301      	movs	r3, #1
 80074a8:	77fb      	strb	r3, [r7, #31]
	show_main_frame_mrac(&lcd_spi, closedloop_on, update_main_frame);
 80074aa:	4b22      	ldr	r3, [pc, #136]	; (8007534 <main+0x1dc>)
 80074ac:	781b      	ldrb	r3, [r3, #0]
 80074ae:	7ffa      	ldrb	r2, [r7, #31]
 80074b0:	4619      	mov	r1, r3
 80074b2:	481a      	ldr	r0, [pc, #104]	; (800751c <main+0x1c4>)
 80074b4:	f7fb fa2c 	bl	8002910 <show_main_frame_mrac>

	// This will init CAN
	j1939.SA_ECU = 0x22;
 80074b8:	4b1f      	ldr	r3, [pc, #124]	; (8007538 <main+0x1e0>)
 80074ba:	2222      	movs	r2, #34	; 0x22
 80074bc:	705a      	strb	r2, [r3, #1]
	read_1939_message(&j1939);
 80074be:	481e      	ldr	r0, [pc, #120]	; (8007538 <main+0x1e0>)
 80074c0:	f7ff fbda 	bl	8006c78 <read_1939_message>

  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 80074c4:	f005 fcb0 	bl	800ce28 <osKernelInitialize>
	/* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* creation of LCDTask */
  LCDTaskHandle = osThreadNew(StartLCDTask, NULL, &LCDTask_attributes);
 80074c8:	4a1c      	ldr	r2, [pc, #112]	; (800753c <main+0x1e4>)
 80074ca:	2100      	movs	r1, #0
 80074cc:	481c      	ldr	r0, [pc, #112]	; (8007540 <main+0x1e8>)
 80074ce:	f005 fd15 	bl	800cefc <osThreadNew>
 80074d2:	4602      	mov	r2, r0
 80074d4:	4b1b      	ldr	r3, [pc, #108]	; (8007544 <main+0x1ec>)
 80074d6:	601a      	str	r2, [r3, #0]

  /* creation of ControlTask */
  ControlTaskHandle = osThreadNew(StartControlTask, NULL, &ControlTask_attributes);
 80074d8:	4a1b      	ldr	r2, [pc, #108]	; (8007548 <main+0x1f0>)
 80074da:	2100      	movs	r1, #0
 80074dc:	481b      	ldr	r0, [pc, #108]	; (800754c <main+0x1f4>)
 80074de:	f005 fd0d 	bl	800cefc <osThreadNew>
 80074e2:	4602      	mov	r2, r0
 80074e4:	4b1a      	ldr	r3, [pc, #104]	; (8007550 <main+0x1f8>)
 80074e6:	601a      	str	r2, [r3, #0]
  /* USER CODE BEGIN RTOS_THREADS */
	/* add threads, ... */
  /* USER CODE END RTOS_THREADS */

  /* Start scheduler */
  osKernelStart();
 80074e8:	f005 fcd2 	bl	800ce90 <osKernelStart>
 
  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	while (1) {
 80074ec:	e7fe      	b.n	80074ec <main+0x194>
 80074ee:	bf00      	nop
 80074f0:	200054c8 	.word	0x200054c8
 80074f4:	200054b4 	.word	0x200054b4
 80074f8:	2000563c 	.word	0x2000563c
 80074fc:	200056dc 	.word	0x200056dc
 8007500:	20005508 	.word	0x20005508
 8007504:	20005580 	.word	0x20005580
 8007508:	20005680 	.word	0x20005680
 800750c:	08060000 	.word	0x08060000
 8007510:	40020000 	.word	0x40020000
 8007514:	40020800 	.word	0x40020800
 8007518:	20005400 	.word	0x20005400
 800751c:	20005458 	.word	0x20005458
 8007520:	0802c8d8 	.word	0x0802c8d8
 8007524:	38d1b717 	.word	0x38d1b717
 8007528:	2000557c 	.word	0x2000557c
 800752c:	200056e0 	.word	0x200056e0
 8007530:	2000567c 	.word	0x2000567c
 8007534:	20000000 	.word	0x20000000
 8007538:	20005554 	.word	0x20005554
 800753c:	080520d8 	.word	0x080520d8
 8007540:	08007c41 	.word	0x08007c41
 8007544:	20005578 	.word	0x20005578
 8007548:	080520fc 	.word	0x080520fc
 800754c:	08008251 	.word	0x08008251
 8007550:	200056d4 	.word	0x200056d4

08007554 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007554:	b580      	push	{r7, lr}
 8007556:	b094      	sub	sp, #80	; 0x50
 8007558:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800755a:	f107 0320 	add.w	r3, r7, #32
 800755e:	2230      	movs	r2, #48	; 0x30
 8007560:	2100      	movs	r1, #0
 8007562:	4618      	mov	r0, r3
 8007564:	f008 f9d3 	bl	800f90e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007568:	f107 030c 	add.w	r3, r7, #12
 800756c:	2200      	movs	r2, #0
 800756e:	601a      	str	r2, [r3, #0]
 8007570:	605a      	str	r2, [r3, #4]
 8007572:	609a      	str	r2, [r3, #8]
 8007574:	60da      	str	r2, [r3, #12]
 8007576:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage 
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8007578:	2300      	movs	r3, #0
 800757a:	60bb      	str	r3, [r7, #8]
 800757c:	4b29      	ldr	r3, [pc, #164]	; (8007624 <SystemClock_Config+0xd0>)
 800757e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007580:	4a28      	ldr	r2, [pc, #160]	; (8007624 <SystemClock_Config+0xd0>)
 8007582:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007586:	6413      	str	r3, [r2, #64]	; 0x40
 8007588:	4b26      	ldr	r3, [pc, #152]	; (8007624 <SystemClock_Config+0xd0>)
 800758a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800758c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007590:	60bb      	str	r3, [r7, #8]
 8007592:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE2);
 8007594:	2300      	movs	r3, #0
 8007596:	607b      	str	r3, [r7, #4]
 8007598:	4b23      	ldr	r3, [pc, #140]	; (8007628 <SystemClock_Config+0xd4>)
 800759a:	681b      	ldr	r3, [r3, #0]
 800759c:	f423 4340 	bic.w	r3, r3, #49152	; 0xc000
 80075a0:	4a21      	ldr	r2, [pc, #132]	; (8007628 <SystemClock_Config+0xd4>)
 80075a2:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 80075a6:	6013      	str	r3, [r2, #0]
 80075a8:	4b1f      	ldr	r3, [pc, #124]	; (8007628 <SystemClock_Config+0xd4>)
 80075aa:	681b      	ldr	r3, [r3, #0]
 80075ac:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80075b0:	607b      	str	r3, [r7, #4]
 80075b2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80075b4:	2302      	movs	r3, #2
 80075b6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80075b8:	2301      	movs	r3, #1
 80075ba:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80075bc:	2310      	movs	r3, #16
 80075be:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80075c0:	2302      	movs	r3, #2
 80075c2:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80075c4:	2300      	movs	r3, #0
 80075c6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 16;
 80075c8:	2310      	movs	r3, #16
 80075ca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80075cc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80075d0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV4;
 80075d2:	2304      	movs	r3, #4
 80075d4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 7;
 80075d6:	2307      	movs	r3, #7
 80075d8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80075da:	f107 0320 	add.w	r3, r7, #32
 80075de:	4618      	mov	r0, r3
 80075e0:	f002 ff3e 	bl	800a460 <HAL_RCC_OscConfig>
 80075e4:	4603      	mov	r3, r0
 80075e6:	2b00      	cmp	r3, #0
 80075e8:	d001      	beq.n	80075ee <SystemClock_Config+0x9a>
  {
    Error_Handler();
 80075ea:	f000 ffa9 	bl	8008540 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB busses clocks 
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80075ee:	230f      	movs	r3, #15
 80075f0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80075f2:	2302      	movs	r3, #2
 80075f4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80075f6:	2300      	movs	r3, #0
 80075f8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80075fa:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80075fe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8007600:	2300      	movs	r3, #0
 8007602:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8007604:	f107 030c 	add.w	r3, r7, #12
 8007608:	2102      	movs	r1, #2
 800760a:	4618      	mov	r0, r3
 800760c:	f003 f998 	bl	800a940 <HAL_RCC_ClockConfig>
 8007610:	4603      	mov	r3, r0
 8007612:	2b00      	cmp	r3, #0
 8007614:	d001      	beq.n	800761a <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8007616:	f000 ff93 	bl	8008540 <Error_Handler>
  }
}
 800761a:	bf00      	nop
 800761c:	3750      	adds	r7, #80	; 0x50
 800761e:	46bd      	mov	sp, r7
 8007620:	bd80      	pop	{r7, pc}
 8007622:	bf00      	nop
 8007624:	40023800 	.word	0x40023800
 8007628:	40007000 	.word	0x40007000

0800762c <MX_ADC1_Init>:
  * @brief ADC1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_ADC1_Init(void)
{
 800762c:	b580      	push	{r7, lr}
 800762e:	b084      	sub	sp, #16
 8007630:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8007632:	463b      	mov	r3, r7
 8007634:	2200      	movs	r2, #0
 8007636:	601a      	str	r2, [r3, #0]
 8007638:	605a      	str	r2, [r3, #4]
 800763a:	609a      	str	r2, [r3, #8]
 800763c:	60da      	str	r2, [r3, #12]
  /* USER CODE BEGIN ADC1_Init 1 */

  /* USER CODE END ADC1_Init 1 */
  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion) 
  */
  hadc1.Instance = ADC1;
 800763e:	4b2a      	ldr	r3, [pc, #168]	; (80076e8 <MX_ADC1_Init+0xbc>)
 8007640:	4a2a      	ldr	r2, [pc, #168]	; (80076ec <MX_ADC1_Init+0xc0>)
 8007642:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8007644:	4b28      	ldr	r3, [pc, #160]	; (80076e8 <MX_ADC1_Init+0xbc>)
 8007646:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800764a:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_10B;
 800764c:	4b26      	ldr	r3, [pc, #152]	; (80076e8 <MX_ADC1_Init+0xbc>)
 800764e:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8007652:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ENABLE;
 8007654:	4b24      	ldr	r3, [pc, #144]	; (80076e8 <MX_ADC1_Init+0xbc>)
 8007656:	2201      	movs	r2, #1
 8007658:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 800765a:	4b23      	ldr	r3, [pc, #140]	; (80076e8 <MX_ADC1_Init+0xbc>)
 800765c:	2200      	movs	r2, #0
 800765e:	761a      	strb	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 8007660:	4b21      	ldr	r3, [pc, #132]	; (80076e8 <MX_ADC1_Init+0xbc>)
 8007662:	2200      	movs	r2, #0
 8007664:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_RISING;
 8007668:	4b1f      	ldr	r3, [pc, #124]	; (80076e8 <MX_ADC1_Init+0xbc>)
 800766a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800766e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_EXTERNALTRIGCONV_T2_TRGO;
 8007670:	4b1d      	ldr	r3, [pc, #116]	; (80076e8 <MX_ADC1_Init+0xbc>)
 8007672:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8007676:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8007678:	4b1b      	ldr	r3, [pc, #108]	; (80076e8 <MX_ADC1_Init+0xbc>)
 800767a:	2200      	movs	r2, #0
 800767c:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 2;
 800767e:	4b1a      	ldr	r3, [pc, #104]	; (80076e8 <MX_ADC1_Init+0xbc>)
 8007680:	2202      	movs	r2, #2
 8007682:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = ENABLE;
 8007684:	4b18      	ldr	r3, [pc, #96]	; (80076e8 <MX_ADC1_Init+0xbc>)
 8007686:	2201      	movs	r2, #1
 8007688:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SEQ_CONV;
 800768c:	4b16      	ldr	r3, [pc, #88]	; (80076e8 <MX_ADC1_Init+0xbc>)
 800768e:	2200      	movs	r2, #0
 8007690:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 8007692:	4815      	ldr	r0, [pc, #84]	; (80076e8 <MX_ADC1_Init+0xbc>)
 8007694:	f001 fafe 	bl	8008c94 <HAL_ADC_Init>
 8007698:	4603      	mov	r3, r0
 800769a:	2b00      	cmp	r3, #0
 800769c:	d001      	beq.n	80076a2 <MX_ADC1_Init+0x76>
  {
    Error_Handler();
 800769e:	f000 ff4f 	bl	8008540 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_4;
 80076a2:	2304      	movs	r3, #4
 80076a4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 1;
 80076a6:	2301      	movs	r3, #1
 80076a8:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_480CYCLES;
 80076aa:	2307      	movs	r3, #7
 80076ac:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80076ae:	463b      	mov	r3, r7
 80076b0:	4619      	mov	r1, r3
 80076b2:	480d      	ldr	r0, [pc, #52]	; (80076e8 <MX_ADC1_Init+0xbc>)
 80076b4:	f001 fc24 	bl	8008f00 <HAL_ADC_ConfigChannel>
 80076b8:	4603      	mov	r3, r0
 80076ba:	2b00      	cmp	r3, #0
 80076bc:	d001      	beq.n	80076c2 <MX_ADC1_Init+0x96>
  {
    Error_Handler();
 80076be:	f000 ff3f 	bl	8008540 <Error_Handler>
  }
  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time. 
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80076c2:	2308      	movs	r3, #8
 80076c4:	603b      	str	r3, [r7, #0]
  sConfig.Rank = 2;
 80076c6:	2302      	movs	r3, #2
 80076c8:	607b      	str	r3, [r7, #4]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 80076ca:	463b      	mov	r3, r7
 80076cc:	4619      	mov	r1, r3
 80076ce:	4806      	ldr	r0, [pc, #24]	; (80076e8 <MX_ADC1_Init+0xbc>)
 80076d0:	f001 fc16 	bl	8008f00 <HAL_ADC_ConfigChannel>
 80076d4:	4603      	mov	r3, r0
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d001      	beq.n	80076de <MX_ADC1_Init+0xb2>
  {
    Error_Handler();
 80076da:	f000 ff31 	bl	8008540 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 80076de:	bf00      	nop
 80076e0:	3710      	adds	r7, #16
 80076e2:	46bd      	mov	sp, r7
 80076e4:	bd80      	pop	{r7, pc}
 80076e6:	bf00      	nop
 80076e8:	20005508 	.word	0x20005508
 80076ec:	40012000 	.word	0x40012000

080076f0 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80076f0:	b580      	push	{r7, lr}
 80076f2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80076f4:	4b17      	ldr	r3, [pc, #92]	; (8007754 <MX_SPI1_Init+0x64>)
 80076f6:	4a18      	ldr	r2, [pc, #96]	; (8007758 <MX_SPI1_Init+0x68>)
 80076f8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80076fa:	4b16      	ldr	r3, [pc, #88]	; (8007754 <MX_SPI1_Init+0x64>)
 80076fc:	f44f 7282 	mov.w	r2, #260	; 0x104
 8007700:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8007702:	4b14      	ldr	r3, [pc, #80]	; (8007754 <MX_SPI1_Init+0x64>)
 8007704:	2200      	movs	r2, #0
 8007706:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8007708:	4b12      	ldr	r3, [pc, #72]	; (8007754 <MX_SPI1_Init+0x64>)
 800770a:	2200      	movs	r2, #0
 800770c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800770e:	4b11      	ldr	r3, [pc, #68]	; (8007754 <MX_SPI1_Init+0x64>)
 8007710:	2200      	movs	r2, #0
 8007712:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007714:	4b0f      	ldr	r3, [pc, #60]	; (8007754 <MX_SPI1_Init+0x64>)
 8007716:	2200      	movs	r2, #0
 8007718:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800771a:	4b0e      	ldr	r3, [pc, #56]	; (8007754 <MX_SPI1_Init+0x64>)
 800771c:	f44f 7200 	mov.w	r2, #512	; 0x200
 8007720:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8007722:	4b0c      	ldr	r3, [pc, #48]	; (8007754 <MX_SPI1_Init+0x64>)
 8007724:	2210      	movs	r2, #16
 8007726:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007728:	4b0a      	ldr	r3, [pc, #40]	; (8007754 <MX_SPI1_Init+0x64>)
 800772a:	2200      	movs	r2, #0
 800772c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800772e:	4b09      	ldr	r3, [pc, #36]	; (8007754 <MX_SPI1_Init+0x64>)
 8007730:	2200      	movs	r2, #0
 8007732:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8007734:	4b07      	ldr	r3, [pc, #28]	; (8007754 <MX_SPI1_Init+0x64>)
 8007736:	2200      	movs	r2, #0
 8007738:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 10;
 800773a:	4b06      	ldr	r3, [pc, #24]	; (8007754 <MX_SPI1_Init+0x64>)
 800773c:	220a      	movs	r2, #10
 800773e:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8007740:	4804      	ldr	r0, [pc, #16]	; (8007754 <MX_SPI1_Init+0x64>)
 8007742:	f003 fb21 	bl	800ad88 <HAL_SPI_Init>
 8007746:	4603      	mov	r3, r0
 8007748:	2b00      	cmp	r3, #0
 800774a:	d001      	beq.n	8007750 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800774c:	f000 fef8 	bl	8008540 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8007750:	bf00      	nop
 8007752:	bd80      	pop	{r7, pc}
 8007754:	200055e4 	.word	0x200055e4
 8007758:	40013000 	.word	0x40013000

0800775c <MX_SPI2_Init>:
  * @brief SPI2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI2_Init(void)
{
 800775c:	b580      	push	{r7, lr}
 800775e:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  /* SPI2 parameter configuration*/
  hspi2.Instance = SPI2;
 8007760:	4b17      	ldr	r3, [pc, #92]	; (80077c0 <MX_SPI2_Init+0x64>)
 8007762:	4a18      	ldr	r2, [pc, #96]	; (80077c4 <MX_SPI2_Init+0x68>)
 8007764:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 8007766:	4b16      	ldr	r3, [pc, #88]	; (80077c0 <MX_SPI2_Init+0x64>)
 8007768:	f44f 7282 	mov.w	r2, #260	; 0x104
 800776c:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 800776e:	4b14      	ldr	r3, [pc, #80]	; (80077c0 <MX_SPI2_Init+0x64>)
 8007770:	2200      	movs	r2, #0
 8007772:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8007774:	4b12      	ldr	r3, [pc, #72]	; (80077c0 <MX_SPI2_Init+0x64>)
 8007776:	2200      	movs	r2, #0
 8007778:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 800777a:	4b11      	ldr	r3, [pc, #68]	; (80077c0 <MX_SPI2_Init+0x64>)
 800777c:	2200      	movs	r2, #0
 800777e:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8007780:	4b0f      	ldr	r3, [pc, #60]	; (80077c0 <MX_SPI2_Init+0x64>)
 8007782:	2200      	movs	r2, #0
 8007784:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 8007786:	4b0e      	ldr	r3, [pc, #56]	; (80077c0 <MX_SPI2_Init+0x64>)
 8007788:	f44f 7200 	mov.w	r2, #512	; 0x200
 800778c:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 800778e:	4b0c      	ldr	r3, [pc, #48]	; (80077c0 <MX_SPI2_Init+0x64>)
 8007790:	2210      	movs	r2, #16
 8007792:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8007794:	4b0a      	ldr	r3, [pc, #40]	; (80077c0 <MX_SPI2_Init+0x64>)
 8007796:	2200      	movs	r2, #0
 8007798:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 800779a:	4b09      	ldr	r3, [pc, #36]	; (80077c0 <MX_SPI2_Init+0x64>)
 800779c:	2200      	movs	r2, #0
 800779e:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80077a0:	4b07      	ldr	r3, [pc, #28]	; (80077c0 <MX_SPI2_Init+0x64>)
 80077a2:	2200      	movs	r2, #0
 80077a4:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 10;
 80077a6:	4b06      	ldr	r3, [pc, #24]	; (80077c0 <MX_SPI2_Init+0x64>)
 80077a8:	220a      	movs	r2, #10
 80077aa:	62da      	str	r2, [r3, #44]	; 0x2c
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 80077ac:	4804      	ldr	r0, [pc, #16]	; (80077c0 <MX_SPI2_Init+0x64>)
 80077ae:	f003 faeb 	bl	800ad88 <HAL_SPI_Init>
 80077b2:	4603      	mov	r3, r0
 80077b4:	2b00      	cmp	r3, #0
 80077b6:	d001      	beq.n	80077bc <MX_SPI2_Init+0x60>
  {
    Error_Handler();
 80077b8:	f000 fec2 	bl	8008540 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 80077bc:	bf00      	nop
 80077be:	bd80      	pop	{r7, pc}
 80077c0:	20005400 	.word	0x20005400
 80077c4:	40003800 	.word	0x40003800

080077c8 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80077c8:	b580      	push	{r7, lr}
 80077ca:	b086      	sub	sp, #24
 80077cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80077ce:	f107 0308 	add.w	r3, r7, #8
 80077d2:	2200      	movs	r2, #0
 80077d4:	601a      	str	r2, [r3, #0]
 80077d6:	605a      	str	r2, [r3, #4]
 80077d8:	609a      	str	r2, [r3, #8]
 80077da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80077dc:	463b      	mov	r3, r7
 80077de:	2200      	movs	r2, #0
 80077e0:	601a      	str	r2, [r3, #0]
 80077e2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80077e4:	4b1d      	ldr	r3, [pc, #116]	; (800785c <MX_TIM2_Init+0x94>)
 80077e6:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80077ea:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 83;
 80077ec:	4b1b      	ldr	r3, [pc, #108]	; (800785c <MX_TIM2_Init+0x94>)
 80077ee:	2253      	movs	r2, #83	; 0x53
 80077f0:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80077f2:	4b1a      	ldr	r3, [pc, #104]	; (800785c <MX_TIM2_Init+0x94>)
 80077f4:	2200      	movs	r2, #0
 80077f6:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 1000;
 80077f8:	4b18      	ldr	r3, [pc, #96]	; (800785c <MX_TIM2_Init+0x94>)
 80077fa:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80077fe:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007800:	4b16      	ldr	r3, [pc, #88]	; (800785c <MX_TIM2_Init+0x94>)
 8007802:	2200      	movs	r2, #0
 8007804:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8007806:	4b15      	ldr	r3, [pc, #84]	; (800785c <MX_TIM2_Init+0x94>)
 8007808:	2200      	movs	r2, #0
 800780a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800780c:	4813      	ldr	r0, [pc, #76]	; (800785c <MX_TIM2_Init+0x94>)
 800780e:	f004 f81d 	bl	800b84c <HAL_TIM_Base_Init>
 8007812:	4603      	mov	r3, r0
 8007814:	2b00      	cmp	r3, #0
 8007816:	d001      	beq.n	800781c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8007818:	f000 fe92 	bl	8008540 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800781c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007820:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8007822:	f107 0308 	add.w	r3, r7, #8
 8007826:	4619      	mov	r1, r3
 8007828:	480c      	ldr	r0, [pc, #48]	; (800785c <MX_TIM2_Init+0x94>)
 800782a:	f004 fa53 	bl	800bcd4 <HAL_TIM_ConfigClockSource>
 800782e:	4603      	mov	r3, r0
 8007830:	2b00      	cmp	r3, #0
 8007832:	d001      	beq.n	8007838 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8007834:	f000 fe84 	bl	8008540 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8007838:	2320      	movs	r3, #32
 800783a:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800783c:	2300      	movs	r3, #0
 800783e:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8007840:	463b      	mov	r3, r7
 8007842:	4619      	mov	r1, r3
 8007844:	4805      	ldr	r0, [pc, #20]	; (800785c <MX_TIM2_Init+0x94>)
 8007846:	f004 fc65 	bl	800c114 <HAL_TIMEx_MasterConfigSynchronization>
 800784a:	4603      	mov	r3, r0
 800784c:	2b00      	cmp	r3, #0
 800784e:	d001      	beq.n	8007854 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8007850:	f000 fe76 	bl	8008540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8007854:	bf00      	nop
 8007856:	3718      	adds	r7, #24
 8007858:	46bd      	mov	sp, r7
 800785a:	bd80      	pop	{r7, pc}
 800785c:	2000563c 	.word	0x2000563c

08007860 <MX_TIM5_Init>:
  * @brief TIM5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM5_Init(void)
{
 8007860:	b580      	push	{r7, lr}
 8007862:	b08c      	sub	sp, #48	; 0x30
 8007864:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM5_Init 0 */

  /* USER CODE END TIM5_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8007866:	f107 030c 	add.w	r3, r7, #12
 800786a:	2224      	movs	r2, #36	; 0x24
 800786c:	2100      	movs	r1, #0
 800786e:	4618      	mov	r0, r3
 8007870:	f008 f84d 	bl	800f90e <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8007874:	1d3b      	adds	r3, r7, #4
 8007876:	2200      	movs	r2, #0
 8007878:	601a      	str	r2, [r3, #0]
 800787a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM5_Init 1 */

  /* USER CODE END TIM5_Init 1 */
  htim5.Instance = TIM5;
 800787c:	4b20      	ldr	r3, [pc, #128]	; (8007900 <MX_TIM5_Init+0xa0>)
 800787e:	4a21      	ldr	r2, [pc, #132]	; (8007904 <MX_TIM5_Init+0xa4>)
 8007880:	601a      	str	r2, [r3, #0]
  htim5.Init.Prescaler = 0;
 8007882:	4b1f      	ldr	r3, [pc, #124]	; (8007900 <MX_TIM5_Init+0xa0>)
 8007884:	2200      	movs	r2, #0
 8007886:	605a      	str	r2, [r3, #4]
  htim5.Init.CounterMode = TIM_COUNTERMODE_UP;
 8007888:	4b1d      	ldr	r3, [pc, #116]	; (8007900 <MX_TIM5_Init+0xa0>)
 800788a:	2200      	movs	r2, #0
 800788c:	609a      	str	r2, [r3, #8]
  htim5.Init.Period = 65535;
 800788e:	4b1c      	ldr	r3, [pc, #112]	; (8007900 <MX_TIM5_Init+0xa0>)
 8007890:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8007894:	60da      	str	r2, [r3, #12]
  htim5.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8007896:	4b1a      	ldr	r3, [pc, #104]	; (8007900 <MX_TIM5_Init+0xa0>)
 8007898:	2200      	movs	r2, #0
 800789a:	611a      	str	r2, [r3, #16]
  htim5.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800789c:	4b18      	ldr	r3, [pc, #96]	; (8007900 <MX_TIM5_Init+0xa0>)
 800789e:	2200      	movs	r2, #0
 80078a0:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80078a2:	2303      	movs	r3, #3
 80078a4:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80078a6:	2300      	movs	r3, #0
 80078a8:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80078aa:	2301      	movs	r3, #1
 80078ac:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80078ae:	2300      	movs	r3, #0
 80078b0:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 0;
 80078b2:	2300      	movs	r3, #0
 80078b4:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80078b6:	2300      	movs	r3, #0
 80078b8:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80078ba:	2301      	movs	r3, #1
 80078bc:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80078be:	2300      	movs	r3, #0
 80078c0:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 0;
 80078c2:	2300      	movs	r3, #0
 80078c4:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim5, &sConfig) != HAL_OK)
 80078c6:	f107 030c 	add.w	r3, r7, #12
 80078ca:	4619      	mov	r1, r3
 80078cc:	480c      	ldr	r0, [pc, #48]	; (8007900 <MX_TIM5_Init+0xa0>)
 80078ce:	f004 f830 	bl	800b932 <HAL_TIM_Encoder_Init>
 80078d2:	4603      	mov	r3, r0
 80078d4:	2b00      	cmp	r3, #0
 80078d6:	d001      	beq.n	80078dc <MX_TIM5_Init+0x7c>
  {
    Error_Handler();
 80078d8:	f000 fe32 	bl	8008540 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80078dc:	2300      	movs	r3, #0
 80078de:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80078e0:	2300      	movs	r3, #0
 80078e2:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim5, &sMasterConfig) != HAL_OK)
 80078e4:	1d3b      	adds	r3, r7, #4
 80078e6:	4619      	mov	r1, r3
 80078e8:	4805      	ldr	r0, [pc, #20]	; (8007900 <MX_TIM5_Init+0xa0>)
 80078ea:	f004 fc13 	bl	800c114 <HAL_TIMEx_MasterConfigSynchronization>
 80078ee:	4603      	mov	r3, r0
 80078f0:	2b00      	cmp	r3, #0
 80078f2:	d001      	beq.n	80078f8 <MX_TIM5_Init+0x98>
  {
    Error_Handler();
 80078f4:	f000 fe24 	bl	8008540 <Error_Handler>
  }
  /* USER CODE BEGIN TIM5_Init 2 */

  /* USER CODE END TIM5_Init 2 */

}
 80078f8:	bf00      	nop
 80078fa:	3730      	adds	r7, #48	; 0x30
 80078fc:	46bd      	mov	sp, r7
 80078fe:	bd80      	pop	{r7, pc}
 8007900:	200054c8 	.word	0x200054c8
 8007904:	40000c00 	.word	0x40000c00

08007908 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 800790c:	4b11      	ldr	r3, [pc, #68]	; (8007954 <MX_USART2_UART_Init+0x4c>)
 800790e:	4a12      	ldr	r2, [pc, #72]	; (8007958 <MX_USART2_UART_Init+0x50>)
 8007910:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8007912:	4b10      	ldr	r3, [pc, #64]	; (8007954 <MX_USART2_UART_Init+0x4c>)
 8007914:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8007918:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800791a:	4b0e      	ldr	r3, [pc, #56]	; (8007954 <MX_USART2_UART_Init+0x4c>)
 800791c:	2200      	movs	r2, #0
 800791e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8007920:	4b0c      	ldr	r3, [pc, #48]	; (8007954 <MX_USART2_UART_Init+0x4c>)
 8007922:	2200      	movs	r2, #0
 8007924:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8007926:	4b0b      	ldr	r3, [pc, #44]	; (8007954 <MX_USART2_UART_Init+0x4c>)
 8007928:	2200      	movs	r2, #0
 800792a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 800792c:	4b09      	ldr	r3, [pc, #36]	; (8007954 <MX_USART2_UART_Init+0x4c>)
 800792e:	220c      	movs	r2, #12
 8007930:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8007932:	4b08      	ldr	r3, [pc, #32]	; (8007954 <MX_USART2_UART_Init+0x4c>)
 8007934:	2200      	movs	r2, #0
 8007936:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8007938:	4b06      	ldr	r3, [pc, #24]	; (8007954 <MX_USART2_UART_Init+0x4c>)
 800793a:	2200      	movs	r2, #0
 800793c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800793e:	4805      	ldr	r0, [pc, #20]	; (8007954 <MX_USART2_UART_Init+0x4c>)
 8007940:	f004 fc6a 	bl	800c218 <HAL_UART_Init>
 8007944:	4603      	mov	r3, r0
 8007946:	2b00      	cmp	r3, #0
 8007948:	d001      	beq.n	800794e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800794a:	f000 fdf9 	bl	8008540 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800794e:	bf00      	nop
 8007950:	bd80      	pop	{r7, pc}
 8007952:	bf00      	nop
 8007954:	20005680 	.word	0x20005680
 8007958:	40004400 	.word	0x40004400

0800795c <MX_DMA_Init>:

/** 
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void) 
{
 800795c:	b580      	push	{r7, lr}
 800795e:	b082      	sub	sp, #8
 8007960:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8007962:	2300      	movs	r3, #0
 8007964:	607b      	str	r3, [r7, #4]
 8007966:	4b17      	ldr	r3, [pc, #92]	; (80079c4 <MX_DMA_Init+0x68>)
 8007968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800796a:	4a16      	ldr	r2, [pc, #88]	; (80079c4 <MX_DMA_Init+0x68>)
 800796c:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8007970:	6313      	str	r3, [r2, #48]	; 0x30
 8007972:	4b14      	ldr	r3, [pc, #80]	; (80079c4 <MX_DMA_Init+0x68>)
 8007974:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007976:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800797a:	607b      	str	r3, [r7, #4]
 800797c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 800797e:	2300      	movs	r3, #0
 8007980:	603b      	str	r3, [r7, #0]
 8007982:	4b10      	ldr	r3, [pc, #64]	; (80079c4 <MX_DMA_Init+0x68>)
 8007984:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007986:	4a0f      	ldr	r2, [pc, #60]	; (80079c4 <MX_DMA_Init+0x68>)
 8007988:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 800798c:	6313      	str	r3, [r2, #48]	; 0x30
 800798e:	4b0d      	ldr	r3, [pc, #52]	; (80079c4 <MX_DMA_Init+0x68>)
 8007990:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007992:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007996:	603b      	str	r3, [r7, #0]
 8007998:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 800799a:	2200      	movs	r2, #0
 800799c:	2105      	movs	r1, #5
 800799e:	2010      	movs	r0, #16
 80079a0:	f001 fe06 	bl	80095b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80079a4:	2010      	movs	r0, #16
 80079a6:	f001 fe1f 	bl	80095e8 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 80079aa:	2200      	movs	r2, #0
 80079ac:	2105      	movs	r1, #5
 80079ae:	2038      	movs	r0, #56	; 0x38
 80079b0:	f001 fdfe 	bl	80095b0 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 80079b4:	2038      	movs	r0, #56	; 0x38
 80079b6:	f001 fe17 	bl	80095e8 <HAL_NVIC_EnableIRQ>

}
 80079ba:	bf00      	nop
 80079bc:	3708      	adds	r7, #8
 80079be:	46bd      	mov	sp, r7
 80079c0:	bd80      	pop	{r7, pc}
 80079c2:	bf00      	nop
 80079c4:	40023800 	.word	0x40023800

080079c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b08a      	sub	sp, #40	; 0x28
 80079cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80079ce:	f107 0314 	add.w	r3, r7, #20
 80079d2:	2200      	movs	r2, #0
 80079d4:	601a      	str	r2, [r3, #0]
 80079d6:	605a      	str	r2, [r3, #4]
 80079d8:	609a      	str	r2, [r3, #8]
 80079da:	60da      	str	r2, [r3, #12]
 80079dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80079de:	2300      	movs	r3, #0
 80079e0:	613b      	str	r3, [r7, #16]
 80079e2:	4b42      	ldr	r3, [pc, #264]	; (8007aec <MX_GPIO_Init+0x124>)
 80079e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079e6:	4a41      	ldr	r2, [pc, #260]	; (8007aec <MX_GPIO_Init+0x124>)
 80079e8:	f043 0304 	orr.w	r3, r3, #4
 80079ec:	6313      	str	r3, [r2, #48]	; 0x30
 80079ee:	4b3f      	ldr	r3, [pc, #252]	; (8007aec <MX_GPIO_Init+0x124>)
 80079f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80079f2:	f003 0304 	and.w	r3, r3, #4
 80079f6:	613b      	str	r3, [r7, #16]
 80079f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80079fa:	2300      	movs	r3, #0
 80079fc:	60fb      	str	r3, [r7, #12]
 80079fe:	4b3b      	ldr	r3, [pc, #236]	; (8007aec <MX_GPIO_Init+0x124>)
 8007a00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a02:	4a3a      	ldr	r2, [pc, #232]	; (8007aec <MX_GPIO_Init+0x124>)
 8007a04:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007a08:	6313      	str	r3, [r2, #48]	; 0x30
 8007a0a:	4b38      	ldr	r3, [pc, #224]	; (8007aec <MX_GPIO_Init+0x124>)
 8007a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a0e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a12:	60fb      	str	r3, [r7, #12]
 8007a14:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8007a16:	2300      	movs	r3, #0
 8007a18:	60bb      	str	r3, [r7, #8]
 8007a1a:	4b34      	ldr	r3, [pc, #208]	; (8007aec <MX_GPIO_Init+0x124>)
 8007a1c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a1e:	4a33      	ldr	r2, [pc, #204]	; (8007aec <MX_GPIO_Init+0x124>)
 8007a20:	f043 0301 	orr.w	r3, r3, #1
 8007a24:	6313      	str	r3, [r2, #48]	; 0x30
 8007a26:	4b31      	ldr	r3, [pc, #196]	; (8007aec <MX_GPIO_Init+0x124>)
 8007a28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a2a:	f003 0301 	and.w	r3, r3, #1
 8007a2e:	60bb      	str	r3, [r7, #8]
 8007a30:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8007a32:	2300      	movs	r3, #0
 8007a34:	607b      	str	r3, [r7, #4]
 8007a36:	4b2d      	ldr	r3, [pc, #180]	; (8007aec <MX_GPIO_Init+0x124>)
 8007a38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a3a:	4a2c      	ldr	r2, [pc, #176]	; (8007aec <MX_GPIO_Init+0x124>)
 8007a3c:	f043 0302 	orr.w	r3, r3, #2
 8007a40:	6313      	str	r3, [r2, #48]	; 0x30
 8007a42:	4b2a      	ldr	r3, [pc, #168]	; (8007aec <MX_GPIO_Init+0x124>)
 8007a44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007a46:	f003 0302 	and.w	r3, r3, #2
 8007a4a:	607b      	str	r3, [r7, #4]
 8007a4c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, LCD_RST_Pin|LCD_DC_Pin, GPIO_PIN_RESET);
 8007a4e:	2200      	movs	r2, #0
 8007a50:	f44f 7140 	mov.w	r1, #768	; 0x300
 8007a54:	4826      	ldr	r0, [pc, #152]	; (8007af0 <MX_GPIO_Init+0x128>)
 8007a56:	f002 fce9 	bl	800a42c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, TS_CS_Pin|LCD_CS_Pin, GPIO_PIN_RESET);
 8007a5a:	2200      	movs	r2, #0
 8007a5c:	f44f 7140 	mov.w	r1, #768	; 0x300
 8007a60:	4824      	ldr	r0, [pc, #144]	; (8007af4 <MX_GPIO_Init+0x12c>)
 8007a62:	f002 fce3 	bl	800a42c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(MCP2515_CS_GPIO_Port, MCP2515_CS_Pin, GPIO_PIN_RESET);
 8007a66:	2200      	movs	r2, #0
 8007a68:	2140      	movs	r1, #64	; 0x40
 8007a6a:	4823      	ldr	r0, [pc, #140]	; (8007af8 <MX_GPIO_Init+0x130>)
 8007a6c:	f002 fcde 	bl	800a42c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : CALIBRATE_Pin */
  GPIO_InitStruct.Pin = CALIBRATE_Pin;
 8007a70:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8007a74:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8007a76:	4b21      	ldr	r3, [pc, #132]	; (8007afc <MX_GPIO_Init+0x134>)
 8007a78:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a7a:	2300      	movs	r3, #0
 8007a7c:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(CALIBRATE_GPIO_Port, &GPIO_InitStruct);
 8007a7e:	f107 0314 	add.w	r3, r7, #20
 8007a82:	4619      	mov	r1, r3
 8007a84:	481a      	ldr	r0, [pc, #104]	; (8007af0 <MX_GPIO_Init+0x128>)
 8007a86:	f002 fb37 	bl	800a0f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : LCD_RST_Pin LCD_DC_Pin */
  GPIO_InitStruct.Pin = LCD_RST_Pin|LCD_DC_Pin;
 8007a8a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007a8e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007a90:	2301      	movs	r3, #1
 8007a92:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007a94:	2300      	movs	r3, #0
 8007a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007a98:	2300      	movs	r3, #0
 8007a9a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007a9c:	f107 0314 	add.w	r3, r7, #20
 8007aa0:	4619      	mov	r1, r3
 8007aa2:	4813      	ldr	r0, [pc, #76]	; (8007af0 <MX_GPIO_Init+0x128>)
 8007aa4:	f002 fb28 	bl	800a0f8 <HAL_GPIO_Init>

  /*Configure GPIO pins : TS_CS_Pin LCD_CS_Pin */
  GPIO_InitStruct.Pin = TS_CS_Pin|LCD_CS_Pin;
 8007aa8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007aac:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007aae:	2301      	movs	r3, #1
 8007ab0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ab2:	2300      	movs	r3, #0
 8007ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ab6:	2300      	movs	r3, #0
 8007ab8:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007aba:	f107 0314 	add.w	r3, r7, #20
 8007abe:	4619      	mov	r1, r3
 8007ac0:	480c      	ldr	r0, [pc, #48]	; (8007af4 <MX_GPIO_Init+0x12c>)
 8007ac2:	f002 fb19 	bl	800a0f8 <HAL_GPIO_Init>

  /*Configure GPIO pin : MCP2515_CS_Pin */
  GPIO_InitStruct.Pin = MCP2515_CS_Pin;
 8007ac6:	2340      	movs	r3, #64	; 0x40
 8007ac8:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007aca:	2301      	movs	r3, #1
 8007acc:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007ace:	2300      	movs	r3, #0
 8007ad0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007ad2:	2300      	movs	r3, #0
 8007ad4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(MCP2515_CS_GPIO_Port, &GPIO_InitStruct);
 8007ad6:	f107 0314 	add.w	r3, r7, #20
 8007ada:	4619      	mov	r1, r3
 8007adc:	4806      	ldr	r0, [pc, #24]	; (8007af8 <MX_GPIO_Init+0x130>)
 8007ade:	f002 fb0b 	bl	800a0f8 <HAL_GPIO_Init>

}
 8007ae2:	bf00      	nop
 8007ae4:	3728      	adds	r7, #40	; 0x28
 8007ae6:	46bd      	mov	sp, r7
 8007ae8:	bd80      	pop	{r7, pc}
 8007aea:	bf00      	nop
 8007aec:	40023800 	.word	0x40023800
 8007af0:	40020800 	.word	0x40020800
 8007af4:	40020000 	.word	0x40020000
 8007af8:	40020400 	.word	0x40020400
 8007afc:	10210000 	.word	0x10210000

08007b00 <HAL_UART_RxCpltCallback>:

/* USER CODE BEGIN 4 */


void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8007b00:	b580      	push	{r7, lr}
 8007b02:	b082      	sub	sp, #8
 8007b04:	af00      	add	r7, sp, #0
 8007b06:	6078      	str	r0, [r7, #4]
	/* NOTE: This function should not be modified, when the callback is needed,
	 the HAL_UART_RxCpltCallback could be implemented in the user file
	 */

	// When we get 0x23 = '#', then send back new_output_float and new_input_float
	if (UART_RX_DATA[0] == 0x23) {
 8007b08:	4b2e      	ldr	r3, [pc, #184]	; (8007bc4 <HAL_UART_RxCpltCallback+0xc4>)
 8007b0a:	781b      	ldrb	r3, [r3, #0]
 8007b0c:	2b23      	cmp	r3, #35	; 0x23
 8007b0e:	d155      	bne.n	8007bbc <HAL_UART_RxCpltCallback+0xbc>
		convert.float_value = new_input0_float;
 8007b10:	4b2d      	ldr	r3, [pc, #180]	; (8007bc8 <HAL_UART_RxCpltCallback+0xc8>)
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	4a2d      	ldr	r2, [pc, #180]	; (8007bcc <HAL_UART_RxCpltCallback+0xcc>)
 8007b16:	6013      	str	r3, [r2, #0]
		UART_TX_DATA[0] = convert.uint8_values[0];
 8007b18:	4b2c      	ldr	r3, [pc, #176]	; (8007bcc <HAL_UART_RxCpltCallback+0xcc>)
 8007b1a:	781a      	ldrb	r2, [r3, #0]
 8007b1c:	4b2c      	ldr	r3, [pc, #176]	; (8007bd0 <HAL_UART_RxCpltCallback+0xd0>)
 8007b1e:	701a      	strb	r2, [r3, #0]
		UART_TX_DATA[1] = convert.uint8_values[1];
 8007b20:	4b2a      	ldr	r3, [pc, #168]	; (8007bcc <HAL_UART_RxCpltCallback+0xcc>)
 8007b22:	785a      	ldrb	r2, [r3, #1]
 8007b24:	4b2a      	ldr	r3, [pc, #168]	; (8007bd0 <HAL_UART_RxCpltCallback+0xd0>)
 8007b26:	705a      	strb	r2, [r3, #1]
		UART_TX_DATA[2] = convert.uint8_values[2];
 8007b28:	4b28      	ldr	r3, [pc, #160]	; (8007bcc <HAL_UART_RxCpltCallback+0xcc>)
 8007b2a:	789a      	ldrb	r2, [r3, #2]
 8007b2c:	4b28      	ldr	r3, [pc, #160]	; (8007bd0 <HAL_UART_RxCpltCallback+0xd0>)
 8007b2e:	709a      	strb	r2, [r3, #2]
		UART_TX_DATA[3] = convert.uint8_values[3];
 8007b30:	4b26      	ldr	r3, [pc, #152]	; (8007bcc <HAL_UART_RxCpltCallback+0xcc>)
 8007b32:	78da      	ldrb	r2, [r3, #3]
 8007b34:	4b26      	ldr	r3, [pc, #152]	; (8007bd0 <HAL_UART_RxCpltCallback+0xd0>)
 8007b36:	70da      	strb	r2, [r3, #3]
		convert.float_value = new_input1_float;
 8007b38:	4b26      	ldr	r3, [pc, #152]	; (8007bd4 <HAL_UART_RxCpltCallback+0xd4>)
 8007b3a:	681b      	ldr	r3, [r3, #0]
 8007b3c:	4a23      	ldr	r2, [pc, #140]	; (8007bcc <HAL_UART_RxCpltCallback+0xcc>)
 8007b3e:	6013      	str	r3, [r2, #0]
		UART_TX_DATA[4] = convert.uint8_values[0];
 8007b40:	4b22      	ldr	r3, [pc, #136]	; (8007bcc <HAL_UART_RxCpltCallback+0xcc>)
 8007b42:	781a      	ldrb	r2, [r3, #0]
 8007b44:	4b22      	ldr	r3, [pc, #136]	; (8007bd0 <HAL_UART_RxCpltCallback+0xd0>)
 8007b46:	711a      	strb	r2, [r3, #4]
		UART_TX_DATA[5] = convert.uint8_values[1];
 8007b48:	4b20      	ldr	r3, [pc, #128]	; (8007bcc <HAL_UART_RxCpltCallback+0xcc>)
 8007b4a:	785a      	ldrb	r2, [r3, #1]
 8007b4c:	4b20      	ldr	r3, [pc, #128]	; (8007bd0 <HAL_UART_RxCpltCallback+0xd0>)
 8007b4e:	715a      	strb	r2, [r3, #5]
		UART_TX_DATA[6] = convert.uint8_values[2];
 8007b50:	4b1e      	ldr	r3, [pc, #120]	; (8007bcc <HAL_UART_RxCpltCallback+0xcc>)
 8007b52:	789a      	ldrb	r2, [r3, #2]
 8007b54:	4b1e      	ldr	r3, [pc, #120]	; (8007bd0 <HAL_UART_RxCpltCallback+0xd0>)
 8007b56:	719a      	strb	r2, [r3, #6]
		UART_TX_DATA[7] = convert.uint8_values[3];
 8007b58:	4b1c      	ldr	r3, [pc, #112]	; (8007bcc <HAL_UART_RxCpltCallback+0xcc>)
 8007b5a:	78da      	ldrb	r2, [r3, #3]
 8007b5c:	4b1c      	ldr	r3, [pc, #112]	; (8007bd0 <HAL_UART_RxCpltCallback+0xd0>)
 8007b5e:	71da      	strb	r2, [r3, #7]
		convert.float_value = new_output_float;
 8007b60:	4b1d      	ldr	r3, [pc, #116]	; (8007bd8 <HAL_UART_RxCpltCallback+0xd8>)
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	4a19      	ldr	r2, [pc, #100]	; (8007bcc <HAL_UART_RxCpltCallback+0xcc>)
 8007b66:	6013      	str	r3, [r2, #0]
		UART_TX_DATA[8] = convert.uint8_values[0];
 8007b68:	4b18      	ldr	r3, [pc, #96]	; (8007bcc <HAL_UART_RxCpltCallback+0xcc>)
 8007b6a:	781a      	ldrb	r2, [r3, #0]
 8007b6c:	4b18      	ldr	r3, [pc, #96]	; (8007bd0 <HAL_UART_RxCpltCallback+0xd0>)
 8007b6e:	721a      	strb	r2, [r3, #8]
		UART_TX_DATA[9] = convert.uint8_values[1];
 8007b70:	4b16      	ldr	r3, [pc, #88]	; (8007bcc <HAL_UART_RxCpltCallback+0xcc>)
 8007b72:	785a      	ldrb	r2, [r3, #1]
 8007b74:	4b16      	ldr	r3, [pc, #88]	; (8007bd0 <HAL_UART_RxCpltCallback+0xd0>)
 8007b76:	725a      	strb	r2, [r3, #9]
		UART_TX_DATA[10] = convert.uint8_values[2];
 8007b78:	4b14      	ldr	r3, [pc, #80]	; (8007bcc <HAL_UART_RxCpltCallback+0xcc>)
 8007b7a:	789a      	ldrb	r2, [r3, #2]
 8007b7c:	4b14      	ldr	r3, [pc, #80]	; (8007bd0 <HAL_UART_RxCpltCallback+0xd0>)
 8007b7e:	729a      	strb	r2, [r3, #10]
		UART_TX_DATA[11] = convert.uint8_values[3];
 8007b80:	4b12      	ldr	r3, [pc, #72]	; (8007bcc <HAL_UART_RxCpltCallback+0xcc>)
 8007b82:	78da      	ldrb	r2, [r3, #3]
 8007b84:	4b12      	ldr	r3, [pc, #72]	; (8007bd0 <HAL_UART_RxCpltCallback+0xd0>)
 8007b86:	72da      	strb	r2, [r3, #11]
		convert.float_value = new_reference_float;
 8007b88:	4b14      	ldr	r3, [pc, #80]	; (8007bdc <HAL_UART_RxCpltCallback+0xdc>)
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	4a0f      	ldr	r2, [pc, #60]	; (8007bcc <HAL_UART_RxCpltCallback+0xcc>)
 8007b8e:	6013      	str	r3, [r2, #0]
		UART_TX_DATA[12] = convert.uint8_values[0];
 8007b90:	4b0e      	ldr	r3, [pc, #56]	; (8007bcc <HAL_UART_RxCpltCallback+0xcc>)
 8007b92:	781a      	ldrb	r2, [r3, #0]
 8007b94:	4b0e      	ldr	r3, [pc, #56]	; (8007bd0 <HAL_UART_RxCpltCallback+0xd0>)
 8007b96:	731a      	strb	r2, [r3, #12]
		UART_TX_DATA[13] = convert.uint8_values[1];
 8007b98:	4b0c      	ldr	r3, [pc, #48]	; (8007bcc <HAL_UART_RxCpltCallback+0xcc>)
 8007b9a:	785a      	ldrb	r2, [r3, #1]
 8007b9c:	4b0c      	ldr	r3, [pc, #48]	; (8007bd0 <HAL_UART_RxCpltCallback+0xd0>)
 8007b9e:	735a      	strb	r2, [r3, #13]
		UART_TX_DATA[14] = convert.uint8_values[2];
 8007ba0:	4b0a      	ldr	r3, [pc, #40]	; (8007bcc <HAL_UART_RxCpltCallback+0xcc>)
 8007ba2:	789a      	ldrb	r2, [r3, #2]
 8007ba4:	4b0a      	ldr	r3, [pc, #40]	; (8007bd0 <HAL_UART_RxCpltCallback+0xd0>)
 8007ba6:	739a      	strb	r2, [r3, #14]
		UART_TX_DATA[15] = convert.uint8_values[3];
 8007ba8:	4b08      	ldr	r3, [pc, #32]	; (8007bcc <HAL_UART_RxCpltCallback+0xcc>)
 8007baa:	78da      	ldrb	r2, [r3, #3]
 8007bac:	4b08      	ldr	r3, [pc, #32]	; (8007bd0 <HAL_UART_RxCpltCallback+0xd0>)
 8007bae:	73da      	strb	r2, [r3, #15]
		HAL_UART_Transmit(&huart2, UART_TX_DATA, 15, 10);
 8007bb0:	230a      	movs	r3, #10
 8007bb2:	220f      	movs	r2, #15
 8007bb4:	4906      	ldr	r1, [pc, #24]	; (8007bd0 <HAL_UART_RxCpltCallback+0xd0>)
 8007bb6:	480a      	ldr	r0, [pc, #40]	; (8007be0 <HAL_UART_RxCpltCallback+0xe0>)
 8007bb8:	f004 fb7b 	bl	800c2b2 <HAL_UART_Transmit>
	}
}
 8007bbc:	bf00      	nop
 8007bbe:	3708      	adds	r7, #8
 8007bc0:	46bd      	mov	sp, r7
 8007bc2:	bd80      	pop	{r7, pc}
 8007bc4:	20005580 	.word	0x20005580
 8007bc8:	2000539c 	.word	0x2000539c
 8007bcc:	200056d8 	.word	0x200056d8
 8007bd0:	200056c0 	.word	0x200056c0
 8007bd4:	200054b0 	.word	0x200054b0
 8007bd8:	20005550 	.word	0x20005550
 8007bdc:	200056d0 	.word	0x200056d0
 8007be0:	20005680 	.word	0x20005680

08007be4 <map>:

float map(float x, float in_min, float in_max, float out_min, float out_max) {
 8007be4:	b480      	push	{r7}
 8007be6:	b087      	sub	sp, #28
 8007be8:	af00      	add	r7, sp, #0
 8007bea:	ed87 0a05 	vstr	s0, [r7, #20]
 8007bee:	edc7 0a04 	vstr	s1, [r7, #16]
 8007bf2:	ed87 1a03 	vstr	s2, [r7, #12]
 8007bf6:	edc7 1a02 	vstr	s3, [r7, #8]
 8007bfa:	ed87 2a01 	vstr	s4, [r7, #4]
	return (x - in_min) * (out_max - out_min) / (in_max - in_min) + out_min;
 8007bfe:	ed97 7a05 	vldr	s14, [r7, #20]
 8007c02:	edd7 7a04 	vldr	s15, [r7, #16]
 8007c06:	ee37 7a67 	vsub.f32	s14, s14, s15
 8007c0a:	edd7 6a01 	vldr	s13, [r7, #4]
 8007c0e:	edd7 7a02 	vldr	s15, [r7, #8]
 8007c12:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8007c16:	ee67 6a27 	vmul.f32	s13, s14, s15
 8007c1a:	ed97 7a03 	vldr	s14, [r7, #12]
 8007c1e:	edd7 7a04 	vldr	s15, [r7, #16]
 8007c22:	ee77 7a67 	vsub.f32	s15, s14, s15
 8007c26:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8007c2a:	edd7 7a02 	vldr	s15, [r7, #8]
 8007c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
}
 8007c32:	eeb0 0a67 	vmov.f32	s0, s15
 8007c36:	371c      	adds	r7, #28
 8007c38:	46bd      	mov	sp, r7
 8007c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c3e:	4770      	bx	lr

08007c40 <StartLCDTask>:
 * @param  argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartLCDTask */
void StartLCDTask(void *argument)
{
 8007c40:	b580      	push	{r7, lr}
 8007c42:	b096      	sub	sp, #88	; 0x58
 8007c44:	af04      	add	r7, sp, #16
 8007c46:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
	/* Infinite loop */
	uint8_t FRAME_ID = 0;
 8007c48:	2300      	movs	r3, #0
 8007c4a:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
	uint8_t SCREEN_ID = 0;
 8007c4e:	2300      	movs	r3, #0
 8007c50:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
	for (;;) {
		// Read the LCD touch
		TSC2046_GetTouchData(&lcd_spi);
 8007c54:	48bd      	ldr	r0, [pc, #756]	; (8007f4c <StartLCDTask+0x30c>)
 8007c56:	f7fa fdcf 	bl	80027f8 <TSC2046_GetTouchData>
		uint8_t isPressed = lcd_spi.myTsData.isPressed;
 8007c5a:	4bbc      	ldr	r3, [pc, #752]	; (8007f4c <StartLCDTask+0x30c>)
 8007c5c:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8007c60:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
		uint16_t X = lcd_spi.myTsData.X;
 8007c64:	4bb9      	ldr	r3, [pc, #740]	; (8007f4c <StartLCDTask+0x30c>)
 8007c66:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8007c68:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
		uint16_t Y = lcd_spi.myTsData.Y;
 8007c6c:	4bb7      	ldr	r3, [pc, #732]	; (8007f4c <StartLCDTask+0x30c>)
 8007c6e:	8f1b      	ldrh	r3, [r3, #56]	; 0x38
 8007c70:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
		if (isPressed == true) {
 8007c74:	f897 3045 	ldrb.w	r3, [r7, #69]	; 0x45
 8007c78:	2b01      	cmp	r3, #1
 8007c7a:	f040 822a 	bne.w	80080d2 <StartLCDTask+0x492>
			// Check which button we are pressing on
			if (X >= 8 && X <= 37 && Y >= 8 && Y <= 37) {
 8007c7e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007c82:	2b07      	cmp	r3, #7
 8007c84:	d93e      	bls.n	8007d04 <StartLCDTask+0xc4>
 8007c86:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007c8a:	2b25      	cmp	r3, #37	; 0x25
 8007c8c:	d83a      	bhi.n	8007d04 <StartLCDTask+0xc4>
 8007c8e:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007c92:	2b07      	cmp	r3, #7
 8007c94:	d936      	bls.n	8007d04 <StartLCDTask+0xc4>
 8007c96:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007c9a:	2b25      	cmp	r3, #37	; 0x25
 8007c9c:	d832      	bhi.n	8007d04 <StartLCDTask+0xc4>
				if(MRAC_FRAME == FRAME_ID){
 8007c9e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007ca2:	2b00      	cmp	r3, #0
 8007ca4:	d11e      	bne.n	8007ce4 <StartLCDTask+0xa4>
					// MRAC gain
					bool decimalbutton_show = true;
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
					bool minusbutton_show = false;
 8007cac:	2300      	movs	r3, #0
 8007cae:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
					show_num_pad_frame(&lcd_spi, decimalbutton_show, minusbutton_show, &mrac_gain, "Set MRAC gain");
 8007cb2:	f897 2034 	ldrb.w	r2, [r7, #52]	; 0x34
 8007cb6:	f897 1035 	ldrb.w	r1, [r7, #53]	; 0x35
 8007cba:	4ba5      	ldr	r3, [pc, #660]	; (8007f50 <StartLCDTask+0x310>)
 8007cbc:	9300      	str	r3, [sp, #0]
 8007cbe:	4ba5      	ldr	r3, [pc, #660]	; (8007f54 <StartLCDTask+0x314>)
 8007cc0:	48a2      	ldr	r0, [pc, #648]	; (8007f4c <StartLCDTask+0x30c>)
 8007cc2:	f7fb fee7 	bl	8003a94 <show_num_pad_frame>
					bool update_main_frame = true;
 8007cc6:	2301      	movs	r3, #1
 8007cc8:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
					show_main_frame_mrac(&lcd_spi, closedloop_on, update_main_frame);
 8007ccc:	4ba2      	ldr	r3, [pc, #648]	; (8007f58 <StartLCDTask+0x318>)
 8007cce:	781b      	ldrb	r3, [r3, #0]
 8007cd0:	f897 2033 	ldrb.w	r2, [r7, #51]	; 0x33
 8007cd4:	4619      	mov	r1, r3
 8007cd6:	489d      	ldr	r0, [pc, #628]	; (8007f4c <StartLCDTask+0x30c>)
 8007cd8:	f7fa fe1a 	bl	8002910 <show_main_frame_mrac>
					SCREEN_ID = PLOT;
 8007cdc:	2300      	movs	r3, #0
 8007cde:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				if(MRAC_FRAME == FRAME_ID){
 8007ce2:	e282      	b.n	80081ea <StartLCDTask+0x5aa>
				}else if(J1939_FRAME == FRAME_ID){
 8007ce4:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007ce8:	2b01      	cmp	r3, #1
 8007cea:	f040 827e 	bne.w	80081ea <StartLCDTask+0x5aa>
					// Show address
					show_j1939_CA_names_frame(&lcd_spi, j1939.CA, j1939.SA_ACU);
 8007cee:	4b9b      	ldr	r3, [pc, #620]	; (8007f5c <StartLCDTask+0x31c>)
 8007cf0:	781b      	ldrb	r3, [r3, #0]
 8007cf2:	461a      	mov	r2, r3
 8007cf4:	499a      	ldr	r1, [pc, #616]	; (8007f60 <StartLCDTask+0x320>)
 8007cf6:	4895      	ldr	r0, [pc, #596]	; (8007f4c <StartLCDTask+0x30c>)
 8007cf8:	f7fb f8b8 	bl	8002e6c <show_j1939_CA_names_frame>
					SCREEN_ID = ADDRESS;
 8007cfc:	2301      	movs	r3, #1
 8007cfe:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				if(MRAC_FRAME == FRAME_ID){
 8007d02:	e272      	b.n	80081ea <StartLCDTask+0x5aa>
				}

			} else if (X >= 8 && X <= 37 && Y >= 55 && Y <= 94) {
 8007d04:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007d08:	2b07      	cmp	r3, #7
 8007d0a:	d93e      	bls.n	8007d8a <StartLCDTask+0x14a>
 8007d0c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007d10:	2b25      	cmp	r3, #37	; 0x25
 8007d12:	d83a      	bhi.n	8007d8a <StartLCDTask+0x14a>
 8007d14:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007d18:	2b36      	cmp	r3, #54	; 0x36
 8007d1a:	d936      	bls.n	8007d8a <StartLCDTask+0x14a>
 8007d1c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007d20:	2b5e      	cmp	r3, #94	; 0x5e
 8007d22:	d832      	bhi.n	8007d8a <StartLCDTask+0x14a>
				if(MRAC_FRAME == FRAME_ID){
 8007d24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d11e      	bne.n	8007d6a <StartLCDTask+0x12a>
					// Set MRAC saturation
					bool decimalbutton_show = false;
 8007d2c:	2300      	movs	r3, #0
 8007d2e:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
					bool minusbutton_show = false;
 8007d32:	2300      	movs	r3, #0
 8007d34:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
					show_num_pad_frame(&lcd_spi, decimalbutton_show, minusbutton_show, &mrac_saturation, "Set MRAC saturation");
 8007d38:	f897 2031 	ldrb.w	r2, [r7, #49]	; 0x31
 8007d3c:	f897 1032 	ldrb.w	r1, [r7, #50]	; 0x32
 8007d40:	4b88      	ldr	r3, [pc, #544]	; (8007f64 <StartLCDTask+0x324>)
 8007d42:	9300      	str	r3, [sp, #0]
 8007d44:	4b88      	ldr	r3, [pc, #544]	; (8007f68 <StartLCDTask+0x328>)
 8007d46:	4881      	ldr	r0, [pc, #516]	; (8007f4c <StartLCDTask+0x30c>)
 8007d48:	f7fb fea4 	bl	8003a94 <show_num_pad_frame>
					bool update_main_frame = true;
 8007d4c:	2301      	movs	r3, #1
 8007d4e:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
					show_main_frame_mrac(&lcd_spi, closedloop_on, update_main_frame);
 8007d52:	4b81      	ldr	r3, [pc, #516]	; (8007f58 <StartLCDTask+0x318>)
 8007d54:	781b      	ldrb	r3, [r3, #0]
 8007d56:	f897 2030 	ldrb.w	r2, [r7, #48]	; 0x30
 8007d5a:	4619      	mov	r1, r3
 8007d5c:	487b      	ldr	r0, [pc, #492]	; (8007f4c <StartLCDTask+0x30c>)
 8007d5e:	f7fa fdd7 	bl	8002910 <show_main_frame_mrac>
					SCREEN_ID = PLOT;
 8007d62:	2300      	movs	r3, #0
 8007d64:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				if(MRAC_FRAME == FRAME_ID){
 8007d68:	e241      	b.n	80081ee <StartLCDTask+0x5ae>
				}else if(J1939_FRAME == FRAME_ID){
 8007d6a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007d6e:	2b01      	cmp	r3, #1
 8007d70:	f040 823d 	bne.w	80081ee <StartLCDTask+0x5ae>
					// Set configuration
					show_j1939_configurations_frame(&lcd_spi, j1939.EEPROM_values, j1939.DM15_Status);
 8007d74:	4b79      	ldr	r3, [pc, #484]	; (8007f5c <StartLCDTask+0x31c>)
 8007d76:	7d9b      	ldrb	r3, [r3, #22]
 8007d78:	461a      	mov	r2, r3
 8007d7a:	497c      	ldr	r1, [pc, #496]	; (8007f6c <StartLCDTask+0x32c>)
 8007d7c:	4873      	ldr	r0, [pc, #460]	; (8007f4c <StartLCDTask+0x30c>)
 8007d7e:	f7fb fda7 	bl	80038d0 <show_j1939_configurations_frame>
					SCREEN_ID = CONFIGURATION;
 8007d82:	2302      	movs	r3, #2
 8007d84:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				if(MRAC_FRAME == FRAME_ID){
 8007d88:	e231      	b.n	80081ee <StartLCDTask+0x5ae>
				}

			} else if (X >= 8 && X <= 37 && Y >= 100 && Y <= 139) {
 8007d8a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007d8e:	2b07      	cmp	r3, #7
 8007d90:	d93b      	bls.n	8007e0a <StartLCDTask+0x1ca>
 8007d92:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007d96:	2b25      	cmp	r3, #37	; 0x25
 8007d98:	d837      	bhi.n	8007e0a <StartLCDTask+0x1ca>
 8007d9a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007d9e:	2b63      	cmp	r3, #99	; 0x63
 8007da0:	d933      	bls.n	8007e0a <StartLCDTask+0x1ca>
 8007da2:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007da6:	2b8b      	cmp	r3, #139	; 0x8b
 8007da8:	d82f      	bhi.n	8007e0a <StartLCDTask+0x1ca>
				if(MRAC_FRAME == FRAME_ID){
 8007daa:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007dae:	2b00      	cmp	r3, #0
 8007db0:	d11e      	bne.n	8007df0 <StartLCDTask+0x1b0>
					// Set valve delay
					bool decimalbutton_show = false;
 8007db2:	2300      	movs	r3, #0
 8007db4:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
					bool minusbutton_show = false;
 8007db8:	2300      	movs	r3, #0
 8007dba:	f887 302e 	strb.w	r3, [r7, #46]	; 0x2e
					show_num_pad_frame(&lcd_spi, decimalbutton_show, minusbutton_show, &valve_delay, "Set valve delay");
 8007dbe:	f897 202e 	ldrb.w	r2, [r7, #46]	; 0x2e
 8007dc2:	f897 102f 	ldrb.w	r1, [r7, #47]	; 0x2f
 8007dc6:	4b6a      	ldr	r3, [pc, #424]	; (8007f70 <StartLCDTask+0x330>)
 8007dc8:	9300      	str	r3, [sp, #0]
 8007dca:	4b6a      	ldr	r3, [pc, #424]	; (8007f74 <StartLCDTask+0x334>)
 8007dcc:	485f      	ldr	r0, [pc, #380]	; (8007f4c <StartLCDTask+0x30c>)
 8007dce:	f7fb fe61 	bl	8003a94 <show_num_pad_frame>
					bool update_main_frame = true;
 8007dd2:	2301      	movs	r3, #1
 8007dd4:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
					show_main_frame_mrac(&lcd_spi, closedloop_on, update_main_frame);
 8007dd8:	4b5f      	ldr	r3, [pc, #380]	; (8007f58 <StartLCDTask+0x318>)
 8007dda:	781b      	ldrb	r3, [r3, #0]
 8007ddc:	f897 202d 	ldrb.w	r2, [r7, #45]	; 0x2d
 8007de0:	4619      	mov	r1, r3
 8007de2:	485a      	ldr	r0, [pc, #360]	; (8007f4c <StartLCDTask+0x30c>)
 8007de4:	f7fa fd94 	bl	8002910 <show_main_frame_mrac>
					SCREEN_ID = PLOT;
 8007de8:	2300      	movs	r3, #0
 8007dea:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				if(MRAC_FRAME == FRAME_ID){
 8007dee:	e200      	b.n	80081f2 <StartLCDTask+0x5b2>
				}else if(J1939_FRAME == FRAME_ID){
 8007df0:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007df4:	2b01      	cmp	r3, #1
 8007df6:	f040 81fc 	bne.w	80081f2 <StartLCDTask+0x5b2>
					// Read error DM1 messages
					show_j1939_DM1_error_messages_frame(&lcd_spi, j1939.DM1_Messages_Binary);
 8007dfa:	495f      	ldr	r1, [pc, #380]	; (8007f78 <StartLCDTask+0x338>)
 8007dfc:	4853      	ldr	r0, [pc, #332]	; (8007f4c <StartLCDTask+0x30c>)
 8007dfe:	f7fa ff23 	bl	8002c48 <show_j1939_DM1_error_messages_frame>
					SCREEN_ID = DM1_MESSAGES;
 8007e02:	2303      	movs	r3, #3
 8007e04:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				if(MRAC_FRAME == FRAME_ID){
 8007e08:	e1f3      	b.n	80081f2 <StartLCDTask+0x5b2>
				}
			} else if (X >= 8 && X <= 37 && Y >= 146 && Y <= 185) {
 8007e0a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007e0e:	2b07      	cmp	r3, #7
 8007e10:	d964      	bls.n	8007edc <StartLCDTask+0x29c>
 8007e12:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007e16:	2b25      	cmp	r3, #37	; 0x25
 8007e18:	d860      	bhi.n	8007edc <StartLCDTask+0x29c>
 8007e1a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007e1e:	2b91      	cmp	r3, #145	; 0x91
 8007e20:	d95c      	bls.n	8007edc <StartLCDTask+0x29c>
 8007e22:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007e26:	2bb9      	cmp	r3, #185	; 0xb9
 8007e28:	d858      	bhi.n	8007edc <StartLCDTask+0x29c>
				if(MRAC_FRAME == FRAME_ID){
 8007e2a:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d11d      	bne.n	8007e6e <StartLCDTask+0x22e>
					// Open loop or closed loop
					if (closedloop_on == true)
 8007e32:	4b49      	ldr	r3, [pc, #292]	; (8007f58 <StartLCDTask+0x318>)
 8007e34:	781b      	ldrb	r3, [r3, #0]
 8007e36:	2b00      	cmp	r3, #0
 8007e38:	d003      	beq.n	8007e42 <StartLCDTask+0x202>
						closedloop_on = false;
 8007e3a:	4b47      	ldr	r3, [pc, #284]	; (8007f58 <StartLCDTask+0x318>)
 8007e3c:	2200      	movs	r2, #0
 8007e3e:	701a      	strb	r2, [r3, #0]
 8007e40:	e002      	b.n	8007e48 <StartLCDTask+0x208>
					else
						closedloop_on = true;
 8007e42:	4b45      	ldr	r3, [pc, #276]	; (8007f58 <StartLCDTask+0x318>)
 8007e44:	2201      	movs	r2, #1
 8007e46:	701a      	strb	r2, [r3, #0]
					bool update_main_frame = false;
 8007e48:	2300      	movs	r3, #0
 8007e4a:	f887 302a 	strb.w	r3, [r7, #42]	; 0x2a
					osDelay(300); // Prevent double click
 8007e4e:	f44f 7096 	mov.w	r0, #300	; 0x12c
 8007e52:	f005 f8f9 	bl	800d048 <osDelay>
					show_main_frame_mrac(&lcd_spi, closedloop_on, update_main_frame);
 8007e56:	4b40      	ldr	r3, [pc, #256]	; (8007f58 <StartLCDTask+0x318>)
 8007e58:	781b      	ldrb	r3, [r3, #0]
 8007e5a:	f897 202a 	ldrb.w	r2, [r7, #42]	; 0x2a
 8007e5e:	4619      	mov	r1, r3
 8007e60:	483a      	ldr	r0, [pc, #232]	; (8007f4c <StartLCDTask+0x30c>)
 8007e62:	f7fa fd55 	bl	8002910 <show_main_frame_mrac>
					SCREEN_ID = PLOT;
 8007e66:	2300      	movs	r3, #0
 8007e68:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
				if(MRAC_FRAME == FRAME_ID){
 8007e6c:	e1c3      	b.n	80081f6 <StartLCDTask+0x5b6>
				}else if(J1939_FRAME == FRAME_ID){
 8007e6e:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007e72:	2b01      	cmp	r3, #1
 8007e74:	f040 81bf 	bne.w	80081f6 <StartLCDTask+0x5b6>
					// Question dialog if you want to save the user settings
					uint8_t choice = show_question_save_settings_dialog(&lcd_spi); // Return 1 as YES and 0 as NO
 8007e78:	4834      	ldr	r0, [pc, #208]	; (8007f4c <StartLCDTask+0x30c>)
 8007e7a:	f7fc fa37 	bl	80042ec <show_question_save_settings_dialog>
 8007e7e:	4603      	mov	r3, r0
 8007e80:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
					if (choice == 1) {
 8007e84:	f897 302c 	ldrb.w	r3, [r7, #44]	; 0x2c
 8007e88:	2b01      	cmp	r3, #1
 8007e8a:	d11d      	bne.n	8007ec8 <StartLCDTask+0x288>
						// Save the touch calibration and the user settings
						float wrBuf[7] = { lcd_spi.myTS_Calibrate.Scale_X, lcd_spi.myTS_Calibrate.Scale_Y, lcd_spi.myTS_Calibrate.Bias_X, lcd_spi.myTS_Calibrate.Bias_Y, mrac_gain, mrac_saturation, valve_delay };
 8007e8c:	4b2f      	ldr	r3, [pc, #188]	; (8007f4c <StartLCDTask+0x30c>)
 8007e8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007e90:	60bb      	str	r3, [r7, #8]
 8007e92:	4b2e      	ldr	r3, [pc, #184]	; (8007f4c <StartLCDTask+0x30c>)
 8007e94:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e96:	60fb      	str	r3, [r7, #12]
 8007e98:	4b2c      	ldr	r3, [pc, #176]	; (8007f4c <StartLCDTask+0x30c>)
 8007e9a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007e9c:	613b      	str	r3, [r7, #16]
 8007e9e:	4b2b      	ldr	r3, [pc, #172]	; (8007f4c <StartLCDTask+0x30c>)
 8007ea0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ea2:	617b      	str	r3, [r7, #20]
 8007ea4:	4b2b      	ldr	r3, [pc, #172]	; (8007f54 <StartLCDTask+0x314>)
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	61bb      	str	r3, [r7, #24]
 8007eaa:	4b2f      	ldr	r3, [pc, #188]	; (8007f68 <StartLCDTask+0x328>)
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	61fb      	str	r3, [r7, #28]
 8007eb0:	4b30      	ldr	r3, [pc, #192]	; (8007f74 <StartLCDTask+0x334>)
 8007eb2:	681b      	ldr	r3, [r3, #0]
 8007eb4:	623b      	str	r3, [r7, #32]
						FlashEraseSector(); // Must clear first
 8007eb6:	f7f9 fa67 	bl	8001388 <FlashEraseSector>
						FlashWriteN(0, wrBuf, 7, DATA_TYPE_FLOAT);
 8007eba:	f107 0108 	add.w	r1, r7, #8
 8007ebe:	2303      	movs	r3, #3
 8007ec0:	2207      	movs	r2, #7
 8007ec2:	2000      	movs	r0, #0
 8007ec4:	f7f9 fa86 	bl	80013d4 <FlashWriteN>
					}

					// Restore to normal again
					bool update_main_frame = true;
 8007ec8:	2301      	movs	r3, #1
 8007eca:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
					show_j1939_main_frame(&lcd_spi, update_main_frame);
 8007ece:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 8007ed2:	4619      	mov	r1, r3
 8007ed4:	481d      	ldr	r0, [pc, #116]	; (8007f4c <StartLCDTask+0x30c>)
 8007ed6:	f7fa fdf9 	bl	8002acc <show_j1939_main_frame>
				if(MRAC_FRAME == FRAME_ID){
 8007eda:	e18c      	b.n	80081f6 <StartLCDTask+0x5b6>
					// Same screen ID as before
				}
			} else if (X >= 8 && X <= 37 && Y >= 193 && Y <= 232) {
 8007edc:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007ee0:	2b07      	cmp	r3, #7
 8007ee2:	d94b      	bls.n	8007f7c <StartLCDTask+0x33c>
 8007ee4:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007ee8:	2b25      	cmp	r3, #37	; 0x25
 8007eea:	d847      	bhi.n	8007f7c <StartLCDTask+0x33c>
 8007eec:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007ef0:	2bc0      	cmp	r3, #192	; 0xc0
 8007ef2:	d943      	bls.n	8007f7c <StartLCDTask+0x33c>
 8007ef4:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007ef8:	2be8      	cmp	r3, #232	; 0xe8
 8007efa:	d83f      	bhi.n	8007f7c <StartLCDTask+0x33c>
				// Change screen
				bool update_main_frame = true;
 8007efc:	2301      	movs	r3, #1
 8007efe:	f887 3029 	strb.w	r3, [r7, #41]	; 0x29
				if(MRAC_FRAME == FRAME_ID){
 8007f02:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007f06:	2b00      	cmp	r3, #0
 8007f08:	d10c      	bne.n	8007f24 <StartLCDTask+0x2e4>
					FRAME_ID = J1939_FRAME;
 8007f0a:	2301      	movs	r3, #1
 8007f0c:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					SCREEN_ID = ADDRESS;
 8007f10:	2301      	movs	r3, #1
 8007f12:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					show_j1939_main_frame(&lcd_spi, update_main_frame);
 8007f16:	f897 3029 	ldrb.w	r3, [r7, #41]	; 0x29
 8007f1a:	4619      	mov	r1, r3
 8007f1c:	480b      	ldr	r0, [pc, #44]	; (8007f4c <StartLCDTask+0x30c>)
 8007f1e:	f7fa fdd5 	bl	8002acc <show_j1939_main_frame>
			} else if (X >= 8 && X <= 37 && Y >= 193 && Y <= 232) {
 8007f22:	e16a      	b.n	80081fa <StartLCDTask+0x5ba>
				}else if(J1939_FRAME == FRAME_ID){
 8007f24:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007f28:	2b01      	cmp	r3, #1
 8007f2a:	f040 8166 	bne.w	80081fa <StartLCDTask+0x5ba>
					FRAME_ID = MRAC_FRAME;
 8007f2e:	2300      	movs	r3, #0
 8007f30:	f887 3047 	strb.w	r3, [r7, #71]	; 0x47
					SCREEN_ID = PLOT;
 8007f34:	2300      	movs	r3, #0
 8007f36:	f887 3046 	strb.w	r3, [r7, #70]	; 0x46
					show_main_frame_mrac(&lcd_spi, closedloop_on, update_main_frame);
 8007f3a:	4b07      	ldr	r3, [pc, #28]	; (8007f58 <StartLCDTask+0x318>)
 8007f3c:	781b      	ldrb	r3, [r3, #0]
 8007f3e:	f897 2029 	ldrb.w	r2, [r7, #41]	; 0x29
 8007f42:	4619      	mov	r1, r3
 8007f44:	4801      	ldr	r0, [pc, #4]	; (8007f4c <StartLCDTask+0x30c>)
 8007f46:	f7fa fce3 	bl	8002910 <show_main_frame_mrac>
			} else if (X >= 8 && X <= 37 && Y >= 193 && Y <= 232) {
 8007f4a:	e156      	b.n	80081fa <StartLCDTask+0x5ba>
 8007f4c:	20005458 	.word	0x20005458
 8007f50:	08011aa0 	.word	0x08011aa0
 8007f54:	2000557c 	.word	0x2000557c
 8007f58:	20000000 	.word	0x20000000
 8007f5c:	20005554 	.word	0x20005554
 8007f60:	20005556 	.word	0x20005556
 8007f64:	08011ab0 	.word	0x08011ab0
 8007f68:	200056e0 	.word	0x200056e0
 8007f6c:	20005574 	.word	0x20005574
 8007f70:	08011ac4 	.word	0x08011ac4
 8007f74:	2000567c 	.word	0x2000567c
 8007f78:	2000555e 	.word	0x2000555e
				}
			} else if(X >= 100 && X <= 160 && Y >= 170 && Y <= 197){
 8007f7c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007f80:	2b63      	cmp	r3, #99	; 0x63
 8007f82:	d95b      	bls.n	800803c <StartLCDTask+0x3fc>
 8007f84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8007f88:	2ba0      	cmp	r3, #160	; 0xa0
 8007f8a:	d857      	bhi.n	800803c <StartLCDTask+0x3fc>
 8007f8c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007f90:	2ba9      	cmp	r3, #169	; 0xa9
 8007f92:	d953      	bls.n	800803c <StartLCDTask+0x3fc>
 8007f94:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8007f98:	2bc5      	cmp	r3, #197	; 0xc5
 8007f9a:	d84f      	bhi.n	800803c <StartLCDTask+0x3fc>
				// We pressed a button - Change button or Reset for the J1939_FRAME
				if(J1939_FRAME == FRAME_ID){
 8007f9c:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 8007fa0:	2b01      	cmp	r3, #1
 8007fa2:	f040 812c 	bne.w	80081fe <StartLCDTask+0x5be>
					if(ADDRESS == SCREEN_ID){
 8007fa6:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007faa:	2b01      	cmp	r3, #1
 8007fac:	d119      	bne.n	8007fe2 <StartLCDTask+0x3a2>
						// Change button pressed
						rename_CA_SA = show_j1939_set_CA_names_numpad(&lcd_spi, j1939.CA, &j1939.SA_ACU); // Set the CA names and source address
 8007fae:	4a96      	ldr	r2, [pc, #600]	; (8008208 <StartLCDTask+0x5c8>)
 8007fb0:	4996      	ldr	r1, [pc, #600]	; (800820c <StartLCDTask+0x5cc>)
 8007fb2:	4897      	ldr	r0, [pc, #604]	; (8008210 <StartLCDTask+0x5d0>)
 8007fb4:	f7fb f8b4 	bl	8003120 <show_j1939_set_CA_names_numpad>
 8007fb8:	4603      	mov	r3, r0
 8007fba:	461a      	mov	r2, r3
 8007fbc:	4b95      	ldr	r3, [pc, #596]	; (8008214 <StartLCDTask+0x5d4>)
 8007fbe:	701a      	strb	r2, [r3, #0]
						bool update_main_frame = true;
 8007fc0:	2301      	movs	r3, #1
 8007fc2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
						show_j1939_main_frame(&lcd_spi, update_main_frame);
 8007fc6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8007fca:	4619      	mov	r1, r3
 8007fcc:	4890      	ldr	r0, [pc, #576]	; (8008210 <StartLCDTask+0x5d0>)
 8007fce:	f7fa fd7d 	bl	8002acc <show_j1939_main_frame>
						show_j1939_CA_names_frame(&lcd_spi, j1939.CA, j1939.SA_ACU);
 8007fd2:	4b8d      	ldr	r3, [pc, #564]	; (8008208 <StartLCDTask+0x5c8>)
 8007fd4:	781b      	ldrb	r3, [r3, #0]
 8007fd6:	461a      	mov	r2, r3
 8007fd8:	498c      	ldr	r1, [pc, #560]	; (800820c <StartLCDTask+0x5cc>)
 8007fda:	488d      	ldr	r0, [pc, #564]	; (8008210 <StartLCDTask+0x5d0>)
 8007fdc:	f7fa ff46 	bl	8002e6c <show_j1939_CA_names_frame>
				if(J1939_FRAME == FRAME_ID){
 8007fe0:	e10d      	b.n	80081fe <StartLCDTask+0x5be>
					}else if(DM1_MESSAGES == SCREEN_ID){
 8007fe2:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007fe6:	2b03      	cmp	r3, #3
 8007fe8:	d107      	bne.n	8007ffa <StartLCDTask+0x3ba>
						// Reset button pressed
						reset_DM1_messages = true; // This will cause so we delete j1939.DM1_Messages_Binary array directly in other thread below
 8007fea:	4b8b      	ldr	r3, [pc, #556]	; (8008218 <StartLCDTask+0x5d8>)
 8007fec:	2201      	movs	r2, #1
 8007fee:	701a      	strb	r2, [r3, #0]
						show_j1939_DM1_error_messages_frame(&lcd_spi, j1939.DM1_Messages_Binary);
 8007ff0:	498a      	ldr	r1, [pc, #552]	; (800821c <StartLCDTask+0x5dc>)
 8007ff2:	4887      	ldr	r0, [pc, #540]	; (8008210 <StartLCDTask+0x5d0>)
 8007ff4:	f7fa fe28 	bl	8002c48 <show_j1939_DM1_error_messages_frame>
				if(J1939_FRAME == FRAME_ID){
 8007ff8:	e101      	b.n	80081fe <StartLCDTask+0x5be>
					}else if(CONFIGURATION == SCREEN_ID){
 8007ffa:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8007ffe:	2b02      	cmp	r3, #2
 8008000:	f040 80fd 	bne.w	80081fe <StartLCDTask+0x5be>
						// Change button pressed
						send_a_configuration_request_write = show_j1939_set_configurations_numpad(&lcd_spi, j1939.EEPROM_values, j1939.DM15_Status);
 8008004:	4b80      	ldr	r3, [pc, #512]	; (8008208 <StartLCDTask+0x5c8>)
 8008006:	7d9b      	ldrb	r3, [r3, #22]
 8008008:	461a      	mov	r2, r3
 800800a:	4985      	ldr	r1, [pc, #532]	; (8008220 <StartLCDTask+0x5e0>)
 800800c:	4880      	ldr	r0, [pc, #512]	; (8008210 <StartLCDTask+0x5d0>)
 800800e:	f7fb fb67 	bl	80036e0 <show_j1939_set_configurations_numpad>
 8008012:	4603      	mov	r3, r0
 8008014:	461a      	mov	r2, r3
 8008016:	4b83      	ldr	r3, [pc, #524]	; (8008224 <StartLCDTask+0x5e4>)
 8008018:	701a      	strb	r2, [r3, #0]
						bool update_main_frame = true;
 800801a:	2301      	movs	r3, #1
 800801c:	f887 3028 	strb.w	r3, [r7, #40]	; 0x28
						show_j1939_main_frame(&lcd_spi, update_main_frame);
 8008020:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8008024:	4619      	mov	r1, r3
 8008026:	487a      	ldr	r0, [pc, #488]	; (8008210 <StartLCDTask+0x5d0>)
 8008028:	f7fa fd50 	bl	8002acc <show_j1939_main_frame>
						show_j1939_configurations_frame(&lcd_spi, j1939.EEPROM_values, j1939.DM15_Status);
 800802c:	4b76      	ldr	r3, [pc, #472]	; (8008208 <StartLCDTask+0x5c8>)
 800802e:	7d9b      	ldrb	r3, [r3, #22]
 8008030:	461a      	mov	r2, r3
 8008032:	497b      	ldr	r1, [pc, #492]	; (8008220 <StartLCDTask+0x5e0>)
 8008034:	4876      	ldr	r0, [pc, #472]	; (8008210 <StartLCDTask+0x5d0>)
 8008036:	f7fb fc4b 	bl	80038d0 <show_j1939_configurations_frame>
				if(J1939_FRAME == FRAME_ID){
 800803a:	e0e0      	b.n	80081fe <StartLCDTask+0x5be>
					}
				}
			} else if(X >= 215 && X <= 277 && Y >= 170 && Y <= 197){
 800803c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8008040:	2bd6      	cmp	r3, #214	; 0xd6
 8008042:	f240 80dd 	bls.w	8008200 <StartLCDTask+0x5c0>
 8008046:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 800804a:	f5b3 7f8b 	cmp.w	r3, #278	; 0x116
 800804e:	f080 80d7 	bcs.w	8008200 <StartLCDTask+0x5c0>
 8008052:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008056:	2ba9      	cmp	r3, #169	; 0xa9
 8008058:	f240 80d2 	bls.w	8008200 <StartLCDTask+0x5c0>
 800805c:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8008060:	2bc5      	cmp	r3, #197	; 0xc5
 8008062:	f200 80cd 	bhi.w	8008200 <StartLCDTask+0x5c0>
				// We pressed a button - Request button for the J1939_FRAME
				if(J1939_FRAME == FRAME_ID){
 8008066:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 800806a:	2b01      	cmp	r3, #1
 800806c:	f040 80c8 	bne.w	8008200 <StartLCDTask+0x5c0>
					if(ADDRESS == SCREEN_ID){
 8008070:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 8008074:	2b01      	cmp	r3, #1
 8008076:	d113      	bne.n	80080a0 <StartLCDTask+0x460>
						// Pressed the request button
						send_a_claim_address_request = true; // Claim for a address by letting the other thread do the request first
 8008078:	4b6b      	ldr	r3, [pc, #428]	; (8008228 <StartLCDTask+0x5e8>)
 800807a:	2201      	movs	r2, #1
 800807c:	701a      	strb	r2, [r3, #0]
						bool update_main_frame = true;
 800807e:	2301      	movs	r3, #1
 8008080:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
						show_j1939_main_frame(&lcd_spi, update_main_frame);
 8008084:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 8008088:	4619      	mov	r1, r3
 800808a:	4861      	ldr	r0, [pc, #388]	; (8008210 <StartLCDTask+0x5d0>)
 800808c:	f7fa fd1e 	bl	8002acc <show_j1939_main_frame>
						show_j1939_CA_names_frame(&lcd_spi, j1939.CA, j1939.SA_ACU);
 8008090:	4b5d      	ldr	r3, [pc, #372]	; (8008208 <StartLCDTask+0x5c8>)
 8008092:	781b      	ldrb	r3, [r3, #0]
 8008094:	461a      	mov	r2, r3
 8008096:	495d      	ldr	r1, [pc, #372]	; (800820c <StartLCDTask+0x5cc>)
 8008098:	485d      	ldr	r0, [pc, #372]	; (8008210 <StartLCDTask+0x5d0>)
 800809a:	f7fa fee7 	bl	8002e6c <show_j1939_CA_names_frame>
 800809e:	e0af      	b.n	8008200 <StartLCDTask+0x5c0>
					}else if(CONFIGURATION == SCREEN_ID){
 80080a0:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80080a4:	2b02      	cmp	r3, #2
 80080a6:	f040 80ab 	bne.w	8008200 <StartLCDTask+0x5c0>
						// Pressed the request button
						send_a_configuration_request_read = true; // Request for a configurations by letting the other thread do the request first
 80080aa:	4b60      	ldr	r3, [pc, #384]	; (800822c <StartLCDTask+0x5ec>)
 80080ac:	2201      	movs	r2, #1
 80080ae:	701a      	strb	r2, [r3, #0]
						bool update_main_frame = true;
 80080b0:	2301      	movs	r3, #1
 80080b2:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
						show_j1939_main_frame(&lcd_spi, update_main_frame);
 80080b6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80080ba:	4619      	mov	r1, r3
 80080bc:	4854      	ldr	r0, [pc, #336]	; (8008210 <StartLCDTask+0x5d0>)
 80080be:	f7fa fd05 	bl	8002acc <show_j1939_main_frame>
						show_j1939_configurations_frame(&lcd_spi, j1939.EEPROM_values, j1939.DM15_Status);
 80080c2:	4b51      	ldr	r3, [pc, #324]	; (8008208 <StartLCDTask+0x5c8>)
 80080c4:	7d9b      	ldrb	r3, [r3, #22]
 80080c6:	461a      	mov	r2, r3
 80080c8:	4955      	ldr	r1, [pc, #340]	; (8008220 <StartLCDTask+0x5e0>)
 80080ca:	4851      	ldr	r0, [pc, #324]	; (8008210 <StartLCDTask+0x5d0>)
 80080cc:	f7fb fc00 	bl	80038d0 <show_j1939_configurations_frame>
 80080d0:	e096      	b.n	8008200 <StartLCDTask+0x5c0>
			char coordinates[40];
			sprintf(coordinates, "X=%d, Y=%d", X, Y);
			ILI9341_printText(&lcd_spi, coordinates, 100, 50, COLOR_RED, COLOR_NAVY, 1);
			*/
		} else {
			if(MRAC_FRAME == FRAME_ID){
 80080d2:	f897 3047 	ldrb.w	r3, [r7, #71]	; 0x47
 80080d6:	2b00      	cmp	r3, #0
 80080d8:	f040 8092 	bne.w	8008200 <StartLCDTask+0x5c0>
				if(PLOT == SCREEN_ID){
 80080dc:	f897 3046 	ldrb.w	r3, [r7, #70]	; 0x46
 80080e0:	2b00      	cmp	r3, #0
 80080e2:	f040 808d 	bne.w	8008200 <StartLCDTask+0x5c0>
					// Maximum plot can show is value 203
					uint16_t new_output_uint = map(new_output_float, -250, 250, 0, 203);
 80080e6:	4b52      	ldr	r3, [pc, #328]	; (8008230 <StartLCDTask+0x5f0>)
 80080e8:	edd3 7a00 	vldr	s15, [r3]
 80080ec:	ed9f 2a51 	vldr	s4, [pc, #324]	; 8008234 <StartLCDTask+0x5f4>
 80080f0:	eddf 1a51 	vldr	s3, [pc, #324]	; 8008238 <StartLCDTask+0x5f8>
 80080f4:	ed9f 1a51 	vldr	s2, [pc, #324]	; 800823c <StartLCDTask+0x5fc>
 80080f8:	eddf 0a51 	vldr	s1, [pc, #324]	; 8008240 <StartLCDTask+0x600>
 80080fc:	eeb0 0a67 	vmov.f32	s0, s15
 8008100:	f7ff fd70 	bl	8007be4 <map>
 8008104:	eef0 7a40 	vmov.f32	s15, s0
 8008108:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800810c:	ee17 3a90 	vmov	r3, s15
 8008110:	87fb      	strh	r3, [r7, #62]	; 0x3e
					uint16_t new_input0_uint = map(new_input0_float, -250, 250, 0, 203);
 8008112:	4b4c      	ldr	r3, [pc, #304]	; (8008244 <StartLCDTask+0x604>)
 8008114:	edd3 7a00 	vldr	s15, [r3]
 8008118:	ed9f 2a46 	vldr	s4, [pc, #280]	; 8008234 <StartLCDTask+0x5f4>
 800811c:	eddf 1a46 	vldr	s3, [pc, #280]	; 8008238 <StartLCDTask+0x5f8>
 8008120:	ed9f 1a46 	vldr	s2, [pc, #280]	; 800823c <StartLCDTask+0x5fc>
 8008124:	eddf 0a46 	vldr	s1, [pc, #280]	; 8008240 <StartLCDTask+0x600>
 8008128:	eeb0 0a67 	vmov.f32	s0, s15
 800812c:	f7ff fd5a 	bl	8007be4 <map>
 8008130:	eef0 7a40 	vmov.f32	s15, s0
 8008134:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008138:	ee17 3a90 	vmov	r3, s15
 800813c:	87bb      	strh	r3, [r7, #60]	; 0x3c
					uint16_t new_input1_uint = map(new_input1_float, -250, 250, 0, 203);
 800813e:	4b42      	ldr	r3, [pc, #264]	; (8008248 <StartLCDTask+0x608>)
 8008140:	edd3 7a00 	vldr	s15, [r3]
 8008144:	ed9f 2a3b 	vldr	s4, [pc, #236]	; 8008234 <StartLCDTask+0x5f4>
 8008148:	eddf 1a3b 	vldr	s3, [pc, #236]	; 8008238 <StartLCDTask+0x5f8>
 800814c:	ed9f 1a3b 	vldr	s2, [pc, #236]	; 800823c <StartLCDTask+0x5fc>
 8008150:	eddf 0a3b 	vldr	s1, [pc, #236]	; 8008240 <StartLCDTask+0x600>
 8008154:	eeb0 0a67 	vmov.f32	s0, s15
 8008158:	f7ff fd44 	bl	8007be4 <map>
 800815c:	eef0 7a40 	vmov.f32	s15, s0
 8008160:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008164:	ee17 3a90 	vmov	r3, s15
 8008168:	877b      	strh	r3, [r7, #58]	; 0x3a
					uint16_t new_reference_uint = map(new_reference_float, -250, 250, 0, 203);
 800816a:	4b38      	ldr	r3, [pc, #224]	; (800824c <StartLCDTask+0x60c>)
 800816c:	edd3 7a00 	vldr	s15, [r3]
 8008170:	ed9f 2a30 	vldr	s4, [pc, #192]	; 8008234 <StartLCDTask+0x5f4>
 8008174:	eddf 1a30 	vldr	s3, [pc, #192]	; 8008238 <StartLCDTask+0x5f8>
 8008178:	ed9f 1a30 	vldr	s2, [pc, #192]	; 800823c <StartLCDTask+0x5fc>
 800817c:	eddf 0a30 	vldr	s1, [pc, #192]	; 8008240 <StartLCDTask+0x600>
 8008180:	eeb0 0a67 	vmov.f32	s0, s15
 8008184:	f7ff fd2e 	bl	8007be4 <map>
 8008188:	eef0 7a40 	vmov.f32	s15, s0
 800818c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8008190:	ee17 3a90 	vmov	r3, s15
 8008194:	873b      	strh	r3, [r7, #56]	; 0x38
					bool only_move_array = false;
 8008196:	2300      	movs	r3, #0
 8008198:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
					bool clear_plot = false;
 800819c:	2300      	movs	r3, #0
 800819e:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
					show_plot_frame(&lcd_spi, new_input0_float, new_input1_float, new_output_float, new_reference_float, new_input0_uint, new_input1_uint, new_output_uint, new_reference_uint, only_move_array, clear_plot);
 80081a2:	4b28      	ldr	r3, [pc, #160]	; (8008244 <StartLCDTask+0x604>)
 80081a4:	edd3 7a00 	vldr	s15, [r3]
 80081a8:	4b27      	ldr	r3, [pc, #156]	; (8008248 <StartLCDTask+0x608>)
 80081aa:	ed93 7a00 	vldr	s14, [r3]
 80081ae:	4b20      	ldr	r3, [pc, #128]	; (8008230 <StartLCDTask+0x5f0>)
 80081b0:	edd3 6a00 	vldr	s13, [r3]
 80081b4:	4b25      	ldr	r3, [pc, #148]	; (800824c <StartLCDTask+0x60c>)
 80081b6:	ed93 6a00 	vldr	s12, [r3]
 80081ba:	8ff8      	ldrh	r0, [r7, #62]	; 0x3e
 80081bc:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 80081be:	8fb9      	ldrh	r1, [r7, #60]	; 0x3c
 80081c0:	f897 3036 	ldrb.w	r3, [r7, #54]	; 0x36
 80081c4:	9302      	str	r3, [sp, #8]
 80081c6:	f897 3037 	ldrb.w	r3, [r7, #55]	; 0x37
 80081ca:	9301      	str	r3, [sp, #4]
 80081cc:	8f3b      	ldrh	r3, [r7, #56]	; 0x38
 80081ce:	9300      	str	r3, [sp, #0]
 80081d0:	4603      	mov	r3, r0
 80081d2:	eef0 1a46 	vmov.f32	s3, s12
 80081d6:	eeb0 1a66 	vmov.f32	s2, s13
 80081da:	eef0 0a47 	vmov.f32	s1, s14
 80081de:	eeb0 0a67 	vmov.f32	s0, s15
 80081e2:	480b      	ldr	r0, [pc, #44]	; (8008210 <StartLCDTask+0x5d0>)
 80081e4:	f7fc f912 	bl	800440c <show_plot_frame>
 80081e8:	e00a      	b.n	8008200 <StartLCDTask+0x5c0>
				if(MRAC_FRAME == FRAME_ID){
 80081ea:	bf00      	nop
 80081ec:	e008      	b.n	8008200 <StartLCDTask+0x5c0>
				if(MRAC_FRAME == FRAME_ID){
 80081ee:	bf00      	nop
 80081f0:	e006      	b.n	8008200 <StartLCDTask+0x5c0>
				if(MRAC_FRAME == FRAME_ID){
 80081f2:	bf00      	nop
 80081f4:	e004      	b.n	8008200 <StartLCDTask+0x5c0>
				if(MRAC_FRAME == FRAME_ID){
 80081f6:	bf00      	nop
 80081f8:	e002      	b.n	8008200 <StartLCDTask+0x5c0>
			} else if (X >= 8 && X <= 37 && Y >= 193 && Y <= 232) {
 80081fa:	bf00      	nop
 80081fc:	e000      	b.n	8008200 <StartLCDTask+0x5c0>
				if(J1939_FRAME == FRAME_ID){
 80081fe:	bf00      	nop
				// Add logic here
			}

		}

		osDelay(1);
 8008200:	2001      	movs	r0, #1
 8008202:	f004 ff21 	bl	800d048 <osDelay>
	for (;;) {
 8008206:	e525      	b.n	8007c54 <StartLCDTask+0x14>
 8008208:	20005554 	.word	0x20005554
 800820c:	20005556 	.word	0x20005556
 8008210:	20005458 	.word	0x20005458
 8008214:	20000a74 	.word	0x20000a74
 8008218:	20000a76 	.word	0x20000a76
 800821c:	2000555e 	.word	0x2000555e
 8008220:	20005574 	.word	0x20005574
 8008224:	20000a78 	.word	0x20000a78
 8008228:	20000a75 	.word	0x20000a75
 800822c:	20000a77 	.word	0x20000a77
 8008230:	20005550 	.word	0x20005550
 8008234:	434b0000 	.word	0x434b0000
 8008238:	00000000 	.word	0x00000000
 800823c:	437a0000 	.word	0x437a0000
 8008240:	c37a0000 	.word	0xc37a0000
 8008244:	2000539c 	.word	0x2000539c
 8008248:	200054b0 	.word	0x200054b0
 800824c:	200056d0 	.word	0x200056d0

08008250 <StartControlTask>:
 * @param argument: Not used
 * @retval None
 */
/* USER CODE END Header_StartControlTask */
void StartControlTask(void *argument)
{
 8008250:	b5b0      	push	{r4, r5, r7, lr}
 8008252:	b08c      	sub	sp, #48	; 0x30
 8008254:	af02      	add	r7, sp, #8
 8008256:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN StartControlTask */
	/* Infinite loop */
	float I1[RDIM] = { 0 }; // Integral for MRAC
 8008258:	f04f 0300 	mov.w	r3, #0
 800825c:	623b      	str	r3, [r7, #32]
	float I2[RDIM] = { 0 }; // Integral for MRAC
 800825e:	f04f 0300 	mov.w	r3, #0
 8008262:	61fb      	str	r3, [r7, #28]
	float u[RDIM] = { 0 };
 8008264:	f04f 0300 	mov.w	r3, #0
 8008268:	61bb      	str	r3, [r7, #24]
	float y[RDIM] = { 0 };
 800826a:	f04f 0300 	mov.w	r3, #0
 800826e:	617b      	str	r3, [r7, #20]
	float r[RDIM + 1] = { 0, 0 }; // Special case for the manual mode
 8008270:	f04f 0300 	mov.w	r3, #0
 8008274:	60fb      	str	r3, [r7, #12]
 8008276:	f04f 0300 	mov.w	r3, #0
 800827a:	613b      	str	r3, [r7, #16]
	float x = 0; // State vector
 800827c:	f04f 0300 	mov.w	r3, #0
 8008280:	627b      	str	r3, [r7, #36]	; 0x24
	for (;;) {

		// Read the inputs and outputs
		r[0] = saturation((adcData[0] - 511) / 2, -250, 250);
 8008282:	4b93      	ldr	r3, [pc, #588]	; (80084d0 <StartControlTask+0x280>)
 8008284:	881b      	ldrh	r3, [r3, #0]
 8008286:	b29b      	uxth	r3, r3
 8008288:	f2a3 13ff 	subw	r3, r3, #511	; 0x1ff
 800828c:	0fda      	lsrs	r2, r3, #31
 800828e:	4413      	add	r3, r2
 8008290:	105b      	asrs	r3, r3, #1
 8008292:	ee07 3a90 	vmov	s15, r3
 8008296:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800829a:	ed9f 1a8e 	vldr	s2, [pc, #568]	; 80084d4 <StartControlTask+0x284>
 800829e:	eddf 0a8e 	vldr	s1, [pc, #568]	; 80084d8 <StartControlTask+0x288>
 80082a2:	eeb0 0a67 	vmov.f32	s0, s15
 80082a6:	f7f8 ff4f 	bl	8001148 <saturation>
 80082aa:	eef0 7a40 	vmov.f32	s15, s0
 80082ae:	edc7 7a03 	vstr	s15, [r7, #12]
		r[1] = saturation((adcData[1] - 511) / 2, -250, 250);
 80082b2:	4b87      	ldr	r3, [pc, #540]	; (80084d0 <StartControlTask+0x280>)
 80082b4:	885b      	ldrh	r3, [r3, #2]
 80082b6:	b29b      	uxth	r3, r3
 80082b8:	f2a3 13ff 	subw	r3, r3, #511	; 0x1ff
 80082bc:	0fda      	lsrs	r2, r3, #31
 80082be:	4413      	add	r3, r2
 80082c0:	105b      	asrs	r3, r3, #1
 80082c2:	ee07 3a90 	vmov	s15, r3
 80082c6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80082ca:	ed9f 1a82 	vldr	s2, [pc, #520]	; 80084d4 <StartControlTask+0x284>
 80082ce:	eddf 0a82 	vldr	s1, [pc, #520]	; 80084d8 <StartControlTask+0x288>
 80082d2:	eeb0 0a67 	vmov.f32	s0, s15
 80082d6:	f7f8 ff37 	bl	8001148 <saturation>
 80082da:	eef0 7a40 	vmov.f32	s15, s0
 80082de:	edc7 7a04 	vstr	s15, [r7, #16]
		Encoder_count(&encoder);
 80082e2:	487e      	ldr	r0, [pc, #504]	; (80084dc <StartControlTask+0x28c>)
 80082e4:	f7f8 ff6c 	bl	80011c0 <Encoder_count>
		y[0] = Encoder_getSpeed(&encoder) / one_rotation_pulses;
 80082e8:	487c      	ldr	r0, [pc, #496]	; (80084dc <StartControlTask+0x28c>)
 80082ea:	f7f9 f82e 	bl	800134a <Encoder_getSpeed>
 80082ee:	eef0 6a40 	vmov.f32	s13, s0
 80082f2:	eeb3 7a0e 	vmov.f32	s14, #62	; 0x41f00000  30.0
 80082f6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80082fa:	edc7 7a05 	vstr	s15, [r7, #20]

		// Do control mode now or manual mode
		if (closedloop_on) {
 80082fe:	4b78      	ldr	r3, [pc, #480]	; (80084e0 <StartControlTask+0x290>)
 8008300:	781b      	ldrb	r3, [r3, #0]
 8008302:	2b00      	cmp	r3, #0
 8008304:	f000 8081 	beq.w	800840a <StartControlTask+0x1ba>

			// Set the reference so we can plot it
			new_reference_float = r[0];
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	4a76      	ldr	r2, [pc, #472]	; (80084e4 <StartControlTask+0x294>)
 800830c:	6013      	str	r3, [r2, #0]

			// Compute MRAC with the input signal u with saturation limit
			mrac(mrac_saturation, mrac_gain, y, u, r, I1, I2, RDIM);
 800830e:	4b76      	ldr	r3, [pc, #472]	; (80084e8 <StartControlTask+0x298>)
 8008310:	edd3 7a00 	vldr	s15, [r3]
 8008314:	4b75      	ldr	r3, [pc, #468]	; (80084ec <StartControlTask+0x29c>)
 8008316:	ed93 7a00 	vldr	s14, [r3]
 800831a:	f107 0420 	add.w	r4, r7, #32
 800831e:	f107 020c 	add.w	r2, r7, #12
 8008322:	f107 0118 	add.w	r1, r7, #24
 8008326:	f107 0014 	add.w	r0, r7, #20
 800832a:	2301      	movs	r3, #1
 800832c:	9301      	str	r3, [sp, #4]
 800832e:	f107 031c 	add.w	r3, r7, #28
 8008332:	9300      	str	r3, [sp, #0]
 8008334:	4623      	mov	r3, r4
 8008336:	eef0 0a47 	vmov.f32	s1, s14
 800833a:	eeb0 0a67 	vmov.f32	s0, s15
 800833e:	f7f8 fdc5 	bl	8000ecc <mrac>
			u[0] = saturation(u[0], -250, 250);
 8008342:	edd7 7a06 	vldr	s15, [r7, #24]
 8008346:	ed9f 1a63 	vldr	s2, [pc, #396]	; 80084d4 <StartControlTask+0x284>
 800834a:	eddf 0a63 	vldr	s1, [pc, #396]	; 80084d8 <StartControlTask+0x288>
 800834e:	eeb0 0a67 	vmov.f32	s0, s15
 8008352:	f7f8 fef9 	bl	8001148 <saturation>
 8008356:	eef0 7a40 	vmov.f32	s15, s0
 800835a:	edc7 7a06 	vstr	s15, [r7, #24]

			// Compute the delay with Euler simulation for first order state space model with sampling time 1 ms
			x = x + 0.001 * (-1 / valve_delay * x + 1 / valve_delay * u[0]);
 800835e:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8008360:	f7f8 f8aa 	bl	80004b8 <__aeabi_f2d>
 8008364:	4604      	mov	r4, r0
 8008366:	460d      	mov	r5, r1
 8008368:	4b61      	ldr	r3, [pc, #388]	; (80084f0 <StartControlTask+0x2a0>)
 800836a:	edd3 7a00 	vldr	s15, [r3]
 800836e:	eeff 6a00 	vmov.f32	s13, #240	; 0xbf800000 -1.0
 8008372:	ee86 7aa7 	vdiv.f32	s14, s13, s15
 8008376:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800837a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800837e:	4b5c      	ldr	r3, [pc, #368]	; (80084f0 <StartControlTask+0x2a0>)
 8008380:	edd3 7a00 	vldr	s15, [r3]
 8008384:	eeb7 6a00 	vmov.f32	s12, #112	; 0x3f800000  1.0
 8008388:	eec6 6a27 	vdiv.f32	s13, s12, s15
 800838c:	edd7 7a06 	vldr	s15, [r7, #24]
 8008390:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8008394:	ee77 7a27 	vadd.f32	s15, s14, s15
 8008398:	ee17 0a90 	vmov	r0, s15
 800839c:	f7f8 f88c 	bl	80004b8 <__aeabi_f2d>
 80083a0:	a349      	add	r3, pc, #292	; (adr r3, 80084c8 <StartControlTask+0x278>)
 80083a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083a6:	f7f8 f8df 	bl	8000568 <__aeabi_dmul>
 80083aa:	4602      	mov	r2, r0
 80083ac:	460b      	mov	r3, r1
 80083ae:	4620      	mov	r0, r4
 80083b0:	4629      	mov	r1, r5
 80083b2:	f7f7 ff23 	bl	80001fc <__adddf3>
 80083b6:	4603      	mov	r3, r0
 80083b8:	460c      	mov	r4, r1
 80083ba:	4618      	mov	r0, r3
 80083bc:	4621      	mov	r1, r4
 80083be:	f7f8 fbb5 	bl	8000b2c <__aeabi_d2f>
 80083c2:	4603      	mov	r3, r0
 80083c4:	627b      	str	r3, [r7, #36]	; 0x24

			// Control forward or backward
			if (u[0] > 0) {
 80083c6:	edd7 7a06 	vldr	s15, [r7, #24]
 80083ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80083ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083d2:	dd04      	ble.n	80083de <StartControlTask+0x18e>
				r[0] = u[0];
 80083d4:	69bb      	ldr	r3, [r7, #24]
 80083d6:	60fb      	str	r3, [r7, #12]
				r[1] = x;
 80083d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083da:	613b      	str	r3, [r7, #16]
 80083dc:	e019      	b.n	8008412 <StartControlTask+0x1c2>
			} else if (u[0] < 0) {
 80083de:	edd7 7a06 	vldr	s15, [r7, #24]
 80083e2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80083e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80083ea:	d504      	bpl.n	80083f6 <StartControlTask+0x1a6>
				r[0] = x;
 80083ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80083ee:	60fb      	str	r3, [r7, #12]
				r[1] = u[0];
 80083f0:	69bb      	ldr	r3, [r7, #24]
 80083f2:	613b      	str	r3, [r7, #16]
 80083f4:	e00d      	b.n	8008412 <StartControlTask+0x1c2>
			} else {
				r[0] = 0;
 80083f6:	f04f 0300 	mov.w	r3, #0
 80083fa:	60fb      	str	r3, [r7, #12]
				r[1] = 0;
 80083fc:	f04f 0300 	mov.w	r3, #0
 8008400:	613b      	str	r3, [r7, #16]
				x = 0;
 8008402:	f04f 0300 	mov.w	r3, #0
 8008406:	627b      	str	r3, [r7, #36]	; 0x24
 8008408:	e003      	b.n	8008412 <StartControlTask+0x1c2>
			}
		}else{
			new_reference_float = 0; // Plot this
 800840a:	4b36      	ldr	r3, [pc, #216]	; (80084e4 <StartControlTask+0x294>)
 800840c:	f04f 0200 	mov.w	r2, #0
 8008410:	601a      	str	r2, [r3, #0]
		}

		// Set to plot
		new_input0_float = r[0];
 8008412:	68fb      	ldr	r3, [r7, #12]
 8008414:	4a37      	ldr	r2, [pc, #220]	; (80084f4 <StartControlTask+0x2a4>)
 8008416:	6013      	str	r3, [r2, #0]
		new_input1_float = r[1];
 8008418:	693b      	ldr	r3, [r7, #16]
 800841a:	4a37      	ldr	r2, [pc, #220]	; (80084f8 <StartControlTask+0x2a8>)
 800841c:	6013      	str	r3, [r2, #0]
		new_output_float = y[0];
 800841e:	697b      	ldr	r3, [r7, #20]
 8008420:	4a36      	ldr	r2, [pc, #216]	; (80084fc <StartControlTask+0x2ac>)
 8008422:	6013      	str	r3, [r2, #0]

		// Set the control command to CAN-bus motors
		write_1939_auxiliary_valve_command(0x30, &j1939, r[0]);
 8008424:	edd7 7a03 	vldr	s15, [r7, #12]
 8008428:	eeb0 0a67 	vmov.f32	s0, s15
 800842c:	4934      	ldr	r1, [pc, #208]	; (8008500 <StartControlTask+0x2b0>)
 800842e:	2030      	movs	r0, #48	; 0x30
 8008430:	f7fe fbb2 	bl	8006b98 <write_1939_auxiliary_valve_command>
		write_1939_auxiliary_valve_command(0x31, &j1939, r[1]);
 8008434:	edd7 7a04 	vldr	s15, [r7, #16]
 8008438:	eeb0 0a67 	vmov.f32	s0, s15
 800843c:	4930      	ldr	r1, [pc, #192]	; (8008500 <StartControlTask+0x2b0>)
 800843e:	2031      	movs	r0, #49	; 0x31
 8008440:	f7fe fbaa 	bl	8006b98 <write_1939_auxiliary_valve_command>

		// Check if we got some CAN message
		read_1939_message(&j1939);
 8008444:	482e      	ldr	r0, [pc, #184]	; (8008500 <StartControlTask+0x2b0>)
 8008446:	f7fe fc17 	bl	8006c78 <read_1939_message>

		// If we pressed "Flash" button
		if(rename_CA_SA){
 800844a:	4b2e      	ldr	r3, [pc, #184]	; (8008504 <StartControlTask+0x2b4>)
 800844c:	781b      	ldrb	r3, [r3, #0]
 800844e:	2b00      	cmp	r3, #0
 8008450:	d005      	beq.n	800845e <StartControlTask+0x20e>
			write_1939_CA_names_and_source_address(&j1939);
 8008452:	482b      	ldr	r0, [pc, #172]	; (8008500 <StartControlTask+0x2b0>)
 8008454:	f7fe fb7e 	bl	8006b54 <write_1939_CA_names_and_source_address>
			rename_CA_SA = false;
 8008458:	4b2a      	ldr	r3, [pc, #168]	; (8008504 <StartControlTask+0x2b4>)
 800845a:	2200      	movs	r2, #0
 800845c:	701a      	strb	r2, [r3, #0]
		}
		// If we pressed "Request" button
		if(send_a_claim_address_request){
 800845e:	4b2a      	ldr	r3, [pc, #168]	; (8008508 <StartControlTask+0x2b8>)
 8008460:	781b      	ldrb	r3, [r3, #0]
 8008462:	2b00      	cmp	r3, #0
 8008464:	d005      	beq.n	8008472 <StartControlTask+0x222>
			write_1939_request_for_claim_address(&j1939);
 8008466:	4826      	ldr	r0, [pc, #152]	; (8008500 <StartControlTask+0x2b0>)
 8008468:	f7fe fa34 	bl	80068d4 <write_1939_request_for_claim_address>
			send_a_claim_address_request = false;
 800846c:	4b26      	ldr	r3, [pc, #152]	; (8008508 <StartControlTask+0x2b8>)
 800846e:	2200      	movs	r2, #0
 8008470:	701a      	strb	r2, [r3, #0]
		}
		// If we pressed "Reset" button
		if(reset_DM1_messages){
 8008472:	4b26      	ldr	r3, [pc, #152]	; (800850c <StartControlTask+0x2bc>)
 8008474:	781b      	ldrb	r3, [r3, #0]
 8008476:	2b00      	cmp	r3, #0
 8008478:	d00a      	beq.n	8008490 <StartControlTask+0x240>
			memset(j1939.DM1_Messages_Binary, 0, 8);
 800847a:	2208      	movs	r2, #8
 800847c:	2100      	movs	r1, #0
 800847e:	4824      	ldr	r0, [pc, #144]	; (8008510 <StartControlTask+0x2c0>)
 8008480:	f007 fa45 	bl	800f90e <memset>
			j1939.DM15_Status = DM15_Proceed;
 8008484:	4b1e      	ldr	r3, [pc, #120]	; (8008500 <StartControlTask+0x2b0>)
 8008486:	2200      	movs	r2, #0
 8008488:	759a      	strb	r2, [r3, #22]
			reset_DM1_messages = false;
 800848a:	4b20      	ldr	r3, [pc, #128]	; (800850c <StartControlTask+0x2bc>)
 800848c:	2200      	movs	r2, #0
 800848e:	701a      	strb	r2, [r3, #0]
		}
		// If we pressed "Request" button
		if(send_a_configuration_request_read){
 8008490:	4b20      	ldr	r3, [pc, #128]	; (8008514 <StartControlTask+0x2c4>)
 8008492:	781b      	ldrb	r3, [r3, #0]
 8008494:	2b00      	cmp	r3, #0
 8008496:	d006      	beq.n	80084a6 <StartControlTask+0x256>
			write_1939_configuration_request(&j1939, 1); // Read
 8008498:	2101      	movs	r1, #1
 800849a:	4819      	ldr	r0, [pc, #100]	; (8008500 <StartControlTask+0x2b0>)
 800849c:	f7fe fa38 	bl	8006910 <write_1939_configuration_request>
			send_a_configuration_request_read = false;
 80084a0:	4b1c      	ldr	r3, [pc, #112]	; (8008514 <StartControlTask+0x2c4>)
 80084a2:	2200      	movs	r2, #0
 80084a4:	701a      	strb	r2, [r3, #0]
		}
		// If we pressed "Flash" button
		if(send_a_configuration_request_write){
 80084a6:	4b1c      	ldr	r3, [pc, #112]	; (8008518 <StartControlTask+0x2c8>)
 80084a8:	781b      	ldrb	r3, [r3, #0]
 80084aa:	2b00      	cmp	r3, #0
 80084ac:	d006      	beq.n	80084bc <StartControlTask+0x26c>
			write_1939_configuration_request(&j1939, 2); // Write
 80084ae:	2102      	movs	r1, #2
 80084b0:	4813      	ldr	r0, [pc, #76]	; (8008500 <StartControlTask+0x2b0>)
 80084b2:	f7fe fa2d 	bl	8006910 <write_1939_configuration_request>
			send_a_configuration_request_write = false;
 80084b6:	4b18      	ldr	r3, [pc, #96]	; (8008518 <StartControlTask+0x2c8>)
 80084b8:	2200      	movs	r2, #0
 80084ba:	701a      	strb	r2, [r3, #0]
		}

		osDelay(1);
 80084bc:	2001      	movs	r0, #1
 80084be:	f004 fdc3 	bl	800d048 <osDelay>
		r[0] = saturation((adcData[0] - 511) / 2, -250, 250);
 80084c2:	e6de      	b.n	8008282 <StartControlTask+0x32>
 80084c4:	f3af 8000 	nop.w
 80084c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80084cc:	3f50624d 	.word	0x3f50624d
 80084d0:	200056dc 	.word	0x200056dc
 80084d4:	437a0000 	.word	0x437a0000
 80084d8:	c37a0000 	.word	0xc37a0000
 80084dc:	200054b4 	.word	0x200054b4
 80084e0:	20000000 	.word	0x20000000
 80084e4:	200056d0 	.word	0x200056d0
 80084e8:	200056e0 	.word	0x200056e0
 80084ec:	2000557c 	.word	0x2000557c
 80084f0:	2000567c 	.word	0x2000567c
 80084f4:	2000539c 	.word	0x2000539c
 80084f8:	200054b0 	.word	0x200054b0
 80084fc:	20005550 	.word	0x20005550
 8008500:	20005554 	.word	0x20005554
 8008504:	20000a74 	.word	0x20000a74
 8008508:	20000a75 	.word	0x20000a75
 800850c:	20000a76 	.word	0x20000a76
 8008510:	2000555e 	.word	0x2000555e
 8008514:	20000a77 	.word	0x20000a77
 8008518:	20000a78 	.word	0x20000a78

0800851c <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM3) {
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	681b      	ldr	r3, [r3, #0]
 8008528:	4a04      	ldr	r2, [pc, #16]	; (800853c <HAL_TIM_PeriodElapsedCallback+0x20>)
 800852a:	4293      	cmp	r3, r2
 800852c:	d101      	bne.n	8008532 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 800852e:	f000 fb6f 	bl	8008c10 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8008532:	bf00      	nop
 8008534:	3708      	adds	r7, #8
 8008536:	46bd      	mov	sp, r7
 8008538:	bd80      	pop	{r7, pc}
 800853a:	bf00      	nop
 800853c:	40000400 	.word	0x40000400

08008540 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8008540:	b480      	push	{r7}
 8008542:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8008544:	bf00      	nop
 8008546:	46bd      	mov	sp, r7
 8008548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800854c:	4770      	bx	lr
	...

08008550 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8008550:	b580      	push	{r7, lr}
 8008552:	b082      	sub	sp, #8
 8008554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8008556:	2300      	movs	r3, #0
 8008558:	607b      	str	r3, [r7, #4]
 800855a:	4b12      	ldr	r3, [pc, #72]	; (80085a4 <HAL_MspInit+0x54>)
 800855c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800855e:	4a11      	ldr	r2, [pc, #68]	; (80085a4 <HAL_MspInit+0x54>)
 8008560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008564:	6453      	str	r3, [r2, #68]	; 0x44
 8008566:	4b0f      	ldr	r3, [pc, #60]	; (80085a4 <HAL_MspInit+0x54>)
 8008568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800856a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800856e:	607b      	str	r3, [r7, #4]
 8008570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8008572:	2300      	movs	r3, #0
 8008574:	603b      	str	r3, [r7, #0]
 8008576:	4b0b      	ldr	r3, [pc, #44]	; (80085a4 <HAL_MspInit+0x54>)
 8008578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800857a:	4a0a      	ldr	r2, [pc, #40]	; (80085a4 <HAL_MspInit+0x54>)
 800857c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008580:	6413      	str	r3, [r2, #64]	; 0x40
 8008582:	4b08      	ldr	r3, [pc, #32]	; (80085a4 <HAL_MspInit+0x54>)
 8008584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800858a:	603b      	str	r3, [r7, #0]
 800858c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 800858e:	2200      	movs	r2, #0
 8008590:	210f      	movs	r1, #15
 8008592:	f06f 0001 	mvn.w	r0, #1
 8008596:	f001 f80b 	bl	80095b0 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800859a:	bf00      	nop
 800859c:	3708      	adds	r7, #8
 800859e:	46bd      	mov	sp, r7
 80085a0:	bd80      	pop	{r7, pc}
 80085a2:	bf00      	nop
 80085a4:	40023800 	.word	0x40023800

080085a8 <HAL_ADC_MspInit>:
* This function configures the hardware resources used in this example
* @param hadc: ADC handle pointer
* @retval None
*/
void HAL_ADC_MspInit(ADC_HandleTypeDef* hadc)
{
 80085a8:	b580      	push	{r7, lr}
 80085aa:	b08a      	sub	sp, #40	; 0x28
 80085ac:	af00      	add	r7, sp, #0
 80085ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80085b0:	f107 0314 	add.w	r3, r7, #20
 80085b4:	2200      	movs	r2, #0
 80085b6:	601a      	str	r2, [r3, #0]
 80085b8:	605a      	str	r2, [r3, #4]
 80085ba:	609a      	str	r2, [r3, #8]
 80085bc:	60da      	str	r2, [r3, #12]
 80085be:	611a      	str	r2, [r3, #16]
  if(hadc->Instance==ADC1)
 80085c0:	687b      	ldr	r3, [r7, #4]
 80085c2:	681b      	ldr	r3, [r3, #0]
 80085c4:	4a3c      	ldr	r2, [pc, #240]	; (80086b8 <HAL_ADC_MspInit+0x110>)
 80085c6:	4293      	cmp	r3, r2
 80085c8:	d171      	bne.n	80086ae <HAL_ADC_MspInit+0x106>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80085ca:	2300      	movs	r3, #0
 80085cc:	613b      	str	r3, [r7, #16]
 80085ce:	4b3b      	ldr	r3, [pc, #236]	; (80086bc <HAL_ADC_MspInit+0x114>)
 80085d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085d2:	4a3a      	ldr	r2, [pc, #232]	; (80086bc <HAL_ADC_MspInit+0x114>)
 80085d4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80085d8:	6453      	str	r3, [r2, #68]	; 0x44
 80085da:	4b38      	ldr	r3, [pc, #224]	; (80086bc <HAL_ADC_MspInit+0x114>)
 80085dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80085e2:	613b      	str	r3, [r7, #16]
 80085e4:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80085e6:	2300      	movs	r3, #0
 80085e8:	60fb      	str	r3, [r7, #12]
 80085ea:	4b34      	ldr	r3, [pc, #208]	; (80086bc <HAL_ADC_MspInit+0x114>)
 80085ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085ee:	4a33      	ldr	r2, [pc, #204]	; (80086bc <HAL_ADC_MspInit+0x114>)
 80085f0:	f043 0301 	orr.w	r3, r3, #1
 80085f4:	6313      	str	r3, [r2, #48]	; 0x30
 80085f6:	4b31      	ldr	r3, [pc, #196]	; (80086bc <HAL_ADC_MspInit+0x114>)
 80085f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085fa:	f003 0301 	and.w	r3, r3, #1
 80085fe:	60fb      	str	r3, [r7, #12]
 8008600:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8008602:	2300      	movs	r3, #0
 8008604:	60bb      	str	r3, [r7, #8]
 8008606:	4b2d      	ldr	r3, [pc, #180]	; (80086bc <HAL_ADC_MspInit+0x114>)
 8008608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800860a:	4a2c      	ldr	r2, [pc, #176]	; (80086bc <HAL_ADC_MspInit+0x114>)
 800860c:	f043 0302 	orr.w	r3, r3, #2
 8008610:	6313      	str	r3, [r2, #48]	; 0x30
 8008612:	4b2a      	ldr	r3, [pc, #168]	; (80086bc <HAL_ADC_MspInit+0x114>)
 8008614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008616:	f003 0302 	and.w	r3, r3, #2
 800861a:	60bb      	str	r3, [r7, #8]
 800861c:	68bb      	ldr	r3, [r7, #8]
    /**ADC1 GPIO Configuration    
    PA4     ------> ADC1_IN4
    PB0     ------> ADC1_IN8 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 800861e:	2310      	movs	r3, #16
 8008620:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8008622:	2303      	movs	r3, #3
 8008624:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008626:	2300      	movs	r3, #0
 8008628:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800862a:	f107 0314 	add.w	r3, r7, #20
 800862e:	4619      	mov	r1, r3
 8008630:	4823      	ldr	r0, [pc, #140]	; (80086c0 <HAL_ADC_MspInit+0x118>)
 8008632:	f001 fd61 	bl	800a0f8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_0;
 8008636:	2301      	movs	r3, #1
 8008638:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800863a:	2303      	movs	r3, #3
 800863c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800863e:	2300      	movs	r3, #0
 8008640:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8008642:	f107 0314 	add.w	r3, r7, #20
 8008646:	4619      	mov	r1, r3
 8008648:	481e      	ldr	r0, [pc, #120]	; (80086c4 <HAL_ADC_MspInit+0x11c>)
 800864a:	f001 fd55 	bl	800a0f8 <HAL_GPIO_Init>

    /* ADC1 DMA Init */
    /* ADC1 Init */
    hdma_adc1.Instance = DMA2_Stream0;
 800864e:	4b1e      	ldr	r3, [pc, #120]	; (80086c8 <HAL_ADC_MspInit+0x120>)
 8008650:	4a1e      	ldr	r2, [pc, #120]	; (80086cc <HAL_ADC_MspInit+0x124>)
 8008652:	601a      	str	r2, [r3, #0]
    hdma_adc1.Init.Channel = DMA_CHANNEL_0;
 8008654:	4b1c      	ldr	r3, [pc, #112]	; (80086c8 <HAL_ADC_MspInit+0x120>)
 8008656:	2200      	movs	r2, #0
 8008658:	605a      	str	r2, [r3, #4]
    hdma_adc1.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800865a:	4b1b      	ldr	r3, [pc, #108]	; (80086c8 <HAL_ADC_MspInit+0x120>)
 800865c:	2200      	movs	r2, #0
 800865e:	609a      	str	r2, [r3, #8]
    hdma_adc1.Init.PeriphInc = DMA_PINC_DISABLE;
 8008660:	4b19      	ldr	r3, [pc, #100]	; (80086c8 <HAL_ADC_MspInit+0x120>)
 8008662:	2200      	movs	r2, #0
 8008664:	60da      	str	r2, [r3, #12]
    hdma_adc1.Init.MemInc = DMA_MINC_ENABLE;
 8008666:	4b18      	ldr	r3, [pc, #96]	; (80086c8 <HAL_ADC_MspInit+0x120>)
 8008668:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800866c:	611a      	str	r2, [r3, #16]
    hdma_adc1.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 800866e:	4b16      	ldr	r3, [pc, #88]	; (80086c8 <HAL_ADC_MspInit+0x120>)
 8008670:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8008674:	615a      	str	r2, [r3, #20]
    hdma_adc1.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8008676:	4b14      	ldr	r3, [pc, #80]	; (80086c8 <HAL_ADC_MspInit+0x120>)
 8008678:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800867c:	619a      	str	r2, [r3, #24]
    hdma_adc1.Init.Mode = DMA_CIRCULAR;
 800867e:	4b12      	ldr	r3, [pc, #72]	; (80086c8 <HAL_ADC_MspInit+0x120>)
 8008680:	f44f 7280 	mov.w	r2, #256	; 0x100
 8008684:	61da      	str	r2, [r3, #28]
    hdma_adc1.Init.Priority = DMA_PRIORITY_LOW;
 8008686:	4b10      	ldr	r3, [pc, #64]	; (80086c8 <HAL_ADC_MspInit+0x120>)
 8008688:	2200      	movs	r2, #0
 800868a:	621a      	str	r2, [r3, #32]
    hdma_adc1.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800868c:	4b0e      	ldr	r3, [pc, #56]	; (80086c8 <HAL_ADC_MspInit+0x120>)
 800868e:	2200      	movs	r2, #0
 8008690:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_adc1) != HAL_OK)
 8008692:	480d      	ldr	r0, [pc, #52]	; (80086c8 <HAL_ADC_MspInit+0x120>)
 8008694:	f000 ffb6 	bl	8009604 <HAL_DMA_Init>
 8008698:	4603      	mov	r3, r0
 800869a:	2b00      	cmp	r3, #0
 800869c:	d001      	beq.n	80086a2 <HAL_ADC_MspInit+0xfa>
    {
      Error_Handler();
 800869e:	f7ff ff4f 	bl	8008540 <Error_Handler>
    }

    __HAL_LINKDMA(hadc,DMA_Handle,hdma_adc1);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	4a08      	ldr	r2, [pc, #32]	; (80086c8 <HAL_ADC_MspInit+0x120>)
 80086a6:	639a      	str	r2, [r3, #56]	; 0x38
 80086a8:	4a07      	ldr	r2, [pc, #28]	; (80086c8 <HAL_ADC_MspInit+0x120>)
 80086aa:	687b      	ldr	r3, [r7, #4]
 80086ac:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }

}
 80086ae:	bf00      	nop
 80086b0:	3728      	adds	r7, #40	; 0x28
 80086b2:	46bd      	mov	sp, r7
 80086b4:	bd80      	pop	{r7, pc}
 80086b6:	bf00      	nop
 80086b8:	40012000 	.word	0x40012000
 80086bc:	40023800 	.word	0x40023800
 80086c0:	40020000 	.word	0x40020000
 80086c4:	40020400 	.word	0x40020400
 80086c8:	20005584 	.word	0x20005584
 80086cc:	40026410 	.word	0x40026410

080086d0 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 80086d0:	b580      	push	{r7, lr}
 80086d2:	b08c      	sub	sp, #48	; 0x30
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80086d8:	f107 031c 	add.w	r3, r7, #28
 80086dc:	2200      	movs	r2, #0
 80086de:	601a      	str	r2, [r3, #0]
 80086e0:	605a      	str	r2, [r3, #4]
 80086e2:	609a      	str	r2, [r3, #8]
 80086e4:	60da      	str	r2, [r3, #12]
 80086e6:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80086e8:	687b      	ldr	r3, [r7, #4]
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	4a41      	ldr	r2, [pc, #260]	; (80087f4 <HAL_SPI_MspInit+0x124>)
 80086ee:	4293      	cmp	r3, r2
 80086f0:	d12c      	bne.n	800874c <HAL_SPI_MspInit+0x7c>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80086f2:	2300      	movs	r3, #0
 80086f4:	61bb      	str	r3, [r7, #24]
 80086f6:	4b40      	ldr	r3, [pc, #256]	; (80087f8 <HAL_SPI_MspInit+0x128>)
 80086f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80086fa:	4a3f      	ldr	r2, [pc, #252]	; (80087f8 <HAL_SPI_MspInit+0x128>)
 80086fc:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008700:	6453      	str	r3, [r2, #68]	; 0x44
 8008702:	4b3d      	ldr	r3, [pc, #244]	; (80087f8 <HAL_SPI_MspInit+0x128>)
 8008704:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008706:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800870a:	61bb      	str	r3, [r7, #24]
 800870c:	69bb      	ldr	r3, [r7, #24]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800870e:	2300      	movs	r3, #0
 8008710:	617b      	str	r3, [r7, #20]
 8008712:	4b39      	ldr	r3, [pc, #228]	; (80087f8 <HAL_SPI_MspInit+0x128>)
 8008714:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008716:	4a38      	ldr	r2, [pc, #224]	; (80087f8 <HAL_SPI_MspInit+0x128>)
 8008718:	f043 0301 	orr.w	r3, r3, #1
 800871c:	6313      	str	r3, [r2, #48]	; 0x30
 800871e:	4b36      	ldr	r3, [pc, #216]	; (80087f8 <HAL_SPI_MspInit+0x128>)
 8008720:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008722:	f003 0301 	and.w	r3, r3, #1
 8008726:	617b      	str	r3, [r7, #20]
 8008728:	697b      	ldr	r3, [r7, #20]
    /**SPI1 GPIO Configuration    
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 800872a:	23e0      	movs	r3, #224	; 0xe0
 800872c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800872e:	2302      	movs	r3, #2
 8008730:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8008732:	2300      	movs	r3, #0
 8008734:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8008736:	2303      	movs	r3, #3
 8008738:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 800873a:	2305      	movs	r3, #5
 800873c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800873e:	f107 031c 	add.w	r3, r7, #28
 8008742:	4619      	mov	r1, r3
 8008744:	482d      	ldr	r0, [pc, #180]	; (80087fc <HAL_SPI_MspInit+0x12c>)
 8008746:	f001 fcd7 	bl	800a0f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }

}
 800874a:	e04f      	b.n	80087ec <HAL_SPI_MspInit+0x11c>
  else if(hspi->Instance==SPI2)
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	4a2b      	ldr	r2, [pc, #172]	; (8008800 <HAL_SPI_MspInit+0x130>)
 8008752:	4293      	cmp	r3, r2
 8008754:	d14a      	bne.n	80087ec <HAL_SPI_MspInit+0x11c>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8008756:	2300      	movs	r3, #0
 8008758:	613b      	str	r3, [r7, #16]
 800875a:	4b27      	ldr	r3, [pc, #156]	; (80087f8 <HAL_SPI_MspInit+0x128>)
 800875c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800875e:	4a26      	ldr	r2, [pc, #152]	; (80087f8 <HAL_SPI_MspInit+0x128>)
 8008760:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008764:	6413      	str	r3, [r2, #64]	; 0x40
 8008766:	4b24      	ldr	r3, [pc, #144]	; (80087f8 <HAL_SPI_MspInit+0x128>)
 8008768:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800876a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800876e:	613b      	str	r3, [r7, #16]
 8008770:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8008772:	2300      	movs	r3, #0
 8008774:	60fb      	str	r3, [r7, #12]
 8008776:	4b20      	ldr	r3, [pc, #128]	; (80087f8 <HAL_SPI_MspInit+0x128>)
 8008778:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800877a:	4a1f      	ldr	r2, [pc, #124]	; (80087f8 <HAL_SPI_MspInit+0x128>)
 800877c:	f043 0304 	orr.w	r3, r3, #4
 8008780:	6313      	str	r3, [r2, #48]	; 0x30
 8008782:	4b1d      	ldr	r3, [pc, #116]	; (80087f8 <HAL_SPI_MspInit+0x128>)
 8008784:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008786:	f003 0304 	and.w	r3, r3, #4
 800878a:	60fb      	str	r3, [r7, #12]
 800878c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800878e:	2300      	movs	r3, #0
 8008790:	60bb      	str	r3, [r7, #8]
 8008792:	4b19      	ldr	r3, [pc, #100]	; (80087f8 <HAL_SPI_MspInit+0x128>)
 8008794:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008796:	4a18      	ldr	r2, [pc, #96]	; (80087f8 <HAL_SPI_MspInit+0x128>)
 8008798:	f043 0302 	orr.w	r3, r3, #2
 800879c:	6313      	str	r3, [r2, #48]	; 0x30
 800879e:	4b16      	ldr	r3, [pc, #88]	; (80087f8 <HAL_SPI_MspInit+0x128>)
 80087a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087a2:	f003 0302 	and.w	r3, r3, #2
 80087a6:	60bb      	str	r3, [r7, #8]
 80087a8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80087aa:	230c      	movs	r3, #12
 80087ac:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087ae:	2302      	movs	r3, #2
 80087b0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087b2:	2300      	movs	r3, #0
 80087b4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087b6:	2303      	movs	r3, #3
 80087b8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80087ba:	2305      	movs	r3, #5
 80087bc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80087be:	f107 031c 	add.w	r3, r7, #28
 80087c2:	4619      	mov	r1, r3
 80087c4:	480f      	ldr	r0, [pc, #60]	; (8008804 <HAL_SPI_MspInit+0x134>)
 80087c6:	f001 fc97 	bl	800a0f8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80087ca:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80087ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80087d0:	2302      	movs	r3, #2
 80087d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80087d4:	2300      	movs	r3, #0
 80087d6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80087d8:	2303      	movs	r3, #3
 80087da:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80087dc:	2305      	movs	r3, #5
 80087de:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80087e0:	f107 031c 	add.w	r3, r7, #28
 80087e4:	4619      	mov	r1, r3
 80087e6:	4808      	ldr	r0, [pc, #32]	; (8008808 <HAL_SPI_MspInit+0x138>)
 80087e8:	f001 fc86 	bl	800a0f8 <HAL_GPIO_Init>
}
 80087ec:	bf00      	nop
 80087ee:	3730      	adds	r7, #48	; 0x30
 80087f0:	46bd      	mov	sp, r7
 80087f2:	bd80      	pop	{r7, pc}
 80087f4:	40013000 	.word	0x40013000
 80087f8:	40023800 	.word	0x40023800
 80087fc:	40020000 	.word	0x40020000
 8008800:	40003800 	.word	0x40003800
 8008804:	40020800 	.word	0x40020800
 8008808:	40020400 	.word	0x40020400

0800880c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800880c:	b480      	push	{r7}
 800880e:	b085      	sub	sp, #20
 8008810:	af00      	add	r7, sp, #0
 8008812:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800881c:	d10d      	bne.n	800883a <HAL_TIM_Base_MspInit+0x2e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800881e:	2300      	movs	r3, #0
 8008820:	60fb      	str	r3, [r7, #12]
 8008822:	4b09      	ldr	r3, [pc, #36]	; (8008848 <HAL_TIM_Base_MspInit+0x3c>)
 8008824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008826:	4a08      	ldr	r2, [pc, #32]	; (8008848 <HAL_TIM_Base_MspInit+0x3c>)
 8008828:	f043 0301 	orr.w	r3, r3, #1
 800882c:	6413      	str	r3, [r2, #64]	; 0x40
 800882e:	4b06      	ldr	r3, [pc, #24]	; (8008848 <HAL_TIM_Base_MspInit+0x3c>)
 8008830:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008832:	f003 0301 	and.w	r3, r3, #1
 8008836:	60fb      	str	r3, [r7, #12]
 8008838:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }

}
 800883a:	bf00      	nop
 800883c:	3714      	adds	r7, #20
 800883e:	46bd      	mov	sp, r7
 8008840:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008844:	4770      	bx	lr
 8008846:	bf00      	nop
 8008848:	40023800 	.word	0x40023800

0800884c <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 800884c:	b580      	push	{r7, lr}
 800884e:	b08a      	sub	sp, #40	; 0x28
 8008850:	af00      	add	r7, sp, #0
 8008852:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8008854:	f107 0314 	add.w	r3, r7, #20
 8008858:	2200      	movs	r2, #0
 800885a:	601a      	str	r2, [r3, #0]
 800885c:	605a      	str	r2, [r3, #4]
 800885e:	609a      	str	r2, [r3, #8]
 8008860:	60da      	str	r2, [r3, #12]
 8008862:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM5)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	681b      	ldr	r3, [r3, #0]
 8008868:	4a19      	ldr	r2, [pc, #100]	; (80088d0 <HAL_TIM_Encoder_MspInit+0x84>)
 800886a:	4293      	cmp	r3, r2
 800886c:	d12b      	bne.n	80088c6 <HAL_TIM_Encoder_MspInit+0x7a>
  {
  /* USER CODE BEGIN TIM5_MspInit 0 */

  /* USER CODE END TIM5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM5_CLK_ENABLE();
 800886e:	2300      	movs	r3, #0
 8008870:	613b      	str	r3, [r7, #16]
 8008872:	4b18      	ldr	r3, [pc, #96]	; (80088d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8008874:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008876:	4a17      	ldr	r2, [pc, #92]	; (80088d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8008878:	f043 0308 	orr.w	r3, r3, #8
 800887c:	6413      	str	r3, [r2, #64]	; 0x40
 800887e:	4b15      	ldr	r3, [pc, #84]	; (80088d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8008880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008882:	f003 0308 	and.w	r3, r3, #8
 8008886:	613b      	str	r3, [r7, #16]
 8008888:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800888a:	2300      	movs	r3, #0
 800888c:	60fb      	str	r3, [r7, #12]
 800888e:	4b11      	ldr	r3, [pc, #68]	; (80088d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8008890:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008892:	4a10      	ldr	r2, [pc, #64]	; (80088d4 <HAL_TIM_Encoder_MspInit+0x88>)
 8008894:	f043 0301 	orr.w	r3, r3, #1
 8008898:	6313      	str	r3, [r2, #48]	; 0x30
 800889a:	4b0e      	ldr	r3, [pc, #56]	; (80088d4 <HAL_TIM_Encoder_MspInit+0x88>)
 800889c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800889e:	f003 0301 	and.w	r3, r3, #1
 80088a2:	60fb      	str	r3, [r7, #12]
 80088a4:	68fb      	ldr	r3, [r7, #12]
    /**TIM5 GPIO Configuration    
    PA0-WKUP     ------> TIM5_CH1
    PA1     ------> TIM5_CH2 
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80088a6:	2303      	movs	r3, #3
 80088a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80088aa:	2302      	movs	r3, #2
 80088ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLDOWN;
 80088ae:	2302      	movs	r3, #2
 80088b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80088b2:	2300      	movs	r3, #0
 80088b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM5;
 80088b6:	2302      	movs	r3, #2
 80088b8:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80088ba:	f107 0314 	add.w	r3, r7, #20
 80088be:	4619      	mov	r1, r3
 80088c0:	4805      	ldr	r0, [pc, #20]	; (80088d8 <HAL_TIM_Encoder_MspInit+0x8c>)
 80088c2:	f001 fc19 	bl	800a0f8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM5_MspInit 1 */

  /* USER CODE END TIM5_MspInit 1 */
  }

}
 80088c6:	bf00      	nop
 80088c8:	3728      	adds	r7, #40	; 0x28
 80088ca:	46bd      	mov	sp, r7
 80088cc:	bd80      	pop	{r7, pc}
 80088ce:	bf00      	nop
 80088d0:	40000c00 	.word	0x40000c00
 80088d4:	40023800 	.word	0x40023800
 80088d8:	40020000 	.word	0x40020000

080088dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80088dc:	b580      	push	{r7, lr}
 80088de:	b08a      	sub	sp, #40	; 0x28
 80088e0:	af00      	add	r7, sp, #0
 80088e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80088e4:	f107 0314 	add.w	r3, r7, #20
 80088e8:	2200      	movs	r2, #0
 80088ea:	601a      	str	r2, [r3, #0]
 80088ec:	605a      	str	r2, [r3, #4]
 80088ee:	609a      	str	r2, [r3, #8]
 80088f0:	60da      	str	r2, [r3, #12]
 80088f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80088f4:	687b      	ldr	r3, [r7, #4]
 80088f6:	681b      	ldr	r3, [r3, #0]
 80088f8:	4a30      	ldr	r2, [pc, #192]	; (80089bc <HAL_UART_MspInit+0xe0>)
 80088fa:	4293      	cmp	r3, r2
 80088fc:	d15a      	bne.n	80089b4 <HAL_UART_MspInit+0xd8>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80088fe:	2300      	movs	r3, #0
 8008900:	613b      	str	r3, [r7, #16]
 8008902:	4b2f      	ldr	r3, [pc, #188]	; (80089c0 <HAL_UART_MspInit+0xe4>)
 8008904:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008906:	4a2e      	ldr	r2, [pc, #184]	; (80089c0 <HAL_UART_MspInit+0xe4>)
 8008908:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800890c:	6413      	str	r3, [r2, #64]	; 0x40
 800890e:	4b2c      	ldr	r3, [pc, #176]	; (80089c0 <HAL_UART_MspInit+0xe4>)
 8008910:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008912:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008916:	613b      	str	r3, [r7, #16]
 8008918:	693b      	ldr	r3, [r7, #16]
  
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800891a:	2300      	movs	r3, #0
 800891c:	60fb      	str	r3, [r7, #12]
 800891e:	4b28      	ldr	r3, [pc, #160]	; (80089c0 <HAL_UART_MspInit+0xe4>)
 8008920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008922:	4a27      	ldr	r2, [pc, #156]	; (80089c0 <HAL_UART_MspInit+0xe4>)
 8008924:	f043 0301 	orr.w	r3, r3, #1
 8008928:	6313      	str	r3, [r2, #48]	; 0x30
 800892a:	4b25      	ldr	r3, [pc, #148]	; (80089c0 <HAL_UART_MspInit+0xe4>)
 800892c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800892e:	f003 0301 	and.w	r3, r3, #1
 8008932:	60fb      	str	r3, [r7, #12]
 8008934:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration    
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX 
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8008936:	230c      	movs	r3, #12
 8008938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800893a:	2302      	movs	r3, #2
 800893c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800893e:	2300      	movs	r3, #0
 8008940:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8008942:	2300      	movs	r3, #0
 8008944:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8008946:	2307      	movs	r3, #7
 8008948:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800894a:	f107 0314 	add.w	r3, r7, #20
 800894e:	4619      	mov	r1, r3
 8008950:	481c      	ldr	r0, [pc, #112]	; (80089c4 <HAL_UART_MspInit+0xe8>)
 8008952:	f001 fbd1 	bl	800a0f8 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8008956:	4b1c      	ldr	r3, [pc, #112]	; (80089c8 <HAL_UART_MspInit+0xec>)
 8008958:	4a1c      	ldr	r2, [pc, #112]	; (80089cc <HAL_UART_MspInit+0xf0>)
 800895a:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800895c:	4b1a      	ldr	r3, [pc, #104]	; (80089c8 <HAL_UART_MspInit+0xec>)
 800895e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008962:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8008964:	4b18      	ldr	r3, [pc, #96]	; (80089c8 <HAL_UART_MspInit+0xec>)
 8008966:	2200      	movs	r2, #0
 8008968:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800896a:	4b17      	ldr	r3, [pc, #92]	; (80089c8 <HAL_UART_MspInit+0xec>)
 800896c:	2200      	movs	r2, #0
 800896e:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8008970:	4b15      	ldr	r3, [pc, #84]	; (80089c8 <HAL_UART_MspInit+0xec>)
 8008972:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8008976:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8008978:	4b13      	ldr	r3, [pc, #76]	; (80089c8 <HAL_UART_MspInit+0xec>)
 800897a:	2200      	movs	r2, #0
 800897c:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800897e:	4b12      	ldr	r3, [pc, #72]	; (80089c8 <HAL_UART_MspInit+0xec>)
 8008980:	2200      	movs	r2, #0
 8008982:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8008984:	4b10      	ldr	r3, [pc, #64]	; (80089c8 <HAL_UART_MspInit+0xec>)
 8008986:	f44f 7280 	mov.w	r2, #256	; 0x100
 800898a:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800898c:	4b0e      	ldr	r3, [pc, #56]	; (80089c8 <HAL_UART_MspInit+0xec>)
 800898e:	2200      	movs	r2, #0
 8008990:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8008992:	4b0d      	ldr	r3, [pc, #52]	; (80089c8 <HAL_UART_MspInit+0xec>)
 8008994:	2200      	movs	r2, #0
 8008996:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8008998:	480b      	ldr	r0, [pc, #44]	; (80089c8 <HAL_UART_MspInit+0xec>)
 800899a:	f000 fe33 	bl	8009604 <HAL_DMA_Init>
 800899e:	4603      	mov	r3, r0
 80089a0:	2b00      	cmp	r3, #0
 80089a2:	d001      	beq.n	80089a8 <HAL_UART_MspInit+0xcc>
    {
      Error_Handler();
 80089a4:	f7ff fdcc 	bl	8008540 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	4a07      	ldr	r2, [pc, #28]	; (80089c8 <HAL_UART_MspInit+0xec>)
 80089ac:	635a      	str	r2, [r3, #52]	; 0x34
 80089ae:	4a06      	ldr	r2, [pc, #24]	; (80089c8 <HAL_UART_MspInit+0xec>)
 80089b0:	687b      	ldr	r3, [r7, #4]
 80089b2:	6393      	str	r3, [r2, #56]	; 0x38
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 80089b4:	bf00      	nop
 80089b6:	3728      	adds	r7, #40	; 0x28
 80089b8:	46bd      	mov	sp, r7
 80089ba:	bd80      	pop	{r7, pc}
 80089bc:	40004400 	.word	0x40004400
 80089c0:	40023800 	.word	0x40023800
 80089c4:	40020000 	.word	0x40020000
 80089c8:	200053a0 	.word	0x200053a0
 80089cc:	40026088 	.word	0x40026088

080089d0 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig(). 
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b08c      	sub	sp, #48	; 0x30
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0;
 80089d8:	2300      	movs	r3, #0
 80089da:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t              uwPrescalerValue = 0;
 80089dc:	2300      	movs	r3, #0
 80089de:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  
  /*Configure the TIM3 IRQ priority */
  HAL_NVIC_SetPriority(TIM3_IRQn, TickPriority ,0); 
 80089e0:	2200      	movs	r2, #0
 80089e2:	6879      	ldr	r1, [r7, #4]
 80089e4:	201d      	movs	r0, #29
 80089e6:	f000 fde3 	bl	80095b0 <HAL_NVIC_SetPriority>
  
  /* Enable the TIM3 global Interrupt */
  HAL_NVIC_EnableIRQ(TIM3_IRQn); 
 80089ea:	201d      	movs	r0, #29
 80089ec:	f000 fdfc 	bl	80095e8 <HAL_NVIC_EnableIRQ>
  
  /* Enable TIM3 clock */
  __HAL_RCC_TIM3_CLK_ENABLE();
 80089f0:	2300      	movs	r3, #0
 80089f2:	60fb      	str	r3, [r7, #12]
 80089f4:	4b1f      	ldr	r3, [pc, #124]	; (8008a74 <HAL_InitTick+0xa4>)
 80089f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089f8:	4a1e      	ldr	r2, [pc, #120]	; (8008a74 <HAL_InitTick+0xa4>)
 80089fa:	f043 0302 	orr.w	r3, r3, #2
 80089fe:	6413      	str	r3, [r2, #64]	; 0x40
 8008a00:	4b1c      	ldr	r3, [pc, #112]	; (8008a74 <HAL_InitTick+0xa4>)
 8008a02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a04:	f003 0302 	and.w	r3, r3, #2
 8008a08:	60fb      	str	r3, [r7, #12]
 8008a0a:	68fb      	ldr	r3, [r7, #12]
  
  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8008a0c:	f107 0210 	add.w	r2, r7, #16
 8008a10:	f107 0314 	add.w	r3, r7, #20
 8008a14:	4611      	mov	r1, r2
 8008a16:	4618      	mov	r0, r3
 8008a18:	f002 f984 	bl	800ad24 <HAL_RCC_GetClockConfig>
  
  /* Compute TIM3 clock */
  uwTimclock = 2*HAL_RCC_GetPCLK1Freq();
 8008a1c:	f002 f95a 	bl	800acd4 <HAL_RCC_GetPCLK1Freq>
 8008a20:	4603      	mov	r3, r0
 8008a22:	005b      	lsls	r3, r3, #1
 8008a24:	62fb      	str	r3, [r7, #44]	; 0x2c
   
  /* Compute the prescaler value to have TIM3 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000) - 1);
 8008a26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008a28:	4a13      	ldr	r2, [pc, #76]	; (8008a78 <HAL_InitTick+0xa8>)
 8008a2a:	fba2 2303 	umull	r2, r3, r2, r3
 8008a2e:	0c9b      	lsrs	r3, r3, #18
 8008a30:	3b01      	subs	r3, #1
 8008a32:	62bb      	str	r3, [r7, #40]	; 0x28
  
  /* Initialize TIM3 */
  htim3.Instance = TIM3;
 8008a34:	4b11      	ldr	r3, [pc, #68]	; (8008a7c <HAL_InitTick+0xac>)
 8008a36:	4a12      	ldr	r2, [pc, #72]	; (8008a80 <HAL_InitTick+0xb0>)
 8008a38:	601a      	str	r2, [r3, #0]
  + Period = [(TIM3CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim3.Init.Period = (1000000 / 1000) - 1;
 8008a3a:	4b10      	ldr	r3, [pc, #64]	; (8008a7c <HAL_InitTick+0xac>)
 8008a3c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8008a40:	60da      	str	r2, [r3, #12]
  htim3.Init.Prescaler = uwPrescalerValue;
 8008a42:	4a0e      	ldr	r2, [pc, #56]	; (8008a7c <HAL_InitTick+0xac>)
 8008a44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008a46:	6053      	str	r3, [r2, #4]
  htim3.Init.ClockDivision = 0;
 8008a48:	4b0c      	ldr	r3, [pc, #48]	; (8008a7c <HAL_InitTick+0xac>)
 8008a4a:	2200      	movs	r2, #0
 8008a4c:	611a      	str	r2, [r3, #16]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8008a4e:	4b0b      	ldr	r3, [pc, #44]	; (8008a7c <HAL_InitTick+0xac>)
 8008a50:	2200      	movs	r2, #0
 8008a52:	609a      	str	r2, [r3, #8]
  if(HAL_TIM_Base_Init(&htim3) == HAL_OK)
 8008a54:	4809      	ldr	r0, [pc, #36]	; (8008a7c <HAL_InitTick+0xac>)
 8008a56:	f002 fef9 	bl	800b84c <HAL_TIM_Base_Init>
 8008a5a:	4603      	mov	r3, r0
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d104      	bne.n	8008a6a <HAL_InitTick+0x9a>
  {
    /* Start the TIM time Base generation in interrupt mode */
    return HAL_TIM_Base_Start_IT(&htim3);
 8008a60:	4806      	ldr	r0, [pc, #24]	; (8008a7c <HAL_InitTick+0xac>)
 8008a62:	f002 ff42 	bl	800b8ea <HAL_TIM_Base_Start_IT>
 8008a66:	4603      	mov	r3, r0
 8008a68:	e000      	b.n	8008a6c <HAL_InitTick+0x9c>
  }
  
  /* Return function status */
  return HAL_ERROR;
 8008a6a:	2301      	movs	r3, #1
}
 8008a6c:	4618      	mov	r0, r3
 8008a6e:	3730      	adds	r7, #48	; 0x30
 8008a70:	46bd      	mov	sp, r7
 8008a72:	bd80      	pop	{r7, pc}
 8008a74:	40023800 	.word	0x40023800
 8008a78:	431bde83 	.word	0x431bde83
 8008a7c:	200056e4 	.word	0x200056e4
 8008a80:	40000400 	.word	0x40000400

08008a84 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8008a84:	b480      	push	{r7}
 8008a86:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 8008a88:	bf00      	nop
 8008a8a:	46bd      	mov	sp, r7
 8008a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a90:	4770      	bx	lr

08008a92 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8008a92:	b480      	push	{r7}
 8008a94:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8008a96:	e7fe      	b.n	8008a96 <HardFault_Handler+0x4>

08008a98 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8008a98:	b480      	push	{r7}
 8008a9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8008a9c:	e7fe      	b.n	8008a9c <MemManage_Handler+0x4>

08008a9e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8008a9e:	b480      	push	{r7}
 8008aa0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8008aa2:	e7fe      	b.n	8008aa2 <BusFault_Handler+0x4>

08008aa4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8008aa8:	e7fe      	b.n	8008aa8 <UsageFault_Handler+0x4>

08008aaa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8008aaa:	b480      	push	{r7}
 8008aac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8008aae:	bf00      	nop
 8008ab0:	46bd      	mov	sp, r7
 8008ab2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ab6:	4770      	bx	lr

08008ab8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8008ab8:	b580      	push	{r7, lr}
 8008aba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8008abc:	4802      	ldr	r0, [pc, #8]	; (8008ac8 <DMA1_Stream5_IRQHandler+0x10>)
 8008abe:	f000 fea7 	bl	8009810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8008ac2:	bf00      	nop
 8008ac4:	bd80      	pop	{r7, pc}
 8008ac6:	bf00      	nop
 8008ac8:	200053a0 	.word	0x200053a0

08008acc <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8008acc:	b580      	push	{r7, lr}
 8008ace:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8008ad0:	4802      	ldr	r0, [pc, #8]	; (8008adc <TIM3_IRQHandler+0x10>)
 8008ad2:	f002 fff7 	bl	800bac4 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8008ad6:	bf00      	nop
 8008ad8:	bd80      	pop	{r7, pc}
 8008ada:	bf00      	nop
 8008adc:	200056e4 	.word	0x200056e4

08008ae0 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8008ae0:	b580      	push	{r7, lr}
 8008ae2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_adc1);
 8008ae4:	4802      	ldr	r0, [pc, #8]	; (8008af0 <DMA2_Stream0_IRQHandler+0x10>)
 8008ae6:	f000 fe93 	bl	8009810 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8008aea:	bf00      	nop
 8008aec:	bd80      	pop	{r7, pc}
 8008aee:	bf00      	nop
 8008af0:	20005584 	.word	0x20005584

08008af4 <_sbrk>:
/**
 _sbrk
 Increase program data space. Malloc and related functions depend on this
**/
caddr_t _sbrk(int incr)
{
 8008af4:	b580      	push	{r7, lr}
 8008af6:	b084      	sub	sp, #16
 8008af8:	af00      	add	r7, sp, #0
 8008afa:	6078      	str	r0, [r7, #4]
	extern char end asm("end");
	static char *heap_end;
	char *prev_heap_end;

	if (heap_end == 0)
 8008afc:	4b11      	ldr	r3, [pc, #68]	; (8008b44 <_sbrk+0x50>)
 8008afe:	681b      	ldr	r3, [r3, #0]
 8008b00:	2b00      	cmp	r3, #0
 8008b02:	d102      	bne.n	8008b0a <_sbrk+0x16>
		heap_end = &end;
 8008b04:	4b0f      	ldr	r3, [pc, #60]	; (8008b44 <_sbrk+0x50>)
 8008b06:	4a10      	ldr	r2, [pc, #64]	; (8008b48 <_sbrk+0x54>)
 8008b08:	601a      	str	r2, [r3, #0]

	prev_heap_end = heap_end;
 8008b0a:	4b0e      	ldr	r3, [pc, #56]	; (8008b44 <_sbrk+0x50>)
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	60fb      	str	r3, [r7, #12]
	if (heap_end + incr > stack_ptr)
 8008b10:	4b0c      	ldr	r3, [pc, #48]	; (8008b44 <_sbrk+0x50>)
 8008b12:	681a      	ldr	r2, [r3, #0]
 8008b14:	687b      	ldr	r3, [r7, #4]
 8008b16:	4413      	add	r3, r2
 8008b18:	466a      	mov	r2, sp
 8008b1a:	4293      	cmp	r3, r2
 8008b1c:	d907      	bls.n	8008b2e <_sbrk+0x3a>
	{
		errno = ENOMEM;
 8008b1e:	f006 fec1 	bl	800f8a4 <__errno>
 8008b22:	4602      	mov	r2, r0
 8008b24:	230c      	movs	r3, #12
 8008b26:	6013      	str	r3, [r2, #0]
		return (caddr_t) -1;
 8008b28:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8008b2c:	e006      	b.n	8008b3c <_sbrk+0x48>
	}

	heap_end += incr;
 8008b2e:	4b05      	ldr	r3, [pc, #20]	; (8008b44 <_sbrk+0x50>)
 8008b30:	681a      	ldr	r2, [r3, #0]
 8008b32:	687b      	ldr	r3, [r7, #4]
 8008b34:	4413      	add	r3, r2
 8008b36:	4a03      	ldr	r2, [pc, #12]	; (8008b44 <_sbrk+0x50>)
 8008b38:	6013      	str	r3, [r2, #0]

	return (caddr_t) prev_heap_end;
 8008b3a:	68fb      	ldr	r3, [r7, #12]
}
 8008b3c:	4618      	mov	r0, r3
 8008b3e:	3710      	adds	r7, #16
 8008b40:	46bd      	mov	sp, r7
 8008b42:	bd80      	pop	{r7, pc}
 8008b44:	20000a7c 	.word	0x20000a7c
 8008b48:	20005790 	.word	0x20005790

08008b4c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8008b4c:	b480      	push	{r7}
 8008b4e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8008b50:	4b08      	ldr	r3, [pc, #32]	; (8008b74 <SystemInit+0x28>)
 8008b52:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8008b56:	4a07      	ldr	r2, [pc, #28]	; (8008b74 <SystemInit+0x28>)
 8008b58:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008b5c:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8008b60:	4b04      	ldr	r3, [pc, #16]	; (8008b74 <SystemInit+0x28>)
 8008b62:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8008b66:	609a      	str	r2, [r3, #8]
#endif
}
 8008b68:	bf00      	nop
 8008b6a:	46bd      	mov	sp, r7
 8008b6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b70:	4770      	bx	lr
 8008b72:	bf00      	nop
 8008b74:	e000ed00 	.word	0xe000ed00

08008b78 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8008b78:	f8df d034 	ldr.w	sp, [pc, #52]	; 8008bb0 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8008b7c:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8008b7e:	e003      	b.n	8008b88 <LoopCopyDataInit>

08008b80 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8008b80:	4b0c      	ldr	r3, [pc, #48]	; (8008bb4 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8008b82:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8008b84:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8008b86:	3104      	adds	r1, #4

08008b88 <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8008b88:	480b      	ldr	r0, [pc, #44]	; (8008bb8 <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8008b8a:	4b0c      	ldr	r3, [pc, #48]	; (8008bbc <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8008b8c:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8008b8e:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8008b90:	d3f6      	bcc.n	8008b80 <CopyDataInit>
  ldr  r2, =_sbss
 8008b92:	4a0b      	ldr	r2, [pc, #44]	; (8008bc0 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8008b94:	e002      	b.n	8008b9c <LoopFillZerobss>

08008b96 <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8008b96:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8008b98:	f842 3b04 	str.w	r3, [r2], #4

08008b9c <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8008b9c:	4b09      	ldr	r3, [pc, #36]	; (8008bc4 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8008b9e:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8008ba0:	d3f9      	bcc.n	8008b96 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8008ba2:	f7ff ffd3 	bl	8008b4c <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8008ba6:	f006 fe83 	bl	800f8b0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8008baa:	f7fe fbd5 	bl	8007358 <main>
  bx  lr    
 8008bae:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8008bb0:	20018000 	.word	0x20018000
  ldr  r3, =_sidata
 8008bb4:	08052420 	.word	0x08052420
  ldr  r0, =_sdata
 8008bb8:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8008bbc:	200001e4 	.word	0x200001e4
  ldr  r2, =_sbss
 8008bc0:	200001e4 	.word	0x200001e4
  ldr  r3, = _ebss
 8008bc4:	2000578c 	.word	0x2000578c

08008bc8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8008bc8:	e7fe      	b.n	8008bc8 <ADC_IRQHandler>
	...

08008bcc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8008bcc:	b580      	push	{r7, lr}
 8008bce:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008bd0:	4b0e      	ldr	r3, [pc, #56]	; (8008c0c <HAL_Init+0x40>)
 8008bd2:	681b      	ldr	r3, [r3, #0]
 8008bd4:	4a0d      	ldr	r2, [pc, #52]	; (8008c0c <HAL_Init+0x40>)
 8008bd6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008bda:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8008bdc:	4b0b      	ldr	r3, [pc, #44]	; (8008c0c <HAL_Init+0x40>)
 8008bde:	681b      	ldr	r3, [r3, #0]
 8008be0:	4a0a      	ldr	r2, [pc, #40]	; (8008c0c <HAL_Init+0x40>)
 8008be2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008be6:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8008be8:	4b08      	ldr	r3, [pc, #32]	; (8008c0c <HAL_Init+0x40>)
 8008bea:	681b      	ldr	r3, [r3, #0]
 8008bec:	4a07      	ldr	r2, [pc, #28]	; (8008c0c <HAL_Init+0x40>)
 8008bee:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008bf2:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8008bf4:	2003      	movs	r0, #3
 8008bf6:	f000 fcd0 	bl	800959a <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8008bfa:	2000      	movs	r0, #0
 8008bfc:	f7ff fee8 	bl	80089d0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8008c00:	f7ff fca6 	bl	8008550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8008c04:	2300      	movs	r3, #0
}
 8008c06:	4618      	mov	r0, r3
 8008c08:	bd80      	pop	{r7, pc}
 8008c0a:	bf00      	nop
 8008c0c:	40023c00 	.word	0x40023c00

08008c10 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8008c10:	b480      	push	{r7}
 8008c12:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8008c14:	4b06      	ldr	r3, [pc, #24]	; (8008c30 <HAL_IncTick+0x20>)
 8008c16:	781b      	ldrb	r3, [r3, #0]
 8008c18:	461a      	mov	r2, r3
 8008c1a:	4b06      	ldr	r3, [pc, #24]	; (8008c34 <HAL_IncTick+0x24>)
 8008c1c:	681b      	ldr	r3, [r3, #0]
 8008c1e:	4413      	add	r3, r2
 8008c20:	4a04      	ldr	r2, [pc, #16]	; (8008c34 <HAL_IncTick+0x24>)
 8008c22:	6013      	str	r3, [r2, #0]
}
 8008c24:	bf00      	nop
 8008c26:	46bd      	mov	sp, r7
 8008c28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c2c:	4770      	bx	lr
 8008c2e:	bf00      	nop
 8008c30:	2000000c 	.word	0x2000000c
 8008c34:	20005724 	.word	0x20005724

08008c38 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	af00      	add	r7, sp, #0
  return uwTick;
 8008c3c:	4b03      	ldr	r3, [pc, #12]	; (8008c4c <HAL_GetTick+0x14>)
 8008c3e:	681b      	ldr	r3, [r3, #0]
}
 8008c40:	4618      	mov	r0, r3
 8008c42:	46bd      	mov	sp, r7
 8008c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c48:	4770      	bx	lr
 8008c4a:	bf00      	nop
 8008c4c:	20005724 	.word	0x20005724

08008c50 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8008c50:	b580      	push	{r7, lr}
 8008c52:	b084      	sub	sp, #16
 8008c54:	af00      	add	r7, sp, #0
 8008c56:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8008c58:	f7ff ffee 	bl	8008c38 <HAL_GetTick>
 8008c5c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8008c62:	68fb      	ldr	r3, [r7, #12]
 8008c64:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8008c68:	d005      	beq.n	8008c76 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8008c6a:	4b09      	ldr	r3, [pc, #36]	; (8008c90 <HAL_Delay+0x40>)
 8008c6c:	781b      	ldrb	r3, [r3, #0]
 8008c6e:	461a      	mov	r2, r3
 8008c70:	68fb      	ldr	r3, [r7, #12]
 8008c72:	4413      	add	r3, r2
 8008c74:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8008c76:	bf00      	nop
 8008c78:	f7ff ffde 	bl	8008c38 <HAL_GetTick>
 8008c7c:	4602      	mov	r2, r0
 8008c7e:	68bb      	ldr	r3, [r7, #8]
 8008c80:	1ad3      	subs	r3, r2, r3
 8008c82:	68fa      	ldr	r2, [r7, #12]
 8008c84:	429a      	cmp	r2, r3
 8008c86:	d8f7      	bhi.n	8008c78 <HAL_Delay+0x28>
  {
  }
}
 8008c88:	bf00      	nop
 8008c8a:	3710      	adds	r7, #16
 8008c8c:	46bd      	mov	sp, r7
 8008c8e:	bd80      	pop	{r7, pc}
 8008c90:	2000000c 	.word	0x2000000c

08008c94 <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 8008c94:	b580      	push	{r7, lr}
 8008c96:	b084      	sub	sp, #16
 8008c98:	af00      	add	r7, sp, #0
 8008c9a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8008c9c:	2300      	movs	r3, #0
 8008c9e:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	2b00      	cmp	r3, #0
 8008ca4:	d101      	bne.n	8008caa <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 8008ca6:	2301      	movs	r3, #1
 8008ca8:	e033      	b.n	8008d12 <HAL_ADC_Init+0x7e>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }
  
  if(hadc->State == HAL_ADC_STATE_RESET)
 8008caa:	687b      	ldr	r3, [r7, #4]
 8008cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cae:	2b00      	cmp	r3, #0
 8008cb0:	d109      	bne.n	8008cc6 <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 8008cb2:	6878      	ldr	r0, [r7, #4]
 8008cb4:	f7ff fc78 	bl	80085a8 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	2200      	movs	r2, #0
 8008cbc:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	2200      	movs	r2, #0
 8008cc2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cca:	f003 0310 	and.w	r3, r3, #16
 8008cce:	2b00      	cmp	r3, #0
 8008cd0:	d118      	bne.n	8008d04 <HAL_ADC_Init+0x70>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008cd2:	687b      	ldr	r3, [r7, #4]
 8008cd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cd6:	f423 5388 	bic.w	r3, r3, #4352	; 0x1100
 8008cda:	f023 0302 	bic.w	r3, r3, #2
 8008cde:	f043 0202 	orr.w	r2, r3, #2
 8008ce2:	687b      	ldr	r3, [r7, #4]
 8008ce4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 8008ce6:	6878      	ldr	r0, [r7, #4]
 8008ce8:	f000 fa2c 	bl	8009144 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8008cec:	687b      	ldr	r3, [r7, #4]
 8008cee:	2200      	movs	r2, #0
 8008cf0:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008cf6:	f023 0303 	bic.w	r3, r3, #3
 8008cfa:	f043 0201 	orr.w	r2, r3, #1
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	641a      	str	r2, [r3, #64]	; 0x40
 8008d02:	e001      	b.n	8008d08 <HAL_ADC_Init+0x74>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8008d04:	2301      	movs	r3, #1
 8008d06:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	2200      	movs	r2, #0
 8008d0c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8008d10:	7bfb      	ldrb	r3, [r7, #15]
}
 8008d12:	4618      	mov	r0, r3
 8008d14:	3710      	adds	r7, #16
 8008d16:	46bd      	mov	sp, r7
 8008d18:	bd80      	pop	{r7, pc}
	...

08008d1c <HAL_ADC_Start_DMA>:
  * @param  pData The destination Buffer address.
  * @param  Length The length of data to be transferred from ADC peripheral to memory.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start_DMA(ADC_HandleTypeDef* hadc, uint32_t* pData, uint32_t Length)
{
 8008d1c:	b580      	push	{r7, lr}
 8008d1e:	b086      	sub	sp, #24
 8008d20:	af00      	add	r7, sp, #0
 8008d22:	60f8      	str	r0, [r7, #12]
 8008d24:	60b9      	str	r1, [r7, #8]
 8008d26:	607a      	str	r2, [r7, #4]
  __IO uint32_t counter = 0U;
 8008d28:	2300      	movs	r3, #0
 8008d2a:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008d2c:	68fb      	ldr	r3, [r7, #12]
 8008d2e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d32:	2b01      	cmp	r3, #1
 8008d34:	d101      	bne.n	8008d3a <HAL_ADC_Start_DMA+0x1e>
 8008d36:	2302      	movs	r3, #2
 8008d38:	e0b1      	b.n	8008e9e <HAL_ADC_Start_DMA+0x182>
 8008d3a:	68fb      	ldr	r3, [r7, #12]
 8008d3c:	2201      	movs	r2, #1
 8008d3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	681b      	ldr	r3, [r3, #0]
 8008d46:	689b      	ldr	r3, [r3, #8]
 8008d48:	f003 0301 	and.w	r3, r3, #1
 8008d4c:	2b01      	cmp	r3, #1
 8008d4e:	d018      	beq.n	8008d82 <HAL_ADC_Start_DMA+0x66>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8008d50:	68fb      	ldr	r3, [r7, #12]
 8008d52:	681b      	ldr	r3, [r3, #0]
 8008d54:	689a      	ldr	r2, [r3, #8]
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	f042 0201 	orr.w	r2, r2, #1
 8008d5e:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000U));
 8008d60:	4b51      	ldr	r3, [pc, #324]	; (8008ea8 <HAL_ADC_Start_DMA+0x18c>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	4a51      	ldr	r2, [pc, #324]	; (8008eac <HAL_ADC_Start_DMA+0x190>)
 8008d66:	fba2 2303 	umull	r2, r3, r2, r3
 8008d6a:	0c9a      	lsrs	r2, r3, #18
 8008d6c:	4613      	mov	r3, r2
 8008d6e:	005b      	lsls	r3, r3, #1
 8008d70:	4413      	add	r3, r2
 8008d72:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008d74:	e002      	b.n	8008d7c <HAL_ADC_Start_DMA+0x60>
    {
      counter--;
 8008d76:	693b      	ldr	r3, [r7, #16]
 8008d78:	3b01      	subs	r3, #1
 8008d7a:	613b      	str	r3, [r7, #16]
    while(counter != 0U)
 8008d7c:	693b      	ldr	r3, [r7, #16]
 8008d7e:	2b00      	cmp	r3, #0
 8008d80:	d1f9      	bne.n	8008d76 <HAL_ADC_Start_DMA+0x5a>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8008d82:	68fb      	ldr	r3, [r7, #12]
 8008d84:	681b      	ldr	r3, [r3, #0]
 8008d86:	689b      	ldr	r3, [r3, #8]
 8008d88:	f003 0301 	and.w	r3, r3, #1
 8008d8c:	2b01      	cmp	r3, #1
 8008d8e:	f040 8085 	bne.w	8008e9c <HAL_ADC_Start_DMA+0x180>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8008d92:	68fb      	ldr	r3, [r7, #12]
 8008d94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008d96:	f423 63e0 	bic.w	r3, r3, #1792	; 0x700
 8008d9a:	f023 0301 	bic.w	r3, r3, #1
 8008d9e:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8008da2:	68fb      	ldr	r3, [r7, #12]
 8008da4:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8008da6:	68fb      	ldr	r3, [r7, #12]
 8008da8:	681b      	ldr	r3, [r3, #0]
 8008daa:	685b      	ldr	r3, [r3, #4]
 8008dac:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008db0:	2b00      	cmp	r3, #0
 8008db2:	d007      	beq.n	8008dc4 <HAL_ADC_Start_DMA+0xa8>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8008db4:	68fb      	ldr	r3, [r7, #12]
 8008db6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008db8:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 8008dbc:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 8008dc0:	68fb      	ldr	r3, [r7, #12]
 8008dc2:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8008dc4:	68fb      	ldr	r3, [r7, #12]
 8008dc6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008dc8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8008dcc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008dd0:	d106      	bne.n	8008de0 <HAL_ADC_Start_DMA+0xc4>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008dd6:	f023 0206 	bic.w	r2, r3, #6
 8008dda:	68fb      	ldr	r3, [r7, #12]
 8008ddc:	645a      	str	r2, [r3, #68]	; 0x44
 8008dde:	e002      	b.n	8008de6 <HAL_ADC_Start_DMA+0xca>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 8008de0:	68fb      	ldr	r3, [r7, #12]
 8008de2:	2200      	movs	r2, #0
 8008de4:	645a      	str	r2, [r3, #68]	; 0x44
    }

    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);   
 8008de6:	68fb      	ldr	r3, [r7, #12]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 8008dee:	4b30      	ldr	r3, [pc, #192]	; (8008eb0 <HAL_ADC_Start_DMA+0x194>)
 8008df0:	617b      	str	r3, [r7, #20]

    /* Set the DMA transfer complete callback */
    hadc->DMA_Handle->XferCpltCallback = ADC_DMAConvCplt;
 8008df2:	68fb      	ldr	r3, [r7, #12]
 8008df4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008df6:	4a2f      	ldr	r2, [pc, #188]	; (8008eb4 <HAL_ADC_Start_DMA+0x198>)
 8008df8:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the DMA half transfer complete callback */
    hadc->DMA_Handle->XferHalfCpltCallback = ADC_DMAHalfConvCplt;
 8008dfa:	68fb      	ldr	r3, [r7, #12]
 8008dfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008dfe:	4a2e      	ldr	r2, [pc, #184]	; (8008eb8 <HAL_ADC_Start_DMA+0x19c>)
 8008e00:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set the DMA error callback */
    hadc->DMA_Handle->XferErrorCallback = ADC_DMAError;
 8008e02:	68fb      	ldr	r3, [r7, #12]
 8008e04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008e06:	4a2d      	ldr	r2, [pc, #180]	; (8008ebc <HAL_ADC_Start_DMA+0x1a0>)
 8008e08:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Manage ADC and DMA start: ADC overrun interruption, DMA start, ADC     */
    /* start (in case of SW start):                                           */
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 8008e0a:	68fb      	ldr	r3, [r7, #12]
 8008e0c:	681b      	ldr	r3, [r3, #0]
 8008e0e:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8008e12:	601a      	str	r2, [r3, #0]

    /* Enable ADC overrun interrupt */
    __HAL_ADC_ENABLE_IT(hadc, ADC_IT_OVR);
 8008e14:	68fb      	ldr	r3, [r7, #12]
 8008e16:	681b      	ldr	r3, [r3, #0]
 8008e18:	685a      	ldr	r2, [r3, #4]
 8008e1a:	68fb      	ldr	r3, [r7, #12]
 8008e1c:	681b      	ldr	r3, [r3, #0]
 8008e1e:	f042 6280 	orr.w	r2, r2, #67108864	; 0x4000000
 8008e22:	605a      	str	r2, [r3, #4]
    
    /* Enable ADC DMA mode */
    hadc->Instance->CR2 |= ADC_CR2_DMA;
 8008e24:	68fb      	ldr	r3, [r7, #12]
 8008e26:	681b      	ldr	r3, [r3, #0]
 8008e28:	689a      	ldr	r2, [r3, #8]
 8008e2a:	68fb      	ldr	r3, [r7, #12]
 8008e2c:	681b      	ldr	r3, [r3, #0]
 8008e2e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008e32:	609a      	str	r2, [r3, #8]
    
    /* Start the DMA channel */
    HAL_DMA_Start_IT(hadc->DMA_Handle, (uint32_t)&hadc->Instance->DR, (uint32_t)pData, Length);
 8008e34:	68fb      	ldr	r3, [r7, #12]
 8008e36:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008e38:	68fb      	ldr	r3, [r7, #12]
 8008e3a:	681b      	ldr	r3, [r3, #0]
 8008e3c:	334c      	adds	r3, #76	; 0x4c
 8008e3e:	4619      	mov	r1, r3
 8008e40:	68ba      	ldr	r2, [r7, #8]
 8008e42:	687b      	ldr	r3, [r7, #4]
 8008e44:	f000 fc8c 	bl	8009760 <HAL_DMA_Start_IT>
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(tmpADC_Common->CCR, ADC_CCR_MULTI))
 8008e48:	697b      	ldr	r3, [r7, #20]
 8008e4a:	685b      	ldr	r3, [r3, #4]
 8008e4c:	f003 031f 	and.w	r3, r3, #31
 8008e50:	2b00      	cmp	r3, #0
 8008e52:	d10f      	bne.n	8008e74 <HAL_ADC_Start_DMA+0x158>
      if((hadc->Instance == ADC1) || ((hadc->Instance == ADC2) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_0)) \
                                  || ((hadc->Instance == ADC3) && ((ADC->CCR & ADC_CCR_MULTI_Msk) < ADC_CCR_MULTI_4)))
      {
#endif /* ADC2 || ADC3 */
        /* if no external trigger present enable software conversion of regular channels */
        if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	689b      	ldr	r3, [r3, #8]
 8008e5a:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e5e:	2b00      	cmp	r3, #0
 8008e60:	d11c      	bne.n	8008e9c <HAL_ADC_Start_DMA+0x180>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	681b      	ldr	r3, [r3, #0]
 8008e66:	689a      	ldr	r2, [r3, #8]
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008e70:	609a      	str	r2, [r3, #8]
 8008e72:	e013      	b.n	8008e9c <HAL_ADC_Start_DMA+0x180>
#endif /* ADC2 || ADC3 */
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8008e74:	68fb      	ldr	r3, [r7, #12]
 8008e76:	681b      	ldr	r3, [r3, #0]
 8008e78:	4a11      	ldr	r2, [pc, #68]	; (8008ec0 <HAL_ADC_Start_DMA+0x1a4>)
 8008e7a:	4293      	cmp	r3, r2
 8008e7c:	d10e      	bne.n	8008e9c <HAL_ADC_Start_DMA+0x180>
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	681b      	ldr	r3, [r3, #0]
 8008e82:	689b      	ldr	r3, [r3, #8]
 8008e84:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d107      	bne.n	8008e9c <HAL_ADC_Start_DMA+0x180>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	681b      	ldr	r3, [r3, #0]
 8008e90:	689a      	ldr	r2, [r3, #8]
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8008e9a:	609a      	str	r2, [r3, #8]
      }
    }
  }
  
  /* Return function status */
  return HAL_OK;
 8008e9c:	2300      	movs	r3, #0
}
 8008e9e:	4618      	mov	r0, r3
 8008ea0:	3718      	adds	r7, #24
 8008ea2:	46bd      	mov	sp, r7
 8008ea4:	bd80      	pop	{r7, pc}
 8008ea6:	bf00      	nop
 8008ea8:	20000004 	.word	0x20000004
 8008eac:	431bde83 	.word	0x431bde83
 8008eb0:	40012300 	.word	0x40012300
 8008eb4:	0800933d 	.word	0x0800933d
 8008eb8:	080093f7 	.word	0x080093f7
 8008ebc:	08009413 	.word	0x08009413
 8008ec0:	40012000 	.word	0x40012000

08008ec4 <HAL_ADC_ConvCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008ec4:	b480      	push	{r7}
 8008ec6:	b083      	sub	sp, #12
 8008ec8:	af00      	add	r7, sp, #0
 8008eca:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvCpltCallback could be implemented in the user file
   */
}
 8008ecc:	bf00      	nop
 8008ece:	370c      	adds	r7, #12
 8008ed0:	46bd      	mov	sp, r7
 8008ed2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ed6:	4770      	bx	lr

08008ed8 <HAL_ADC_ConvHalfCpltCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ConvHalfCpltCallback(ADC_HandleTypeDef* hadc)
{
 8008ed8:	b480      	push	{r7}
 8008eda:	b083      	sub	sp, #12
 8008edc:	af00      	add	r7, sp, #0
 8008ede:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ConvHalfCpltCallback could be implemented in the user file
   */
}
 8008ee0:	bf00      	nop
 8008ee2:	370c      	adds	r7, #12
 8008ee4:	46bd      	mov	sp, r7
 8008ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008eea:	4770      	bx	lr

08008eec <HAL_ADC_ErrorCallback>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval None
  */
__weak void HAL_ADC_ErrorCallback(ADC_HandleTypeDef *hadc)
{
 8008eec:	b480      	push	{r7}
 8008eee:	b083      	sub	sp, #12
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(hadc);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ADC_ErrorCallback could be implemented in the user file
   */
}
 8008ef4:	bf00      	nop
 8008ef6:	370c      	adds	r7, #12
 8008ef8:	46bd      	mov	sp, r7
 8008efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008efe:	4770      	bx	lr

08008f00 <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 8008f00:	b480      	push	{r7}
 8008f02:	b085      	sub	sp, #20
 8008f04:	af00      	add	r7, sp, #0
 8008f06:	6078      	str	r0, [r7, #4]
 8008f08:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0U;
 8008f0a:	2300      	movs	r3, #0
 8008f0c:	60bb      	str	r3, [r7, #8]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8008f0e:	687b      	ldr	r3, [r7, #4]
 8008f10:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f14:	2b01      	cmp	r3, #1
 8008f16:	d101      	bne.n	8008f1c <HAL_ADC_ConfigChannel+0x1c>
 8008f18:	2302      	movs	r3, #2
 8008f1a:	e105      	b.n	8009128 <HAL_ADC_ConfigChannel+0x228>
 8008f1c:	687b      	ldr	r3, [r7, #4]
 8008f1e:	2201      	movs	r2, #1
 8008f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if (sConfig->Channel > ADC_CHANNEL_9)
 8008f24:	683b      	ldr	r3, [r7, #0]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	2b09      	cmp	r3, #9
 8008f2a:	d925      	bls.n	8008f78 <HAL_ADC_ConfigChannel+0x78>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8008f2c:	687b      	ldr	r3, [r7, #4]
 8008f2e:	681b      	ldr	r3, [r3, #0]
 8008f30:	68d9      	ldr	r1, [r3, #12]
 8008f32:	683b      	ldr	r3, [r7, #0]
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	b29b      	uxth	r3, r3
 8008f38:	461a      	mov	r2, r3
 8008f3a:	4613      	mov	r3, r2
 8008f3c:	005b      	lsls	r3, r3, #1
 8008f3e:	4413      	add	r3, r2
 8008f40:	3b1e      	subs	r3, #30
 8008f42:	2207      	movs	r2, #7
 8008f44:	fa02 f303 	lsl.w	r3, r2, r3
 8008f48:	43da      	mvns	r2, r3
 8008f4a:	687b      	ldr	r3, [r7, #4]
 8008f4c:	681b      	ldr	r3, [r3, #0]
 8008f4e:	400a      	ands	r2, r1
 8008f50:	60da      	str	r2, [r3, #12]
    
    /* Set the new sample time */
    hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	68d9      	ldr	r1, [r3, #12]
 8008f58:	683b      	ldr	r3, [r7, #0]
 8008f5a:	689a      	ldr	r2, [r3, #8]
 8008f5c:	683b      	ldr	r3, [r7, #0]
 8008f5e:	681b      	ldr	r3, [r3, #0]
 8008f60:	b29b      	uxth	r3, r3
 8008f62:	4618      	mov	r0, r3
 8008f64:	4603      	mov	r3, r0
 8008f66:	005b      	lsls	r3, r3, #1
 8008f68:	4403      	add	r3, r0
 8008f6a:	3b1e      	subs	r3, #30
 8008f6c:	409a      	lsls	r2, r3
 8008f6e:	687b      	ldr	r3, [r7, #4]
 8008f70:	681b      	ldr	r3, [r3, #0]
 8008f72:	430a      	orrs	r2, r1
 8008f74:	60da      	str	r2, [r3, #12]
 8008f76:	e022      	b.n	8008fbe <HAL_ADC_ConfigChannel+0xbe>
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	6919      	ldr	r1, [r3, #16]
 8008f7e:	683b      	ldr	r3, [r7, #0]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	b29b      	uxth	r3, r3
 8008f84:	461a      	mov	r2, r3
 8008f86:	4613      	mov	r3, r2
 8008f88:	005b      	lsls	r3, r3, #1
 8008f8a:	4413      	add	r3, r2
 8008f8c:	2207      	movs	r2, #7
 8008f8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008f92:	43da      	mvns	r2, r3
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	400a      	ands	r2, r1
 8008f9a:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8008f9c:	687b      	ldr	r3, [r7, #4]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	6919      	ldr	r1, [r3, #16]
 8008fa2:	683b      	ldr	r3, [r7, #0]
 8008fa4:	689a      	ldr	r2, [r3, #8]
 8008fa6:	683b      	ldr	r3, [r7, #0]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	b29b      	uxth	r3, r3
 8008fac:	4618      	mov	r0, r3
 8008fae:	4603      	mov	r3, r0
 8008fb0:	005b      	lsls	r3, r3, #1
 8008fb2:	4403      	add	r3, r0
 8008fb4:	409a      	lsls	r2, r3
 8008fb6:	687b      	ldr	r3, [r7, #4]
 8008fb8:	681b      	ldr	r3, [r3, #0]
 8008fba:	430a      	orrs	r2, r1
 8008fbc:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7U)
 8008fbe:	683b      	ldr	r3, [r7, #0]
 8008fc0:	685b      	ldr	r3, [r3, #4]
 8008fc2:	2b06      	cmp	r3, #6
 8008fc4:	d824      	bhi.n	8009010 <HAL_ADC_ConfigChannel+0x110>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 8008fc6:	687b      	ldr	r3, [r7, #4]
 8008fc8:	681b      	ldr	r3, [r3, #0]
 8008fca:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008fcc:	683b      	ldr	r3, [r7, #0]
 8008fce:	685a      	ldr	r2, [r3, #4]
 8008fd0:	4613      	mov	r3, r2
 8008fd2:	009b      	lsls	r3, r3, #2
 8008fd4:	4413      	add	r3, r2
 8008fd6:	3b05      	subs	r3, #5
 8008fd8:	221f      	movs	r2, #31
 8008fda:	fa02 f303 	lsl.w	r3, r2, r3
 8008fde:	43da      	mvns	r2, r3
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	681b      	ldr	r3, [r3, #0]
 8008fe4:	400a      	ands	r2, r1
 8008fe6:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 8008fe8:	687b      	ldr	r3, [r7, #4]
 8008fea:	681b      	ldr	r3, [r3, #0]
 8008fec:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8008fee:	683b      	ldr	r3, [r7, #0]
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	b29b      	uxth	r3, r3
 8008ff4:	4618      	mov	r0, r3
 8008ff6:	683b      	ldr	r3, [r7, #0]
 8008ff8:	685a      	ldr	r2, [r3, #4]
 8008ffa:	4613      	mov	r3, r2
 8008ffc:	009b      	lsls	r3, r3, #2
 8008ffe:	4413      	add	r3, r2
 8009000:	3b05      	subs	r3, #5
 8009002:	fa00 f203 	lsl.w	r2, r0, r3
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	681b      	ldr	r3, [r3, #0]
 800900a:	430a      	orrs	r2, r1
 800900c:	635a      	str	r2, [r3, #52]	; 0x34
 800900e:	e04c      	b.n	80090aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13U)
 8009010:	683b      	ldr	r3, [r7, #0]
 8009012:	685b      	ldr	r3, [r3, #4]
 8009014:	2b0c      	cmp	r3, #12
 8009016:	d824      	bhi.n	8009062 <HAL_ADC_ConfigChannel+0x162>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	6b19      	ldr	r1, [r3, #48]	; 0x30
 800901e:	683b      	ldr	r3, [r7, #0]
 8009020:	685a      	ldr	r2, [r3, #4]
 8009022:	4613      	mov	r3, r2
 8009024:	009b      	lsls	r3, r3, #2
 8009026:	4413      	add	r3, r2
 8009028:	3b23      	subs	r3, #35	; 0x23
 800902a:	221f      	movs	r2, #31
 800902c:	fa02 f303 	lsl.w	r3, r2, r3
 8009030:	43da      	mvns	r2, r3
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	681b      	ldr	r3, [r3, #0]
 8009036:	400a      	ands	r2, r1
 8009038:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	681b      	ldr	r3, [r3, #0]
 800903e:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8009040:	683b      	ldr	r3, [r7, #0]
 8009042:	681b      	ldr	r3, [r3, #0]
 8009044:	b29b      	uxth	r3, r3
 8009046:	4618      	mov	r0, r3
 8009048:	683b      	ldr	r3, [r7, #0]
 800904a:	685a      	ldr	r2, [r3, #4]
 800904c:	4613      	mov	r3, r2
 800904e:	009b      	lsls	r3, r3, #2
 8009050:	4413      	add	r3, r2
 8009052:	3b23      	subs	r3, #35	; 0x23
 8009054:	fa00 f203 	lsl.w	r2, r0, r3
 8009058:	687b      	ldr	r3, [r7, #4]
 800905a:	681b      	ldr	r3, [r3, #0]
 800905c:	430a      	orrs	r2, r1
 800905e:	631a      	str	r2, [r3, #48]	; 0x30
 8009060:	e023      	b.n	80090aa <HAL_ADC_ConfigChannel+0x1aa>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	681b      	ldr	r3, [r3, #0]
 8009066:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8009068:	683b      	ldr	r3, [r7, #0]
 800906a:	685a      	ldr	r2, [r3, #4]
 800906c:	4613      	mov	r3, r2
 800906e:	009b      	lsls	r3, r3, #2
 8009070:	4413      	add	r3, r2
 8009072:	3b41      	subs	r3, #65	; 0x41
 8009074:	221f      	movs	r2, #31
 8009076:	fa02 f303 	lsl.w	r3, r2, r3
 800907a:	43da      	mvns	r2, r3
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	400a      	ands	r2, r1
 8009082:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 8009084:	687b      	ldr	r3, [r7, #4]
 8009086:	681b      	ldr	r3, [r3, #0]
 8009088:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800908a:	683b      	ldr	r3, [r7, #0]
 800908c:	681b      	ldr	r3, [r3, #0]
 800908e:	b29b      	uxth	r3, r3
 8009090:	4618      	mov	r0, r3
 8009092:	683b      	ldr	r3, [r7, #0]
 8009094:	685a      	ldr	r2, [r3, #4]
 8009096:	4613      	mov	r3, r2
 8009098:	009b      	lsls	r3, r3, #2
 800909a:	4413      	add	r3, r2
 800909c:	3b41      	subs	r3, #65	; 0x41
 800909e:	fa00 f203 	lsl.w	r2, r0, r3
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	681b      	ldr	r3, [r3, #0]
 80090a6:	430a      	orrs	r2, r1
 80090a8:	62da      	str	r2, [r3, #44]	; 0x2c
  }

    /* Pointer to the common control register to which is belonging hadc    */
    /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
    /* control register)                                                    */
    tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 80090aa:	4b22      	ldr	r3, [pc, #136]	; (8009134 <HAL_ADC_ConfigChannel+0x234>)
 80090ac:	60fb      	str	r3, [r7, #12]

  /* if ADC1 Channel_18 is selected for VBAT Channel ennable VBATE */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	681b      	ldr	r3, [r3, #0]
 80090b2:	4a21      	ldr	r2, [pc, #132]	; (8009138 <HAL_ADC_ConfigChannel+0x238>)
 80090b4:	4293      	cmp	r3, r2
 80090b6:	d109      	bne.n	80090cc <HAL_ADC_ConfigChannel+0x1cc>
 80090b8:	683b      	ldr	r3, [r7, #0]
 80090ba:	681b      	ldr	r3, [r3, #0]
 80090bc:	2b12      	cmp	r3, #18
 80090be:	d105      	bne.n	80090cc <HAL_ADC_ConfigChannel+0x1cc>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_TSVREFE;
    }
    /* Enable the VBAT channel*/
    tmpADC_Common->CCR |= ADC_CCR_VBATE;
 80090c0:	68fb      	ldr	r3, [r7, #12]
 80090c2:	685b      	ldr	r3, [r3, #4]
 80090c4:	f443 0280 	orr.w	r2, r3, #4194304	; 0x400000
 80090c8:	68fb      	ldr	r3, [r7, #12]
 80090ca:	605a      	str	r2, [r3, #4]
  }
  
  /* if ADC1 Channel_16 or Channel_18 is selected for Temperature sensor or 
     Channel_17 is selected for VREFINT enable TSVREFE */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80090cc:	687b      	ldr	r3, [r7, #4]
 80090ce:	681b      	ldr	r3, [r3, #0]
 80090d0:	4a19      	ldr	r2, [pc, #100]	; (8009138 <HAL_ADC_ConfigChannel+0x238>)
 80090d2:	4293      	cmp	r3, r2
 80090d4:	d123      	bne.n	800911e <HAL_ADC_ConfigChannel+0x21e>
 80090d6:	683b      	ldr	r3, [r7, #0]
 80090d8:	681b      	ldr	r3, [r3, #0]
 80090da:	2b10      	cmp	r3, #16
 80090dc:	d003      	beq.n	80090e6 <HAL_ADC_ConfigChannel+0x1e6>
 80090de:	683b      	ldr	r3, [r7, #0]
 80090e0:	681b      	ldr	r3, [r3, #0]
 80090e2:	2b11      	cmp	r3, #17
 80090e4:	d11b      	bne.n	800911e <HAL_ADC_ConfigChannel+0x21e>
    if ((uint16_t)ADC_CHANNEL_TEMPSENSOR == (uint16_t)ADC_CHANNEL_VBAT)
    {
      tmpADC_Common->CCR &= ~ADC_CCR_VBATE;
    }
    /* Enable the Temperature sensor and VREFINT channel*/
    tmpADC_Common->CCR |= ADC_CCR_TSVREFE;
 80090e6:	68fb      	ldr	r3, [r7, #12]
 80090e8:	685b      	ldr	r3, [r3, #4]
 80090ea:	f443 0200 	orr.w	r2, r3, #8388608	; 0x800000
 80090ee:	68fb      	ldr	r3, [r7, #12]
 80090f0:	605a      	str	r2, [r3, #4]
    
    if((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR))
 80090f2:	683b      	ldr	r3, [r7, #0]
 80090f4:	681b      	ldr	r3, [r3, #0]
 80090f6:	2b10      	cmp	r3, #16
 80090f8:	d111      	bne.n	800911e <HAL_ADC_ConfigChannel+0x21e>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000U));
 80090fa:	4b10      	ldr	r3, [pc, #64]	; (800913c <HAL_ADC_ConfigChannel+0x23c>)
 80090fc:	681b      	ldr	r3, [r3, #0]
 80090fe:	4a10      	ldr	r2, [pc, #64]	; (8009140 <HAL_ADC_ConfigChannel+0x240>)
 8009100:	fba2 2303 	umull	r2, r3, r2, r3
 8009104:	0c9a      	lsrs	r2, r3, #18
 8009106:	4613      	mov	r3, r2
 8009108:	009b      	lsls	r3, r3, #2
 800910a:	4413      	add	r3, r2
 800910c:	005b      	lsls	r3, r3, #1
 800910e:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009110:	e002      	b.n	8009118 <HAL_ADC_ConfigChannel+0x218>
      {
        counter--;
 8009112:	68bb      	ldr	r3, [r7, #8]
 8009114:	3b01      	subs	r3, #1
 8009116:	60bb      	str	r3, [r7, #8]
      while(counter != 0U)
 8009118:	68bb      	ldr	r3, [r7, #8]
 800911a:	2b00      	cmp	r3, #0
 800911c:	d1f9      	bne.n	8009112 <HAL_ADC_ConfigChannel+0x212>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	2200      	movs	r2, #0
 8009122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8009126:	2300      	movs	r3, #0
}
 8009128:	4618      	mov	r0, r3
 800912a:	3714      	adds	r7, #20
 800912c:	46bd      	mov	sp, r7
 800912e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009132:	4770      	bx	lr
 8009134:	40012300 	.word	0x40012300
 8009138:	40012000 	.word	0x40012000
 800913c:	20000004 	.word	0x20000004
 8009140:	431bde83 	.word	0x431bde83

08009144 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8009144:	b480      	push	{r7}
 8009146:	b085      	sub	sp, #20
 8009148:	af00      	add	r7, sp, #0
 800914a:	6078      	str	r0, [r7, #4]
  
  /* Set ADC parameters */
  /* Pointer to the common control register to which is belonging hadc    */
  /* (Depending on STM32F4 product, there may be up to 3 ADCs and 1 common */
  /* control register)                                                    */
  tmpADC_Common = ADC_COMMON_REGISTER(hadc);
 800914c:	4b79      	ldr	r3, [pc, #484]	; (8009334 <ADC_Init+0x1f0>)
 800914e:	60fb      	str	r3, [r7, #12]
  
  /* Set the ADC clock prescaler */
  tmpADC_Common->CCR &= ~(ADC_CCR_ADCPRE);
 8009150:	68fb      	ldr	r3, [r7, #12]
 8009152:	685b      	ldr	r3, [r3, #4]
 8009154:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009158:	68fb      	ldr	r3, [r7, #12]
 800915a:	605a      	str	r2, [r3, #4]
  tmpADC_Common->CCR |=  hadc->Init.ClockPrescaler;
 800915c:	68fb      	ldr	r3, [r7, #12]
 800915e:	685a      	ldr	r2, [r3, #4]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	685b      	ldr	r3, [r3, #4]
 8009164:	431a      	orrs	r2, r3
 8009166:	68fb      	ldr	r3, [r7, #12]
 8009168:	605a      	str	r2, [r3, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	685a      	ldr	r2, [r3, #4]
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009178:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	6859      	ldr	r1, [r3, #4]
 8009180:	687b      	ldr	r3, [r7, #4]
 8009182:	691b      	ldr	r3, [r3, #16]
 8009184:	021a      	lsls	r2, r3, #8
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	681b      	ldr	r3, [r3, #0]
 800918a:	430a      	orrs	r2, r1
 800918c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	685a      	ldr	r2, [r3, #4]
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800919c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800919e:	687b      	ldr	r3, [r7, #4]
 80091a0:	681b      	ldr	r3, [r3, #0]
 80091a2:	6859      	ldr	r1, [r3, #4]
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	689a      	ldr	r2, [r3, #8]
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	681b      	ldr	r3, [r3, #0]
 80091ac:	430a      	orrs	r2, r1
 80091ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	689a      	ldr	r2, [r3, #8]
 80091b6:	687b      	ldr	r3, [r7, #4]
 80091b8:	681b      	ldr	r3, [r3, #0]
 80091ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80091be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	6899      	ldr	r1, [r3, #8]
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	68da      	ldr	r2, [r3, #12]
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	681b      	ldr	r3, [r3, #0]
 80091ce:	430a      	orrs	r2, r1
 80091d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d6:	4a58      	ldr	r2, [pc, #352]	; (8009338 <ADC_Init+0x1f4>)
 80091d8:	4293      	cmp	r3, r2
 80091da:	d022      	beq.n	8009222 <ADC_Init+0xde>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	689a      	ldr	r2, [r3, #8]
 80091e2:	687b      	ldr	r3, [r7, #4]
 80091e4:	681b      	ldr	r3, [r3, #0]
 80091e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80091ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	681b      	ldr	r3, [r3, #0]
 80091f0:	6899      	ldr	r1, [r3, #8]
 80091f2:	687b      	ldr	r3, [r7, #4]
 80091f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	430a      	orrs	r2, r1
 80091fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80091fe:	687b      	ldr	r3, [r7, #4]
 8009200:	681b      	ldr	r3, [r3, #0]
 8009202:	689a      	ldr	r2, [r3, #8]
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800920c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	6899      	ldr	r1, [r3, #8]
 8009214:	687b      	ldr	r3, [r7, #4]
 8009216:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8009218:	687b      	ldr	r3, [r7, #4]
 800921a:	681b      	ldr	r3, [r3, #0]
 800921c:	430a      	orrs	r2, r1
 800921e:	609a      	str	r2, [r3, #8]
 8009220:	e00f      	b.n	8009242 <ADC_Init+0xfe>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	681b      	ldr	r3, [r3, #0]
 8009226:	689a      	ldr	r2, [r3, #8]
 8009228:	687b      	ldr	r3, [r7, #4]
 800922a:	681b      	ldr	r3, [r3, #0]
 800922c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8009230:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8009232:	687b      	ldr	r3, [r7, #4]
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	689a      	ldr	r2, [r3, #8]
 8009238:	687b      	ldr	r3, [r7, #4]
 800923a:	681b      	ldr	r3, [r3, #0]
 800923c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8009240:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	689a      	ldr	r2, [r3, #8]
 8009248:	687b      	ldr	r3, [r7, #4]
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	f022 0202 	bic.w	r2, r2, #2
 8009250:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	681b      	ldr	r3, [r3, #0]
 8009256:	6899      	ldr	r1, [r3, #8]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	7e1b      	ldrb	r3, [r3, #24]
 800925c:	005a      	lsls	r2, r3, #1
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	430a      	orrs	r2, r1
 8009264:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8009266:	687b      	ldr	r3, [r7, #4]
 8009268:	f893 3020 	ldrb.w	r3, [r3, #32]
 800926c:	2b00      	cmp	r3, #0
 800926e:	d01b      	beq.n	80092a8 <ADC_Init+0x164>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	685a      	ldr	r2, [r3, #4]
 8009276:	687b      	ldr	r3, [r7, #4]
 8009278:	681b      	ldr	r3, [r3, #0]
 800927a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800927e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	685a      	ldr	r2, [r3, #4]
 8009286:	687b      	ldr	r3, [r7, #4]
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800928e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8009290:	687b      	ldr	r3, [r7, #4]
 8009292:	681b      	ldr	r3, [r3, #0]
 8009294:	6859      	ldr	r1, [r3, #4]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800929a:	3b01      	subs	r3, #1
 800929c:	035a      	lsls	r2, r3, #13
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	430a      	orrs	r2, r1
 80092a4:	605a      	str	r2, [r3, #4]
 80092a6:	e007      	b.n	80092b8 <ADC_Init+0x174>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	685a      	ldr	r2, [r3, #4]
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80092b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80092be:	687b      	ldr	r3, [r7, #4]
 80092c0:	681b      	ldr	r3, [r3, #0]
 80092c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80092c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	69db      	ldr	r3, [r3, #28]
 80092d2:	3b01      	subs	r3, #1
 80092d4:	051a      	lsls	r2, r3, #20
 80092d6:	687b      	ldr	r3, [r7, #4]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	430a      	orrs	r2, r1
 80092dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80092de:	687b      	ldr	r3, [r7, #4]
 80092e0:	681b      	ldr	r3, [r3, #0]
 80092e2:	689a      	ldr	r2, [r3, #8]
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	681b      	ldr	r3, [r3, #0]
 80092e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80092ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80092ee:	687b      	ldr	r3, [r7, #4]
 80092f0:	681b      	ldr	r3, [r3, #0]
 80092f2:	6899      	ldr	r1, [r3, #8]
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80092fa:	025a      	lsls	r2, r3, #9
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	681b      	ldr	r3, [r3, #0]
 8009300:	430a      	orrs	r2, r1
 8009302:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8009304:	687b      	ldr	r3, [r7, #4]
 8009306:	681b      	ldr	r3, [r3, #0]
 8009308:	689a      	ldr	r2, [r3, #8]
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	681b      	ldr	r3, [r3, #0]
 800930e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8009312:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	6899      	ldr	r1, [r3, #8]
 800931a:	687b      	ldr	r3, [r7, #4]
 800931c:	695b      	ldr	r3, [r3, #20]
 800931e:	029a      	lsls	r2, r3, #10
 8009320:	687b      	ldr	r3, [r7, #4]
 8009322:	681b      	ldr	r3, [r3, #0]
 8009324:	430a      	orrs	r2, r1
 8009326:	609a      	str	r2, [r3, #8]
}
 8009328:	bf00      	nop
 800932a:	3714      	adds	r7, #20
 800932c:	46bd      	mov	sp, r7
 800932e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009332:	4770      	bx	lr
 8009334:	40012300 	.word	0x40012300
 8009338:	0f000001 	.word	0x0f000001

0800933c <ADC_DMAConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAConvCplt(DMA_HandleTypeDef *hdma)   
{
 800933c:	b580      	push	{r7, lr}
 800933e:	b084      	sub	sp, #16
 8009340:	af00      	add	r7, sp, #0
 8009342:	6078      	str	r0, [r7, #4]
  /* Retrieve ADC handle corresponding to current DMA handle */
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 8009344:	687b      	ldr	r3, [r7, #4]
 8009346:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009348:	60fb      	str	r3, [r7, #12]
  
  /* Update state machine on conversion status if not in error state */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL | HAL_ADC_STATE_ERROR_DMA))
 800934a:	68fb      	ldr	r3, [r7, #12]
 800934c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800934e:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8009352:	2b00      	cmp	r3, #0
 8009354:	d13c      	bne.n	80093d0 <ADC_DMAConvCplt+0x94>
  {
    /* Update ADC state machine */
    SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 8009356:	68fb      	ldr	r3, [r7, #12]
 8009358:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800935a:	f443 7200 	orr.w	r2, r3, #512	; 0x200
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	641a      	str	r2, [r3, #64]	; 0x40
    /* by external trigger, continuous mode or scan sequence on going.      */
    /* Note: On STM32F4, there is no independent flag of end of sequence.   */
    /*       The test of scan sequence on going is done either with scan    */
    /*       sequence disabled or with end of conversion flag set to        */
    /*       of end of sequence.                                            */
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009362:	68fb      	ldr	r3, [r7, #12]
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	689b      	ldr	r3, [r3, #8]
 8009368:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800936c:	2b00      	cmp	r3, #0
 800936e:	d12b      	bne.n	80093c8 <ADC_DMAConvCplt+0x8c>
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009370:	68fb      	ldr	r3, [r7, #12]
 8009372:	7e1b      	ldrb	r3, [r3, #24]
    if(ADC_IS_SOFTWARE_START_REGULAR(hadc)                   &&
 8009374:	2b00      	cmp	r3, #0
 8009376:	d127      	bne.n	80093c8 <ADC_DMAConvCplt+0x8c>
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	681b      	ldr	r3, [r3, #0]
 800937c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800937e:	f403 0370 	and.w	r3, r3, #15728640	; 0xf00000
       (hadc->Init.ContinuousConvMode == DISABLE)            &&
 8009382:	2b00      	cmp	r3, #0
 8009384:	d006      	beq.n	8009394 <ADC_DMAConvCplt+0x58>
        HAL_IS_BIT_CLR(hadc->Instance->CR2, ADC_CR2_EOCS)  )   )
 8009386:	68fb      	ldr	r3, [r7, #12]
 8009388:	681b      	ldr	r3, [r3, #0]
 800938a:	689b      	ldr	r3, [r3, #8]
 800938c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
       (HAL_IS_BIT_CLR(hadc->Instance->SQR1, ADC_SQR1_L) || 
 8009390:	2b00      	cmp	r3, #0
 8009392:	d119      	bne.n	80093c8 <ADC_DMAConvCplt+0x8c>
    {
      /* Disable ADC end of single conversion interrupt on group regular */
      /* Note: Overrun interrupt was enabled with EOC interrupt in          */
      /* HAL_ADC_Start_IT(), but is not disabled here because can be used   */
      /* by overrun IRQ process below.                                      */
      __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC);
 8009394:	68fb      	ldr	r3, [r7, #12]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	685a      	ldr	r2, [r3, #4]
 800939a:	68fb      	ldr	r3, [r7, #12]
 800939c:	681b      	ldr	r3, [r3, #0]
 800939e:	f022 0220 	bic.w	r2, r2, #32
 80093a2:	605a      	str	r2, [r3, #4]
      
      /* Set ADC state */
      CLEAR_BIT(hadc->State, HAL_ADC_STATE_REG_BUSY);   
 80093a4:	68fb      	ldr	r3, [r7, #12]
 80093a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093a8:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80093ac:	68fb      	ldr	r3, [r7, #12]
 80093ae:	641a      	str	r2, [r3, #64]	; 0x40
      
      if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 80093b0:	68fb      	ldr	r3, [r7, #12]
 80093b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093b4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	d105      	bne.n	80093c8 <ADC_DMAConvCplt+0x8c>
      {
        SET_BIT(hadc->State, HAL_ADC_STATE_READY);
 80093bc:	68fb      	ldr	r3, [r7, #12]
 80093be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093c0:	f043 0201 	orr.w	r2, r3, #1
 80093c4:	68fb      	ldr	r3, [r7, #12]
 80093c6:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Conversion complete callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
    hadc->ConvCpltCallback(hadc);
#else
    HAL_ADC_ConvCpltCallback(hadc);
 80093c8:	68f8      	ldr	r0, [r7, #12]
 80093ca:	f7ff fd7b 	bl	8008ec4 <HAL_ADC_ConvCpltCallback>
	{
      /* Call DMA error callback */
      hadc->DMA_Handle->XferErrorCallback(hdma);
    }
  }
}
 80093ce:	e00e      	b.n	80093ee <ADC_DMAConvCplt+0xb2>
    if ((hadc->State & HAL_ADC_STATE_ERROR_INTERNAL) != 0UL)
 80093d0:	68fb      	ldr	r3, [r7, #12]
 80093d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80093d4:	f003 0310 	and.w	r3, r3, #16
 80093d8:	2b00      	cmp	r3, #0
 80093da:	d003      	beq.n	80093e4 <ADC_DMAConvCplt+0xa8>
      HAL_ADC_ErrorCallback(hadc);
 80093dc:	68f8      	ldr	r0, [r7, #12]
 80093de:	f7ff fd85 	bl	8008eec <HAL_ADC_ErrorCallback>
}
 80093e2:	e004      	b.n	80093ee <ADC_DMAConvCplt+0xb2>
      hadc->DMA_Handle->XferErrorCallback(hdma);
 80093e4:	68fb      	ldr	r3, [r7, #12]
 80093e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093e8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80093ea:	6878      	ldr	r0, [r7, #4]
 80093ec:	4798      	blx	r3
}
 80093ee:	bf00      	nop
 80093f0:	3710      	adds	r7, #16
 80093f2:	46bd      	mov	sp, r7
 80093f4:	bd80      	pop	{r7, pc}

080093f6 <ADC_DMAHalfConvCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAHalfConvCplt(DMA_HandleTypeDef *hdma)   
{
 80093f6:	b580      	push	{r7, lr}
 80093f8:	b084      	sub	sp, #16
 80093fa:	af00      	add	r7, sp, #0
 80093fc:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 80093fe:	687b      	ldr	r3, [r7, #4]
 8009400:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009402:	60fb      	str	r3, [r7, #12]
   /* Half conversion callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ConvHalfCpltCallback(hadc);
#else
  HAL_ADC_ConvHalfCpltCallback(hadc);
 8009404:	68f8      	ldr	r0, [r7, #12]
 8009406:	f7ff fd67 	bl	8008ed8 <HAL_ADC_ConvHalfCpltCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 800940a:	bf00      	nop
 800940c:	3710      	adds	r7, #16
 800940e:	46bd      	mov	sp, r7
 8009410:	bd80      	pop	{r7, pc}

08009412 <ADC_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void ADC_DMAError(DMA_HandleTypeDef *hdma)   
{
 8009412:	b580      	push	{r7, lr}
 8009414:	b084      	sub	sp, #16
 8009416:	af00      	add	r7, sp, #0
 8009418:	6078      	str	r0, [r7, #4]
  ADC_HandleTypeDef* hadc = ( ADC_HandleTypeDef* )((DMA_HandleTypeDef* )hdma)->Parent;
 800941a:	687b      	ldr	r3, [r7, #4]
 800941c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800941e:	60fb      	str	r3, [r7, #12]
  hadc->State= HAL_ADC_STATE_ERROR_DMA;
 8009420:	68fb      	ldr	r3, [r7, #12]
 8009422:	2240      	movs	r2, #64	; 0x40
 8009424:	641a      	str	r2, [r3, #64]	; 0x40
  /* Set ADC error code to DMA error */
  hadc->ErrorCode |= HAL_ADC_ERROR_DMA;
 8009426:	68fb      	ldr	r3, [r7, #12]
 8009428:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800942a:	f043 0204 	orr.w	r2, r3, #4
 800942e:	68fb      	ldr	r3, [r7, #12]
 8009430:	645a      	str	r2, [r3, #68]	; 0x44
   /* Error callback */
#if (USE_HAL_ADC_REGISTER_CALLBACKS == 1)
  hadc->ErrorCallback(hadc);
#else
  HAL_ADC_ErrorCallback(hadc);
 8009432:	68f8      	ldr	r0, [r7, #12]
 8009434:	f7ff fd5a 	bl	8008eec <HAL_ADC_ErrorCallback>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */
}
 8009438:	bf00      	nop
 800943a:	3710      	adds	r7, #16
 800943c:	46bd      	mov	sp, r7
 800943e:	bd80      	pop	{r7, pc}

08009440 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8009440:	b480      	push	{r7}
 8009442:	b085      	sub	sp, #20
 8009444:	af00      	add	r7, sp, #0
 8009446:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8009448:	687b      	ldr	r3, [r7, #4]
 800944a:	f003 0307 	and.w	r3, r3, #7
 800944e:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8009450:	4b0c      	ldr	r3, [pc, #48]	; (8009484 <__NVIC_SetPriorityGrouping+0x44>)
 8009452:	68db      	ldr	r3, [r3, #12]
 8009454:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8009456:	68ba      	ldr	r2, [r7, #8]
 8009458:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 800945c:	4013      	ands	r3, r2
 800945e:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8009460:	68fb      	ldr	r3, [r7, #12]
 8009462:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8009464:	68bb      	ldr	r3, [r7, #8]
 8009466:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8009468:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 800946c:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8009470:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8009472:	4a04      	ldr	r2, [pc, #16]	; (8009484 <__NVIC_SetPriorityGrouping+0x44>)
 8009474:	68bb      	ldr	r3, [r7, #8]
 8009476:	60d3      	str	r3, [r2, #12]
}
 8009478:	bf00      	nop
 800947a:	3714      	adds	r7, #20
 800947c:	46bd      	mov	sp, r7
 800947e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009482:	4770      	bx	lr
 8009484:	e000ed00 	.word	0xe000ed00

08009488 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8009488:	b480      	push	{r7}
 800948a:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 800948c:	4b04      	ldr	r3, [pc, #16]	; (80094a0 <__NVIC_GetPriorityGrouping+0x18>)
 800948e:	68db      	ldr	r3, [r3, #12]
 8009490:	0a1b      	lsrs	r3, r3, #8
 8009492:	f003 0307 	and.w	r3, r3, #7
}
 8009496:	4618      	mov	r0, r3
 8009498:	46bd      	mov	sp, r7
 800949a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800949e:	4770      	bx	lr
 80094a0:	e000ed00 	.word	0xe000ed00

080094a4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80094a4:	b480      	push	{r7}
 80094a6:	b083      	sub	sp, #12
 80094a8:	af00      	add	r7, sp, #0
 80094aa:	4603      	mov	r3, r0
 80094ac:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80094ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	db0b      	blt.n	80094ce <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80094b6:	79fb      	ldrb	r3, [r7, #7]
 80094b8:	f003 021f 	and.w	r2, r3, #31
 80094bc:	4907      	ldr	r1, [pc, #28]	; (80094dc <__NVIC_EnableIRQ+0x38>)
 80094be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094c2:	095b      	lsrs	r3, r3, #5
 80094c4:	2001      	movs	r0, #1
 80094c6:	fa00 f202 	lsl.w	r2, r0, r2
 80094ca:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80094ce:	bf00      	nop
 80094d0:	370c      	adds	r7, #12
 80094d2:	46bd      	mov	sp, r7
 80094d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094d8:	4770      	bx	lr
 80094da:	bf00      	nop
 80094dc:	e000e100 	.word	0xe000e100

080094e0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80094e0:	b480      	push	{r7}
 80094e2:	b083      	sub	sp, #12
 80094e4:	af00      	add	r7, sp, #0
 80094e6:	4603      	mov	r3, r0
 80094e8:	6039      	str	r1, [r7, #0]
 80094ea:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80094ec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094f0:	2b00      	cmp	r3, #0
 80094f2:	db0a      	blt.n	800950a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80094f4:	683b      	ldr	r3, [r7, #0]
 80094f6:	b2da      	uxtb	r2, r3
 80094f8:	490c      	ldr	r1, [pc, #48]	; (800952c <__NVIC_SetPriority+0x4c>)
 80094fa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80094fe:	0112      	lsls	r2, r2, #4
 8009500:	b2d2      	uxtb	r2, r2
 8009502:	440b      	add	r3, r1
 8009504:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8009508:	e00a      	b.n	8009520 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	b2da      	uxtb	r2, r3
 800950e:	4908      	ldr	r1, [pc, #32]	; (8009530 <__NVIC_SetPriority+0x50>)
 8009510:	79fb      	ldrb	r3, [r7, #7]
 8009512:	f003 030f 	and.w	r3, r3, #15
 8009516:	3b04      	subs	r3, #4
 8009518:	0112      	lsls	r2, r2, #4
 800951a:	b2d2      	uxtb	r2, r2
 800951c:	440b      	add	r3, r1
 800951e:	761a      	strb	r2, [r3, #24]
}
 8009520:	bf00      	nop
 8009522:	370c      	adds	r7, #12
 8009524:	46bd      	mov	sp, r7
 8009526:	f85d 7b04 	ldr.w	r7, [sp], #4
 800952a:	4770      	bx	lr
 800952c:	e000e100 	.word	0xe000e100
 8009530:	e000ed00 	.word	0xe000ed00

08009534 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8009534:	b480      	push	{r7}
 8009536:	b089      	sub	sp, #36	; 0x24
 8009538:	af00      	add	r7, sp, #0
 800953a:	60f8      	str	r0, [r7, #12]
 800953c:	60b9      	str	r1, [r7, #8]
 800953e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8009540:	68fb      	ldr	r3, [r7, #12]
 8009542:	f003 0307 	and.w	r3, r3, #7
 8009546:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8009548:	69fb      	ldr	r3, [r7, #28]
 800954a:	f1c3 0307 	rsb	r3, r3, #7
 800954e:	2b04      	cmp	r3, #4
 8009550:	bf28      	it	cs
 8009552:	2304      	movcs	r3, #4
 8009554:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8009556:	69fb      	ldr	r3, [r7, #28]
 8009558:	3304      	adds	r3, #4
 800955a:	2b06      	cmp	r3, #6
 800955c:	d902      	bls.n	8009564 <NVIC_EncodePriority+0x30>
 800955e:	69fb      	ldr	r3, [r7, #28]
 8009560:	3b03      	subs	r3, #3
 8009562:	e000      	b.n	8009566 <NVIC_EncodePriority+0x32>
 8009564:	2300      	movs	r3, #0
 8009566:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8009568:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800956c:	69bb      	ldr	r3, [r7, #24]
 800956e:	fa02 f303 	lsl.w	r3, r2, r3
 8009572:	43da      	mvns	r2, r3
 8009574:	68bb      	ldr	r3, [r7, #8]
 8009576:	401a      	ands	r2, r3
 8009578:	697b      	ldr	r3, [r7, #20]
 800957a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 800957c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	fa01 f303 	lsl.w	r3, r1, r3
 8009586:	43d9      	mvns	r1, r3
 8009588:	687b      	ldr	r3, [r7, #4]
 800958a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800958c:	4313      	orrs	r3, r2
         );
}
 800958e:	4618      	mov	r0, r3
 8009590:	3724      	adds	r7, #36	; 0x24
 8009592:	46bd      	mov	sp, r7
 8009594:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009598:	4770      	bx	lr

0800959a <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800959a:	b580      	push	{r7, lr}
 800959c:	b082      	sub	sp, #8
 800959e:	af00      	add	r7, sp, #0
 80095a0:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80095a2:	6878      	ldr	r0, [r7, #4]
 80095a4:	f7ff ff4c 	bl	8009440 <__NVIC_SetPriorityGrouping>
}
 80095a8:	bf00      	nop
 80095aa:	3708      	adds	r7, #8
 80095ac:	46bd      	mov	sp, r7
 80095ae:	bd80      	pop	{r7, pc}

080095b0 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80095b0:	b580      	push	{r7, lr}
 80095b2:	b086      	sub	sp, #24
 80095b4:	af00      	add	r7, sp, #0
 80095b6:	4603      	mov	r3, r0
 80095b8:	60b9      	str	r1, [r7, #8]
 80095ba:	607a      	str	r2, [r7, #4]
 80095bc:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80095be:	2300      	movs	r3, #0
 80095c0:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80095c2:	f7ff ff61 	bl	8009488 <__NVIC_GetPriorityGrouping>
 80095c6:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80095c8:	687a      	ldr	r2, [r7, #4]
 80095ca:	68b9      	ldr	r1, [r7, #8]
 80095cc:	6978      	ldr	r0, [r7, #20]
 80095ce:	f7ff ffb1 	bl	8009534 <NVIC_EncodePriority>
 80095d2:	4602      	mov	r2, r0
 80095d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80095d8:	4611      	mov	r1, r2
 80095da:	4618      	mov	r0, r3
 80095dc:	f7ff ff80 	bl	80094e0 <__NVIC_SetPriority>
}
 80095e0:	bf00      	nop
 80095e2:	3718      	adds	r7, #24
 80095e4:	46bd      	mov	sp, r7
 80095e6:	bd80      	pop	{r7, pc}

080095e8 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80095e8:	b580      	push	{r7, lr}
 80095ea:	b082      	sub	sp, #8
 80095ec:	af00      	add	r7, sp, #0
 80095ee:	4603      	mov	r3, r0
 80095f0:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80095f2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80095f6:	4618      	mov	r0, r3
 80095f8:	f7ff ff54 	bl	80094a4 <__NVIC_EnableIRQ>
}
 80095fc:	bf00      	nop
 80095fe:	3708      	adds	r7, #8
 8009600:	46bd      	mov	sp, r7
 8009602:	bd80      	pop	{r7, pc}

08009604 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8009604:	b580      	push	{r7, lr}
 8009606:	b086      	sub	sp, #24
 8009608:	af00      	add	r7, sp, #0
 800960a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 800960c:	2300      	movs	r3, #0
 800960e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8009610:	f7ff fb12 	bl	8008c38 <HAL_GetTick>
 8009614:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8009616:	687b      	ldr	r3, [r7, #4]
 8009618:	2b00      	cmp	r3, #0
 800961a:	d101      	bne.n	8009620 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800961c:	2301      	movs	r3, #1
 800961e:	e099      	b.n	8009754 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8009620:	687b      	ldr	r3, [r7, #4]
 8009622:	2200      	movs	r2, #0
 8009624:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	2202      	movs	r2, #2
 800962c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8009630:	687b      	ldr	r3, [r7, #4]
 8009632:	681b      	ldr	r3, [r3, #0]
 8009634:	681a      	ldr	r2, [r3, #0]
 8009636:	687b      	ldr	r3, [r7, #4]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	f022 0201 	bic.w	r2, r2, #1
 800963e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009640:	e00f      	b.n	8009662 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8009642:	f7ff faf9 	bl	8008c38 <HAL_GetTick>
 8009646:	4602      	mov	r2, r0
 8009648:	693b      	ldr	r3, [r7, #16]
 800964a:	1ad3      	subs	r3, r2, r3
 800964c:	2b05      	cmp	r3, #5
 800964e:	d908      	bls.n	8009662 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8009650:	687b      	ldr	r3, [r7, #4]
 8009652:	2220      	movs	r2, #32
 8009654:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8009656:	687b      	ldr	r3, [r7, #4]
 8009658:	2203      	movs	r2, #3
 800965a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800965e:	2303      	movs	r3, #3
 8009660:	e078      	b.n	8009754 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8009662:	687b      	ldr	r3, [r7, #4]
 8009664:	681b      	ldr	r3, [r3, #0]
 8009666:	681b      	ldr	r3, [r3, #0]
 8009668:	f003 0301 	and.w	r3, r3, #1
 800966c:	2b00      	cmp	r3, #0
 800966e:	d1e8      	bne.n	8009642 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	681b      	ldr	r3, [r3, #0]
 8009674:	681b      	ldr	r3, [r3, #0]
 8009676:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8009678:	697a      	ldr	r2, [r7, #20]
 800967a:	4b38      	ldr	r3, [pc, #224]	; (800975c <HAL_DMA_Init+0x158>)
 800967c:	4013      	ands	r3, r2
 800967e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	685a      	ldr	r2, [r3, #4]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	689b      	ldr	r3, [r3, #8]
 8009688:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800968a:	687b      	ldr	r3, [r7, #4]
 800968c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800968e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	691b      	ldr	r3, [r3, #16]
 8009694:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8009696:	687b      	ldr	r3, [r7, #4]
 8009698:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800969a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800969c:	687b      	ldr	r3, [r7, #4]
 800969e:	699b      	ldr	r3, [r3, #24]
 80096a0:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80096a2:	687b      	ldr	r3, [r7, #4]
 80096a4:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80096a6:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	6a1b      	ldr	r3, [r3, #32]
 80096ac:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80096ae:	697a      	ldr	r2, [r7, #20]
 80096b0:	4313      	orrs	r3, r2
 80096b2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80096b4:	687b      	ldr	r3, [r7, #4]
 80096b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096b8:	2b04      	cmp	r3, #4
 80096ba:	d107      	bne.n	80096cc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80096bc:	687b      	ldr	r3, [r7, #4]
 80096be:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80096c0:	687b      	ldr	r3, [r7, #4]
 80096c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096c4:	4313      	orrs	r3, r2
 80096c6:	697a      	ldr	r2, [r7, #20]
 80096c8:	4313      	orrs	r3, r2
 80096ca:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80096cc:	687b      	ldr	r3, [r7, #4]
 80096ce:	681b      	ldr	r3, [r3, #0]
 80096d0:	697a      	ldr	r2, [r7, #20]
 80096d2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	695b      	ldr	r3, [r3, #20]
 80096da:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80096dc:	697b      	ldr	r3, [r7, #20]
 80096de:	f023 0307 	bic.w	r3, r3, #7
 80096e2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80096e4:	687b      	ldr	r3, [r7, #4]
 80096e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096e8:	697a      	ldr	r2, [r7, #20]
 80096ea:	4313      	orrs	r3, r2
 80096ec:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80096ee:	687b      	ldr	r3, [r7, #4]
 80096f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096f2:	2b04      	cmp	r3, #4
 80096f4:	d117      	bne.n	8009726 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80096fa:	697a      	ldr	r2, [r7, #20]
 80096fc:	4313      	orrs	r3, r2
 80096fe:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8009700:	687b      	ldr	r3, [r7, #4]
 8009702:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009704:	2b00      	cmp	r3, #0
 8009706:	d00e      	beq.n	8009726 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8009708:	6878      	ldr	r0, [r7, #4]
 800970a:	f000 fa6f 	bl	8009bec <DMA_CheckFifoParam>
 800970e:	4603      	mov	r3, r0
 8009710:	2b00      	cmp	r3, #0
 8009712:	d008      	beq.n	8009726 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8009714:	687b      	ldr	r3, [r7, #4]
 8009716:	2240      	movs	r2, #64	; 0x40
 8009718:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800971a:	687b      	ldr	r3, [r7, #4]
 800971c:	2201      	movs	r2, #1
 800971e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8009722:	2301      	movs	r3, #1
 8009724:	e016      	b.n	8009754 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8009726:	687b      	ldr	r3, [r7, #4]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	697a      	ldr	r2, [r7, #20]
 800972c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800972e:	6878      	ldr	r0, [r7, #4]
 8009730:	f000 fa26 	bl	8009b80 <DMA_CalcBaseAndBitshift>
 8009734:	4603      	mov	r3, r0
 8009736:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8009738:	687b      	ldr	r3, [r7, #4]
 800973a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800973c:	223f      	movs	r2, #63	; 0x3f
 800973e:	409a      	lsls	r2, r3
 8009740:	68fb      	ldr	r3, [r7, #12]
 8009742:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2200      	movs	r2, #0
 8009748:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	2201      	movs	r2, #1
 800974e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8009752:	2300      	movs	r3, #0
}
 8009754:	4618      	mov	r0, r3
 8009756:	3718      	adds	r7, #24
 8009758:	46bd      	mov	sp, r7
 800975a:	bd80      	pop	{r7, pc}
 800975c:	f010803f 	.word	0xf010803f

08009760 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009760:	b580      	push	{r7, lr}
 8009762:	b086      	sub	sp, #24
 8009764:	af00      	add	r7, sp, #0
 8009766:	60f8      	str	r0, [r7, #12]
 8009768:	60b9      	str	r1, [r7, #8]
 800976a:	607a      	str	r2, [r7, #4]
 800976c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800976e:	2300      	movs	r3, #0
 8009770:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009776:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800977e:	2b01      	cmp	r3, #1
 8009780:	d101      	bne.n	8009786 <HAL_DMA_Start_IT+0x26>
 8009782:	2302      	movs	r3, #2
 8009784:	e040      	b.n	8009808 <HAL_DMA_Start_IT+0xa8>
 8009786:	68fb      	ldr	r3, [r7, #12]
 8009788:	2201      	movs	r2, #1
 800978a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800978e:	68fb      	ldr	r3, [r7, #12]
 8009790:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8009794:	b2db      	uxtb	r3, r3
 8009796:	2b01      	cmp	r3, #1
 8009798:	d12f      	bne.n	80097fa <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	2202      	movs	r2, #2
 800979e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80097a2:	68fb      	ldr	r3, [r7, #12]
 80097a4:	2200      	movs	r2, #0
 80097a6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80097a8:	683b      	ldr	r3, [r7, #0]
 80097aa:	687a      	ldr	r2, [r7, #4]
 80097ac:	68b9      	ldr	r1, [r7, #8]
 80097ae:	68f8      	ldr	r0, [r7, #12]
 80097b0:	f000 f9b8 	bl	8009b24 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80097b8:	223f      	movs	r2, #63	; 0x3f
 80097ba:	409a      	lsls	r2, r3
 80097bc:	693b      	ldr	r3, [r7, #16]
 80097be:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	681a      	ldr	r2, [r3, #0]
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f042 0216 	orr.w	r2, r2, #22
 80097ce:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80097d0:	68fb      	ldr	r3, [r7, #12]
 80097d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d4:	2b00      	cmp	r3, #0
 80097d6:	d007      	beq.n	80097e8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80097d8:	68fb      	ldr	r3, [r7, #12]
 80097da:	681b      	ldr	r3, [r3, #0]
 80097dc:	681a      	ldr	r2, [r3, #0]
 80097de:	68fb      	ldr	r3, [r7, #12]
 80097e0:	681b      	ldr	r3, [r3, #0]
 80097e2:	f042 0208 	orr.w	r2, r2, #8
 80097e6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80097e8:	68fb      	ldr	r3, [r7, #12]
 80097ea:	681b      	ldr	r3, [r3, #0]
 80097ec:	681a      	ldr	r2, [r3, #0]
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	681b      	ldr	r3, [r3, #0]
 80097f2:	f042 0201 	orr.w	r2, r2, #1
 80097f6:	601a      	str	r2, [r3, #0]
 80097f8:	e005      	b.n	8009806 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80097fa:	68fb      	ldr	r3, [r7, #12]
 80097fc:	2200      	movs	r2, #0
 80097fe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8009802:	2302      	movs	r3, #2
 8009804:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8009806:	7dfb      	ldrb	r3, [r7, #23]
}
 8009808:	4618      	mov	r0, r3
 800980a:	3718      	adds	r7, #24
 800980c:	46bd      	mov	sp, r7
 800980e:	bd80      	pop	{r7, pc}

08009810 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8009810:	b580      	push	{r7, lr}
 8009812:	b086      	sub	sp, #24
 8009814:	af00      	add	r7, sp, #0
 8009816:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8009818:	2300      	movs	r3, #0
 800981a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 800981c:	4b92      	ldr	r3, [pc, #584]	; (8009a68 <HAL_DMA_IRQHandler+0x258>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a92      	ldr	r2, [pc, #584]	; (8009a6c <HAL_DMA_IRQHandler+0x25c>)
 8009822:	fba2 2303 	umull	r2, r3, r2, r3
 8009826:	0a9b      	lsrs	r3, r3, #10
 8009828:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800982e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8009830:	693b      	ldr	r3, [r7, #16]
 8009832:	681b      	ldr	r3, [r3, #0]
 8009834:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8009836:	687b      	ldr	r3, [r7, #4]
 8009838:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800983a:	2208      	movs	r2, #8
 800983c:	409a      	lsls	r2, r3
 800983e:	68fb      	ldr	r3, [r7, #12]
 8009840:	4013      	ands	r3, r2
 8009842:	2b00      	cmp	r3, #0
 8009844:	d01a      	beq.n	800987c <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8009846:	687b      	ldr	r3, [r7, #4]
 8009848:	681b      	ldr	r3, [r3, #0]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	f003 0304 	and.w	r3, r3, #4
 8009850:	2b00      	cmp	r3, #0
 8009852:	d013      	beq.n	800987c <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	681a      	ldr	r2, [r3, #0]
 800985a:	687b      	ldr	r3, [r7, #4]
 800985c:	681b      	ldr	r3, [r3, #0]
 800985e:	f022 0204 	bic.w	r2, r2, #4
 8009862:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8009864:	687b      	ldr	r3, [r7, #4]
 8009866:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009868:	2208      	movs	r2, #8
 800986a:	409a      	lsls	r2, r3
 800986c:	693b      	ldr	r3, [r7, #16]
 800986e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8009870:	687b      	ldr	r3, [r7, #4]
 8009872:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009874:	f043 0201 	orr.w	r2, r3, #1
 8009878:	687b      	ldr	r3, [r7, #4]
 800987a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009880:	2201      	movs	r2, #1
 8009882:	409a      	lsls	r2, r3
 8009884:	68fb      	ldr	r3, [r7, #12]
 8009886:	4013      	ands	r3, r2
 8009888:	2b00      	cmp	r3, #0
 800988a:	d012      	beq.n	80098b2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 800988c:	687b      	ldr	r3, [r7, #4]
 800988e:	681b      	ldr	r3, [r3, #0]
 8009890:	695b      	ldr	r3, [r3, #20]
 8009892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009896:	2b00      	cmp	r3, #0
 8009898:	d00b      	beq.n	80098b2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800989a:	687b      	ldr	r3, [r7, #4]
 800989c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800989e:	2201      	movs	r2, #1
 80098a0:	409a      	lsls	r2, r3
 80098a2:	693b      	ldr	r3, [r7, #16]
 80098a4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80098a6:	687b      	ldr	r3, [r7, #4]
 80098a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098aa:	f043 0202 	orr.w	r2, r3, #2
 80098ae:	687b      	ldr	r3, [r7, #4]
 80098b0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098b6:	2204      	movs	r2, #4
 80098b8:	409a      	lsls	r2, r3
 80098ba:	68fb      	ldr	r3, [r7, #12]
 80098bc:	4013      	ands	r3, r2
 80098be:	2b00      	cmp	r3, #0
 80098c0:	d012      	beq.n	80098e8 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80098c2:	687b      	ldr	r3, [r7, #4]
 80098c4:	681b      	ldr	r3, [r3, #0]
 80098c6:	681b      	ldr	r3, [r3, #0]
 80098c8:	f003 0302 	and.w	r3, r3, #2
 80098cc:	2b00      	cmp	r3, #0
 80098ce:	d00b      	beq.n	80098e8 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80098d0:	687b      	ldr	r3, [r7, #4]
 80098d2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098d4:	2204      	movs	r2, #4
 80098d6:	409a      	lsls	r2, r3
 80098d8:	693b      	ldr	r3, [r7, #16]
 80098da:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80098e0:	f043 0204 	orr.w	r2, r3, #4
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80098e8:	687b      	ldr	r3, [r7, #4]
 80098ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80098ec:	2210      	movs	r2, #16
 80098ee:	409a      	lsls	r2, r3
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	4013      	ands	r3, r2
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d043      	beq.n	8009980 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80098f8:	687b      	ldr	r3, [r7, #4]
 80098fa:	681b      	ldr	r3, [r3, #0]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f003 0308 	and.w	r3, r3, #8
 8009902:	2b00      	cmp	r3, #0
 8009904:	d03c      	beq.n	8009980 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8009906:	687b      	ldr	r3, [r7, #4]
 8009908:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800990a:	2210      	movs	r2, #16
 800990c:	409a      	lsls	r2, r3
 800990e:	693b      	ldr	r3, [r7, #16]
 8009910:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009912:	687b      	ldr	r3, [r7, #4]
 8009914:	681b      	ldr	r3, [r3, #0]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800991c:	2b00      	cmp	r3, #0
 800991e:	d018      	beq.n	8009952 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009920:	687b      	ldr	r3, [r7, #4]
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	681b      	ldr	r3, [r3, #0]
 8009926:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800992a:	2b00      	cmp	r3, #0
 800992c:	d108      	bne.n	8009940 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800992e:	687b      	ldr	r3, [r7, #4]
 8009930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009932:	2b00      	cmp	r3, #0
 8009934:	d024      	beq.n	8009980 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8009936:	687b      	ldr	r3, [r7, #4]
 8009938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800993a:	6878      	ldr	r0, [r7, #4]
 800993c:	4798      	blx	r3
 800993e:	e01f      	b.n	8009980 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8009940:	687b      	ldr	r3, [r7, #4]
 8009942:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009944:	2b00      	cmp	r3, #0
 8009946:	d01b      	beq.n	8009980 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800994c:	6878      	ldr	r0, [r7, #4]
 800994e:	4798      	blx	r3
 8009950:	e016      	b.n	8009980 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009952:	687b      	ldr	r3, [r7, #4]
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	681b      	ldr	r3, [r3, #0]
 8009958:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800995c:	2b00      	cmp	r3, #0
 800995e:	d107      	bne.n	8009970 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681a      	ldr	r2, [r3, #0]
 8009966:	687b      	ldr	r3, [r7, #4]
 8009968:	681b      	ldr	r3, [r3, #0]
 800996a:	f022 0208 	bic.w	r2, r2, #8
 800996e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8009970:	687b      	ldr	r3, [r7, #4]
 8009972:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009974:	2b00      	cmp	r3, #0
 8009976:	d003      	beq.n	8009980 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8009978:	687b      	ldr	r3, [r7, #4]
 800997a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800997c:	6878      	ldr	r0, [r7, #4]
 800997e:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009984:	2220      	movs	r2, #32
 8009986:	409a      	lsls	r2, r3
 8009988:	68fb      	ldr	r3, [r7, #12]
 800998a:	4013      	ands	r3, r2
 800998c:	2b00      	cmp	r3, #0
 800998e:	f000 808e 	beq.w	8009aae <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8009992:	687b      	ldr	r3, [r7, #4]
 8009994:	681b      	ldr	r3, [r3, #0]
 8009996:	681b      	ldr	r3, [r3, #0]
 8009998:	f003 0310 	and.w	r3, r3, #16
 800999c:	2b00      	cmp	r3, #0
 800999e:	f000 8086 	beq.w	8009aae <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099a6:	2220      	movs	r2, #32
 80099a8:	409a      	lsls	r2, r3
 80099aa:	693b      	ldr	r3, [r7, #16]
 80099ac:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80099b4:	b2db      	uxtb	r3, r3
 80099b6:	2b05      	cmp	r3, #5
 80099b8:	d136      	bne.n	8009a28 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	681a      	ldr	r2, [r3, #0]
 80099c0:	687b      	ldr	r3, [r7, #4]
 80099c2:	681b      	ldr	r3, [r3, #0]
 80099c4:	f022 0216 	bic.w	r2, r2, #22
 80099c8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80099ca:	687b      	ldr	r3, [r7, #4]
 80099cc:	681b      	ldr	r3, [r3, #0]
 80099ce:	695a      	ldr	r2, [r3, #20]
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80099d8:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80099da:	687b      	ldr	r3, [r7, #4]
 80099dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80099de:	2b00      	cmp	r3, #0
 80099e0:	d103      	bne.n	80099ea <HAL_DMA_IRQHandler+0x1da>
 80099e2:	687b      	ldr	r3, [r7, #4]
 80099e4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80099e6:	2b00      	cmp	r3, #0
 80099e8:	d007      	beq.n	80099fa <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80099ea:	687b      	ldr	r3, [r7, #4]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	681a      	ldr	r2, [r3, #0]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	f022 0208 	bic.w	r2, r2, #8
 80099f8:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80099fe:	223f      	movs	r2, #63	; 0x3f
 8009a00:	409a      	lsls	r2, r3
 8009a02:	693b      	ldr	r3, [r7, #16]
 8009a04:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8009a06:	687b      	ldr	r3, [r7, #4]
 8009a08:	2200      	movs	r2, #0
 8009a0a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8009a0e:	687b      	ldr	r3, [r7, #4]
 8009a10:	2201      	movs	r2, #1
 8009a12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8009a16:	687b      	ldr	r3, [r7, #4]
 8009a18:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a1a:	2b00      	cmp	r3, #0
 8009a1c:	d07d      	beq.n	8009b1a <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a22:	6878      	ldr	r0, [r7, #4]
 8009a24:	4798      	blx	r3
        }
        return;
 8009a26:	e078      	b.n	8009b1a <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	681b      	ldr	r3, [r3, #0]
 8009a2e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009a32:	2b00      	cmp	r3, #0
 8009a34:	d01c      	beq.n	8009a70 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	681b      	ldr	r3, [r3, #0]
 8009a3c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009a40:	2b00      	cmp	r3, #0
 8009a42:	d108      	bne.n	8009a56 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8009a44:	687b      	ldr	r3, [r7, #4]
 8009a46:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a48:	2b00      	cmp	r3, #0
 8009a4a:	d030      	beq.n	8009aae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8009a50:	6878      	ldr	r0, [r7, #4]
 8009a52:	4798      	blx	r3
 8009a54:	e02b      	b.n	8009aae <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8009a56:	687b      	ldr	r3, [r7, #4]
 8009a58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a5a:	2b00      	cmp	r3, #0
 8009a5c:	d027      	beq.n	8009aae <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009a62:	6878      	ldr	r0, [r7, #4]
 8009a64:	4798      	blx	r3
 8009a66:	e022      	b.n	8009aae <HAL_DMA_IRQHandler+0x29e>
 8009a68:	20000004 	.word	0x20000004
 8009a6c:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	681b      	ldr	r3, [r3, #0]
 8009a76:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a7a:	2b00      	cmp	r3, #0
 8009a7c:	d10f      	bne.n	8009a9e <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8009a7e:	687b      	ldr	r3, [r7, #4]
 8009a80:	681b      	ldr	r3, [r3, #0]
 8009a82:	681a      	ldr	r2, [r3, #0]
 8009a84:	687b      	ldr	r3, [r7, #4]
 8009a86:	681b      	ldr	r3, [r3, #0]
 8009a88:	f022 0210 	bic.w	r2, r2, #16
 8009a8c:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8009a8e:	687b      	ldr	r3, [r7, #4]
 8009a90:	2200      	movs	r2, #0
 8009a92:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8009a96:	687b      	ldr	r3, [r7, #4]
 8009a98:	2201      	movs	r2, #1
 8009a9a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8009a9e:	687b      	ldr	r3, [r7, #4]
 8009aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aa2:	2b00      	cmp	r3, #0
 8009aa4:	d003      	beq.n	8009aae <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8009aa6:	687b      	ldr	r3, [r7, #4]
 8009aa8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009aaa:	6878      	ldr	r0, [r7, #4]
 8009aac:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ab2:	2b00      	cmp	r3, #0
 8009ab4:	d032      	beq.n	8009b1c <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8009ab6:	687b      	ldr	r3, [r7, #4]
 8009ab8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009aba:	f003 0301 	and.w	r3, r3, #1
 8009abe:	2b00      	cmp	r3, #0
 8009ac0:	d022      	beq.n	8009b08 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	2205      	movs	r2, #5
 8009ac6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8009aca:	687b      	ldr	r3, [r7, #4]
 8009acc:	681b      	ldr	r3, [r3, #0]
 8009ace:	681a      	ldr	r2, [r3, #0]
 8009ad0:	687b      	ldr	r3, [r7, #4]
 8009ad2:	681b      	ldr	r3, [r3, #0]
 8009ad4:	f022 0201 	bic.w	r2, r2, #1
 8009ad8:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8009ada:	68bb      	ldr	r3, [r7, #8]
 8009adc:	3301      	adds	r3, #1
 8009ade:	60bb      	str	r3, [r7, #8]
 8009ae0:	697a      	ldr	r2, [r7, #20]
 8009ae2:	429a      	cmp	r2, r3
 8009ae4:	d307      	bcc.n	8009af6 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8009ae6:	687b      	ldr	r3, [r7, #4]
 8009ae8:	681b      	ldr	r3, [r3, #0]
 8009aea:	681b      	ldr	r3, [r3, #0]
 8009aec:	f003 0301 	and.w	r3, r3, #1
 8009af0:	2b00      	cmp	r3, #0
 8009af2:	d1f2      	bne.n	8009ada <HAL_DMA_IRQHandler+0x2ca>
 8009af4:	e000      	b.n	8009af8 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8009af6:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2200      	movs	r2, #0
 8009afc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8009b00:	687b      	ldr	r3, [r7, #4]
 8009b02:	2201      	movs	r2, #1
 8009b04:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b0c:	2b00      	cmp	r3, #0
 8009b0e:	d005      	beq.n	8009b1c <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8009b10:	687b      	ldr	r3, [r7, #4]
 8009b12:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009b14:	6878      	ldr	r0, [r7, #4]
 8009b16:	4798      	blx	r3
 8009b18:	e000      	b.n	8009b1c <HAL_DMA_IRQHandler+0x30c>
        return;
 8009b1a:	bf00      	nop
    }
  }
}
 8009b1c:	3718      	adds	r7, #24
 8009b1e:	46bd      	mov	sp, r7
 8009b20:	bd80      	pop	{r7, pc}
 8009b22:	bf00      	nop

08009b24 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8009b24:	b480      	push	{r7}
 8009b26:	b085      	sub	sp, #20
 8009b28:	af00      	add	r7, sp, #0
 8009b2a:	60f8      	str	r0, [r7, #12]
 8009b2c:	60b9      	str	r1, [r7, #8]
 8009b2e:	607a      	str	r2, [r7, #4]
 8009b30:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	681a      	ldr	r2, [r3, #0]
 8009b38:	68fb      	ldr	r3, [r7, #12]
 8009b3a:	681b      	ldr	r3, [r3, #0]
 8009b3c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8009b40:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8009b42:	68fb      	ldr	r3, [r7, #12]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	683a      	ldr	r2, [r7, #0]
 8009b48:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8009b4a:	68fb      	ldr	r3, [r7, #12]
 8009b4c:	689b      	ldr	r3, [r3, #8]
 8009b4e:	2b40      	cmp	r3, #64	; 0x40
 8009b50:	d108      	bne.n	8009b64 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	681b      	ldr	r3, [r3, #0]
 8009b56:	687a      	ldr	r2, [r7, #4]
 8009b58:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	681b      	ldr	r3, [r3, #0]
 8009b5e:	68ba      	ldr	r2, [r7, #8]
 8009b60:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8009b62:	e007      	b.n	8009b74 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8009b64:	68fb      	ldr	r3, [r7, #12]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	68ba      	ldr	r2, [r7, #8]
 8009b6a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	681b      	ldr	r3, [r3, #0]
 8009b70:	687a      	ldr	r2, [r7, #4]
 8009b72:	60da      	str	r2, [r3, #12]
}
 8009b74:	bf00      	nop
 8009b76:	3714      	adds	r7, #20
 8009b78:	46bd      	mov	sp, r7
 8009b7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7e:	4770      	bx	lr

08009b80 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8009b80:	b480      	push	{r7}
 8009b82:	b085      	sub	sp, #20
 8009b84:	af00      	add	r7, sp, #0
 8009b86:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8009b88:	687b      	ldr	r3, [r7, #4]
 8009b8a:	681b      	ldr	r3, [r3, #0]
 8009b8c:	b2db      	uxtb	r3, r3
 8009b8e:	3b10      	subs	r3, #16
 8009b90:	4a14      	ldr	r2, [pc, #80]	; (8009be4 <DMA_CalcBaseAndBitshift+0x64>)
 8009b92:	fba2 2303 	umull	r2, r3, r2, r3
 8009b96:	091b      	lsrs	r3, r3, #4
 8009b98:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8009b9a:	4a13      	ldr	r2, [pc, #76]	; (8009be8 <DMA_CalcBaseAndBitshift+0x68>)
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	4413      	add	r3, r2
 8009ba0:	781b      	ldrb	r3, [r3, #0]
 8009ba2:	461a      	mov	r2, r3
 8009ba4:	687b      	ldr	r3, [r7, #4]
 8009ba6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	2b03      	cmp	r3, #3
 8009bac:	d909      	bls.n	8009bc2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009bb6:	f023 0303 	bic.w	r3, r3, #3
 8009bba:	1d1a      	adds	r2, r3, #4
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	659a      	str	r2, [r3, #88]	; 0x58
 8009bc0:	e007      	b.n	8009bd2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8009bca:	f023 0303 	bic.w	r3, r3, #3
 8009bce:	687a      	ldr	r2, [r7, #4]
 8009bd0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8009bd6:	4618      	mov	r0, r3
 8009bd8:	3714      	adds	r7, #20
 8009bda:	46bd      	mov	sp, r7
 8009bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009be0:	4770      	bx	lr
 8009be2:	bf00      	nop
 8009be4:	aaaaaaab 	.word	0xaaaaaaab
 8009be8:	08052138 	.word	0x08052138

08009bec <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8009bec:	b480      	push	{r7}
 8009bee:	b085      	sub	sp, #20
 8009bf0:	af00      	add	r7, sp, #0
 8009bf2:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009bf4:	2300      	movs	r3, #0
 8009bf6:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8009bf8:	687b      	ldr	r3, [r7, #4]
 8009bfa:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009bfc:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8009bfe:	687b      	ldr	r3, [r7, #4]
 8009c00:	699b      	ldr	r3, [r3, #24]
 8009c02:	2b00      	cmp	r3, #0
 8009c04:	d11f      	bne.n	8009c46 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8009c06:	68bb      	ldr	r3, [r7, #8]
 8009c08:	2b03      	cmp	r3, #3
 8009c0a:	d855      	bhi.n	8009cb8 <DMA_CheckFifoParam+0xcc>
 8009c0c:	a201      	add	r2, pc, #4	; (adr r2, 8009c14 <DMA_CheckFifoParam+0x28>)
 8009c0e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c12:	bf00      	nop
 8009c14:	08009c25 	.word	0x08009c25
 8009c18:	08009c37 	.word	0x08009c37
 8009c1c:	08009c25 	.word	0x08009c25
 8009c20:	08009cb9 	.word	0x08009cb9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c28:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d045      	beq.n	8009cbc <DMA_CheckFifoParam+0xd0>
      {
        status = HAL_ERROR;
 8009c30:	2301      	movs	r3, #1
 8009c32:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009c34:	e042      	b.n	8009cbc <DMA_CheckFifoParam+0xd0>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009c36:	687b      	ldr	r3, [r7, #4]
 8009c38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c3a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009c3e:	d13f      	bne.n	8009cc0 <DMA_CheckFifoParam+0xd4>
      {
        status = HAL_ERROR;
 8009c40:	2301      	movs	r3, #1
 8009c42:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009c44:	e03c      	b.n	8009cc0 <DMA_CheckFifoParam+0xd4>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	699b      	ldr	r3, [r3, #24]
 8009c4a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009c4e:	d121      	bne.n	8009c94 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8009c50:	68bb      	ldr	r3, [r7, #8]
 8009c52:	2b03      	cmp	r3, #3
 8009c54:	d836      	bhi.n	8009cc4 <DMA_CheckFifoParam+0xd8>
 8009c56:	a201      	add	r2, pc, #4	; (adr r2, 8009c5c <DMA_CheckFifoParam+0x70>)
 8009c58:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8009c5c:	08009c6d 	.word	0x08009c6d
 8009c60:	08009c73 	.word	0x08009c73
 8009c64:	08009c6d 	.word	0x08009c6d
 8009c68:	08009c85 	.word	0x08009c85
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8009c6c:	2301      	movs	r3, #1
 8009c6e:	73fb      	strb	r3, [r7, #15]
      break;
 8009c70:	e02f      	b.n	8009cd2 <DMA_CheckFifoParam+0xe6>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009c72:	687b      	ldr	r3, [r7, #4]
 8009c74:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c76:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009c7a:	2b00      	cmp	r3, #0
 8009c7c:	d024      	beq.n	8009cc8 <DMA_CheckFifoParam+0xdc>
      {
        status = HAL_ERROR;
 8009c7e:	2301      	movs	r3, #1
 8009c80:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8009c82:	e021      	b.n	8009cc8 <DMA_CheckFifoParam+0xdc>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8009c84:	687b      	ldr	r3, [r7, #4]
 8009c86:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009c88:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8009c8c:	d11e      	bne.n	8009ccc <DMA_CheckFifoParam+0xe0>
      {
        status = HAL_ERROR;
 8009c8e:	2301      	movs	r3, #1
 8009c90:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8009c92:	e01b      	b.n	8009ccc <DMA_CheckFifoParam+0xe0>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8009c94:	68bb      	ldr	r3, [r7, #8]
 8009c96:	2b02      	cmp	r3, #2
 8009c98:	d902      	bls.n	8009ca0 <DMA_CheckFifoParam+0xb4>
 8009c9a:	2b03      	cmp	r3, #3
 8009c9c:	d003      	beq.n	8009ca6 <DMA_CheckFifoParam+0xba>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8009c9e:	e018      	b.n	8009cd2 <DMA_CheckFifoParam+0xe6>
      status = HAL_ERROR;
 8009ca0:	2301      	movs	r3, #1
 8009ca2:	73fb      	strb	r3, [r7, #15]
      break;
 8009ca4:	e015      	b.n	8009cd2 <DMA_CheckFifoParam+0xe6>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8009ca6:	687b      	ldr	r3, [r7, #4]
 8009ca8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009caa:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009cae:	2b00      	cmp	r3, #0
 8009cb0:	d00e      	beq.n	8009cd0 <DMA_CheckFifoParam+0xe4>
        status = HAL_ERROR;
 8009cb2:	2301      	movs	r3, #1
 8009cb4:	73fb      	strb	r3, [r7, #15]
      break;
 8009cb6:	e00b      	b.n	8009cd0 <DMA_CheckFifoParam+0xe4>
      break;
 8009cb8:	bf00      	nop
 8009cba:	e00a      	b.n	8009cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8009cbc:	bf00      	nop
 8009cbe:	e008      	b.n	8009cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8009cc0:	bf00      	nop
 8009cc2:	e006      	b.n	8009cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8009cc4:	bf00      	nop
 8009cc6:	e004      	b.n	8009cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8009cc8:	bf00      	nop
 8009cca:	e002      	b.n	8009cd2 <DMA_CheckFifoParam+0xe6>
      break;   
 8009ccc:	bf00      	nop
 8009cce:	e000      	b.n	8009cd2 <DMA_CheckFifoParam+0xe6>
      break;
 8009cd0:	bf00      	nop
    }
  } 
  
  return status; 
 8009cd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8009cd4:	4618      	mov	r0, r3
 8009cd6:	3714      	adds	r7, #20
 8009cd8:	46bd      	mov	sp, r7
 8009cda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009cde:	4770      	bx	lr

08009ce0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8009ce0:	b580      	push	{r7, lr}
 8009ce2:	b086      	sub	sp, #24
 8009ce4:	af00      	add	r7, sp, #0
 8009ce6:	60f8      	str	r0, [r7, #12]
 8009ce8:	60b9      	str	r1, [r7, #8]
 8009cea:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8009cee:	2301      	movs	r3, #1
 8009cf0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8009cf2:	4b23      	ldr	r3, [pc, #140]	; (8009d80 <HAL_FLASH_Program+0xa0>)
 8009cf4:	7e1b      	ldrb	r3, [r3, #24]
 8009cf6:	2b01      	cmp	r3, #1
 8009cf8:	d101      	bne.n	8009cfe <HAL_FLASH_Program+0x1e>
 8009cfa:	2302      	movs	r3, #2
 8009cfc:	e03b      	b.n	8009d76 <HAL_FLASH_Program+0x96>
 8009cfe:	4b20      	ldr	r3, [pc, #128]	; (8009d80 <HAL_FLASH_Program+0xa0>)
 8009d00:	2201      	movs	r2, #1
 8009d02:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009d04:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009d08:	f000 f870 	bl	8009dec <FLASH_WaitForLastOperation>
 8009d0c:	4603      	mov	r3, r0
 8009d0e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8009d10:	7dfb      	ldrb	r3, [r7, #23]
 8009d12:	2b00      	cmp	r3, #0
 8009d14:	d12b      	bne.n	8009d6e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8009d16:	68fb      	ldr	r3, [r7, #12]
 8009d18:	2b00      	cmp	r3, #0
 8009d1a:	d105      	bne.n	8009d28 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8009d1c:	783b      	ldrb	r3, [r7, #0]
 8009d1e:	4619      	mov	r1, r3
 8009d20:	68b8      	ldr	r0, [r7, #8]
 8009d22:	f000 f919 	bl	8009f58 <FLASH_Program_Byte>
 8009d26:	e016      	b.n	8009d56 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	2b01      	cmp	r3, #1
 8009d2c:	d105      	bne.n	8009d3a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8009d2e:	883b      	ldrh	r3, [r7, #0]
 8009d30:	4619      	mov	r1, r3
 8009d32:	68b8      	ldr	r0, [r7, #8]
 8009d34:	f000 f8ec 	bl	8009f10 <FLASH_Program_HalfWord>
 8009d38:	e00d      	b.n	8009d56 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8009d3a:	68fb      	ldr	r3, [r7, #12]
 8009d3c:	2b02      	cmp	r3, #2
 8009d3e:	d105      	bne.n	8009d4c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8009d40:	683b      	ldr	r3, [r7, #0]
 8009d42:	4619      	mov	r1, r3
 8009d44:	68b8      	ldr	r0, [r7, #8]
 8009d46:	f000 f8c1 	bl	8009ecc <FLASH_Program_Word>
 8009d4a:	e004      	b.n	8009d56 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8009d4c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009d50:	68b8      	ldr	r0, [r7, #8]
 8009d52:	f000 f88b 	bl	8009e6c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8009d56:	f24c 3050 	movw	r0, #50000	; 0xc350
 8009d5a:	f000 f847 	bl	8009dec <FLASH_WaitForLastOperation>
 8009d5e:	4603      	mov	r3, r0
 8009d60:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8009d62:	4b08      	ldr	r3, [pc, #32]	; (8009d84 <HAL_FLASH_Program+0xa4>)
 8009d64:	691b      	ldr	r3, [r3, #16]
 8009d66:	4a07      	ldr	r2, [pc, #28]	; (8009d84 <HAL_FLASH_Program+0xa4>)
 8009d68:	f023 0301 	bic.w	r3, r3, #1
 8009d6c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8009d6e:	4b04      	ldr	r3, [pc, #16]	; (8009d80 <HAL_FLASH_Program+0xa0>)
 8009d70:	2200      	movs	r2, #0
 8009d72:	761a      	strb	r2, [r3, #24]
  
  return status;
 8009d74:	7dfb      	ldrb	r3, [r7, #23]
}
 8009d76:	4618      	mov	r0, r3
 8009d78:	3718      	adds	r7, #24
 8009d7a:	46bd      	mov	sp, r7
 8009d7c:	bd80      	pop	{r7, pc}
 8009d7e:	bf00      	nop
 8009d80:	20005728 	.word	0x20005728
 8009d84:	40023c00 	.word	0x40023c00

08009d88 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8009d88:	b480      	push	{r7}
 8009d8a:	b083      	sub	sp, #12
 8009d8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8009d8e:	2300      	movs	r3, #0
 8009d90:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009d92:	4b0b      	ldr	r3, [pc, #44]	; (8009dc0 <HAL_FLASH_Unlock+0x38>)
 8009d94:	691b      	ldr	r3, [r3, #16]
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	da0b      	bge.n	8009db2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8009d9a:	4b09      	ldr	r3, [pc, #36]	; (8009dc0 <HAL_FLASH_Unlock+0x38>)
 8009d9c:	4a09      	ldr	r2, [pc, #36]	; (8009dc4 <HAL_FLASH_Unlock+0x3c>)
 8009d9e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8009da0:	4b07      	ldr	r3, [pc, #28]	; (8009dc0 <HAL_FLASH_Unlock+0x38>)
 8009da2:	4a09      	ldr	r2, [pc, #36]	; (8009dc8 <HAL_FLASH_Unlock+0x40>)
 8009da4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8009da6:	4b06      	ldr	r3, [pc, #24]	; (8009dc0 <HAL_FLASH_Unlock+0x38>)
 8009da8:	691b      	ldr	r3, [r3, #16]
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	da01      	bge.n	8009db2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8009dae:	2301      	movs	r3, #1
 8009db0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8009db2:	79fb      	ldrb	r3, [r7, #7]
}
 8009db4:	4618      	mov	r0, r3
 8009db6:	370c      	adds	r7, #12
 8009db8:	46bd      	mov	sp, r7
 8009dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009dbe:	4770      	bx	lr
 8009dc0:	40023c00 	.word	0x40023c00
 8009dc4:	45670123 	.word	0x45670123
 8009dc8:	cdef89ab 	.word	0xcdef89ab

08009dcc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8009dcc:	b480      	push	{r7}
 8009dce:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8009dd0:	4b05      	ldr	r3, [pc, #20]	; (8009de8 <HAL_FLASH_Lock+0x1c>)
 8009dd2:	691b      	ldr	r3, [r3, #16]
 8009dd4:	4a04      	ldr	r2, [pc, #16]	; (8009de8 <HAL_FLASH_Lock+0x1c>)
 8009dd6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8009dda:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8009ddc:	2300      	movs	r3, #0
}
 8009dde:	4618      	mov	r0, r3
 8009de0:	46bd      	mov	sp, r7
 8009de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009de6:	4770      	bx	lr
 8009de8:	40023c00 	.word	0x40023c00

08009dec <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b084      	sub	sp, #16
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8009df4:	2300      	movs	r3, #0
 8009df6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8009df8:	4b1a      	ldr	r3, [pc, #104]	; (8009e64 <FLASH_WaitForLastOperation+0x78>)
 8009dfa:	2200      	movs	r2, #0
 8009dfc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8009dfe:	f7fe ff1b 	bl	8008c38 <HAL_GetTick>
 8009e02:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8009e04:	e010      	b.n	8009e28 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8009e06:	687b      	ldr	r3, [r7, #4]
 8009e08:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8009e0c:	d00c      	beq.n	8009e28 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8009e0e:	687b      	ldr	r3, [r7, #4]
 8009e10:	2b00      	cmp	r3, #0
 8009e12:	d007      	beq.n	8009e24 <FLASH_WaitForLastOperation+0x38>
 8009e14:	f7fe ff10 	bl	8008c38 <HAL_GetTick>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	68fb      	ldr	r3, [r7, #12]
 8009e1c:	1ad3      	subs	r3, r2, r3
 8009e1e:	687a      	ldr	r2, [r7, #4]
 8009e20:	429a      	cmp	r2, r3
 8009e22:	d201      	bcs.n	8009e28 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8009e24:	2303      	movs	r3, #3
 8009e26:	e019      	b.n	8009e5c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8009e28:	4b0f      	ldr	r3, [pc, #60]	; (8009e68 <FLASH_WaitForLastOperation+0x7c>)
 8009e2a:	68db      	ldr	r3, [r3, #12]
 8009e2c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009e30:	2b00      	cmp	r3, #0
 8009e32:	d1e8      	bne.n	8009e06 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8009e34:	4b0c      	ldr	r3, [pc, #48]	; (8009e68 <FLASH_WaitForLastOperation+0x7c>)
 8009e36:	68db      	ldr	r3, [r3, #12]
 8009e38:	f003 0301 	and.w	r3, r3, #1
 8009e3c:	2b00      	cmp	r3, #0
 8009e3e:	d002      	beq.n	8009e46 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8009e40:	4b09      	ldr	r3, [pc, #36]	; (8009e68 <FLASH_WaitForLastOperation+0x7c>)
 8009e42:	2201      	movs	r2, #1
 8009e44:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8009e46:	4b08      	ldr	r3, [pc, #32]	; (8009e68 <FLASH_WaitForLastOperation+0x7c>)
 8009e48:	68db      	ldr	r3, [r3, #12]
 8009e4a:	f403 73f9 	and.w	r3, r3, #498	; 0x1f2
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d003      	beq.n	8009e5a <FLASH_WaitForLastOperation+0x6e>
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8009e52:	f000 f8a3 	bl	8009f9c <FLASH_SetErrorCode>
    return HAL_ERROR;
 8009e56:	2301      	movs	r3, #1
 8009e58:	e000      	b.n	8009e5c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8009e5a:	2300      	movs	r3, #0
  
}  
 8009e5c:	4618      	mov	r0, r3
 8009e5e:	3710      	adds	r7, #16
 8009e60:	46bd      	mov	sp, r7
 8009e62:	bd80      	pop	{r7, pc}
 8009e64:	20005728 	.word	0x20005728
 8009e68:	40023c00 	.word	0x40023c00

08009e6c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8009e6c:	b490      	push	{r4, r7}
 8009e6e:	b084      	sub	sp, #16
 8009e70:	af00      	add	r7, sp, #0
 8009e72:	60f8      	str	r0, [r7, #12]
 8009e74:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009e78:	4b13      	ldr	r3, [pc, #76]	; (8009ec8 <FLASH_Program_DoubleWord+0x5c>)
 8009e7a:	691b      	ldr	r3, [r3, #16]
 8009e7c:	4a12      	ldr	r2, [pc, #72]	; (8009ec8 <FLASH_Program_DoubleWord+0x5c>)
 8009e7e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009e82:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8009e84:	4b10      	ldr	r3, [pc, #64]	; (8009ec8 <FLASH_Program_DoubleWord+0x5c>)
 8009e86:	691b      	ldr	r3, [r3, #16]
 8009e88:	4a0f      	ldr	r2, [pc, #60]	; (8009ec8 <FLASH_Program_DoubleWord+0x5c>)
 8009e8a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8009e8e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009e90:	4b0d      	ldr	r3, [pc, #52]	; (8009ec8 <FLASH_Program_DoubleWord+0x5c>)
 8009e92:	691b      	ldr	r3, [r3, #16]
 8009e94:	4a0c      	ldr	r2, [pc, #48]	; (8009ec8 <FLASH_Program_DoubleWord+0x5c>)
 8009e96:	f043 0301 	orr.w	r3, r3, #1
 8009e9a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8009e9c:	68fb      	ldr	r3, [r7, #12]
 8009e9e:	683a      	ldr	r2, [r7, #0]
 8009ea0:	601a      	str	r2, [r3, #0]
           so that all instructions following the ISB are fetched from cache or memory,
           after the instruction has been completed.
 */
__STATIC_FORCEINLINE void __ISB(void)
{
  __ASM volatile ("isb 0xF":::"memory");
 8009ea2:	f3bf 8f6f 	isb	sy
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8009ea6:	e9d7 1200 	ldrd	r1, r2, [r7]
 8009eaa:	f04f 0300 	mov.w	r3, #0
 8009eae:	f04f 0400 	mov.w	r4, #0
 8009eb2:	0013      	movs	r3, r2
 8009eb4:	2400      	movs	r4, #0
 8009eb6:	68fa      	ldr	r2, [r7, #12]
 8009eb8:	3204      	adds	r2, #4
 8009eba:	6013      	str	r3, [r2, #0]
}
 8009ebc:	bf00      	nop
 8009ebe:	3710      	adds	r7, #16
 8009ec0:	46bd      	mov	sp, r7
 8009ec2:	bc90      	pop	{r4, r7}
 8009ec4:	4770      	bx	lr
 8009ec6:	bf00      	nop
 8009ec8:	40023c00 	.word	0x40023c00

08009ecc <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8009ecc:	b480      	push	{r7}
 8009ece:	b083      	sub	sp, #12
 8009ed0:	af00      	add	r7, sp, #0
 8009ed2:	6078      	str	r0, [r7, #4]
 8009ed4:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009ed6:	4b0d      	ldr	r3, [pc, #52]	; (8009f0c <FLASH_Program_Word+0x40>)
 8009ed8:	691b      	ldr	r3, [r3, #16]
 8009eda:	4a0c      	ldr	r2, [pc, #48]	; (8009f0c <FLASH_Program_Word+0x40>)
 8009edc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009ee0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8009ee2:	4b0a      	ldr	r3, [pc, #40]	; (8009f0c <FLASH_Program_Word+0x40>)
 8009ee4:	691b      	ldr	r3, [r3, #16]
 8009ee6:	4a09      	ldr	r2, [pc, #36]	; (8009f0c <FLASH_Program_Word+0x40>)
 8009ee8:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8009eec:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009eee:	4b07      	ldr	r3, [pc, #28]	; (8009f0c <FLASH_Program_Word+0x40>)
 8009ef0:	691b      	ldr	r3, [r3, #16]
 8009ef2:	4a06      	ldr	r2, [pc, #24]	; (8009f0c <FLASH_Program_Word+0x40>)
 8009ef4:	f043 0301 	orr.w	r3, r3, #1
 8009ef8:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8009efa:	687b      	ldr	r3, [r7, #4]
 8009efc:	683a      	ldr	r2, [r7, #0]
 8009efe:	601a      	str	r2, [r3, #0]
}
 8009f00:	bf00      	nop
 8009f02:	370c      	adds	r7, #12
 8009f04:	46bd      	mov	sp, r7
 8009f06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f0a:	4770      	bx	lr
 8009f0c:	40023c00 	.word	0x40023c00

08009f10 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8009f10:	b480      	push	{r7}
 8009f12:	b083      	sub	sp, #12
 8009f14:	af00      	add	r7, sp, #0
 8009f16:	6078      	str	r0, [r7, #4]
 8009f18:	460b      	mov	r3, r1
 8009f1a:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009f1c:	4b0d      	ldr	r3, [pc, #52]	; (8009f54 <FLASH_Program_HalfWord+0x44>)
 8009f1e:	691b      	ldr	r3, [r3, #16]
 8009f20:	4a0c      	ldr	r2, [pc, #48]	; (8009f54 <FLASH_Program_HalfWord+0x44>)
 8009f22:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f26:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8009f28:	4b0a      	ldr	r3, [pc, #40]	; (8009f54 <FLASH_Program_HalfWord+0x44>)
 8009f2a:	691b      	ldr	r3, [r3, #16]
 8009f2c:	4a09      	ldr	r2, [pc, #36]	; (8009f54 <FLASH_Program_HalfWord+0x44>)
 8009f2e:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009f32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009f34:	4b07      	ldr	r3, [pc, #28]	; (8009f54 <FLASH_Program_HalfWord+0x44>)
 8009f36:	691b      	ldr	r3, [r3, #16]
 8009f38:	4a06      	ldr	r2, [pc, #24]	; (8009f54 <FLASH_Program_HalfWord+0x44>)
 8009f3a:	f043 0301 	orr.w	r3, r3, #1
 8009f3e:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8009f40:	687b      	ldr	r3, [r7, #4]
 8009f42:	887a      	ldrh	r2, [r7, #2]
 8009f44:	801a      	strh	r2, [r3, #0]
}
 8009f46:	bf00      	nop
 8009f48:	370c      	adds	r7, #12
 8009f4a:	46bd      	mov	sp, r7
 8009f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f50:	4770      	bx	lr
 8009f52:	bf00      	nop
 8009f54:	40023c00 	.word	0x40023c00

08009f58 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8009f58:	b480      	push	{r7}
 8009f5a:	b083      	sub	sp, #12
 8009f5c:	af00      	add	r7, sp, #0
 8009f5e:	6078      	str	r0, [r7, #4]
 8009f60:	460b      	mov	r3, r1
 8009f62:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8009f64:	4b0c      	ldr	r3, [pc, #48]	; (8009f98 <FLASH_Program_Byte+0x40>)
 8009f66:	691b      	ldr	r3, [r3, #16]
 8009f68:	4a0b      	ldr	r2, [pc, #44]	; (8009f98 <FLASH_Program_Byte+0x40>)
 8009f6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009f6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8009f70:	4b09      	ldr	r3, [pc, #36]	; (8009f98 <FLASH_Program_Byte+0x40>)
 8009f72:	4a09      	ldr	r2, [pc, #36]	; (8009f98 <FLASH_Program_Byte+0x40>)
 8009f74:	691b      	ldr	r3, [r3, #16]
 8009f76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8009f78:	4b07      	ldr	r3, [pc, #28]	; (8009f98 <FLASH_Program_Byte+0x40>)
 8009f7a:	691b      	ldr	r3, [r3, #16]
 8009f7c:	4a06      	ldr	r2, [pc, #24]	; (8009f98 <FLASH_Program_Byte+0x40>)
 8009f7e:	f043 0301 	orr.w	r3, r3, #1
 8009f82:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8009f84:	687b      	ldr	r3, [r7, #4]
 8009f86:	78fa      	ldrb	r2, [r7, #3]
 8009f88:	701a      	strb	r2, [r3, #0]
}
 8009f8a:	bf00      	nop
 8009f8c:	370c      	adds	r7, #12
 8009f8e:	46bd      	mov	sp, r7
 8009f90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009f94:	4770      	bx	lr
 8009f96:	bf00      	nop
 8009f98:	40023c00 	.word	0x40023c00

08009f9c <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8009f9c:	b480      	push	{r7}
 8009f9e:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8009fa0:	4b2f      	ldr	r3, [pc, #188]	; (800a060 <FLASH_SetErrorCode+0xc4>)
 8009fa2:	68db      	ldr	r3, [r3, #12]
 8009fa4:	f003 0310 	and.w	r3, r3, #16
 8009fa8:	2b00      	cmp	r3, #0
 8009faa:	d008      	beq.n	8009fbe <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8009fac:	4b2d      	ldr	r3, [pc, #180]	; (800a064 <FLASH_SetErrorCode+0xc8>)
 8009fae:	69db      	ldr	r3, [r3, #28]
 8009fb0:	f043 0310 	orr.w	r3, r3, #16
 8009fb4:	4a2b      	ldr	r2, [pc, #172]	; (800a064 <FLASH_SetErrorCode+0xc8>)
 8009fb6:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8009fb8:	4b29      	ldr	r3, [pc, #164]	; (800a060 <FLASH_SetErrorCode+0xc4>)
 8009fba:	2210      	movs	r2, #16
 8009fbc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8009fbe:	4b28      	ldr	r3, [pc, #160]	; (800a060 <FLASH_SetErrorCode+0xc4>)
 8009fc0:	68db      	ldr	r3, [r3, #12]
 8009fc2:	f003 0320 	and.w	r3, r3, #32
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	d008      	beq.n	8009fdc <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8009fca:	4b26      	ldr	r3, [pc, #152]	; (800a064 <FLASH_SetErrorCode+0xc8>)
 8009fcc:	69db      	ldr	r3, [r3, #28]
 8009fce:	f043 0308 	orr.w	r3, r3, #8
 8009fd2:	4a24      	ldr	r2, [pc, #144]	; (800a064 <FLASH_SetErrorCode+0xc8>)
 8009fd4:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8009fd6:	4b22      	ldr	r3, [pc, #136]	; (800a060 <FLASH_SetErrorCode+0xc4>)
 8009fd8:	2220      	movs	r2, #32
 8009fda:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8009fdc:	4b20      	ldr	r3, [pc, #128]	; (800a060 <FLASH_SetErrorCode+0xc4>)
 8009fde:	68db      	ldr	r3, [r3, #12]
 8009fe0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fe4:	2b00      	cmp	r3, #0
 8009fe6:	d008      	beq.n	8009ffa <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8009fe8:	4b1e      	ldr	r3, [pc, #120]	; (800a064 <FLASH_SetErrorCode+0xc8>)
 8009fea:	69db      	ldr	r3, [r3, #28]
 8009fec:	f043 0304 	orr.w	r3, r3, #4
 8009ff0:	4a1c      	ldr	r2, [pc, #112]	; (800a064 <FLASH_SetErrorCode+0xc8>)
 8009ff2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8009ff4:	4b1a      	ldr	r3, [pc, #104]	; (800a060 <FLASH_SetErrorCode+0xc4>)
 8009ff6:	2240      	movs	r2, #64	; 0x40
 8009ff8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8009ffa:	4b19      	ldr	r3, [pc, #100]	; (800a060 <FLASH_SetErrorCode+0xc4>)
 8009ffc:	68db      	ldr	r3, [r3, #12]
 8009ffe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a002:	2b00      	cmp	r3, #0
 800a004:	d008      	beq.n	800a018 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800a006:	4b17      	ldr	r3, [pc, #92]	; (800a064 <FLASH_SetErrorCode+0xc8>)
 800a008:	69db      	ldr	r3, [r3, #28]
 800a00a:	f043 0302 	orr.w	r3, r3, #2
 800a00e:	4a15      	ldr	r2, [pc, #84]	; (800a064 <FLASH_SetErrorCode+0xc8>)
 800a010:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800a012:	4b13      	ldr	r3, [pc, #76]	; (800a060 <FLASH_SetErrorCode+0xc4>)
 800a014:	2280      	movs	r2, #128	; 0x80
 800a016:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR) 
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR) != RESET)
 800a018:	4b11      	ldr	r3, [pc, #68]	; (800a060 <FLASH_SetErrorCode+0xc4>)
 800a01a:	68db      	ldr	r3, [r3, #12]
 800a01c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a020:	2b00      	cmp	r3, #0
 800a022:	d009      	beq.n	800a038 <FLASH_SetErrorCode+0x9c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800a024:	4b0f      	ldr	r3, [pc, #60]	; (800a064 <FLASH_SetErrorCode+0xc8>)
 800a026:	69db      	ldr	r3, [r3, #28]
 800a028:	f043 0301 	orr.w	r3, r3, #1
 800a02c:	4a0d      	ldr	r2, [pc, #52]	; (800a064 <FLASH_SetErrorCode+0xc8>)
 800a02e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
 800a030:	4b0b      	ldr	r3, [pc, #44]	; (800a060 <FLASH_SetErrorCode+0xc4>)
 800a032:	f44f 7280 	mov.w	r2, #256	; 0x100
 800a036:	60da      	str	r2, [r3, #12]
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800a038:	4b09      	ldr	r3, [pc, #36]	; (800a060 <FLASH_SetErrorCode+0xc4>)
 800a03a:	68db      	ldr	r3, [r3, #12]
 800a03c:	f003 0302 	and.w	r3, r3, #2
 800a040:	2b00      	cmp	r3, #0
 800a042:	d008      	beq.n	800a056 <FLASH_SetErrorCode+0xba>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 800a044:	4b07      	ldr	r3, [pc, #28]	; (800a064 <FLASH_SetErrorCode+0xc8>)
 800a046:	69db      	ldr	r3, [r3, #28]
 800a048:	f043 0320 	orr.w	r3, r3, #32
 800a04c:	4a05      	ldr	r2, [pc, #20]	; (800a064 <FLASH_SetErrorCode+0xc8>)
 800a04e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800a050:	4b03      	ldr	r3, [pc, #12]	; (800a060 <FLASH_SetErrorCode+0xc4>)
 800a052:	2202      	movs	r2, #2
 800a054:	60da      	str	r2, [r3, #12]
  }
}
 800a056:	bf00      	nop
 800a058:	46bd      	mov	sp, r7
 800a05a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a05e:	4770      	bx	lr
 800a060:	40023c00 	.word	0x40023c00
 800a064:	20005728 	.word	0x20005728

0800a068 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800a068:	b480      	push	{r7}
 800a06a:	b085      	sub	sp, #20
 800a06c:	af00      	add	r7, sp, #0
 800a06e:	6078      	str	r0, [r7, #4]
 800a070:	460b      	mov	r3, r1
 800a072:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 800a074:	2300      	movs	r3, #0
 800a076:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800a078:	78fb      	ldrb	r3, [r7, #3]
 800a07a:	2b00      	cmp	r3, #0
 800a07c:	d102      	bne.n	800a084 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 800a07e:	2300      	movs	r3, #0
 800a080:	60fb      	str	r3, [r7, #12]
 800a082:	e010      	b.n	800a0a6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800a084:	78fb      	ldrb	r3, [r7, #3]
 800a086:	2b01      	cmp	r3, #1
 800a088:	d103      	bne.n	800a092 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800a08a:	f44f 7380 	mov.w	r3, #256	; 0x100
 800a08e:	60fb      	str	r3, [r7, #12]
 800a090:	e009      	b.n	800a0a6 <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800a092:	78fb      	ldrb	r3, [r7, #3]
 800a094:	2b02      	cmp	r3, #2
 800a096:	d103      	bne.n	800a0a0 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800a098:	f44f 7300 	mov.w	r3, #512	; 0x200
 800a09c:	60fb      	str	r3, [r7, #12]
 800a09e:	e002      	b.n	800a0a6 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800a0a0:	f44f 7340 	mov.w	r3, #768	; 0x300
 800a0a4:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800a0a6:	4b13      	ldr	r3, [pc, #76]	; (800a0f4 <FLASH_Erase_Sector+0x8c>)
 800a0a8:	691b      	ldr	r3, [r3, #16]
 800a0aa:	4a12      	ldr	r2, [pc, #72]	; (800a0f4 <FLASH_Erase_Sector+0x8c>)
 800a0ac:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800a0b0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800a0b2:	4b10      	ldr	r3, [pc, #64]	; (800a0f4 <FLASH_Erase_Sector+0x8c>)
 800a0b4:	691a      	ldr	r2, [r3, #16]
 800a0b6:	490f      	ldr	r1, [pc, #60]	; (800a0f4 <FLASH_Erase_Sector+0x8c>)
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	4313      	orrs	r3, r2
 800a0bc:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800a0be:	4b0d      	ldr	r3, [pc, #52]	; (800a0f4 <FLASH_Erase_Sector+0x8c>)
 800a0c0:	691b      	ldr	r3, [r3, #16]
 800a0c2:	4a0c      	ldr	r2, [pc, #48]	; (800a0f4 <FLASH_Erase_Sector+0x8c>)
 800a0c4:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800a0c8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800a0ca:	4b0a      	ldr	r3, [pc, #40]	; (800a0f4 <FLASH_Erase_Sector+0x8c>)
 800a0cc:	691a      	ldr	r2, [r3, #16]
 800a0ce:	687b      	ldr	r3, [r7, #4]
 800a0d0:	00db      	lsls	r3, r3, #3
 800a0d2:	4313      	orrs	r3, r2
 800a0d4:	4a07      	ldr	r2, [pc, #28]	; (800a0f4 <FLASH_Erase_Sector+0x8c>)
 800a0d6:	f043 0302 	orr.w	r3, r3, #2
 800a0da:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 800a0dc:	4b05      	ldr	r3, [pc, #20]	; (800a0f4 <FLASH_Erase_Sector+0x8c>)
 800a0de:	691b      	ldr	r3, [r3, #16]
 800a0e0:	4a04      	ldr	r2, [pc, #16]	; (800a0f4 <FLASH_Erase_Sector+0x8c>)
 800a0e2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a0e6:	6113      	str	r3, [r2, #16]
}
 800a0e8:	bf00      	nop
 800a0ea:	3714      	adds	r7, #20
 800a0ec:	46bd      	mov	sp, r7
 800a0ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a0f2:	4770      	bx	lr
 800a0f4:	40023c00 	.word	0x40023c00

0800a0f8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800a0f8:	b480      	push	{r7}
 800a0fa:	b089      	sub	sp, #36	; 0x24
 800a0fc:	af00      	add	r7, sp, #0
 800a0fe:	6078      	str	r0, [r7, #4]
 800a100:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800a102:	2300      	movs	r3, #0
 800a104:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800a106:	2300      	movs	r3, #0
 800a108:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800a10a:	2300      	movs	r3, #0
 800a10c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a10e:	2300      	movs	r3, #0
 800a110:	61fb      	str	r3, [r7, #28]
 800a112:	e159      	b.n	800a3c8 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800a114:	2201      	movs	r2, #1
 800a116:	69fb      	ldr	r3, [r7, #28]
 800a118:	fa02 f303 	lsl.w	r3, r2, r3
 800a11c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800a11e:	683b      	ldr	r3, [r7, #0]
 800a120:	681b      	ldr	r3, [r3, #0]
 800a122:	697a      	ldr	r2, [r7, #20]
 800a124:	4013      	ands	r3, r2
 800a126:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800a128:	693a      	ldr	r2, [r7, #16]
 800a12a:	697b      	ldr	r3, [r7, #20]
 800a12c:	429a      	cmp	r2, r3
 800a12e:	f040 8148 	bne.w	800a3c2 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a132:	683b      	ldr	r3, [r7, #0]
 800a134:	685b      	ldr	r3, [r3, #4]
 800a136:	2b01      	cmp	r3, #1
 800a138:	d00b      	beq.n	800a152 <HAL_GPIO_Init+0x5a>
 800a13a:	683b      	ldr	r3, [r7, #0]
 800a13c:	685b      	ldr	r3, [r3, #4]
 800a13e:	2b02      	cmp	r3, #2
 800a140:	d007      	beq.n	800a152 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a142:	683b      	ldr	r3, [r7, #0]
 800a144:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 800a146:	2b11      	cmp	r3, #17
 800a148:	d003      	beq.n	800a152 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a14a:	683b      	ldr	r3, [r7, #0]
 800a14c:	685b      	ldr	r3, [r3, #4]
 800a14e:	2b12      	cmp	r3, #18
 800a150:	d130      	bne.n	800a1b4 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800a152:	687b      	ldr	r3, [r7, #4]
 800a154:	689b      	ldr	r3, [r3, #8]
 800a156:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800a158:	69fb      	ldr	r3, [r7, #28]
 800a15a:	005b      	lsls	r3, r3, #1
 800a15c:	2203      	movs	r2, #3
 800a15e:	fa02 f303 	lsl.w	r3, r2, r3
 800a162:	43db      	mvns	r3, r3
 800a164:	69ba      	ldr	r2, [r7, #24]
 800a166:	4013      	ands	r3, r2
 800a168:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800a16a:	683b      	ldr	r3, [r7, #0]
 800a16c:	68da      	ldr	r2, [r3, #12]
 800a16e:	69fb      	ldr	r3, [r7, #28]
 800a170:	005b      	lsls	r3, r3, #1
 800a172:	fa02 f303 	lsl.w	r3, r2, r3
 800a176:	69ba      	ldr	r2, [r7, #24]
 800a178:	4313      	orrs	r3, r2
 800a17a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800a17c:	687b      	ldr	r3, [r7, #4]
 800a17e:	69ba      	ldr	r2, [r7, #24]
 800a180:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800a182:	687b      	ldr	r3, [r7, #4]
 800a184:	685b      	ldr	r3, [r3, #4]
 800a186:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800a188:	2201      	movs	r2, #1
 800a18a:	69fb      	ldr	r3, [r7, #28]
 800a18c:	fa02 f303 	lsl.w	r3, r2, r3
 800a190:	43db      	mvns	r3, r3
 800a192:	69ba      	ldr	r2, [r7, #24]
 800a194:	4013      	ands	r3, r2
 800a196:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800a198:	683b      	ldr	r3, [r7, #0]
 800a19a:	685b      	ldr	r3, [r3, #4]
 800a19c:	091b      	lsrs	r3, r3, #4
 800a19e:	f003 0201 	and.w	r2, r3, #1
 800a1a2:	69fb      	ldr	r3, [r7, #28]
 800a1a4:	fa02 f303 	lsl.w	r3, r2, r3
 800a1a8:	69ba      	ldr	r2, [r7, #24]
 800a1aa:	4313      	orrs	r3, r2
 800a1ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800a1ae:	687b      	ldr	r3, [r7, #4]
 800a1b0:	69ba      	ldr	r2, [r7, #24]
 800a1b2:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 800a1b4:	687b      	ldr	r3, [r7, #4]
 800a1b6:	68db      	ldr	r3, [r3, #12]
 800a1b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800a1ba:	69fb      	ldr	r3, [r7, #28]
 800a1bc:	005b      	lsls	r3, r3, #1
 800a1be:	2203      	movs	r2, #3
 800a1c0:	fa02 f303 	lsl.w	r3, r2, r3
 800a1c4:	43db      	mvns	r3, r3
 800a1c6:	69ba      	ldr	r2, [r7, #24]
 800a1c8:	4013      	ands	r3, r2
 800a1ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 800a1cc:	683b      	ldr	r3, [r7, #0]
 800a1ce:	689a      	ldr	r2, [r3, #8]
 800a1d0:	69fb      	ldr	r3, [r7, #28]
 800a1d2:	005b      	lsls	r3, r3, #1
 800a1d4:	fa02 f303 	lsl.w	r3, r2, r3
 800a1d8:	69ba      	ldr	r2, [r7, #24]
 800a1da:	4313      	orrs	r3, r2
 800a1dc:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 800a1de:	687b      	ldr	r3, [r7, #4]
 800a1e0:	69ba      	ldr	r2, [r7, #24]
 800a1e2:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 800a1e4:	683b      	ldr	r3, [r7, #0]
 800a1e6:	685b      	ldr	r3, [r3, #4]
 800a1e8:	2b02      	cmp	r3, #2
 800a1ea:	d003      	beq.n	800a1f4 <HAL_GPIO_Init+0xfc>
 800a1ec:	683b      	ldr	r3, [r7, #0]
 800a1ee:	685b      	ldr	r3, [r3, #4]
 800a1f0:	2b12      	cmp	r3, #18
 800a1f2:	d123      	bne.n	800a23c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800a1f4:	69fb      	ldr	r3, [r7, #28]
 800a1f6:	08da      	lsrs	r2, r3, #3
 800a1f8:	687b      	ldr	r3, [r7, #4]
 800a1fa:	3208      	adds	r2, #8
 800a1fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800a200:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800a202:	69fb      	ldr	r3, [r7, #28]
 800a204:	f003 0307 	and.w	r3, r3, #7
 800a208:	009b      	lsls	r3, r3, #2
 800a20a:	220f      	movs	r2, #15
 800a20c:	fa02 f303 	lsl.w	r3, r2, r3
 800a210:	43db      	mvns	r3, r3
 800a212:	69ba      	ldr	r2, [r7, #24]
 800a214:	4013      	ands	r3, r2
 800a216:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800a218:	683b      	ldr	r3, [r7, #0]
 800a21a:	691a      	ldr	r2, [r3, #16]
 800a21c:	69fb      	ldr	r3, [r7, #28]
 800a21e:	f003 0307 	and.w	r3, r3, #7
 800a222:	009b      	lsls	r3, r3, #2
 800a224:	fa02 f303 	lsl.w	r3, r2, r3
 800a228:	69ba      	ldr	r2, [r7, #24]
 800a22a:	4313      	orrs	r3, r2
 800a22c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800a22e:	69fb      	ldr	r3, [r7, #28]
 800a230:	08da      	lsrs	r2, r3, #3
 800a232:	687b      	ldr	r3, [r7, #4]
 800a234:	3208      	adds	r2, #8
 800a236:	69b9      	ldr	r1, [r7, #24]
 800a238:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800a23c:	687b      	ldr	r3, [r7, #4]
 800a23e:	681b      	ldr	r3, [r3, #0]
 800a240:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800a242:	69fb      	ldr	r3, [r7, #28]
 800a244:	005b      	lsls	r3, r3, #1
 800a246:	2203      	movs	r2, #3
 800a248:	fa02 f303 	lsl.w	r3, r2, r3
 800a24c:	43db      	mvns	r3, r3
 800a24e:	69ba      	ldr	r2, [r7, #24]
 800a250:	4013      	ands	r3, r2
 800a252:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800a254:	683b      	ldr	r3, [r7, #0]
 800a256:	685b      	ldr	r3, [r3, #4]
 800a258:	f003 0203 	and.w	r2, r3, #3
 800a25c:	69fb      	ldr	r3, [r7, #28]
 800a25e:	005b      	lsls	r3, r3, #1
 800a260:	fa02 f303 	lsl.w	r3, r2, r3
 800a264:	69ba      	ldr	r2, [r7, #24]
 800a266:	4313      	orrs	r3, r2
 800a268:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800a26a:	687b      	ldr	r3, [r7, #4]
 800a26c:	69ba      	ldr	r2, [r7, #24]
 800a26e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800a270:	683b      	ldr	r3, [r7, #0]
 800a272:	685b      	ldr	r3, [r3, #4]
 800a274:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a278:	2b00      	cmp	r3, #0
 800a27a:	f000 80a2 	beq.w	800a3c2 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800a27e:	2300      	movs	r3, #0
 800a280:	60fb      	str	r3, [r7, #12]
 800a282:	4b56      	ldr	r3, [pc, #344]	; (800a3dc <HAL_GPIO_Init+0x2e4>)
 800a284:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a286:	4a55      	ldr	r2, [pc, #340]	; (800a3dc <HAL_GPIO_Init+0x2e4>)
 800a288:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800a28c:	6453      	str	r3, [r2, #68]	; 0x44
 800a28e:	4b53      	ldr	r3, [pc, #332]	; (800a3dc <HAL_GPIO_Init+0x2e4>)
 800a290:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800a292:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800a296:	60fb      	str	r3, [r7, #12]
 800a298:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800a29a:	4a51      	ldr	r2, [pc, #324]	; (800a3e0 <HAL_GPIO_Init+0x2e8>)
 800a29c:	69fb      	ldr	r3, [r7, #28]
 800a29e:	089b      	lsrs	r3, r3, #2
 800a2a0:	3302      	adds	r3, #2
 800a2a2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800a2a6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800a2a8:	69fb      	ldr	r3, [r7, #28]
 800a2aa:	f003 0303 	and.w	r3, r3, #3
 800a2ae:	009b      	lsls	r3, r3, #2
 800a2b0:	220f      	movs	r2, #15
 800a2b2:	fa02 f303 	lsl.w	r3, r2, r3
 800a2b6:	43db      	mvns	r3, r3
 800a2b8:	69ba      	ldr	r2, [r7, #24]
 800a2ba:	4013      	ands	r3, r2
 800a2bc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800a2be:	687b      	ldr	r3, [r7, #4]
 800a2c0:	4a48      	ldr	r2, [pc, #288]	; (800a3e4 <HAL_GPIO_Init+0x2ec>)
 800a2c2:	4293      	cmp	r3, r2
 800a2c4:	d019      	beq.n	800a2fa <HAL_GPIO_Init+0x202>
 800a2c6:	687b      	ldr	r3, [r7, #4]
 800a2c8:	4a47      	ldr	r2, [pc, #284]	; (800a3e8 <HAL_GPIO_Init+0x2f0>)
 800a2ca:	4293      	cmp	r3, r2
 800a2cc:	d013      	beq.n	800a2f6 <HAL_GPIO_Init+0x1fe>
 800a2ce:	687b      	ldr	r3, [r7, #4]
 800a2d0:	4a46      	ldr	r2, [pc, #280]	; (800a3ec <HAL_GPIO_Init+0x2f4>)
 800a2d2:	4293      	cmp	r3, r2
 800a2d4:	d00d      	beq.n	800a2f2 <HAL_GPIO_Init+0x1fa>
 800a2d6:	687b      	ldr	r3, [r7, #4]
 800a2d8:	4a45      	ldr	r2, [pc, #276]	; (800a3f0 <HAL_GPIO_Init+0x2f8>)
 800a2da:	4293      	cmp	r3, r2
 800a2dc:	d007      	beq.n	800a2ee <HAL_GPIO_Init+0x1f6>
 800a2de:	687b      	ldr	r3, [r7, #4]
 800a2e0:	4a44      	ldr	r2, [pc, #272]	; (800a3f4 <HAL_GPIO_Init+0x2fc>)
 800a2e2:	4293      	cmp	r3, r2
 800a2e4:	d101      	bne.n	800a2ea <HAL_GPIO_Init+0x1f2>
 800a2e6:	2304      	movs	r3, #4
 800a2e8:	e008      	b.n	800a2fc <HAL_GPIO_Init+0x204>
 800a2ea:	2307      	movs	r3, #7
 800a2ec:	e006      	b.n	800a2fc <HAL_GPIO_Init+0x204>
 800a2ee:	2303      	movs	r3, #3
 800a2f0:	e004      	b.n	800a2fc <HAL_GPIO_Init+0x204>
 800a2f2:	2302      	movs	r3, #2
 800a2f4:	e002      	b.n	800a2fc <HAL_GPIO_Init+0x204>
 800a2f6:	2301      	movs	r3, #1
 800a2f8:	e000      	b.n	800a2fc <HAL_GPIO_Init+0x204>
 800a2fa:	2300      	movs	r3, #0
 800a2fc:	69fa      	ldr	r2, [r7, #28]
 800a2fe:	f002 0203 	and.w	r2, r2, #3
 800a302:	0092      	lsls	r2, r2, #2
 800a304:	4093      	lsls	r3, r2
 800a306:	69ba      	ldr	r2, [r7, #24]
 800a308:	4313      	orrs	r3, r2
 800a30a:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800a30c:	4934      	ldr	r1, [pc, #208]	; (800a3e0 <HAL_GPIO_Init+0x2e8>)
 800a30e:	69fb      	ldr	r3, [r7, #28]
 800a310:	089b      	lsrs	r3, r3, #2
 800a312:	3302      	adds	r3, #2
 800a314:	69ba      	ldr	r2, [r7, #24]
 800a316:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800a31a:	4b37      	ldr	r3, [pc, #220]	; (800a3f8 <HAL_GPIO_Init+0x300>)
 800a31c:	681b      	ldr	r3, [r3, #0]
 800a31e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a320:	693b      	ldr	r3, [r7, #16]
 800a322:	43db      	mvns	r3, r3
 800a324:	69ba      	ldr	r2, [r7, #24]
 800a326:	4013      	ands	r3, r2
 800a328:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800a32a:	683b      	ldr	r3, [r7, #0]
 800a32c:	685b      	ldr	r3, [r3, #4]
 800a32e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800a332:	2b00      	cmp	r3, #0
 800a334:	d003      	beq.n	800a33e <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800a336:	69ba      	ldr	r2, [r7, #24]
 800a338:	693b      	ldr	r3, [r7, #16]
 800a33a:	4313      	orrs	r3, r2
 800a33c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800a33e:	4a2e      	ldr	r2, [pc, #184]	; (800a3f8 <HAL_GPIO_Init+0x300>)
 800a340:	69bb      	ldr	r3, [r7, #24]
 800a342:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800a344:	4b2c      	ldr	r3, [pc, #176]	; (800a3f8 <HAL_GPIO_Init+0x300>)
 800a346:	685b      	ldr	r3, [r3, #4]
 800a348:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a34a:	693b      	ldr	r3, [r7, #16]
 800a34c:	43db      	mvns	r3, r3
 800a34e:	69ba      	ldr	r2, [r7, #24]
 800a350:	4013      	ands	r3, r2
 800a352:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800a354:	683b      	ldr	r3, [r7, #0]
 800a356:	685b      	ldr	r3, [r3, #4]
 800a358:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d003      	beq.n	800a368 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 800a360:	69ba      	ldr	r2, [r7, #24]
 800a362:	693b      	ldr	r3, [r7, #16]
 800a364:	4313      	orrs	r3, r2
 800a366:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800a368:	4a23      	ldr	r2, [pc, #140]	; (800a3f8 <HAL_GPIO_Init+0x300>)
 800a36a:	69bb      	ldr	r3, [r7, #24]
 800a36c:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800a36e:	4b22      	ldr	r3, [pc, #136]	; (800a3f8 <HAL_GPIO_Init+0x300>)
 800a370:	689b      	ldr	r3, [r3, #8]
 800a372:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a374:	693b      	ldr	r3, [r7, #16]
 800a376:	43db      	mvns	r3, r3
 800a378:	69ba      	ldr	r2, [r7, #24]
 800a37a:	4013      	ands	r3, r2
 800a37c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800a37e:	683b      	ldr	r3, [r7, #0]
 800a380:	685b      	ldr	r3, [r3, #4]
 800a382:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800a386:	2b00      	cmp	r3, #0
 800a388:	d003      	beq.n	800a392 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 800a38a:	69ba      	ldr	r2, [r7, #24]
 800a38c:	693b      	ldr	r3, [r7, #16]
 800a38e:	4313      	orrs	r3, r2
 800a390:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800a392:	4a19      	ldr	r2, [pc, #100]	; (800a3f8 <HAL_GPIO_Init+0x300>)
 800a394:	69bb      	ldr	r3, [r7, #24]
 800a396:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800a398:	4b17      	ldr	r3, [pc, #92]	; (800a3f8 <HAL_GPIO_Init+0x300>)
 800a39a:	68db      	ldr	r3, [r3, #12]
 800a39c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800a39e:	693b      	ldr	r3, [r7, #16]
 800a3a0:	43db      	mvns	r3, r3
 800a3a2:	69ba      	ldr	r2, [r7, #24]
 800a3a4:	4013      	ands	r3, r2
 800a3a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 800a3a8:	683b      	ldr	r3, [r7, #0]
 800a3aa:	685b      	ldr	r3, [r3, #4]
 800a3ac:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800a3b0:	2b00      	cmp	r3, #0
 800a3b2:	d003      	beq.n	800a3bc <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800a3b4:	69ba      	ldr	r2, [r7, #24]
 800a3b6:	693b      	ldr	r3, [r7, #16]
 800a3b8:	4313      	orrs	r3, r2
 800a3ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800a3bc:	4a0e      	ldr	r2, [pc, #56]	; (800a3f8 <HAL_GPIO_Init+0x300>)
 800a3be:	69bb      	ldr	r3, [r7, #24]
 800a3c0:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800a3c2:	69fb      	ldr	r3, [r7, #28]
 800a3c4:	3301      	adds	r3, #1
 800a3c6:	61fb      	str	r3, [r7, #28]
 800a3c8:	69fb      	ldr	r3, [r7, #28]
 800a3ca:	2b0f      	cmp	r3, #15
 800a3cc:	f67f aea2 	bls.w	800a114 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800a3d0:	bf00      	nop
 800a3d2:	3724      	adds	r7, #36	; 0x24
 800a3d4:	46bd      	mov	sp, r7
 800a3d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a3da:	4770      	bx	lr
 800a3dc:	40023800 	.word	0x40023800
 800a3e0:	40013800 	.word	0x40013800
 800a3e4:	40020000 	.word	0x40020000
 800a3e8:	40020400 	.word	0x40020400
 800a3ec:	40020800 	.word	0x40020800
 800a3f0:	40020c00 	.word	0x40020c00
 800a3f4:	40021000 	.word	0x40021000
 800a3f8:	40013c00 	.word	0x40013c00

0800a3fc <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800a3fc:	b480      	push	{r7}
 800a3fe:	b085      	sub	sp, #20
 800a400:	af00      	add	r7, sp, #0
 800a402:	6078      	str	r0, [r7, #4]
 800a404:	460b      	mov	r3, r1
 800a406:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	691a      	ldr	r2, [r3, #16]
 800a40c:	887b      	ldrh	r3, [r7, #2]
 800a40e:	4013      	ands	r3, r2
 800a410:	2b00      	cmp	r3, #0
 800a412:	d002      	beq.n	800a41a <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 800a414:	2301      	movs	r3, #1
 800a416:	73fb      	strb	r3, [r7, #15]
 800a418:	e001      	b.n	800a41e <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800a41a:	2300      	movs	r3, #0
 800a41c:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800a41e:	7bfb      	ldrb	r3, [r7, #15]
}
 800a420:	4618      	mov	r0, r3
 800a422:	3714      	adds	r7, #20
 800a424:	46bd      	mov	sp, r7
 800a426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a42a:	4770      	bx	lr

0800a42c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800a42c:	b480      	push	{r7}
 800a42e:	b083      	sub	sp, #12
 800a430:	af00      	add	r7, sp, #0
 800a432:	6078      	str	r0, [r7, #4]
 800a434:	460b      	mov	r3, r1
 800a436:	807b      	strh	r3, [r7, #2]
 800a438:	4613      	mov	r3, r2
 800a43a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800a43c:	787b      	ldrb	r3, [r7, #1]
 800a43e:	2b00      	cmp	r3, #0
 800a440:	d003      	beq.n	800a44a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800a442:	887a      	ldrh	r2, [r7, #2]
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800a448:	e003      	b.n	800a452 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800a44a:	887b      	ldrh	r3, [r7, #2]
 800a44c:	041a      	lsls	r2, r3, #16
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	619a      	str	r2, [r3, #24]
}
 800a452:	bf00      	nop
 800a454:	370c      	adds	r7, #12
 800a456:	46bd      	mov	sp, r7
 800a458:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a45c:	4770      	bx	lr
	...

0800a460 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800a460:	b580      	push	{r7, lr}
 800a462:	b086      	sub	sp, #24
 800a464:	af00      	add	r7, sp, #0
 800a466:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 800a468:	687b      	ldr	r3, [r7, #4]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d101      	bne.n	800a472 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	e25b      	b.n	800a92a <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	f003 0301 	and.w	r3, r3, #1
 800a47a:	2b00      	cmp	r3, #0
 800a47c:	d075      	beq.n	800a56a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a47e:	4ba3      	ldr	r3, [pc, #652]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a480:	689b      	ldr	r3, [r3, #8]
 800a482:	f003 030c 	and.w	r3, r3, #12
 800a486:	2b04      	cmp	r3, #4
 800a488:	d00c      	beq.n	800a4a4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a48a:	4ba0      	ldr	r3, [pc, #640]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a48c:	689b      	ldr	r3, [r3, #8]
 800a48e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800a492:	2b08      	cmp	r3, #8
 800a494:	d112      	bne.n	800a4bc <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800a496:	4b9d      	ldr	r3, [pc, #628]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a498:	685b      	ldr	r3, [r3, #4]
 800a49a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a49e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800a4a2:	d10b      	bne.n	800a4bc <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a4a4:	4b99      	ldr	r3, [pc, #612]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a4a6:	681b      	ldr	r3, [r3, #0]
 800a4a8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a4ac:	2b00      	cmp	r3, #0
 800a4ae:	d05b      	beq.n	800a568 <HAL_RCC_OscConfig+0x108>
 800a4b0:	687b      	ldr	r3, [r7, #4]
 800a4b2:	685b      	ldr	r3, [r3, #4]
 800a4b4:	2b00      	cmp	r3, #0
 800a4b6:	d157      	bne.n	800a568 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 800a4b8:	2301      	movs	r3, #1
 800a4ba:	e236      	b.n	800a92a <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800a4bc:	687b      	ldr	r3, [r7, #4]
 800a4be:	685b      	ldr	r3, [r3, #4]
 800a4c0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800a4c4:	d106      	bne.n	800a4d4 <HAL_RCC_OscConfig+0x74>
 800a4c6:	4b91      	ldr	r3, [pc, #580]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	4a90      	ldr	r2, [pc, #576]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a4cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4d0:	6013      	str	r3, [r2, #0]
 800a4d2:	e01d      	b.n	800a510 <HAL_RCC_OscConfig+0xb0>
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	685b      	ldr	r3, [r3, #4]
 800a4d8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800a4dc:	d10c      	bne.n	800a4f8 <HAL_RCC_OscConfig+0x98>
 800a4de:	4b8b      	ldr	r3, [pc, #556]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4a8a      	ldr	r2, [pc, #552]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a4e4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800a4e8:	6013      	str	r3, [r2, #0]
 800a4ea:	4b88      	ldr	r3, [pc, #544]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a4ec:	681b      	ldr	r3, [r3, #0]
 800a4ee:	4a87      	ldr	r2, [pc, #540]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a4f0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800a4f4:	6013      	str	r3, [r2, #0]
 800a4f6:	e00b      	b.n	800a510 <HAL_RCC_OscConfig+0xb0>
 800a4f8:	4b84      	ldr	r3, [pc, #528]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a4fa:	681b      	ldr	r3, [r3, #0]
 800a4fc:	4a83      	ldr	r2, [pc, #524]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a4fe:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800a502:	6013      	str	r3, [r2, #0]
 800a504:	4b81      	ldr	r3, [pc, #516]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a506:	681b      	ldr	r3, [r3, #0]
 800a508:	4a80      	ldr	r2, [pc, #512]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a50a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800a50e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	685b      	ldr	r3, [r3, #4]
 800a514:	2b00      	cmp	r3, #0
 800a516:	d013      	beq.n	800a540 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a518:	f7fe fb8e 	bl	8008c38 <HAL_GetTick>
 800a51c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a51e:	e008      	b.n	800a532 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a520:	f7fe fb8a 	bl	8008c38 <HAL_GetTick>
 800a524:	4602      	mov	r2, r0
 800a526:	693b      	ldr	r3, [r7, #16]
 800a528:	1ad3      	subs	r3, r2, r3
 800a52a:	2b64      	cmp	r3, #100	; 0x64
 800a52c:	d901      	bls.n	800a532 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800a52e:	2303      	movs	r3, #3
 800a530:	e1fb      	b.n	800a92a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a532:	4b76      	ldr	r3, [pc, #472]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a534:	681b      	ldr	r3, [r3, #0]
 800a536:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a53a:	2b00      	cmp	r3, #0
 800a53c:	d0f0      	beq.n	800a520 <HAL_RCC_OscConfig+0xc0>
 800a53e:	e014      	b.n	800a56a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a540:	f7fe fb7a 	bl	8008c38 <HAL_GetTick>
 800a544:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a546:	e008      	b.n	800a55a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800a548:	f7fe fb76 	bl	8008c38 <HAL_GetTick>
 800a54c:	4602      	mov	r2, r0
 800a54e:	693b      	ldr	r3, [r7, #16]
 800a550:	1ad3      	subs	r3, r2, r3
 800a552:	2b64      	cmp	r3, #100	; 0x64
 800a554:	d901      	bls.n	800a55a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800a556:	2303      	movs	r3, #3
 800a558:	e1e7      	b.n	800a92a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800a55a:	4b6c      	ldr	r3, [pc, #432]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a562:	2b00      	cmp	r3, #0
 800a564:	d1f0      	bne.n	800a548 <HAL_RCC_OscConfig+0xe8>
 800a566:	e000      	b.n	800a56a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800a568:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800a56a:	687b      	ldr	r3, [r7, #4]
 800a56c:	681b      	ldr	r3, [r3, #0]
 800a56e:	f003 0302 	and.w	r3, r3, #2
 800a572:	2b00      	cmp	r3, #0
 800a574:	d063      	beq.n	800a63e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a576:	4b65      	ldr	r3, [pc, #404]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a578:	689b      	ldr	r3, [r3, #8]
 800a57a:	f003 030c 	and.w	r3, r3, #12
 800a57e:	2b00      	cmp	r3, #0
 800a580:	d00b      	beq.n	800a59a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a582:	4b62      	ldr	r3, [pc, #392]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a584:	689b      	ldr	r3, [r3, #8]
 800a586:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800a58a:	2b08      	cmp	r3, #8
 800a58c:	d11c      	bne.n	800a5c8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800a58e:	4b5f      	ldr	r3, [pc, #380]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a590:	685b      	ldr	r3, [r3, #4]
 800a592:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800a596:	2b00      	cmp	r3, #0
 800a598:	d116      	bne.n	800a5c8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a59a:	4b5c      	ldr	r3, [pc, #368]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	f003 0302 	and.w	r3, r3, #2
 800a5a2:	2b00      	cmp	r3, #0
 800a5a4:	d005      	beq.n	800a5b2 <HAL_RCC_OscConfig+0x152>
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	68db      	ldr	r3, [r3, #12]
 800a5aa:	2b01      	cmp	r3, #1
 800a5ac:	d001      	beq.n	800a5b2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800a5ae:	2301      	movs	r3, #1
 800a5b0:	e1bb      	b.n	800a92a <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5b2:	4b56      	ldr	r3, [pc, #344]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a5b4:	681b      	ldr	r3, [r3, #0]
 800a5b6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a5ba:	687b      	ldr	r3, [r7, #4]
 800a5bc:	691b      	ldr	r3, [r3, #16]
 800a5be:	00db      	lsls	r3, r3, #3
 800a5c0:	4952      	ldr	r1, [pc, #328]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a5c2:	4313      	orrs	r3, r2
 800a5c4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800a5c6:	e03a      	b.n	800a63e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	68db      	ldr	r3, [r3, #12]
 800a5cc:	2b00      	cmp	r3, #0
 800a5ce:	d020      	beq.n	800a612 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800a5d0:	4b4f      	ldr	r3, [pc, #316]	; (800a710 <HAL_RCC_OscConfig+0x2b0>)
 800a5d2:	2201      	movs	r2, #1
 800a5d4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a5d6:	f7fe fb2f 	bl	8008c38 <HAL_GetTick>
 800a5da:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a5dc:	e008      	b.n	800a5f0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a5de:	f7fe fb2b 	bl	8008c38 <HAL_GetTick>
 800a5e2:	4602      	mov	r2, r0
 800a5e4:	693b      	ldr	r3, [r7, #16]
 800a5e6:	1ad3      	subs	r3, r2, r3
 800a5e8:	2b02      	cmp	r3, #2
 800a5ea:	d901      	bls.n	800a5f0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800a5ec:	2303      	movs	r3, #3
 800a5ee:	e19c      	b.n	800a92a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800a5f0:	4b46      	ldr	r3, [pc, #280]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	f003 0302 	and.w	r3, r3, #2
 800a5f8:	2b00      	cmp	r3, #0
 800a5fa:	d0f0      	beq.n	800a5de <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800a5fc:	4b43      	ldr	r3, [pc, #268]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a5fe:	681b      	ldr	r3, [r3, #0]
 800a600:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800a604:	687b      	ldr	r3, [r7, #4]
 800a606:	691b      	ldr	r3, [r3, #16]
 800a608:	00db      	lsls	r3, r3, #3
 800a60a:	4940      	ldr	r1, [pc, #256]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a60c:	4313      	orrs	r3, r2
 800a60e:	600b      	str	r3, [r1, #0]
 800a610:	e015      	b.n	800a63e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800a612:	4b3f      	ldr	r3, [pc, #252]	; (800a710 <HAL_RCC_OscConfig+0x2b0>)
 800a614:	2200      	movs	r2, #0
 800a616:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800a618:	f7fe fb0e 	bl	8008c38 <HAL_GetTick>
 800a61c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a61e:	e008      	b.n	800a632 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800a620:	f7fe fb0a 	bl	8008c38 <HAL_GetTick>
 800a624:	4602      	mov	r2, r0
 800a626:	693b      	ldr	r3, [r7, #16]
 800a628:	1ad3      	subs	r3, r2, r3
 800a62a:	2b02      	cmp	r3, #2
 800a62c:	d901      	bls.n	800a632 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800a62e:	2303      	movs	r3, #3
 800a630:	e17b      	b.n	800a92a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800a632:	4b36      	ldr	r3, [pc, #216]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a634:	681b      	ldr	r3, [r3, #0]
 800a636:	f003 0302 	and.w	r3, r3, #2
 800a63a:	2b00      	cmp	r3, #0
 800a63c:	d1f0      	bne.n	800a620 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	681b      	ldr	r3, [r3, #0]
 800a642:	f003 0308 	and.w	r3, r3, #8
 800a646:	2b00      	cmp	r3, #0
 800a648:	d030      	beq.n	800a6ac <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	695b      	ldr	r3, [r3, #20]
 800a64e:	2b00      	cmp	r3, #0
 800a650:	d016      	beq.n	800a680 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800a652:	4b30      	ldr	r3, [pc, #192]	; (800a714 <HAL_RCC_OscConfig+0x2b4>)
 800a654:	2201      	movs	r2, #1
 800a656:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a658:	f7fe faee 	bl	8008c38 <HAL_GetTick>
 800a65c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a65e:	e008      	b.n	800a672 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a660:	f7fe faea 	bl	8008c38 <HAL_GetTick>
 800a664:	4602      	mov	r2, r0
 800a666:	693b      	ldr	r3, [r7, #16]
 800a668:	1ad3      	subs	r3, r2, r3
 800a66a:	2b02      	cmp	r3, #2
 800a66c:	d901      	bls.n	800a672 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800a66e:	2303      	movs	r3, #3
 800a670:	e15b      	b.n	800a92a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800a672:	4b26      	ldr	r3, [pc, #152]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a674:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a676:	f003 0302 	and.w	r3, r3, #2
 800a67a:	2b00      	cmp	r3, #0
 800a67c:	d0f0      	beq.n	800a660 <HAL_RCC_OscConfig+0x200>
 800a67e:	e015      	b.n	800a6ac <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800a680:	4b24      	ldr	r3, [pc, #144]	; (800a714 <HAL_RCC_OscConfig+0x2b4>)
 800a682:	2200      	movs	r2, #0
 800a684:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a686:	f7fe fad7 	bl	8008c38 <HAL_GetTick>
 800a68a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a68c:	e008      	b.n	800a6a0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800a68e:	f7fe fad3 	bl	8008c38 <HAL_GetTick>
 800a692:	4602      	mov	r2, r0
 800a694:	693b      	ldr	r3, [r7, #16]
 800a696:	1ad3      	subs	r3, r2, r3
 800a698:	2b02      	cmp	r3, #2
 800a69a:	d901      	bls.n	800a6a0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800a69c:	2303      	movs	r3, #3
 800a69e:	e144      	b.n	800a92a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800a6a0:	4b1a      	ldr	r3, [pc, #104]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a6a2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800a6a4:	f003 0302 	and.w	r3, r3, #2
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d1f0      	bne.n	800a68e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	f003 0304 	and.w	r3, r3, #4
 800a6b4:	2b00      	cmp	r3, #0
 800a6b6:	f000 80a0 	beq.w	800a7fa <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800a6be:	4b13      	ldr	r3, [pc, #76]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a6c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6c6:	2b00      	cmp	r3, #0
 800a6c8:	d10f      	bne.n	800a6ea <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800a6ca:	2300      	movs	r3, #0
 800a6cc:	60bb      	str	r3, [r7, #8]
 800a6ce:	4b0f      	ldr	r3, [pc, #60]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a6d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6d2:	4a0e      	ldr	r2, [pc, #56]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a6d4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800a6d8:	6413      	str	r3, [r2, #64]	; 0x40
 800a6da:	4b0c      	ldr	r3, [pc, #48]	; (800a70c <HAL_RCC_OscConfig+0x2ac>)
 800a6dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a6de:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800a6e2:	60bb      	str	r3, [r7, #8]
 800a6e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800a6e6:	2301      	movs	r3, #1
 800a6e8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a6ea:	4b0b      	ldr	r3, [pc, #44]	; (800a718 <HAL_RCC_OscConfig+0x2b8>)
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a6f2:	2b00      	cmp	r3, #0
 800a6f4:	d121      	bne.n	800a73a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800a6f6:	4b08      	ldr	r3, [pc, #32]	; (800a718 <HAL_RCC_OscConfig+0x2b8>)
 800a6f8:	681b      	ldr	r3, [r3, #0]
 800a6fa:	4a07      	ldr	r2, [pc, #28]	; (800a718 <HAL_RCC_OscConfig+0x2b8>)
 800a6fc:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800a700:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800a702:	f7fe fa99 	bl	8008c38 <HAL_GetTick>
 800a706:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a708:	e011      	b.n	800a72e <HAL_RCC_OscConfig+0x2ce>
 800a70a:	bf00      	nop
 800a70c:	40023800 	.word	0x40023800
 800a710:	42470000 	.word	0x42470000
 800a714:	42470e80 	.word	0x42470e80
 800a718:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800a71c:	f7fe fa8c 	bl	8008c38 <HAL_GetTick>
 800a720:	4602      	mov	r2, r0
 800a722:	693b      	ldr	r3, [r7, #16]
 800a724:	1ad3      	subs	r3, r2, r3
 800a726:	2b02      	cmp	r3, #2
 800a728:	d901      	bls.n	800a72e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800a72a:	2303      	movs	r3, #3
 800a72c:	e0fd      	b.n	800a92a <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800a72e:	4b81      	ldr	r3, [pc, #516]	; (800a934 <HAL_RCC_OscConfig+0x4d4>)
 800a730:	681b      	ldr	r3, [r3, #0]
 800a732:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a736:	2b00      	cmp	r3, #0
 800a738:	d0f0      	beq.n	800a71c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800a73a:	687b      	ldr	r3, [r7, #4]
 800a73c:	689b      	ldr	r3, [r3, #8]
 800a73e:	2b01      	cmp	r3, #1
 800a740:	d106      	bne.n	800a750 <HAL_RCC_OscConfig+0x2f0>
 800a742:	4b7d      	ldr	r3, [pc, #500]	; (800a938 <HAL_RCC_OscConfig+0x4d8>)
 800a744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a746:	4a7c      	ldr	r2, [pc, #496]	; (800a938 <HAL_RCC_OscConfig+0x4d8>)
 800a748:	f043 0301 	orr.w	r3, r3, #1
 800a74c:	6713      	str	r3, [r2, #112]	; 0x70
 800a74e:	e01c      	b.n	800a78a <HAL_RCC_OscConfig+0x32a>
 800a750:	687b      	ldr	r3, [r7, #4]
 800a752:	689b      	ldr	r3, [r3, #8]
 800a754:	2b05      	cmp	r3, #5
 800a756:	d10c      	bne.n	800a772 <HAL_RCC_OscConfig+0x312>
 800a758:	4b77      	ldr	r3, [pc, #476]	; (800a938 <HAL_RCC_OscConfig+0x4d8>)
 800a75a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a75c:	4a76      	ldr	r2, [pc, #472]	; (800a938 <HAL_RCC_OscConfig+0x4d8>)
 800a75e:	f043 0304 	orr.w	r3, r3, #4
 800a762:	6713      	str	r3, [r2, #112]	; 0x70
 800a764:	4b74      	ldr	r3, [pc, #464]	; (800a938 <HAL_RCC_OscConfig+0x4d8>)
 800a766:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a768:	4a73      	ldr	r2, [pc, #460]	; (800a938 <HAL_RCC_OscConfig+0x4d8>)
 800a76a:	f043 0301 	orr.w	r3, r3, #1
 800a76e:	6713      	str	r3, [r2, #112]	; 0x70
 800a770:	e00b      	b.n	800a78a <HAL_RCC_OscConfig+0x32a>
 800a772:	4b71      	ldr	r3, [pc, #452]	; (800a938 <HAL_RCC_OscConfig+0x4d8>)
 800a774:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a776:	4a70      	ldr	r2, [pc, #448]	; (800a938 <HAL_RCC_OscConfig+0x4d8>)
 800a778:	f023 0301 	bic.w	r3, r3, #1
 800a77c:	6713      	str	r3, [r2, #112]	; 0x70
 800a77e:	4b6e      	ldr	r3, [pc, #440]	; (800a938 <HAL_RCC_OscConfig+0x4d8>)
 800a780:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a782:	4a6d      	ldr	r2, [pc, #436]	; (800a938 <HAL_RCC_OscConfig+0x4d8>)
 800a784:	f023 0304 	bic.w	r3, r3, #4
 800a788:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800a78a:	687b      	ldr	r3, [r7, #4]
 800a78c:	689b      	ldr	r3, [r3, #8]
 800a78e:	2b00      	cmp	r3, #0
 800a790:	d015      	beq.n	800a7be <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800a792:	f7fe fa51 	bl	8008c38 <HAL_GetTick>
 800a796:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a798:	e00a      	b.n	800a7b0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a79a:	f7fe fa4d 	bl	8008c38 <HAL_GetTick>
 800a79e:	4602      	mov	r2, r0
 800a7a0:	693b      	ldr	r3, [r7, #16]
 800a7a2:	1ad3      	subs	r3, r2, r3
 800a7a4:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7a8:	4293      	cmp	r3, r2
 800a7aa:	d901      	bls.n	800a7b0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800a7ac:	2303      	movs	r3, #3
 800a7ae:	e0bc      	b.n	800a92a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800a7b0:	4b61      	ldr	r3, [pc, #388]	; (800a938 <HAL_RCC_OscConfig+0x4d8>)
 800a7b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7b4:	f003 0302 	and.w	r3, r3, #2
 800a7b8:	2b00      	cmp	r3, #0
 800a7ba:	d0ee      	beq.n	800a79a <HAL_RCC_OscConfig+0x33a>
 800a7bc:	e014      	b.n	800a7e8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800a7be:	f7fe fa3b 	bl	8008c38 <HAL_GetTick>
 800a7c2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a7c4:	e00a      	b.n	800a7dc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800a7c6:	f7fe fa37 	bl	8008c38 <HAL_GetTick>
 800a7ca:	4602      	mov	r2, r0
 800a7cc:	693b      	ldr	r3, [r7, #16]
 800a7ce:	1ad3      	subs	r3, r2, r3
 800a7d0:	f241 3288 	movw	r2, #5000	; 0x1388
 800a7d4:	4293      	cmp	r3, r2
 800a7d6:	d901      	bls.n	800a7dc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 800a7d8:	2303      	movs	r3, #3
 800a7da:	e0a6      	b.n	800a92a <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800a7dc:	4b56      	ldr	r3, [pc, #344]	; (800a938 <HAL_RCC_OscConfig+0x4d8>)
 800a7de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800a7e0:	f003 0302 	and.w	r3, r3, #2
 800a7e4:	2b00      	cmp	r3, #0
 800a7e6:	d1ee      	bne.n	800a7c6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800a7e8:	7dfb      	ldrb	r3, [r7, #23]
 800a7ea:	2b01      	cmp	r3, #1
 800a7ec:	d105      	bne.n	800a7fa <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800a7ee:	4b52      	ldr	r3, [pc, #328]	; (800a938 <HAL_RCC_OscConfig+0x4d8>)
 800a7f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7f2:	4a51      	ldr	r2, [pc, #324]	; (800a938 <HAL_RCC_OscConfig+0x4d8>)
 800a7f4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800a7f8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800a7fa:	687b      	ldr	r3, [r7, #4]
 800a7fc:	699b      	ldr	r3, [r3, #24]
 800a7fe:	2b00      	cmp	r3, #0
 800a800:	f000 8092 	beq.w	800a928 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800a804:	4b4c      	ldr	r3, [pc, #304]	; (800a938 <HAL_RCC_OscConfig+0x4d8>)
 800a806:	689b      	ldr	r3, [r3, #8]
 800a808:	f003 030c 	and.w	r3, r3, #12
 800a80c:	2b08      	cmp	r3, #8
 800a80e:	d05c      	beq.n	800a8ca <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	699b      	ldr	r3, [r3, #24]
 800a814:	2b02      	cmp	r3, #2
 800a816:	d141      	bne.n	800a89c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a818:	4b48      	ldr	r3, [pc, #288]	; (800a93c <HAL_RCC_OscConfig+0x4dc>)
 800a81a:	2200      	movs	r2, #0
 800a81c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a81e:	f7fe fa0b 	bl	8008c38 <HAL_GetTick>
 800a822:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a824:	e008      	b.n	800a838 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a826:	f7fe fa07 	bl	8008c38 <HAL_GetTick>
 800a82a:	4602      	mov	r2, r0
 800a82c:	693b      	ldr	r3, [r7, #16]
 800a82e:	1ad3      	subs	r3, r2, r3
 800a830:	2b02      	cmp	r3, #2
 800a832:	d901      	bls.n	800a838 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800a834:	2303      	movs	r3, #3
 800a836:	e078      	b.n	800a92a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a838:	4b3f      	ldr	r3, [pc, #252]	; (800a938 <HAL_RCC_OscConfig+0x4d8>)
 800a83a:	681b      	ldr	r3, [r3, #0]
 800a83c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a840:	2b00      	cmp	r3, #0
 800a842:	d1f0      	bne.n	800a826 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800a844:	687b      	ldr	r3, [r7, #4]
 800a846:	69da      	ldr	r2, [r3, #28]
 800a848:	687b      	ldr	r3, [r7, #4]
 800a84a:	6a1b      	ldr	r3, [r3, #32]
 800a84c:	431a      	orrs	r2, r3
 800a84e:	687b      	ldr	r3, [r7, #4]
 800a850:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a852:	019b      	lsls	r3, r3, #6
 800a854:	431a      	orrs	r2, r3
 800a856:	687b      	ldr	r3, [r7, #4]
 800a858:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a85a:	085b      	lsrs	r3, r3, #1
 800a85c:	3b01      	subs	r3, #1
 800a85e:	041b      	lsls	r3, r3, #16
 800a860:	431a      	orrs	r2, r3
 800a862:	687b      	ldr	r3, [r7, #4]
 800a864:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800a866:	061b      	lsls	r3, r3, #24
 800a868:	4933      	ldr	r1, [pc, #204]	; (800a938 <HAL_RCC_OscConfig+0x4d8>)
 800a86a:	4313      	orrs	r3, r2
 800a86c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800a86e:	4b33      	ldr	r3, [pc, #204]	; (800a93c <HAL_RCC_OscConfig+0x4dc>)
 800a870:	2201      	movs	r2, #1
 800a872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a874:	f7fe f9e0 	bl	8008c38 <HAL_GetTick>
 800a878:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a87a:	e008      	b.n	800a88e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a87c:	f7fe f9dc 	bl	8008c38 <HAL_GetTick>
 800a880:	4602      	mov	r2, r0
 800a882:	693b      	ldr	r3, [r7, #16]
 800a884:	1ad3      	subs	r3, r2, r3
 800a886:	2b02      	cmp	r3, #2
 800a888:	d901      	bls.n	800a88e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800a88a:	2303      	movs	r3, #3
 800a88c:	e04d      	b.n	800a92a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a88e:	4b2a      	ldr	r3, [pc, #168]	; (800a938 <HAL_RCC_OscConfig+0x4d8>)
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a896:	2b00      	cmp	r3, #0
 800a898:	d0f0      	beq.n	800a87c <HAL_RCC_OscConfig+0x41c>
 800a89a:	e045      	b.n	800a928 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800a89c:	4b27      	ldr	r3, [pc, #156]	; (800a93c <HAL_RCC_OscConfig+0x4dc>)
 800a89e:	2200      	movs	r2, #0
 800a8a0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800a8a2:	f7fe f9c9 	bl	8008c38 <HAL_GetTick>
 800a8a6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a8a8:	e008      	b.n	800a8bc <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800a8aa:	f7fe f9c5 	bl	8008c38 <HAL_GetTick>
 800a8ae:	4602      	mov	r2, r0
 800a8b0:	693b      	ldr	r3, [r7, #16]
 800a8b2:	1ad3      	subs	r3, r2, r3
 800a8b4:	2b02      	cmp	r3, #2
 800a8b6:	d901      	bls.n	800a8bc <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 800a8b8:	2303      	movs	r3, #3
 800a8ba:	e036      	b.n	800a92a <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800a8bc:	4b1e      	ldr	r3, [pc, #120]	; (800a938 <HAL_RCC_OscConfig+0x4d8>)
 800a8be:	681b      	ldr	r3, [r3, #0]
 800a8c0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800a8c4:	2b00      	cmp	r3, #0
 800a8c6:	d1f0      	bne.n	800a8aa <HAL_RCC_OscConfig+0x44a>
 800a8c8:	e02e      	b.n	800a928 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800a8ca:	687b      	ldr	r3, [r7, #4]
 800a8cc:	699b      	ldr	r3, [r3, #24]
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	d101      	bne.n	800a8d6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800a8d2:	2301      	movs	r3, #1
 800a8d4:	e029      	b.n	800a92a <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800a8d6:	4b18      	ldr	r3, [pc, #96]	; (800a938 <HAL_RCC_OscConfig+0x4d8>)
 800a8d8:	685b      	ldr	r3, [r3, #4]
 800a8da:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800a8e2:	687b      	ldr	r3, [r7, #4]
 800a8e4:	69db      	ldr	r3, [r3, #28]
 800a8e6:	429a      	cmp	r2, r3
 800a8e8:	d11c      	bne.n	800a924 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800a8f4:	429a      	cmp	r2, r3
 800a8f6:	d115      	bne.n	800a924 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a8f8:	68fa      	ldr	r2, [r7, #12]
 800a8fa:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800a8fe:	4013      	ands	r3, r2
 800a900:	687a      	ldr	r2, [r7, #4]
 800a902:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800a904:	4293      	cmp	r3, r2
 800a906:	d10d      	bne.n	800a924 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800a90e:	687b      	ldr	r3, [r7, #4]
 800a910:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800a912:	429a      	cmp	r2, r3
 800a914:	d106      	bne.n	800a924 <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 800a920:	429a      	cmp	r2, r3
 800a922:	d001      	beq.n	800a928 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800a924:	2301      	movs	r3, #1
 800a926:	e000      	b.n	800a92a <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 800a928:	2300      	movs	r3, #0
}
 800a92a:	4618      	mov	r0, r3
 800a92c:	3718      	adds	r7, #24
 800a92e:	46bd      	mov	sp, r7
 800a930:	bd80      	pop	{r7, pc}
 800a932:	bf00      	nop
 800a934:	40007000 	.word	0x40007000
 800a938:	40023800 	.word	0x40023800
 800a93c:	42470060 	.word	0x42470060

0800a940 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 800a940:	b580      	push	{r7, lr}
 800a942:	b084      	sub	sp, #16
 800a944:	af00      	add	r7, sp, #0
 800a946:	6078      	str	r0, [r7, #4]
 800a948:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800a94a:	687b      	ldr	r3, [r7, #4]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d101      	bne.n	800a954 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 800a950:	2301      	movs	r3, #1
 800a952:	e0cc      	b.n	800aaee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800a954:	4b68      	ldr	r3, [pc, #416]	; (800aaf8 <HAL_RCC_ClockConfig+0x1b8>)
 800a956:	681b      	ldr	r3, [r3, #0]
 800a958:	f003 030f 	and.w	r3, r3, #15
 800a95c:	683a      	ldr	r2, [r7, #0]
 800a95e:	429a      	cmp	r2, r3
 800a960:	d90c      	bls.n	800a97c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800a962:	4b65      	ldr	r3, [pc, #404]	; (800aaf8 <HAL_RCC_ClockConfig+0x1b8>)
 800a964:	683a      	ldr	r2, [r7, #0]
 800a966:	b2d2      	uxtb	r2, r2
 800a968:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800a96a:	4b63      	ldr	r3, [pc, #396]	; (800aaf8 <HAL_RCC_ClockConfig+0x1b8>)
 800a96c:	681b      	ldr	r3, [r3, #0]
 800a96e:	f003 030f 	and.w	r3, r3, #15
 800a972:	683a      	ldr	r2, [r7, #0]
 800a974:	429a      	cmp	r2, r3
 800a976:	d001      	beq.n	800a97c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800a978:	2301      	movs	r3, #1
 800a97a:	e0b8      	b.n	800aaee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800a97c:	687b      	ldr	r3, [r7, #4]
 800a97e:	681b      	ldr	r3, [r3, #0]
 800a980:	f003 0302 	and.w	r3, r3, #2
 800a984:	2b00      	cmp	r3, #0
 800a986:	d020      	beq.n	800a9ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800a988:	687b      	ldr	r3, [r7, #4]
 800a98a:	681b      	ldr	r3, [r3, #0]
 800a98c:	f003 0304 	and.w	r3, r3, #4
 800a990:	2b00      	cmp	r3, #0
 800a992:	d005      	beq.n	800a9a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800a994:	4b59      	ldr	r3, [pc, #356]	; (800aafc <HAL_RCC_ClockConfig+0x1bc>)
 800a996:	689b      	ldr	r3, [r3, #8]
 800a998:	4a58      	ldr	r2, [pc, #352]	; (800aafc <HAL_RCC_ClockConfig+0x1bc>)
 800a99a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800a99e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	681b      	ldr	r3, [r3, #0]
 800a9a4:	f003 0308 	and.w	r3, r3, #8
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d005      	beq.n	800a9b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800a9ac:	4b53      	ldr	r3, [pc, #332]	; (800aafc <HAL_RCC_ClockConfig+0x1bc>)
 800a9ae:	689b      	ldr	r3, [r3, #8]
 800a9b0:	4a52      	ldr	r2, [pc, #328]	; (800aafc <HAL_RCC_ClockConfig+0x1bc>)
 800a9b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800a9b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800a9b8:	4b50      	ldr	r3, [pc, #320]	; (800aafc <HAL_RCC_ClockConfig+0x1bc>)
 800a9ba:	689b      	ldr	r3, [r3, #8]
 800a9bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800a9c0:	687b      	ldr	r3, [r7, #4]
 800a9c2:	689b      	ldr	r3, [r3, #8]
 800a9c4:	494d      	ldr	r1, [pc, #308]	; (800aafc <HAL_RCC_ClockConfig+0x1bc>)
 800a9c6:	4313      	orrs	r3, r2
 800a9c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800a9ca:	687b      	ldr	r3, [r7, #4]
 800a9cc:	681b      	ldr	r3, [r3, #0]
 800a9ce:	f003 0301 	and.w	r3, r3, #1
 800a9d2:	2b00      	cmp	r3, #0
 800a9d4:	d044      	beq.n	800aa60 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800a9d6:	687b      	ldr	r3, [r7, #4]
 800a9d8:	685b      	ldr	r3, [r3, #4]
 800a9da:	2b01      	cmp	r3, #1
 800a9dc:	d107      	bne.n	800a9ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800a9de:	4b47      	ldr	r3, [pc, #284]	; (800aafc <HAL_RCC_ClockConfig+0x1bc>)
 800a9e0:	681b      	ldr	r3, [r3, #0]
 800a9e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800a9e6:	2b00      	cmp	r3, #0
 800a9e8:	d119      	bne.n	800aa1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800a9ea:	2301      	movs	r3, #1
 800a9ec:	e07f      	b.n	800aaee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a9ee:	687b      	ldr	r3, [r7, #4]
 800a9f0:	685b      	ldr	r3, [r3, #4]
 800a9f2:	2b02      	cmp	r3, #2
 800a9f4:	d003      	beq.n	800a9fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800a9f6:	687b      	ldr	r3, [r7, #4]
 800a9f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800a9fa:	2b03      	cmp	r3, #3
 800a9fc:	d107      	bne.n	800aa0e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800a9fe:	4b3f      	ldr	r3, [pc, #252]	; (800aafc <HAL_RCC_ClockConfig+0x1bc>)
 800aa00:	681b      	ldr	r3, [r3, #0]
 800aa02:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800aa06:	2b00      	cmp	r3, #0
 800aa08:	d109      	bne.n	800aa1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aa0a:	2301      	movs	r3, #1
 800aa0c:	e06f      	b.n	800aaee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800aa0e:	4b3b      	ldr	r3, [pc, #236]	; (800aafc <HAL_RCC_ClockConfig+0x1bc>)
 800aa10:	681b      	ldr	r3, [r3, #0]
 800aa12:	f003 0302 	and.w	r3, r3, #2
 800aa16:	2b00      	cmp	r3, #0
 800aa18:	d101      	bne.n	800aa1e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800aa1a:	2301      	movs	r3, #1
 800aa1c:	e067      	b.n	800aaee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800aa1e:	4b37      	ldr	r3, [pc, #220]	; (800aafc <HAL_RCC_ClockConfig+0x1bc>)
 800aa20:	689b      	ldr	r3, [r3, #8]
 800aa22:	f023 0203 	bic.w	r2, r3, #3
 800aa26:	687b      	ldr	r3, [r7, #4]
 800aa28:	685b      	ldr	r3, [r3, #4]
 800aa2a:	4934      	ldr	r1, [pc, #208]	; (800aafc <HAL_RCC_ClockConfig+0x1bc>)
 800aa2c:	4313      	orrs	r3, r2
 800aa2e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800aa30:	f7fe f902 	bl	8008c38 <HAL_GetTick>
 800aa34:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa36:	e00a      	b.n	800aa4e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800aa38:	f7fe f8fe 	bl	8008c38 <HAL_GetTick>
 800aa3c:	4602      	mov	r2, r0
 800aa3e:	68fb      	ldr	r3, [r7, #12]
 800aa40:	1ad3      	subs	r3, r2, r3
 800aa42:	f241 3288 	movw	r2, #5000	; 0x1388
 800aa46:	4293      	cmp	r3, r2
 800aa48:	d901      	bls.n	800aa4e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800aa4a:	2303      	movs	r3, #3
 800aa4c:	e04f      	b.n	800aaee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800aa4e:	4b2b      	ldr	r3, [pc, #172]	; (800aafc <HAL_RCC_ClockConfig+0x1bc>)
 800aa50:	689b      	ldr	r3, [r3, #8]
 800aa52:	f003 020c 	and.w	r2, r3, #12
 800aa56:	687b      	ldr	r3, [r7, #4]
 800aa58:	685b      	ldr	r3, [r3, #4]
 800aa5a:	009b      	lsls	r3, r3, #2
 800aa5c:	429a      	cmp	r2, r3
 800aa5e:	d1eb      	bne.n	800aa38 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 800aa60:	4b25      	ldr	r3, [pc, #148]	; (800aaf8 <HAL_RCC_ClockConfig+0x1b8>)
 800aa62:	681b      	ldr	r3, [r3, #0]
 800aa64:	f003 030f 	and.w	r3, r3, #15
 800aa68:	683a      	ldr	r2, [r7, #0]
 800aa6a:	429a      	cmp	r2, r3
 800aa6c:	d20c      	bcs.n	800aa88 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800aa6e:	4b22      	ldr	r3, [pc, #136]	; (800aaf8 <HAL_RCC_ClockConfig+0x1b8>)
 800aa70:	683a      	ldr	r2, [r7, #0]
 800aa72:	b2d2      	uxtb	r2, r2
 800aa74:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800aa76:	4b20      	ldr	r3, [pc, #128]	; (800aaf8 <HAL_RCC_ClockConfig+0x1b8>)
 800aa78:	681b      	ldr	r3, [r3, #0]
 800aa7a:	f003 030f 	and.w	r3, r3, #15
 800aa7e:	683a      	ldr	r2, [r7, #0]
 800aa80:	429a      	cmp	r2, r3
 800aa82:	d001      	beq.n	800aa88 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800aa84:	2301      	movs	r3, #1
 800aa86:	e032      	b.n	800aaee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800aa88:	687b      	ldr	r3, [r7, #4]
 800aa8a:	681b      	ldr	r3, [r3, #0]
 800aa8c:	f003 0304 	and.w	r3, r3, #4
 800aa90:	2b00      	cmp	r3, #0
 800aa92:	d008      	beq.n	800aaa6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800aa94:	4b19      	ldr	r3, [pc, #100]	; (800aafc <HAL_RCC_ClockConfig+0x1bc>)
 800aa96:	689b      	ldr	r3, [r3, #8]
 800aa98:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800aa9c:	687b      	ldr	r3, [r7, #4]
 800aa9e:	68db      	ldr	r3, [r3, #12]
 800aaa0:	4916      	ldr	r1, [pc, #88]	; (800aafc <HAL_RCC_ClockConfig+0x1bc>)
 800aaa2:	4313      	orrs	r3, r2
 800aaa4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800aaa6:	687b      	ldr	r3, [r7, #4]
 800aaa8:	681b      	ldr	r3, [r3, #0]
 800aaaa:	f003 0308 	and.w	r3, r3, #8
 800aaae:	2b00      	cmp	r3, #0
 800aab0:	d009      	beq.n	800aac6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800aab2:	4b12      	ldr	r3, [pc, #72]	; (800aafc <HAL_RCC_ClockConfig+0x1bc>)
 800aab4:	689b      	ldr	r3, [r3, #8]
 800aab6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800aaba:	687b      	ldr	r3, [r7, #4]
 800aabc:	691b      	ldr	r3, [r3, #16]
 800aabe:	00db      	lsls	r3, r3, #3
 800aac0:	490e      	ldr	r1, [pc, #56]	; (800aafc <HAL_RCC_ClockConfig+0x1bc>)
 800aac2:	4313      	orrs	r3, r2
 800aac4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800aac6:	f000 f821 	bl	800ab0c <HAL_RCC_GetSysClockFreq>
 800aaca:	4601      	mov	r1, r0
 800aacc:	4b0b      	ldr	r3, [pc, #44]	; (800aafc <HAL_RCC_ClockConfig+0x1bc>)
 800aace:	689b      	ldr	r3, [r3, #8]
 800aad0:	091b      	lsrs	r3, r3, #4
 800aad2:	f003 030f 	and.w	r3, r3, #15
 800aad6:	4a0a      	ldr	r2, [pc, #40]	; (800ab00 <HAL_RCC_ClockConfig+0x1c0>)
 800aad8:	5cd3      	ldrb	r3, [r2, r3]
 800aada:	fa21 f303 	lsr.w	r3, r1, r3
 800aade:	4a09      	ldr	r2, [pc, #36]	; (800ab04 <HAL_RCC_ClockConfig+0x1c4>)
 800aae0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800aae2:	4b09      	ldr	r3, [pc, #36]	; (800ab08 <HAL_RCC_ClockConfig+0x1c8>)
 800aae4:	681b      	ldr	r3, [r3, #0]
 800aae6:	4618      	mov	r0, r3
 800aae8:	f7fd ff72 	bl	80089d0 <HAL_InitTick>

  return HAL_OK;
 800aaec:	2300      	movs	r3, #0
}
 800aaee:	4618      	mov	r0, r3
 800aaf0:	3710      	adds	r7, #16
 800aaf2:	46bd      	mov	sp, r7
 800aaf4:	bd80      	pop	{r7, pc}
 800aaf6:	bf00      	nop
 800aaf8:	40023c00 	.word	0x40023c00
 800aafc:	40023800 	.word	0x40023800
 800ab00:	08052120 	.word	0x08052120
 800ab04:	20000004 	.word	0x20000004
 800ab08:	20000008 	.word	0x20000008

0800ab0c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800ab0c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ab0e:	b085      	sub	sp, #20
 800ab10:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800ab12:	2300      	movs	r3, #0
 800ab14:	607b      	str	r3, [r7, #4]
 800ab16:	2300      	movs	r3, #0
 800ab18:	60fb      	str	r3, [r7, #12]
 800ab1a:	2300      	movs	r3, #0
 800ab1c:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 800ab1e:	2300      	movs	r3, #0
 800ab20:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800ab22:	4b63      	ldr	r3, [pc, #396]	; (800acb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ab24:	689b      	ldr	r3, [r3, #8]
 800ab26:	f003 030c 	and.w	r3, r3, #12
 800ab2a:	2b04      	cmp	r3, #4
 800ab2c:	d007      	beq.n	800ab3e <HAL_RCC_GetSysClockFreq+0x32>
 800ab2e:	2b08      	cmp	r3, #8
 800ab30:	d008      	beq.n	800ab44 <HAL_RCC_GetSysClockFreq+0x38>
 800ab32:	2b00      	cmp	r3, #0
 800ab34:	f040 80b4 	bne.w	800aca0 <HAL_RCC_GetSysClockFreq+0x194>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800ab38:	4b5e      	ldr	r3, [pc, #376]	; (800acb4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800ab3a:	60bb      	str	r3, [r7, #8]
       break;
 800ab3c:	e0b3      	b.n	800aca6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800ab3e:	4b5e      	ldr	r3, [pc, #376]	; (800acb8 <HAL_RCC_GetSysClockFreq+0x1ac>)
 800ab40:	60bb      	str	r3, [r7, #8]
      break;
 800ab42:	e0b0      	b.n	800aca6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800ab44:	4b5a      	ldr	r3, [pc, #360]	; (800acb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ab46:	685b      	ldr	r3, [r3, #4]
 800ab48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800ab4c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800ab4e:	4b58      	ldr	r3, [pc, #352]	; (800acb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ab50:	685b      	ldr	r3, [r3, #4]
 800ab52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800ab56:	2b00      	cmp	r3, #0
 800ab58:	d04a      	beq.n	800abf0 <HAL_RCC_GetSysClockFreq+0xe4>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800ab5a:	4b55      	ldr	r3, [pc, #340]	; (800acb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ab5c:	685b      	ldr	r3, [r3, #4]
 800ab5e:	099b      	lsrs	r3, r3, #6
 800ab60:	f04f 0400 	mov.w	r4, #0
 800ab64:	f240 11ff 	movw	r1, #511	; 0x1ff
 800ab68:	f04f 0200 	mov.w	r2, #0
 800ab6c:	ea03 0501 	and.w	r5, r3, r1
 800ab70:	ea04 0602 	and.w	r6, r4, r2
 800ab74:	4629      	mov	r1, r5
 800ab76:	4632      	mov	r2, r6
 800ab78:	f04f 0300 	mov.w	r3, #0
 800ab7c:	f04f 0400 	mov.w	r4, #0
 800ab80:	0154      	lsls	r4, r2, #5
 800ab82:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800ab86:	014b      	lsls	r3, r1, #5
 800ab88:	4619      	mov	r1, r3
 800ab8a:	4622      	mov	r2, r4
 800ab8c:	1b49      	subs	r1, r1, r5
 800ab8e:	eb62 0206 	sbc.w	r2, r2, r6
 800ab92:	f04f 0300 	mov.w	r3, #0
 800ab96:	f04f 0400 	mov.w	r4, #0
 800ab9a:	0194      	lsls	r4, r2, #6
 800ab9c:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800aba0:	018b      	lsls	r3, r1, #6
 800aba2:	1a5b      	subs	r3, r3, r1
 800aba4:	eb64 0402 	sbc.w	r4, r4, r2
 800aba8:	f04f 0100 	mov.w	r1, #0
 800abac:	f04f 0200 	mov.w	r2, #0
 800abb0:	00e2      	lsls	r2, r4, #3
 800abb2:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800abb6:	00d9      	lsls	r1, r3, #3
 800abb8:	460b      	mov	r3, r1
 800abba:	4614      	mov	r4, r2
 800abbc:	195b      	adds	r3, r3, r5
 800abbe:	eb44 0406 	adc.w	r4, r4, r6
 800abc2:	f04f 0100 	mov.w	r1, #0
 800abc6:	f04f 0200 	mov.w	r2, #0
 800abca:	0262      	lsls	r2, r4, #9
 800abcc:	ea42 52d3 	orr.w	r2, r2, r3, lsr #23
 800abd0:	0259      	lsls	r1, r3, #9
 800abd2:	460b      	mov	r3, r1
 800abd4:	4614      	mov	r4, r2
 800abd6:	4618      	mov	r0, r3
 800abd8:	4621      	mov	r1, r4
 800abda:	687b      	ldr	r3, [r7, #4]
 800abdc:	f04f 0400 	mov.w	r4, #0
 800abe0:	461a      	mov	r2, r3
 800abe2:	4623      	mov	r3, r4
 800abe4:	f7f5 fff2 	bl	8000bcc <__aeabi_uldivmod>
 800abe8:	4603      	mov	r3, r0
 800abea:	460c      	mov	r4, r1
 800abec:	60fb      	str	r3, [r7, #12]
 800abee:	e049      	b.n	800ac84 <HAL_RCC_GetSysClockFreq+0x178>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800abf0:	4b2f      	ldr	r3, [pc, #188]	; (800acb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800abf2:	685b      	ldr	r3, [r3, #4]
 800abf4:	099b      	lsrs	r3, r3, #6
 800abf6:	f04f 0400 	mov.w	r4, #0
 800abfa:	f240 11ff 	movw	r1, #511	; 0x1ff
 800abfe:	f04f 0200 	mov.w	r2, #0
 800ac02:	ea03 0501 	and.w	r5, r3, r1
 800ac06:	ea04 0602 	and.w	r6, r4, r2
 800ac0a:	4629      	mov	r1, r5
 800ac0c:	4632      	mov	r2, r6
 800ac0e:	f04f 0300 	mov.w	r3, #0
 800ac12:	f04f 0400 	mov.w	r4, #0
 800ac16:	0154      	lsls	r4, r2, #5
 800ac18:	ea44 64d1 	orr.w	r4, r4, r1, lsr #27
 800ac1c:	014b      	lsls	r3, r1, #5
 800ac1e:	4619      	mov	r1, r3
 800ac20:	4622      	mov	r2, r4
 800ac22:	1b49      	subs	r1, r1, r5
 800ac24:	eb62 0206 	sbc.w	r2, r2, r6
 800ac28:	f04f 0300 	mov.w	r3, #0
 800ac2c:	f04f 0400 	mov.w	r4, #0
 800ac30:	0194      	lsls	r4, r2, #6
 800ac32:	ea44 6491 	orr.w	r4, r4, r1, lsr #26
 800ac36:	018b      	lsls	r3, r1, #6
 800ac38:	1a5b      	subs	r3, r3, r1
 800ac3a:	eb64 0402 	sbc.w	r4, r4, r2
 800ac3e:	f04f 0100 	mov.w	r1, #0
 800ac42:	f04f 0200 	mov.w	r2, #0
 800ac46:	00e2      	lsls	r2, r4, #3
 800ac48:	ea42 7253 	orr.w	r2, r2, r3, lsr #29
 800ac4c:	00d9      	lsls	r1, r3, #3
 800ac4e:	460b      	mov	r3, r1
 800ac50:	4614      	mov	r4, r2
 800ac52:	195b      	adds	r3, r3, r5
 800ac54:	eb44 0406 	adc.w	r4, r4, r6
 800ac58:	f04f 0100 	mov.w	r1, #0
 800ac5c:	f04f 0200 	mov.w	r2, #0
 800ac60:	02a2      	lsls	r2, r4, #10
 800ac62:	ea42 5293 	orr.w	r2, r2, r3, lsr #22
 800ac66:	0299      	lsls	r1, r3, #10
 800ac68:	460b      	mov	r3, r1
 800ac6a:	4614      	mov	r4, r2
 800ac6c:	4618      	mov	r0, r3
 800ac6e:	4621      	mov	r1, r4
 800ac70:	687b      	ldr	r3, [r7, #4]
 800ac72:	f04f 0400 	mov.w	r4, #0
 800ac76:	461a      	mov	r2, r3
 800ac78:	4623      	mov	r3, r4
 800ac7a:	f7f5 ffa7 	bl	8000bcc <__aeabi_uldivmod>
 800ac7e:	4603      	mov	r3, r0
 800ac80:	460c      	mov	r4, r1
 800ac82:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800ac84:	4b0a      	ldr	r3, [pc, #40]	; (800acb0 <HAL_RCC_GetSysClockFreq+0x1a4>)
 800ac86:	685b      	ldr	r3, [r3, #4]
 800ac88:	0c1b      	lsrs	r3, r3, #16
 800ac8a:	f003 0303 	and.w	r3, r3, #3
 800ac8e:	3301      	adds	r3, #1
 800ac90:	005b      	lsls	r3, r3, #1
 800ac92:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800ac94:	68fa      	ldr	r2, [r7, #12]
 800ac96:	683b      	ldr	r3, [r7, #0]
 800ac98:	fbb2 f3f3 	udiv	r3, r2, r3
 800ac9c:	60bb      	str	r3, [r7, #8]
      break;
 800ac9e:	e002      	b.n	800aca6 <HAL_RCC_GetSysClockFreq+0x19a>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 800aca0:	4b04      	ldr	r3, [pc, #16]	; (800acb4 <HAL_RCC_GetSysClockFreq+0x1a8>)
 800aca2:	60bb      	str	r3, [r7, #8]
      break;
 800aca4:	bf00      	nop
    }
  }
  return sysclockfreq;
 800aca6:	68bb      	ldr	r3, [r7, #8]
}
 800aca8:	4618      	mov	r0, r3
 800acaa:	3714      	adds	r7, #20
 800acac:	46bd      	mov	sp, r7
 800acae:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800acb0:	40023800 	.word	0x40023800
 800acb4:	00f42400 	.word	0x00f42400
 800acb8:	007a1200 	.word	0x007a1200

0800acbc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800acbc:	b480      	push	{r7}
 800acbe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800acc0:	4b03      	ldr	r3, [pc, #12]	; (800acd0 <HAL_RCC_GetHCLKFreq+0x14>)
 800acc2:	681b      	ldr	r3, [r3, #0]
}
 800acc4:	4618      	mov	r0, r3
 800acc6:	46bd      	mov	sp, r7
 800acc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800accc:	4770      	bx	lr
 800acce:	bf00      	nop
 800acd0:	20000004 	.word	0x20000004

0800acd4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800acd4:	b580      	push	{r7, lr}
 800acd6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800acd8:	f7ff fff0 	bl	800acbc <HAL_RCC_GetHCLKFreq>
 800acdc:	4601      	mov	r1, r0
 800acde:	4b05      	ldr	r3, [pc, #20]	; (800acf4 <HAL_RCC_GetPCLK1Freq+0x20>)
 800ace0:	689b      	ldr	r3, [r3, #8]
 800ace2:	0a9b      	lsrs	r3, r3, #10
 800ace4:	f003 0307 	and.w	r3, r3, #7
 800ace8:	4a03      	ldr	r2, [pc, #12]	; (800acf8 <HAL_RCC_GetPCLK1Freq+0x24>)
 800acea:	5cd3      	ldrb	r3, [r2, r3]
 800acec:	fa21 f303 	lsr.w	r3, r1, r3
}
 800acf0:	4618      	mov	r0, r3
 800acf2:	bd80      	pop	{r7, pc}
 800acf4:	40023800 	.word	0x40023800
 800acf8:	08052130 	.word	0x08052130

0800acfc <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800ad00:	f7ff ffdc 	bl	800acbc <HAL_RCC_GetHCLKFreq>
 800ad04:	4601      	mov	r1, r0
 800ad06:	4b05      	ldr	r3, [pc, #20]	; (800ad1c <HAL_RCC_GetPCLK2Freq+0x20>)
 800ad08:	689b      	ldr	r3, [r3, #8]
 800ad0a:	0b5b      	lsrs	r3, r3, #13
 800ad0c:	f003 0307 	and.w	r3, r3, #7
 800ad10:	4a03      	ldr	r2, [pc, #12]	; (800ad20 <HAL_RCC_GetPCLK2Freq+0x24>)
 800ad12:	5cd3      	ldrb	r3, [r2, r3]
 800ad14:	fa21 f303 	lsr.w	r3, r1, r3
}
 800ad18:	4618      	mov	r0, r3
 800ad1a:	bd80      	pop	{r7, pc}
 800ad1c:	40023800 	.word	0x40023800
 800ad20:	08052130 	.word	0x08052130

0800ad24 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 800ad24:	b480      	push	{r7}
 800ad26:	b083      	sub	sp, #12
 800ad28:	af00      	add	r7, sp, #0
 800ad2a:	6078      	str	r0, [r7, #4]
 800ad2c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	220f      	movs	r2, #15
 800ad32:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 800ad34:	4b12      	ldr	r3, [pc, #72]	; (800ad80 <HAL_RCC_GetClockConfig+0x5c>)
 800ad36:	689b      	ldr	r3, [r3, #8]
 800ad38:	f003 0203 	and.w	r2, r3, #3
 800ad3c:	687b      	ldr	r3, [r7, #4]
 800ad3e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 800ad40:	4b0f      	ldr	r3, [pc, #60]	; (800ad80 <HAL_RCC_GetClockConfig+0x5c>)
 800ad42:	689b      	ldr	r3, [r3, #8]
 800ad44:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 800ad48:	687b      	ldr	r3, [r7, #4]
 800ad4a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 800ad4c:	4b0c      	ldr	r3, [pc, #48]	; (800ad80 <HAL_RCC_GetClockConfig+0x5c>)
 800ad4e:	689b      	ldr	r3, [r3, #8]
 800ad50:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 800ad58:	4b09      	ldr	r3, [pc, #36]	; (800ad80 <HAL_RCC_GetClockConfig+0x5c>)
 800ad5a:	689b      	ldr	r3, [r3, #8]
 800ad5c:	08db      	lsrs	r3, r3, #3
 800ad5e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 800ad62:	687b      	ldr	r3, [r7, #4]
 800ad64:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 800ad66:	4b07      	ldr	r3, [pc, #28]	; (800ad84 <HAL_RCC_GetClockConfig+0x60>)
 800ad68:	681b      	ldr	r3, [r3, #0]
 800ad6a:	f003 020f 	and.w	r2, r3, #15
 800ad6e:	683b      	ldr	r3, [r7, #0]
 800ad70:	601a      	str	r2, [r3, #0]
}
 800ad72:	bf00      	nop
 800ad74:	370c      	adds	r7, #12
 800ad76:	46bd      	mov	sp, r7
 800ad78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ad7c:	4770      	bx	lr
 800ad7e:	bf00      	nop
 800ad80:	40023800 	.word	0x40023800
 800ad84:	40023c00 	.word	0x40023c00

0800ad88 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 800ad88:	b580      	push	{r7, lr}
 800ad8a:	b082      	sub	sp, #8
 800ad8c:	af00      	add	r7, sp, #0
 800ad8e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 800ad90:	687b      	ldr	r3, [r7, #4]
 800ad92:	2b00      	cmp	r3, #0
 800ad94:	d101      	bne.n	800ad9a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 800ad96:	2301      	movs	r3, #1
 800ad98:	e056      	b.n	800ae48 <HAL_SPI_Init+0xc0>
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800ad9a:	687b      	ldr	r3, [r7, #4]
 800ad9c:	2200      	movs	r2, #0
 800ad9e:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ada6:	b2db      	uxtb	r3, r3
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d106      	bne.n	800adba <HAL_SPI_Init+0x32>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800adac:	687b      	ldr	r3, [r7, #4]
 800adae:	2200      	movs	r2, #0
 800adb0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 800adb4:	6878      	ldr	r0, [r7, #4]
 800adb6:	f7fd fc8b 	bl	80086d0 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800adba:	687b      	ldr	r3, [r7, #4]
 800adbc:	2202      	movs	r2, #2
 800adbe:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 800adc2:	687b      	ldr	r3, [r7, #4]
 800adc4:	681b      	ldr	r3, [r3, #0]
 800adc6:	681a      	ldr	r2, [r3, #0]
 800adc8:	687b      	ldr	r3, [r7, #4]
 800adca:	681b      	ldr	r3, [r3, #0]
 800adcc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800add0:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, (hspi->Init.Mode | hspi->Init.Direction | hspi->Init.DataSize |
 800add2:	687b      	ldr	r3, [r7, #4]
 800add4:	685a      	ldr	r2, [r3, #4]
 800add6:	687b      	ldr	r3, [r7, #4]
 800add8:	689b      	ldr	r3, [r3, #8]
 800adda:	431a      	orrs	r2, r3
 800addc:	687b      	ldr	r3, [r7, #4]
 800adde:	68db      	ldr	r3, [r3, #12]
 800ade0:	431a      	orrs	r2, r3
 800ade2:	687b      	ldr	r3, [r7, #4]
 800ade4:	691b      	ldr	r3, [r3, #16]
 800ade6:	431a      	orrs	r2, r3
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	695b      	ldr	r3, [r3, #20]
 800adec:	431a      	orrs	r2, r3
 800adee:	687b      	ldr	r3, [r7, #4]
 800adf0:	699b      	ldr	r3, [r3, #24]
 800adf2:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800adf6:	431a      	orrs	r2, r3
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	69db      	ldr	r3, [r3, #28]
 800adfc:	431a      	orrs	r2, r3
 800adfe:	687b      	ldr	r3, [r7, #4]
 800ae00:	6a1b      	ldr	r3, [r3, #32]
 800ae02:	ea42 0103 	orr.w	r1, r2, r3
 800ae06:	687b      	ldr	r3, [r7, #4]
 800ae08:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ae0a:	687b      	ldr	r3, [r7, #4]
 800ae0c:	681b      	ldr	r3, [r3, #0]
 800ae0e:	430a      	orrs	r2, r1
 800ae10:	601a      	str	r2, [r3, #0]
                                  hspi->Init.CLKPolarity | hspi->Init.CLKPhase | (hspi->Init.NSS & SPI_CR1_SSM) |
                                  hspi->Init.BaudRatePrescaler | hspi->Init.FirstBit  | hspi->Init.CRCCalculation));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | hspi->Init.TIMode));
 800ae12:	687b      	ldr	r3, [r7, #4]
 800ae14:	699b      	ldr	r3, [r3, #24]
 800ae16:	0c1b      	lsrs	r3, r3, #16
 800ae18:	f003 0104 	and.w	r1, r3, #4
 800ae1c:	687b      	ldr	r3, [r7, #4]
 800ae1e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800ae20:	687b      	ldr	r3, [r7, #4]
 800ae22:	681b      	ldr	r3, [r3, #0]
 800ae24:	430a      	orrs	r2, r1
 800ae26:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800ae28:	687b      	ldr	r3, [r7, #4]
 800ae2a:	681b      	ldr	r3, [r3, #0]
 800ae2c:	69da      	ldr	r2, [r3, #28]
 800ae2e:	687b      	ldr	r3, [r7, #4]
 800ae30:	681b      	ldr	r3, [r3, #0]
 800ae32:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800ae36:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ae38:	687b      	ldr	r3, [r7, #4]
 800ae3a:	2200      	movs	r2, #0
 800ae3c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	2201      	movs	r2, #1
 800ae42:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 800ae46:	2300      	movs	r3, #0
}
 800ae48:	4618      	mov	r0, r3
 800ae4a:	3708      	adds	r7, #8
 800ae4c:	46bd      	mov	sp, r7
 800ae4e:	bd80      	pop	{r7, pc}

0800ae50 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800ae50:	b580      	push	{r7, lr}
 800ae52:	b088      	sub	sp, #32
 800ae54:	af00      	add	r7, sp, #0
 800ae56:	60f8      	str	r0, [r7, #12]
 800ae58:	60b9      	str	r1, [r7, #8]
 800ae5a:	603b      	str	r3, [r7, #0]
 800ae5c:	4613      	mov	r3, r2
 800ae5e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800ae60:	2300      	movs	r3, #0
 800ae62:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800ae64:	68fb      	ldr	r3, [r7, #12]
 800ae66:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800ae6a:	2b01      	cmp	r3, #1
 800ae6c:	d101      	bne.n	800ae72 <HAL_SPI_Transmit+0x22>
 800ae6e:	2302      	movs	r3, #2
 800ae70:	e11e      	b.n	800b0b0 <HAL_SPI_Transmit+0x260>
 800ae72:	68fb      	ldr	r3, [r7, #12]
 800ae74:	2201      	movs	r2, #1
 800ae76:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800ae7a:	f7fd fedd 	bl	8008c38 <HAL_GetTick>
 800ae7e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 800ae80:	88fb      	ldrh	r3, [r7, #6]
 800ae82:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 800ae84:	68fb      	ldr	r3, [r7, #12]
 800ae86:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800ae8a:	b2db      	uxtb	r3, r3
 800ae8c:	2b01      	cmp	r3, #1
 800ae8e:	d002      	beq.n	800ae96 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 800ae90:	2302      	movs	r3, #2
 800ae92:	77fb      	strb	r3, [r7, #31]
    goto error;
 800ae94:	e103      	b.n	800b09e <HAL_SPI_Transmit+0x24e>
  }

  if ((pData == NULL) || (Size == 0U))
 800ae96:	68bb      	ldr	r3, [r7, #8]
 800ae98:	2b00      	cmp	r3, #0
 800ae9a:	d002      	beq.n	800aea2 <HAL_SPI_Transmit+0x52>
 800ae9c:	88fb      	ldrh	r3, [r7, #6]
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d102      	bne.n	800aea8 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 800aea2:	2301      	movs	r3, #1
 800aea4:	77fb      	strb	r3, [r7, #31]
    goto error;
 800aea6:	e0fa      	b.n	800b09e <HAL_SPI_Transmit+0x24e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800aea8:	68fb      	ldr	r3, [r7, #12]
 800aeaa:	2203      	movs	r2, #3
 800aeac:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800aeb0:	68fb      	ldr	r3, [r7, #12]
 800aeb2:	2200      	movs	r2, #0
 800aeb4:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800aeb6:	68fb      	ldr	r3, [r7, #12]
 800aeb8:	68ba      	ldr	r2, [r7, #8]
 800aeba:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 800aebc:	68fb      	ldr	r3, [r7, #12]
 800aebe:	88fa      	ldrh	r2, [r7, #6]
 800aec0:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 800aec2:	68fb      	ldr	r3, [r7, #12]
 800aec4:	88fa      	ldrh	r2, [r7, #6]
 800aec6:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800aec8:	68fb      	ldr	r3, [r7, #12]
 800aeca:	2200      	movs	r2, #0
 800aecc:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 800aece:	68fb      	ldr	r3, [r7, #12]
 800aed0:	2200      	movs	r2, #0
 800aed2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 800aed4:	68fb      	ldr	r3, [r7, #12]
 800aed6:	2200      	movs	r2, #0
 800aed8:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800aeda:	68fb      	ldr	r3, [r7, #12]
 800aedc:	2200      	movs	r2, #0
 800aede:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 800aee0:	68fb      	ldr	r3, [r7, #12]
 800aee2:	2200      	movs	r2, #0
 800aee4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800aee6:	68fb      	ldr	r3, [r7, #12]
 800aee8:	689b      	ldr	r3, [r3, #8]
 800aeea:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800aeee:	d107      	bne.n	800af00 <HAL_SPI_Transmit+0xb0>
  {
    SPI_1LINE_TX(hspi);
 800aef0:	68fb      	ldr	r3, [r7, #12]
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	681a      	ldr	r2, [r3, #0]
 800aef6:	68fb      	ldr	r3, [r7, #12]
 800aef8:	681b      	ldr	r3, [r3, #0]
 800aefa:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800aefe:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800af00:	68fb      	ldr	r3, [r7, #12]
 800af02:	681b      	ldr	r3, [r3, #0]
 800af04:	681b      	ldr	r3, [r3, #0]
 800af06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800af0a:	2b40      	cmp	r3, #64	; 0x40
 800af0c:	d007      	beq.n	800af1e <HAL_SPI_Transmit+0xce>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800af0e:	68fb      	ldr	r3, [r7, #12]
 800af10:	681b      	ldr	r3, [r3, #0]
 800af12:	681a      	ldr	r2, [r3, #0]
 800af14:	68fb      	ldr	r3, [r7, #12]
 800af16:	681b      	ldr	r3, [r3, #0]
 800af18:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800af1c:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800af1e:	68fb      	ldr	r3, [r7, #12]
 800af20:	68db      	ldr	r3, [r3, #12]
 800af22:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800af26:	d14b      	bne.n	800afc0 <HAL_SPI_Transmit+0x170>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800af28:	68fb      	ldr	r3, [r7, #12]
 800af2a:	685b      	ldr	r3, [r3, #4]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d002      	beq.n	800af36 <HAL_SPI_Transmit+0xe6>
 800af30:	8afb      	ldrh	r3, [r7, #22]
 800af32:	2b01      	cmp	r3, #1
 800af34:	d13e      	bne.n	800afb4 <HAL_SPI_Transmit+0x164>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800af36:	68fb      	ldr	r3, [r7, #12]
 800af38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af3a:	881a      	ldrh	r2, [r3, #0]
 800af3c:	68fb      	ldr	r3, [r7, #12]
 800af3e:	681b      	ldr	r3, [r3, #0]
 800af40:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800af42:	68fb      	ldr	r3, [r7, #12]
 800af44:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af46:	1c9a      	adds	r2, r3, #2
 800af48:	68fb      	ldr	r3, [r7, #12]
 800af4a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800af4c:	68fb      	ldr	r3, [r7, #12]
 800af4e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af50:	b29b      	uxth	r3, r3
 800af52:	3b01      	subs	r3, #1
 800af54:	b29a      	uxth	r2, r3
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 800af5a:	e02b      	b.n	800afb4 <HAL_SPI_Transmit+0x164>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	689b      	ldr	r3, [r3, #8]
 800af62:	f003 0302 	and.w	r3, r3, #2
 800af66:	2b02      	cmp	r3, #2
 800af68:	d112      	bne.n	800af90 <HAL_SPI_Transmit+0x140>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800af6a:	68fb      	ldr	r3, [r7, #12]
 800af6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af6e:	881a      	ldrh	r2, [r3, #0]
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	681b      	ldr	r3, [r3, #0]
 800af74:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800af76:	68fb      	ldr	r3, [r7, #12]
 800af78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800af7a:	1c9a      	adds	r2, r3, #2
 800af7c:	68fb      	ldr	r3, [r7, #12]
 800af7e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800af80:	68fb      	ldr	r3, [r7, #12]
 800af82:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800af84:	b29b      	uxth	r3, r3
 800af86:	3b01      	subs	r3, #1
 800af88:	b29a      	uxth	r2, r3
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	86da      	strh	r2, [r3, #54]	; 0x36
 800af8e:	e011      	b.n	800afb4 <HAL_SPI_Transmit+0x164>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800af90:	f7fd fe52 	bl	8008c38 <HAL_GetTick>
 800af94:	4602      	mov	r2, r0
 800af96:	69bb      	ldr	r3, [r7, #24]
 800af98:	1ad3      	subs	r3, r2, r3
 800af9a:	683a      	ldr	r2, [r7, #0]
 800af9c:	429a      	cmp	r2, r3
 800af9e:	d803      	bhi.n	800afa8 <HAL_SPI_Transmit+0x158>
 800afa0:	683b      	ldr	r3, [r7, #0]
 800afa2:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800afa6:	d102      	bne.n	800afae <HAL_SPI_Transmit+0x15e>
 800afa8:	683b      	ldr	r3, [r7, #0]
 800afaa:	2b00      	cmp	r3, #0
 800afac:	d102      	bne.n	800afb4 <HAL_SPI_Transmit+0x164>
        {
          errorcode = HAL_TIMEOUT;
 800afae:	2303      	movs	r3, #3
 800afb0:	77fb      	strb	r3, [r7, #31]
          goto error;
 800afb2:	e074      	b.n	800b09e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800afb8:	b29b      	uxth	r3, r3
 800afba:	2b00      	cmp	r3, #0
 800afbc:	d1ce      	bne.n	800af5c <HAL_SPI_Transmit+0x10c>
 800afbe:	e04c      	b.n	800b05a <HAL_SPI_Transmit+0x20a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800afc0:	68fb      	ldr	r3, [r7, #12]
 800afc2:	685b      	ldr	r3, [r3, #4]
 800afc4:	2b00      	cmp	r3, #0
 800afc6:	d002      	beq.n	800afce <HAL_SPI_Transmit+0x17e>
 800afc8:	8afb      	ldrh	r3, [r7, #22]
 800afca:	2b01      	cmp	r3, #1
 800afcc:	d140      	bne.n	800b050 <HAL_SPI_Transmit+0x200>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800afce:	68fb      	ldr	r3, [r7, #12]
 800afd0:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800afd2:	68fb      	ldr	r3, [r7, #12]
 800afd4:	681b      	ldr	r3, [r3, #0]
 800afd6:	330c      	adds	r3, #12
 800afd8:	7812      	ldrb	r2, [r2, #0]
 800afda:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800afdc:	68fb      	ldr	r3, [r7, #12]
 800afde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800afe0:	1c5a      	adds	r2, r3, #1
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800afe6:	68fb      	ldr	r3, [r7, #12]
 800afe8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800afea:	b29b      	uxth	r3, r3
 800afec:	3b01      	subs	r3, #1
 800afee:	b29a      	uxth	r2, r3
 800aff0:	68fb      	ldr	r3, [r7, #12]
 800aff2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 800aff4:	e02c      	b.n	800b050 <HAL_SPI_Transmit+0x200>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 800aff6:	68fb      	ldr	r3, [r7, #12]
 800aff8:	681b      	ldr	r3, [r3, #0]
 800affa:	689b      	ldr	r3, [r3, #8]
 800affc:	f003 0302 	and.w	r3, r3, #2
 800b000:	2b02      	cmp	r3, #2
 800b002:	d113      	bne.n	800b02c <HAL_SPI_Transmit+0x1dc>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b004:	68fb      	ldr	r3, [r7, #12]
 800b006:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b008:	68fb      	ldr	r3, [r7, #12]
 800b00a:	681b      	ldr	r3, [r3, #0]
 800b00c:	330c      	adds	r3, #12
 800b00e:	7812      	ldrb	r2, [r2, #0]
 800b010:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 800b012:	68fb      	ldr	r3, [r7, #12]
 800b014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b016:	1c5a      	adds	r2, r3, #1
 800b018:	68fb      	ldr	r3, [r7, #12]
 800b01a:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b01c:	68fb      	ldr	r3, [r7, #12]
 800b01e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b020:	b29b      	uxth	r3, r3
 800b022:	3b01      	subs	r3, #1
 800b024:	b29a      	uxth	r2, r3
 800b026:	68fb      	ldr	r3, [r7, #12]
 800b028:	86da      	strh	r2, [r3, #54]	; 0x36
 800b02a:	e011      	b.n	800b050 <HAL_SPI_Transmit+0x200>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b02c:	f7fd fe04 	bl	8008c38 <HAL_GetTick>
 800b030:	4602      	mov	r2, r0
 800b032:	69bb      	ldr	r3, [r7, #24]
 800b034:	1ad3      	subs	r3, r2, r3
 800b036:	683a      	ldr	r2, [r7, #0]
 800b038:	429a      	cmp	r2, r3
 800b03a:	d803      	bhi.n	800b044 <HAL_SPI_Transmit+0x1f4>
 800b03c:	683b      	ldr	r3, [r7, #0]
 800b03e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b042:	d102      	bne.n	800b04a <HAL_SPI_Transmit+0x1fa>
 800b044:	683b      	ldr	r3, [r7, #0]
 800b046:	2b00      	cmp	r3, #0
 800b048:	d102      	bne.n	800b050 <HAL_SPI_Transmit+0x200>
        {
          errorcode = HAL_TIMEOUT;
 800b04a:	2303      	movs	r3, #3
 800b04c:	77fb      	strb	r3, [r7, #31]
          goto error;
 800b04e:	e026      	b.n	800b09e <HAL_SPI_Transmit+0x24e>
    while (hspi->TxXferCount > 0U)
 800b050:	68fb      	ldr	r3, [r7, #12]
 800b052:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b054:	b29b      	uxth	r3, r3
 800b056:	2b00      	cmp	r3, #0
 800b058:	d1cd      	bne.n	800aff6 <HAL_SPI_Transmit+0x1a6>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b05a:	69ba      	ldr	r2, [r7, #24]
 800b05c:	6839      	ldr	r1, [r7, #0]
 800b05e:	68f8      	ldr	r0, [r7, #12]
 800b060:	f000 fbb2 	bl	800b7c8 <SPI_EndRxTxTransaction>
 800b064:	4603      	mov	r3, r0
 800b066:	2b00      	cmp	r3, #0
 800b068:	d002      	beq.n	800b070 <HAL_SPI_Transmit+0x220>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	2220      	movs	r2, #32
 800b06e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	689b      	ldr	r3, [r3, #8]
 800b074:	2b00      	cmp	r3, #0
 800b076:	d10a      	bne.n	800b08e <HAL_SPI_Transmit+0x23e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b078:	2300      	movs	r3, #0
 800b07a:	613b      	str	r3, [r7, #16]
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	68db      	ldr	r3, [r3, #12]
 800b082:	613b      	str	r3, [r7, #16]
 800b084:	68fb      	ldr	r3, [r7, #12]
 800b086:	681b      	ldr	r3, [r3, #0]
 800b088:	689b      	ldr	r3, [r3, #8]
 800b08a:	613b      	str	r3, [r7, #16]
 800b08c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b08e:	68fb      	ldr	r3, [r7, #12]
 800b090:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b092:	2b00      	cmp	r3, #0
 800b094:	d002      	beq.n	800b09c <HAL_SPI_Transmit+0x24c>
  {
    errorcode = HAL_ERROR;
 800b096:	2301      	movs	r3, #1
 800b098:	77fb      	strb	r3, [r7, #31]
 800b09a:	e000      	b.n	800b09e <HAL_SPI_Transmit+0x24e>
  }

error:
 800b09c:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b09e:	68fb      	ldr	r3, [r7, #12]
 800b0a0:	2201      	movs	r2, #1
 800b0a2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800b0a6:	68fb      	ldr	r3, [r7, #12]
 800b0a8:	2200      	movs	r2, #0
 800b0aa:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b0ae:	7ffb      	ldrb	r3, [r7, #31]
}
 800b0b0:	4618      	mov	r0, r3
 800b0b2:	3720      	adds	r7, #32
 800b0b4:	46bd      	mov	sp, r7
 800b0b6:	bd80      	pop	{r7, pc}

0800b0b8 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800b0b8:	b580      	push	{r7, lr}
 800b0ba:	b088      	sub	sp, #32
 800b0bc:	af02      	add	r7, sp, #8
 800b0be:	60f8      	str	r0, [r7, #12]
 800b0c0:	60b9      	str	r1, [r7, #8]
 800b0c2:	603b      	str	r3, [r7, #0]
 800b0c4:	4613      	mov	r3, r2
 800b0c6:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800b0c8:	2300      	movs	r3, #0
 800b0ca:	75fb      	strb	r3, [r7, #23]

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 800b0cc:	68fb      	ldr	r3, [r7, #12]
 800b0ce:	685b      	ldr	r3, [r3, #4]
 800b0d0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b0d4:	d112      	bne.n	800b0fc <HAL_SPI_Receive+0x44>
 800b0d6:	68fb      	ldr	r3, [r7, #12]
 800b0d8:	689b      	ldr	r3, [r3, #8]
 800b0da:	2b00      	cmp	r3, #0
 800b0dc:	d10e      	bne.n	800b0fc <HAL_SPI_Receive+0x44>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	2204      	movs	r2, #4
 800b0e2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 800b0e6:	88fa      	ldrh	r2, [r7, #6]
 800b0e8:	683b      	ldr	r3, [r7, #0]
 800b0ea:	9300      	str	r3, [sp, #0]
 800b0ec:	4613      	mov	r3, r2
 800b0ee:	68ba      	ldr	r2, [r7, #8]
 800b0f0:	68b9      	ldr	r1, [r7, #8]
 800b0f2:	68f8      	ldr	r0, [r7, #12]
 800b0f4:	f000 f8e9 	bl	800b2ca <HAL_SPI_TransmitReceive>
 800b0f8:	4603      	mov	r3, r0
 800b0fa:	e0e2      	b.n	800b2c2 <HAL_SPI_Receive+0x20a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b0fc:	68fb      	ldr	r3, [r7, #12]
 800b0fe:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b102:	2b01      	cmp	r3, #1
 800b104:	d101      	bne.n	800b10a <HAL_SPI_Receive+0x52>
 800b106:	2302      	movs	r3, #2
 800b108:	e0db      	b.n	800b2c2 <HAL_SPI_Receive+0x20a>
 800b10a:	68fb      	ldr	r3, [r7, #12]
 800b10c:	2201      	movs	r2, #1
 800b10e:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b112:	f7fd fd91 	bl	8008c38 <HAL_GetTick>
 800b116:	6138      	str	r0, [r7, #16]

  if (hspi->State != HAL_SPI_STATE_READY)
 800b118:	68fb      	ldr	r3, [r7, #12]
 800b11a:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b11e:	b2db      	uxtb	r3, r3
 800b120:	2b01      	cmp	r3, #1
 800b122:	d002      	beq.n	800b12a <HAL_SPI_Receive+0x72>
  {
    errorcode = HAL_BUSY;
 800b124:	2302      	movs	r3, #2
 800b126:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b128:	e0c2      	b.n	800b2b0 <HAL_SPI_Receive+0x1f8>
  }

  if ((pData == NULL) || (Size == 0U))
 800b12a:	68bb      	ldr	r3, [r7, #8]
 800b12c:	2b00      	cmp	r3, #0
 800b12e:	d002      	beq.n	800b136 <HAL_SPI_Receive+0x7e>
 800b130:	88fb      	ldrh	r3, [r7, #6]
 800b132:	2b00      	cmp	r3, #0
 800b134:	d102      	bne.n	800b13c <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 800b136:	2301      	movs	r3, #1
 800b138:	75fb      	strb	r3, [r7, #23]
    goto error;
 800b13a:	e0b9      	b.n	800b2b0 <HAL_SPI_Receive+0x1f8>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2204      	movs	r2, #4
 800b140:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	2200      	movs	r2, #0
 800b148:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800b14a:	68fb      	ldr	r3, [r7, #12]
 800b14c:	68ba      	ldr	r2, [r7, #8]
 800b14e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 800b150:	68fb      	ldr	r3, [r7, #12]
 800b152:	88fa      	ldrh	r2, [r7, #6]
 800b154:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 800b156:	68fb      	ldr	r3, [r7, #12]
 800b158:	88fa      	ldrh	r2, [r7, #6]
 800b15a:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	2200      	movs	r2, #0
 800b160:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 800b162:	68fb      	ldr	r3, [r7, #12]
 800b164:	2200      	movs	r2, #0
 800b166:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 800b168:	68fb      	ldr	r3, [r7, #12]
 800b16a:	2200      	movs	r2, #0
 800b16c:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 800b16e:	68fb      	ldr	r3, [r7, #12]
 800b170:	2200      	movs	r2, #0
 800b172:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b174:	68fb      	ldr	r3, [r7, #12]
 800b176:	2200      	movs	r2, #0
 800b178:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b17a:	68fb      	ldr	r3, [r7, #12]
 800b17c:	689b      	ldr	r3, [r3, #8]
 800b17e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b182:	d107      	bne.n	800b194 <HAL_SPI_Receive+0xdc>
  {
    SPI_1LINE_RX(hspi);
 800b184:	68fb      	ldr	r3, [r7, #12]
 800b186:	681b      	ldr	r3, [r3, #0]
 800b188:	681a      	ldr	r2, [r3, #0]
 800b18a:	68fb      	ldr	r3, [r7, #12]
 800b18c:	681b      	ldr	r3, [r3, #0]
 800b18e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800b192:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b194:	68fb      	ldr	r3, [r7, #12]
 800b196:	681b      	ldr	r3, [r3, #0]
 800b198:	681b      	ldr	r3, [r3, #0]
 800b19a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b19e:	2b40      	cmp	r3, #64	; 0x40
 800b1a0:	d007      	beq.n	800b1b2 <HAL_SPI_Receive+0xfa>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b1a2:	68fb      	ldr	r3, [r7, #12]
 800b1a4:	681b      	ldr	r3, [r3, #0]
 800b1a6:	681a      	ldr	r2, [r3, #0]
 800b1a8:	68fb      	ldr	r3, [r7, #12]
 800b1aa:	681b      	ldr	r3, [r3, #0]
 800b1ac:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b1b0:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 800b1b2:	68fb      	ldr	r3, [r7, #12]
 800b1b4:	68db      	ldr	r3, [r3, #12]
 800b1b6:	2b00      	cmp	r3, #0
 800b1b8:	d162      	bne.n	800b280 <HAL_SPI_Receive+0x1c8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 800b1ba:	e02e      	b.n	800b21a <HAL_SPI_Receive+0x162>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b1bc:	68fb      	ldr	r3, [r7, #12]
 800b1be:	681b      	ldr	r3, [r3, #0]
 800b1c0:	689b      	ldr	r3, [r3, #8]
 800b1c2:	f003 0301 	and.w	r3, r3, #1
 800b1c6:	2b01      	cmp	r3, #1
 800b1c8:	d115      	bne.n	800b1f6 <HAL_SPI_Receive+0x13e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 800b1ca:	68fb      	ldr	r3, [r7, #12]
 800b1cc:	681b      	ldr	r3, [r3, #0]
 800b1ce:	f103 020c 	add.w	r2, r3, #12
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1d6:	7812      	ldrb	r2, [r2, #0]
 800b1d8:	b2d2      	uxtb	r2, r2
 800b1da:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 800b1dc:	68fb      	ldr	r3, [r7, #12]
 800b1de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1e0:	1c5a      	adds	r2, r3, #1
 800b1e2:	68fb      	ldr	r3, [r7, #12]
 800b1e4:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b1e6:	68fb      	ldr	r3, [r7, #12]
 800b1e8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b1ea:	b29b      	uxth	r3, r3
 800b1ec:	3b01      	subs	r3, #1
 800b1ee:	b29a      	uxth	r2, r3
 800b1f0:	68fb      	ldr	r3, [r7, #12]
 800b1f2:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b1f4:	e011      	b.n	800b21a <HAL_SPI_Receive+0x162>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b1f6:	f7fd fd1f 	bl	8008c38 <HAL_GetTick>
 800b1fa:	4602      	mov	r2, r0
 800b1fc:	693b      	ldr	r3, [r7, #16]
 800b1fe:	1ad3      	subs	r3, r2, r3
 800b200:	683a      	ldr	r2, [r7, #0]
 800b202:	429a      	cmp	r2, r3
 800b204:	d803      	bhi.n	800b20e <HAL_SPI_Receive+0x156>
 800b206:	683b      	ldr	r3, [r7, #0]
 800b208:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b20c:	d102      	bne.n	800b214 <HAL_SPI_Receive+0x15c>
 800b20e:	683b      	ldr	r3, [r7, #0]
 800b210:	2b00      	cmp	r3, #0
 800b212:	d102      	bne.n	800b21a <HAL_SPI_Receive+0x162>
        {
          errorcode = HAL_TIMEOUT;
 800b214:	2303      	movs	r3, #3
 800b216:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b218:	e04a      	b.n	800b2b0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800b21a:	68fb      	ldr	r3, [r7, #12]
 800b21c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b21e:	b29b      	uxth	r3, r3
 800b220:	2b00      	cmp	r3, #0
 800b222:	d1cb      	bne.n	800b1bc <HAL_SPI_Receive+0x104>
 800b224:	e031      	b.n	800b28a <HAL_SPI_Receive+0x1d2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 800b226:	68fb      	ldr	r3, [r7, #12]
 800b228:	681b      	ldr	r3, [r3, #0]
 800b22a:	689b      	ldr	r3, [r3, #8]
 800b22c:	f003 0301 	and.w	r3, r3, #1
 800b230:	2b01      	cmp	r3, #1
 800b232:	d113      	bne.n	800b25c <HAL_SPI_Receive+0x1a4>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b234:	68fb      	ldr	r3, [r7, #12]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	68da      	ldr	r2, [r3, #12]
 800b23a:	68fb      	ldr	r3, [r7, #12]
 800b23c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b23e:	b292      	uxth	r2, r2
 800b240:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b242:	68fb      	ldr	r3, [r7, #12]
 800b244:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b246:	1c9a      	adds	r2, r3, #2
 800b248:	68fb      	ldr	r3, [r7, #12]
 800b24a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b24c:	68fb      	ldr	r3, [r7, #12]
 800b24e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b250:	b29b      	uxth	r3, r3
 800b252:	3b01      	subs	r3, #1
 800b254:	b29a      	uxth	r2, r3
 800b256:	68fb      	ldr	r3, [r7, #12]
 800b258:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b25a:	e011      	b.n	800b280 <HAL_SPI_Receive+0x1c8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 800b25c:	f7fd fcec 	bl	8008c38 <HAL_GetTick>
 800b260:	4602      	mov	r2, r0
 800b262:	693b      	ldr	r3, [r7, #16]
 800b264:	1ad3      	subs	r3, r2, r3
 800b266:	683a      	ldr	r2, [r7, #0]
 800b268:	429a      	cmp	r2, r3
 800b26a:	d803      	bhi.n	800b274 <HAL_SPI_Receive+0x1bc>
 800b26c:	683b      	ldr	r3, [r7, #0]
 800b26e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b272:	d102      	bne.n	800b27a <HAL_SPI_Receive+0x1c2>
 800b274:	683b      	ldr	r3, [r7, #0]
 800b276:	2b00      	cmp	r3, #0
 800b278:	d102      	bne.n	800b280 <HAL_SPI_Receive+0x1c8>
        {
          errorcode = HAL_TIMEOUT;
 800b27a:	2303      	movs	r3, #3
 800b27c:	75fb      	strb	r3, [r7, #23]
          goto error;
 800b27e:	e017      	b.n	800b2b0 <HAL_SPI_Receive+0x1f8>
    while (hspi->RxXferCount > 0U)
 800b280:	68fb      	ldr	r3, [r7, #12]
 800b282:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b284:	b29b      	uxth	r3, r3
 800b286:	2b00      	cmp	r3, #0
 800b288:	d1cd      	bne.n	800b226 <HAL_SPI_Receive+0x16e>
    READ_REG(hspi->Instance->DR);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b28a:	693a      	ldr	r2, [r7, #16]
 800b28c:	6839      	ldr	r1, [r7, #0]
 800b28e:	68f8      	ldr	r0, [r7, #12]
 800b290:	f000 fa35 	bl	800b6fe <SPI_EndRxTransaction>
 800b294:	4603      	mov	r3, r0
 800b296:	2b00      	cmp	r3, #0
 800b298:	d002      	beq.n	800b2a0 <HAL_SPI_Receive+0x1e8>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b29a:	68fb      	ldr	r3, [r7, #12]
 800b29c:	2220      	movs	r2, #32
 800b29e:	655a      	str	r2, [r3, #84]	; 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b2a0:	68fb      	ldr	r3, [r7, #12]
 800b2a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b2a4:	2b00      	cmp	r3, #0
 800b2a6:	d002      	beq.n	800b2ae <HAL_SPI_Receive+0x1f6>
  {
    errorcode = HAL_ERROR;
 800b2a8:	2301      	movs	r3, #1
 800b2aa:	75fb      	strb	r3, [r7, #23]
 800b2ac:	e000      	b.n	800b2b0 <HAL_SPI_Receive+0x1f8>
  }

error :
 800b2ae:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b2b0:	68fb      	ldr	r3, [r7, #12]
 800b2b2:	2201      	movs	r2, #1
 800b2b4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b2b8:	68fb      	ldr	r3, [r7, #12]
 800b2ba:	2200      	movs	r2, #0
 800b2bc:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b2c0:	7dfb      	ldrb	r3, [r7, #23]
}
 800b2c2:	4618      	mov	r0, r3
 800b2c4:	3718      	adds	r7, #24
 800b2c6:	46bd      	mov	sp, r7
 800b2c8:	bd80      	pop	{r7, pc}

0800b2ca <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 800b2ca:	b580      	push	{r7, lr}
 800b2cc:	b08c      	sub	sp, #48	; 0x30
 800b2ce:	af00      	add	r7, sp, #0
 800b2d0:	60f8      	str	r0, [r7, #12]
 800b2d2:	60b9      	str	r1, [r7, #8]
 800b2d4:	607a      	str	r2, [r7, #4]
 800b2d6:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  uint32_t             tickstart;

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 800b2d8:	2301      	movs	r3, #1
 800b2da:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800b2dc:	2300      	movs	r3, #0
 800b2de:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800b2e2:	68fb      	ldr	r3, [r7, #12]
 800b2e4:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 800b2e8:	2b01      	cmp	r3, #1
 800b2ea:	d101      	bne.n	800b2f0 <HAL_SPI_TransmitReceive+0x26>
 800b2ec:	2302      	movs	r3, #2
 800b2ee:	e18a      	b.n	800b606 <HAL_SPI_TransmitReceive+0x33c>
 800b2f0:	68fb      	ldr	r3, [r7, #12]
 800b2f2:	2201      	movs	r2, #1
 800b2f4:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b2f8:	f7fd fc9e 	bl	8008c38 <HAL_GetTick>
 800b2fc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800b2fe:	68fb      	ldr	r3, [r7, #12]
 800b300:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b304:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 800b308:	68fb      	ldr	r3, [r7, #12]
 800b30a:	685b      	ldr	r3, [r3, #4]
 800b30c:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800b30e:	887b      	ldrh	r3, [r7, #2]
 800b310:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800b312:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b316:	2b01      	cmp	r3, #1
 800b318:	d00f      	beq.n	800b33a <HAL_SPI_TransmitReceive+0x70>
 800b31a:	69fb      	ldr	r3, [r7, #28]
 800b31c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b320:	d107      	bne.n	800b332 <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800b322:	68fb      	ldr	r3, [r7, #12]
 800b324:	689b      	ldr	r3, [r3, #8]
 800b326:	2b00      	cmp	r3, #0
 800b328:	d103      	bne.n	800b332 <HAL_SPI_TransmitReceive+0x68>
 800b32a:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800b32e:	2b04      	cmp	r3, #4
 800b330:	d003      	beq.n	800b33a <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800b332:	2302      	movs	r3, #2
 800b334:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b338:	e15b      	b.n	800b5f2 <HAL_SPI_TransmitReceive+0x328>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800b33a:	68bb      	ldr	r3, [r7, #8]
 800b33c:	2b00      	cmp	r3, #0
 800b33e:	d005      	beq.n	800b34c <HAL_SPI_TransmitReceive+0x82>
 800b340:	687b      	ldr	r3, [r7, #4]
 800b342:	2b00      	cmp	r3, #0
 800b344:	d002      	beq.n	800b34c <HAL_SPI_TransmitReceive+0x82>
 800b346:	887b      	ldrh	r3, [r7, #2]
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d103      	bne.n	800b354 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 800b34c:	2301      	movs	r3, #1
 800b34e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800b352:	e14e      	b.n	800b5f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800b354:	68fb      	ldr	r3, [r7, #12]
 800b356:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b35a:	b2db      	uxtb	r3, r3
 800b35c:	2b04      	cmp	r3, #4
 800b35e:	d003      	beq.n	800b368 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800b360:	68fb      	ldr	r3, [r7, #12]
 800b362:	2205      	movs	r2, #5
 800b364:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800b368:	68fb      	ldr	r3, [r7, #12]
 800b36a:	2200      	movs	r2, #0
 800b36c:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800b36e:	68fb      	ldr	r3, [r7, #12]
 800b370:	687a      	ldr	r2, [r7, #4]
 800b372:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 800b374:	68fb      	ldr	r3, [r7, #12]
 800b376:	887a      	ldrh	r2, [r7, #2]
 800b378:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 800b37a:	68fb      	ldr	r3, [r7, #12]
 800b37c:	887a      	ldrh	r2, [r7, #2]
 800b37e:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800b380:	68fb      	ldr	r3, [r7, #12]
 800b382:	68ba      	ldr	r2, [r7, #8]
 800b384:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 800b386:	68fb      	ldr	r3, [r7, #12]
 800b388:	887a      	ldrh	r2, [r7, #2]
 800b38a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 800b38c:	68fb      	ldr	r3, [r7, #12]
 800b38e:	887a      	ldrh	r2, [r7, #2]
 800b390:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800b392:	68fb      	ldr	r3, [r7, #12]
 800b394:	2200      	movs	r2, #0
 800b396:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800b398:	68fb      	ldr	r3, [r7, #12]
 800b39a:	2200      	movs	r2, #0
 800b39c:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800b39e:	68fb      	ldr	r3, [r7, #12]
 800b3a0:	681b      	ldr	r3, [r3, #0]
 800b3a2:	681b      	ldr	r3, [r3, #0]
 800b3a4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b3a8:	2b40      	cmp	r3, #64	; 0x40
 800b3aa:	d007      	beq.n	800b3bc <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800b3ac:	68fb      	ldr	r3, [r7, #12]
 800b3ae:	681b      	ldr	r3, [r3, #0]
 800b3b0:	681a      	ldr	r2, [r3, #0]
 800b3b2:	68fb      	ldr	r3, [r7, #12]
 800b3b4:	681b      	ldr	r3, [r3, #0]
 800b3b6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800b3ba:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 800b3bc:	68fb      	ldr	r3, [r7, #12]
 800b3be:	68db      	ldr	r3, [r3, #12]
 800b3c0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800b3c4:	d178      	bne.n	800b4b8 <HAL_SPI_TransmitReceive+0x1ee>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b3c6:	68fb      	ldr	r3, [r7, #12]
 800b3c8:	685b      	ldr	r3, [r3, #4]
 800b3ca:	2b00      	cmp	r3, #0
 800b3cc:	d002      	beq.n	800b3d4 <HAL_SPI_TransmitReceive+0x10a>
 800b3ce:	8b7b      	ldrh	r3, [r7, #26]
 800b3d0:	2b01      	cmp	r3, #1
 800b3d2:	d166      	bne.n	800b4a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b3d4:	68fb      	ldr	r3, [r7, #12]
 800b3d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3d8:	881a      	ldrh	r2, [r3, #0]
 800b3da:	68fb      	ldr	r3, [r7, #12]
 800b3dc:	681b      	ldr	r3, [r3, #0]
 800b3de:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 800b3e0:	68fb      	ldr	r3, [r7, #12]
 800b3e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b3e4:	1c9a      	adds	r2, r3, #2
 800b3e6:	68fb      	ldr	r3, [r7, #12]
 800b3e8:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b3ea:	68fb      	ldr	r3, [r7, #12]
 800b3ec:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b3ee:	b29b      	uxth	r3, r3
 800b3f0:	3b01      	subs	r3, #1
 800b3f2:	b29a      	uxth	r2, r3
 800b3f4:	68fb      	ldr	r3, [r7, #12]
 800b3f6:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b3f8:	e053      	b.n	800b4a2 <HAL_SPI_TransmitReceive+0x1d8>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b3fa:	68fb      	ldr	r3, [r7, #12]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	689b      	ldr	r3, [r3, #8]
 800b400:	f003 0302 	and.w	r3, r3, #2
 800b404:	2b02      	cmp	r3, #2
 800b406:	d11b      	bne.n	800b440 <HAL_SPI_TransmitReceive+0x176>
 800b408:	68fb      	ldr	r3, [r7, #12]
 800b40a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b40c:	b29b      	uxth	r3, r3
 800b40e:	2b00      	cmp	r3, #0
 800b410:	d016      	beq.n	800b440 <HAL_SPI_TransmitReceive+0x176>
 800b412:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b414:	2b01      	cmp	r3, #1
 800b416:	d113      	bne.n	800b440 <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b418:	68fb      	ldr	r3, [r7, #12]
 800b41a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b41c:	881a      	ldrh	r2, [r3, #0]
 800b41e:	68fb      	ldr	r3, [r7, #12]
 800b420:	681b      	ldr	r3, [r3, #0]
 800b422:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 800b424:	68fb      	ldr	r3, [r7, #12]
 800b426:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b428:	1c9a      	adds	r2, r3, #2
 800b42a:	68fb      	ldr	r3, [r7, #12]
 800b42c:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b42e:	68fb      	ldr	r3, [r7, #12]
 800b430:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b432:	b29b      	uxth	r3, r3
 800b434:	3b01      	subs	r3, #1
 800b436:	b29a      	uxth	r2, r3
 800b438:	68fb      	ldr	r3, [r7, #12]
 800b43a:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b43c:	2300      	movs	r3, #0
 800b43e:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b440:	68fb      	ldr	r3, [r7, #12]
 800b442:	681b      	ldr	r3, [r3, #0]
 800b444:	689b      	ldr	r3, [r3, #8]
 800b446:	f003 0301 	and.w	r3, r3, #1
 800b44a:	2b01      	cmp	r3, #1
 800b44c:	d119      	bne.n	800b482 <HAL_SPI_TransmitReceive+0x1b8>
 800b44e:	68fb      	ldr	r3, [r7, #12]
 800b450:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b452:	b29b      	uxth	r3, r3
 800b454:	2b00      	cmp	r3, #0
 800b456:	d014      	beq.n	800b482 <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 800b458:	68fb      	ldr	r3, [r7, #12]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	68da      	ldr	r2, [r3, #12]
 800b45e:	68fb      	ldr	r3, [r7, #12]
 800b460:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b462:	b292      	uxth	r2, r2
 800b464:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 800b466:	68fb      	ldr	r3, [r7, #12]
 800b468:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b46a:	1c9a      	adds	r2, r3, #2
 800b46c:	68fb      	ldr	r3, [r7, #12]
 800b46e:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b470:	68fb      	ldr	r3, [r7, #12]
 800b472:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b474:	b29b      	uxth	r3, r3
 800b476:	3b01      	subs	r3, #1
 800b478:	b29a      	uxth	r2, r3
 800b47a:	68fb      	ldr	r3, [r7, #12]
 800b47c:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b47e:	2301      	movs	r3, #1
 800b480:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800b482:	f7fd fbd9 	bl	8008c38 <HAL_GetTick>
 800b486:	4602      	mov	r2, r0
 800b488:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b48a:	1ad3      	subs	r3, r2, r3
 800b48c:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b48e:	429a      	cmp	r2, r3
 800b490:	d807      	bhi.n	800b4a2 <HAL_SPI_TransmitReceive+0x1d8>
 800b492:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b494:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b498:	d003      	beq.n	800b4a2 <HAL_SPI_TransmitReceive+0x1d8>
      {
        errorcode = HAL_TIMEOUT;
 800b49a:	2303      	movs	r3, #3
 800b49c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b4a0:	e0a7      	b.n	800b5f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b4a2:	68fb      	ldr	r3, [r7, #12]
 800b4a4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b4a6:	b29b      	uxth	r3, r3
 800b4a8:	2b00      	cmp	r3, #0
 800b4aa:	d1a6      	bne.n	800b3fa <HAL_SPI_TransmitReceive+0x130>
 800b4ac:	68fb      	ldr	r3, [r7, #12]
 800b4ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4b0:	b29b      	uxth	r3, r3
 800b4b2:	2b00      	cmp	r3, #0
 800b4b4:	d1a1      	bne.n	800b3fa <HAL_SPI_TransmitReceive+0x130>
 800b4b6:	e07c      	b.n	800b5b2 <HAL_SPI_TransmitReceive+0x2e8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800b4b8:	68fb      	ldr	r3, [r7, #12]
 800b4ba:	685b      	ldr	r3, [r3, #4]
 800b4bc:	2b00      	cmp	r3, #0
 800b4be:	d002      	beq.n	800b4c6 <HAL_SPI_TransmitReceive+0x1fc>
 800b4c0:	8b7b      	ldrh	r3, [r7, #26]
 800b4c2:	2b01      	cmp	r3, #1
 800b4c4:	d16b      	bne.n	800b59e <HAL_SPI_TransmitReceive+0x2d4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800b4c6:	68fb      	ldr	r3, [r7, #12]
 800b4c8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b4ca:	68fb      	ldr	r3, [r7, #12]
 800b4cc:	681b      	ldr	r3, [r3, #0]
 800b4ce:	330c      	adds	r3, #12
 800b4d0:	7812      	ldrb	r2, [r2, #0]
 800b4d2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 800b4d4:	68fb      	ldr	r3, [r7, #12]
 800b4d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b4d8:	1c5a      	adds	r2, r3, #1
 800b4da:	68fb      	ldr	r3, [r7, #12]
 800b4dc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 800b4de:	68fb      	ldr	r3, [r7, #12]
 800b4e0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b4e2:	b29b      	uxth	r3, r3
 800b4e4:	3b01      	subs	r3, #1
 800b4e6:	b29a      	uxth	r2, r3
 800b4e8:	68fb      	ldr	r3, [r7, #12]
 800b4ea:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b4ec:	e057      	b.n	800b59e <HAL_SPI_TransmitReceive+0x2d4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 800b4ee:	68fb      	ldr	r3, [r7, #12]
 800b4f0:	681b      	ldr	r3, [r3, #0]
 800b4f2:	689b      	ldr	r3, [r3, #8]
 800b4f4:	f003 0302 	and.w	r3, r3, #2
 800b4f8:	2b02      	cmp	r3, #2
 800b4fa:	d11c      	bne.n	800b536 <HAL_SPI_TransmitReceive+0x26c>
 800b4fc:	68fb      	ldr	r3, [r7, #12]
 800b4fe:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b500:	b29b      	uxth	r3, r3
 800b502:	2b00      	cmp	r3, #0
 800b504:	d017      	beq.n	800b536 <HAL_SPI_TransmitReceive+0x26c>
 800b506:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800b508:	2b01      	cmp	r3, #1
 800b50a:	d114      	bne.n	800b536 <HAL_SPI_TransmitReceive+0x26c>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b50c:	68fb      	ldr	r3, [r7, #12]
 800b50e:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800b510:	68fb      	ldr	r3, [r7, #12]
 800b512:	681b      	ldr	r3, [r3, #0]
 800b514:	330c      	adds	r3, #12
 800b516:	7812      	ldrb	r2, [r2, #0]
 800b518:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800b51a:	68fb      	ldr	r3, [r7, #12]
 800b51c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800b51e:	1c5a      	adds	r2, r3, #1
 800b520:	68fb      	ldr	r3, [r7, #12]
 800b522:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800b524:	68fb      	ldr	r3, [r7, #12]
 800b526:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b528:	b29b      	uxth	r3, r3
 800b52a:	3b01      	subs	r3, #1
 800b52c:	b29a      	uxth	r2, r3
 800b52e:	68fb      	ldr	r3, [r7, #12]
 800b530:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 800b532:	2300      	movs	r3, #0
 800b534:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800b536:	68fb      	ldr	r3, [r7, #12]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	689b      	ldr	r3, [r3, #8]
 800b53c:	f003 0301 	and.w	r3, r3, #1
 800b540:	2b01      	cmp	r3, #1
 800b542:	d119      	bne.n	800b578 <HAL_SPI_TransmitReceive+0x2ae>
 800b544:	68fb      	ldr	r3, [r7, #12]
 800b546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b548:	b29b      	uxth	r3, r3
 800b54a:	2b00      	cmp	r3, #0
 800b54c:	d014      	beq.n	800b578 <HAL_SPI_TransmitReceive+0x2ae>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 800b54e:	68fb      	ldr	r3, [r7, #12]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	68da      	ldr	r2, [r3, #12]
 800b554:	68fb      	ldr	r3, [r7, #12]
 800b556:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b558:	b2d2      	uxtb	r2, r2
 800b55a:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 800b55c:	68fb      	ldr	r3, [r7, #12]
 800b55e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b560:	1c5a      	adds	r2, r3, #1
 800b562:	68fb      	ldr	r3, [r7, #12]
 800b564:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800b566:	68fb      	ldr	r3, [r7, #12]
 800b568:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b56a:	b29b      	uxth	r3, r3
 800b56c:	3b01      	subs	r3, #1
 800b56e:	b29a      	uxth	r2, r3
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800b574:	2301      	movs	r3, #1
 800b576:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800b578:	f7fd fb5e 	bl	8008c38 <HAL_GetTick>
 800b57c:	4602      	mov	r2, r0
 800b57e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b580:	1ad3      	subs	r3, r2, r3
 800b582:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800b584:	429a      	cmp	r2, r3
 800b586:	d803      	bhi.n	800b590 <HAL_SPI_TransmitReceive+0x2c6>
 800b588:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b58a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b58e:	d102      	bne.n	800b596 <HAL_SPI_TransmitReceive+0x2cc>
 800b590:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800b592:	2b00      	cmp	r3, #0
 800b594:	d103      	bne.n	800b59e <HAL_SPI_TransmitReceive+0x2d4>
      {
        errorcode = HAL_TIMEOUT;
 800b596:	2303      	movs	r3, #3
 800b598:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        goto error;
 800b59c:	e029      	b.n	800b5f2 <HAL_SPI_TransmitReceive+0x328>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800b59e:	68fb      	ldr	r3, [r7, #12]
 800b5a0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800b5a2:	b29b      	uxth	r3, r3
 800b5a4:	2b00      	cmp	r3, #0
 800b5a6:	d1a2      	bne.n	800b4ee <HAL_SPI_TransmitReceive+0x224>
 800b5a8:	68fb      	ldr	r3, [r7, #12]
 800b5aa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5ac:	b29b      	uxth	r3, r3
 800b5ae:	2b00      	cmp	r3, #0
 800b5b0:	d19d      	bne.n	800b4ee <HAL_SPI_TransmitReceive+0x224>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800b5b2:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b5b4:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 800b5b6:	68f8      	ldr	r0, [r7, #12]
 800b5b8:	f000 f906 	bl	800b7c8 <SPI_EndRxTxTransaction>
 800b5bc:	4603      	mov	r3, r0
 800b5be:	2b00      	cmp	r3, #0
 800b5c0:	d006      	beq.n	800b5d0 <HAL_SPI_TransmitReceive+0x306>
  {
    errorcode = HAL_ERROR;
 800b5c2:	2301      	movs	r3, #1
 800b5c4:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b5c8:	68fb      	ldr	r3, [r7, #12]
 800b5ca:	2220      	movs	r2, #32
 800b5cc:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 800b5ce:	e010      	b.n	800b5f2 <HAL_SPI_TransmitReceive+0x328>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	689b      	ldr	r3, [r3, #8]
 800b5d4:	2b00      	cmp	r3, #0
 800b5d6:	d10b      	bne.n	800b5f0 <HAL_SPI_TransmitReceive+0x326>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b5d8:	2300      	movs	r3, #0
 800b5da:	617b      	str	r3, [r7, #20]
 800b5dc:	68fb      	ldr	r3, [r7, #12]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	68db      	ldr	r3, [r3, #12]
 800b5e2:	617b      	str	r3, [r7, #20]
 800b5e4:	68fb      	ldr	r3, [r7, #12]
 800b5e6:	681b      	ldr	r3, [r3, #0]
 800b5e8:	689b      	ldr	r3, [r3, #8]
 800b5ea:	617b      	str	r3, [r7, #20]
 800b5ec:	697b      	ldr	r3, [r7, #20]
 800b5ee:	e000      	b.n	800b5f2 <HAL_SPI_TransmitReceive+0x328>
  }

error :
 800b5f0:	bf00      	nop
  hspi->State = HAL_SPI_STATE_READY;
 800b5f2:	68fb      	ldr	r3, [r7, #12]
 800b5f4:	2201      	movs	r2, #1
 800b5f6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  __HAL_UNLOCK(hspi);
 800b5fa:	68fb      	ldr	r3, [r7, #12]
 800b5fc:	2200      	movs	r2, #0
 800b5fe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800b602:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800b606:	4618      	mov	r0, r3
 800b608:	3730      	adds	r7, #48	; 0x30
 800b60a:	46bd      	mov	sp, r7
 800b60c:	bd80      	pop	{r7, pc}

0800b60e <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 800b60e:	b480      	push	{r7}
 800b610:	b083      	sub	sp, #12
 800b612:	af00      	add	r7, sp, #0
 800b614:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800b616:	687b      	ldr	r3, [r7, #4]
 800b618:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 800b61c:	b2db      	uxtb	r3, r3
}
 800b61e:	4618      	mov	r0, r3
 800b620:	370c      	adds	r7, #12
 800b622:	46bd      	mov	sp, r7
 800b624:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b628:	4770      	bx	lr

0800b62a <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b62a:	b580      	push	{r7, lr}
 800b62c:	b084      	sub	sp, #16
 800b62e:	af00      	add	r7, sp, #0
 800b630:	60f8      	str	r0, [r7, #12]
 800b632:	60b9      	str	r1, [r7, #8]
 800b634:	603b      	str	r3, [r7, #0]
 800b636:	4613      	mov	r3, r2
 800b638:	71fb      	strb	r3, [r7, #7]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b63a:	e04c      	b.n	800b6d6 <SPI_WaitFlagStateUntilTimeout+0xac>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b63c:	683b      	ldr	r3, [r7, #0]
 800b63e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800b642:	d048      	beq.n	800b6d6 <SPI_WaitFlagStateUntilTimeout+0xac>
    {
      if (((HAL_GetTick() - Tickstart) >= Timeout) || (Timeout == 0U))
 800b644:	f7fd faf8 	bl	8008c38 <HAL_GetTick>
 800b648:	4602      	mov	r2, r0
 800b64a:	69bb      	ldr	r3, [r7, #24]
 800b64c:	1ad3      	subs	r3, r2, r3
 800b64e:	683a      	ldr	r2, [r7, #0]
 800b650:	429a      	cmp	r2, r3
 800b652:	d902      	bls.n	800b65a <SPI_WaitFlagStateUntilTimeout+0x30>
 800b654:	683b      	ldr	r3, [r7, #0]
 800b656:	2b00      	cmp	r3, #0
 800b658:	d13d      	bne.n	800b6d6 <SPI_WaitFlagStateUntilTimeout+0xac>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
        on both master and slave sides in order to resynchronize the master
        and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b65a:	68fb      	ldr	r3, [r7, #12]
 800b65c:	681b      	ldr	r3, [r3, #0]
 800b65e:	685a      	ldr	r2, [r3, #4]
 800b660:	68fb      	ldr	r3, [r7, #12]
 800b662:	681b      	ldr	r3, [r3, #0]
 800b664:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b668:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b66a:	68fb      	ldr	r3, [r7, #12]
 800b66c:	685b      	ldr	r3, [r3, #4]
 800b66e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b672:	d111      	bne.n	800b698 <SPI_WaitFlagStateUntilTimeout+0x6e>
 800b674:	68fb      	ldr	r3, [r7, #12]
 800b676:	689b      	ldr	r3, [r3, #8]
 800b678:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b67c:	d004      	beq.n	800b688 <SPI_WaitFlagStateUntilTimeout+0x5e>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b67e:	68fb      	ldr	r3, [r7, #12]
 800b680:	689b      	ldr	r3, [r3, #8]
 800b682:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b686:	d107      	bne.n	800b698 <SPI_WaitFlagStateUntilTimeout+0x6e>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b688:	68fb      	ldr	r3, [r7, #12]
 800b68a:	681b      	ldr	r3, [r3, #0]
 800b68c:	681a      	ldr	r2, [r3, #0]
 800b68e:	68fb      	ldr	r3, [r7, #12]
 800b690:	681b      	ldr	r3, [r3, #0]
 800b692:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b696:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b698:	68fb      	ldr	r3, [r7, #12]
 800b69a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b69c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b6a0:	d10f      	bne.n	800b6c2 <SPI_WaitFlagStateUntilTimeout+0x98>
        {
          SPI_RESET_CRC(hspi);
 800b6a2:	68fb      	ldr	r3, [r7, #12]
 800b6a4:	681b      	ldr	r3, [r3, #0]
 800b6a6:	681a      	ldr	r2, [r3, #0]
 800b6a8:	68fb      	ldr	r3, [r7, #12]
 800b6aa:	681b      	ldr	r3, [r3, #0]
 800b6ac:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b6b0:	601a      	str	r2, [r3, #0]
 800b6b2:	68fb      	ldr	r3, [r7, #12]
 800b6b4:	681b      	ldr	r3, [r3, #0]
 800b6b6:	681a      	ldr	r2, [r3, #0]
 800b6b8:	68fb      	ldr	r3, [r7, #12]
 800b6ba:	681b      	ldr	r3, [r3, #0]
 800b6bc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b6c0:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b6c2:	68fb      	ldr	r3, [r7, #12]
 800b6c4:	2201      	movs	r2, #1
 800b6c6:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b6ca:	68fb      	ldr	r3, [r7, #12]
 800b6cc:	2200      	movs	r2, #0
 800b6ce:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800b6d2:	2303      	movs	r3, #3
 800b6d4:	e00f      	b.n	800b6f6 <SPI_WaitFlagStateUntilTimeout+0xcc>
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b6d6:	68fb      	ldr	r3, [r7, #12]
 800b6d8:	681b      	ldr	r3, [r3, #0]
 800b6da:	689a      	ldr	r2, [r3, #8]
 800b6dc:	68bb      	ldr	r3, [r7, #8]
 800b6de:	4013      	ands	r3, r2
 800b6e0:	68ba      	ldr	r2, [r7, #8]
 800b6e2:	429a      	cmp	r2, r3
 800b6e4:	bf0c      	ite	eq
 800b6e6:	2301      	moveq	r3, #1
 800b6e8:	2300      	movne	r3, #0
 800b6ea:	b2db      	uxtb	r3, r3
 800b6ec:	461a      	mov	r2, r3
 800b6ee:	79fb      	ldrb	r3, [r7, #7]
 800b6f0:	429a      	cmp	r2, r3
 800b6f2:	d1a3      	bne.n	800b63c <SPI_WaitFlagStateUntilTimeout+0x12>
      }
    }
  }

  return HAL_OK;
 800b6f4:	2300      	movs	r3, #0
}
 800b6f6:	4618      	mov	r0, r3
 800b6f8:	3710      	adds	r7, #16
 800b6fa:	46bd      	mov	sp, r7
 800b6fc:	bd80      	pop	{r7, pc}

0800b6fe <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b6fe:	b580      	push	{r7, lr}
 800b700:	b086      	sub	sp, #24
 800b702:	af02      	add	r7, sp, #8
 800b704:	60f8      	str	r0, [r7, #12]
 800b706:	60b9      	str	r1, [r7, #8]
 800b708:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b70a:	68fb      	ldr	r3, [r7, #12]
 800b70c:	685b      	ldr	r3, [r3, #4]
 800b70e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b712:	d111      	bne.n	800b738 <SPI_EndRxTransaction+0x3a>
 800b714:	68fb      	ldr	r3, [r7, #12]
 800b716:	689b      	ldr	r3, [r3, #8]
 800b718:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b71c:	d004      	beq.n	800b728 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b71e:	68fb      	ldr	r3, [r7, #12]
 800b720:	689b      	ldr	r3, [r3, #8]
 800b722:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b726:	d107      	bne.n	800b738 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b728:	68fb      	ldr	r3, [r7, #12]
 800b72a:	681b      	ldr	r3, [r3, #0]
 800b72c:	681a      	ldr	r2, [r3, #0]
 800b72e:	68fb      	ldr	r3, [r7, #12]
 800b730:	681b      	ldr	r3, [r3, #0]
 800b732:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b736:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b738:	68fb      	ldr	r3, [r7, #12]
 800b73a:	685b      	ldr	r3, [r3, #4]
 800b73c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b740:	d12a      	bne.n	800b798 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800b742:	68fb      	ldr	r3, [r7, #12]
 800b744:	689b      	ldr	r3, [r3, #8]
 800b746:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b74a:	d012      	beq.n	800b772 <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	9300      	str	r3, [sp, #0]
 800b750:	68bb      	ldr	r3, [r7, #8]
 800b752:	2200      	movs	r2, #0
 800b754:	2180      	movs	r1, #128	; 0x80
 800b756:	68f8      	ldr	r0, [r7, #12]
 800b758:	f7ff ff67 	bl	800b62a <SPI_WaitFlagStateUntilTimeout>
 800b75c:	4603      	mov	r3, r0
 800b75e:	2b00      	cmp	r3, #0
 800b760:	d02d      	beq.n	800b7be <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b762:	68fb      	ldr	r3, [r7, #12]
 800b764:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b766:	f043 0220 	orr.w	r2, r3, #32
 800b76a:	68fb      	ldr	r3, [r7, #12]
 800b76c:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b76e:	2303      	movs	r3, #3
 800b770:	e026      	b.n	800b7c0 <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b772:	687b      	ldr	r3, [r7, #4]
 800b774:	9300      	str	r3, [sp, #0]
 800b776:	68bb      	ldr	r3, [r7, #8]
 800b778:	2200      	movs	r2, #0
 800b77a:	2101      	movs	r1, #1
 800b77c:	68f8      	ldr	r0, [r7, #12]
 800b77e:	f7ff ff54 	bl	800b62a <SPI_WaitFlagStateUntilTimeout>
 800b782:	4603      	mov	r3, r0
 800b784:	2b00      	cmp	r3, #0
 800b786:	d01a      	beq.n	800b7be <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b788:	68fb      	ldr	r3, [r7, #12]
 800b78a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b78c:	f043 0220 	orr.w	r2, r3, #32
 800b790:	68fb      	ldr	r3, [r7, #12]
 800b792:	655a      	str	r2, [r3, #84]	; 0x54
        return HAL_TIMEOUT;
 800b794:	2303      	movs	r3, #3
 800b796:	e013      	b.n	800b7c0 <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800b798:	687b      	ldr	r3, [r7, #4]
 800b79a:	9300      	str	r3, [sp, #0]
 800b79c:	68bb      	ldr	r3, [r7, #8]
 800b79e:	2200      	movs	r2, #0
 800b7a0:	2101      	movs	r1, #1
 800b7a2:	68f8      	ldr	r0, [r7, #12]
 800b7a4:	f7ff ff41 	bl	800b62a <SPI_WaitFlagStateUntilTimeout>
 800b7a8:	4603      	mov	r3, r0
 800b7aa:	2b00      	cmp	r3, #0
 800b7ac:	d007      	beq.n	800b7be <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b7ae:	68fb      	ldr	r3, [r7, #12]
 800b7b0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b7b2:	f043 0220 	orr.w	r2, r3, #32
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b7ba:	2303      	movs	r3, #3
 800b7bc:	e000      	b.n	800b7c0 <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 800b7be:	2300      	movs	r3, #0
}
 800b7c0:	4618      	mov	r0, r3
 800b7c2:	3710      	adds	r7, #16
 800b7c4:	46bd      	mov	sp, r7
 800b7c6:	bd80      	pop	{r7, pc}

0800b7c8 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b088      	sub	sp, #32
 800b7cc:	af02      	add	r7, sp, #8
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	607a      	str	r2, [r7, #4]
  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b7d4:	4b1b      	ldr	r3, [pc, #108]	; (800b844 <SPI_EndRxTxTransaction+0x7c>)
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	4a1b      	ldr	r2, [pc, #108]	; (800b848 <SPI_EndRxTxTransaction+0x80>)
 800b7da:	fba2 2303 	umull	r2, r3, r2, r3
 800b7de:	0d5b      	lsrs	r3, r3, #21
 800b7e0:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b7e4:	fb02 f303 	mul.w	r3, r2, r3
 800b7e8:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b7ea:	68fb      	ldr	r3, [r7, #12]
 800b7ec:	685b      	ldr	r3, [r3, #4]
 800b7ee:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b7f2:	d112      	bne.n	800b81a <SPI_EndRxTxTransaction+0x52>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b7f4:	687b      	ldr	r3, [r7, #4]
 800b7f6:	9300      	str	r3, [sp, #0]
 800b7f8:	68bb      	ldr	r3, [r7, #8]
 800b7fa:	2200      	movs	r2, #0
 800b7fc:	2180      	movs	r1, #128	; 0x80
 800b7fe:	68f8      	ldr	r0, [r7, #12]
 800b800:	f7ff ff13 	bl	800b62a <SPI_WaitFlagStateUntilTimeout>
 800b804:	4603      	mov	r3, r0
 800b806:	2b00      	cmp	r3, #0
 800b808:	d016      	beq.n	800b838 <SPI_EndRxTxTransaction+0x70>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b80a:	68fb      	ldr	r3, [r7, #12]
 800b80c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b80e:	f043 0220 	orr.w	r2, r3, #32
 800b812:	68fb      	ldr	r3, [r7, #12]
 800b814:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 800b816:	2303      	movs	r3, #3
 800b818:	e00f      	b.n	800b83a <SPI_EndRxTxTransaction+0x72>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b81a:	697b      	ldr	r3, [r7, #20]
 800b81c:	2b00      	cmp	r3, #0
 800b81e:	d00a      	beq.n	800b836 <SPI_EndRxTxTransaction+0x6e>
      {
        break;
      }
      count--;
 800b820:	697b      	ldr	r3, [r7, #20]
 800b822:	3b01      	subs	r3, #1
 800b824:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b826:	68fb      	ldr	r3, [r7, #12]
 800b828:	681b      	ldr	r3, [r3, #0]
 800b82a:	689b      	ldr	r3, [r3, #8]
 800b82c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b830:	2b80      	cmp	r3, #128	; 0x80
 800b832:	d0f2      	beq.n	800b81a <SPI_EndRxTxTransaction+0x52>
 800b834:	e000      	b.n	800b838 <SPI_EndRxTxTransaction+0x70>
        break;
 800b836:	bf00      	nop
  }

  return HAL_OK;
 800b838:	2300      	movs	r3, #0
}
 800b83a:	4618      	mov	r0, r3
 800b83c:	3718      	adds	r7, #24
 800b83e:	46bd      	mov	sp, r7
 800b840:	bd80      	pop	{r7, pc}
 800b842:	bf00      	nop
 800b844:	20000004 	.word	0x20000004
 800b848:	165e9f81 	.word	0x165e9f81

0800b84c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b84c:	b580      	push	{r7, lr}
 800b84e:	b082      	sub	sp, #8
 800b850:	af00      	add	r7, sp, #0
 800b852:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b854:	687b      	ldr	r3, [r7, #4]
 800b856:	2b00      	cmp	r3, #0
 800b858:	d101      	bne.n	800b85e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b85a:	2301      	movs	r3, #1
 800b85c:	e01d      	b.n	800b89a <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b85e:	687b      	ldr	r3, [r7, #4]
 800b860:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b864:	b2db      	uxtb	r3, r3
 800b866:	2b00      	cmp	r3, #0
 800b868:	d106      	bne.n	800b878 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b86a:	687b      	ldr	r3, [r7, #4]
 800b86c:	2200      	movs	r2, #0
 800b86e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b872:	6878      	ldr	r0, [r7, #4]
 800b874:	f7fc ffca 	bl	800880c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b878:	687b      	ldr	r3, [r7, #4]
 800b87a:	2202      	movs	r2, #2
 800b87c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b880:	687b      	ldr	r3, [r7, #4]
 800b882:	681a      	ldr	r2, [r3, #0]
 800b884:	687b      	ldr	r3, [r7, #4]
 800b886:	3304      	adds	r3, #4
 800b888:	4619      	mov	r1, r3
 800b88a:	4610      	mov	r0, r2
 800b88c:	f000 fb02 	bl	800be94 <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	2201      	movs	r2, #1
 800b894:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b898:	2300      	movs	r3, #0
}
 800b89a:	4618      	mov	r0, r3
 800b89c:	3708      	adds	r7, #8
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	bd80      	pop	{r7, pc}

0800b8a2 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 800b8a2:	b480      	push	{r7}
 800b8a4:	b085      	sub	sp, #20
 800b8a6:	af00      	add	r7, sp, #0
 800b8a8:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b8aa:	687b      	ldr	r3, [r7, #4]
 800b8ac:	2202      	movs	r2, #2
 800b8ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b8b2:	687b      	ldr	r3, [r7, #4]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	689b      	ldr	r3, [r3, #8]
 800b8b8:	f003 0307 	and.w	r3, r3, #7
 800b8bc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b8be:	68fb      	ldr	r3, [r7, #12]
 800b8c0:	2b06      	cmp	r3, #6
 800b8c2:	d007      	beq.n	800b8d4 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 800b8c4:	687b      	ldr	r3, [r7, #4]
 800b8c6:	681b      	ldr	r3, [r3, #0]
 800b8c8:	681a      	ldr	r2, [r3, #0]
 800b8ca:	687b      	ldr	r3, [r7, #4]
 800b8cc:	681b      	ldr	r3, [r3, #0]
 800b8ce:	f042 0201 	orr.w	r2, r2, #1
 800b8d2:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b8d4:	687b      	ldr	r3, [r7, #4]
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 800b8dc:	2300      	movs	r3, #0
}
 800b8de:	4618      	mov	r0, r3
 800b8e0:	3714      	adds	r7, #20
 800b8e2:	46bd      	mov	sp, r7
 800b8e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b8e8:	4770      	bx	lr

0800b8ea <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b8ea:	b480      	push	{r7}
 800b8ec:	b085      	sub	sp, #20
 800b8ee:	af00      	add	r7, sp, #0
 800b8f0:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	681b      	ldr	r3, [r3, #0]
 800b8f6:	68da      	ldr	r2, [r3, #12]
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	f042 0201 	orr.w	r2, r2, #1
 800b900:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b902:	687b      	ldr	r3, [r7, #4]
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	689b      	ldr	r3, [r3, #8]
 800b908:	f003 0307 	and.w	r3, r3, #7
 800b90c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b90e:	68fb      	ldr	r3, [r7, #12]
 800b910:	2b06      	cmp	r3, #6
 800b912:	d007      	beq.n	800b924 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 800b914:	687b      	ldr	r3, [r7, #4]
 800b916:	681b      	ldr	r3, [r3, #0]
 800b918:	681a      	ldr	r2, [r3, #0]
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	681b      	ldr	r3, [r3, #0]
 800b91e:	f042 0201 	orr.w	r2, r2, #1
 800b922:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800b924:	2300      	movs	r3, #0
}
 800b926:	4618      	mov	r0, r3
 800b928:	3714      	adds	r7, #20
 800b92a:	46bd      	mov	sp, r7
 800b92c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b930:	4770      	bx	lr

0800b932 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 800b932:	b580      	push	{r7, lr}
 800b934:	b086      	sub	sp, #24
 800b936:	af00      	add	r7, sp, #0
 800b938:	6078      	str	r0, [r7, #4]
 800b93a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b93c:	687b      	ldr	r3, [r7, #4]
 800b93e:	2b00      	cmp	r3, #0
 800b940:	d101      	bne.n	800b946 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 800b942:	2301      	movs	r3, #1
 800b944:	e083      	b.n	800ba4e <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b946:	687b      	ldr	r3, [r7, #4]
 800b948:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b94c:	b2db      	uxtb	r3, r3
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d106      	bne.n	800b960 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b952:	687b      	ldr	r3, [r7, #4]
 800b954:	2200      	movs	r2, #0
 800b956:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f7fc ff76 	bl	800884c <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b960:	687b      	ldr	r3, [r7, #4]
 800b962:	2202      	movs	r2, #2
 800b964:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800b968:	687b      	ldr	r3, [r7, #4]
 800b96a:	681b      	ldr	r3, [r3, #0]
 800b96c:	689b      	ldr	r3, [r3, #8]
 800b96e:	687a      	ldr	r2, [r7, #4]
 800b970:	6812      	ldr	r2, [r2, #0]
 800b972:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800b976:	f023 0307 	bic.w	r3, r3, #7
 800b97a:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b97c:	687b      	ldr	r3, [r7, #4]
 800b97e:	681a      	ldr	r2, [r3, #0]
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	3304      	adds	r3, #4
 800b984:	4619      	mov	r1, r3
 800b986:	4610      	mov	r0, r2
 800b988:	f000 fa84 	bl	800be94 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800b98c:	687b      	ldr	r3, [r7, #4]
 800b98e:	681b      	ldr	r3, [r3, #0]
 800b990:	689b      	ldr	r3, [r3, #8]
 800b992:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 800b994:	687b      	ldr	r3, [r7, #4]
 800b996:	681b      	ldr	r3, [r3, #0]
 800b998:	699b      	ldr	r3, [r3, #24]
 800b99a:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	681b      	ldr	r3, [r3, #0]
 800b9a0:	6a1b      	ldr	r3, [r3, #32]
 800b9a2:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 800b9a4:	683b      	ldr	r3, [r7, #0]
 800b9a6:	681b      	ldr	r3, [r3, #0]
 800b9a8:	697a      	ldr	r2, [r7, #20]
 800b9aa:	4313      	orrs	r3, r2
 800b9ac:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800b9ae:	693b      	ldr	r3, [r7, #16]
 800b9b0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800b9b4:	f023 0303 	bic.w	r3, r3, #3
 800b9b8:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800b9ba:	683b      	ldr	r3, [r7, #0]
 800b9bc:	689a      	ldr	r2, [r3, #8]
 800b9be:	683b      	ldr	r3, [r7, #0]
 800b9c0:	699b      	ldr	r3, [r3, #24]
 800b9c2:	021b      	lsls	r3, r3, #8
 800b9c4:	4313      	orrs	r3, r2
 800b9c6:	693a      	ldr	r2, [r7, #16]
 800b9c8:	4313      	orrs	r3, r2
 800b9ca:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800b9cc:	693b      	ldr	r3, [r7, #16]
 800b9ce:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 800b9d2:	f023 030c 	bic.w	r3, r3, #12
 800b9d6:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800b9d8:	693b      	ldr	r3, [r7, #16]
 800b9da:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800b9de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800b9e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 800b9e4:	683b      	ldr	r3, [r7, #0]
 800b9e6:	68da      	ldr	r2, [r3, #12]
 800b9e8:	683b      	ldr	r3, [r7, #0]
 800b9ea:	69db      	ldr	r3, [r3, #28]
 800b9ec:	021b      	lsls	r3, r3, #8
 800b9ee:	4313      	orrs	r3, r2
 800b9f0:	693a      	ldr	r2, [r7, #16]
 800b9f2:	4313      	orrs	r3, r2
 800b9f4:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 800b9f6:	683b      	ldr	r3, [r7, #0]
 800b9f8:	691b      	ldr	r3, [r3, #16]
 800b9fa:	011a      	lsls	r2, r3, #4
 800b9fc:	683b      	ldr	r3, [r7, #0]
 800b9fe:	6a1b      	ldr	r3, [r3, #32]
 800ba00:	031b      	lsls	r3, r3, #12
 800ba02:	4313      	orrs	r3, r2
 800ba04:	693a      	ldr	r2, [r7, #16]
 800ba06:	4313      	orrs	r3, r2
 800ba08:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800ba10:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 800ba12:	68fb      	ldr	r3, [r7, #12]
 800ba14:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800ba18:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800ba1a:	683b      	ldr	r3, [r7, #0]
 800ba1c:	685a      	ldr	r2, [r3, #4]
 800ba1e:	683b      	ldr	r3, [r7, #0]
 800ba20:	695b      	ldr	r3, [r3, #20]
 800ba22:	011b      	lsls	r3, r3, #4
 800ba24:	4313      	orrs	r3, r2
 800ba26:	68fa      	ldr	r2, [r7, #12]
 800ba28:	4313      	orrs	r3, r2
 800ba2a:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800ba2c:	687b      	ldr	r3, [r7, #4]
 800ba2e:	681b      	ldr	r3, [r3, #0]
 800ba30:	697a      	ldr	r2, [r7, #20]
 800ba32:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 800ba34:	687b      	ldr	r3, [r7, #4]
 800ba36:	681b      	ldr	r3, [r3, #0]
 800ba38:	693a      	ldr	r2, [r7, #16]
 800ba3a:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800ba3c:	687b      	ldr	r3, [r7, #4]
 800ba3e:	681b      	ldr	r3, [r3, #0]
 800ba40:	68fa      	ldr	r2, [r7, #12]
 800ba42:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800ba44:	687b      	ldr	r3, [r7, #4]
 800ba46:	2201      	movs	r2, #1
 800ba48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800ba4c:	2300      	movs	r3, #0
}
 800ba4e:	4618      	mov	r0, r3
 800ba50:	3718      	adds	r7, #24
 800ba52:	46bd      	mov	sp, r7
 800ba54:	bd80      	pop	{r7, pc}

0800ba56 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800ba56:	b580      	push	{r7, lr}
 800ba58:	b082      	sub	sp, #8
 800ba5a:	af00      	add	r7, sp, #0
 800ba5c:	6078      	str	r0, [r7, #4]
 800ba5e:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 800ba60:	683b      	ldr	r3, [r7, #0]
 800ba62:	2b00      	cmp	r3, #0
 800ba64:	d002      	beq.n	800ba6c <HAL_TIM_Encoder_Start+0x16>
 800ba66:	2b04      	cmp	r3, #4
 800ba68:	d008      	beq.n	800ba7c <HAL_TIM_Encoder_Start+0x26>
 800ba6a:	e00f      	b.n	800ba8c <HAL_TIM_Encoder_Start+0x36>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ba6c:	687b      	ldr	r3, [r7, #4]
 800ba6e:	681b      	ldr	r3, [r3, #0]
 800ba70:	2201      	movs	r2, #1
 800ba72:	2100      	movs	r1, #0
 800ba74:	4618      	mov	r0, r3
 800ba76:	f000 fb27 	bl	800c0c8 <TIM_CCxChannelCmd>
      break;
 800ba7a:	e016      	b.n	800baaa <HAL_TIM_Encoder_Start+0x54>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ba7c:	687b      	ldr	r3, [r7, #4]
 800ba7e:	681b      	ldr	r3, [r3, #0]
 800ba80:	2201      	movs	r2, #1
 800ba82:	2104      	movs	r1, #4
 800ba84:	4618      	mov	r0, r3
 800ba86:	f000 fb1f 	bl	800c0c8 <TIM_CCxChannelCmd>
      break;
 800ba8a:	e00e      	b.n	800baaa <HAL_TIM_Encoder_Start+0x54>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 800ba8c:	687b      	ldr	r3, [r7, #4]
 800ba8e:	681b      	ldr	r3, [r3, #0]
 800ba90:	2201      	movs	r2, #1
 800ba92:	2100      	movs	r1, #0
 800ba94:	4618      	mov	r0, r3
 800ba96:	f000 fb17 	bl	800c0c8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800ba9a:	687b      	ldr	r3, [r7, #4]
 800ba9c:	681b      	ldr	r3, [r3, #0]
 800ba9e:	2201      	movs	r2, #1
 800baa0:	2104      	movs	r1, #4
 800baa2:	4618      	mov	r0, r3
 800baa4:	f000 fb10 	bl	800c0c8 <TIM_CCxChannelCmd>
      break;
 800baa8:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800baaa:	687b      	ldr	r3, [r7, #4]
 800baac:	681b      	ldr	r3, [r3, #0]
 800baae:	681a      	ldr	r2, [r3, #0]
 800bab0:	687b      	ldr	r3, [r7, #4]
 800bab2:	681b      	ldr	r3, [r3, #0]
 800bab4:	f042 0201 	orr.w	r2, r2, #1
 800bab8:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800baba:	2300      	movs	r3, #0
}
 800babc:	4618      	mov	r0, r3
 800babe:	3708      	adds	r7, #8
 800bac0:	46bd      	mov	sp, r7
 800bac2:	bd80      	pop	{r7, pc}

0800bac4 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800bac4:	b580      	push	{r7, lr}
 800bac6:	b082      	sub	sp, #8
 800bac8:	af00      	add	r7, sp, #0
 800baca:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	681b      	ldr	r3, [r3, #0]
 800bad0:	691b      	ldr	r3, [r3, #16]
 800bad2:	f003 0302 	and.w	r3, r3, #2
 800bad6:	2b02      	cmp	r3, #2
 800bad8:	d122      	bne.n	800bb20 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800bada:	687b      	ldr	r3, [r7, #4]
 800badc:	681b      	ldr	r3, [r3, #0]
 800bade:	68db      	ldr	r3, [r3, #12]
 800bae0:	f003 0302 	and.w	r3, r3, #2
 800bae4:	2b02      	cmp	r3, #2
 800bae6:	d11b      	bne.n	800bb20 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	681b      	ldr	r3, [r3, #0]
 800baec:	f06f 0202 	mvn.w	r2, #2
 800baf0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800baf2:	687b      	ldr	r3, [r7, #4]
 800baf4:	2201      	movs	r2, #1
 800baf6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800baf8:	687b      	ldr	r3, [r7, #4]
 800bafa:	681b      	ldr	r3, [r3, #0]
 800bafc:	699b      	ldr	r3, [r3, #24]
 800bafe:	f003 0303 	and.w	r3, r3, #3
 800bb02:	2b00      	cmp	r3, #0
 800bb04:	d003      	beq.n	800bb0e <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800bb06:	6878      	ldr	r0, [r7, #4]
 800bb08:	f000 f9a5 	bl	800be56 <HAL_TIM_IC_CaptureCallback>
 800bb0c:	e005      	b.n	800bb1a <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb0e:	6878      	ldr	r0, [r7, #4]
 800bb10:	f000 f997 	bl	800be42 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb14:	6878      	ldr	r0, [r7, #4]
 800bb16:	f000 f9a8 	bl	800be6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb1a:	687b      	ldr	r3, [r7, #4]
 800bb1c:	2200      	movs	r2, #0
 800bb1e:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800bb20:	687b      	ldr	r3, [r7, #4]
 800bb22:	681b      	ldr	r3, [r3, #0]
 800bb24:	691b      	ldr	r3, [r3, #16]
 800bb26:	f003 0304 	and.w	r3, r3, #4
 800bb2a:	2b04      	cmp	r3, #4
 800bb2c:	d122      	bne.n	800bb74 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	681b      	ldr	r3, [r3, #0]
 800bb32:	68db      	ldr	r3, [r3, #12]
 800bb34:	f003 0304 	and.w	r3, r3, #4
 800bb38:	2b04      	cmp	r3, #4
 800bb3a:	d11b      	bne.n	800bb74 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 800bb3c:	687b      	ldr	r3, [r7, #4]
 800bb3e:	681b      	ldr	r3, [r3, #0]
 800bb40:	f06f 0204 	mvn.w	r2, #4
 800bb44:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800bb46:	687b      	ldr	r3, [r7, #4]
 800bb48:	2202      	movs	r2, #2
 800bb4a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800bb4c:	687b      	ldr	r3, [r7, #4]
 800bb4e:	681b      	ldr	r3, [r3, #0]
 800bb50:	699b      	ldr	r3, [r3, #24]
 800bb52:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bb56:	2b00      	cmp	r3, #0
 800bb58:	d003      	beq.n	800bb62 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bb5a:	6878      	ldr	r0, [r7, #4]
 800bb5c:	f000 f97b 	bl	800be56 <HAL_TIM_IC_CaptureCallback>
 800bb60:	e005      	b.n	800bb6e <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bb62:	6878      	ldr	r0, [r7, #4]
 800bb64:	f000 f96d 	bl	800be42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bb68:	6878      	ldr	r0, [r7, #4]
 800bb6a:	f000 f97e 	bl	800be6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bb6e:	687b      	ldr	r3, [r7, #4]
 800bb70:	2200      	movs	r2, #0
 800bb72:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	681b      	ldr	r3, [r3, #0]
 800bb78:	691b      	ldr	r3, [r3, #16]
 800bb7a:	f003 0308 	and.w	r3, r3, #8
 800bb7e:	2b08      	cmp	r3, #8
 800bb80:	d122      	bne.n	800bbc8 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	681b      	ldr	r3, [r3, #0]
 800bb86:	68db      	ldr	r3, [r3, #12]
 800bb88:	f003 0308 	and.w	r3, r3, #8
 800bb8c:	2b08      	cmp	r3, #8
 800bb8e:	d11b      	bne.n	800bbc8 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800bb90:	687b      	ldr	r3, [r7, #4]
 800bb92:	681b      	ldr	r3, [r3, #0]
 800bb94:	f06f 0208 	mvn.w	r2, #8
 800bb98:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800bb9a:	687b      	ldr	r3, [r7, #4]
 800bb9c:	2204      	movs	r2, #4
 800bb9e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800bba0:	687b      	ldr	r3, [r7, #4]
 800bba2:	681b      	ldr	r3, [r3, #0]
 800bba4:	69db      	ldr	r3, [r3, #28]
 800bba6:	f003 0303 	and.w	r3, r3, #3
 800bbaa:	2b00      	cmp	r3, #0
 800bbac:	d003      	beq.n	800bbb6 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bbae:	6878      	ldr	r0, [r7, #4]
 800bbb0:	f000 f951 	bl	800be56 <HAL_TIM_IC_CaptureCallback>
 800bbb4:	e005      	b.n	800bbc2 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bbb6:	6878      	ldr	r0, [r7, #4]
 800bbb8:	f000 f943 	bl	800be42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bbbc:	6878      	ldr	r0, [r7, #4]
 800bbbe:	f000 f954 	bl	800be6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bbc2:	687b      	ldr	r3, [r7, #4]
 800bbc4:	2200      	movs	r2, #0
 800bbc6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800bbc8:	687b      	ldr	r3, [r7, #4]
 800bbca:	681b      	ldr	r3, [r3, #0]
 800bbcc:	691b      	ldr	r3, [r3, #16]
 800bbce:	f003 0310 	and.w	r3, r3, #16
 800bbd2:	2b10      	cmp	r3, #16
 800bbd4:	d122      	bne.n	800bc1c <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	681b      	ldr	r3, [r3, #0]
 800bbda:	68db      	ldr	r3, [r3, #12]
 800bbdc:	f003 0310 	and.w	r3, r3, #16
 800bbe0:	2b10      	cmp	r3, #16
 800bbe2:	d11b      	bne.n	800bc1c <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800bbe4:	687b      	ldr	r3, [r7, #4]
 800bbe6:	681b      	ldr	r3, [r3, #0]
 800bbe8:	f06f 0210 	mvn.w	r2, #16
 800bbec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800bbee:	687b      	ldr	r3, [r7, #4]
 800bbf0:	2208      	movs	r2, #8
 800bbf2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800bbf4:	687b      	ldr	r3, [r7, #4]
 800bbf6:	681b      	ldr	r3, [r3, #0]
 800bbf8:	69db      	ldr	r3, [r3, #28]
 800bbfa:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800bbfe:	2b00      	cmp	r3, #0
 800bc00:	d003      	beq.n	800bc0a <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800bc02:	6878      	ldr	r0, [r7, #4]
 800bc04:	f000 f927 	bl	800be56 <HAL_TIM_IC_CaptureCallback>
 800bc08:	e005      	b.n	800bc16 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800bc0a:	6878      	ldr	r0, [r7, #4]
 800bc0c:	f000 f919 	bl	800be42 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800bc10:	6878      	ldr	r0, [r7, #4]
 800bc12:	f000 f92a 	bl	800be6a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	2200      	movs	r2, #0
 800bc1a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	691b      	ldr	r3, [r3, #16]
 800bc22:	f003 0301 	and.w	r3, r3, #1
 800bc26:	2b01      	cmp	r3, #1
 800bc28:	d10e      	bne.n	800bc48 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	681b      	ldr	r3, [r3, #0]
 800bc2e:	68db      	ldr	r3, [r3, #12]
 800bc30:	f003 0301 	and.w	r3, r3, #1
 800bc34:	2b01      	cmp	r3, #1
 800bc36:	d107      	bne.n	800bc48 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800bc38:	687b      	ldr	r3, [r7, #4]
 800bc3a:	681b      	ldr	r3, [r3, #0]
 800bc3c:	f06f 0201 	mvn.w	r2, #1
 800bc40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800bc42:	6878      	ldr	r0, [r7, #4]
 800bc44:	f7fc fc6a 	bl	800851c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800bc48:	687b      	ldr	r3, [r7, #4]
 800bc4a:	681b      	ldr	r3, [r3, #0]
 800bc4c:	691b      	ldr	r3, [r3, #16]
 800bc4e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc52:	2b80      	cmp	r3, #128	; 0x80
 800bc54:	d10e      	bne.n	800bc74 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	68db      	ldr	r3, [r3, #12]
 800bc5c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bc60:	2b80      	cmp	r3, #128	; 0x80
 800bc62:	d107      	bne.n	800bc74 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800bc64:	687b      	ldr	r3, [r7, #4]
 800bc66:	681b      	ldr	r3, [r3, #0]
 800bc68:	f06f 0280 	mvn.w	r2, #128	; 0x80
 800bc6c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800bc6e:	6878      	ldr	r0, [r7, #4]
 800bc70:	f000 fac8 	bl	800c204 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	691b      	ldr	r3, [r3, #16]
 800bc7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc7e:	2b40      	cmp	r3, #64	; 0x40
 800bc80:	d10e      	bne.n	800bca0 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800bc82:	687b      	ldr	r3, [r7, #4]
 800bc84:	681b      	ldr	r3, [r3, #0]
 800bc86:	68db      	ldr	r3, [r3, #12]
 800bc88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bc8c:	2b40      	cmp	r3, #64	; 0x40
 800bc8e:	d107      	bne.n	800bca0 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800bc98:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800bc9a:	6878      	ldr	r0, [r7, #4]
 800bc9c:	f000 f8ef 	bl	800be7e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800bca0:	687b      	ldr	r3, [r7, #4]
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	691b      	ldr	r3, [r3, #16]
 800bca6:	f003 0320 	and.w	r3, r3, #32
 800bcaa:	2b20      	cmp	r3, #32
 800bcac:	d10e      	bne.n	800bccc <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800bcae:	687b      	ldr	r3, [r7, #4]
 800bcb0:	681b      	ldr	r3, [r3, #0]
 800bcb2:	68db      	ldr	r3, [r3, #12]
 800bcb4:	f003 0320 	and.w	r3, r3, #32
 800bcb8:	2b20      	cmp	r3, #32
 800bcba:	d107      	bne.n	800bccc <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 800bcbc:	687b      	ldr	r3, [r7, #4]
 800bcbe:	681b      	ldr	r3, [r3, #0]
 800bcc0:	f06f 0220 	mvn.w	r2, #32
 800bcc4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800bcc6:	6878      	ldr	r0, [r7, #4]
 800bcc8:	f000 fa92 	bl	800c1f0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800bccc:	bf00      	nop
 800bcce:	3708      	adds	r7, #8
 800bcd0:	46bd      	mov	sp, r7
 800bcd2:	bd80      	pop	{r7, pc}

0800bcd4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800bcd4:	b580      	push	{r7, lr}
 800bcd6:	b084      	sub	sp, #16
 800bcd8:	af00      	add	r7, sp, #0
 800bcda:	6078      	str	r0, [r7, #4]
 800bcdc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800bce4:	2b01      	cmp	r3, #1
 800bce6:	d101      	bne.n	800bcec <HAL_TIM_ConfigClockSource+0x18>
 800bce8:	2302      	movs	r3, #2
 800bcea:	e0a6      	b.n	800be3a <HAL_TIM_ConfigClockSource+0x166>
 800bcec:	687b      	ldr	r3, [r7, #4]
 800bcee:	2201      	movs	r2, #1
 800bcf0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800bcf4:	687b      	ldr	r3, [r7, #4]
 800bcf6:	2202      	movs	r2, #2
 800bcf8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800bcfc:	687b      	ldr	r3, [r7, #4]
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	689b      	ldr	r3, [r3, #8]
 800bd02:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800bd0a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800bd0c:	68fb      	ldr	r3, [r7, #12]
 800bd0e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800bd12:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 800bd14:	687b      	ldr	r3, [r7, #4]
 800bd16:	681b      	ldr	r3, [r3, #0]
 800bd18:	68fa      	ldr	r2, [r7, #12]
 800bd1a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800bd1c:	683b      	ldr	r3, [r7, #0]
 800bd1e:	681b      	ldr	r3, [r3, #0]
 800bd20:	2b40      	cmp	r3, #64	; 0x40
 800bd22:	d067      	beq.n	800bdf4 <HAL_TIM_ConfigClockSource+0x120>
 800bd24:	2b40      	cmp	r3, #64	; 0x40
 800bd26:	d80b      	bhi.n	800bd40 <HAL_TIM_ConfigClockSource+0x6c>
 800bd28:	2b10      	cmp	r3, #16
 800bd2a:	d073      	beq.n	800be14 <HAL_TIM_ConfigClockSource+0x140>
 800bd2c:	2b10      	cmp	r3, #16
 800bd2e:	d802      	bhi.n	800bd36 <HAL_TIM_ConfigClockSource+0x62>
 800bd30:	2b00      	cmp	r3, #0
 800bd32:	d06f      	beq.n	800be14 <HAL_TIM_ConfigClockSource+0x140>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 800bd34:	e078      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bd36:	2b20      	cmp	r3, #32
 800bd38:	d06c      	beq.n	800be14 <HAL_TIM_ConfigClockSource+0x140>
 800bd3a:	2b30      	cmp	r3, #48	; 0x30
 800bd3c:	d06a      	beq.n	800be14 <HAL_TIM_ConfigClockSource+0x140>
      break;
 800bd3e:	e073      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bd40:	2b70      	cmp	r3, #112	; 0x70
 800bd42:	d00d      	beq.n	800bd60 <HAL_TIM_ConfigClockSource+0x8c>
 800bd44:	2b70      	cmp	r3, #112	; 0x70
 800bd46:	d804      	bhi.n	800bd52 <HAL_TIM_ConfigClockSource+0x7e>
 800bd48:	2b50      	cmp	r3, #80	; 0x50
 800bd4a:	d033      	beq.n	800bdb4 <HAL_TIM_ConfigClockSource+0xe0>
 800bd4c:	2b60      	cmp	r3, #96	; 0x60
 800bd4e:	d041      	beq.n	800bdd4 <HAL_TIM_ConfigClockSource+0x100>
      break;
 800bd50:	e06a      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x154>
  switch (sClockSourceConfig->ClockSource)
 800bd52:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd56:	d066      	beq.n	800be26 <HAL_TIM_ConfigClockSource+0x152>
 800bd58:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800bd5c:	d017      	beq.n	800bd8e <HAL_TIM_ConfigClockSource+0xba>
      break;
 800bd5e:	e063      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800bd60:	687b      	ldr	r3, [r7, #4]
 800bd62:	6818      	ldr	r0, [r3, #0]
 800bd64:	683b      	ldr	r3, [r7, #0]
 800bd66:	6899      	ldr	r1, [r3, #8]
 800bd68:	683b      	ldr	r3, [r7, #0]
 800bd6a:	685a      	ldr	r2, [r3, #4]
 800bd6c:	683b      	ldr	r3, [r7, #0]
 800bd6e:	68db      	ldr	r3, [r3, #12]
 800bd70:	f000 f98a 	bl	800c088 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800bd74:	687b      	ldr	r3, [r7, #4]
 800bd76:	681b      	ldr	r3, [r3, #0]
 800bd78:	689b      	ldr	r3, [r3, #8]
 800bd7a:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800bd7c:	68fb      	ldr	r3, [r7, #12]
 800bd7e:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800bd82:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800bd84:	687b      	ldr	r3, [r7, #4]
 800bd86:	681b      	ldr	r3, [r3, #0]
 800bd88:	68fa      	ldr	r2, [r7, #12]
 800bd8a:	609a      	str	r2, [r3, #8]
      break;
 800bd8c:	e04c      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ETR_SetConfig(htim->Instance,
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	6818      	ldr	r0, [r3, #0]
 800bd92:	683b      	ldr	r3, [r7, #0]
 800bd94:	6899      	ldr	r1, [r3, #8]
 800bd96:	683b      	ldr	r3, [r7, #0]
 800bd98:	685a      	ldr	r2, [r3, #4]
 800bd9a:	683b      	ldr	r3, [r7, #0]
 800bd9c:	68db      	ldr	r3, [r3, #12]
 800bd9e:	f000 f973 	bl	800c088 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800bda2:	687b      	ldr	r3, [r7, #4]
 800bda4:	681b      	ldr	r3, [r3, #0]
 800bda6:	689a      	ldr	r2, [r3, #8]
 800bda8:	687b      	ldr	r3, [r7, #4]
 800bdaa:	681b      	ldr	r3, [r3, #0]
 800bdac:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800bdb0:	609a      	str	r2, [r3, #8]
      break;
 800bdb2:	e039      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdb4:	687b      	ldr	r3, [r7, #4]
 800bdb6:	6818      	ldr	r0, [r3, #0]
 800bdb8:	683b      	ldr	r3, [r7, #0]
 800bdba:	6859      	ldr	r1, [r3, #4]
 800bdbc:	683b      	ldr	r3, [r7, #0]
 800bdbe:	68db      	ldr	r3, [r3, #12]
 800bdc0:	461a      	mov	r2, r3
 800bdc2:	f000 f8e7 	bl	800bf94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800bdc6:	687b      	ldr	r3, [r7, #4]
 800bdc8:	681b      	ldr	r3, [r3, #0]
 800bdca:	2150      	movs	r1, #80	; 0x50
 800bdcc:	4618      	mov	r0, r3
 800bdce:	f000 f940 	bl	800c052 <TIM_ITRx_SetConfig>
      break;
 800bdd2:	e029      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800bdd4:	687b      	ldr	r3, [r7, #4]
 800bdd6:	6818      	ldr	r0, [r3, #0]
 800bdd8:	683b      	ldr	r3, [r7, #0]
 800bdda:	6859      	ldr	r1, [r3, #4]
 800bddc:	683b      	ldr	r3, [r7, #0]
 800bdde:	68db      	ldr	r3, [r3, #12]
 800bde0:	461a      	mov	r2, r3
 800bde2:	f000 f906 	bl	800bff2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800bde6:	687b      	ldr	r3, [r7, #4]
 800bde8:	681b      	ldr	r3, [r3, #0]
 800bdea:	2160      	movs	r1, #96	; 0x60
 800bdec:	4618      	mov	r0, r3
 800bdee:	f000 f930 	bl	800c052 <TIM_ITRx_SetConfig>
      break;
 800bdf2:	e019      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	6818      	ldr	r0, [r3, #0]
 800bdf8:	683b      	ldr	r3, [r7, #0]
 800bdfa:	6859      	ldr	r1, [r3, #4]
 800bdfc:	683b      	ldr	r3, [r7, #0]
 800bdfe:	68db      	ldr	r3, [r3, #12]
 800be00:	461a      	mov	r2, r3
 800be02:	f000 f8c7 	bl	800bf94 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800be06:	687b      	ldr	r3, [r7, #4]
 800be08:	681b      	ldr	r3, [r3, #0]
 800be0a:	2140      	movs	r1, #64	; 0x40
 800be0c:	4618      	mov	r0, r3
 800be0e:	f000 f920 	bl	800c052 <TIM_ITRx_SetConfig>
      break;
 800be12:	e009      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x154>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800be14:	687b      	ldr	r3, [r7, #4]
 800be16:	681a      	ldr	r2, [r3, #0]
 800be18:	683b      	ldr	r3, [r7, #0]
 800be1a:	681b      	ldr	r3, [r3, #0]
 800be1c:	4619      	mov	r1, r3
 800be1e:	4610      	mov	r0, r2
 800be20:	f000 f917 	bl	800c052 <TIM_ITRx_SetConfig>
      break;
 800be24:	e000      	b.n	800be28 <HAL_TIM_ConfigClockSource+0x154>
      break;
 800be26:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800be28:	687b      	ldr	r3, [r7, #4]
 800be2a:	2201      	movs	r2, #1
 800be2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800be30:	687b      	ldr	r3, [r7, #4]
 800be32:	2200      	movs	r2, #0
 800be34:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800be38:	2300      	movs	r3, #0
}
 800be3a:	4618      	mov	r0, r3
 800be3c:	3710      	adds	r7, #16
 800be3e:	46bd      	mov	sp, r7
 800be40:	bd80      	pop	{r7, pc}

0800be42 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800be42:	b480      	push	{r7}
 800be44:	b083      	sub	sp, #12
 800be46:	af00      	add	r7, sp, #0
 800be48:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800be4a:	bf00      	nop
 800be4c:	370c      	adds	r7, #12
 800be4e:	46bd      	mov	sp, r7
 800be50:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be54:	4770      	bx	lr

0800be56 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800be56:	b480      	push	{r7}
 800be58:	b083      	sub	sp, #12
 800be5a:	af00      	add	r7, sp, #0
 800be5c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800be5e:	bf00      	nop
 800be60:	370c      	adds	r7, #12
 800be62:	46bd      	mov	sp, r7
 800be64:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be68:	4770      	bx	lr

0800be6a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800be6a:	b480      	push	{r7}
 800be6c:	b083      	sub	sp, #12
 800be6e:	af00      	add	r7, sp, #0
 800be70:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800be72:	bf00      	nop
 800be74:	370c      	adds	r7, #12
 800be76:	46bd      	mov	sp, r7
 800be78:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be7c:	4770      	bx	lr

0800be7e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800be7e:	b480      	push	{r7}
 800be80:	b083      	sub	sp, #12
 800be82:	af00      	add	r7, sp, #0
 800be84:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800be86:	bf00      	nop
 800be88:	370c      	adds	r7, #12
 800be8a:	46bd      	mov	sp, r7
 800be8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800be90:	4770      	bx	lr
	...

0800be94 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 800be94:	b480      	push	{r7}
 800be96:	b085      	sub	sp, #20
 800be98:	af00      	add	r7, sp, #0
 800be9a:	6078      	str	r0, [r7, #4]
 800be9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	681b      	ldr	r3, [r3, #0]
 800bea2:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800bea4:	687b      	ldr	r3, [r7, #4]
 800bea6:	4a34      	ldr	r2, [pc, #208]	; (800bf78 <TIM_Base_SetConfig+0xe4>)
 800bea8:	4293      	cmp	r3, r2
 800beaa:	d00f      	beq.n	800becc <TIM_Base_SetConfig+0x38>
 800beac:	687b      	ldr	r3, [r7, #4]
 800beae:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800beb2:	d00b      	beq.n	800becc <TIM_Base_SetConfig+0x38>
 800beb4:	687b      	ldr	r3, [r7, #4]
 800beb6:	4a31      	ldr	r2, [pc, #196]	; (800bf7c <TIM_Base_SetConfig+0xe8>)
 800beb8:	4293      	cmp	r3, r2
 800beba:	d007      	beq.n	800becc <TIM_Base_SetConfig+0x38>
 800bebc:	687b      	ldr	r3, [r7, #4]
 800bebe:	4a30      	ldr	r2, [pc, #192]	; (800bf80 <TIM_Base_SetConfig+0xec>)
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d003      	beq.n	800becc <TIM_Base_SetConfig+0x38>
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	4a2f      	ldr	r2, [pc, #188]	; (800bf84 <TIM_Base_SetConfig+0xf0>)
 800bec8:	4293      	cmp	r3, r2
 800beca:	d108      	bne.n	800bede <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800becc:	68fb      	ldr	r3, [r7, #12]
 800bece:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800bed2:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bed4:	683b      	ldr	r3, [r7, #0]
 800bed6:	685b      	ldr	r3, [r3, #4]
 800bed8:	68fa      	ldr	r2, [r7, #12]
 800beda:	4313      	orrs	r3, r2
 800bedc:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bede:	687b      	ldr	r3, [r7, #4]
 800bee0:	4a25      	ldr	r2, [pc, #148]	; (800bf78 <TIM_Base_SetConfig+0xe4>)
 800bee2:	4293      	cmp	r3, r2
 800bee4:	d01b      	beq.n	800bf1e <TIM_Base_SetConfig+0x8a>
 800bee6:	687b      	ldr	r3, [r7, #4]
 800bee8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800beec:	d017      	beq.n	800bf1e <TIM_Base_SetConfig+0x8a>
 800beee:	687b      	ldr	r3, [r7, #4]
 800bef0:	4a22      	ldr	r2, [pc, #136]	; (800bf7c <TIM_Base_SetConfig+0xe8>)
 800bef2:	4293      	cmp	r3, r2
 800bef4:	d013      	beq.n	800bf1e <TIM_Base_SetConfig+0x8a>
 800bef6:	687b      	ldr	r3, [r7, #4]
 800bef8:	4a21      	ldr	r2, [pc, #132]	; (800bf80 <TIM_Base_SetConfig+0xec>)
 800befa:	4293      	cmp	r3, r2
 800befc:	d00f      	beq.n	800bf1e <TIM_Base_SetConfig+0x8a>
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	4a20      	ldr	r2, [pc, #128]	; (800bf84 <TIM_Base_SetConfig+0xf0>)
 800bf02:	4293      	cmp	r3, r2
 800bf04:	d00b      	beq.n	800bf1e <TIM_Base_SetConfig+0x8a>
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	4a1f      	ldr	r2, [pc, #124]	; (800bf88 <TIM_Base_SetConfig+0xf4>)
 800bf0a:	4293      	cmp	r3, r2
 800bf0c:	d007      	beq.n	800bf1e <TIM_Base_SetConfig+0x8a>
 800bf0e:	687b      	ldr	r3, [r7, #4]
 800bf10:	4a1e      	ldr	r2, [pc, #120]	; (800bf8c <TIM_Base_SetConfig+0xf8>)
 800bf12:	4293      	cmp	r3, r2
 800bf14:	d003      	beq.n	800bf1e <TIM_Base_SetConfig+0x8a>
 800bf16:	687b      	ldr	r3, [r7, #4]
 800bf18:	4a1d      	ldr	r2, [pc, #116]	; (800bf90 <TIM_Base_SetConfig+0xfc>)
 800bf1a:	4293      	cmp	r3, r2
 800bf1c:	d108      	bne.n	800bf30 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bf24:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bf26:	683b      	ldr	r3, [r7, #0]
 800bf28:	68db      	ldr	r3, [r3, #12]
 800bf2a:	68fa      	ldr	r2, [r7, #12]
 800bf2c:	4313      	orrs	r3, r2
 800bf2e:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bf30:	68fb      	ldr	r3, [r7, #12]
 800bf32:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bf36:	683b      	ldr	r3, [r7, #0]
 800bf38:	695b      	ldr	r3, [r3, #20]
 800bf3a:	4313      	orrs	r3, r2
 800bf3c:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bf3e:	687b      	ldr	r3, [r7, #4]
 800bf40:	68fa      	ldr	r2, [r7, #12]
 800bf42:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bf44:	683b      	ldr	r3, [r7, #0]
 800bf46:	689a      	ldr	r2, [r3, #8]
 800bf48:	687b      	ldr	r3, [r7, #4]
 800bf4a:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bf4c:	683b      	ldr	r3, [r7, #0]
 800bf4e:	681a      	ldr	r2, [r3, #0]
 800bf50:	687b      	ldr	r3, [r7, #4]
 800bf52:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bf54:	687b      	ldr	r3, [r7, #4]
 800bf56:	4a08      	ldr	r2, [pc, #32]	; (800bf78 <TIM_Base_SetConfig+0xe4>)
 800bf58:	4293      	cmp	r3, r2
 800bf5a:	d103      	bne.n	800bf64 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bf5c:	683b      	ldr	r3, [r7, #0]
 800bf5e:	691a      	ldr	r2, [r3, #16]
 800bf60:	687b      	ldr	r3, [r7, #4]
 800bf62:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bf64:	687b      	ldr	r3, [r7, #4]
 800bf66:	2201      	movs	r2, #1
 800bf68:	615a      	str	r2, [r3, #20]
}
 800bf6a:	bf00      	nop
 800bf6c:	3714      	adds	r7, #20
 800bf6e:	46bd      	mov	sp, r7
 800bf70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf74:	4770      	bx	lr
 800bf76:	bf00      	nop
 800bf78:	40010000 	.word	0x40010000
 800bf7c:	40000400 	.word	0x40000400
 800bf80:	40000800 	.word	0x40000800
 800bf84:	40000c00 	.word	0x40000c00
 800bf88:	40014000 	.word	0x40014000
 800bf8c:	40014400 	.word	0x40014400
 800bf90:	40014800 	.word	0x40014800

0800bf94 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bf94:	b480      	push	{r7}
 800bf96:	b087      	sub	sp, #28
 800bf98:	af00      	add	r7, sp, #0
 800bf9a:	60f8      	str	r0, [r7, #12]
 800bf9c:	60b9      	str	r1, [r7, #8]
 800bf9e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800bfa0:	68fb      	ldr	r3, [r7, #12]
 800bfa2:	6a1b      	ldr	r3, [r3, #32]
 800bfa4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800bfa6:	68fb      	ldr	r3, [r7, #12]
 800bfa8:	6a1b      	ldr	r3, [r3, #32]
 800bfaa:	f023 0201 	bic.w	r2, r3, #1
 800bfae:	68fb      	ldr	r3, [r7, #12]
 800bfb0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800bfb2:	68fb      	ldr	r3, [r7, #12]
 800bfb4:	699b      	ldr	r3, [r3, #24]
 800bfb6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800bfb8:	693b      	ldr	r3, [r7, #16]
 800bfba:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800bfbe:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	011b      	lsls	r3, r3, #4
 800bfc4:	693a      	ldr	r2, [r7, #16]
 800bfc6:	4313      	orrs	r3, r2
 800bfc8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800bfca:	697b      	ldr	r3, [r7, #20]
 800bfcc:	f023 030a 	bic.w	r3, r3, #10
 800bfd0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800bfd2:	697a      	ldr	r2, [r7, #20]
 800bfd4:	68bb      	ldr	r3, [r7, #8]
 800bfd6:	4313      	orrs	r3, r2
 800bfd8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800bfda:	68fb      	ldr	r3, [r7, #12]
 800bfdc:	693a      	ldr	r2, [r7, #16]
 800bfde:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800bfe0:	68fb      	ldr	r3, [r7, #12]
 800bfe2:	697a      	ldr	r2, [r7, #20]
 800bfe4:	621a      	str	r2, [r3, #32]
}
 800bfe6:	bf00      	nop
 800bfe8:	371c      	adds	r7, #28
 800bfea:	46bd      	mov	sp, r7
 800bfec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bff0:	4770      	bx	lr

0800bff2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 800bff2:	b480      	push	{r7}
 800bff4:	b087      	sub	sp, #28
 800bff6:	af00      	add	r7, sp, #0
 800bff8:	60f8      	str	r0, [r7, #12]
 800bffa:	60b9      	str	r1, [r7, #8]
 800bffc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800bffe:	68fb      	ldr	r3, [r7, #12]
 800c000:	6a1b      	ldr	r3, [r3, #32]
 800c002:	f023 0210 	bic.w	r2, r3, #16
 800c006:	68fb      	ldr	r3, [r7, #12]
 800c008:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800c00a:	68fb      	ldr	r3, [r7, #12]
 800c00c:	699b      	ldr	r3, [r3, #24]
 800c00e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800c010:	68fb      	ldr	r3, [r7, #12]
 800c012:	6a1b      	ldr	r3, [r3, #32]
 800c014:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800c016:	697b      	ldr	r3, [r7, #20]
 800c018:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800c01c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800c01e:	687b      	ldr	r3, [r7, #4]
 800c020:	031b      	lsls	r3, r3, #12
 800c022:	697a      	ldr	r2, [r7, #20]
 800c024:	4313      	orrs	r3, r2
 800c026:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800c028:	693b      	ldr	r3, [r7, #16]
 800c02a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800c02e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800c030:	68bb      	ldr	r3, [r7, #8]
 800c032:	011b      	lsls	r3, r3, #4
 800c034:	693a      	ldr	r2, [r7, #16]
 800c036:	4313      	orrs	r3, r2
 800c038:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800c03a:	68fb      	ldr	r3, [r7, #12]
 800c03c:	697a      	ldr	r2, [r7, #20]
 800c03e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800c040:	68fb      	ldr	r3, [r7, #12]
 800c042:	693a      	ldr	r2, [r7, #16]
 800c044:	621a      	str	r2, [r3, #32]
}
 800c046:	bf00      	nop
 800c048:	371c      	adds	r7, #28
 800c04a:	46bd      	mov	sp, r7
 800c04c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c050:	4770      	bx	lr

0800c052 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 800c052:	b480      	push	{r7}
 800c054:	b085      	sub	sp, #20
 800c056:	af00      	add	r7, sp, #0
 800c058:	6078      	str	r0, [r7, #4]
 800c05a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800c05c:	687b      	ldr	r3, [r7, #4]
 800c05e:	689b      	ldr	r3, [r3, #8]
 800c060:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c068:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800c06a:	683a      	ldr	r2, [r7, #0]
 800c06c:	68fb      	ldr	r3, [r7, #12]
 800c06e:	4313      	orrs	r3, r2
 800c070:	f043 0307 	orr.w	r3, r3, #7
 800c074:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	68fa      	ldr	r2, [r7, #12]
 800c07a:	609a      	str	r2, [r3, #8]
}
 800c07c:	bf00      	nop
 800c07e:	3714      	adds	r7, #20
 800c080:	46bd      	mov	sp, r7
 800c082:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c086:	4770      	bx	lr

0800c088 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800c088:	b480      	push	{r7}
 800c08a:	b087      	sub	sp, #28
 800c08c:	af00      	add	r7, sp, #0
 800c08e:	60f8      	str	r0, [r7, #12]
 800c090:	60b9      	str	r1, [r7, #8]
 800c092:	607a      	str	r2, [r7, #4]
 800c094:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 800c096:	68fb      	ldr	r3, [r7, #12]
 800c098:	689b      	ldr	r3, [r3, #8]
 800c09a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800c09c:	697b      	ldr	r3, [r7, #20]
 800c09e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800c0a2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800c0a4:	683b      	ldr	r3, [r7, #0]
 800c0a6:	021a      	lsls	r2, r3, #8
 800c0a8:	687b      	ldr	r3, [r7, #4]
 800c0aa:	431a      	orrs	r2, r3
 800c0ac:	68bb      	ldr	r3, [r7, #8]
 800c0ae:	4313      	orrs	r3, r2
 800c0b0:	697a      	ldr	r2, [r7, #20]
 800c0b2:	4313      	orrs	r3, r2
 800c0b4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800c0b6:	68fb      	ldr	r3, [r7, #12]
 800c0b8:	697a      	ldr	r2, [r7, #20]
 800c0ba:	609a      	str	r2, [r3, #8]
}
 800c0bc:	bf00      	nop
 800c0be:	371c      	adds	r7, #28
 800c0c0:	46bd      	mov	sp, r7
 800c0c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c0c6:	4770      	bx	lr

0800c0c8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 800c0c8:	b480      	push	{r7}
 800c0ca:	b087      	sub	sp, #28
 800c0cc:	af00      	add	r7, sp, #0
 800c0ce:	60f8      	str	r0, [r7, #12]
 800c0d0:	60b9      	str	r1, [r7, #8]
 800c0d2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 800c0d4:	68bb      	ldr	r3, [r7, #8]
 800c0d6:	f003 031f 	and.w	r3, r3, #31
 800c0da:	2201      	movs	r2, #1
 800c0dc:	fa02 f303 	lsl.w	r3, r2, r3
 800c0e0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 800c0e2:	68fb      	ldr	r3, [r7, #12]
 800c0e4:	6a1a      	ldr	r2, [r3, #32]
 800c0e6:	697b      	ldr	r3, [r7, #20]
 800c0e8:	43db      	mvns	r3, r3
 800c0ea:	401a      	ands	r2, r3
 800c0ec:	68fb      	ldr	r3, [r7, #12]
 800c0ee:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 800c0f0:	68fb      	ldr	r3, [r7, #12]
 800c0f2:	6a1a      	ldr	r2, [r3, #32]
 800c0f4:	68bb      	ldr	r3, [r7, #8]
 800c0f6:	f003 031f 	and.w	r3, r3, #31
 800c0fa:	6879      	ldr	r1, [r7, #4]
 800c0fc:	fa01 f303 	lsl.w	r3, r1, r3
 800c100:	431a      	orrs	r2, r3
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	621a      	str	r2, [r3, #32]
}
 800c106:	bf00      	nop
 800c108:	371c      	adds	r7, #28
 800c10a:	46bd      	mov	sp, r7
 800c10c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c110:	4770      	bx	lr
	...

0800c114 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 800c114:	b480      	push	{r7}
 800c116:	b085      	sub	sp, #20
 800c118:	af00      	add	r7, sp, #0
 800c11a:	6078      	str	r0, [r7, #4]
 800c11c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800c11e:	687b      	ldr	r3, [r7, #4]
 800c120:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800c124:	2b01      	cmp	r3, #1
 800c126:	d101      	bne.n	800c12c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800c128:	2302      	movs	r3, #2
 800c12a:	e050      	b.n	800c1ce <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800c12c:	687b      	ldr	r3, [r7, #4]
 800c12e:	2201      	movs	r2, #1
 800c130:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	2202      	movs	r2, #2
 800c138:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800c13c:	687b      	ldr	r3, [r7, #4]
 800c13e:	681b      	ldr	r3, [r3, #0]
 800c140:	685b      	ldr	r3, [r3, #4]
 800c142:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800c144:	687b      	ldr	r3, [r7, #4]
 800c146:	681b      	ldr	r3, [r3, #0]
 800c148:	689b      	ldr	r3, [r3, #8]
 800c14a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800c14c:	68fb      	ldr	r3, [r7, #12]
 800c14e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c152:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 800c154:	683b      	ldr	r3, [r7, #0]
 800c156:	681b      	ldr	r3, [r3, #0]
 800c158:	68fa      	ldr	r2, [r7, #12]
 800c15a:	4313      	orrs	r3, r2
 800c15c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800c15e:	687b      	ldr	r3, [r7, #4]
 800c160:	681b      	ldr	r3, [r3, #0]
 800c162:	68fa      	ldr	r2, [r7, #12]
 800c164:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800c166:	687b      	ldr	r3, [r7, #4]
 800c168:	681b      	ldr	r3, [r3, #0]
 800c16a:	4a1c      	ldr	r2, [pc, #112]	; (800c1dc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800c16c:	4293      	cmp	r3, r2
 800c16e:	d018      	beq.n	800c1a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c170:	687b      	ldr	r3, [r7, #4]
 800c172:	681b      	ldr	r3, [r3, #0]
 800c174:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c178:	d013      	beq.n	800c1a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c17a:	687b      	ldr	r3, [r7, #4]
 800c17c:	681b      	ldr	r3, [r3, #0]
 800c17e:	4a18      	ldr	r2, [pc, #96]	; (800c1e0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 800c180:	4293      	cmp	r3, r2
 800c182:	d00e      	beq.n	800c1a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c184:	687b      	ldr	r3, [r7, #4]
 800c186:	681b      	ldr	r3, [r3, #0]
 800c188:	4a16      	ldr	r2, [pc, #88]	; (800c1e4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800c18a:	4293      	cmp	r3, r2
 800c18c:	d009      	beq.n	800c1a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	4a15      	ldr	r2, [pc, #84]	; (800c1e8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 800c194:	4293      	cmp	r3, r2
 800c196:	d004      	beq.n	800c1a2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	681b      	ldr	r3, [r3, #0]
 800c19c:	4a13      	ldr	r2, [pc, #76]	; (800c1ec <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800c19e:	4293      	cmp	r3, r2
 800c1a0:	d10c      	bne.n	800c1bc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800c1a2:	68bb      	ldr	r3, [r7, #8]
 800c1a4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c1a8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800c1aa:	683b      	ldr	r3, [r7, #0]
 800c1ac:	685b      	ldr	r3, [r3, #4]
 800c1ae:	68ba      	ldr	r2, [r7, #8]
 800c1b0:	4313      	orrs	r3, r2
 800c1b2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800c1b4:	687b      	ldr	r3, [r7, #4]
 800c1b6:	681b      	ldr	r3, [r3, #0]
 800c1b8:	68ba      	ldr	r2, [r7, #8]
 800c1ba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800c1bc:	687b      	ldr	r3, [r7, #4]
 800c1be:	2201      	movs	r2, #1
 800c1c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800c1c4:	687b      	ldr	r3, [r7, #4]
 800c1c6:	2200      	movs	r2, #0
 800c1c8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800c1cc:	2300      	movs	r3, #0
}
 800c1ce:	4618      	mov	r0, r3
 800c1d0:	3714      	adds	r7, #20
 800c1d2:	46bd      	mov	sp, r7
 800c1d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c1d8:	4770      	bx	lr
 800c1da:	bf00      	nop
 800c1dc:	40010000 	.word	0x40010000
 800c1e0:	40000400 	.word	0x40000400
 800c1e4:	40000800 	.word	0x40000800
 800c1e8:	40000c00 	.word	0x40000c00
 800c1ec:	40014000 	.word	0x40014000

0800c1f0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c1f0:	b480      	push	{r7}
 800c1f2:	b083      	sub	sp, #12
 800c1f4:	af00      	add	r7, sp, #0
 800c1f6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c1f8:	bf00      	nop
 800c1fa:	370c      	adds	r7, #12
 800c1fc:	46bd      	mov	sp, r7
 800c1fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c202:	4770      	bx	lr

0800c204 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c204:	b480      	push	{r7}
 800c206:	b083      	sub	sp, #12
 800c208:	af00      	add	r7, sp, #0
 800c20a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c20c:	bf00      	nop
 800c20e:	370c      	adds	r7, #12
 800c210:	46bd      	mov	sp, r7
 800c212:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c216:	4770      	bx	lr

0800c218 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c218:	b580      	push	{r7, lr}
 800c21a:	b082      	sub	sp, #8
 800c21c:	af00      	add	r7, sp, #0
 800c21e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c220:	687b      	ldr	r3, [r7, #4]
 800c222:	2b00      	cmp	r3, #0
 800c224:	d101      	bne.n	800c22a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c226:	2301      	movs	r3, #1
 800c228:	e03f      	b.n	800c2aa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800c22a:	687b      	ldr	r3, [r7, #4]
 800c22c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c230:	b2db      	uxtb	r3, r3
 800c232:	2b00      	cmp	r3, #0
 800c234:	d106      	bne.n	800c244 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	2200      	movs	r2, #0
 800c23a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c23e:	6878      	ldr	r0, [r7, #4]
 800c240:	f7fc fb4c 	bl	80088dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c244:	687b      	ldr	r3, [r7, #4]
 800c246:	2224      	movs	r2, #36	; 0x24
 800c248:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800c24c:	687b      	ldr	r3, [r7, #4]
 800c24e:	681b      	ldr	r3, [r3, #0]
 800c250:	68da      	ldr	r2, [r3, #12]
 800c252:	687b      	ldr	r3, [r7, #4]
 800c254:	681b      	ldr	r3, [r3, #0]
 800c256:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800c25a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800c25c:	6878      	ldr	r0, [r7, #4]
 800c25e:	f000 fa5f 	bl	800c720 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c262:	687b      	ldr	r3, [r7, #4]
 800c264:	681b      	ldr	r3, [r3, #0]
 800c266:	691a      	ldr	r2, [r3, #16]
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c270:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c272:	687b      	ldr	r3, [r7, #4]
 800c274:	681b      	ldr	r3, [r3, #0]
 800c276:	695a      	ldr	r2, [r3, #20]
 800c278:	687b      	ldr	r3, [r7, #4]
 800c27a:	681b      	ldr	r3, [r3, #0]
 800c27c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c280:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800c282:	687b      	ldr	r3, [r7, #4]
 800c284:	681b      	ldr	r3, [r3, #0]
 800c286:	68da      	ldr	r2, [r3, #12]
 800c288:	687b      	ldr	r3, [r7, #4]
 800c28a:	681b      	ldr	r3, [r3, #0]
 800c28c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800c290:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c292:	687b      	ldr	r3, [r7, #4]
 800c294:	2200      	movs	r2, #0
 800c296:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	2220      	movs	r2, #32
 800c29c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	2220      	movs	r2, #32
 800c2a4:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 800c2a8:	2300      	movs	r3, #0
}
 800c2aa:	4618      	mov	r0, r3
 800c2ac:	3708      	adds	r7, #8
 800c2ae:	46bd      	mov	sp, r7
 800c2b0:	bd80      	pop	{r7, pc}

0800c2b2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800c2b2:	b580      	push	{r7, lr}
 800c2b4:	b088      	sub	sp, #32
 800c2b6:	af02      	add	r7, sp, #8
 800c2b8:	60f8      	str	r0, [r7, #12]
 800c2ba:	60b9      	str	r1, [r7, #8]
 800c2bc:	603b      	str	r3, [r7, #0]
 800c2be:	4613      	mov	r3, r2
 800c2c0:	80fb      	strh	r3, [r7, #6]
  uint16_t *tmp;
  uint32_t tickstart = 0U;
 800c2c2:	2300      	movs	r3, #0
 800c2c4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c2c6:	68fb      	ldr	r3, [r7, #12]
 800c2c8:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c2cc:	b2db      	uxtb	r3, r3
 800c2ce:	2b20      	cmp	r3, #32
 800c2d0:	f040 8083 	bne.w	800c3da <HAL_UART_Transmit+0x128>
  {
    if ((pData == NULL) || (Size == 0U))
 800c2d4:	68bb      	ldr	r3, [r7, #8]
 800c2d6:	2b00      	cmp	r3, #0
 800c2d8:	d002      	beq.n	800c2e0 <HAL_UART_Transmit+0x2e>
 800c2da:	88fb      	ldrh	r3, [r7, #6]
 800c2dc:	2b00      	cmp	r3, #0
 800c2de:	d101      	bne.n	800c2e4 <HAL_UART_Transmit+0x32>
    {
      return  HAL_ERROR;
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	e07b      	b.n	800c3dc <HAL_UART_Transmit+0x12a>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c2e4:	68fb      	ldr	r3, [r7, #12]
 800c2e6:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c2ea:	2b01      	cmp	r3, #1
 800c2ec:	d101      	bne.n	800c2f2 <HAL_UART_Transmit+0x40>
 800c2ee:	2302      	movs	r3, #2
 800c2f0:	e074      	b.n	800c3dc <HAL_UART_Transmit+0x12a>
 800c2f2:	68fb      	ldr	r3, [r7, #12]
 800c2f4:	2201      	movs	r2, #1
 800c2f6:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c2fa:	68fb      	ldr	r3, [r7, #12]
 800c2fc:	2200      	movs	r2, #0
 800c2fe:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c300:	68fb      	ldr	r3, [r7, #12]
 800c302:	2221      	movs	r2, #33	; 0x21
 800c304:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    /* Init tickstart for timeout managment */
    tickstart = HAL_GetTick();
 800c308:	f7fc fc96 	bl	8008c38 <HAL_GetTick>
 800c30c:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800c30e:	68fb      	ldr	r3, [r7, #12]
 800c310:	88fa      	ldrh	r2, [r7, #6]
 800c312:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800c314:	68fb      	ldr	r3, [r7, #12]
 800c316:	88fa      	ldrh	r2, [r7, #6]
 800c318:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c31a:	68fb      	ldr	r3, [r7, #12]
 800c31c:	2200      	movs	r2, #0
 800c31e:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    while (huart->TxXferCount > 0U)
 800c322:	e042      	b.n	800c3aa <HAL_UART_Transmit+0xf8>
    {
      huart->TxXferCount--;
 800c324:	68fb      	ldr	r3, [r7, #12]
 800c326:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c328:	b29b      	uxth	r3, r3
 800c32a:	3b01      	subs	r3, #1
 800c32c:	b29a      	uxth	r2, r3
 800c32e:	68fb      	ldr	r3, [r7, #12]
 800c330:	84da      	strh	r2, [r3, #38]	; 0x26
      if (huart->Init.WordLength == UART_WORDLENGTH_9B)
 800c332:	68fb      	ldr	r3, [r7, #12]
 800c334:	689b      	ldr	r3, [r3, #8]
 800c336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c33a:	d122      	bne.n	800c382 <HAL_UART_Transmit+0xd0>
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c33c:	683b      	ldr	r3, [r7, #0]
 800c33e:	9300      	str	r3, [sp, #0]
 800c340:	697b      	ldr	r3, [r7, #20]
 800c342:	2200      	movs	r2, #0
 800c344:	2180      	movs	r1, #128	; 0x80
 800c346:	68f8      	ldr	r0, [r7, #12]
 800c348:	f000 f96c 	bl	800c624 <UART_WaitOnFlagUntilTimeout>
 800c34c:	4603      	mov	r3, r0
 800c34e:	2b00      	cmp	r3, #0
 800c350:	d001      	beq.n	800c356 <HAL_UART_Transmit+0xa4>
        {
          return HAL_TIMEOUT;
 800c352:	2303      	movs	r3, #3
 800c354:	e042      	b.n	800c3dc <HAL_UART_Transmit+0x12a>
        }
        tmp = (uint16_t *) pData;
 800c356:	68bb      	ldr	r3, [r7, #8]
 800c358:	613b      	str	r3, [r7, #16]
        huart->Instance->DR = (*tmp & (uint16_t)0x01FF);
 800c35a:	693b      	ldr	r3, [r7, #16]
 800c35c:	881b      	ldrh	r3, [r3, #0]
 800c35e:	461a      	mov	r2, r3
 800c360:	68fb      	ldr	r3, [r7, #12]
 800c362:	681b      	ldr	r3, [r3, #0]
 800c364:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800c368:	605a      	str	r2, [r3, #4]
        if (huart->Init.Parity == UART_PARITY_NONE)
 800c36a:	68fb      	ldr	r3, [r7, #12]
 800c36c:	691b      	ldr	r3, [r3, #16]
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d103      	bne.n	800c37a <HAL_UART_Transmit+0xc8>
        {
          pData += 2U;
 800c372:	68bb      	ldr	r3, [r7, #8]
 800c374:	3302      	adds	r3, #2
 800c376:	60bb      	str	r3, [r7, #8]
 800c378:	e017      	b.n	800c3aa <HAL_UART_Transmit+0xf8>
        }
        else
        {
          pData += 1U;
 800c37a:	68bb      	ldr	r3, [r7, #8]
 800c37c:	3301      	adds	r3, #1
 800c37e:	60bb      	str	r3, [r7, #8]
 800c380:	e013      	b.n	800c3aa <HAL_UART_Transmit+0xf8>
        }
      }
      else
      {
        if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800c382:	683b      	ldr	r3, [r7, #0]
 800c384:	9300      	str	r3, [sp, #0]
 800c386:	697b      	ldr	r3, [r7, #20]
 800c388:	2200      	movs	r2, #0
 800c38a:	2180      	movs	r1, #128	; 0x80
 800c38c:	68f8      	ldr	r0, [r7, #12]
 800c38e:	f000 f949 	bl	800c624 <UART_WaitOnFlagUntilTimeout>
 800c392:	4603      	mov	r3, r0
 800c394:	2b00      	cmp	r3, #0
 800c396:	d001      	beq.n	800c39c <HAL_UART_Transmit+0xea>
        {
          return HAL_TIMEOUT;
 800c398:	2303      	movs	r3, #3
 800c39a:	e01f      	b.n	800c3dc <HAL_UART_Transmit+0x12a>
        }
        huart->Instance->DR = (*pData++ & (uint8_t)0xFF);
 800c39c:	68bb      	ldr	r3, [r7, #8]
 800c39e:	1c5a      	adds	r2, r3, #1
 800c3a0:	60ba      	str	r2, [r7, #8]
 800c3a2:	781a      	ldrb	r2, [r3, #0]
 800c3a4:	68fb      	ldr	r3, [r7, #12]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	605a      	str	r2, [r3, #4]
    while (huart->TxXferCount > 0U)
 800c3aa:	68fb      	ldr	r3, [r7, #12]
 800c3ac:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800c3ae:	b29b      	uxth	r3, r3
 800c3b0:	2b00      	cmp	r3, #0
 800c3b2:	d1b7      	bne.n	800c324 <HAL_UART_Transmit+0x72>
      }
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 800c3b4:	683b      	ldr	r3, [r7, #0]
 800c3b6:	9300      	str	r3, [sp, #0]
 800c3b8:	697b      	ldr	r3, [r7, #20]
 800c3ba:	2200      	movs	r2, #0
 800c3bc:	2140      	movs	r1, #64	; 0x40
 800c3be:	68f8      	ldr	r0, [r7, #12]
 800c3c0:	f000 f930 	bl	800c624 <UART_WaitOnFlagUntilTimeout>
 800c3c4:	4603      	mov	r3, r0
 800c3c6:	2b00      	cmp	r3, #0
 800c3c8:	d001      	beq.n	800c3ce <HAL_UART_Transmit+0x11c>
    {
      return HAL_TIMEOUT;
 800c3ca:	2303      	movs	r3, #3
 800c3cc:	e006      	b.n	800c3dc <HAL_UART_Transmit+0x12a>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 800c3ce:	68fb      	ldr	r3, [r7, #12]
 800c3d0:	2220      	movs	r2, #32
 800c3d2:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

    return HAL_OK;
 800c3d6:	2300      	movs	r3, #0
 800c3d8:	e000      	b.n	800c3dc <HAL_UART_Transmit+0x12a>
  }
  else
  {
    return HAL_BUSY;
 800c3da:	2302      	movs	r3, #2
  }
}
 800c3dc:	4618      	mov	r0, r3
 800c3de:	3718      	adds	r7, #24
 800c3e0:	46bd      	mov	sp, r7
 800c3e2:	bd80      	pop	{r7, pc}

0800c3e4 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c3e4:	b580      	push	{r7, lr}
 800c3e6:	b086      	sub	sp, #24
 800c3e8:	af00      	add	r7, sp, #0
 800c3ea:	60f8      	str	r0, [r7, #12]
 800c3ec:	60b9      	str	r1, [r7, #8]
 800c3ee:	4613      	mov	r3, r2
 800c3f0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c3f2:	68fb      	ldr	r3, [r7, #12]
 800c3f4:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c3f8:	b2db      	uxtb	r3, r3
 800c3fa:	2b20      	cmp	r3, #32
 800c3fc:	d166      	bne.n	800c4cc <HAL_UART_Receive_DMA+0xe8>
  {
    if ((pData == NULL) || (Size == 0U))
 800c3fe:	68bb      	ldr	r3, [r7, #8]
 800c400:	2b00      	cmp	r3, #0
 800c402:	d002      	beq.n	800c40a <HAL_UART_Receive_DMA+0x26>
 800c404:	88fb      	ldrh	r3, [r7, #6]
 800c406:	2b00      	cmp	r3, #0
 800c408:	d101      	bne.n	800c40e <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 800c40a:	2301      	movs	r3, #1
 800c40c:	e05f      	b.n	800c4ce <HAL_UART_Receive_DMA+0xea>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800c40e:	68fb      	ldr	r3, [r7, #12]
 800c410:	f893 3038 	ldrb.w	r3, [r3, #56]	; 0x38
 800c414:	2b01      	cmp	r3, #1
 800c416:	d101      	bne.n	800c41c <HAL_UART_Receive_DMA+0x38>
 800c418:	2302      	movs	r3, #2
 800c41a:	e058      	b.n	800c4ce <HAL_UART_Receive_DMA+0xea>
 800c41c:	68fb      	ldr	r3, [r7, #12]
 800c41e:	2201      	movs	r2, #1
 800c420:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    huart->pRxBuffPtr = pData;
 800c424:	68ba      	ldr	r2, [r7, #8]
 800c426:	68fb      	ldr	r3, [r7, #12]
 800c428:	629a      	str	r2, [r3, #40]	; 0x28
    huart->RxXferSize = Size;
 800c42a:	68fb      	ldr	r3, [r7, #12]
 800c42c:	88fa      	ldrh	r2, [r7, #6]
 800c42e:	859a      	strh	r2, [r3, #44]	; 0x2c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c430:	68fb      	ldr	r3, [r7, #12]
 800c432:	2200      	movs	r2, #0
 800c434:	63da      	str	r2, [r3, #60]	; 0x3c
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 800c436:	68fb      	ldr	r3, [r7, #12]
 800c438:	2222      	movs	r2, #34	; 0x22
 800c43a:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800c43e:	68fb      	ldr	r3, [r7, #12]
 800c440:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c442:	4a25      	ldr	r2, [pc, #148]	; (800c4d8 <HAL_UART_Receive_DMA+0xf4>)
 800c444:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800c446:	68fb      	ldr	r3, [r7, #12]
 800c448:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c44a:	4a24      	ldr	r2, [pc, #144]	; (800c4dc <HAL_UART_Receive_DMA+0xf8>)
 800c44c:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800c44e:	68fb      	ldr	r3, [r7, #12]
 800c450:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c452:	4a23      	ldr	r2, [pc, #140]	; (800c4e0 <HAL_UART_Receive_DMA+0xfc>)
 800c454:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800c456:	68fb      	ldr	r3, [r7, #12]
 800c458:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800c45a:	2200      	movs	r2, #0
 800c45c:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA stream */
    tmp = (uint32_t *)&pData;
 800c45e:	f107 0308 	add.w	r3, r7, #8
 800c462:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 800c464:	68fb      	ldr	r3, [r7, #12]
 800c466:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800c468:	68fb      	ldr	r3, [r7, #12]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	3304      	adds	r3, #4
 800c46e:	4619      	mov	r1, r3
 800c470:	697b      	ldr	r3, [r7, #20]
 800c472:	681a      	ldr	r2, [r3, #0]
 800c474:	88fb      	ldrh	r3, [r7, #6]
 800c476:	f7fd f973 	bl	8009760 <HAL_DMA_Start_IT>

    /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
    __HAL_UART_CLEAR_OREFLAG(huart);
 800c47a:	2300      	movs	r3, #0
 800c47c:	613b      	str	r3, [r7, #16]
 800c47e:	68fb      	ldr	r3, [r7, #12]
 800c480:	681b      	ldr	r3, [r3, #0]
 800c482:	681b      	ldr	r3, [r3, #0]
 800c484:	613b      	str	r3, [r7, #16]
 800c486:	68fb      	ldr	r3, [r7, #12]
 800c488:	681b      	ldr	r3, [r3, #0]
 800c48a:	685b      	ldr	r3, [r3, #4]
 800c48c:	613b      	str	r3, [r7, #16]
 800c48e:	693b      	ldr	r3, [r7, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800c490:	68fb      	ldr	r3, [r7, #12]
 800c492:	2200      	movs	r2, #0
 800c494:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Enable the UART Parity Error Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c498:	68fb      	ldr	r3, [r7, #12]
 800c49a:	681b      	ldr	r3, [r3, #0]
 800c49c:	68da      	ldr	r2, [r3, #12]
 800c49e:	68fb      	ldr	r3, [r7, #12]
 800c4a0:	681b      	ldr	r3, [r3, #0]
 800c4a2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800c4a6:	60da      	str	r2, [r3, #12]

    /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
    SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c4a8:	68fb      	ldr	r3, [r7, #12]
 800c4aa:	681b      	ldr	r3, [r3, #0]
 800c4ac:	695a      	ldr	r2, [r3, #20]
 800c4ae:	68fb      	ldr	r3, [r7, #12]
 800c4b0:	681b      	ldr	r3, [r3, #0]
 800c4b2:	f042 0201 	orr.w	r2, r2, #1
 800c4b6:	615a      	str	r2, [r3, #20]

    /* Enable the DMA transfer for the receiver request by setting the DMAR bit
    in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c4b8:	68fb      	ldr	r3, [r7, #12]
 800c4ba:	681b      	ldr	r3, [r3, #0]
 800c4bc:	695a      	ldr	r2, [r3, #20]
 800c4be:	68fb      	ldr	r3, [r7, #12]
 800c4c0:	681b      	ldr	r3, [r3, #0]
 800c4c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800c4c6:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 800c4c8:	2300      	movs	r3, #0
 800c4ca:	e000      	b.n	800c4ce <HAL_UART_Receive_DMA+0xea>
  }
  else
  {
    return HAL_BUSY;
 800c4cc:	2302      	movs	r3, #2
  }
}
 800c4ce:	4618      	mov	r0, r3
 800c4d0:	3718      	adds	r7, #24
 800c4d2:	46bd      	mov	sp, r7
 800c4d4:	bd80      	pop	{r7, pc}
 800c4d6:	bf00      	nop
 800c4d8:	0800c50d 	.word	0x0800c50d
 800c4dc:	0800c575 	.word	0x0800c575
 800c4e0:	0800c591 	.word	0x0800c591

0800c4e4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c4e4:	b480      	push	{r7}
 800c4e6:	b083      	sub	sp, #12
 800c4e8:	af00      	add	r7, sp, #0
 800c4ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 800c4ec:	bf00      	nop
 800c4ee:	370c      	adds	r7, #12
 800c4f0:	46bd      	mov	sp, r7
 800c4f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c4f6:	4770      	bx	lr

0800c4f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800c4f8:	b480      	push	{r7}
 800c4fa:	b083      	sub	sp, #12
 800c4fc:	af00      	add	r7, sp, #0
 800c4fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800c500:	bf00      	nop
 800c502:	370c      	adds	r7, #12
 800c504:	46bd      	mov	sp, r7
 800c506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c50a:	4770      	bx	lr

0800c50c <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800c50c:	b580      	push	{r7, lr}
 800c50e:	b084      	sub	sp, #16
 800c510:	af00      	add	r7, sp, #0
 800c512:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c514:	687b      	ldr	r3, [r7, #4]
 800c516:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c518:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800c51a:	687b      	ldr	r3, [r7, #4]
 800c51c:	681b      	ldr	r3, [r3, #0]
 800c51e:	681b      	ldr	r3, [r3, #0]
 800c520:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c524:	2b00      	cmp	r3, #0
 800c526:	d11e      	bne.n	800c566 <UART_DMAReceiveCplt+0x5a>
  {
    huart->RxXferCount = 0U;
 800c528:	68fb      	ldr	r3, [r7, #12]
 800c52a:	2200      	movs	r2, #0
 800c52c:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c52e:	68fb      	ldr	r3, [r7, #12]
 800c530:	681b      	ldr	r3, [r3, #0]
 800c532:	68da      	ldr	r2, [r3, #12]
 800c534:	68fb      	ldr	r3, [r7, #12]
 800c536:	681b      	ldr	r3, [r3, #0]
 800c538:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800c53c:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c53e:	68fb      	ldr	r3, [r7, #12]
 800c540:	681b      	ldr	r3, [r3, #0]
 800c542:	695a      	ldr	r2, [r3, #20]
 800c544:	68fb      	ldr	r3, [r7, #12]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	f022 0201 	bic.w	r2, r2, #1
 800c54c:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c54e:	68fb      	ldr	r3, [r7, #12]
 800c550:	681b      	ldr	r3, [r3, #0]
 800c552:	695a      	ldr	r2, [r3, #20]
 800c554:	68fb      	ldr	r3, [r7, #12]
 800c556:	681b      	ldr	r3, [r3, #0]
 800c558:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800c55c:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800c55e:	68fb      	ldr	r3, [r7, #12]
 800c560:	2220      	movs	r2, #32
 800c562:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx complete callback*/
  huart->RxCpltCallback(huart);
#else
  /*Call legacy weak Rx complete callback*/
  HAL_UART_RxCpltCallback(huart);
 800c566:	68f8      	ldr	r0, [r7, #12]
 800c568:	f7fb faca 	bl	8007b00 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c56c:	bf00      	nop
 800c56e:	3710      	adds	r7, #16
 800c570:	46bd      	mov	sp, r7
 800c572:	bd80      	pop	{r7, pc}

0800c574 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800c574:	b580      	push	{r7, lr}
 800c576:	b084      	sub	sp, #16
 800c578:	af00      	add	r7, sp, #0
 800c57a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c57c:	687b      	ldr	r3, [r7, #4]
 800c57e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c580:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Rx Half complete callback*/
  huart->RxHalfCpltCallback(huart);
#else
  /*Call legacy weak Rx Half complete callback*/
  HAL_UART_RxHalfCpltCallback(huart);
 800c582:	68f8      	ldr	r0, [r7, #12]
 800c584:	f7ff ffae 	bl	800c4e4 <HAL_UART_RxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c588:	bf00      	nop
 800c58a:	3710      	adds	r7, #16
 800c58c:	46bd      	mov	sp, r7
 800c58e:	bd80      	pop	{r7, pc}

0800c590 <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800c590:	b580      	push	{r7, lr}
 800c592:	b084      	sub	sp, #16
 800c594:	af00      	add	r7, sp, #0
 800c596:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 800c598:	2300      	movs	r3, #0
 800c59a:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800c59c:	687b      	ldr	r3, [r7, #4]
 800c59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800c5a0:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800c5a2:	68bb      	ldr	r3, [r7, #8]
 800c5a4:	681b      	ldr	r3, [r3, #0]
 800c5a6:	695b      	ldr	r3, [r3, #20]
 800c5a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c5ac:	2b80      	cmp	r3, #128	; 0x80
 800c5ae:	bf0c      	ite	eq
 800c5b0:	2301      	moveq	r3, #1
 800c5b2:	2300      	movne	r3, #0
 800c5b4:	b2db      	uxtb	r3, r3
 800c5b6:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 800c5b8:	68bb      	ldr	r3, [r7, #8]
 800c5ba:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 800c5be:	b2db      	uxtb	r3, r3
 800c5c0:	2b21      	cmp	r3, #33	; 0x21
 800c5c2:	d108      	bne.n	800c5d6 <UART_DMAError+0x46>
 800c5c4:	68fb      	ldr	r3, [r7, #12]
 800c5c6:	2b00      	cmp	r3, #0
 800c5c8:	d005      	beq.n	800c5d6 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	2200      	movs	r2, #0
 800c5ce:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800c5d0:	68b8      	ldr	r0, [r7, #8]
 800c5d2:	f000 f871 	bl	800c6b8 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800c5d6:	68bb      	ldr	r3, [r7, #8]
 800c5d8:	681b      	ldr	r3, [r3, #0]
 800c5da:	695b      	ldr	r3, [r3, #20]
 800c5dc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c5e0:	2b40      	cmp	r3, #64	; 0x40
 800c5e2:	bf0c      	ite	eq
 800c5e4:	2301      	moveq	r3, #1
 800c5e6:	2300      	movne	r3, #0
 800c5e8:	b2db      	uxtb	r3, r3
 800c5ea:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 800c5ec:	68bb      	ldr	r3, [r7, #8]
 800c5ee:	f893 303a 	ldrb.w	r3, [r3, #58]	; 0x3a
 800c5f2:	b2db      	uxtb	r3, r3
 800c5f4:	2b22      	cmp	r3, #34	; 0x22
 800c5f6:	d108      	bne.n	800c60a <UART_DMAError+0x7a>
 800c5f8:	68fb      	ldr	r3, [r7, #12]
 800c5fa:	2b00      	cmp	r3, #0
 800c5fc:	d005      	beq.n	800c60a <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 800c5fe:	68bb      	ldr	r3, [r7, #8]
 800c600:	2200      	movs	r2, #0
 800c602:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800c604:	68b8      	ldr	r0, [r7, #8]
 800c606:	f000 f86d 	bl	800c6e4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800c60a:	68bb      	ldr	r3, [r7, #8]
 800c60c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800c60e:	f043 0210 	orr.w	r2, r3, #16
 800c612:	68bb      	ldr	r3, [r7, #8]
 800c614:	63da      	str	r2, [r3, #60]	; 0x3c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800c616:	68b8      	ldr	r0, [r7, #8]
 800c618:	f7ff ff6e 	bl	800c4f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800c61c:	bf00      	nop
 800c61e:	3710      	adds	r7, #16
 800c620:	46bd      	mov	sp, r7
 800c622:	bd80      	pop	{r7, pc}

0800c624 <UART_WaitOnFlagUntilTimeout>:
  * @param  Tickstart Tick start value
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status, uint32_t Tickstart, uint32_t Timeout)
{
 800c624:	b580      	push	{r7, lr}
 800c626:	b084      	sub	sp, #16
 800c628:	af00      	add	r7, sp, #0
 800c62a:	60f8      	str	r0, [r7, #12]
 800c62c:	60b9      	str	r1, [r7, #8]
 800c62e:	603b      	str	r3, [r7, #0]
 800c630:	4613      	mov	r3, r2
 800c632:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c634:	e02c      	b.n	800c690 <UART_WaitOnFlagUntilTimeout+0x6c>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800c636:	69bb      	ldr	r3, [r7, #24]
 800c638:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800c63c:	d028      	beq.n	800c690 <UART_WaitOnFlagUntilTimeout+0x6c>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800c63e:	69bb      	ldr	r3, [r7, #24]
 800c640:	2b00      	cmp	r3, #0
 800c642:	d007      	beq.n	800c654 <UART_WaitOnFlagUntilTimeout+0x30>
 800c644:	f7fc faf8 	bl	8008c38 <HAL_GetTick>
 800c648:	4602      	mov	r2, r0
 800c64a:	683b      	ldr	r3, [r7, #0]
 800c64c:	1ad3      	subs	r3, r2, r3
 800c64e:	69ba      	ldr	r2, [r7, #24]
 800c650:	429a      	cmp	r2, r3
 800c652:	d21d      	bcs.n	800c690 <UART_WaitOnFlagUntilTimeout+0x6c>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800c654:	68fb      	ldr	r3, [r7, #12]
 800c656:	681b      	ldr	r3, [r3, #0]
 800c658:	68da      	ldr	r2, [r3, #12]
 800c65a:	68fb      	ldr	r3, [r7, #12]
 800c65c:	681b      	ldr	r3, [r3, #0]
 800c65e:	f422 72d0 	bic.w	r2, r2, #416	; 0x1a0
 800c662:	60da      	str	r2, [r3, #12]
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c664:	68fb      	ldr	r3, [r7, #12]
 800c666:	681b      	ldr	r3, [r3, #0]
 800c668:	695a      	ldr	r2, [r3, #20]
 800c66a:	68fb      	ldr	r3, [r7, #12]
 800c66c:	681b      	ldr	r3, [r3, #0]
 800c66e:	f022 0201 	bic.w	r2, r2, #1
 800c672:	615a      	str	r2, [r3, #20]

        huart->gState  = HAL_UART_STATE_READY;
 800c674:	68fb      	ldr	r3, [r7, #12]
 800c676:	2220      	movs	r2, #32
 800c678:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
        huart->RxState = HAL_UART_STATE_READY;
 800c67c:	68fb      	ldr	r3, [r7, #12]
 800c67e:	2220      	movs	r2, #32
 800c680:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800c684:	68fb      	ldr	r3, [r7, #12]
 800c686:	2200      	movs	r2, #0
 800c688:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

        return HAL_TIMEOUT;
 800c68c:	2303      	movs	r3, #3
 800c68e:	e00f      	b.n	800c6b0 <UART_WaitOnFlagUntilTimeout+0x8c>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	681a      	ldr	r2, [r3, #0]
 800c696:	68bb      	ldr	r3, [r7, #8]
 800c698:	4013      	ands	r3, r2
 800c69a:	68ba      	ldr	r2, [r7, #8]
 800c69c:	429a      	cmp	r2, r3
 800c69e:	bf0c      	ite	eq
 800c6a0:	2301      	moveq	r3, #1
 800c6a2:	2300      	movne	r3, #0
 800c6a4:	b2db      	uxtb	r3, r3
 800c6a6:	461a      	mov	r2, r3
 800c6a8:	79fb      	ldrb	r3, [r7, #7]
 800c6aa:	429a      	cmp	r2, r3
 800c6ac:	d0c3      	beq.n	800c636 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800c6ae:	2300      	movs	r3, #0
}
 800c6b0:	4618      	mov	r0, r3
 800c6b2:	3710      	adds	r7, #16
 800c6b4:	46bd      	mov	sp, r7
 800c6b6:	bd80      	pop	{r7, pc}

0800c6b8 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800c6b8:	b480      	push	{r7}
 800c6ba:	b083      	sub	sp, #12
 800c6bc:	af00      	add	r7, sp, #0
 800c6be:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800c6c0:	687b      	ldr	r3, [r7, #4]
 800c6c2:	681b      	ldr	r3, [r3, #0]
 800c6c4:	68da      	ldr	r2, [r3, #12]
 800c6c6:	687b      	ldr	r3, [r7, #4]
 800c6c8:	681b      	ldr	r3, [r3, #0]
 800c6ca:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 800c6ce:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800c6d0:	687b      	ldr	r3, [r7, #4]
 800c6d2:	2220      	movs	r2, #32
 800c6d4:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
}
 800c6d8:	bf00      	nop
 800c6da:	370c      	adds	r7, #12
 800c6dc:	46bd      	mov	sp, r7
 800c6de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c6e2:	4770      	bx	lr

0800c6e4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800c6e4:	b480      	push	{r7}
 800c6e6:	b083      	sub	sp, #12
 800c6e8:	af00      	add	r7, sp, #0
 800c6ea:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c6ec:	687b      	ldr	r3, [r7, #4]
 800c6ee:	681b      	ldr	r3, [r3, #0]
 800c6f0:	68da      	ldr	r2, [r3, #12]
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	681b      	ldr	r3, [r3, #0]
 800c6f6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 800c6fa:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c6fc:	687b      	ldr	r3, [r7, #4]
 800c6fe:	681b      	ldr	r3, [r3, #0]
 800c700:	695a      	ldr	r2, [r3, #20]
 800c702:	687b      	ldr	r3, [r7, #4]
 800c704:	681b      	ldr	r3, [r3, #0]
 800c706:	f022 0201 	bic.w	r2, r2, #1
 800c70a:	615a      	str	r2, [r3, #20]

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800c70c:	687b      	ldr	r3, [r7, #4]
 800c70e:	2220      	movs	r2, #32
 800c710:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a
}
 800c714:	bf00      	nop
 800c716:	370c      	adds	r7, #12
 800c718:	46bd      	mov	sp, r7
 800c71a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c71e:	4770      	bx	lr

0800c720 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c720:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c724:	b085      	sub	sp, #20
 800c726:	af00      	add	r7, sp, #0
 800c728:	6078      	str	r0, [r7, #4]
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c72a:	687b      	ldr	r3, [r7, #4]
 800c72c:	681b      	ldr	r3, [r3, #0]
 800c72e:	691b      	ldr	r3, [r3, #16]
 800c730:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c734:	687b      	ldr	r3, [r7, #4]
 800c736:	68da      	ldr	r2, [r3, #12]
 800c738:	687b      	ldr	r3, [r7, #4]
 800c73a:	681b      	ldr	r3, [r3, #0]
 800c73c:	430a      	orrs	r2, r1
 800c73e:	611a      	str	r2, [r3, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800c740:	687b      	ldr	r3, [r7, #4]
 800c742:	689a      	ldr	r2, [r3, #8]
 800c744:	687b      	ldr	r3, [r7, #4]
 800c746:	691b      	ldr	r3, [r3, #16]
 800c748:	431a      	orrs	r2, r3
 800c74a:	687b      	ldr	r3, [r7, #4]
 800c74c:	695b      	ldr	r3, [r3, #20]
 800c74e:	431a      	orrs	r2, r3
 800c750:	687b      	ldr	r3, [r7, #4]
 800c752:	69db      	ldr	r3, [r3, #28]
 800c754:	4313      	orrs	r3, r2
 800c756:	60fb      	str	r3, [r7, #12]
  MODIFY_REG(huart->Instance->CR1,
 800c758:	687b      	ldr	r3, [r7, #4]
 800c75a:	681b      	ldr	r3, [r3, #0]
 800c75c:	68db      	ldr	r3, [r3, #12]
 800c75e:	f423 4316 	bic.w	r3, r3, #38400	; 0x9600
 800c762:	f023 030c 	bic.w	r3, r3, #12
 800c766:	687a      	ldr	r2, [r7, #4]
 800c768:	6812      	ldr	r2, [r2, #0]
 800c76a:	68f9      	ldr	r1, [r7, #12]
 800c76c:	430b      	orrs	r3, r1
 800c76e:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800c770:	687b      	ldr	r3, [r7, #4]
 800c772:	681b      	ldr	r3, [r3, #0]
 800c774:	695b      	ldr	r3, [r3, #20]
 800c776:	f423 7140 	bic.w	r1, r3, #768	; 0x300
 800c77a:	687b      	ldr	r3, [r7, #4]
 800c77c:	699a      	ldr	r2, [r3, #24]
 800c77e:	687b      	ldr	r3, [r7, #4]
 800c780:	681b      	ldr	r3, [r3, #0]
 800c782:	430a      	orrs	r2, r1
 800c784:	615a      	str	r2, [r3, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800c786:	687b      	ldr	r3, [r7, #4]
 800c788:	69db      	ldr	r3, [r3, #28]
 800c78a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800c78e:	f040 818b 	bne.w	800caa8 <UART_SetConfig+0x388>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	681b      	ldr	r3, [r3, #0]
 800c796:	4ac1      	ldr	r2, [pc, #772]	; (800ca9c <UART_SetConfig+0x37c>)
 800c798:	4293      	cmp	r3, r2
 800c79a:	d005      	beq.n	800c7a8 <UART_SetConfig+0x88>
 800c79c:	687b      	ldr	r3, [r7, #4]
 800c79e:	681b      	ldr	r3, [r3, #0]
 800c7a0:	4abf      	ldr	r2, [pc, #764]	; (800caa0 <UART_SetConfig+0x380>)
 800c7a2:	4293      	cmp	r3, r2
 800c7a4:	f040 80bd 	bne.w	800c922 <UART_SetConfig+0x202>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800c7a8:	f7fe faa8 	bl	800acfc <HAL_RCC_GetPCLK2Freq>
 800c7ac:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c7ae:	68bb      	ldr	r3, [r7, #8]
 800c7b0:	461d      	mov	r5, r3
 800c7b2:	f04f 0600 	mov.w	r6, #0
 800c7b6:	46a8      	mov	r8, r5
 800c7b8:	46b1      	mov	r9, r6
 800c7ba:	eb18 0308 	adds.w	r3, r8, r8
 800c7be:	eb49 0409 	adc.w	r4, r9, r9
 800c7c2:	4698      	mov	r8, r3
 800c7c4:	46a1      	mov	r9, r4
 800c7c6:	eb18 0805 	adds.w	r8, r8, r5
 800c7ca:	eb49 0906 	adc.w	r9, r9, r6
 800c7ce:	f04f 0100 	mov.w	r1, #0
 800c7d2:	f04f 0200 	mov.w	r2, #0
 800c7d6:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c7da:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c7de:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c7e2:	4688      	mov	r8, r1
 800c7e4:	4691      	mov	r9, r2
 800c7e6:	eb18 0005 	adds.w	r0, r8, r5
 800c7ea:	eb49 0106 	adc.w	r1, r9, r6
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	685b      	ldr	r3, [r3, #4]
 800c7f2:	461d      	mov	r5, r3
 800c7f4:	f04f 0600 	mov.w	r6, #0
 800c7f8:	196b      	adds	r3, r5, r5
 800c7fa:	eb46 0406 	adc.w	r4, r6, r6
 800c7fe:	461a      	mov	r2, r3
 800c800:	4623      	mov	r3, r4
 800c802:	f7f4 f9e3 	bl	8000bcc <__aeabi_uldivmod>
 800c806:	4603      	mov	r3, r0
 800c808:	460c      	mov	r4, r1
 800c80a:	461a      	mov	r2, r3
 800c80c:	4ba5      	ldr	r3, [pc, #660]	; (800caa4 <UART_SetConfig+0x384>)
 800c80e:	fba3 2302 	umull	r2, r3, r3, r2
 800c812:	095b      	lsrs	r3, r3, #5
 800c814:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c818:	68bb      	ldr	r3, [r7, #8]
 800c81a:	461d      	mov	r5, r3
 800c81c:	f04f 0600 	mov.w	r6, #0
 800c820:	46a9      	mov	r9, r5
 800c822:	46b2      	mov	sl, r6
 800c824:	eb19 0309 	adds.w	r3, r9, r9
 800c828:	eb4a 040a 	adc.w	r4, sl, sl
 800c82c:	4699      	mov	r9, r3
 800c82e:	46a2      	mov	sl, r4
 800c830:	eb19 0905 	adds.w	r9, r9, r5
 800c834:	eb4a 0a06 	adc.w	sl, sl, r6
 800c838:	f04f 0100 	mov.w	r1, #0
 800c83c:	f04f 0200 	mov.w	r2, #0
 800c840:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c844:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c848:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c84c:	4689      	mov	r9, r1
 800c84e:	4692      	mov	sl, r2
 800c850:	eb19 0005 	adds.w	r0, r9, r5
 800c854:	eb4a 0106 	adc.w	r1, sl, r6
 800c858:	687b      	ldr	r3, [r7, #4]
 800c85a:	685b      	ldr	r3, [r3, #4]
 800c85c:	461d      	mov	r5, r3
 800c85e:	f04f 0600 	mov.w	r6, #0
 800c862:	196b      	adds	r3, r5, r5
 800c864:	eb46 0406 	adc.w	r4, r6, r6
 800c868:	461a      	mov	r2, r3
 800c86a:	4623      	mov	r3, r4
 800c86c:	f7f4 f9ae 	bl	8000bcc <__aeabi_uldivmod>
 800c870:	4603      	mov	r3, r0
 800c872:	460c      	mov	r4, r1
 800c874:	461a      	mov	r2, r3
 800c876:	4b8b      	ldr	r3, [pc, #556]	; (800caa4 <UART_SetConfig+0x384>)
 800c878:	fba3 1302 	umull	r1, r3, r3, r2
 800c87c:	095b      	lsrs	r3, r3, #5
 800c87e:	2164      	movs	r1, #100	; 0x64
 800c880:	fb01 f303 	mul.w	r3, r1, r3
 800c884:	1ad3      	subs	r3, r2, r3
 800c886:	00db      	lsls	r3, r3, #3
 800c888:	3332      	adds	r3, #50	; 0x32
 800c88a:	4a86      	ldr	r2, [pc, #536]	; (800caa4 <UART_SetConfig+0x384>)
 800c88c:	fba2 2303 	umull	r2, r3, r2, r3
 800c890:	095b      	lsrs	r3, r3, #5
 800c892:	005b      	lsls	r3, r3, #1
 800c894:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800c898:	4498      	add	r8, r3
 800c89a:	68bb      	ldr	r3, [r7, #8]
 800c89c:	461d      	mov	r5, r3
 800c89e:	f04f 0600 	mov.w	r6, #0
 800c8a2:	46a9      	mov	r9, r5
 800c8a4:	46b2      	mov	sl, r6
 800c8a6:	eb19 0309 	adds.w	r3, r9, r9
 800c8aa:	eb4a 040a 	adc.w	r4, sl, sl
 800c8ae:	4699      	mov	r9, r3
 800c8b0:	46a2      	mov	sl, r4
 800c8b2:	eb19 0905 	adds.w	r9, r9, r5
 800c8b6:	eb4a 0a06 	adc.w	sl, sl, r6
 800c8ba:	f04f 0100 	mov.w	r1, #0
 800c8be:	f04f 0200 	mov.w	r2, #0
 800c8c2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c8c6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c8ca:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c8ce:	4689      	mov	r9, r1
 800c8d0:	4692      	mov	sl, r2
 800c8d2:	eb19 0005 	adds.w	r0, r9, r5
 800c8d6:	eb4a 0106 	adc.w	r1, sl, r6
 800c8da:	687b      	ldr	r3, [r7, #4]
 800c8dc:	685b      	ldr	r3, [r3, #4]
 800c8de:	461d      	mov	r5, r3
 800c8e0:	f04f 0600 	mov.w	r6, #0
 800c8e4:	196b      	adds	r3, r5, r5
 800c8e6:	eb46 0406 	adc.w	r4, r6, r6
 800c8ea:	461a      	mov	r2, r3
 800c8ec:	4623      	mov	r3, r4
 800c8ee:	f7f4 f96d 	bl	8000bcc <__aeabi_uldivmod>
 800c8f2:	4603      	mov	r3, r0
 800c8f4:	460c      	mov	r4, r1
 800c8f6:	461a      	mov	r2, r3
 800c8f8:	4b6a      	ldr	r3, [pc, #424]	; (800caa4 <UART_SetConfig+0x384>)
 800c8fa:	fba3 1302 	umull	r1, r3, r3, r2
 800c8fe:	095b      	lsrs	r3, r3, #5
 800c900:	2164      	movs	r1, #100	; 0x64
 800c902:	fb01 f303 	mul.w	r3, r1, r3
 800c906:	1ad3      	subs	r3, r2, r3
 800c908:	00db      	lsls	r3, r3, #3
 800c90a:	3332      	adds	r3, #50	; 0x32
 800c90c:	4a65      	ldr	r2, [pc, #404]	; (800caa4 <UART_SetConfig+0x384>)
 800c90e:	fba2 2303 	umull	r2, r3, r2, r3
 800c912:	095b      	lsrs	r3, r3, #5
 800c914:	f003 0207 	and.w	r2, r3, #7
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	4442      	add	r2, r8
 800c91e:	609a      	str	r2, [r3, #8]
 800c920:	e26f      	b.n	800ce02 <UART_SetConfig+0x6e2>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800c922:	f7fe f9d7 	bl	800acd4 <HAL_RCC_GetPCLK1Freq>
 800c926:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800c928:	68bb      	ldr	r3, [r7, #8]
 800c92a:	461d      	mov	r5, r3
 800c92c:	f04f 0600 	mov.w	r6, #0
 800c930:	46a8      	mov	r8, r5
 800c932:	46b1      	mov	r9, r6
 800c934:	eb18 0308 	adds.w	r3, r8, r8
 800c938:	eb49 0409 	adc.w	r4, r9, r9
 800c93c:	4698      	mov	r8, r3
 800c93e:	46a1      	mov	r9, r4
 800c940:	eb18 0805 	adds.w	r8, r8, r5
 800c944:	eb49 0906 	adc.w	r9, r9, r6
 800c948:	f04f 0100 	mov.w	r1, #0
 800c94c:	f04f 0200 	mov.w	r2, #0
 800c950:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800c954:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800c958:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800c95c:	4688      	mov	r8, r1
 800c95e:	4691      	mov	r9, r2
 800c960:	eb18 0005 	adds.w	r0, r8, r5
 800c964:	eb49 0106 	adc.w	r1, r9, r6
 800c968:	687b      	ldr	r3, [r7, #4]
 800c96a:	685b      	ldr	r3, [r3, #4]
 800c96c:	461d      	mov	r5, r3
 800c96e:	f04f 0600 	mov.w	r6, #0
 800c972:	196b      	adds	r3, r5, r5
 800c974:	eb46 0406 	adc.w	r4, r6, r6
 800c978:	461a      	mov	r2, r3
 800c97a:	4623      	mov	r3, r4
 800c97c:	f7f4 f926 	bl	8000bcc <__aeabi_uldivmod>
 800c980:	4603      	mov	r3, r0
 800c982:	460c      	mov	r4, r1
 800c984:	461a      	mov	r2, r3
 800c986:	4b47      	ldr	r3, [pc, #284]	; (800caa4 <UART_SetConfig+0x384>)
 800c988:	fba3 2302 	umull	r2, r3, r3, r2
 800c98c:	095b      	lsrs	r3, r3, #5
 800c98e:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800c992:	68bb      	ldr	r3, [r7, #8]
 800c994:	461d      	mov	r5, r3
 800c996:	f04f 0600 	mov.w	r6, #0
 800c99a:	46a9      	mov	r9, r5
 800c99c:	46b2      	mov	sl, r6
 800c99e:	eb19 0309 	adds.w	r3, r9, r9
 800c9a2:	eb4a 040a 	adc.w	r4, sl, sl
 800c9a6:	4699      	mov	r9, r3
 800c9a8:	46a2      	mov	sl, r4
 800c9aa:	eb19 0905 	adds.w	r9, r9, r5
 800c9ae:	eb4a 0a06 	adc.w	sl, sl, r6
 800c9b2:	f04f 0100 	mov.w	r1, #0
 800c9b6:	f04f 0200 	mov.w	r2, #0
 800c9ba:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800c9be:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800c9c2:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800c9c6:	4689      	mov	r9, r1
 800c9c8:	4692      	mov	sl, r2
 800c9ca:	eb19 0005 	adds.w	r0, r9, r5
 800c9ce:	eb4a 0106 	adc.w	r1, sl, r6
 800c9d2:	687b      	ldr	r3, [r7, #4]
 800c9d4:	685b      	ldr	r3, [r3, #4]
 800c9d6:	461d      	mov	r5, r3
 800c9d8:	f04f 0600 	mov.w	r6, #0
 800c9dc:	196b      	adds	r3, r5, r5
 800c9de:	eb46 0406 	adc.w	r4, r6, r6
 800c9e2:	461a      	mov	r2, r3
 800c9e4:	4623      	mov	r3, r4
 800c9e6:	f7f4 f8f1 	bl	8000bcc <__aeabi_uldivmod>
 800c9ea:	4603      	mov	r3, r0
 800c9ec:	460c      	mov	r4, r1
 800c9ee:	461a      	mov	r2, r3
 800c9f0:	4b2c      	ldr	r3, [pc, #176]	; (800caa4 <UART_SetConfig+0x384>)
 800c9f2:	fba3 1302 	umull	r1, r3, r3, r2
 800c9f6:	095b      	lsrs	r3, r3, #5
 800c9f8:	2164      	movs	r1, #100	; 0x64
 800c9fa:	fb01 f303 	mul.w	r3, r1, r3
 800c9fe:	1ad3      	subs	r3, r2, r3
 800ca00:	00db      	lsls	r3, r3, #3
 800ca02:	3332      	adds	r3, #50	; 0x32
 800ca04:	4a27      	ldr	r2, [pc, #156]	; (800caa4 <UART_SetConfig+0x384>)
 800ca06:	fba2 2303 	umull	r2, r3, r2, r3
 800ca0a:	095b      	lsrs	r3, r3, #5
 800ca0c:	005b      	lsls	r3, r3, #1
 800ca0e:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800ca12:	4498      	add	r8, r3
 800ca14:	68bb      	ldr	r3, [r7, #8]
 800ca16:	461d      	mov	r5, r3
 800ca18:	f04f 0600 	mov.w	r6, #0
 800ca1c:	46a9      	mov	r9, r5
 800ca1e:	46b2      	mov	sl, r6
 800ca20:	eb19 0309 	adds.w	r3, r9, r9
 800ca24:	eb4a 040a 	adc.w	r4, sl, sl
 800ca28:	4699      	mov	r9, r3
 800ca2a:	46a2      	mov	sl, r4
 800ca2c:	eb19 0905 	adds.w	r9, r9, r5
 800ca30:	eb4a 0a06 	adc.w	sl, sl, r6
 800ca34:	f04f 0100 	mov.w	r1, #0
 800ca38:	f04f 0200 	mov.w	r2, #0
 800ca3c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800ca40:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800ca44:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800ca48:	4689      	mov	r9, r1
 800ca4a:	4692      	mov	sl, r2
 800ca4c:	eb19 0005 	adds.w	r0, r9, r5
 800ca50:	eb4a 0106 	adc.w	r1, sl, r6
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	685b      	ldr	r3, [r3, #4]
 800ca58:	461d      	mov	r5, r3
 800ca5a:	f04f 0600 	mov.w	r6, #0
 800ca5e:	196b      	adds	r3, r5, r5
 800ca60:	eb46 0406 	adc.w	r4, r6, r6
 800ca64:	461a      	mov	r2, r3
 800ca66:	4623      	mov	r3, r4
 800ca68:	f7f4 f8b0 	bl	8000bcc <__aeabi_uldivmod>
 800ca6c:	4603      	mov	r3, r0
 800ca6e:	460c      	mov	r4, r1
 800ca70:	461a      	mov	r2, r3
 800ca72:	4b0c      	ldr	r3, [pc, #48]	; (800caa4 <UART_SetConfig+0x384>)
 800ca74:	fba3 1302 	umull	r1, r3, r3, r2
 800ca78:	095b      	lsrs	r3, r3, #5
 800ca7a:	2164      	movs	r1, #100	; 0x64
 800ca7c:	fb01 f303 	mul.w	r3, r1, r3
 800ca80:	1ad3      	subs	r3, r2, r3
 800ca82:	00db      	lsls	r3, r3, #3
 800ca84:	3332      	adds	r3, #50	; 0x32
 800ca86:	4a07      	ldr	r2, [pc, #28]	; (800caa4 <UART_SetConfig+0x384>)
 800ca88:	fba2 2303 	umull	r2, r3, r2, r3
 800ca8c:	095b      	lsrs	r3, r3, #5
 800ca8e:	f003 0207 	and.w	r2, r3, #7
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	681b      	ldr	r3, [r3, #0]
 800ca96:	4442      	add	r2, r8
 800ca98:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 800ca9a:	e1b2      	b.n	800ce02 <UART_SetConfig+0x6e2>
 800ca9c:	40011000 	.word	0x40011000
 800caa0:	40011400 	.word	0x40011400
 800caa4:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800caa8:	687b      	ldr	r3, [r7, #4]
 800caaa:	681b      	ldr	r3, [r3, #0]
 800caac:	4ad7      	ldr	r2, [pc, #860]	; (800ce0c <UART_SetConfig+0x6ec>)
 800caae:	4293      	cmp	r3, r2
 800cab0:	d005      	beq.n	800cabe <UART_SetConfig+0x39e>
 800cab2:	687b      	ldr	r3, [r7, #4]
 800cab4:	681b      	ldr	r3, [r3, #0]
 800cab6:	4ad6      	ldr	r2, [pc, #856]	; (800ce10 <UART_SetConfig+0x6f0>)
 800cab8:	4293      	cmp	r3, r2
 800caba:	f040 80d1 	bne.w	800cc60 <UART_SetConfig+0x540>
      pclk = HAL_RCC_GetPCLK2Freq();
 800cabe:	f7fe f91d 	bl	800acfc <HAL_RCC_GetPCLK2Freq>
 800cac2:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cac4:	68bb      	ldr	r3, [r7, #8]
 800cac6:	469a      	mov	sl, r3
 800cac8:	f04f 0b00 	mov.w	fp, #0
 800cacc:	46d0      	mov	r8, sl
 800cace:	46d9      	mov	r9, fp
 800cad0:	eb18 0308 	adds.w	r3, r8, r8
 800cad4:	eb49 0409 	adc.w	r4, r9, r9
 800cad8:	4698      	mov	r8, r3
 800cada:	46a1      	mov	r9, r4
 800cadc:	eb18 080a 	adds.w	r8, r8, sl
 800cae0:	eb49 090b 	adc.w	r9, r9, fp
 800cae4:	f04f 0100 	mov.w	r1, #0
 800cae8:	f04f 0200 	mov.w	r2, #0
 800caec:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800caf0:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800caf4:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800caf8:	4688      	mov	r8, r1
 800cafa:	4691      	mov	r9, r2
 800cafc:	eb1a 0508 	adds.w	r5, sl, r8
 800cb00:	eb4b 0609 	adc.w	r6, fp, r9
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	685b      	ldr	r3, [r3, #4]
 800cb08:	4619      	mov	r1, r3
 800cb0a:	f04f 0200 	mov.w	r2, #0
 800cb0e:	f04f 0300 	mov.w	r3, #0
 800cb12:	f04f 0400 	mov.w	r4, #0
 800cb16:	0094      	lsls	r4, r2, #2
 800cb18:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cb1c:	008b      	lsls	r3, r1, #2
 800cb1e:	461a      	mov	r2, r3
 800cb20:	4623      	mov	r3, r4
 800cb22:	4628      	mov	r0, r5
 800cb24:	4631      	mov	r1, r6
 800cb26:	f7f4 f851 	bl	8000bcc <__aeabi_uldivmod>
 800cb2a:	4603      	mov	r3, r0
 800cb2c:	460c      	mov	r4, r1
 800cb2e:	461a      	mov	r2, r3
 800cb30:	4bb8      	ldr	r3, [pc, #736]	; (800ce14 <UART_SetConfig+0x6f4>)
 800cb32:	fba3 2302 	umull	r2, r3, r3, r2
 800cb36:	095b      	lsrs	r3, r3, #5
 800cb38:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800cb3c:	68bb      	ldr	r3, [r7, #8]
 800cb3e:	469b      	mov	fp, r3
 800cb40:	f04f 0c00 	mov.w	ip, #0
 800cb44:	46d9      	mov	r9, fp
 800cb46:	46e2      	mov	sl, ip
 800cb48:	eb19 0309 	adds.w	r3, r9, r9
 800cb4c:	eb4a 040a 	adc.w	r4, sl, sl
 800cb50:	4699      	mov	r9, r3
 800cb52:	46a2      	mov	sl, r4
 800cb54:	eb19 090b 	adds.w	r9, r9, fp
 800cb58:	eb4a 0a0c 	adc.w	sl, sl, ip
 800cb5c:	f04f 0100 	mov.w	r1, #0
 800cb60:	f04f 0200 	mov.w	r2, #0
 800cb64:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cb68:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cb6c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cb70:	4689      	mov	r9, r1
 800cb72:	4692      	mov	sl, r2
 800cb74:	eb1b 0509 	adds.w	r5, fp, r9
 800cb78:	eb4c 060a 	adc.w	r6, ip, sl
 800cb7c:	687b      	ldr	r3, [r7, #4]
 800cb7e:	685b      	ldr	r3, [r3, #4]
 800cb80:	4619      	mov	r1, r3
 800cb82:	f04f 0200 	mov.w	r2, #0
 800cb86:	f04f 0300 	mov.w	r3, #0
 800cb8a:	f04f 0400 	mov.w	r4, #0
 800cb8e:	0094      	lsls	r4, r2, #2
 800cb90:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cb94:	008b      	lsls	r3, r1, #2
 800cb96:	461a      	mov	r2, r3
 800cb98:	4623      	mov	r3, r4
 800cb9a:	4628      	mov	r0, r5
 800cb9c:	4631      	mov	r1, r6
 800cb9e:	f7f4 f815 	bl	8000bcc <__aeabi_uldivmod>
 800cba2:	4603      	mov	r3, r0
 800cba4:	460c      	mov	r4, r1
 800cba6:	461a      	mov	r2, r3
 800cba8:	4b9a      	ldr	r3, [pc, #616]	; (800ce14 <UART_SetConfig+0x6f4>)
 800cbaa:	fba3 1302 	umull	r1, r3, r3, r2
 800cbae:	095b      	lsrs	r3, r3, #5
 800cbb0:	2164      	movs	r1, #100	; 0x64
 800cbb2:	fb01 f303 	mul.w	r3, r1, r3
 800cbb6:	1ad3      	subs	r3, r2, r3
 800cbb8:	011b      	lsls	r3, r3, #4
 800cbba:	3332      	adds	r3, #50	; 0x32
 800cbbc:	4a95      	ldr	r2, [pc, #596]	; (800ce14 <UART_SetConfig+0x6f4>)
 800cbbe:	fba2 2303 	umull	r2, r3, r2, r3
 800cbc2:	095b      	lsrs	r3, r3, #5
 800cbc4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cbc8:	4498      	add	r8, r3
 800cbca:	68bb      	ldr	r3, [r7, #8]
 800cbcc:	469b      	mov	fp, r3
 800cbce:	f04f 0c00 	mov.w	ip, #0
 800cbd2:	46d9      	mov	r9, fp
 800cbd4:	46e2      	mov	sl, ip
 800cbd6:	eb19 0309 	adds.w	r3, r9, r9
 800cbda:	eb4a 040a 	adc.w	r4, sl, sl
 800cbde:	4699      	mov	r9, r3
 800cbe0:	46a2      	mov	sl, r4
 800cbe2:	eb19 090b 	adds.w	r9, r9, fp
 800cbe6:	eb4a 0a0c 	adc.w	sl, sl, ip
 800cbea:	f04f 0100 	mov.w	r1, #0
 800cbee:	f04f 0200 	mov.w	r2, #0
 800cbf2:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cbf6:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cbfa:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cbfe:	4689      	mov	r9, r1
 800cc00:	4692      	mov	sl, r2
 800cc02:	eb1b 0509 	adds.w	r5, fp, r9
 800cc06:	eb4c 060a 	adc.w	r6, ip, sl
 800cc0a:	687b      	ldr	r3, [r7, #4]
 800cc0c:	685b      	ldr	r3, [r3, #4]
 800cc0e:	4619      	mov	r1, r3
 800cc10:	f04f 0200 	mov.w	r2, #0
 800cc14:	f04f 0300 	mov.w	r3, #0
 800cc18:	f04f 0400 	mov.w	r4, #0
 800cc1c:	0094      	lsls	r4, r2, #2
 800cc1e:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cc22:	008b      	lsls	r3, r1, #2
 800cc24:	461a      	mov	r2, r3
 800cc26:	4623      	mov	r3, r4
 800cc28:	4628      	mov	r0, r5
 800cc2a:	4631      	mov	r1, r6
 800cc2c:	f7f3 ffce 	bl	8000bcc <__aeabi_uldivmod>
 800cc30:	4603      	mov	r3, r0
 800cc32:	460c      	mov	r4, r1
 800cc34:	461a      	mov	r2, r3
 800cc36:	4b77      	ldr	r3, [pc, #476]	; (800ce14 <UART_SetConfig+0x6f4>)
 800cc38:	fba3 1302 	umull	r1, r3, r3, r2
 800cc3c:	095b      	lsrs	r3, r3, #5
 800cc3e:	2164      	movs	r1, #100	; 0x64
 800cc40:	fb01 f303 	mul.w	r3, r1, r3
 800cc44:	1ad3      	subs	r3, r2, r3
 800cc46:	011b      	lsls	r3, r3, #4
 800cc48:	3332      	adds	r3, #50	; 0x32
 800cc4a:	4a72      	ldr	r2, [pc, #456]	; (800ce14 <UART_SetConfig+0x6f4>)
 800cc4c:	fba2 2303 	umull	r2, r3, r2, r3
 800cc50:	095b      	lsrs	r3, r3, #5
 800cc52:	f003 020f 	and.w	r2, r3, #15
 800cc56:	687b      	ldr	r3, [r7, #4]
 800cc58:	681b      	ldr	r3, [r3, #0]
 800cc5a:	4442      	add	r2, r8
 800cc5c:	609a      	str	r2, [r3, #8]
 800cc5e:	e0d0      	b.n	800ce02 <UART_SetConfig+0x6e2>
      pclk = HAL_RCC_GetPCLK1Freq();
 800cc60:	f7fe f838 	bl	800acd4 <HAL_RCC_GetPCLK1Freq>
 800cc64:	60b8      	str	r0, [r7, #8]
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800cc66:	68bb      	ldr	r3, [r7, #8]
 800cc68:	469a      	mov	sl, r3
 800cc6a:	f04f 0b00 	mov.w	fp, #0
 800cc6e:	46d0      	mov	r8, sl
 800cc70:	46d9      	mov	r9, fp
 800cc72:	eb18 0308 	adds.w	r3, r8, r8
 800cc76:	eb49 0409 	adc.w	r4, r9, r9
 800cc7a:	4698      	mov	r8, r3
 800cc7c:	46a1      	mov	r9, r4
 800cc7e:	eb18 080a 	adds.w	r8, r8, sl
 800cc82:	eb49 090b 	adc.w	r9, r9, fp
 800cc86:	f04f 0100 	mov.w	r1, #0
 800cc8a:	f04f 0200 	mov.w	r2, #0
 800cc8e:	ea4f 02c9 	mov.w	r2, r9, lsl #3
 800cc92:	ea42 7258 	orr.w	r2, r2, r8, lsr #29
 800cc96:	ea4f 01c8 	mov.w	r1, r8, lsl #3
 800cc9a:	4688      	mov	r8, r1
 800cc9c:	4691      	mov	r9, r2
 800cc9e:	eb1a 0508 	adds.w	r5, sl, r8
 800cca2:	eb4b 0609 	adc.w	r6, fp, r9
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	685b      	ldr	r3, [r3, #4]
 800ccaa:	4619      	mov	r1, r3
 800ccac:	f04f 0200 	mov.w	r2, #0
 800ccb0:	f04f 0300 	mov.w	r3, #0
 800ccb4:	f04f 0400 	mov.w	r4, #0
 800ccb8:	0094      	lsls	r4, r2, #2
 800ccba:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800ccbe:	008b      	lsls	r3, r1, #2
 800ccc0:	461a      	mov	r2, r3
 800ccc2:	4623      	mov	r3, r4
 800ccc4:	4628      	mov	r0, r5
 800ccc6:	4631      	mov	r1, r6
 800ccc8:	f7f3 ff80 	bl	8000bcc <__aeabi_uldivmod>
 800cccc:	4603      	mov	r3, r0
 800ccce:	460c      	mov	r4, r1
 800ccd0:	461a      	mov	r2, r3
 800ccd2:	4b50      	ldr	r3, [pc, #320]	; (800ce14 <UART_SetConfig+0x6f4>)
 800ccd4:	fba3 2302 	umull	r2, r3, r3, r2
 800ccd8:	095b      	lsrs	r3, r3, #5
 800ccda:	ea4f 1803 	mov.w	r8, r3, lsl #4
 800ccde:	68bb      	ldr	r3, [r7, #8]
 800cce0:	469b      	mov	fp, r3
 800cce2:	f04f 0c00 	mov.w	ip, #0
 800cce6:	46d9      	mov	r9, fp
 800cce8:	46e2      	mov	sl, ip
 800ccea:	eb19 0309 	adds.w	r3, r9, r9
 800ccee:	eb4a 040a 	adc.w	r4, sl, sl
 800ccf2:	4699      	mov	r9, r3
 800ccf4:	46a2      	mov	sl, r4
 800ccf6:	eb19 090b 	adds.w	r9, r9, fp
 800ccfa:	eb4a 0a0c 	adc.w	sl, sl, ip
 800ccfe:	f04f 0100 	mov.w	r1, #0
 800cd02:	f04f 0200 	mov.w	r2, #0
 800cd06:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cd0a:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cd0e:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cd12:	4689      	mov	r9, r1
 800cd14:	4692      	mov	sl, r2
 800cd16:	eb1b 0509 	adds.w	r5, fp, r9
 800cd1a:	eb4c 060a 	adc.w	r6, ip, sl
 800cd1e:	687b      	ldr	r3, [r7, #4]
 800cd20:	685b      	ldr	r3, [r3, #4]
 800cd22:	4619      	mov	r1, r3
 800cd24:	f04f 0200 	mov.w	r2, #0
 800cd28:	f04f 0300 	mov.w	r3, #0
 800cd2c:	f04f 0400 	mov.w	r4, #0
 800cd30:	0094      	lsls	r4, r2, #2
 800cd32:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cd36:	008b      	lsls	r3, r1, #2
 800cd38:	461a      	mov	r2, r3
 800cd3a:	4623      	mov	r3, r4
 800cd3c:	4628      	mov	r0, r5
 800cd3e:	4631      	mov	r1, r6
 800cd40:	f7f3 ff44 	bl	8000bcc <__aeabi_uldivmod>
 800cd44:	4603      	mov	r3, r0
 800cd46:	460c      	mov	r4, r1
 800cd48:	461a      	mov	r2, r3
 800cd4a:	4b32      	ldr	r3, [pc, #200]	; (800ce14 <UART_SetConfig+0x6f4>)
 800cd4c:	fba3 1302 	umull	r1, r3, r3, r2
 800cd50:	095b      	lsrs	r3, r3, #5
 800cd52:	2164      	movs	r1, #100	; 0x64
 800cd54:	fb01 f303 	mul.w	r3, r1, r3
 800cd58:	1ad3      	subs	r3, r2, r3
 800cd5a:	011b      	lsls	r3, r3, #4
 800cd5c:	3332      	adds	r3, #50	; 0x32
 800cd5e:	4a2d      	ldr	r2, [pc, #180]	; (800ce14 <UART_SetConfig+0x6f4>)
 800cd60:	fba2 2303 	umull	r2, r3, r2, r3
 800cd64:	095b      	lsrs	r3, r3, #5
 800cd66:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800cd6a:	4498      	add	r8, r3
 800cd6c:	68bb      	ldr	r3, [r7, #8]
 800cd6e:	469b      	mov	fp, r3
 800cd70:	f04f 0c00 	mov.w	ip, #0
 800cd74:	46d9      	mov	r9, fp
 800cd76:	46e2      	mov	sl, ip
 800cd78:	eb19 0309 	adds.w	r3, r9, r9
 800cd7c:	eb4a 040a 	adc.w	r4, sl, sl
 800cd80:	4699      	mov	r9, r3
 800cd82:	46a2      	mov	sl, r4
 800cd84:	eb19 090b 	adds.w	r9, r9, fp
 800cd88:	eb4a 0a0c 	adc.w	sl, sl, ip
 800cd8c:	f04f 0100 	mov.w	r1, #0
 800cd90:	f04f 0200 	mov.w	r2, #0
 800cd94:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800cd98:	ea42 7259 	orr.w	r2, r2, r9, lsr #29
 800cd9c:	ea4f 01c9 	mov.w	r1, r9, lsl #3
 800cda0:	4689      	mov	r9, r1
 800cda2:	4692      	mov	sl, r2
 800cda4:	eb1b 0509 	adds.w	r5, fp, r9
 800cda8:	eb4c 060a 	adc.w	r6, ip, sl
 800cdac:	687b      	ldr	r3, [r7, #4]
 800cdae:	685b      	ldr	r3, [r3, #4]
 800cdb0:	4619      	mov	r1, r3
 800cdb2:	f04f 0200 	mov.w	r2, #0
 800cdb6:	f04f 0300 	mov.w	r3, #0
 800cdba:	f04f 0400 	mov.w	r4, #0
 800cdbe:	0094      	lsls	r4, r2, #2
 800cdc0:	ea44 7491 	orr.w	r4, r4, r1, lsr #30
 800cdc4:	008b      	lsls	r3, r1, #2
 800cdc6:	461a      	mov	r2, r3
 800cdc8:	4623      	mov	r3, r4
 800cdca:	4628      	mov	r0, r5
 800cdcc:	4631      	mov	r1, r6
 800cdce:	f7f3 fefd 	bl	8000bcc <__aeabi_uldivmod>
 800cdd2:	4603      	mov	r3, r0
 800cdd4:	460c      	mov	r4, r1
 800cdd6:	461a      	mov	r2, r3
 800cdd8:	4b0e      	ldr	r3, [pc, #56]	; (800ce14 <UART_SetConfig+0x6f4>)
 800cdda:	fba3 1302 	umull	r1, r3, r3, r2
 800cdde:	095b      	lsrs	r3, r3, #5
 800cde0:	2164      	movs	r1, #100	; 0x64
 800cde2:	fb01 f303 	mul.w	r3, r1, r3
 800cde6:	1ad3      	subs	r3, r2, r3
 800cde8:	011b      	lsls	r3, r3, #4
 800cdea:	3332      	adds	r3, #50	; 0x32
 800cdec:	4a09      	ldr	r2, [pc, #36]	; (800ce14 <UART_SetConfig+0x6f4>)
 800cdee:	fba2 2303 	umull	r2, r3, r2, r3
 800cdf2:	095b      	lsrs	r3, r3, #5
 800cdf4:	f003 020f 	and.w	r2, r3, #15
 800cdf8:	687b      	ldr	r3, [r7, #4]
 800cdfa:	681b      	ldr	r3, [r3, #0]
 800cdfc:	4442      	add	r2, r8
 800cdfe:	609a      	str	r2, [r3, #8]
}
 800ce00:	e7ff      	b.n	800ce02 <UART_SetConfig+0x6e2>
 800ce02:	bf00      	nop
 800ce04:	3714      	adds	r7, #20
 800ce06:	46bd      	mov	sp, r7
 800ce08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ce0c:	40011000 	.word	0x40011000
 800ce10:	40011400 	.word	0x40011400
 800ce14:	51eb851f 	.word	0x51eb851f

0800ce18 <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800ce18:	b480      	push	{r7}
 800ce1a:	af00      	add	r7, sp, #0
  * The issue was logged under:https://github.com/ARM-software/CMSIS-FreeRTOS/issues/35
  * until it is correctly fixed, the code below is commented
  */
/*    NVIC_SetPriority (SVCall_IRQn, 0U); */
#endif
}
 800ce1c:	bf00      	nop
 800ce1e:	46bd      	mov	sp, r7
 800ce20:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce24:	4770      	bx	lr
	...

0800ce28 <osKernelInitialize>:

/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 800ce28:	b480      	push	{r7}
 800ce2a:	b085      	sub	sp, #20
 800ce2c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce2e:	f3ef 8305 	mrs	r3, IPSR
 800ce32:	60bb      	str	r3, [r7, #8]
  return(result);
 800ce34:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ce36:	2b00      	cmp	r3, #0
 800ce38:	d10f      	bne.n	800ce5a <osKernelInitialize+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce3a:	f3ef 8310 	mrs	r3, PRIMASK
 800ce3e:	607b      	str	r3, [r7, #4]
  return(result);
 800ce40:	687b      	ldr	r3, [r7, #4]
 800ce42:	2b00      	cmp	r3, #0
 800ce44:	d105      	bne.n	800ce52 <osKernelInitialize+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ce46:	f3ef 8311 	mrs	r3, BASEPRI
 800ce4a:	603b      	str	r3, [r7, #0]
  return(result);
 800ce4c:	683b      	ldr	r3, [r7, #0]
 800ce4e:	2b00      	cmp	r3, #0
 800ce50:	d007      	beq.n	800ce62 <osKernelInitialize+0x3a>
 800ce52:	4b0e      	ldr	r3, [pc, #56]	; (800ce8c <osKernelInitialize+0x64>)
 800ce54:	681b      	ldr	r3, [r3, #0]
 800ce56:	2b02      	cmp	r3, #2
 800ce58:	d103      	bne.n	800ce62 <osKernelInitialize+0x3a>
    stat = osErrorISR;
 800ce5a:	f06f 0305 	mvn.w	r3, #5
 800ce5e:	60fb      	str	r3, [r7, #12]
 800ce60:	e00c      	b.n	800ce7c <osKernelInitialize+0x54>
  }
  else {
    if (KernelState == osKernelInactive) {
 800ce62:	4b0a      	ldr	r3, [pc, #40]	; (800ce8c <osKernelInitialize+0x64>)
 800ce64:	681b      	ldr	r3, [r3, #0]
 800ce66:	2b00      	cmp	r3, #0
 800ce68:	d105      	bne.n	800ce76 <osKernelInitialize+0x4e>
      #if defined(USE_FREERTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 800ce6a:	4b08      	ldr	r3, [pc, #32]	; (800ce8c <osKernelInitialize+0x64>)
 800ce6c:	2201      	movs	r2, #1
 800ce6e:	601a      	str	r2, [r3, #0]
      stat = osOK;
 800ce70:	2300      	movs	r3, #0
 800ce72:	60fb      	str	r3, [r7, #12]
 800ce74:	e002      	b.n	800ce7c <osKernelInitialize+0x54>
    } else {
      stat = osError;
 800ce76:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ce7a:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ce7c:	68fb      	ldr	r3, [r7, #12]
}
 800ce7e:	4618      	mov	r0, r3
 800ce80:	3714      	adds	r7, #20
 800ce82:	46bd      	mov	sp, r7
 800ce84:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ce88:	4770      	bx	lr
 800ce8a:	bf00      	nop
 800ce8c:	20000a80 	.word	0x20000a80

0800ce90 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 800ce90:	b580      	push	{r7, lr}
 800ce92:	b084      	sub	sp, #16
 800ce94:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800ce96:	f3ef 8305 	mrs	r3, IPSR
 800ce9a:	60bb      	str	r3, [r7, #8]
  return(result);
 800ce9c:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 800ce9e:	2b00      	cmp	r3, #0
 800cea0:	d10f      	bne.n	800cec2 <osKernelStart+0x32>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cea2:	f3ef 8310 	mrs	r3, PRIMASK
 800cea6:	607b      	str	r3, [r7, #4]
  return(result);
 800cea8:	687b      	ldr	r3, [r7, #4]
 800ceaa:	2b00      	cmp	r3, #0
 800ceac:	d105      	bne.n	800ceba <osKernelStart+0x2a>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800ceae:	f3ef 8311 	mrs	r3, BASEPRI
 800ceb2:	603b      	str	r3, [r7, #0]
  return(result);
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	2b00      	cmp	r3, #0
 800ceb8:	d007      	beq.n	800ceca <osKernelStart+0x3a>
 800ceba:	4b0f      	ldr	r3, [pc, #60]	; (800cef8 <osKernelStart+0x68>)
 800cebc:	681b      	ldr	r3, [r3, #0]
 800cebe:	2b02      	cmp	r3, #2
 800cec0:	d103      	bne.n	800ceca <osKernelStart+0x3a>
    stat = osErrorISR;
 800cec2:	f06f 0305 	mvn.w	r3, #5
 800cec6:	60fb      	str	r3, [r7, #12]
 800cec8:	e010      	b.n	800ceec <osKernelStart+0x5c>
  }
  else {
    if (KernelState == osKernelReady) {
 800ceca:	4b0b      	ldr	r3, [pc, #44]	; (800cef8 <osKernelStart+0x68>)
 800cecc:	681b      	ldr	r3, [r3, #0]
 800cece:	2b01      	cmp	r3, #1
 800ced0:	d109      	bne.n	800cee6 <osKernelStart+0x56>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800ced2:	f7ff ffa1 	bl	800ce18 <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800ced6:	4b08      	ldr	r3, [pc, #32]	; (800cef8 <osKernelStart+0x68>)
 800ced8:	2202      	movs	r2, #2
 800ceda:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 800cedc:	f001 f870 	bl	800dfc0 <vTaskStartScheduler>
      stat = osOK;
 800cee0:	2300      	movs	r3, #0
 800cee2:	60fb      	str	r3, [r7, #12]
 800cee4:	e002      	b.n	800ceec <osKernelStart+0x5c>
    } else {
      stat = osError;
 800cee6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800ceea:	60fb      	str	r3, [r7, #12]
    }
  }

  return (stat);
 800ceec:	68fb      	ldr	r3, [r7, #12]
}
 800ceee:	4618      	mov	r0, r3
 800cef0:	3710      	adds	r7, #16
 800cef2:	46bd      	mov	sp, r7
 800cef4:	bd80      	pop	{r7, pc}
 800cef6:	bf00      	nop
 800cef8:	20000a80 	.word	0x20000a80

0800cefc <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b090      	sub	sp, #64	; 0x40
 800cf00:	af04      	add	r7, sp, #16
 800cf02:	60f8      	str	r0, [r7, #12]
 800cf04:	60b9      	str	r1, [r7, #8]
 800cf06:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800cf08:	2300      	movs	r3, #0
 800cf0a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800cf0c:	f3ef 8305 	mrs	r3, IPSR
 800cf10:	61fb      	str	r3, [r7, #28]
  return(result);
 800cf12:	69fb      	ldr	r3, [r7, #28]

  if (!IS_IRQ() && (func != NULL)) {
 800cf14:	2b00      	cmp	r3, #0
 800cf16:	f040 808f 	bne.w	800d038 <osThreadNew+0x13c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800cf1a:	f3ef 8310 	mrs	r3, PRIMASK
 800cf1e:	61bb      	str	r3, [r7, #24]
  return(result);
 800cf20:	69bb      	ldr	r3, [r7, #24]
 800cf22:	2b00      	cmp	r3, #0
 800cf24:	d105      	bne.n	800cf32 <osThreadNew+0x36>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800cf26:	f3ef 8311 	mrs	r3, BASEPRI
 800cf2a:	617b      	str	r3, [r7, #20]
  return(result);
 800cf2c:	697b      	ldr	r3, [r7, #20]
 800cf2e:	2b00      	cmp	r3, #0
 800cf30:	d003      	beq.n	800cf3a <osThreadNew+0x3e>
 800cf32:	4b44      	ldr	r3, [pc, #272]	; (800d044 <osThreadNew+0x148>)
 800cf34:	681b      	ldr	r3, [r3, #0]
 800cf36:	2b02      	cmp	r3, #2
 800cf38:	d07e      	beq.n	800d038 <osThreadNew+0x13c>
 800cf3a:	68fb      	ldr	r3, [r7, #12]
 800cf3c:	2b00      	cmp	r3, #0
 800cf3e:	d07b      	beq.n	800d038 <osThreadNew+0x13c>
    stack = configMINIMAL_STACK_SIZE;
 800cf40:	2380      	movs	r3, #128	; 0x80
 800cf42:	62bb      	str	r3, [r7, #40]	; 0x28
    prio  = (UBaseType_t)osPriorityNormal;
 800cf44:	2318      	movs	r3, #24
 800cf46:	627b      	str	r3, [r7, #36]	; 0x24

    name = NULL;
 800cf48:	2300      	movs	r3, #0
 800cf4a:	62fb      	str	r3, [r7, #44]	; 0x2c
    mem  = -1;
 800cf4c:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800cf50:	623b      	str	r3, [r7, #32]

    if (attr != NULL) {
 800cf52:	687b      	ldr	r3, [r7, #4]
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d045      	beq.n	800cfe4 <osThreadNew+0xe8>
      if (attr->name != NULL) {
 800cf58:	687b      	ldr	r3, [r7, #4]
 800cf5a:	681b      	ldr	r3, [r3, #0]
 800cf5c:	2b00      	cmp	r3, #0
 800cf5e:	d002      	beq.n	800cf66 <osThreadNew+0x6a>
        name = attr->name;
 800cf60:	687b      	ldr	r3, [r7, #4]
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (attr->priority != osPriorityNone) {
 800cf66:	687b      	ldr	r3, [r7, #4]
 800cf68:	699b      	ldr	r3, [r3, #24]
 800cf6a:	2b00      	cmp	r3, #0
 800cf6c:	d002      	beq.n	800cf74 <osThreadNew+0x78>
        prio = (UBaseType_t)attr->priority;
 800cf6e:	687b      	ldr	r3, [r7, #4]
 800cf70:	699b      	ldr	r3, [r3, #24]
 800cf72:	627b      	str	r3, [r7, #36]	; 0x24
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 800cf74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf76:	2b00      	cmp	r3, #0
 800cf78:	d008      	beq.n	800cf8c <osThreadNew+0x90>
 800cf7a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cf7c:	2b38      	cmp	r3, #56	; 0x38
 800cf7e:	d805      	bhi.n	800cf8c <osThreadNew+0x90>
 800cf80:	687b      	ldr	r3, [r7, #4]
 800cf82:	685b      	ldr	r3, [r3, #4]
 800cf84:	f003 0301 	and.w	r3, r3, #1
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d001      	beq.n	800cf90 <osThreadNew+0x94>
        return (NULL);
 800cf8c:	2300      	movs	r3, #0
 800cf8e:	e054      	b.n	800d03a <osThreadNew+0x13e>
      }

      if (attr->stack_size > 0U) {
 800cf90:	687b      	ldr	r3, [r7, #4]
 800cf92:	695b      	ldr	r3, [r3, #20]
 800cf94:	2b00      	cmp	r3, #0
 800cf96:	d003      	beq.n	800cfa0 <osThreadNew+0xa4>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 800cf98:	687b      	ldr	r3, [r7, #4]
 800cf9a:	695b      	ldr	r3, [r3, #20]
 800cf9c:	089b      	lsrs	r3, r3, #2
 800cf9e:	62bb      	str	r3, [r7, #40]	; 0x28
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cfa0:	687b      	ldr	r3, [r7, #4]
 800cfa2:	689b      	ldr	r3, [r3, #8]
 800cfa4:	2b00      	cmp	r3, #0
 800cfa6:	d00e      	beq.n	800cfc6 <osThreadNew+0xca>
 800cfa8:	687b      	ldr	r3, [r7, #4]
 800cfaa:	68db      	ldr	r3, [r3, #12]
 800cfac:	2b5b      	cmp	r3, #91	; 0x5b
 800cfae:	d90a      	bls.n	800cfc6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cfb0:	687b      	ldr	r3, [r7, #4]
 800cfb2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 800cfb4:	2b00      	cmp	r3, #0
 800cfb6:	d006      	beq.n	800cfc6 <osThreadNew+0xca>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 800cfb8:	687b      	ldr	r3, [r7, #4]
 800cfba:	695b      	ldr	r3, [r3, #20]
 800cfbc:	2b00      	cmp	r3, #0
 800cfbe:	d002      	beq.n	800cfc6 <osThreadNew+0xca>
        mem = 1;
 800cfc0:	2301      	movs	r3, #1
 800cfc2:	623b      	str	r3, [r7, #32]
 800cfc4:	e010      	b.n	800cfe8 <osThreadNew+0xec>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 800cfc6:	687b      	ldr	r3, [r7, #4]
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	2b00      	cmp	r3, #0
 800cfcc:	d10c      	bne.n	800cfe8 <osThreadNew+0xec>
 800cfce:	687b      	ldr	r3, [r7, #4]
 800cfd0:	68db      	ldr	r3, [r3, #12]
 800cfd2:	2b00      	cmp	r3, #0
 800cfd4:	d108      	bne.n	800cfe8 <osThreadNew+0xec>
 800cfd6:	687b      	ldr	r3, [r7, #4]
 800cfd8:	691b      	ldr	r3, [r3, #16]
 800cfda:	2b00      	cmp	r3, #0
 800cfdc:	d104      	bne.n	800cfe8 <osThreadNew+0xec>
          mem = 0;
 800cfde:	2300      	movs	r3, #0
 800cfe0:	623b      	str	r3, [r7, #32]
 800cfe2:	e001      	b.n	800cfe8 <osThreadNew+0xec>
        }
      }
    }
    else {
      mem = 0;
 800cfe4:	2300      	movs	r3, #0
 800cfe6:	623b      	str	r3, [r7, #32]
    }

    if (mem == 1) {
 800cfe8:	6a3b      	ldr	r3, [r7, #32]
 800cfea:	2b01      	cmp	r3, #1
 800cfec:	d110      	bne.n	800d010 <osThreadNew+0x114>
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	691b      	ldr	r3, [r3, #16]
                                                                                    (StaticTask_t *)attr->cb_mem);
 800cff2:	687a      	ldr	r2, [r7, #4]
 800cff4:	6892      	ldr	r2, [r2, #8]
      hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 800cff6:	9202      	str	r2, [sp, #8]
 800cff8:	9301      	str	r3, [sp, #4]
 800cffa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cffc:	9300      	str	r3, [sp, #0]
 800cffe:	68bb      	ldr	r3, [r7, #8]
 800d000:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800d002:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d004:	68f8      	ldr	r0, [r7, #12]
 800d006:	f000 fe09 	bl	800dc1c <xTaskCreateStatic>
 800d00a:	4603      	mov	r3, r0
 800d00c:	613b      	str	r3, [r7, #16]
 800d00e:	e013      	b.n	800d038 <osThreadNew+0x13c>
    }
    else {
      if (mem == 0) {
 800d010:	6a3b      	ldr	r3, [r7, #32]
 800d012:	2b00      	cmp	r3, #0
 800d014:	d110      	bne.n	800d038 <osThreadNew+0x13c>
        if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 800d016:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d018:	b29a      	uxth	r2, r3
 800d01a:	f107 0310 	add.w	r3, r7, #16
 800d01e:	9301      	str	r3, [sp, #4]
 800d020:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d022:	9300      	str	r3, [sp, #0]
 800d024:	68bb      	ldr	r3, [r7, #8]
 800d026:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d028:	68f8      	ldr	r0, [r7, #12]
 800d02a:	f000 fe51 	bl	800dcd0 <xTaskCreate>
 800d02e:	4603      	mov	r3, r0
 800d030:	2b01      	cmp	r3, #1
 800d032:	d001      	beq.n	800d038 <osThreadNew+0x13c>
          hTask = NULL;
 800d034:	2300      	movs	r3, #0
 800d036:	613b      	str	r3, [r7, #16]
        }
      }
    }
  }

  return ((osThreadId_t)hTask);
 800d038:	693b      	ldr	r3, [r7, #16]
}
 800d03a:	4618      	mov	r0, r3
 800d03c:	3730      	adds	r7, #48	; 0x30
 800d03e:	46bd      	mov	sp, r7
 800d040:	bd80      	pop	{r7, pc}
 800d042:	bf00      	nop
 800d044:	20000a80 	.word	0x20000a80

0800d048 <osDelay>:

  /* Return flags before clearing */
  return (rflags);
}

osStatus_t osDelay (uint32_t ticks) {
 800d048:	b580      	push	{r7, lr}
 800d04a:	b086      	sub	sp, #24
 800d04c:	af00      	add	r7, sp, #0
 800d04e:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800d050:	f3ef 8305 	mrs	r3, IPSR
 800d054:	613b      	str	r3, [r7, #16]
  return(result);
 800d056:	693b      	ldr	r3, [r7, #16]
  osStatus_t stat;

  if (IS_IRQ()) {
 800d058:	2b00      	cmp	r3, #0
 800d05a:	d10f      	bne.n	800d07c <osDelay+0x34>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800d05c:	f3ef 8310 	mrs	r3, PRIMASK
 800d060:	60fb      	str	r3, [r7, #12]
  return(result);
 800d062:	68fb      	ldr	r3, [r7, #12]
 800d064:	2b00      	cmp	r3, #0
 800d066:	d105      	bne.n	800d074 <osDelay+0x2c>
  __ASM volatile ("MRS %0, basepri" : "=r" (result) );
 800d068:	f3ef 8311 	mrs	r3, BASEPRI
 800d06c:	60bb      	str	r3, [r7, #8]
  return(result);
 800d06e:	68bb      	ldr	r3, [r7, #8]
 800d070:	2b00      	cmp	r3, #0
 800d072:	d007      	beq.n	800d084 <osDelay+0x3c>
 800d074:	4b0a      	ldr	r3, [pc, #40]	; (800d0a0 <osDelay+0x58>)
 800d076:	681b      	ldr	r3, [r3, #0]
 800d078:	2b02      	cmp	r3, #2
 800d07a:	d103      	bne.n	800d084 <osDelay+0x3c>
    stat = osErrorISR;
 800d07c:	f06f 0305 	mvn.w	r3, #5
 800d080:	617b      	str	r3, [r7, #20]
 800d082:	e007      	b.n	800d094 <osDelay+0x4c>
  }
  else {
    stat = osOK;
 800d084:	2300      	movs	r3, #0
 800d086:	617b      	str	r3, [r7, #20]

    if (ticks != 0U) {
 800d088:	687b      	ldr	r3, [r7, #4]
 800d08a:	2b00      	cmp	r3, #0
 800d08c:	d002      	beq.n	800d094 <osDelay+0x4c>
      vTaskDelay(ticks);
 800d08e:	6878      	ldr	r0, [r7, #4]
 800d090:	f000 ff62 	bl	800df58 <vTaskDelay>
    }
  }

  return (stat);
 800d094:	697b      	ldr	r3, [r7, #20]
}
 800d096:	4618      	mov	r0, r3
 800d098:	3718      	adds	r7, #24
 800d09a:	46bd      	mov	sp, r7
 800d09c:	bd80      	pop	{r7, pc}
 800d09e:	bf00      	nop
 800d0a0:	20000a80 	.word	0x20000a80

0800d0a4 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 800d0a4:	b480      	push	{r7}
 800d0a6:	b085      	sub	sp, #20
 800d0a8:	af00      	add	r7, sp, #0
 800d0aa:	60f8      	str	r0, [r7, #12]
 800d0ac:	60b9      	str	r1, [r7, #8]
 800d0ae:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 800d0b0:	68fb      	ldr	r3, [r7, #12]
 800d0b2:	4a07      	ldr	r2, [pc, #28]	; (800d0d0 <vApplicationGetIdleTaskMemory+0x2c>)
 800d0b4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800d0b6:	68bb      	ldr	r3, [r7, #8]
 800d0b8:	4a06      	ldr	r2, [pc, #24]	; (800d0d4 <vApplicationGetIdleTaskMemory+0x30>)
 800d0ba:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	2280      	movs	r2, #128	; 0x80
 800d0c0:	601a      	str	r2, [r3, #0]
}
 800d0c2:	bf00      	nop
 800d0c4:	3714      	adds	r7, #20
 800d0c6:	46bd      	mov	sp, r7
 800d0c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0cc:	4770      	bx	lr
 800d0ce:	bf00      	nop
 800d0d0:	20000a84 	.word	0x20000a84
 800d0d4:	20000ae0 	.word	0x20000ae0

0800d0d8 <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800d0d8:	b480      	push	{r7}
 800d0da:	b085      	sub	sp, #20
 800d0dc:	af00      	add	r7, sp, #0
 800d0de:	60f8      	str	r0, [r7, #12]
 800d0e0:	60b9      	str	r1, [r7, #8]
 800d0e2:	607a      	str	r2, [r7, #4]
  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 800d0e4:	68fb      	ldr	r3, [r7, #12]
 800d0e6:	4a07      	ldr	r2, [pc, #28]	; (800d104 <vApplicationGetTimerTaskMemory+0x2c>)
 800d0e8:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800d0ea:	68bb      	ldr	r3, [r7, #8]
 800d0ec:	4a06      	ldr	r2, [pc, #24]	; (800d108 <vApplicationGetTimerTaskMemory+0x30>)
 800d0ee:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 800d0f0:	687b      	ldr	r3, [r7, #4]
 800d0f2:	f44f 7280 	mov.w	r2, #256	; 0x100
 800d0f6:	601a      	str	r2, [r3, #0]
}
 800d0f8:	bf00      	nop
 800d0fa:	3714      	adds	r7, #20
 800d0fc:	46bd      	mov	sp, r7
 800d0fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d102:	4770      	bx	lr
 800d104:	20000ce0 	.word	0x20000ce0
 800d108:	20000d3c 	.word	0x20000d3c

0800d10c <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800d10c:	b480      	push	{r7}
 800d10e:	b083      	sub	sp, #12
 800d110:	af00      	add	r7, sp, #0
 800d112:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d114:	687b      	ldr	r3, [r7, #4]
 800d116:	f103 0208 	add.w	r2, r3, #8
 800d11a:	687b      	ldr	r3, [r7, #4]
 800d11c:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800d11e:	687b      	ldr	r3, [r7, #4]
 800d120:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800d124:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d126:	687b      	ldr	r3, [r7, #4]
 800d128:	f103 0208 	add.w	r2, r3, #8
 800d12c:	687b      	ldr	r3, [r7, #4]
 800d12e:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800d130:	687b      	ldr	r3, [r7, #4]
 800d132:	f103 0208 	add.w	r2, r3, #8
 800d136:	687b      	ldr	r3, [r7, #4]
 800d138:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800d13a:	687b      	ldr	r3, [r7, #4]
 800d13c:	2200      	movs	r2, #0
 800d13e:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800d140:	bf00      	nop
 800d142:	370c      	adds	r7, #12
 800d144:	46bd      	mov	sp, r7
 800d146:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d14a:	4770      	bx	lr

0800d14c <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800d14c:	b480      	push	{r7}
 800d14e:	b083      	sub	sp, #12
 800d150:	af00      	add	r7, sp, #0
 800d152:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800d154:	687b      	ldr	r3, [r7, #4]
 800d156:	2200      	movs	r2, #0
 800d158:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800d15a:	bf00      	nop
 800d15c:	370c      	adds	r7, #12
 800d15e:	46bd      	mov	sp, r7
 800d160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d164:	4770      	bx	lr

0800d166 <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d166:	b480      	push	{r7}
 800d168:	b085      	sub	sp, #20
 800d16a:	af00      	add	r7, sp, #0
 800d16c:	6078      	str	r0, [r7, #4]
 800d16e:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800d170:	687b      	ldr	r3, [r7, #4]
 800d172:	685b      	ldr	r3, [r3, #4]
 800d174:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800d176:	683b      	ldr	r3, [r7, #0]
 800d178:	68fa      	ldr	r2, [r7, #12]
 800d17a:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800d17c:	68fb      	ldr	r3, [r7, #12]
 800d17e:	689a      	ldr	r2, [r3, #8]
 800d180:	683b      	ldr	r3, [r7, #0]
 800d182:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800d184:	68fb      	ldr	r3, [r7, #12]
 800d186:	689b      	ldr	r3, [r3, #8]
 800d188:	683a      	ldr	r2, [r7, #0]
 800d18a:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800d18c:	68fb      	ldr	r3, [r7, #12]
 800d18e:	683a      	ldr	r2, [r7, #0]
 800d190:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800d192:	683b      	ldr	r3, [r7, #0]
 800d194:	687a      	ldr	r2, [r7, #4]
 800d196:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d198:	687b      	ldr	r3, [r7, #4]
 800d19a:	681b      	ldr	r3, [r3, #0]
 800d19c:	1c5a      	adds	r2, r3, #1
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	601a      	str	r2, [r3, #0]
}
 800d1a2:	bf00      	nop
 800d1a4:	3714      	adds	r7, #20
 800d1a6:	46bd      	mov	sp, r7
 800d1a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d1ac:	4770      	bx	lr

0800d1ae <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800d1ae:	b480      	push	{r7}
 800d1b0:	b085      	sub	sp, #20
 800d1b2:	af00      	add	r7, sp, #0
 800d1b4:	6078      	str	r0, [r7, #4]
 800d1b6:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800d1b8:	683b      	ldr	r3, [r7, #0]
 800d1ba:	681b      	ldr	r3, [r3, #0]
 800d1bc:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800d1be:	68bb      	ldr	r3, [r7, #8]
 800d1c0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d1c4:	d103      	bne.n	800d1ce <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800d1c6:	687b      	ldr	r3, [r7, #4]
 800d1c8:	691b      	ldr	r3, [r3, #16]
 800d1ca:	60fb      	str	r3, [r7, #12]
 800d1cc:	e00c      	b.n	800d1e8 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800d1ce:	687b      	ldr	r3, [r7, #4]
 800d1d0:	3308      	adds	r3, #8
 800d1d2:	60fb      	str	r3, [r7, #12]
 800d1d4:	e002      	b.n	800d1dc <vListInsert+0x2e>
 800d1d6:	68fb      	ldr	r3, [r7, #12]
 800d1d8:	685b      	ldr	r3, [r3, #4]
 800d1da:	60fb      	str	r3, [r7, #12]
 800d1dc:	68fb      	ldr	r3, [r7, #12]
 800d1de:	685b      	ldr	r3, [r3, #4]
 800d1e0:	681b      	ldr	r3, [r3, #0]
 800d1e2:	68ba      	ldr	r2, [r7, #8]
 800d1e4:	429a      	cmp	r2, r3
 800d1e6:	d2f6      	bcs.n	800d1d6 <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	685a      	ldr	r2, [r3, #4]
 800d1ec:	683b      	ldr	r3, [r7, #0]
 800d1ee:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800d1f0:	683b      	ldr	r3, [r7, #0]
 800d1f2:	685b      	ldr	r3, [r3, #4]
 800d1f4:	683a      	ldr	r2, [r7, #0]
 800d1f6:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800d1f8:	683b      	ldr	r3, [r7, #0]
 800d1fa:	68fa      	ldr	r2, [r7, #12]
 800d1fc:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800d1fe:	68fb      	ldr	r3, [r7, #12]
 800d200:	683a      	ldr	r2, [r7, #0]
 800d202:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800d204:	683b      	ldr	r3, [r7, #0]
 800d206:	687a      	ldr	r2, [r7, #4]
 800d208:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800d20a:	687b      	ldr	r3, [r7, #4]
 800d20c:	681b      	ldr	r3, [r3, #0]
 800d20e:	1c5a      	adds	r2, r3, #1
 800d210:	687b      	ldr	r3, [r7, #4]
 800d212:	601a      	str	r2, [r3, #0]
}
 800d214:	bf00      	nop
 800d216:	3714      	adds	r7, #20
 800d218:	46bd      	mov	sp, r7
 800d21a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d21e:	4770      	bx	lr

0800d220 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800d220:	b480      	push	{r7}
 800d222:	b085      	sub	sp, #20
 800d224:	af00      	add	r7, sp, #0
 800d226:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800d228:	687b      	ldr	r3, [r7, #4]
 800d22a:	691b      	ldr	r3, [r3, #16]
 800d22c:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800d22e:	687b      	ldr	r3, [r7, #4]
 800d230:	685b      	ldr	r3, [r3, #4]
 800d232:	687a      	ldr	r2, [r7, #4]
 800d234:	6892      	ldr	r2, [r2, #8]
 800d236:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800d238:	687b      	ldr	r3, [r7, #4]
 800d23a:	689b      	ldr	r3, [r3, #8]
 800d23c:	687a      	ldr	r2, [r7, #4]
 800d23e:	6852      	ldr	r2, [r2, #4]
 800d240:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800d242:	68fb      	ldr	r3, [r7, #12]
 800d244:	685b      	ldr	r3, [r3, #4]
 800d246:	687a      	ldr	r2, [r7, #4]
 800d248:	429a      	cmp	r2, r3
 800d24a:	d103      	bne.n	800d254 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800d24c:	687b      	ldr	r3, [r7, #4]
 800d24e:	689a      	ldr	r2, [r3, #8]
 800d250:	68fb      	ldr	r3, [r7, #12]
 800d252:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800d254:	687b      	ldr	r3, [r7, #4]
 800d256:	2200      	movs	r2, #0
 800d258:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800d25a:	68fb      	ldr	r3, [r7, #12]
 800d25c:	681b      	ldr	r3, [r3, #0]
 800d25e:	1e5a      	subs	r2, r3, #1
 800d260:	68fb      	ldr	r3, [r7, #12]
 800d262:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	681b      	ldr	r3, [r3, #0]
}
 800d268:	4618      	mov	r0, r3
 800d26a:	3714      	adds	r7, #20
 800d26c:	46bd      	mov	sp, r7
 800d26e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d272:	4770      	bx	lr

0800d274 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800d274:	b580      	push	{r7, lr}
 800d276:	b084      	sub	sp, #16
 800d278:	af00      	add	r7, sp, #0
 800d27a:	6078      	str	r0, [r7, #4]
 800d27c:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800d282:	68fb      	ldr	r3, [r7, #12]
 800d284:	2b00      	cmp	r3, #0
 800d286:	d109      	bne.n	800d29c <xQueueGenericReset+0x28>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800d288:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d28c:	f383 8811 	msr	BASEPRI, r3
 800d290:	f3bf 8f6f 	isb	sy
 800d294:	f3bf 8f4f 	dsb	sy
 800d298:	60bb      	str	r3, [r7, #8]
 800d29a:	e7fe      	b.n	800d29a <xQueueGenericReset+0x26>

	taskENTER_CRITICAL();
 800d29c:	f002 f80e 	bl	800f2bc <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d2a0:	68fb      	ldr	r3, [r7, #12]
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	68fb      	ldr	r3, [r7, #12]
 800d2a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2a8:	68f9      	ldr	r1, [r7, #12]
 800d2aa:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d2ac:	fb01 f303 	mul.w	r3, r1, r3
 800d2b0:	441a      	add	r2, r3
 800d2b2:	68fb      	ldr	r3, [r7, #12]
 800d2b4:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800d2b6:	68fb      	ldr	r3, [r7, #12]
 800d2b8:	2200      	movs	r2, #0
 800d2ba:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800d2bc:	68fb      	ldr	r3, [r7, #12]
 800d2be:	681a      	ldr	r2, [r3, #0]
 800d2c0:	68fb      	ldr	r3, [r7, #12]
 800d2c2:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800d2c4:	68fb      	ldr	r3, [r7, #12]
 800d2c6:	681a      	ldr	r2, [r3, #0]
 800d2c8:	68fb      	ldr	r3, [r7, #12]
 800d2ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d2cc:	3b01      	subs	r3, #1
 800d2ce:	68f9      	ldr	r1, [r7, #12]
 800d2d0:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800d2d2:	fb01 f303 	mul.w	r3, r1, r3
 800d2d6:	441a      	add	r2, r3
 800d2d8:	68fb      	ldr	r3, [r7, #12]
 800d2da:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800d2dc:	68fb      	ldr	r3, [r7, #12]
 800d2de:	22ff      	movs	r2, #255	; 0xff
 800d2e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	22ff      	movs	r2, #255	; 0xff
 800d2e8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800d2ec:	683b      	ldr	r3, [r7, #0]
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d114      	bne.n	800d31c <xQueueGenericReset+0xa8>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d2f2:	68fb      	ldr	r3, [r7, #12]
 800d2f4:	691b      	ldr	r3, [r3, #16]
 800d2f6:	2b00      	cmp	r3, #0
 800d2f8:	d01a      	beq.n	800d330 <xQueueGenericReset+0xbc>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d2fa:	68fb      	ldr	r3, [r7, #12]
 800d2fc:	3310      	adds	r3, #16
 800d2fe:	4618      	mov	r0, r3
 800d300:	f001 f8de 	bl	800e4c0 <xTaskRemoveFromEventList>
 800d304:	4603      	mov	r3, r0
 800d306:	2b00      	cmp	r3, #0
 800d308:	d012      	beq.n	800d330 <xQueueGenericReset+0xbc>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800d30a:	4b0d      	ldr	r3, [pc, #52]	; (800d340 <xQueueGenericReset+0xcc>)
 800d30c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d310:	601a      	str	r2, [r3, #0]
 800d312:	f3bf 8f4f 	dsb	sy
 800d316:	f3bf 8f6f 	isb	sy
 800d31a:	e009      	b.n	800d330 <xQueueGenericReset+0xbc>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800d31c:	68fb      	ldr	r3, [r7, #12]
 800d31e:	3310      	adds	r3, #16
 800d320:	4618      	mov	r0, r3
 800d322:	f7ff fef3 	bl	800d10c <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800d326:	68fb      	ldr	r3, [r7, #12]
 800d328:	3324      	adds	r3, #36	; 0x24
 800d32a:	4618      	mov	r0, r3
 800d32c:	f7ff feee 	bl	800d10c <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800d330:	f001 fff2 	bl	800f318 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800d334:	2301      	movs	r3, #1
}
 800d336:	4618      	mov	r0, r3
 800d338:	3710      	adds	r7, #16
 800d33a:	46bd      	mov	sp, r7
 800d33c:	bd80      	pop	{r7, pc}
 800d33e:	bf00      	nop
 800d340:	e000ed04 	.word	0xe000ed04

0800d344 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800d344:	b580      	push	{r7, lr}
 800d346:	b08e      	sub	sp, #56	; 0x38
 800d348:	af02      	add	r7, sp, #8
 800d34a:	60f8      	str	r0, [r7, #12]
 800d34c:	60b9      	str	r1, [r7, #8]
 800d34e:	607a      	str	r2, [r7, #4]
 800d350:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800d352:	68fb      	ldr	r3, [r7, #12]
 800d354:	2b00      	cmp	r3, #0
 800d356:	d109      	bne.n	800d36c <xQueueGenericCreateStatic+0x28>
 800d358:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d35c:	f383 8811 	msr	BASEPRI, r3
 800d360:	f3bf 8f6f 	isb	sy
 800d364:	f3bf 8f4f 	dsb	sy
 800d368:	62bb      	str	r3, [r7, #40]	; 0x28
 800d36a:	e7fe      	b.n	800d36a <xQueueGenericCreateStatic+0x26>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800d36c:	683b      	ldr	r3, [r7, #0]
 800d36e:	2b00      	cmp	r3, #0
 800d370:	d109      	bne.n	800d386 <xQueueGenericCreateStatic+0x42>
 800d372:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d376:	f383 8811 	msr	BASEPRI, r3
 800d37a:	f3bf 8f6f 	isb	sy
 800d37e:	f3bf 8f4f 	dsb	sy
 800d382:	627b      	str	r3, [r7, #36]	; 0x24
 800d384:	e7fe      	b.n	800d384 <xQueueGenericCreateStatic+0x40>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800d386:	687b      	ldr	r3, [r7, #4]
 800d388:	2b00      	cmp	r3, #0
 800d38a:	d002      	beq.n	800d392 <xQueueGenericCreateStatic+0x4e>
 800d38c:	68bb      	ldr	r3, [r7, #8]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d001      	beq.n	800d396 <xQueueGenericCreateStatic+0x52>
 800d392:	2301      	movs	r3, #1
 800d394:	e000      	b.n	800d398 <xQueueGenericCreateStatic+0x54>
 800d396:	2300      	movs	r3, #0
 800d398:	2b00      	cmp	r3, #0
 800d39a:	d109      	bne.n	800d3b0 <xQueueGenericCreateStatic+0x6c>
 800d39c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3a0:	f383 8811 	msr	BASEPRI, r3
 800d3a4:	f3bf 8f6f 	isb	sy
 800d3a8:	f3bf 8f4f 	dsb	sy
 800d3ac:	623b      	str	r3, [r7, #32]
 800d3ae:	e7fe      	b.n	800d3ae <xQueueGenericCreateStatic+0x6a>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d102      	bne.n	800d3bc <xQueueGenericCreateStatic+0x78>
 800d3b6:	68bb      	ldr	r3, [r7, #8]
 800d3b8:	2b00      	cmp	r3, #0
 800d3ba:	d101      	bne.n	800d3c0 <xQueueGenericCreateStatic+0x7c>
 800d3bc:	2301      	movs	r3, #1
 800d3be:	e000      	b.n	800d3c2 <xQueueGenericCreateStatic+0x7e>
 800d3c0:	2300      	movs	r3, #0
 800d3c2:	2b00      	cmp	r3, #0
 800d3c4:	d109      	bne.n	800d3da <xQueueGenericCreateStatic+0x96>
 800d3c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3ca:	f383 8811 	msr	BASEPRI, r3
 800d3ce:	f3bf 8f6f 	isb	sy
 800d3d2:	f3bf 8f4f 	dsb	sy
 800d3d6:	61fb      	str	r3, [r7, #28]
 800d3d8:	e7fe      	b.n	800d3d8 <xQueueGenericCreateStatic+0x94>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800d3da:	2350      	movs	r3, #80	; 0x50
 800d3dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800d3de:	697b      	ldr	r3, [r7, #20]
 800d3e0:	2b50      	cmp	r3, #80	; 0x50
 800d3e2:	d009      	beq.n	800d3f8 <xQueueGenericCreateStatic+0xb4>
 800d3e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d3e8:	f383 8811 	msr	BASEPRI, r3
 800d3ec:	f3bf 8f6f 	isb	sy
 800d3f0:	f3bf 8f4f 	dsb	sy
 800d3f4:	61bb      	str	r3, [r7, #24]
 800d3f6:	e7fe      	b.n	800d3f6 <xQueueGenericCreateStatic+0xb2>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800d3f8:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800d3fa:	683b      	ldr	r3, [r7, #0]
 800d3fc:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800d3fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d400:	2b00      	cmp	r3, #0
 800d402:	d00d      	beq.n	800d420 <xQueueGenericCreateStatic+0xdc>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800d404:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d406:	2201      	movs	r2, #1
 800d408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800d40c:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800d410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d412:	9300      	str	r3, [sp, #0]
 800d414:	4613      	mov	r3, r2
 800d416:	687a      	ldr	r2, [r7, #4]
 800d418:	68b9      	ldr	r1, [r7, #8]
 800d41a:	68f8      	ldr	r0, [r7, #12]
 800d41c:	f000 f805 	bl	800d42a <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800d420:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800d422:	4618      	mov	r0, r3
 800d424:	3730      	adds	r7, #48	; 0x30
 800d426:	46bd      	mov	sp, r7
 800d428:	bd80      	pop	{r7, pc}

0800d42a <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800d42a:	b580      	push	{r7, lr}
 800d42c:	b084      	sub	sp, #16
 800d42e:	af00      	add	r7, sp, #0
 800d430:	60f8      	str	r0, [r7, #12]
 800d432:	60b9      	str	r1, [r7, #8]
 800d434:	607a      	str	r2, [r7, #4]
 800d436:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800d438:	68bb      	ldr	r3, [r7, #8]
 800d43a:	2b00      	cmp	r3, #0
 800d43c:	d103      	bne.n	800d446 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800d43e:	69bb      	ldr	r3, [r7, #24]
 800d440:	69ba      	ldr	r2, [r7, #24]
 800d442:	601a      	str	r2, [r3, #0]
 800d444:	e002      	b.n	800d44c <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800d446:	69bb      	ldr	r3, [r7, #24]
 800d448:	687a      	ldr	r2, [r7, #4]
 800d44a:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800d44c:	69bb      	ldr	r3, [r7, #24]
 800d44e:	68fa      	ldr	r2, [r7, #12]
 800d450:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800d452:	69bb      	ldr	r3, [r7, #24]
 800d454:	68ba      	ldr	r2, [r7, #8]
 800d456:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800d458:	2101      	movs	r1, #1
 800d45a:	69b8      	ldr	r0, [r7, #24]
 800d45c:	f7ff ff0a 	bl	800d274 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 800d460:	69bb      	ldr	r3, [r7, #24]
 800d462:	78fa      	ldrb	r2, [r7, #3]
 800d464:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800d468:	bf00      	nop
 800d46a:	3710      	adds	r7, #16
 800d46c:	46bd      	mov	sp, r7
 800d46e:	bd80      	pop	{r7, pc}

0800d470 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800d470:	b580      	push	{r7, lr}
 800d472:	b08e      	sub	sp, #56	; 0x38
 800d474:	af00      	add	r7, sp, #0
 800d476:	60f8      	str	r0, [r7, #12]
 800d478:	60b9      	str	r1, [r7, #8]
 800d47a:	607a      	str	r2, [r7, #4]
 800d47c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800d47e:	2300      	movs	r3, #0
 800d480:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d482:	68fb      	ldr	r3, [r7, #12]
 800d484:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d486:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d488:	2b00      	cmp	r3, #0
 800d48a:	d109      	bne.n	800d4a0 <xQueueGenericSend+0x30>
 800d48c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d490:	f383 8811 	msr	BASEPRI, r3
 800d494:	f3bf 8f6f 	isb	sy
 800d498:	f3bf 8f4f 	dsb	sy
 800d49c:	62bb      	str	r3, [r7, #40]	; 0x28
 800d49e:	e7fe      	b.n	800d49e <xQueueGenericSend+0x2e>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d4a0:	68bb      	ldr	r3, [r7, #8]
 800d4a2:	2b00      	cmp	r3, #0
 800d4a4:	d103      	bne.n	800d4ae <xQueueGenericSend+0x3e>
 800d4a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d4aa:	2b00      	cmp	r3, #0
 800d4ac:	d101      	bne.n	800d4b2 <xQueueGenericSend+0x42>
 800d4ae:	2301      	movs	r3, #1
 800d4b0:	e000      	b.n	800d4b4 <xQueueGenericSend+0x44>
 800d4b2:	2300      	movs	r3, #0
 800d4b4:	2b00      	cmp	r3, #0
 800d4b6:	d109      	bne.n	800d4cc <xQueueGenericSend+0x5c>
 800d4b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4bc:	f383 8811 	msr	BASEPRI, r3
 800d4c0:	f3bf 8f6f 	isb	sy
 800d4c4:	f3bf 8f4f 	dsb	sy
 800d4c8:	627b      	str	r3, [r7, #36]	; 0x24
 800d4ca:	e7fe      	b.n	800d4ca <xQueueGenericSend+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d4cc:	683b      	ldr	r3, [r7, #0]
 800d4ce:	2b02      	cmp	r3, #2
 800d4d0:	d103      	bne.n	800d4da <xQueueGenericSend+0x6a>
 800d4d2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d4d4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d4d6:	2b01      	cmp	r3, #1
 800d4d8:	d101      	bne.n	800d4de <xQueueGenericSend+0x6e>
 800d4da:	2301      	movs	r3, #1
 800d4dc:	e000      	b.n	800d4e0 <xQueueGenericSend+0x70>
 800d4de:	2300      	movs	r3, #0
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	d109      	bne.n	800d4f8 <xQueueGenericSend+0x88>
 800d4e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d4e8:	f383 8811 	msr	BASEPRI, r3
 800d4ec:	f3bf 8f6f 	isb	sy
 800d4f0:	f3bf 8f4f 	dsb	sy
 800d4f4:	623b      	str	r3, [r7, #32]
 800d4f6:	e7fe      	b.n	800d4f6 <xQueueGenericSend+0x86>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d4f8:	f001 f998 	bl	800e82c <xTaskGetSchedulerState>
 800d4fc:	4603      	mov	r3, r0
 800d4fe:	2b00      	cmp	r3, #0
 800d500:	d102      	bne.n	800d508 <xQueueGenericSend+0x98>
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	2b00      	cmp	r3, #0
 800d506:	d101      	bne.n	800d50c <xQueueGenericSend+0x9c>
 800d508:	2301      	movs	r3, #1
 800d50a:	e000      	b.n	800d50e <xQueueGenericSend+0x9e>
 800d50c:	2300      	movs	r3, #0
 800d50e:	2b00      	cmp	r3, #0
 800d510:	d109      	bne.n	800d526 <xQueueGenericSend+0xb6>
 800d512:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d516:	f383 8811 	msr	BASEPRI, r3
 800d51a:	f3bf 8f6f 	isb	sy
 800d51e:	f3bf 8f4f 	dsb	sy
 800d522:	61fb      	str	r3, [r7, #28]
 800d524:	e7fe      	b.n	800d524 <xQueueGenericSend+0xb4>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d526:	f001 fec9 	bl	800f2bc <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d52a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d52c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d52e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d530:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d532:	429a      	cmp	r2, r3
 800d534:	d302      	bcc.n	800d53c <xQueueGenericSend+0xcc>
 800d536:	683b      	ldr	r3, [r7, #0]
 800d538:	2b02      	cmp	r3, #2
 800d53a:	d129      	bne.n	800d590 <xQueueGenericSend+0x120>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d53c:	683a      	ldr	r2, [r7, #0]
 800d53e:	68b9      	ldr	r1, [r7, #8]
 800d540:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d542:	f000 f9ff 	bl	800d944 <prvCopyDataToQueue>
 800d546:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d548:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d54a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d54c:	2b00      	cmp	r3, #0
 800d54e:	d010      	beq.n	800d572 <xQueueGenericSend+0x102>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d550:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d552:	3324      	adds	r3, #36	; 0x24
 800d554:	4618      	mov	r0, r3
 800d556:	f000 ffb3 	bl	800e4c0 <xTaskRemoveFromEventList>
 800d55a:	4603      	mov	r3, r0
 800d55c:	2b00      	cmp	r3, #0
 800d55e:	d013      	beq.n	800d588 <xQueueGenericSend+0x118>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800d560:	4b3f      	ldr	r3, [pc, #252]	; (800d660 <xQueueGenericSend+0x1f0>)
 800d562:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d566:	601a      	str	r2, [r3, #0]
 800d568:	f3bf 8f4f 	dsb	sy
 800d56c:	f3bf 8f6f 	isb	sy
 800d570:	e00a      	b.n	800d588 <xQueueGenericSend+0x118>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800d572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d574:	2b00      	cmp	r3, #0
 800d576:	d007      	beq.n	800d588 <xQueueGenericSend+0x118>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800d578:	4b39      	ldr	r3, [pc, #228]	; (800d660 <xQueueGenericSend+0x1f0>)
 800d57a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d57e:	601a      	str	r2, [r3, #0]
 800d580:	f3bf 8f4f 	dsb	sy
 800d584:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800d588:	f001 fec6 	bl	800f318 <vPortExitCritical>
				return pdPASS;
 800d58c:	2301      	movs	r3, #1
 800d58e:	e063      	b.n	800d658 <xQueueGenericSend+0x1e8>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d590:	687b      	ldr	r3, [r7, #4]
 800d592:	2b00      	cmp	r3, #0
 800d594:	d103      	bne.n	800d59e <xQueueGenericSend+0x12e>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d596:	f001 febf 	bl	800f318 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800d59a:	2300      	movs	r3, #0
 800d59c:	e05c      	b.n	800d658 <xQueueGenericSend+0x1e8>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d59e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d5a0:	2b00      	cmp	r3, #0
 800d5a2:	d106      	bne.n	800d5b2 <xQueueGenericSend+0x142>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d5a4:	f107 0314 	add.w	r3, r7, #20
 800d5a8:	4618      	mov	r0, r3
 800d5aa:	f000 ffeb 	bl	800e584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d5ae:	2301      	movs	r3, #1
 800d5b0:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d5b2:	f001 feb1 	bl	800f318 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d5b6:	f000 fd67 	bl	800e088 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d5ba:	f001 fe7f 	bl	800f2bc <vPortEnterCritical>
 800d5be:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5c0:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d5c4:	b25b      	sxtb	r3, r3
 800d5c6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d5ca:	d103      	bne.n	800d5d4 <xQueueGenericSend+0x164>
 800d5cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5ce:	2200      	movs	r2, #0
 800d5d0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d5d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5d6:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d5da:	b25b      	sxtb	r3, r3
 800d5dc:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d5e0:	d103      	bne.n	800d5ea <xQueueGenericSend+0x17a>
 800d5e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d5e4:	2200      	movs	r2, #0
 800d5e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d5ea:	f001 fe95 	bl	800f318 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d5ee:	1d3a      	adds	r2, r7, #4
 800d5f0:	f107 0314 	add.w	r3, r7, #20
 800d5f4:	4611      	mov	r1, r2
 800d5f6:	4618      	mov	r0, r3
 800d5f8:	f000 ffda 	bl	800e5b0 <xTaskCheckForTimeOut>
 800d5fc:	4603      	mov	r3, r0
 800d5fe:	2b00      	cmp	r3, #0
 800d600:	d124      	bne.n	800d64c <xQueueGenericSend+0x1dc>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800d602:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d604:	f000 fa96 	bl	800db34 <prvIsQueueFull>
 800d608:	4603      	mov	r3, r0
 800d60a:	2b00      	cmp	r3, #0
 800d60c:	d018      	beq.n	800d640 <xQueueGenericSend+0x1d0>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800d60e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d610:	3310      	adds	r3, #16
 800d612:	687a      	ldr	r2, [r7, #4]
 800d614:	4611      	mov	r1, r2
 800d616:	4618      	mov	r0, r3
 800d618:	f000 ff04 	bl	800e424 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800d61c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d61e:	f000 fa21 	bl	800da64 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800d622:	f000 fd3f 	bl	800e0a4 <xTaskResumeAll>
 800d626:	4603      	mov	r3, r0
 800d628:	2b00      	cmp	r3, #0
 800d62a:	f47f af7c 	bne.w	800d526 <xQueueGenericSend+0xb6>
				{
					portYIELD_WITHIN_API();
 800d62e:	4b0c      	ldr	r3, [pc, #48]	; (800d660 <xQueueGenericSend+0x1f0>)
 800d630:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d634:	601a      	str	r2, [r3, #0]
 800d636:	f3bf 8f4f 	dsb	sy
 800d63a:	f3bf 8f6f 	isb	sy
 800d63e:	e772      	b.n	800d526 <xQueueGenericSend+0xb6>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800d640:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d642:	f000 fa0f 	bl	800da64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d646:	f000 fd2d 	bl	800e0a4 <xTaskResumeAll>
 800d64a:	e76c      	b.n	800d526 <xQueueGenericSend+0xb6>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800d64c:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d64e:	f000 fa09 	bl	800da64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d652:	f000 fd27 	bl	800e0a4 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800d656:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800d658:	4618      	mov	r0, r3
 800d65a:	3738      	adds	r7, #56	; 0x38
 800d65c:	46bd      	mov	sp, r7
 800d65e:	bd80      	pop	{r7, pc}
 800d660:	e000ed04 	.word	0xe000ed04

0800d664 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800d664:	b580      	push	{r7, lr}
 800d666:	b08e      	sub	sp, #56	; 0x38
 800d668:	af00      	add	r7, sp, #0
 800d66a:	60f8      	str	r0, [r7, #12]
 800d66c:	60b9      	str	r1, [r7, #8]
 800d66e:	607a      	str	r2, [r7, #4]
 800d670:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800d672:	68fb      	ldr	r3, [r7, #12]
 800d674:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800d676:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d109      	bne.n	800d690 <xQueueGenericSendFromISR+0x2c>
 800d67c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d680:	f383 8811 	msr	BASEPRI, r3
 800d684:	f3bf 8f6f 	isb	sy
 800d688:	f3bf 8f4f 	dsb	sy
 800d68c:	627b      	str	r3, [r7, #36]	; 0x24
 800d68e:	e7fe      	b.n	800d68e <xQueueGenericSendFromISR+0x2a>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d690:	68bb      	ldr	r3, [r7, #8]
 800d692:	2b00      	cmp	r3, #0
 800d694:	d103      	bne.n	800d69e <xQueueGenericSendFromISR+0x3a>
 800d696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d698:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d69a:	2b00      	cmp	r3, #0
 800d69c:	d101      	bne.n	800d6a2 <xQueueGenericSendFromISR+0x3e>
 800d69e:	2301      	movs	r3, #1
 800d6a0:	e000      	b.n	800d6a4 <xQueueGenericSendFromISR+0x40>
 800d6a2:	2300      	movs	r3, #0
 800d6a4:	2b00      	cmp	r3, #0
 800d6a6:	d109      	bne.n	800d6bc <xQueueGenericSendFromISR+0x58>
 800d6a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6ac:	f383 8811 	msr	BASEPRI, r3
 800d6b0:	f3bf 8f6f 	isb	sy
 800d6b4:	f3bf 8f4f 	dsb	sy
 800d6b8:	623b      	str	r3, [r7, #32]
 800d6ba:	e7fe      	b.n	800d6ba <xQueueGenericSendFromISR+0x56>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800d6bc:	683b      	ldr	r3, [r7, #0]
 800d6be:	2b02      	cmp	r3, #2
 800d6c0:	d103      	bne.n	800d6ca <xQueueGenericSendFromISR+0x66>
 800d6c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d6c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d6c6:	2b01      	cmp	r3, #1
 800d6c8:	d101      	bne.n	800d6ce <xQueueGenericSendFromISR+0x6a>
 800d6ca:	2301      	movs	r3, #1
 800d6cc:	e000      	b.n	800d6d0 <xQueueGenericSendFromISR+0x6c>
 800d6ce:	2300      	movs	r3, #0
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d109      	bne.n	800d6e8 <xQueueGenericSendFromISR+0x84>
 800d6d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6d8:	f383 8811 	msr	BASEPRI, r3
 800d6dc:	f3bf 8f6f 	isb	sy
 800d6e0:	f3bf 8f4f 	dsb	sy
 800d6e4:	61fb      	str	r3, [r7, #28]
 800d6e6:	e7fe      	b.n	800d6e6 <xQueueGenericSendFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800d6e8:	f001 fec4 	bl	800f474 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800d6ec:	f3ef 8211 	mrs	r2, BASEPRI
 800d6f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d6f4:	f383 8811 	msr	BASEPRI, r3
 800d6f8:	f3bf 8f6f 	isb	sy
 800d6fc:	f3bf 8f4f 	dsb	sy
 800d700:	61ba      	str	r2, [r7, #24]
 800d702:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800d704:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800d706:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800d708:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d70a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d70e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800d710:	429a      	cmp	r2, r3
 800d712:	d302      	bcc.n	800d71a <xQueueGenericSendFromISR+0xb6>
 800d714:	683b      	ldr	r3, [r7, #0]
 800d716:	2b02      	cmp	r3, #2
 800d718:	d12c      	bne.n	800d774 <xQueueGenericSendFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800d71a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d71c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d720:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800d724:	683a      	ldr	r2, [r7, #0]
 800d726:	68b9      	ldr	r1, [r7, #8]
 800d728:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800d72a:	f000 f90b 	bl	800d944 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800d72e:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800d732:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d736:	d112      	bne.n	800d75e <xQueueGenericSendFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800d738:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d73a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d016      	beq.n	800d76e <xQueueGenericSendFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800d740:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d742:	3324      	adds	r3, #36	; 0x24
 800d744:	4618      	mov	r0, r3
 800d746:	f000 febb 	bl	800e4c0 <xTaskRemoveFromEventList>
 800d74a:	4603      	mov	r3, r0
 800d74c:	2b00      	cmp	r3, #0
 800d74e:	d00e      	beq.n	800d76e <xQueueGenericSendFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800d750:	687b      	ldr	r3, [r7, #4]
 800d752:	2b00      	cmp	r3, #0
 800d754:	d00b      	beq.n	800d76e <xQueueGenericSendFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800d756:	687b      	ldr	r3, [r7, #4]
 800d758:	2201      	movs	r2, #1
 800d75a:	601a      	str	r2, [r3, #0]
 800d75c:	e007      	b.n	800d76e <xQueueGenericSendFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800d75e:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800d762:	3301      	adds	r3, #1
 800d764:	b2db      	uxtb	r3, r3
 800d766:	b25a      	sxtb	r2, r3
 800d768:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d76a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800d76e:	2301      	movs	r3, #1
 800d770:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800d772:	e001      	b.n	800d778 <xQueueGenericSendFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800d774:	2300      	movs	r3, #0
 800d776:	637b      	str	r3, [r7, #52]	; 0x34
 800d778:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d77a:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800d77c:	693b      	ldr	r3, [r7, #16]
 800d77e:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800d782:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800d784:	4618      	mov	r0, r3
 800d786:	3738      	adds	r7, #56	; 0x38
 800d788:	46bd      	mov	sp, r7
 800d78a:	bd80      	pop	{r7, pc}

0800d78c <xQueueReceive>:
	return xReturn;
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800d78c:	b580      	push	{r7, lr}
 800d78e:	b08c      	sub	sp, #48	; 0x30
 800d790:	af00      	add	r7, sp, #0
 800d792:	60f8      	str	r0, [r7, #12]
 800d794:	60b9      	str	r1, [r7, #8]
 800d796:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800d798:	2300      	movs	r3, #0
 800d79a:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800d79c:	68fb      	ldr	r3, [r7, #12]
 800d79e:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800d7a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	d109      	bne.n	800d7ba <xQueueReceive+0x2e>
	__asm volatile
 800d7a6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7aa:	f383 8811 	msr	BASEPRI, r3
 800d7ae:	f3bf 8f6f 	isb	sy
 800d7b2:	f3bf 8f4f 	dsb	sy
 800d7b6:	623b      	str	r3, [r7, #32]
 800d7b8:	e7fe      	b.n	800d7b8 <xQueueReceive+0x2c>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800d7ba:	68bb      	ldr	r3, [r7, #8]
 800d7bc:	2b00      	cmp	r3, #0
 800d7be:	d103      	bne.n	800d7c8 <xQueueReceive+0x3c>
 800d7c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d7c4:	2b00      	cmp	r3, #0
 800d7c6:	d101      	bne.n	800d7cc <xQueueReceive+0x40>
 800d7c8:	2301      	movs	r3, #1
 800d7ca:	e000      	b.n	800d7ce <xQueueReceive+0x42>
 800d7cc:	2300      	movs	r3, #0
 800d7ce:	2b00      	cmp	r3, #0
 800d7d0:	d109      	bne.n	800d7e6 <xQueueReceive+0x5a>
 800d7d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d7d6:	f383 8811 	msr	BASEPRI, r3
 800d7da:	f3bf 8f6f 	isb	sy
 800d7de:	f3bf 8f4f 	dsb	sy
 800d7e2:	61fb      	str	r3, [r7, #28]
 800d7e4:	e7fe      	b.n	800d7e4 <xQueueReceive+0x58>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800d7e6:	f001 f821 	bl	800e82c <xTaskGetSchedulerState>
 800d7ea:	4603      	mov	r3, r0
 800d7ec:	2b00      	cmp	r3, #0
 800d7ee:	d102      	bne.n	800d7f6 <xQueueReceive+0x6a>
 800d7f0:	687b      	ldr	r3, [r7, #4]
 800d7f2:	2b00      	cmp	r3, #0
 800d7f4:	d101      	bne.n	800d7fa <xQueueReceive+0x6e>
 800d7f6:	2301      	movs	r3, #1
 800d7f8:	e000      	b.n	800d7fc <xQueueReceive+0x70>
 800d7fa:	2300      	movs	r3, #0
 800d7fc:	2b00      	cmp	r3, #0
 800d7fe:	d109      	bne.n	800d814 <xQueueReceive+0x88>
 800d800:	f04f 0350 	mov.w	r3, #80	; 0x50
 800d804:	f383 8811 	msr	BASEPRI, r3
 800d808:	f3bf 8f6f 	isb	sy
 800d80c:	f3bf 8f4f 	dsb	sy
 800d810:	61bb      	str	r3, [r7, #24]
 800d812:	e7fe      	b.n	800d812 <xQueueReceive+0x86>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800d814:	f001 fd52 	bl	800f2bc <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d818:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d81a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d81c:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d81e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d820:	2b00      	cmp	r3, #0
 800d822:	d01f      	beq.n	800d864 <xQueueReceive+0xd8>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800d824:	68b9      	ldr	r1, [r7, #8]
 800d826:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d828:	f000 f8f6 	bl	800da18 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800d82c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d82e:	1e5a      	subs	r2, r3, #1
 800d830:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d832:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800d834:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d836:	691b      	ldr	r3, [r3, #16]
 800d838:	2b00      	cmp	r3, #0
 800d83a:	d00f      	beq.n	800d85c <xQueueReceive+0xd0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800d83c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d83e:	3310      	adds	r3, #16
 800d840:	4618      	mov	r0, r3
 800d842:	f000 fe3d 	bl	800e4c0 <xTaskRemoveFromEventList>
 800d846:	4603      	mov	r3, r0
 800d848:	2b00      	cmp	r3, #0
 800d84a:	d007      	beq.n	800d85c <xQueueReceive+0xd0>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800d84c:	4b3c      	ldr	r3, [pc, #240]	; (800d940 <xQueueReceive+0x1b4>)
 800d84e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d852:	601a      	str	r2, [r3, #0]
 800d854:	f3bf 8f4f 	dsb	sy
 800d858:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800d85c:	f001 fd5c 	bl	800f318 <vPortExitCritical>
				return pdPASS;
 800d860:	2301      	movs	r3, #1
 800d862:	e069      	b.n	800d938 <xQueueReceive+0x1ac>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800d864:	687b      	ldr	r3, [r7, #4]
 800d866:	2b00      	cmp	r3, #0
 800d868:	d103      	bne.n	800d872 <xQueueReceive+0xe6>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800d86a:	f001 fd55 	bl	800f318 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800d86e:	2300      	movs	r3, #0
 800d870:	e062      	b.n	800d938 <xQueueReceive+0x1ac>
				}
				else if( xEntryTimeSet == pdFALSE )
 800d872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d874:	2b00      	cmp	r3, #0
 800d876:	d106      	bne.n	800d886 <xQueueReceive+0xfa>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800d878:	f107 0310 	add.w	r3, r7, #16
 800d87c:	4618      	mov	r0, r3
 800d87e:	f000 fe81 	bl	800e584 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800d882:	2301      	movs	r3, #1
 800d884:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800d886:	f001 fd47 	bl	800f318 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800d88a:	f000 fbfd 	bl	800e088 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800d88e:	f001 fd15 	bl	800f2bc <vPortEnterCritical>
 800d892:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d894:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800d898:	b25b      	sxtb	r3, r3
 800d89a:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d89e:	d103      	bne.n	800d8a8 <xQueueReceive+0x11c>
 800d8a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8a2:	2200      	movs	r2, #0
 800d8a4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800d8a8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8aa:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800d8ae:	b25b      	sxtb	r3, r3
 800d8b0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800d8b4:	d103      	bne.n	800d8be <xQueueReceive+0x132>
 800d8b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8b8:	2200      	movs	r2, #0
 800d8ba:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800d8be:	f001 fd2b 	bl	800f318 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800d8c2:	1d3a      	adds	r2, r7, #4
 800d8c4:	f107 0310 	add.w	r3, r7, #16
 800d8c8:	4611      	mov	r1, r2
 800d8ca:	4618      	mov	r0, r3
 800d8cc:	f000 fe70 	bl	800e5b0 <xTaskCheckForTimeOut>
 800d8d0:	4603      	mov	r3, r0
 800d8d2:	2b00      	cmp	r3, #0
 800d8d4:	d123      	bne.n	800d91e <xQueueReceive+0x192>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d8d6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8d8:	f000 f916 	bl	800db08 <prvIsQueueEmpty>
 800d8dc:	4603      	mov	r3, r0
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d017      	beq.n	800d912 <xQueueReceive+0x186>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800d8e2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d8e4:	3324      	adds	r3, #36	; 0x24
 800d8e6:	687a      	ldr	r2, [r7, #4]
 800d8e8:	4611      	mov	r1, r2
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	f000 fd9a 	bl	800e424 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800d8f0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d8f2:	f000 f8b7 	bl	800da64 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800d8f6:	f000 fbd5 	bl	800e0a4 <xTaskResumeAll>
 800d8fa:	4603      	mov	r3, r0
 800d8fc:	2b00      	cmp	r3, #0
 800d8fe:	d189      	bne.n	800d814 <xQueueReceive+0x88>
				{
					portYIELD_WITHIN_API();
 800d900:	4b0f      	ldr	r3, [pc, #60]	; (800d940 <xQueueReceive+0x1b4>)
 800d902:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800d906:	601a      	str	r2, [r3, #0]
 800d908:	f3bf 8f4f 	dsb	sy
 800d90c:	f3bf 8f6f 	isb	sy
 800d910:	e780      	b.n	800d814 <xQueueReceive+0x88>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800d912:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d914:	f000 f8a6 	bl	800da64 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800d918:	f000 fbc4 	bl	800e0a4 <xTaskResumeAll>
 800d91c:	e77a      	b.n	800d814 <xQueueReceive+0x88>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800d91e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d920:	f000 f8a0 	bl	800da64 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800d924:	f000 fbbe 	bl	800e0a4 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800d928:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800d92a:	f000 f8ed 	bl	800db08 <prvIsQueueEmpty>
 800d92e:	4603      	mov	r3, r0
 800d930:	2b00      	cmp	r3, #0
 800d932:	f43f af6f 	beq.w	800d814 <xQueueReceive+0x88>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800d936:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800d938:	4618      	mov	r0, r3
 800d93a:	3730      	adds	r7, #48	; 0x30
 800d93c:	46bd      	mov	sp, r7
 800d93e:	bd80      	pop	{r7, pc}
 800d940:	e000ed04 	.word	0xe000ed04

0800d944 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800d944:	b580      	push	{r7, lr}
 800d946:	b086      	sub	sp, #24
 800d948:	af00      	add	r7, sp, #0
 800d94a:	60f8      	str	r0, [r7, #12]
 800d94c:	60b9      	str	r1, [r7, #8]
 800d94e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800d950:	2300      	movs	r3, #0
 800d952:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800d954:	68fb      	ldr	r3, [r7, #12]
 800d956:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d958:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d95e:	2b00      	cmp	r3, #0
 800d960:	d10d      	bne.n	800d97e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800d962:	68fb      	ldr	r3, [r7, #12]
 800d964:	681b      	ldr	r3, [r3, #0]
 800d966:	2b00      	cmp	r3, #0
 800d968:	d14d      	bne.n	800da06 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	689b      	ldr	r3, [r3, #8]
 800d96e:	4618      	mov	r0, r3
 800d970:	f000 ff7a 	bl	800e868 <xTaskPriorityDisinherit>
 800d974:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800d976:	68fb      	ldr	r3, [r7, #12]
 800d978:	2200      	movs	r2, #0
 800d97a:	609a      	str	r2, [r3, #8]
 800d97c:	e043      	b.n	800da06 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800d97e:	687b      	ldr	r3, [r7, #4]
 800d980:	2b00      	cmp	r3, #0
 800d982:	d119      	bne.n	800d9b8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800d984:	68fb      	ldr	r3, [r7, #12]
 800d986:	6858      	ldr	r0, [r3, #4]
 800d988:	68fb      	ldr	r3, [r7, #12]
 800d98a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d98c:	461a      	mov	r2, r3
 800d98e:	68b9      	ldr	r1, [r7, #8]
 800d990:	f001 ffb2 	bl	800f8f8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800d994:	68fb      	ldr	r3, [r7, #12]
 800d996:	685a      	ldr	r2, [r3, #4]
 800d998:	68fb      	ldr	r3, [r7, #12]
 800d99a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d99c:	441a      	add	r2, r3
 800d99e:	68fb      	ldr	r3, [r7, #12]
 800d9a0:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d9a2:	68fb      	ldr	r3, [r7, #12]
 800d9a4:	685a      	ldr	r2, [r3, #4]
 800d9a6:	68fb      	ldr	r3, [r7, #12]
 800d9a8:	689b      	ldr	r3, [r3, #8]
 800d9aa:	429a      	cmp	r2, r3
 800d9ac:	d32b      	bcc.n	800da06 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800d9ae:	68fb      	ldr	r3, [r7, #12]
 800d9b0:	681a      	ldr	r2, [r3, #0]
 800d9b2:	68fb      	ldr	r3, [r7, #12]
 800d9b4:	605a      	str	r2, [r3, #4]
 800d9b6:	e026      	b.n	800da06 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	68d8      	ldr	r0, [r3, #12]
 800d9bc:	68fb      	ldr	r3, [r7, #12]
 800d9be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9c0:	461a      	mov	r2, r3
 800d9c2:	68b9      	ldr	r1, [r7, #8]
 800d9c4:	f001 ff98 	bl	800f8f8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800d9c8:	68fb      	ldr	r3, [r7, #12]
 800d9ca:	68da      	ldr	r2, [r3, #12]
 800d9cc:	68fb      	ldr	r3, [r7, #12]
 800d9ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9d0:	425b      	negs	r3, r3
 800d9d2:	441a      	add	r2, r3
 800d9d4:	68fb      	ldr	r3, [r7, #12]
 800d9d6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800d9d8:	68fb      	ldr	r3, [r7, #12]
 800d9da:	68da      	ldr	r2, [r3, #12]
 800d9dc:	68fb      	ldr	r3, [r7, #12]
 800d9de:	681b      	ldr	r3, [r3, #0]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d207      	bcs.n	800d9f4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800d9e4:	68fb      	ldr	r3, [r7, #12]
 800d9e6:	689a      	ldr	r2, [r3, #8]
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d9ec:	425b      	negs	r3, r3
 800d9ee:	441a      	add	r2, r3
 800d9f0:	68fb      	ldr	r3, [r7, #12]
 800d9f2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800d9f4:	687b      	ldr	r3, [r7, #4]
 800d9f6:	2b02      	cmp	r3, #2
 800d9f8:	d105      	bne.n	800da06 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800d9fa:	693b      	ldr	r3, [r7, #16]
 800d9fc:	2b00      	cmp	r3, #0
 800d9fe:	d002      	beq.n	800da06 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800da00:	693b      	ldr	r3, [r7, #16]
 800da02:	3b01      	subs	r3, #1
 800da04:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800da06:	693b      	ldr	r3, [r7, #16]
 800da08:	1c5a      	adds	r2, r3, #1
 800da0a:	68fb      	ldr	r3, [r7, #12]
 800da0c:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800da0e:	697b      	ldr	r3, [r7, #20]
}
 800da10:	4618      	mov	r0, r3
 800da12:	3718      	adds	r7, #24
 800da14:	46bd      	mov	sp, r7
 800da16:	bd80      	pop	{r7, pc}

0800da18 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800da18:	b580      	push	{r7, lr}
 800da1a:	b082      	sub	sp, #8
 800da1c:	af00      	add	r7, sp, #0
 800da1e:	6078      	str	r0, [r7, #4]
 800da20:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800da22:	687b      	ldr	r3, [r7, #4]
 800da24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da26:	2b00      	cmp	r3, #0
 800da28:	d018      	beq.n	800da5c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800da2a:	687b      	ldr	r3, [r7, #4]
 800da2c:	68da      	ldr	r2, [r3, #12]
 800da2e:	687b      	ldr	r3, [r7, #4]
 800da30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da32:	441a      	add	r2, r3
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800da38:	687b      	ldr	r3, [r7, #4]
 800da3a:	68da      	ldr	r2, [r3, #12]
 800da3c:	687b      	ldr	r3, [r7, #4]
 800da3e:	689b      	ldr	r3, [r3, #8]
 800da40:	429a      	cmp	r2, r3
 800da42:	d303      	bcc.n	800da4c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800da44:	687b      	ldr	r3, [r7, #4]
 800da46:	681a      	ldr	r2, [r3, #0]
 800da48:	687b      	ldr	r3, [r7, #4]
 800da4a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800da4c:	687b      	ldr	r3, [r7, #4]
 800da4e:	68d9      	ldr	r1, [r3, #12]
 800da50:	687b      	ldr	r3, [r7, #4]
 800da52:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800da54:	461a      	mov	r2, r3
 800da56:	6838      	ldr	r0, [r7, #0]
 800da58:	f001 ff4e 	bl	800f8f8 <memcpy>
	}
}
 800da5c:	bf00      	nop
 800da5e:	3708      	adds	r7, #8
 800da60:	46bd      	mov	sp, r7
 800da62:	bd80      	pop	{r7, pc}

0800da64 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800da64:	b580      	push	{r7, lr}
 800da66:	b084      	sub	sp, #16
 800da68:	af00      	add	r7, sp, #0
 800da6a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800da6c:	f001 fc26 	bl	800f2bc <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800da70:	687b      	ldr	r3, [r7, #4]
 800da72:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800da76:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800da78:	e011      	b.n	800da9e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800da7a:	687b      	ldr	r3, [r7, #4]
 800da7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da7e:	2b00      	cmp	r3, #0
 800da80:	d012      	beq.n	800daa8 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800da82:	687b      	ldr	r3, [r7, #4]
 800da84:	3324      	adds	r3, #36	; 0x24
 800da86:	4618      	mov	r0, r3
 800da88:	f000 fd1a 	bl	800e4c0 <xTaskRemoveFromEventList>
 800da8c:	4603      	mov	r3, r0
 800da8e:	2b00      	cmp	r3, #0
 800da90:	d001      	beq.n	800da96 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800da92:	f000 fded 	bl	800e670 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800da96:	7bfb      	ldrb	r3, [r7, #15]
 800da98:	3b01      	subs	r3, #1
 800da9a:	b2db      	uxtb	r3, r3
 800da9c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800da9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800daa2:	2b00      	cmp	r3, #0
 800daa4:	dce9      	bgt.n	800da7a <prvUnlockQueue+0x16>
 800daa6:	e000      	b.n	800daaa <prvUnlockQueue+0x46>
					break;
 800daa8:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800daaa:	687b      	ldr	r3, [r7, #4]
 800daac:	22ff      	movs	r2, #255	; 0xff
 800daae:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800dab2:	f001 fc31 	bl	800f318 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800dab6:	f001 fc01 	bl	800f2bc <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800daba:	687b      	ldr	r3, [r7, #4]
 800dabc:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dac0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dac2:	e011      	b.n	800dae8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800dac4:	687b      	ldr	r3, [r7, #4]
 800dac6:	691b      	ldr	r3, [r3, #16]
 800dac8:	2b00      	cmp	r3, #0
 800daca:	d012      	beq.n	800daf2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800dacc:	687b      	ldr	r3, [r7, #4]
 800dace:	3310      	adds	r3, #16
 800dad0:	4618      	mov	r0, r3
 800dad2:	f000 fcf5 	bl	800e4c0 <xTaskRemoveFromEventList>
 800dad6:	4603      	mov	r3, r0
 800dad8:	2b00      	cmp	r3, #0
 800dada:	d001      	beq.n	800dae0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800dadc:	f000 fdc8 	bl	800e670 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800dae0:	7bbb      	ldrb	r3, [r7, #14]
 800dae2:	3b01      	subs	r3, #1
 800dae4:	b2db      	uxtb	r3, r3
 800dae6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800dae8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800daec:	2b00      	cmp	r3, #0
 800daee:	dce9      	bgt.n	800dac4 <prvUnlockQueue+0x60>
 800daf0:	e000      	b.n	800daf4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800daf2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800daf4:	687b      	ldr	r3, [r7, #4]
 800daf6:	22ff      	movs	r2, #255	; 0xff
 800daf8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800dafc:	f001 fc0c 	bl	800f318 <vPortExitCritical>
}
 800db00:	bf00      	nop
 800db02:	3710      	adds	r7, #16
 800db04:	46bd      	mov	sp, r7
 800db06:	bd80      	pop	{r7, pc}

0800db08 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800db08:	b580      	push	{r7, lr}
 800db0a:	b084      	sub	sp, #16
 800db0c:	af00      	add	r7, sp, #0
 800db0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800db10:	f001 fbd4 	bl	800f2bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db18:	2b00      	cmp	r3, #0
 800db1a:	d102      	bne.n	800db22 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800db1c:	2301      	movs	r3, #1
 800db1e:	60fb      	str	r3, [r7, #12]
 800db20:	e001      	b.n	800db26 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800db22:	2300      	movs	r3, #0
 800db24:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800db26:	f001 fbf7 	bl	800f318 <vPortExitCritical>

	return xReturn;
 800db2a:	68fb      	ldr	r3, [r7, #12]
}
 800db2c:	4618      	mov	r0, r3
 800db2e:	3710      	adds	r7, #16
 800db30:	46bd      	mov	sp, r7
 800db32:	bd80      	pop	{r7, pc}

0800db34 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800db34:	b580      	push	{r7, lr}
 800db36:	b084      	sub	sp, #16
 800db38:	af00      	add	r7, sp, #0
 800db3a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800db3c:	f001 fbbe 	bl	800f2bc <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800db40:	687b      	ldr	r3, [r7, #4]
 800db42:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800db44:	687b      	ldr	r3, [r7, #4]
 800db46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800db48:	429a      	cmp	r2, r3
 800db4a:	d102      	bne.n	800db52 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800db4c:	2301      	movs	r3, #1
 800db4e:	60fb      	str	r3, [r7, #12]
 800db50:	e001      	b.n	800db56 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800db52:	2300      	movs	r3, #0
 800db54:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800db56:	f001 fbdf 	bl	800f318 <vPortExitCritical>

	return xReturn;
 800db5a:	68fb      	ldr	r3, [r7, #12]
}
 800db5c:	4618      	mov	r0, r3
 800db5e:	3710      	adds	r7, #16
 800db60:	46bd      	mov	sp, r7
 800db62:	bd80      	pop	{r7, pc}

0800db64 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 800db64:	b480      	push	{r7}
 800db66:	b085      	sub	sp, #20
 800db68:	af00      	add	r7, sp, #0
 800db6a:	6078      	str	r0, [r7, #4]
 800db6c:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800db6e:	2300      	movs	r3, #0
 800db70:	60fb      	str	r3, [r7, #12]
 800db72:	e014      	b.n	800db9e <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 800db74:	4a0e      	ldr	r2, [pc, #56]	; (800dbb0 <vQueueAddToRegistry+0x4c>)
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 800db7c:	2b00      	cmp	r3, #0
 800db7e:	d10b      	bne.n	800db98 <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 800db80:	490b      	ldr	r1, [pc, #44]	; (800dbb0 <vQueueAddToRegistry+0x4c>)
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	683a      	ldr	r2, [r7, #0]
 800db86:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800db8a:	4a09      	ldr	r2, [pc, #36]	; (800dbb0 <vQueueAddToRegistry+0x4c>)
 800db8c:	68fb      	ldr	r3, [r7, #12]
 800db8e:	00db      	lsls	r3, r3, #3
 800db90:	4413      	add	r3, r2
 800db92:	687a      	ldr	r2, [r7, #4]
 800db94:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800db96:	e005      	b.n	800dba4 <vQueueAddToRegistry+0x40>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800db98:	68fb      	ldr	r3, [r7, #12]
 800db9a:	3301      	adds	r3, #1
 800db9c:	60fb      	str	r3, [r7, #12]
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	2b07      	cmp	r3, #7
 800dba2:	d9e7      	bls.n	800db74 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 800dba4:	bf00      	nop
 800dba6:	3714      	adds	r7, #20
 800dba8:	46bd      	mov	sp, r7
 800dbaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dbae:	4770      	bx	lr
 800dbb0:	20005748 	.word	0x20005748

0800dbb4 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800dbb4:	b580      	push	{r7, lr}
 800dbb6:	b086      	sub	sp, #24
 800dbb8:	af00      	add	r7, sp, #0
 800dbba:	60f8      	str	r0, [r7, #12]
 800dbbc:	60b9      	str	r1, [r7, #8]
 800dbbe:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 800dbc0:	68fb      	ldr	r3, [r7, #12]
 800dbc2:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 800dbc4:	f001 fb7a 	bl	800f2bc <vPortEnterCritical>
 800dbc8:	697b      	ldr	r3, [r7, #20]
 800dbca:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800dbce:	b25b      	sxtb	r3, r3
 800dbd0:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dbd4:	d103      	bne.n	800dbde <vQueueWaitForMessageRestricted+0x2a>
 800dbd6:	697b      	ldr	r3, [r7, #20]
 800dbd8:	2200      	movs	r2, #0
 800dbda:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800dbde:	697b      	ldr	r3, [r7, #20]
 800dbe0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800dbe4:	b25b      	sxtb	r3, r3
 800dbe6:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800dbea:	d103      	bne.n	800dbf4 <vQueueWaitForMessageRestricted+0x40>
 800dbec:	697b      	ldr	r3, [r7, #20]
 800dbee:	2200      	movs	r2, #0
 800dbf0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800dbf4:	f001 fb90 	bl	800f318 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 800dbf8:	697b      	ldr	r3, [r7, #20]
 800dbfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbfc:	2b00      	cmp	r3, #0
 800dbfe:	d106      	bne.n	800dc0e <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800dc00:	697b      	ldr	r3, [r7, #20]
 800dc02:	3324      	adds	r3, #36	; 0x24
 800dc04:	687a      	ldr	r2, [r7, #4]
 800dc06:	68b9      	ldr	r1, [r7, #8]
 800dc08:	4618      	mov	r0, r3
 800dc0a:	f000 fc2f 	bl	800e46c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800dc0e:	6978      	ldr	r0, [r7, #20]
 800dc10:	f7ff ff28 	bl	800da64 <prvUnlockQueue>
	}
 800dc14:	bf00      	nop
 800dc16:	3718      	adds	r7, #24
 800dc18:	46bd      	mov	sp, r7
 800dc1a:	bd80      	pop	{r7, pc}

0800dc1c <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b08e      	sub	sp, #56	; 0x38
 800dc20:	af04      	add	r7, sp, #16
 800dc22:	60f8      	str	r0, [r7, #12]
 800dc24:	60b9      	str	r1, [r7, #8]
 800dc26:	607a      	str	r2, [r7, #4]
 800dc28:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800dc2a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc2c:	2b00      	cmp	r3, #0
 800dc2e:	d109      	bne.n	800dc44 <xTaskCreateStatic+0x28>
 800dc30:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc34:	f383 8811 	msr	BASEPRI, r3
 800dc38:	f3bf 8f6f 	isb	sy
 800dc3c:	f3bf 8f4f 	dsb	sy
 800dc40:	623b      	str	r3, [r7, #32]
 800dc42:	e7fe      	b.n	800dc42 <xTaskCreateStatic+0x26>
		configASSERT( pxTaskBuffer != NULL );
 800dc44:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc46:	2b00      	cmp	r3, #0
 800dc48:	d109      	bne.n	800dc5e <xTaskCreateStatic+0x42>
 800dc4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc4e:	f383 8811 	msr	BASEPRI, r3
 800dc52:	f3bf 8f6f 	isb	sy
 800dc56:	f3bf 8f4f 	dsb	sy
 800dc5a:	61fb      	str	r3, [r7, #28]
 800dc5c:	e7fe      	b.n	800dc5c <xTaskCreateStatic+0x40>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800dc5e:	235c      	movs	r3, #92	; 0x5c
 800dc60:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800dc62:	693b      	ldr	r3, [r7, #16]
 800dc64:	2b5c      	cmp	r3, #92	; 0x5c
 800dc66:	d009      	beq.n	800dc7c <xTaskCreateStatic+0x60>
 800dc68:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dc6c:	f383 8811 	msr	BASEPRI, r3
 800dc70:	f3bf 8f6f 	isb	sy
 800dc74:	f3bf 8f4f 	dsb	sy
 800dc78:	61bb      	str	r3, [r7, #24]
 800dc7a:	e7fe      	b.n	800dc7a <xTaskCreateStatic+0x5e>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800dc7c:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800dc7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d01e      	beq.n	800dcc2 <xTaskCreateStatic+0xa6>
 800dc84:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc86:	2b00      	cmp	r3, #0
 800dc88:	d01b      	beq.n	800dcc2 <xTaskCreateStatic+0xa6>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800dc8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc8c:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800dc8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc90:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800dc92:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800dc94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc96:	2202      	movs	r2, #2
 800dc98:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800dc9c:	2300      	movs	r3, #0
 800dc9e:	9303      	str	r3, [sp, #12]
 800dca0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dca2:	9302      	str	r3, [sp, #8]
 800dca4:	f107 0314 	add.w	r3, r7, #20
 800dca8:	9301      	str	r3, [sp, #4]
 800dcaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dcac:	9300      	str	r3, [sp, #0]
 800dcae:	683b      	ldr	r3, [r7, #0]
 800dcb0:	687a      	ldr	r2, [r7, #4]
 800dcb2:	68b9      	ldr	r1, [r7, #8]
 800dcb4:	68f8      	ldr	r0, [r7, #12]
 800dcb6:	f000 f850 	bl	800dd5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dcba:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800dcbc:	f000 f8dc 	bl	800de78 <prvAddNewTaskToReadyList>
 800dcc0:	e001      	b.n	800dcc6 <xTaskCreateStatic+0xaa>
		}
		else
		{
			xReturn = NULL;
 800dcc2:	2300      	movs	r3, #0
 800dcc4:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800dcc6:	697b      	ldr	r3, [r7, #20]
	}
 800dcc8:	4618      	mov	r0, r3
 800dcca:	3728      	adds	r7, #40	; 0x28
 800dccc:	46bd      	mov	sp, r7
 800dcce:	bd80      	pop	{r7, pc}

0800dcd0 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800dcd0:	b580      	push	{r7, lr}
 800dcd2:	b08c      	sub	sp, #48	; 0x30
 800dcd4:	af04      	add	r7, sp, #16
 800dcd6:	60f8      	str	r0, [r7, #12]
 800dcd8:	60b9      	str	r1, [r7, #8]
 800dcda:	603b      	str	r3, [r7, #0]
 800dcdc:	4613      	mov	r3, r2
 800dcde:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 800dce0:	88fb      	ldrh	r3, [r7, #6]
 800dce2:	009b      	lsls	r3, r3, #2
 800dce4:	4618      	mov	r0, r3
 800dce6:	f001 fc03 	bl	800f4f0 <pvPortMalloc>
 800dcea:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 800dcec:	697b      	ldr	r3, [r7, #20]
 800dcee:	2b00      	cmp	r3, #0
 800dcf0:	d00e      	beq.n	800dd10 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 800dcf2:	205c      	movs	r0, #92	; 0x5c
 800dcf4:	f001 fbfc 	bl	800f4f0 <pvPortMalloc>
 800dcf8:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800dcfa:	69fb      	ldr	r3, [r7, #28]
 800dcfc:	2b00      	cmp	r3, #0
 800dcfe:	d003      	beq.n	800dd08 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 800dd00:	69fb      	ldr	r3, [r7, #28]
 800dd02:	697a      	ldr	r2, [r7, #20]
 800dd04:	631a      	str	r2, [r3, #48]	; 0x30
 800dd06:	e005      	b.n	800dd14 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800dd08:	6978      	ldr	r0, [r7, #20]
 800dd0a:	f001 fcb3 	bl	800f674 <vPortFree>
 800dd0e:	e001      	b.n	800dd14 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 800dd10:	2300      	movs	r3, #0
 800dd12:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 800dd14:	69fb      	ldr	r3, [r7, #28]
 800dd16:	2b00      	cmp	r3, #0
 800dd18:	d017      	beq.n	800dd4a <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800dd1a:	69fb      	ldr	r3, [r7, #28]
 800dd1c:	2200      	movs	r2, #0
 800dd1e:	f883 2059 	strb.w	r2, [r3, #89]	; 0x59
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 800dd22:	88fa      	ldrh	r2, [r7, #6]
 800dd24:	2300      	movs	r3, #0
 800dd26:	9303      	str	r3, [sp, #12]
 800dd28:	69fb      	ldr	r3, [r7, #28]
 800dd2a:	9302      	str	r3, [sp, #8]
 800dd2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800dd2e:	9301      	str	r3, [sp, #4]
 800dd30:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dd32:	9300      	str	r3, [sp, #0]
 800dd34:	683b      	ldr	r3, [r7, #0]
 800dd36:	68b9      	ldr	r1, [r7, #8]
 800dd38:	68f8      	ldr	r0, [r7, #12]
 800dd3a:	f000 f80e 	bl	800dd5a <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800dd3e:	69f8      	ldr	r0, [r7, #28]
 800dd40:	f000 f89a 	bl	800de78 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 800dd44:	2301      	movs	r3, #1
 800dd46:	61bb      	str	r3, [r7, #24]
 800dd48:	e002      	b.n	800dd50 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800dd4a:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800dd4e:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 800dd50:	69bb      	ldr	r3, [r7, #24]
	}
 800dd52:	4618      	mov	r0, r3
 800dd54:	3720      	adds	r7, #32
 800dd56:	46bd      	mov	sp, r7
 800dd58:	bd80      	pop	{r7, pc}

0800dd5a <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800dd5a:	b580      	push	{r7, lr}
 800dd5c:	b088      	sub	sp, #32
 800dd5e:	af00      	add	r7, sp, #0
 800dd60:	60f8      	str	r0, [r7, #12]
 800dd62:	60b9      	str	r1, [r7, #8]
 800dd64:	607a      	str	r2, [r7, #4]
 800dd66:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800dd68:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd6a:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	009b      	lsls	r3, r3, #2
 800dd70:	461a      	mov	r2, r3
 800dd72:	21a5      	movs	r1, #165	; 0xa5
 800dd74:	f001 fdcb 	bl	800f90e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800dd78:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800dd7a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 800dd82:	3b01      	subs	r3, #1
 800dd84:	009b      	lsls	r3, r3, #2
 800dd86:	4413      	add	r3, r2
 800dd88:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800dd8a:	69bb      	ldr	r3, [r7, #24]
 800dd8c:	f023 0307 	bic.w	r3, r3, #7
 800dd90:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 800dd92:	69bb      	ldr	r3, [r7, #24]
 800dd94:	f003 0307 	and.w	r3, r3, #7
 800dd98:	2b00      	cmp	r3, #0
 800dd9a:	d009      	beq.n	800ddb0 <prvInitialiseNewTask+0x56>
 800dd9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800dda0:	f383 8811 	msr	BASEPRI, r3
 800dda4:	f3bf 8f6f 	isb	sy
 800dda8:	f3bf 8f4f 	dsb	sy
 800ddac:	617b      	str	r3, [r7, #20]
 800ddae:	e7fe      	b.n	800ddae <prvInitialiseNewTask+0x54>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 800ddb0:	68bb      	ldr	r3, [r7, #8]
 800ddb2:	2b00      	cmp	r3, #0
 800ddb4:	d01f      	beq.n	800ddf6 <prvInitialiseNewTask+0x9c>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800ddb6:	2300      	movs	r3, #0
 800ddb8:	61fb      	str	r3, [r7, #28]
 800ddba:	e012      	b.n	800dde2 <prvInitialiseNewTask+0x88>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 800ddbc:	68ba      	ldr	r2, [r7, #8]
 800ddbe:	69fb      	ldr	r3, [r7, #28]
 800ddc0:	4413      	add	r3, r2
 800ddc2:	7819      	ldrb	r1, [r3, #0]
 800ddc4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ddc6:	69fb      	ldr	r3, [r7, #28]
 800ddc8:	4413      	add	r3, r2
 800ddca:	3334      	adds	r3, #52	; 0x34
 800ddcc:	460a      	mov	r2, r1
 800ddce:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 800ddd0:	68ba      	ldr	r2, [r7, #8]
 800ddd2:	69fb      	ldr	r3, [r7, #28]
 800ddd4:	4413      	add	r3, r2
 800ddd6:	781b      	ldrb	r3, [r3, #0]
 800ddd8:	2b00      	cmp	r3, #0
 800ddda:	d006      	beq.n	800ddea <prvInitialiseNewTask+0x90>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 800dddc:	69fb      	ldr	r3, [r7, #28]
 800ddde:	3301      	adds	r3, #1
 800dde0:	61fb      	str	r3, [r7, #28]
 800dde2:	69fb      	ldr	r3, [r7, #28]
 800dde4:	2b0f      	cmp	r3, #15
 800dde6:	d9e9      	bls.n	800ddbc <prvInitialiseNewTask+0x62>
 800dde8:	e000      	b.n	800ddec <prvInitialiseNewTask+0x92>
			{
				break;
 800ddea:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 800ddec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddee:	2200      	movs	r2, #0
 800ddf0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800ddf4:	e003      	b.n	800ddfe <prvInitialiseNewTask+0xa4>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800ddf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ddf8:	2200      	movs	r2, #0
 800ddfa:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 800ddfe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de00:	2b37      	cmp	r3, #55	; 0x37
 800de02:	d901      	bls.n	800de08 <prvInitialiseNewTask+0xae>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 800de04:	2337      	movs	r3, #55	; 0x37
 800de06:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800de08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de0a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de0c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 800de0e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de10:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800de12:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 800de14:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de16:	2200      	movs	r2, #0
 800de18:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800de1a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de1c:	3304      	adds	r3, #4
 800de1e:	4618      	mov	r0, r3
 800de20:	f7ff f994 	bl	800d14c <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 800de24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de26:	3318      	adds	r3, #24
 800de28:	4618      	mov	r0, r3
 800de2a:	f7ff f98f 	bl	800d14c <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 800de2e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de30:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de32:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800de34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800de36:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800de3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de3c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 800de3e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de40:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de42:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 800de44:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de46:	2200      	movs	r2, #0
 800de48:	655a      	str	r2, [r3, #84]	; 0x54
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 800de4a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de4c:	2200      	movs	r2, #0
 800de4e:	f883 2058 	strb.w	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 800de52:	683a      	ldr	r2, [r7, #0]
 800de54:	68f9      	ldr	r1, [r7, #12]
 800de56:	69b8      	ldr	r0, [r7, #24]
 800de58:	f001 f90c 	bl	800f074 <pxPortInitialiseStack>
 800de5c:	4602      	mov	r2, r0
 800de5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800de60:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 800de62:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de64:	2b00      	cmp	r3, #0
 800de66:	d002      	beq.n	800de6e <prvInitialiseNewTask+0x114>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800de68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800de6a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800de6c:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800de6e:	bf00      	nop
 800de70:	3720      	adds	r7, #32
 800de72:	46bd      	mov	sp, r7
 800de74:	bd80      	pop	{r7, pc}
	...

0800de78 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 800de78:	b580      	push	{r7, lr}
 800de7a:	b082      	sub	sp, #8
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 800de80:	f001 fa1c 	bl	800f2bc <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 800de84:	4b2d      	ldr	r3, [pc, #180]	; (800df3c <prvAddNewTaskToReadyList+0xc4>)
 800de86:	681b      	ldr	r3, [r3, #0]
 800de88:	3301      	adds	r3, #1
 800de8a:	4a2c      	ldr	r2, [pc, #176]	; (800df3c <prvAddNewTaskToReadyList+0xc4>)
 800de8c:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 800de8e:	4b2c      	ldr	r3, [pc, #176]	; (800df40 <prvAddNewTaskToReadyList+0xc8>)
 800de90:	681b      	ldr	r3, [r3, #0]
 800de92:	2b00      	cmp	r3, #0
 800de94:	d109      	bne.n	800deaa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 800de96:	4a2a      	ldr	r2, [pc, #168]	; (800df40 <prvAddNewTaskToReadyList+0xc8>)
 800de98:	687b      	ldr	r3, [r7, #4]
 800de9a:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 800de9c:	4b27      	ldr	r3, [pc, #156]	; (800df3c <prvAddNewTaskToReadyList+0xc4>)
 800de9e:	681b      	ldr	r3, [r3, #0]
 800dea0:	2b01      	cmp	r3, #1
 800dea2:	d110      	bne.n	800dec6 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 800dea4:	f000 fc08 	bl	800e6b8 <prvInitialiseTaskLists>
 800dea8:	e00d      	b.n	800dec6 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 800deaa:	4b26      	ldr	r3, [pc, #152]	; (800df44 <prvAddNewTaskToReadyList+0xcc>)
 800deac:	681b      	ldr	r3, [r3, #0]
 800deae:	2b00      	cmp	r3, #0
 800deb0:	d109      	bne.n	800dec6 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 800deb2:	4b23      	ldr	r3, [pc, #140]	; (800df40 <prvAddNewTaskToReadyList+0xc8>)
 800deb4:	681b      	ldr	r3, [r3, #0]
 800deb6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800deb8:	687b      	ldr	r3, [r7, #4]
 800deba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800debc:	429a      	cmp	r2, r3
 800debe:	d802      	bhi.n	800dec6 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 800dec0:	4a1f      	ldr	r2, [pc, #124]	; (800df40 <prvAddNewTaskToReadyList+0xc8>)
 800dec2:	687b      	ldr	r3, [r7, #4]
 800dec4:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 800dec6:	4b20      	ldr	r3, [pc, #128]	; (800df48 <prvAddNewTaskToReadyList+0xd0>)
 800dec8:	681b      	ldr	r3, [r3, #0]
 800deca:	3301      	adds	r3, #1
 800decc:	4a1e      	ldr	r2, [pc, #120]	; (800df48 <prvAddNewTaskToReadyList+0xd0>)
 800dece:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 800ded0:	4b1d      	ldr	r3, [pc, #116]	; (800df48 <prvAddNewTaskToReadyList+0xd0>)
 800ded2:	681a      	ldr	r2, [r3, #0]
 800ded4:	687b      	ldr	r3, [r7, #4]
 800ded6:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 800ded8:	687b      	ldr	r3, [r7, #4]
 800deda:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800dedc:	4b1b      	ldr	r3, [pc, #108]	; (800df4c <prvAddNewTaskToReadyList+0xd4>)
 800dede:	681b      	ldr	r3, [r3, #0]
 800dee0:	429a      	cmp	r2, r3
 800dee2:	d903      	bls.n	800deec <prvAddNewTaskToReadyList+0x74>
 800dee4:	687b      	ldr	r3, [r7, #4]
 800dee6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dee8:	4a18      	ldr	r2, [pc, #96]	; (800df4c <prvAddNewTaskToReadyList+0xd4>)
 800deea:	6013      	str	r3, [r2, #0]
 800deec:	687b      	ldr	r3, [r7, #4]
 800deee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800def0:	4613      	mov	r3, r2
 800def2:	009b      	lsls	r3, r3, #2
 800def4:	4413      	add	r3, r2
 800def6:	009b      	lsls	r3, r3, #2
 800def8:	4a15      	ldr	r2, [pc, #84]	; (800df50 <prvAddNewTaskToReadyList+0xd8>)
 800defa:	441a      	add	r2, r3
 800defc:	687b      	ldr	r3, [r7, #4]
 800defe:	3304      	adds	r3, #4
 800df00:	4619      	mov	r1, r3
 800df02:	4610      	mov	r0, r2
 800df04:	f7ff f92f 	bl	800d166 <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 800df08:	f001 fa06 	bl	800f318 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800df0c:	4b0d      	ldr	r3, [pc, #52]	; (800df44 <prvAddNewTaskToReadyList+0xcc>)
 800df0e:	681b      	ldr	r3, [r3, #0]
 800df10:	2b00      	cmp	r3, #0
 800df12:	d00e      	beq.n	800df32 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 800df14:	4b0a      	ldr	r3, [pc, #40]	; (800df40 <prvAddNewTaskToReadyList+0xc8>)
 800df16:	681b      	ldr	r3, [r3, #0]
 800df18:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800df1a:	687b      	ldr	r3, [r7, #4]
 800df1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800df1e:	429a      	cmp	r2, r3
 800df20:	d207      	bcs.n	800df32 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 800df22:	4b0c      	ldr	r3, [pc, #48]	; (800df54 <prvAddNewTaskToReadyList+0xdc>)
 800df24:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800df28:	601a      	str	r2, [r3, #0]
 800df2a:	f3bf 8f4f 	dsb	sy
 800df2e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800df32:	bf00      	nop
 800df34:	3708      	adds	r7, #8
 800df36:	46bd      	mov	sp, r7
 800df38:	bd80      	pop	{r7, pc}
 800df3a:	bf00      	nop
 800df3c:	20001610 	.word	0x20001610
 800df40:	2000113c 	.word	0x2000113c
 800df44:	2000161c 	.word	0x2000161c
 800df48:	2000162c 	.word	0x2000162c
 800df4c:	20001618 	.word	0x20001618
 800df50:	20001140 	.word	0x20001140
 800df54:	e000ed04 	.word	0xe000ed04

0800df58 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 800df58:	b580      	push	{r7, lr}
 800df5a:	b084      	sub	sp, #16
 800df5c:	af00      	add	r7, sp, #0
 800df5e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 800df60:	2300      	movs	r3, #0
 800df62:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 800df64:	687b      	ldr	r3, [r7, #4]
 800df66:	2b00      	cmp	r3, #0
 800df68:	d016      	beq.n	800df98 <vTaskDelay+0x40>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 800df6a:	4b13      	ldr	r3, [pc, #76]	; (800dfb8 <vTaskDelay+0x60>)
 800df6c:	681b      	ldr	r3, [r3, #0]
 800df6e:	2b00      	cmp	r3, #0
 800df70:	d009      	beq.n	800df86 <vTaskDelay+0x2e>
 800df72:	f04f 0350 	mov.w	r3, #80	; 0x50
 800df76:	f383 8811 	msr	BASEPRI, r3
 800df7a:	f3bf 8f6f 	isb	sy
 800df7e:	f3bf 8f4f 	dsb	sy
 800df82:	60bb      	str	r3, [r7, #8]
 800df84:	e7fe      	b.n	800df84 <vTaskDelay+0x2c>
			vTaskSuspendAll();
 800df86:	f000 f87f 	bl	800e088 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 800df8a:	2100      	movs	r1, #0
 800df8c:	6878      	ldr	r0, [r7, #4]
 800df8e:	f000 fcd7 	bl	800e940 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 800df92:	f000 f887 	bl	800e0a4 <xTaskResumeAll>
 800df96:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 800df98:	68fb      	ldr	r3, [r7, #12]
 800df9a:	2b00      	cmp	r3, #0
 800df9c:	d107      	bne.n	800dfae <vTaskDelay+0x56>
		{
			portYIELD_WITHIN_API();
 800df9e:	4b07      	ldr	r3, [pc, #28]	; (800dfbc <vTaskDelay+0x64>)
 800dfa0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800dfa4:	601a      	str	r2, [r3, #0]
 800dfa6:	f3bf 8f4f 	dsb	sy
 800dfaa:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800dfae:	bf00      	nop
 800dfb0:	3710      	adds	r7, #16
 800dfb2:	46bd      	mov	sp, r7
 800dfb4:	bd80      	pop	{r7, pc}
 800dfb6:	bf00      	nop
 800dfb8:	20001638 	.word	0x20001638
 800dfbc:	e000ed04 	.word	0xe000ed04

0800dfc0 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 800dfc0:	b580      	push	{r7, lr}
 800dfc2:	b08a      	sub	sp, #40	; 0x28
 800dfc4:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 800dfc6:	2300      	movs	r3, #0
 800dfc8:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 800dfca:	2300      	movs	r3, #0
 800dfcc:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 800dfce:	463a      	mov	r2, r7
 800dfd0:	1d39      	adds	r1, r7, #4
 800dfd2:	f107 0308 	add.w	r3, r7, #8
 800dfd6:	4618      	mov	r0, r3
 800dfd8:	f7ff f864 	bl	800d0a4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 800dfdc:	6839      	ldr	r1, [r7, #0]
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	68ba      	ldr	r2, [r7, #8]
 800dfe2:	9202      	str	r2, [sp, #8]
 800dfe4:	9301      	str	r3, [sp, #4]
 800dfe6:	2300      	movs	r3, #0
 800dfe8:	9300      	str	r3, [sp, #0]
 800dfea:	2300      	movs	r3, #0
 800dfec:	460a      	mov	r2, r1
 800dfee:	4920      	ldr	r1, [pc, #128]	; (800e070 <vTaskStartScheduler+0xb0>)
 800dff0:	4820      	ldr	r0, [pc, #128]	; (800e074 <vTaskStartScheduler+0xb4>)
 800dff2:	f7ff fe13 	bl	800dc1c <xTaskCreateStatic>
 800dff6:	4602      	mov	r2, r0
 800dff8:	4b1f      	ldr	r3, [pc, #124]	; (800e078 <vTaskStartScheduler+0xb8>)
 800dffa:	601a      	str	r2, [r3, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 800dffc:	4b1e      	ldr	r3, [pc, #120]	; (800e078 <vTaskStartScheduler+0xb8>)
 800dffe:	681b      	ldr	r3, [r3, #0]
 800e000:	2b00      	cmp	r3, #0
 800e002:	d002      	beq.n	800e00a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 800e004:	2301      	movs	r3, #1
 800e006:	617b      	str	r3, [r7, #20]
 800e008:	e001      	b.n	800e00e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 800e00a:	2300      	movs	r3, #0
 800e00c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 800e00e:	697b      	ldr	r3, [r7, #20]
 800e010:	2b01      	cmp	r3, #1
 800e012:	d102      	bne.n	800e01a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 800e014:	f000 fce8 	bl	800e9e8 <xTimerCreateTimerTask>
 800e018:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 800e01a:	697b      	ldr	r3, [r7, #20]
 800e01c:	2b01      	cmp	r3, #1
 800e01e:	d115      	bne.n	800e04c <vTaskStartScheduler+0x8c>
 800e020:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e024:	f383 8811 	msr	BASEPRI, r3
 800e028:	f3bf 8f6f 	isb	sy
 800e02c:	f3bf 8f4f 	dsb	sy
 800e030:	613b      	str	r3, [r7, #16]
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 800e032:	4b12      	ldr	r3, [pc, #72]	; (800e07c <vTaskStartScheduler+0xbc>)
 800e034:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e038:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 800e03a:	4b11      	ldr	r3, [pc, #68]	; (800e080 <vTaskStartScheduler+0xc0>)
 800e03c:	2201      	movs	r2, #1
 800e03e:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 800e040:	4b10      	ldr	r3, [pc, #64]	; (800e084 <vTaskStartScheduler+0xc4>)
 800e042:	2200      	movs	r2, #0
 800e044:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 800e046:	f001 f89b 	bl	800f180 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 800e04a:	e00d      	b.n	800e068 <vTaskStartScheduler+0xa8>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 800e04c:	697b      	ldr	r3, [r7, #20]
 800e04e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e052:	d109      	bne.n	800e068 <vTaskStartScheduler+0xa8>
 800e054:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e058:	f383 8811 	msr	BASEPRI, r3
 800e05c:	f3bf 8f6f 	isb	sy
 800e060:	f3bf 8f4f 	dsb	sy
 800e064:	60fb      	str	r3, [r7, #12]
 800e066:	e7fe      	b.n	800e066 <vTaskStartScheduler+0xa6>
}
 800e068:	bf00      	nop
 800e06a:	3718      	adds	r7, #24
 800e06c:	46bd      	mov	sp, r7
 800e06e:	bd80      	pop	{r7, pc}
 800e070:	08011ad4 	.word	0x08011ad4
 800e074:	0800e689 	.word	0x0800e689
 800e078:	20001634 	.word	0x20001634
 800e07c:	20001630 	.word	0x20001630
 800e080:	2000161c 	.word	0x2000161c
 800e084:	20001614 	.word	0x20001614

0800e088 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 800e088:	b480      	push	{r7}
 800e08a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 800e08c:	4b04      	ldr	r3, [pc, #16]	; (800e0a0 <vTaskSuspendAll+0x18>)
 800e08e:	681b      	ldr	r3, [r3, #0]
 800e090:	3301      	adds	r3, #1
 800e092:	4a03      	ldr	r2, [pc, #12]	; (800e0a0 <vTaskSuspendAll+0x18>)
 800e094:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 800e096:	bf00      	nop
 800e098:	46bd      	mov	sp, r7
 800e09a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e09e:	4770      	bx	lr
 800e0a0:	20001638 	.word	0x20001638

0800e0a4 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 800e0a4:	b580      	push	{r7, lr}
 800e0a6:	b084      	sub	sp, #16
 800e0a8:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 800e0aa:	2300      	movs	r3, #0
 800e0ac:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 800e0ae:	2300      	movs	r3, #0
 800e0b0:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 800e0b2:	4b41      	ldr	r3, [pc, #260]	; (800e1b8 <xTaskResumeAll+0x114>)
 800e0b4:	681b      	ldr	r3, [r3, #0]
 800e0b6:	2b00      	cmp	r3, #0
 800e0b8:	d109      	bne.n	800e0ce <xTaskResumeAll+0x2a>
 800e0ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e0be:	f383 8811 	msr	BASEPRI, r3
 800e0c2:	f3bf 8f6f 	isb	sy
 800e0c6:	f3bf 8f4f 	dsb	sy
 800e0ca:	603b      	str	r3, [r7, #0]
 800e0cc:	e7fe      	b.n	800e0cc <xTaskResumeAll+0x28>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 800e0ce:	f001 f8f5 	bl	800f2bc <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 800e0d2:	4b39      	ldr	r3, [pc, #228]	; (800e1b8 <xTaskResumeAll+0x114>)
 800e0d4:	681b      	ldr	r3, [r3, #0]
 800e0d6:	3b01      	subs	r3, #1
 800e0d8:	4a37      	ldr	r2, [pc, #220]	; (800e1b8 <xTaskResumeAll+0x114>)
 800e0da:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e0dc:	4b36      	ldr	r3, [pc, #216]	; (800e1b8 <xTaskResumeAll+0x114>)
 800e0de:	681b      	ldr	r3, [r3, #0]
 800e0e0:	2b00      	cmp	r3, #0
 800e0e2:	d162      	bne.n	800e1aa <xTaskResumeAll+0x106>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 800e0e4:	4b35      	ldr	r3, [pc, #212]	; (800e1bc <xTaskResumeAll+0x118>)
 800e0e6:	681b      	ldr	r3, [r3, #0]
 800e0e8:	2b00      	cmp	r3, #0
 800e0ea:	d05e      	beq.n	800e1aa <xTaskResumeAll+0x106>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e0ec:	e02f      	b.n	800e14e <xTaskResumeAll+0xaa>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e0ee:	4b34      	ldr	r3, [pc, #208]	; (800e1c0 <xTaskResumeAll+0x11c>)
 800e0f0:	68db      	ldr	r3, [r3, #12]
 800e0f2:	68db      	ldr	r3, [r3, #12]
 800e0f4:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e0f6:	68fb      	ldr	r3, [r7, #12]
 800e0f8:	3318      	adds	r3, #24
 800e0fa:	4618      	mov	r0, r3
 800e0fc:	f7ff f890 	bl	800d220 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e100:	68fb      	ldr	r3, [r7, #12]
 800e102:	3304      	adds	r3, #4
 800e104:	4618      	mov	r0, r3
 800e106:	f7ff f88b 	bl	800d220 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 800e10a:	68fb      	ldr	r3, [r7, #12]
 800e10c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e10e:	4b2d      	ldr	r3, [pc, #180]	; (800e1c4 <xTaskResumeAll+0x120>)
 800e110:	681b      	ldr	r3, [r3, #0]
 800e112:	429a      	cmp	r2, r3
 800e114:	d903      	bls.n	800e11e <xTaskResumeAll+0x7a>
 800e116:	68fb      	ldr	r3, [r7, #12]
 800e118:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e11a:	4a2a      	ldr	r2, [pc, #168]	; (800e1c4 <xTaskResumeAll+0x120>)
 800e11c:	6013      	str	r3, [r2, #0]
 800e11e:	68fb      	ldr	r3, [r7, #12]
 800e120:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e122:	4613      	mov	r3, r2
 800e124:	009b      	lsls	r3, r3, #2
 800e126:	4413      	add	r3, r2
 800e128:	009b      	lsls	r3, r3, #2
 800e12a:	4a27      	ldr	r2, [pc, #156]	; (800e1c8 <xTaskResumeAll+0x124>)
 800e12c:	441a      	add	r2, r3
 800e12e:	68fb      	ldr	r3, [r7, #12]
 800e130:	3304      	adds	r3, #4
 800e132:	4619      	mov	r1, r3
 800e134:	4610      	mov	r0, r2
 800e136:	f7ff f816 	bl	800d166 <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e13a:	68fb      	ldr	r3, [r7, #12]
 800e13c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e13e:	4b23      	ldr	r3, [pc, #140]	; (800e1cc <xTaskResumeAll+0x128>)
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e144:	429a      	cmp	r2, r3
 800e146:	d302      	bcc.n	800e14e <xTaskResumeAll+0xaa>
					{
						xYieldPending = pdTRUE;
 800e148:	4b21      	ldr	r3, [pc, #132]	; (800e1d0 <xTaskResumeAll+0x12c>)
 800e14a:	2201      	movs	r2, #1
 800e14c:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 800e14e:	4b1c      	ldr	r3, [pc, #112]	; (800e1c0 <xTaskResumeAll+0x11c>)
 800e150:	681b      	ldr	r3, [r3, #0]
 800e152:	2b00      	cmp	r3, #0
 800e154:	d1cb      	bne.n	800e0ee <xTaskResumeAll+0x4a>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	2b00      	cmp	r3, #0
 800e15a:	d001      	beq.n	800e160 <xTaskResumeAll+0xbc>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 800e15c:	f000 fb46 	bl	800e7ec <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 800e160:	4b1c      	ldr	r3, [pc, #112]	; (800e1d4 <xTaskResumeAll+0x130>)
 800e162:	681b      	ldr	r3, [r3, #0]
 800e164:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 800e166:	687b      	ldr	r3, [r7, #4]
 800e168:	2b00      	cmp	r3, #0
 800e16a:	d010      	beq.n	800e18e <xTaskResumeAll+0xea>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 800e16c:	f000 f846 	bl	800e1fc <xTaskIncrementTick>
 800e170:	4603      	mov	r3, r0
 800e172:	2b00      	cmp	r3, #0
 800e174:	d002      	beq.n	800e17c <xTaskResumeAll+0xd8>
							{
								xYieldPending = pdTRUE;
 800e176:	4b16      	ldr	r3, [pc, #88]	; (800e1d0 <xTaskResumeAll+0x12c>)
 800e178:	2201      	movs	r2, #1
 800e17a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 800e17c:	687b      	ldr	r3, [r7, #4]
 800e17e:	3b01      	subs	r3, #1
 800e180:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 800e182:	687b      	ldr	r3, [r7, #4]
 800e184:	2b00      	cmp	r3, #0
 800e186:	d1f1      	bne.n	800e16c <xTaskResumeAll+0xc8>

						uxPendedTicks = 0;
 800e188:	4b12      	ldr	r3, [pc, #72]	; (800e1d4 <xTaskResumeAll+0x130>)
 800e18a:	2200      	movs	r2, #0
 800e18c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 800e18e:	4b10      	ldr	r3, [pc, #64]	; (800e1d0 <xTaskResumeAll+0x12c>)
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2b00      	cmp	r3, #0
 800e194:	d009      	beq.n	800e1aa <xTaskResumeAll+0x106>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 800e196:	2301      	movs	r3, #1
 800e198:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 800e19a:	4b0f      	ldr	r3, [pc, #60]	; (800e1d8 <xTaskResumeAll+0x134>)
 800e19c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e1a0:	601a      	str	r2, [r3, #0]
 800e1a2:	f3bf 8f4f 	dsb	sy
 800e1a6:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800e1aa:	f001 f8b5 	bl	800f318 <vPortExitCritical>

	return xAlreadyYielded;
 800e1ae:	68bb      	ldr	r3, [r7, #8]
}
 800e1b0:	4618      	mov	r0, r3
 800e1b2:	3710      	adds	r7, #16
 800e1b4:	46bd      	mov	sp, r7
 800e1b6:	bd80      	pop	{r7, pc}
 800e1b8:	20001638 	.word	0x20001638
 800e1bc:	20001610 	.word	0x20001610
 800e1c0:	200015d0 	.word	0x200015d0
 800e1c4:	20001618 	.word	0x20001618
 800e1c8:	20001140 	.word	0x20001140
 800e1cc:	2000113c 	.word	0x2000113c
 800e1d0:	20001624 	.word	0x20001624
 800e1d4:	20001620 	.word	0x20001620
 800e1d8:	e000ed04 	.word	0xe000ed04

0800e1dc <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 800e1dc:	b480      	push	{r7}
 800e1de:	b083      	sub	sp, #12
 800e1e0:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 800e1e2:	4b05      	ldr	r3, [pc, #20]	; (800e1f8 <xTaskGetTickCount+0x1c>)
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 800e1e8:	687b      	ldr	r3, [r7, #4]
}
 800e1ea:	4618      	mov	r0, r3
 800e1ec:	370c      	adds	r7, #12
 800e1ee:	46bd      	mov	sp, r7
 800e1f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e1f4:	4770      	bx	lr
 800e1f6:	bf00      	nop
 800e1f8:	20001614 	.word	0x20001614

0800e1fc <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 800e1fc:	b580      	push	{r7, lr}
 800e1fe:	b086      	sub	sp, #24
 800e200:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 800e202:	2300      	movs	r3, #0
 800e204:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e206:	4b4e      	ldr	r3, [pc, #312]	; (800e340 <xTaskIncrementTick+0x144>)
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	2b00      	cmp	r3, #0
 800e20c:	f040 8088 	bne.w	800e320 <xTaskIncrementTick+0x124>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 800e210:	4b4c      	ldr	r3, [pc, #304]	; (800e344 <xTaskIncrementTick+0x148>)
 800e212:	681b      	ldr	r3, [r3, #0]
 800e214:	3301      	adds	r3, #1
 800e216:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 800e218:	4a4a      	ldr	r2, [pc, #296]	; (800e344 <xTaskIncrementTick+0x148>)
 800e21a:	693b      	ldr	r3, [r7, #16]
 800e21c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 800e21e:	693b      	ldr	r3, [r7, #16]
 800e220:	2b00      	cmp	r3, #0
 800e222:	d11f      	bne.n	800e264 <xTaskIncrementTick+0x68>
		{
			taskSWITCH_DELAYED_LISTS();
 800e224:	4b48      	ldr	r3, [pc, #288]	; (800e348 <xTaskIncrementTick+0x14c>)
 800e226:	681b      	ldr	r3, [r3, #0]
 800e228:	681b      	ldr	r3, [r3, #0]
 800e22a:	2b00      	cmp	r3, #0
 800e22c:	d009      	beq.n	800e242 <xTaskIncrementTick+0x46>
 800e22e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e232:	f383 8811 	msr	BASEPRI, r3
 800e236:	f3bf 8f6f 	isb	sy
 800e23a:	f3bf 8f4f 	dsb	sy
 800e23e:	603b      	str	r3, [r7, #0]
 800e240:	e7fe      	b.n	800e240 <xTaskIncrementTick+0x44>
 800e242:	4b41      	ldr	r3, [pc, #260]	; (800e348 <xTaskIncrementTick+0x14c>)
 800e244:	681b      	ldr	r3, [r3, #0]
 800e246:	60fb      	str	r3, [r7, #12]
 800e248:	4b40      	ldr	r3, [pc, #256]	; (800e34c <xTaskIncrementTick+0x150>)
 800e24a:	681b      	ldr	r3, [r3, #0]
 800e24c:	4a3e      	ldr	r2, [pc, #248]	; (800e348 <xTaskIncrementTick+0x14c>)
 800e24e:	6013      	str	r3, [r2, #0]
 800e250:	4a3e      	ldr	r2, [pc, #248]	; (800e34c <xTaskIncrementTick+0x150>)
 800e252:	68fb      	ldr	r3, [r7, #12]
 800e254:	6013      	str	r3, [r2, #0]
 800e256:	4b3e      	ldr	r3, [pc, #248]	; (800e350 <xTaskIncrementTick+0x154>)
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	3301      	adds	r3, #1
 800e25c:	4a3c      	ldr	r2, [pc, #240]	; (800e350 <xTaskIncrementTick+0x154>)
 800e25e:	6013      	str	r3, [r2, #0]
 800e260:	f000 fac4 	bl	800e7ec <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 800e264:	4b3b      	ldr	r3, [pc, #236]	; (800e354 <xTaskIncrementTick+0x158>)
 800e266:	681b      	ldr	r3, [r3, #0]
 800e268:	693a      	ldr	r2, [r7, #16]
 800e26a:	429a      	cmp	r2, r3
 800e26c:	d349      	bcc.n	800e302 <xTaskIncrementTick+0x106>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e26e:	4b36      	ldr	r3, [pc, #216]	; (800e348 <xTaskIncrementTick+0x14c>)
 800e270:	681b      	ldr	r3, [r3, #0]
 800e272:	681b      	ldr	r3, [r3, #0]
 800e274:	2b00      	cmp	r3, #0
 800e276:	d104      	bne.n	800e282 <xTaskIncrementTick+0x86>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e278:	4b36      	ldr	r3, [pc, #216]	; (800e354 <xTaskIncrementTick+0x158>)
 800e27a:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e27e:	601a      	str	r2, [r3, #0]
					break;
 800e280:	e03f      	b.n	800e302 <xTaskIncrementTick+0x106>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e282:	4b31      	ldr	r3, [pc, #196]	; (800e348 <xTaskIncrementTick+0x14c>)
 800e284:	681b      	ldr	r3, [r3, #0]
 800e286:	68db      	ldr	r3, [r3, #12]
 800e288:	68db      	ldr	r3, [r3, #12]
 800e28a:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 800e28c:	68bb      	ldr	r3, [r7, #8]
 800e28e:	685b      	ldr	r3, [r3, #4]
 800e290:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 800e292:	693a      	ldr	r2, [r7, #16]
 800e294:	687b      	ldr	r3, [r7, #4]
 800e296:	429a      	cmp	r2, r3
 800e298:	d203      	bcs.n	800e2a2 <xTaskIncrementTick+0xa6>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 800e29a:	4a2e      	ldr	r2, [pc, #184]	; (800e354 <xTaskIncrementTick+0x158>)
 800e29c:	687b      	ldr	r3, [r7, #4]
 800e29e:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 800e2a0:	e02f      	b.n	800e302 <xTaskIncrementTick+0x106>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e2a2:	68bb      	ldr	r3, [r7, #8]
 800e2a4:	3304      	adds	r3, #4
 800e2a6:	4618      	mov	r0, r3
 800e2a8:	f7fe ffba 	bl	800d220 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 800e2ac:	68bb      	ldr	r3, [r7, #8]
 800e2ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800e2b0:	2b00      	cmp	r3, #0
 800e2b2:	d004      	beq.n	800e2be <xTaskIncrementTick+0xc2>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 800e2b4:	68bb      	ldr	r3, [r7, #8]
 800e2b6:	3318      	adds	r3, #24
 800e2b8:	4618      	mov	r0, r3
 800e2ba:	f7fe ffb1 	bl	800d220 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 800e2be:	68bb      	ldr	r3, [r7, #8]
 800e2c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2c2:	4b25      	ldr	r3, [pc, #148]	; (800e358 <xTaskIncrementTick+0x15c>)
 800e2c4:	681b      	ldr	r3, [r3, #0]
 800e2c6:	429a      	cmp	r2, r3
 800e2c8:	d903      	bls.n	800e2d2 <xTaskIncrementTick+0xd6>
 800e2ca:	68bb      	ldr	r3, [r7, #8]
 800e2cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2ce:	4a22      	ldr	r2, [pc, #136]	; (800e358 <xTaskIncrementTick+0x15c>)
 800e2d0:	6013      	str	r3, [r2, #0]
 800e2d2:	68bb      	ldr	r3, [r7, #8]
 800e2d4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2d6:	4613      	mov	r3, r2
 800e2d8:	009b      	lsls	r3, r3, #2
 800e2da:	4413      	add	r3, r2
 800e2dc:	009b      	lsls	r3, r3, #2
 800e2de:	4a1f      	ldr	r2, [pc, #124]	; (800e35c <xTaskIncrementTick+0x160>)
 800e2e0:	441a      	add	r2, r3
 800e2e2:	68bb      	ldr	r3, [r7, #8]
 800e2e4:	3304      	adds	r3, #4
 800e2e6:	4619      	mov	r1, r3
 800e2e8:	4610      	mov	r0, r2
 800e2ea:	f7fe ff3c 	bl	800d166 <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 800e2ee:	68bb      	ldr	r3, [r7, #8]
 800e2f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e2f2:	4b1b      	ldr	r3, [pc, #108]	; (800e360 <xTaskIncrementTick+0x164>)
 800e2f4:	681b      	ldr	r3, [r3, #0]
 800e2f6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e2f8:	429a      	cmp	r2, r3
 800e2fa:	d3b8      	bcc.n	800e26e <xTaskIncrementTick+0x72>
						{
							xSwitchRequired = pdTRUE;
 800e2fc:	2301      	movs	r3, #1
 800e2fe:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e300:	e7b5      	b.n	800e26e <xTaskIncrementTick+0x72>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 800e302:	4b17      	ldr	r3, [pc, #92]	; (800e360 <xTaskIncrementTick+0x164>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e308:	4914      	ldr	r1, [pc, #80]	; (800e35c <xTaskIncrementTick+0x160>)
 800e30a:	4613      	mov	r3, r2
 800e30c:	009b      	lsls	r3, r3, #2
 800e30e:	4413      	add	r3, r2
 800e310:	009b      	lsls	r3, r3, #2
 800e312:	440b      	add	r3, r1
 800e314:	681b      	ldr	r3, [r3, #0]
 800e316:	2b01      	cmp	r3, #1
 800e318:	d907      	bls.n	800e32a <xTaskIncrementTick+0x12e>
			{
				xSwitchRequired = pdTRUE;
 800e31a:	2301      	movs	r3, #1
 800e31c:	617b      	str	r3, [r7, #20]
 800e31e:	e004      	b.n	800e32a <xTaskIncrementTick+0x12e>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 800e320:	4b10      	ldr	r3, [pc, #64]	; (800e364 <xTaskIncrementTick+0x168>)
 800e322:	681b      	ldr	r3, [r3, #0]
 800e324:	3301      	adds	r3, #1
 800e326:	4a0f      	ldr	r2, [pc, #60]	; (800e364 <xTaskIncrementTick+0x168>)
 800e328:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 800e32a:	4b0f      	ldr	r3, [pc, #60]	; (800e368 <xTaskIncrementTick+0x16c>)
 800e32c:	681b      	ldr	r3, [r3, #0]
 800e32e:	2b00      	cmp	r3, #0
 800e330:	d001      	beq.n	800e336 <xTaskIncrementTick+0x13a>
		{
			xSwitchRequired = pdTRUE;
 800e332:	2301      	movs	r3, #1
 800e334:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 800e336:	697b      	ldr	r3, [r7, #20]
}
 800e338:	4618      	mov	r0, r3
 800e33a:	3718      	adds	r7, #24
 800e33c:	46bd      	mov	sp, r7
 800e33e:	bd80      	pop	{r7, pc}
 800e340:	20001638 	.word	0x20001638
 800e344:	20001614 	.word	0x20001614
 800e348:	200015c8 	.word	0x200015c8
 800e34c:	200015cc 	.word	0x200015cc
 800e350:	20001628 	.word	0x20001628
 800e354:	20001630 	.word	0x20001630
 800e358:	20001618 	.word	0x20001618
 800e35c:	20001140 	.word	0x20001140
 800e360:	2000113c 	.word	0x2000113c
 800e364:	20001620 	.word	0x20001620
 800e368:	20001624 	.word	0x20001624

0800e36c <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 800e36c:	b480      	push	{r7}
 800e36e:	b085      	sub	sp, #20
 800e370:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 800e372:	4b27      	ldr	r3, [pc, #156]	; (800e410 <vTaskSwitchContext+0xa4>)
 800e374:	681b      	ldr	r3, [r3, #0]
 800e376:	2b00      	cmp	r3, #0
 800e378:	d003      	beq.n	800e382 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 800e37a:	4b26      	ldr	r3, [pc, #152]	; (800e414 <vTaskSwitchContext+0xa8>)
 800e37c:	2201      	movs	r2, #1
 800e37e:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 800e380:	e040      	b.n	800e404 <vTaskSwitchContext+0x98>
		xYieldPending = pdFALSE;
 800e382:	4b24      	ldr	r3, [pc, #144]	; (800e414 <vTaskSwitchContext+0xa8>)
 800e384:	2200      	movs	r2, #0
 800e386:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e388:	4b23      	ldr	r3, [pc, #140]	; (800e418 <vTaskSwitchContext+0xac>)
 800e38a:	681b      	ldr	r3, [r3, #0]
 800e38c:	60fb      	str	r3, [r7, #12]
 800e38e:	e00f      	b.n	800e3b0 <vTaskSwitchContext+0x44>
 800e390:	68fb      	ldr	r3, [r7, #12]
 800e392:	2b00      	cmp	r3, #0
 800e394:	d109      	bne.n	800e3aa <vTaskSwitchContext+0x3e>
 800e396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e39a:	f383 8811 	msr	BASEPRI, r3
 800e39e:	f3bf 8f6f 	isb	sy
 800e3a2:	f3bf 8f4f 	dsb	sy
 800e3a6:	607b      	str	r3, [r7, #4]
 800e3a8:	e7fe      	b.n	800e3a8 <vTaskSwitchContext+0x3c>
 800e3aa:	68fb      	ldr	r3, [r7, #12]
 800e3ac:	3b01      	subs	r3, #1
 800e3ae:	60fb      	str	r3, [r7, #12]
 800e3b0:	491a      	ldr	r1, [pc, #104]	; (800e41c <vTaskSwitchContext+0xb0>)
 800e3b2:	68fa      	ldr	r2, [r7, #12]
 800e3b4:	4613      	mov	r3, r2
 800e3b6:	009b      	lsls	r3, r3, #2
 800e3b8:	4413      	add	r3, r2
 800e3ba:	009b      	lsls	r3, r3, #2
 800e3bc:	440b      	add	r3, r1
 800e3be:	681b      	ldr	r3, [r3, #0]
 800e3c0:	2b00      	cmp	r3, #0
 800e3c2:	d0e5      	beq.n	800e390 <vTaskSwitchContext+0x24>
 800e3c4:	68fa      	ldr	r2, [r7, #12]
 800e3c6:	4613      	mov	r3, r2
 800e3c8:	009b      	lsls	r3, r3, #2
 800e3ca:	4413      	add	r3, r2
 800e3cc:	009b      	lsls	r3, r3, #2
 800e3ce:	4a13      	ldr	r2, [pc, #76]	; (800e41c <vTaskSwitchContext+0xb0>)
 800e3d0:	4413      	add	r3, r2
 800e3d2:	60bb      	str	r3, [r7, #8]
 800e3d4:	68bb      	ldr	r3, [r7, #8]
 800e3d6:	685b      	ldr	r3, [r3, #4]
 800e3d8:	685a      	ldr	r2, [r3, #4]
 800e3da:	68bb      	ldr	r3, [r7, #8]
 800e3dc:	605a      	str	r2, [r3, #4]
 800e3de:	68bb      	ldr	r3, [r7, #8]
 800e3e0:	685a      	ldr	r2, [r3, #4]
 800e3e2:	68bb      	ldr	r3, [r7, #8]
 800e3e4:	3308      	adds	r3, #8
 800e3e6:	429a      	cmp	r2, r3
 800e3e8:	d104      	bne.n	800e3f4 <vTaskSwitchContext+0x88>
 800e3ea:	68bb      	ldr	r3, [r7, #8]
 800e3ec:	685b      	ldr	r3, [r3, #4]
 800e3ee:	685a      	ldr	r2, [r3, #4]
 800e3f0:	68bb      	ldr	r3, [r7, #8]
 800e3f2:	605a      	str	r2, [r3, #4]
 800e3f4:	68bb      	ldr	r3, [r7, #8]
 800e3f6:	685b      	ldr	r3, [r3, #4]
 800e3f8:	68db      	ldr	r3, [r3, #12]
 800e3fa:	4a09      	ldr	r2, [pc, #36]	; (800e420 <vTaskSwitchContext+0xb4>)
 800e3fc:	6013      	str	r3, [r2, #0]
 800e3fe:	4a06      	ldr	r2, [pc, #24]	; (800e418 <vTaskSwitchContext+0xac>)
 800e400:	68fb      	ldr	r3, [r7, #12]
 800e402:	6013      	str	r3, [r2, #0]
}
 800e404:	bf00      	nop
 800e406:	3714      	adds	r7, #20
 800e408:	46bd      	mov	sp, r7
 800e40a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e40e:	4770      	bx	lr
 800e410:	20001638 	.word	0x20001638
 800e414:	20001624 	.word	0x20001624
 800e418:	20001618 	.word	0x20001618
 800e41c:	20001140 	.word	0x20001140
 800e420:	2000113c 	.word	0x2000113c

0800e424 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 800e424:	b580      	push	{r7, lr}
 800e426:	b084      	sub	sp, #16
 800e428:	af00      	add	r7, sp, #0
 800e42a:	6078      	str	r0, [r7, #4]
 800e42c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 800e42e:	687b      	ldr	r3, [r7, #4]
 800e430:	2b00      	cmp	r3, #0
 800e432:	d109      	bne.n	800e448 <vTaskPlaceOnEventList+0x24>
 800e434:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e438:	f383 8811 	msr	BASEPRI, r3
 800e43c:	f3bf 8f6f 	isb	sy
 800e440:	f3bf 8f4f 	dsb	sy
 800e444:	60fb      	str	r3, [r7, #12]
 800e446:	e7fe      	b.n	800e446 <vTaskPlaceOnEventList+0x22>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e448:	4b07      	ldr	r3, [pc, #28]	; (800e468 <vTaskPlaceOnEventList+0x44>)
 800e44a:	681b      	ldr	r3, [r3, #0]
 800e44c:	3318      	adds	r3, #24
 800e44e:	4619      	mov	r1, r3
 800e450:	6878      	ldr	r0, [r7, #4]
 800e452:	f7fe feac 	bl	800d1ae <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 800e456:	2101      	movs	r1, #1
 800e458:	6838      	ldr	r0, [r7, #0]
 800e45a:	f000 fa71 	bl	800e940 <prvAddCurrentTaskToDelayedList>
}
 800e45e:	bf00      	nop
 800e460:	3710      	adds	r7, #16
 800e462:	46bd      	mov	sp, r7
 800e464:	bd80      	pop	{r7, pc}
 800e466:	bf00      	nop
 800e468:	2000113c 	.word	0x2000113c

0800e46c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 800e46c:	b580      	push	{r7, lr}
 800e46e:	b086      	sub	sp, #24
 800e470:	af00      	add	r7, sp, #0
 800e472:	60f8      	str	r0, [r7, #12]
 800e474:	60b9      	str	r1, [r7, #8]
 800e476:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 800e478:	68fb      	ldr	r3, [r7, #12]
 800e47a:	2b00      	cmp	r3, #0
 800e47c:	d109      	bne.n	800e492 <vTaskPlaceOnEventListRestricted+0x26>
 800e47e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e482:	f383 8811 	msr	BASEPRI, r3
 800e486:	f3bf 8f6f 	isb	sy
 800e48a:	f3bf 8f4f 	dsb	sy
 800e48e:	617b      	str	r3, [r7, #20]
 800e490:	e7fe      	b.n	800e490 <vTaskPlaceOnEventListRestricted+0x24>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 800e492:	4b0a      	ldr	r3, [pc, #40]	; (800e4bc <vTaskPlaceOnEventListRestricted+0x50>)
 800e494:	681b      	ldr	r3, [r3, #0]
 800e496:	3318      	adds	r3, #24
 800e498:	4619      	mov	r1, r3
 800e49a:	68f8      	ldr	r0, [r7, #12]
 800e49c:	f7fe fe63 	bl	800d166 <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 800e4a0:	687b      	ldr	r3, [r7, #4]
 800e4a2:	2b00      	cmp	r3, #0
 800e4a4:	d002      	beq.n	800e4ac <vTaskPlaceOnEventListRestricted+0x40>
		{
			xTicksToWait = portMAX_DELAY;
 800e4a6:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800e4aa:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 800e4ac:	6879      	ldr	r1, [r7, #4]
 800e4ae:	68b8      	ldr	r0, [r7, #8]
 800e4b0:	f000 fa46 	bl	800e940 <prvAddCurrentTaskToDelayedList>
	}
 800e4b4:	bf00      	nop
 800e4b6:	3718      	adds	r7, #24
 800e4b8:	46bd      	mov	sp, r7
 800e4ba:	bd80      	pop	{r7, pc}
 800e4bc:	2000113c 	.word	0x2000113c

0800e4c0 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 800e4c0:	b580      	push	{r7, lr}
 800e4c2:	b086      	sub	sp, #24
 800e4c4:	af00      	add	r7, sp, #0
 800e4c6:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e4c8:	687b      	ldr	r3, [r7, #4]
 800e4ca:	68db      	ldr	r3, [r3, #12]
 800e4cc:	68db      	ldr	r3, [r3, #12]
 800e4ce:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 800e4d0:	693b      	ldr	r3, [r7, #16]
 800e4d2:	2b00      	cmp	r3, #0
 800e4d4:	d109      	bne.n	800e4ea <xTaskRemoveFromEventList+0x2a>
 800e4d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e4da:	f383 8811 	msr	BASEPRI, r3
 800e4de:	f3bf 8f6f 	isb	sy
 800e4e2:	f3bf 8f4f 	dsb	sy
 800e4e6:	60fb      	str	r3, [r7, #12]
 800e4e8:	e7fe      	b.n	800e4e8 <xTaskRemoveFromEventList+0x28>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 800e4ea:	693b      	ldr	r3, [r7, #16]
 800e4ec:	3318      	adds	r3, #24
 800e4ee:	4618      	mov	r0, r3
 800e4f0:	f7fe fe96 	bl	800d220 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e4f4:	4b1d      	ldr	r3, [pc, #116]	; (800e56c <xTaskRemoveFromEventList+0xac>)
 800e4f6:	681b      	ldr	r3, [r3, #0]
 800e4f8:	2b00      	cmp	r3, #0
 800e4fa:	d11d      	bne.n	800e538 <xTaskRemoveFromEventList+0x78>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 800e4fc:	693b      	ldr	r3, [r7, #16]
 800e4fe:	3304      	adds	r3, #4
 800e500:	4618      	mov	r0, r3
 800e502:	f7fe fe8d 	bl	800d220 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 800e506:	693b      	ldr	r3, [r7, #16]
 800e508:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e50a:	4b19      	ldr	r3, [pc, #100]	; (800e570 <xTaskRemoveFromEventList+0xb0>)
 800e50c:	681b      	ldr	r3, [r3, #0]
 800e50e:	429a      	cmp	r2, r3
 800e510:	d903      	bls.n	800e51a <xTaskRemoveFromEventList+0x5a>
 800e512:	693b      	ldr	r3, [r7, #16]
 800e514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e516:	4a16      	ldr	r2, [pc, #88]	; (800e570 <xTaskRemoveFromEventList+0xb0>)
 800e518:	6013      	str	r3, [r2, #0]
 800e51a:	693b      	ldr	r3, [r7, #16]
 800e51c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e51e:	4613      	mov	r3, r2
 800e520:	009b      	lsls	r3, r3, #2
 800e522:	4413      	add	r3, r2
 800e524:	009b      	lsls	r3, r3, #2
 800e526:	4a13      	ldr	r2, [pc, #76]	; (800e574 <xTaskRemoveFromEventList+0xb4>)
 800e528:	441a      	add	r2, r3
 800e52a:	693b      	ldr	r3, [r7, #16]
 800e52c:	3304      	adds	r3, #4
 800e52e:	4619      	mov	r1, r3
 800e530:	4610      	mov	r0, r2
 800e532:	f7fe fe18 	bl	800d166 <vListInsertEnd>
 800e536:	e005      	b.n	800e544 <xTaskRemoveFromEventList+0x84>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800e538:	693b      	ldr	r3, [r7, #16]
 800e53a:	3318      	adds	r3, #24
 800e53c:	4619      	mov	r1, r3
 800e53e:	480e      	ldr	r0, [pc, #56]	; (800e578 <xTaskRemoveFromEventList+0xb8>)
 800e540:	f7fe fe11 	bl	800d166 <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800e544:	693b      	ldr	r3, [r7, #16]
 800e546:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e548:	4b0c      	ldr	r3, [pc, #48]	; (800e57c <xTaskRemoveFromEventList+0xbc>)
 800e54a:	681b      	ldr	r3, [r3, #0]
 800e54c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e54e:	429a      	cmp	r2, r3
 800e550:	d905      	bls.n	800e55e <xTaskRemoveFromEventList+0x9e>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 800e552:	2301      	movs	r3, #1
 800e554:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800e556:	4b0a      	ldr	r3, [pc, #40]	; (800e580 <xTaskRemoveFromEventList+0xc0>)
 800e558:	2201      	movs	r2, #1
 800e55a:	601a      	str	r2, [r3, #0]
 800e55c:	e001      	b.n	800e562 <xTaskRemoveFromEventList+0xa2>
	}
	else
	{
		xReturn = pdFALSE;
 800e55e:	2300      	movs	r3, #0
 800e560:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 800e562:	697b      	ldr	r3, [r7, #20]
}
 800e564:	4618      	mov	r0, r3
 800e566:	3718      	adds	r7, #24
 800e568:	46bd      	mov	sp, r7
 800e56a:	bd80      	pop	{r7, pc}
 800e56c:	20001638 	.word	0x20001638
 800e570:	20001618 	.word	0x20001618
 800e574:	20001140 	.word	0x20001140
 800e578:	200015d0 	.word	0x200015d0
 800e57c:	2000113c 	.word	0x2000113c
 800e580:	20001624 	.word	0x20001624

0800e584 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800e584:	b480      	push	{r7}
 800e586:	b083      	sub	sp, #12
 800e588:	af00      	add	r7, sp, #0
 800e58a:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 800e58c:	4b06      	ldr	r3, [pc, #24]	; (800e5a8 <vTaskInternalSetTimeOutState+0x24>)
 800e58e:	681a      	ldr	r2, [r3, #0]
 800e590:	687b      	ldr	r3, [r7, #4]
 800e592:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800e594:	4b05      	ldr	r3, [pc, #20]	; (800e5ac <vTaskInternalSetTimeOutState+0x28>)
 800e596:	681a      	ldr	r2, [r3, #0]
 800e598:	687b      	ldr	r3, [r7, #4]
 800e59a:	605a      	str	r2, [r3, #4]
}
 800e59c:	bf00      	nop
 800e59e:	370c      	adds	r7, #12
 800e5a0:	46bd      	mov	sp, r7
 800e5a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e5a6:	4770      	bx	lr
 800e5a8:	20001628 	.word	0x20001628
 800e5ac:	20001614 	.word	0x20001614

0800e5b0 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 800e5b0:	b580      	push	{r7, lr}
 800e5b2:	b088      	sub	sp, #32
 800e5b4:	af00      	add	r7, sp, #0
 800e5b6:	6078      	str	r0, [r7, #4]
 800e5b8:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 800e5ba:	687b      	ldr	r3, [r7, #4]
 800e5bc:	2b00      	cmp	r3, #0
 800e5be:	d109      	bne.n	800e5d4 <xTaskCheckForTimeOut+0x24>
 800e5c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5c4:	f383 8811 	msr	BASEPRI, r3
 800e5c8:	f3bf 8f6f 	isb	sy
 800e5cc:	f3bf 8f4f 	dsb	sy
 800e5d0:	613b      	str	r3, [r7, #16]
 800e5d2:	e7fe      	b.n	800e5d2 <xTaskCheckForTimeOut+0x22>
	configASSERT( pxTicksToWait );
 800e5d4:	683b      	ldr	r3, [r7, #0]
 800e5d6:	2b00      	cmp	r3, #0
 800e5d8:	d109      	bne.n	800e5ee <xTaskCheckForTimeOut+0x3e>
 800e5da:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e5de:	f383 8811 	msr	BASEPRI, r3
 800e5e2:	f3bf 8f6f 	isb	sy
 800e5e6:	f3bf 8f4f 	dsb	sy
 800e5ea:	60fb      	str	r3, [r7, #12]
 800e5ec:	e7fe      	b.n	800e5ec <xTaskCheckForTimeOut+0x3c>

	taskENTER_CRITICAL();
 800e5ee:	f000 fe65 	bl	800f2bc <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 800e5f2:	4b1d      	ldr	r3, [pc, #116]	; (800e668 <xTaskCheckForTimeOut+0xb8>)
 800e5f4:	681b      	ldr	r3, [r3, #0]
 800e5f6:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 800e5f8:	687b      	ldr	r3, [r7, #4]
 800e5fa:	685b      	ldr	r3, [r3, #4]
 800e5fc:	69ba      	ldr	r2, [r7, #24]
 800e5fe:	1ad3      	subs	r3, r2, r3
 800e600:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 800e602:	683b      	ldr	r3, [r7, #0]
 800e604:	681b      	ldr	r3, [r3, #0]
 800e606:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e60a:	d102      	bne.n	800e612 <xTaskCheckForTimeOut+0x62>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 800e60c:	2300      	movs	r3, #0
 800e60e:	61fb      	str	r3, [r7, #28]
 800e610:	e023      	b.n	800e65a <xTaskCheckForTimeOut+0xaa>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 800e612:	687b      	ldr	r3, [r7, #4]
 800e614:	681a      	ldr	r2, [r3, #0]
 800e616:	4b15      	ldr	r3, [pc, #84]	; (800e66c <xTaskCheckForTimeOut+0xbc>)
 800e618:	681b      	ldr	r3, [r3, #0]
 800e61a:	429a      	cmp	r2, r3
 800e61c:	d007      	beq.n	800e62e <xTaskCheckForTimeOut+0x7e>
 800e61e:	687b      	ldr	r3, [r7, #4]
 800e620:	685b      	ldr	r3, [r3, #4]
 800e622:	69ba      	ldr	r2, [r7, #24]
 800e624:	429a      	cmp	r2, r3
 800e626:	d302      	bcc.n	800e62e <xTaskCheckForTimeOut+0x7e>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 800e628:	2301      	movs	r3, #1
 800e62a:	61fb      	str	r3, [r7, #28]
 800e62c:	e015      	b.n	800e65a <xTaskCheckForTimeOut+0xaa>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800e62e:	683b      	ldr	r3, [r7, #0]
 800e630:	681b      	ldr	r3, [r3, #0]
 800e632:	697a      	ldr	r2, [r7, #20]
 800e634:	429a      	cmp	r2, r3
 800e636:	d20b      	bcs.n	800e650 <xTaskCheckForTimeOut+0xa0>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 800e638:	683b      	ldr	r3, [r7, #0]
 800e63a:	681a      	ldr	r2, [r3, #0]
 800e63c:	697b      	ldr	r3, [r7, #20]
 800e63e:	1ad2      	subs	r2, r2, r3
 800e640:	683b      	ldr	r3, [r7, #0]
 800e642:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 800e644:	6878      	ldr	r0, [r7, #4]
 800e646:	f7ff ff9d 	bl	800e584 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 800e64a:	2300      	movs	r3, #0
 800e64c:	61fb      	str	r3, [r7, #28]
 800e64e:	e004      	b.n	800e65a <xTaskCheckForTimeOut+0xaa>
		}
		else
		{
			*pxTicksToWait = 0;
 800e650:	683b      	ldr	r3, [r7, #0]
 800e652:	2200      	movs	r2, #0
 800e654:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 800e656:	2301      	movs	r3, #1
 800e658:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 800e65a:	f000 fe5d 	bl	800f318 <vPortExitCritical>

	return xReturn;
 800e65e:	69fb      	ldr	r3, [r7, #28]
}
 800e660:	4618      	mov	r0, r3
 800e662:	3720      	adds	r7, #32
 800e664:	46bd      	mov	sp, r7
 800e666:	bd80      	pop	{r7, pc}
 800e668:	20001614 	.word	0x20001614
 800e66c:	20001628 	.word	0x20001628

0800e670 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800e670:	b480      	push	{r7}
 800e672:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 800e674:	4b03      	ldr	r3, [pc, #12]	; (800e684 <vTaskMissedYield+0x14>)
 800e676:	2201      	movs	r2, #1
 800e678:	601a      	str	r2, [r3, #0]
}
 800e67a:	bf00      	nop
 800e67c:	46bd      	mov	sp, r7
 800e67e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e682:	4770      	bx	lr
 800e684:	20001624 	.word	0x20001624

0800e688 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 800e688:	b580      	push	{r7, lr}
 800e68a:	b082      	sub	sp, #8
 800e68c:	af00      	add	r7, sp, #0
 800e68e:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800e690:	f000 f852 	bl	800e738 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 800e694:	4b06      	ldr	r3, [pc, #24]	; (800e6b0 <prvIdleTask+0x28>)
 800e696:	681b      	ldr	r3, [r3, #0]
 800e698:	2b01      	cmp	r3, #1
 800e69a:	d9f9      	bls.n	800e690 <prvIdleTask+0x8>
			{
				taskYIELD();
 800e69c:	4b05      	ldr	r3, [pc, #20]	; (800e6b4 <prvIdleTask+0x2c>)
 800e69e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800e6a2:	601a      	str	r2, [r3, #0]
 800e6a4:	f3bf 8f4f 	dsb	sy
 800e6a8:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 800e6ac:	e7f0      	b.n	800e690 <prvIdleTask+0x8>
 800e6ae:	bf00      	nop
 800e6b0:	20001140 	.word	0x20001140
 800e6b4:	e000ed04 	.word	0xe000ed04

0800e6b8 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 800e6b8:	b580      	push	{r7, lr}
 800e6ba:	b082      	sub	sp, #8
 800e6bc:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e6be:	2300      	movs	r3, #0
 800e6c0:	607b      	str	r3, [r7, #4]
 800e6c2:	e00c      	b.n	800e6de <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 800e6c4:	687a      	ldr	r2, [r7, #4]
 800e6c6:	4613      	mov	r3, r2
 800e6c8:	009b      	lsls	r3, r3, #2
 800e6ca:	4413      	add	r3, r2
 800e6cc:	009b      	lsls	r3, r3, #2
 800e6ce:	4a12      	ldr	r2, [pc, #72]	; (800e718 <prvInitialiseTaskLists+0x60>)
 800e6d0:	4413      	add	r3, r2
 800e6d2:	4618      	mov	r0, r3
 800e6d4:	f7fe fd1a 	bl	800d10c <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 800e6d8:	687b      	ldr	r3, [r7, #4]
 800e6da:	3301      	adds	r3, #1
 800e6dc:	607b      	str	r3, [r7, #4]
 800e6de:	687b      	ldr	r3, [r7, #4]
 800e6e0:	2b37      	cmp	r3, #55	; 0x37
 800e6e2:	d9ef      	bls.n	800e6c4 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 800e6e4:	480d      	ldr	r0, [pc, #52]	; (800e71c <prvInitialiseTaskLists+0x64>)
 800e6e6:	f7fe fd11 	bl	800d10c <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 800e6ea:	480d      	ldr	r0, [pc, #52]	; (800e720 <prvInitialiseTaskLists+0x68>)
 800e6ec:	f7fe fd0e 	bl	800d10c <vListInitialise>
	vListInitialise( &xPendingReadyList );
 800e6f0:	480c      	ldr	r0, [pc, #48]	; (800e724 <prvInitialiseTaskLists+0x6c>)
 800e6f2:	f7fe fd0b 	bl	800d10c <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 800e6f6:	480c      	ldr	r0, [pc, #48]	; (800e728 <prvInitialiseTaskLists+0x70>)
 800e6f8:	f7fe fd08 	bl	800d10c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 800e6fc:	480b      	ldr	r0, [pc, #44]	; (800e72c <prvInitialiseTaskLists+0x74>)
 800e6fe:	f7fe fd05 	bl	800d10c <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 800e702:	4b0b      	ldr	r3, [pc, #44]	; (800e730 <prvInitialiseTaskLists+0x78>)
 800e704:	4a05      	ldr	r2, [pc, #20]	; (800e71c <prvInitialiseTaskLists+0x64>)
 800e706:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 800e708:	4b0a      	ldr	r3, [pc, #40]	; (800e734 <prvInitialiseTaskLists+0x7c>)
 800e70a:	4a05      	ldr	r2, [pc, #20]	; (800e720 <prvInitialiseTaskLists+0x68>)
 800e70c:	601a      	str	r2, [r3, #0]
}
 800e70e:	bf00      	nop
 800e710:	3708      	adds	r7, #8
 800e712:	46bd      	mov	sp, r7
 800e714:	bd80      	pop	{r7, pc}
 800e716:	bf00      	nop
 800e718:	20001140 	.word	0x20001140
 800e71c:	200015a0 	.word	0x200015a0
 800e720:	200015b4 	.word	0x200015b4
 800e724:	200015d0 	.word	0x200015d0
 800e728:	200015e4 	.word	0x200015e4
 800e72c:	200015fc 	.word	0x200015fc
 800e730:	200015c8 	.word	0x200015c8
 800e734:	200015cc 	.word	0x200015cc

0800e738 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 800e738:	b580      	push	{r7, lr}
 800e73a:	b082      	sub	sp, #8
 800e73c:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e73e:	e019      	b.n	800e774 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800e740:	f000 fdbc 	bl	800f2bc <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e744:	4b0f      	ldr	r3, [pc, #60]	; (800e784 <prvCheckTasksWaitingTermination+0x4c>)
 800e746:	68db      	ldr	r3, [r3, #12]
 800e748:	68db      	ldr	r3, [r3, #12]
 800e74a:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	3304      	adds	r3, #4
 800e750:	4618      	mov	r0, r3
 800e752:	f7fe fd65 	bl	800d220 <uxListRemove>
				--uxCurrentNumberOfTasks;
 800e756:	4b0c      	ldr	r3, [pc, #48]	; (800e788 <prvCheckTasksWaitingTermination+0x50>)
 800e758:	681b      	ldr	r3, [r3, #0]
 800e75a:	3b01      	subs	r3, #1
 800e75c:	4a0a      	ldr	r2, [pc, #40]	; (800e788 <prvCheckTasksWaitingTermination+0x50>)
 800e75e:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800e760:	4b0a      	ldr	r3, [pc, #40]	; (800e78c <prvCheckTasksWaitingTermination+0x54>)
 800e762:	681b      	ldr	r3, [r3, #0]
 800e764:	3b01      	subs	r3, #1
 800e766:	4a09      	ldr	r2, [pc, #36]	; (800e78c <prvCheckTasksWaitingTermination+0x54>)
 800e768:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 800e76a:	f000 fdd5 	bl	800f318 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800e76e:	6878      	ldr	r0, [r7, #4]
 800e770:	f000 f80e 	bl	800e790 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800e774:	4b05      	ldr	r3, [pc, #20]	; (800e78c <prvCheckTasksWaitingTermination+0x54>)
 800e776:	681b      	ldr	r3, [r3, #0]
 800e778:	2b00      	cmp	r3, #0
 800e77a:	d1e1      	bne.n	800e740 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 800e77c:	bf00      	nop
 800e77e:	3708      	adds	r7, #8
 800e780:	46bd      	mov	sp, r7
 800e782:	bd80      	pop	{r7, pc}
 800e784:	200015e4 	.word	0x200015e4
 800e788:	20001610 	.word	0x20001610
 800e78c:	200015f8 	.word	0x200015f8

0800e790 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 800e790:	b580      	push	{r7, lr}
 800e792:	b084      	sub	sp, #16
 800e794:	af00      	add	r7, sp, #0
 800e796:	6078      	str	r0, [r7, #4]
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 800e798:	687b      	ldr	r3, [r7, #4]
 800e79a:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e79e:	2b00      	cmp	r3, #0
 800e7a0:	d108      	bne.n	800e7b4 <prvDeleteTCB+0x24>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800e7a2:	687b      	ldr	r3, [r7, #4]
 800e7a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e7a6:	4618      	mov	r0, r3
 800e7a8:	f000 ff64 	bl	800f674 <vPortFree>
				vPortFree( pxTCB );
 800e7ac:	6878      	ldr	r0, [r7, #4]
 800e7ae:	f000 ff61 	bl	800f674 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 800e7b2:	e017      	b.n	800e7e4 <prvDeleteTCB+0x54>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e7ba:	2b01      	cmp	r3, #1
 800e7bc:	d103      	bne.n	800e7c6 <prvDeleteTCB+0x36>
				vPortFree( pxTCB );
 800e7be:	6878      	ldr	r0, [r7, #4]
 800e7c0:	f000 ff58 	bl	800f674 <vPortFree>
	}
 800e7c4:	e00e      	b.n	800e7e4 <prvDeleteTCB+0x54>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 800e7c6:	687b      	ldr	r3, [r7, #4]
 800e7c8:	f893 3059 	ldrb.w	r3, [r3, #89]	; 0x59
 800e7cc:	2b02      	cmp	r3, #2
 800e7ce:	d009      	beq.n	800e7e4 <prvDeleteTCB+0x54>
 800e7d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e7d4:	f383 8811 	msr	BASEPRI, r3
 800e7d8:	f3bf 8f6f 	isb	sy
 800e7dc:	f3bf 8f4f 	dsb	sy
 800e7e0:	60fb      	str	r3, [r7, #12]
 800e7e2:	e7fe      	b.n	800e7e2 <prvDeleteTCB+0x52>
	}
 800e7e4:	bf00      	nop
 800e7e6:	3710      	adds	r7, #16
 800e7e8:	46bd      	mov	sp, r7
 800e7ea:	bd80      	pop	{r7, pc}

0800e7ec <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 800e7ec:	b480      	push	{r7}
 800e7ee:	b083      	sub	sp, #12
 800e7f0:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 800e7f2:	4b0c      	ldr	r3, [pc, #48]	; (800e824 <prvResetNextTaskUnblockTime+0x38>)
 800e7f4:	681b      	ldr	r3, [r3, #0]
 800e7f6:	681b      	ldr	r3, [r3, #0]
 800e7f8:	2b00      	cmp	r3, #0
 800e7fa:	d104      	bne.n	800e806 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 800e7fc:	4b0a      	ldr	r3, [pc, #40]	; (800e828 <prvResetNextTaskUnblockTime+0x3c>)
 800e7fe:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 800e802:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 800e804:	e008      	b.n	800e818 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800e806:	4b07      	ldr	r3, [pc, #28]	; (800e824 <prvResetNextTaskUnblockTime+0x38>)
 800e808:	681b      	ldr	r3, [r3, #0]
 800e80a:	68db      	ldr	r3, [r3, #12]
 800e80c:	68db      	ldr	r3, [r3, #12]
 800e80e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	685b      	ldr	r3, [r3, #4]
 800e814:	4a04      	ldr	r2, [pc, #16]	; (800e828 <prvResetNextTaskUnblockTime+0x3c>)
 800e816:	6013      	str	r3, [r2, #0]
}
 800e818:	bf00      	nop
 800e81a:	370c      	adds	r7, #12
 800e81c:	46bd      	mov	sp, r7
 800e81e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e822:	4770      	bx	lr
 800e824:	200015c8 	.word	0x200015c8
 800e828:	20001630 	.word	0x20001630

0800e82c <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 800e82c:	b480      	push	{r7}
 800e82e:	b083      	sub	sp, #12
 800e830:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800e832:	4b0b      	ldr	r3, [pc, #44]	; (800e860 <xTaskGetSchedulerState+0x34>)
 800e834:	681b      	ldr	r3, [r3, #0]
 800e836:	2b00      	cmp	r3, #0
 800e838:	d102      	bne.n	800e840 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 800e83a:	2301      	movs	r3, #1
 800e83c:	607b      	str	r3, [r7, #4]
 800e83e:	e008      	b.n	800e852 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800e840:	4b08      	ldr	r3, [pc, #32]	; (800e864 <xTaskGetSchedulerState+0x38>)
 800e842:	681b      	ldr	r3, [r3, #0]
 800e844:	2b00      	cmp	r3, #0
 800e846:	d102      	bne.n	800e84e <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 800e848:	2302      	movs	r3, #2
 800e84a:	607b      	str	r3, [r7, #4]
 800e84c:	e001      	b.n	800e852 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800e84e:	2300      	movs	r3, #0
 800e850:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800e852:	687b      	ldr	r3, [r7, #4]
	}
 800e854:	4618      	mov	r0, r3
 800e856:	370c      	adds	r7, #12
 800e858:	46bd      	mov	sp, r7
 800e85a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e85e:	4770      	bx	lr
 800e860:	2000161c 	.word	0x2000161c
 800e864:	20001638 	.word	0x20001638

0800e868 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 800e868:	b580      	push	{r7, lr}
 800e86a:	b086      	sub	sp, #24
 800e86c:	af00      	add	r7, sp, #0
 800e86e:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800e870:	687b      	ldr	r3, [r7, #4]
 800e872:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 800e874:	2300      	movs	r3, #0
 800e876:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 800e878:	687b      	ldr	r3, [r7, #4]
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	d054      	beq.n	800e928 <xTaskPriorityDisinherit+0xc0>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800e87e:	4b2d      	ldr	r3, [pc, #180]	; (800e934 <xTaskPriorityDisinherit+0xcc>)
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	693a      	ldr	r2, [r7, #16]
 800e884:	429a      	cmp	r2, r3
 800e886:	d009      	beq.n	800e89c <xTaskPriorityDisinherit+0x34>
 800e888:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e88c:	f383 8811 	msr	BASEPRI, r3
 800e890:	f3bf 8f6f 	isb	sy
 800e894:	f3bf 8f4f 	dsb	sy
 800e898:	60fb      	str	r3, [r7, #12]
 800e89a:	e7fe      	b.n	800e89a <xTaskPriorityDisinherit+0x32>
			configASSERT( pxTCB->uxMutexesHeld );
 800e89c:	693b      	ldr	r3, [r7, #16]
 800e89e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8a0:	2b00      	cmp	r3, #0
 800e8a2:	d109      	bne.n	800e8b8 <xTaskPriorityDisinherit+0x50>
 800e8a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800e8a8:	f383 8811 	msr	BASEPRI, r3
 800e8ac:	f3bf 8f6f 	isb	sy
 800e8b0:	f3bf 8f4f 	dsb	sy
 800e8b4:	60bb      	str	r3, [r7, #8]
 800e8b6:	e7fe      	b.n	800e8b6 <xTaskPriorityDisinherit+0x4e>
			( pxTCB->uxMutexesHeld )--;
 800e8b8:	693b      	ldr	r3, [r7, #16]
 800e8ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8bc:	1e5a      	subs	r2, r3, #1
 800e8be:	693b      	ldr	r3, [r7, #16]
 800e8c0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 800e8c2:	693b      	ldr	r3, [r7, #16]
 800e8c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8c6:	693b      	ldr	r3, [r7, #16]
 800e8c8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e8ca:	429a      	cmp	r2, r3
 800e8cc:	d02c      	beq.n	800e928 <xTaskPriorityDisinherit+0xc0>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 800e8ce:	693b      	ldr	r3, [r7, #16]
 800e8d0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800e8d2:	2b00      	cmp	r3, #0
 800e8d4:	d128      	bne.n	800e928 <xTaskPriorityDisinherit+0xc0>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e8d6:	693b      	ldr	r3, [r7, #16]
 800e8d8:	3304      	adds	r3, #4
 800e8da:	4618      	mov	r0, r3
 800e8dc:	f7fe fca0 	bl	800d220 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 800e8e0:	693b      	ldr	r3, [r7, #16]
 800e8e2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 800e8e4:	693b      	ldr	r3, [r7, #16]
 800e8e6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800e8e8:	693b      	ldr	r3, [r7, #16]
 800e8ea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e8ec:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800e8f0:	693b      	ldr	r3, [r7, #16]
 800e8f2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 800e8f4:	693b      	ldr	r3, [r7, #16]
 800e8f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e8f8:	4b0f      	ldr	r3, [pc, #60]	; (800e938 <xTaskPriorityDisinherit+0xd0>)
 800e8fa:	681b      	ldr	r3, [r3, #0]
 800e8fc:	429a      	cmp	r2, r3
 800e8fe:	d903      	bls.n	800e908 <xTaskPriorityDisinherit+0xa0>
 800e900:	693b      	ldr	r3, [r7, #16]
 800e902:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800e904:	4a0c      	ldr	r2, [pc, #48]	; (800e938 <xTaskPriorityDisinherit+0xd0>)
 800e906:	6013      	str	r3, [r2, #0]
 800e908:	693b      	ldr	r3, [r7, #16]
 800e90a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e90c:	4613      	mov	r3, r2
 800e90e:	009b      	lsls	r3, r3, #2
 800e910:	4413      	add	r3, r2
 800e912:	009b      	lsls	r3, r3, #2
 800e914:	4a09      	ldr	r2, [pc, #36]	; (800e93c <xTaskPriorityDisinherit+0xd4>)
 800e916:	441a      	add	r2, r3
 800e918:	693b      	ldr	r3, [r7, #16]
 800e91a:	3304      	adds	r3, #4
 800e91c:	4619      	mov	r1, r3
 800e91e:	4610      	mov	r0, r2
 800e920:	f7fe fc21 	bl	800d166 <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 800e924:	2301      	movs	r3, #1
 800e926:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800e928:	697b      	ldr	r3, [r7, #20]
	}
 800e92a:	4618      	mov	r0, r3
 800e92c:	3718      	adds	r7, #24
 800e92e:	46bd      	mov	sp, r7
 800e930:	bd80      	pop	{r7, pc}
 800e932:	bf00      	nop
 800e934:	2000113c 	.word	0x2000113c
 800e938:	20001618 	.word	0x20001618
 800e93c:	20001140 	.word	0x20001140

0800e940 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800e940:	b580      	push	{r7, lr}
 800e942:	b084      	sub	sp, #16
 800e944:	af00      	add	r7, sp, #0
 800e946:	6078      	str	r0, [r7, #4]
 800e948:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 800e94a:	4b21      	ldr	r3, [pc, #132]	; (800e9d0 <prvAddCurrentTaskToDelayedList+0x90>)
 800e94c:	681b      	ldr	r3, [r3, #0]
 800e94e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800e950:	4b20      	ldr	r3, [pc, #128]	; (800e9d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e952:	681b      	ldr	r3, [r3, #0]
 800e954:	3304      	adds	r3, #4
 800e956:	4618      	mov	r0, r3
 800e958:	f7fe fc62 	bl	800d220 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 800e95c:	687b      	ldr	r3, [r7, #4]
 800e95e:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800e962:	d10a      	bne.n	800e97a <prvAddCurrentTaskToDelayedList+0x3a>
 800e964:	683b      	ldr	r3, [r7, #0]
 800e966:	2b00      	cmp	r3, #0
 800e968:	d007      	beq.n	800e97a <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e96a:	4b1a      	ldr	r3, [pc, #104]	; (800e9d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e96c:	681b      	ldr	r3, [r3, #0]
 800e96e:	3304      	adds	r3, #4
 800e970:	4619      	mov	r1, r3
 800e972:	4819      	ldr	r0, [pc, #100]	; (800e9d8 <prvAddCurrentTaskToDelayedList+0x98>)
 800e974:	f7fe fbf7 	bl	800d166 <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 800e978:	e026      	b.n	800e9c8 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 800e97a:	68fa      	ldr	r2, [r7, #12]
 800e97c:	687b      	ldr	r3, [r7, #4]
 800e97e:	4413      	add	r3, r2
 800e980:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800e982:	4b14      	ldr	r3, [pc, #80]	; (800e9d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e984:	681b      	ldr	r3, [r3, #0]
 800e986:	68ba      	ldr	r2, [r7, #8]
 800e988:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 800e98a:	68ba      	ldr	r2, [r7, #8]
 800e98c:	68fb      	ldr	r3, [r7, #12]
 800e98e:	429a      	cmp	r2, r3
 800e990:	d209      	bcs.n	800e9a6 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e992:	4b12      	ldr	r3, [pc, #72]	; (800e9dc <prvAddCurrentTaskToDelayedList+0x9c>)
 800e994:	681a      	ldr	r2, [r3, #0]
 800e996:	4b0f      	ldr	r3, [pc, #60]	; (800e9d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e998:	681b      	ldr	r3, [r3, #0]
 800e99a:	3304      	adds	r3, #4
 800e99c:	4619      	mov	r1, r3
 800e99e:	4610      	mov	r0, r2
 800e9a0:	f7fe fc05 	bl	800d1ae <vListInsert>
}
 800e9a4:	e010      	b.n	800e9c8 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 800e9a6:	4b0e      	ldr	r3, [pc, #56]	; (800e9e0 <prvAddCurrentTaskToDelayedList+0xa0>)
 800e9a8:	681a      	ldr	r2, [r3, #0]
 800e9aa:	4b0a      	ldr	r3, [pc, #40]	; (800e9d4 <prvAddCurrentTaskToDelayedList+0x94>)
 800e9ac:	681b      	ldr	r3, [r3, #0]
 800e9ae:	3304      	adds	r3, #4
 800e9b0:	4619      	mov	r1, r3
 800e9b2:	4610      	mov	r0, r2
 800e9b4:	f7fe fbfb 	bl	800d1ae <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 800e9b8:	4b0a      	ldr	r3, [pc, #40]	; (800e9e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e9ba:	681b      	ldr	r3, [r3, #0]
 800e9bc:	68ba      	ldr	r2, [r7, #8]
 800e9be:	429a      	cmp	r2, r3
 800e9c0:	d202      	bcs.n	800e9c8 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 800e9c2:	4a08      	ldr	r2, [pc, #32]	; (800e9e4 <prvAddCurrentTaskToDelayedList+0xa4>)
 800e9c4:	68bb      	ldr	r3, [r7, #8]
 800e9c6:	6013      	str	r3, [r2, #0]
}
 800e9c8:	bf00      	nop
 800e9ca:	3710      	adds	r7, #16
 800e9cc:	46bd      	mov	sp, r7
 800e9ce:	bd80      	pop	{r7, pc}
 800e9d0:	20001614 	.word	0x20001614
 800e9d4:	2000113c 	.word	0x2000113c
 800e9d8:	200015fc 	.word	0x200015fc
 800e9dc:	200015cc 	.word	0x200015cc
 800e9e0:	200015c8 	.word	0x200015c8
 800e9e4:	20001630 	.word	0x20001630

0800e9e8 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 800e9e8:	b580      	push	{r7, lr}
 800e9ea:	b08a      	sub	sp, #40	; 0x28
 800e9ec:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800e9ee:	2300      	movs	r3, #0
 800e9f0:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800e9f2:	f000 faff 	bl	800eff4 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 800e9f6:	4b1c      	ldr	r3, [pc, #112]	; (800ea68 <xTimerCreateTimerTask+0x80>)
 800e9f8:	681b      	ldr	r3, [r3, #0]
 800e9fa:	2b00      	cmp	r3, #0
 800e9fc:	d021      	beq.n	800ea42 <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800e9fe:	2300      	movs	r3, #0
 800ea00:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800ea02:	2300      	movs	r3, #0
 800ea04:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 800ea06:	1d3a      	adds	r2, r7, #4
 800ea08:	f107 0108 	add.w	r1, r7, #8
 800ea0c:	f107 030c 	add.w	r3, r7, #12
 800ea10:	4618      	mov	r0, r3
 800ea12:	f7fe fb61 	bl	800d0d8 <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 800ea16:	6879      	ldr	r1, [r7, #4]
 800ea18:	68bb      	ldr	r3, [r7, #8]
 800ea1a:	68fa      	ldr	r2, [r7, #12]
 800ea1c:	9202      	str	r2, [sp, #8]
 800ea1e:	9301      	str	r3, [sp, #4]
 800ea20:	2302      	movs	r3, #2
 800ea22:	9300      	str	r3, [sp, #0]
 800ea24:	2300      	movs	r3, #0
 800ea26:	460a      	mov	r2, r1
 800ea28:	4910      	ldr	r1, [pc, #64]	; (800ea6c <xTimerCreateTimerTask+0x84>)
 800ea2a:	4811      	ldr	r0, [pc, #68]	; (800ea70 <xTimerCreateTimerTask+0x88>)
 800ea2c:	f7ff f8f6 	bl	800dc1c <xTaskCreateStatic>
 800ea30:	4602      	mov	r2, r0
 800ea32:	4b10      	ldr	r3, [pc, #64]	; (800ea74 <xTimerCreateTimerTask+0x8c>)
 800ea34:	601a      	str	r2, [r3, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 800ea36:	4b0f      	ldr	r3, [pc, #60]	; (800ea74 <xTimerCreateTimerTask+0x8c>)
 800ea38:	681b      	ldr	r3, [r3, #0]
 800ea3a:	2b00      	cmp	r3, #0
 800ea3c:	d001      	beq.n	800ea42 <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800ea3e:	2301      	movs	r3, #1
 800ea40:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800ea42:	697b      	ldr	r3, [r7, #20]
 800ea44:	2b00      	cmp	r3, #0
 800ea46:	d109      	bne.n	800ea5c <xTimerCreateTimerTask+0x74>
 800ea48:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea4c:	f383 8811 	msr	BASEPRI, r3
 800ea50:	f3bf 8f6f 	isb	sy
 800ea54:	f3bf 8f4f 	dsb	sy
 800ea58:	613b      	str	r3, [r7, #16]
 800ea5a:	e7fe      	b.n	800ea5a <xTimerCreateTimerTask+0x72>
	return xReturn;
 800ea5c:	697b      	ldr	r3, [r7, #20]
}
 800ea5e:	4618      	mov	r0, r3
 800ea60:	3718      	adds	r7, #24
 800ea62:	46bd      	mov	sp, r7
 800ea64:	bd80      	pop	{r7, pc}
 800ea66:	bf00      	nop
 800ea68:	2000166c 	.word	0x2000166c
 800ea6c:	08011adc 	.word	0x08011adc
 800ea70:	0800eba9 	.word	0x0800eba9
 800ea74:	20001670 	.word	0x20001670

0800ea78 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 800ea78:	b580      	push	{r7, lr}
 800ea7a:	b08a      	sub	sp, #40	; 0x28
 800ea7c:	af00      	add	r7, sp, #0
 800ea7e:	60f8      	str	r0, [r7, #12]
 800ea80:	60b9      	str	r1, [r7, #8]
 800ea82:	607a      	str	r2, [r7, #4]
 800ea84:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 800ea86:	2300      	movs	r3, #0
 800ea88:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 800ea8a:	68fb      	ldr	r3, [r7, #12]
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d109      	bne.n	800eaa4 <xTimerGenericCommand+0x2c>
 800ea90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ea94:	f383 8811 	msr	BASEPRI, r3
 800ea98:	f3bf 8f6f 	isb	sy
 800ea9c:	f3bf 8f4f 	dsb	sy
 800eaa0:	623b      	str	r3, [r7, #32]
 800eaa2:	e7fe      	b.n	800eaa2 <xTimerGenericCommand+0x2a>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 800eaa4:	4b19      	ldr	r3, [pc, #100]	; (800eb0c <xTimerGenericCommand+0x94>)
 800eaa6:	681b      	ldr	r3, [r3, #0]
 800eaa8:	2b00      	cmp	r3, #0
 800eaaa:	d02a      	beq.n	800eb02 <xTimerGenericCommand+0x8a>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 800eaac:	68bb      	ldr	r3, [r7, #8]
 800eaae:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 800eab4:	68fb      	ldr	r3, [r7, #12]
 800eab6:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 800eab8:	68bb      	ldr	r3, [r7, #8]
 800eaba:	2b05      	cmp	r3, #5
 800eabc:	dc18      	bgt.n	800eaf0 <xTimerGenericCommand+0x78>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 800eabe:	f7ff feb5 	bl	800e82c <xTaskGetSchedulerState>
 800eac2:	4603      	mov	r3, r0
 800eac4:	2b02      	cmp	r3, #2
 800eac6:	d109      	bne.n	800eadc <xTimerGenericCommand+0x64>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 800eac8:	4b10      	ldr	r3, [pc, #64]	; (800eb0c <xTimerGenericCommand+0x94>)
 800eaca:	6818      	ldr	r0, [r3, #0]
 800eacc:	f107 0110 	add.w	r1, r7, #16
 800ead0:	2300      	movs	r3, #0
 800ead2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ead4:	f7fe fccc 	bl	800d470 <xQueueGenericSend>
 800ead8:	6278      	str	r0, [r7, #36]	; 0x24
 800eada:	e012      	b.n	800eb02 <xTimerGenericCommand+0x8a>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 800eadc:	4b0b      	ldr	r3, [pc, #44]	; (800eb0c <xTimerGenericCommand+0x94>)
 800eade:	6818      	ldr	r0, [r3, #0]
 800eae0:	f107 0110 	add.w	r1, r7, #16
 800eae4:	2300      	movs	r3, #0
 800eae6:	2200      	movs	r2, #0
 800eae8:	f7fe fcc2 	bl	800d470 <xQueueGenericSend>
 800eaec:	6278      	str	r0, [r7, #36]	; 0x24
 800eaee:	e008      	b.n	800eb02 <xTimerGenericCommand+0x8a>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800eaf0:	4b06      	ldr	r3, [pc, #24]	; (800eb0c <xTimerGenericCommand+0x94>)
 800eaf2:	6818      	ldr	r0, [r3, #0]
 800eaf4:	f107 0110 	add.w	r1, r7, #16
 800eaf8:	2300      	movs	r3, #0
 800eafa:	683a      	ldr	r2, [r7, #0]
 800eafc:	f7fe fdb2 	bl	800d664 <xQueueGenericSendFromISR>
 800eb00:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 800eb02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800eb04:	4618      	mov	r0, r3
 800eb06:	3728      	adds	r7, #40	; 0x28
 800eb08:	46bd      	mov	sp, r7
 800eb0a:	bd80      	pop	{r7, pc}
 800eb0c:	2000166c 	.word	0x2000166c

0800eb10 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 800eb10:	b580      	push	{r7, lr}
 800eb12:	b088      	sub	sp, #32
 800eb14:	af02      	add	r7, sp, #8
 800eb16:	6078      	str	r0, [r7, #4]
 800eb18:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800eb1a:	4b22      	ldr	r3, [pc, #136]	; (800eba4 <prvProcessExpiredTimer+0x94>)
 800eb1c:	681b      	ldr	r3, [r3, #0]
 800eb1e:	68db      	ldr	r3, [r3, #12]
 800eb20:	68db      	ldr	r3, [r3, #12]
 800eb22:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800eb24:	697b      	ldr	r3, [r7, #20]
 800eb26:	3304      	adds	r3, #4
 800eb28:	4618      	mov	r0, r3
 800eb2a:	f7fe fb79 	bl	800d220 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800eb2e:	697b      	ldr	r3, [r7, #20]
 800eb30:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb34:	f003 0304 	and.w	r3, r3, #4
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d021      	beq.n	800eb80 <prvProcessExpiredTimer+0x70>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800eb3c:	697b      	ldr	r3, [r7, #20]
 800eb3e:	699a      	ldr	r2, [r3, #24]
 800eb40:	687b      	ldr	r3, [r7, #4]
 800eb42:	18d1      	adds	r1, r2, r3
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	683a      	ldr	r2, [r7, #0]
 800eb48:	6978      	ldr	r0, [r7, #20]
 800eb4a:	f000 f8d1 	bl	800ecf0 <prvInsertTimerInActiveList>
 800eb4e:	4603      	mov	r3, r0
 800eb50:	2b00      	cmp	r3, #0
 800eb52:	d01e      	beq.n	800eb92 <prvProcessExpiredTimer+0x82>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800eb54:	2300      	movs	r3, #0
 800eb56:	9300      	str	r3, [sp, #0]
 800eb58:	2300      	movs	r3, #0
 800eb5a:	687a      	ldr	r2, [r7, #4]
 800eb5c:	2100      	movs	r1, #0
 800eb5e:	6978      	ldr	r0, [r7, #20]
 800eb60:	f7ff ff8a 	bl	800ea78 <xTimerGenericCommand>
 800eb64:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 800eb66:	693b      	ldr	r3, [r7, #16]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d112      	bne.n	800eb92 <prvProcessExpiredTimer+0x82>
 800eb6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eb70:	f383 8811 	msr	BASEPRI, r3
 800eb74:	f3bf 8f6f 	isb	sy
 800eb78:	f3bf 8f4f 	dsb	sy
 800eb7c:	60fb      	str	r3, [r7, #12]
 800eb7e:	e7fe      	b.n	800eb7e <prvProcessExpiredTimer+0x6e>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eb80:	697b      	ldr	r3, [r7, #20]
 800eb82:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eb86:	f023 0301 	bic.w	r3, r3, #1
 800eb8a:	b2da      	uxtb	r2, r3
 800eb8c:	697b      	ldr	r3, [r7, #20]
 800eb8e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800eb92:	697b      	ldr	r3, [r7, #20]
 800eb94:	6a1b      	ldr	r3, [r3, #32]
 800eb96:	6978      	ldr	r0, [r7, #20]
 800eb98:	4798      	blx	r3
}
 800eb9a:	bf00      	nop
 800eb9c:	3718      	adds	r7, #24
 800eb9e:	46bd      	mov	sp, r7
 800eba0:	bd80      	pop	{r7, pc}
 800eba2:	bf00      	nop
 800eba4:	20001664 	.word	0x20001664

0800eba8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 800eba8:	b580      	push	{r7, lr}
 800ebaa:	b084      	sub	sp, #16
 800ebac:	af00      	add	r7, sp, #0
 800ebae:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ebb0:	f107 0308 	add.w	r3, r7, #8
 800ebb4:	4618      	mov	r0, r3
 800ebb6:	f000 f857 	bl	800ec68 <prvGetNextExpireTime>
 800ebba:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 800ebbc:	68bb      	ldr	r3, [r7, #8]
 800ebbe:	4619      	mov	r1, r3
 800ebc0:	68f8      	ldr	r0, [r7, #12]
 800ebc2:	f000 f803 	bl	800ebcc <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 800ebc6:	f000 f8d5 	bl	800ed74 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 800ebca:	e7f1      	b.n	800ebb0 <prvTimerTask+0x8>

0800ebcc <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 800ebcc:	b580      	push	{r7, lr}
 800ebce:	b084      	sub	sp, #16
 800ebd0:	af00      	add	r7, sp, #0
 800ebd2:	6078      	str	r0, [r7, #4]
 800ebd4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 800ebd6:	f7ff fa57 	bl	800e088 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800ebda:	f107 0308 	add.w	r3, r7, #8
 800ebde:	4618      	mov	r0, r3
 800ebe0:	f000 f866 	bl	800ecb0 <prvSampleTimeNow>
 800ebe4:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 800ebe6:	68bb      	ldr	r3, [r7, #8]
 800ebe8:	2b00      	cmp	r3, #0
 800ebea:	d130      	bne.n	800ec4e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800ebec:	683b      	ldr	r3, [r7, #0]
 800ebee:	2b00      	cmp	r3, #0
 800ebf0:	d10a      	bne.n	800ec08 <prvProcessTimerOrBlockTask+0x3c>
 800ebf2:	687a      	ldr	r2, [r7, #4]
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	429a      	cmp	r2, r3
 800ebf8:	d806      	bhi.n	800ec08 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800ebfa:	f7ff fa53 	bl	800e0a4 <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800ebfe:	68f9      	ldr	r1, [r7, #12]
 800ec00:	6878      	ldr	r0, [r7, #4]
 800ec02:	f7ff ff85 	bl	800eb10 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 800ec06:	e024      	b.n	800ec52 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 800ec08:	683b      	ldr	r3, [r7, #0]
 800ec0a:	2b00      	cmp	r3, #0
 800ec0c:	d008      	beq.n	800ec20 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800ec0e:	4b13      	ldr	r3, [pc, #76]	; (800ec5c <prvProcessTimerOrBlockTask+0x90>)
 800ec10:	681b      	ldr	r3, [r3, #0]
 800ec12:	681b      	ldr	r3, [r3, #0]
 800ec14:	2b00      	cmp	r3, #0
 800ec16:	d101      	bne.n	800ec1c <prvProcessTimerOrBlockTask+0x50>
 800ec18:	2301      	movs	r3, #1
 800ec1a:	e000      	b.n	800ec1e <prvProcessTimerOrBlockTask+0x52>
 800ec1c:	2300      	movs	r3, #0
 800ec1e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 800ec20:	4b0f      	ldr	r3, [pc, #60]	; (800ec60 <prvProcessTimerOrBlockTask+0x94>)
 800ec22:	6818      	ldr	r0, [r3, #0]
 800ec24:	687a      	ldr	r2, [r7, #4]
 800ec26:	68fb      	ldr	r3, [r7, #12]
 800ec28:	1ad3      	subs	r3, r2, r3
 800ec2a:	683a      	ldr	r2, [r7, #0]
 800ec2c:	4619      	mov	r1, r3
 800ec2e:	f7fe ffc1 	bl	800dbb4 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 800ec32:	f7ff fa37 	bl	800e0a4 <xTaskResumeAll>
 800ec36:	4603      	mov	r3, r0
 800ec38:	2b00      	cmp	r3, #0
 800ec3a:	d10a      	bne.n	800ec52 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800ec3c:	4b09      	ldr	r3, [pc, #36]	; (800ec64 <prvProcessTimerOrBlockTask+0x98>)
 800ec3e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec42:	601a      	str	r2, [r3, #0]
 800ec44:	f3bf 8f4f 	dsb	sy
 800ec48:	f3bf 8f6f 	isb	sy
}
 800ec4c:	e001      	b.n	800ec52 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800ec4e:	f7ff fa29 	bl	800e0a4 <xTaskResumeAll>
}
 800ec52:	bf00      	nop
 800ec54:	3710      	adds	r7, #16
 800ec56:	46bd      	mov	sp, r7
 800ec58:	bd80      	pop	{r7, pc}
 800ec5a:	bf00      	nop
 800ec5c:	20001668 	.word	0x20001668
 800ec60:	2000166c 	.word	0x2000166c
 800ec64:	e000ed04 	.word	0xe000ed04

0800ec68 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 800ec68:	b480      	push	{r7}
 800ec6a:	b085      	sub	sp, #20
 800ec6c:	af00      	add	r7, sp, #0
 800ec6e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 800ec70:	4b0e      	ldr	r3, [pc, #56]	; (800ecac <prvGetNextExpireTime+0x44>)
 800ec72:	681b      	ldr	r3, [r3, #0]
 800ec74:	681b      	ldr	r3, [r3, #0]
 800ec76:	2b00      	cmp	r3, #0
 800ec78:	d101      	bne.n	800ec7e <prvGetNextExpireTime+0x16>
 800ec7a:	2201      	movs	r2, #1
 800ec7c:	e000      	b.n	800ec80 <prvGetNextExpireTime+0x18>
 800ec7e:	2200      	movs	r2, #0
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 800ec84:	687b      	ldr	r3, [r7, #4]
 800ec86:	681b      	ldr	r3, [r3, #0]
 800ec88:	2b00      	cmp	r3, #0
 800ec8a:	d105      	bne.n	800ec98 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ec8c:	4b07      	ldr	r3, [pc, #28]	; (800ecac <prvGetNextExpireTime+0x44>)
 800ec8e:	681b      	ldr	r3, [r3, #0]
 800ec90:	68db      	ldr	r3, [r3, #12]
 800ec92:	681b      	ldr	r3, [r3, #0]
 800ec94:	60fb      	str	r3, [r7, #12]
 800ec96:	e001      	b.n	800ec9c <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 800ec98:	2300      	movs	r3, #0
 800ec9a:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 800ec9c:	68fb      	ldr	r3, [r7, #12]
}
 800ec9e:	4618      	mov	r0, r3
 800eca0:	3714      	adds	r7, #20
 800eca2:	46bd      	mov	sp, r7
 800eca4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800eca8:	4770      	bx	lr
 800ecaa:	bf00      	nop
 800ecac:	20001664 	.word	0x20001664

0800ecb0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b084      	sub	sp, #16
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 800ecb8:	f7ff fa90 	bl	800e1dc <xTaskGetTickCount>
 800ecbc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 800ecbe:	4b0b      	ldr	r3, [pc, #44]	; (800ecec <prvSampleTimeNow+0x3c>)
 800ecc0:	681b      	ldr	r3, [r3, #0]
 800ecc2:	68fa      	ldr	r2, [r7, #12]
 800ecc4:	429a      	cmp	r2, r3
 800ecc6:	d205      	bcs.n	800ecd4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 800ecc8:	f000 f930 	bl	800ef2c <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 800eccc:	687b      	ldr	r3, [r7, #4]
 800ecce:	2201      	movs	r2, #1
 800ecd0:	601a      	str	r2, [r3, #0]
 800ecd2:	e002      	b.n	800ecda <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 800ecd4:	687b      	ldr	r3, [r7, #4]
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 800ecda:	4a04      	ldr	r2, [pc, #16]	; (800ecec <prvSampleTimeNow+0x3c>)
 800ecdc:	68fb      	ldr	r3, [r7, #12]
 800ecde:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 800ece0:	68fb      	ldr	r3, [r7, #12]
}
 800ece2:	4618      	mov	r0, r3
 800ece4:	3710      	adds	r7, #16
 800ece6:	46bd      	mov	sp, r7
 800ece8:	bd80      	pop	{r7, pc}
 800ecea:	bf00      	nop
 800ecec:	20001674 	.word	0x20001674

0800ecf0 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 800ecf0:	b580      	push	{r7, lr}
 800ecf2:	b086      	sub	sp, #24
 800ecf4:	af00      	add	r7, sp, #0
 800ecf6:	60f8      	str	r0, [r7, #12]
 800ecf8:	60b9      	str	r1, [r7, #8]
 800ecfa:	607a      	str	r2, [r7, #4]
 800ecfc:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 800ecfe:	2300      	movs	r3, #0
 800ed00:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 800ed02:	68fb      	ldr	r3, [r7, #12]
 800ed04:	68ba      	ldr	r2, [r7, #8]
 800ed06:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ed08:	68fb      	ldr	r3, [r7, #12]
 800ed0a:	68fa      	ldr	r2, [r7, #12]
 800ed0c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 800ed0e:	68ba      	ldr	r2, [r7, #8]
 800ed10:	687b      	ldr	r3, [r7, #4]
 800ed12:	429a      	cmp	r2, r3
 800ed14:	d812      	bhi.n	800ed3c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800ed16:	687a      	ldr	r2, [r7, #4]
 800ed18:	683b      	ldr	r3, [r7, #0]
 800ed1a:	1ad2      	subs	r2, r2, r3
 800ed1c:	68fb      	ldr	r3, [r7, #12]
 800ed1e:	699b      	ldr	r3, [r3, #24]
 800ed20:	429a      	cmp	r2, r3
 800ed22:	d302      	bcc.n	800ed2a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 800ed24:	2301      	movs	r3, #1
 800ed26:	617b      	str	r3, [r7, #20]
 800ed28:	e01b      	b.n	800ed62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 800ed2a:	4b10      	ldr	r3, [pc, #64]	; (800ed6c <prvInsertTimerInActiveList+0x7c>)
 800ed2c:	681a      	ldr	r2, [r3, #0]
 800ed2e:	68fb      	ldr	r3, [r7, #12]
 800ed30:	3304      	adds	r3, #4
 800ed32:	4619      	mov	r1, r3
 800ed34:	4610      	mov	r0, r2
 800ed36:	f7fe fa3a 	bl	800d1ae <vListInsert>
 800ed3a:	e012      	b.n	800ed62 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 800ed3c:	687a      	ldr	r2, [r7, #4]
 800ed3e:	683b      	ldr	r3, [r7, #0]
 800ed40:	429a      	cmp	r2, r3
 800ed42:	d206      	bcs.n	800ed52 <prvInsertTimerInActiveList+0x62>
 800ed44:	68ba      	ldr	r2, [r7, #8]
 800ed46:	683b      	ldr	r3, [r7, #0]
 800ed48:	429a      	cmp	r2, r3
 800ed4a:	d302      	bcc.n	800ed52 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 800ed4c:	2301      	movs	r3, #1
 800ed4e:	617b      	str	r3, [r7, #20]
 800ed50:	e007      	b.n	800ed62 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ed52:	4b07      	ldr	r3, [pc, #28]	; (800ed70 <prvInsertTimerInActiveList+0x80>)
 800ed54:	681a      	ldr	r2, [r3, #0]
 800ed56:	68fb      	ldr	r3, [r7, #12]
 800ed58:	3304      	adds	r3, #4
 800ed5a:	4619      	mov	r1, r3
 800ed5c:	4610      	mov	r0, r2
 800ed5e:	f7fe fa26 	bl	800d1ae <vListInsert>
		}
	}

	return xProcessTimerNow;
 800ed62:	697b      	ldr	r3, [r7, #20]
}
 800ed64:	4618      	mov	r0, r3
 800ed66:	3718      	adds	r7, #24
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd80      	pop	{r7, pc}
 800ed6c:	20001668 	.word	0x20001668
 800ed70:	20001664 	.word	0x20001664

0800ed74 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 800ed74:	b580      	push	{r7, lr}
 800ed76:	b08e      	sub	sp, #56	; 0x38
 800ed78:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ed7a:	e0c6      	b.n	800ef0a <prvProcessReceivedCommands+0x196>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	2b00      	cmp	r3, #0
 800ed80:	da17      	bge.n	800edb2 <prvProcessReceivedCommands+0x3e>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 800ed82:	1d3b      	adds	r3, r7, #4
 800ed84:	3304      	adds	r3, #4
 800ed86:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 800ed88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ed8a:	2b00      	cmp	r3, #0
 800ed8c:	d109      	bne.n	800eda2 <prvProcessReceivedCommands+0x2e>
 800ed8e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ed92:	f383 8811 	msr	BASEPRI, r3
 800ed96:	f3bf 8f6f 	isb	sy
 800ed9a:	f3bf 8f4f 	dsb	sy
 800ed9e:	61fb      	str	r3, [r7, #28]
 800eda0:	e7fe      	b.n	800eda0 <prvProcessReceivedCommands+0x2c>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 800eda2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800eda4:	681b      	ldr	r3, [r3, #0]
 800eda6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800eda8:	6850      	ldr	r0, [r2, #4]
 800edaa:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800edac:	6892      	ldr	r2, [r2, #8]
 800edae:	4611      	mov	r1, r2
 800edb0:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 800edb2:	687b      	ldr	r3, [r7, #4]
 800edb4:	2b00      	cmp	r3, #0
 800edb6:	f2c0 80a7 	blt.w	800ef08 <prvProcessReceivedCommands+0x194>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 800edba:	68fb      	ldr	r3, [r7, #12]
 800edbc:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 800edbe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc0:	695b      	ldr	r3, [r3, #20]
 800edc2:	2b00      	cmp	r3, #0
 800edc4:	d004      	beq.n	800edd0 <prvProcessReceivedCommands+0x5c>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800edc6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800edc8:	3304      	adds	r3, #4
 800edca:	4618      	mov	r0, r3
 800edcc:	f7fe fa28 	bl	800d220 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 800edd0:	463b      	mov	r3, r7
 800edd2:	4618      	mov	r0, r3
 800edd4:	f7ff ff6c 	bl	800ecb0 <prvSampleTimeNow>
 800edd8:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 800edda:	687b      	ldr	r3, [r7, #4]
 800eddc:	2b09      	cmp	r3, #9
 800edde:	f200 8094 	bhi.w	800ef0a <prvProcessReceivedCommands+0x196>
 800ede2:	a201      	add	r2, pc, #4	; (adr r2, 800ede8 <prvProcessReceivedCommands+0x74>)
 800ede4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ede8:	0800ee11 	.word	0x0800ee11
 800edec:	0800ee11 	.word	0x0800ee11
 800edf0:	0800ee11 	.word	0x0800ee11
 800edf4:	0800ee83 	.word	0x0800ee83
 800edf8:	0800ee97 	.word	0x0800ee97
 800edfc:	0800eedf 	.word	0x0800eedf
 800ee00:	0800ee11 	.word	0x0800ee11
 800ee04:	0800ee11 	.word	0x0800ee11
 800ee08:	0800ee83 	.word	0x0800ee83
 800ee0c:	0800ee97 	.word	0x0800ee97
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ee10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee12:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee16:	f043 0301 	orr.w	r3, r3, #1
 800ee1a:	b2da      	uxtb	r2, r3
 800ee1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee1e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 800ee22:	68ba      	ldr	r2, [r7, #8]
 800ee24:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee26:	699b      	ldr	r3, [r3, #24]
 800ee28:	18d1      	adds	r1, r2, r3
 800ee2a:	68bb      	ldr	r3, [r7, #8]
 800ee2c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee2e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee30:	f7ff ff5e 	bl	800ecf0 <prvInsertTimerInActiveList>
 800ee34:	4603      	mov	r3, r0
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d067      	beq.n	800ef0a <prvProcessReceivedCommands+0x196>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ee3a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee3c:	6a1b      	ldr	r3, [r3, #32]
 800ee3e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee40:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ee42:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee44:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee48:	f003 0304 	and.w	r3, r3, #4
 800ee4c:	2b00      	cmp	r3, #0
 800ee4e:	d05c      	beq.n	800ef0a <prvProcessReceivedCommands+0x196>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 800ee50:	68ba      	ldr	r2, [r7, #8]
 800ee52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee54:	699b      	ldr	r3, [r3, #24]
 800ee56:	441a      	add	r2, r3
 800ee58:	2300      	movs	r3, #0
 800ee5a:	9300      	str	r3, [sp, #0]
 800ee5c:	2300      	movs	r3, #0
 800ee5e:	2100      	movs	r1, #0
 800ee60:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800ee62:	f7ff fe09 	bl	800ea78 <xTimerGenericCommand>
 800ee66:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 800ee68:	6a3b      	ldr	r3, [r7, #32]
 800ee6a:	2b00      	cmp	r3, #0
 800ee6c:	d14d      	bne.n	800ef0a <prvProcessReceivedCommands+0x196>
 800ee6e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ee72:	f383 8811 	msr	BASEPRI, r3
 800ee76:	f3bf 8f6f 	isb	sy
 800ee7a:	f3bf 8f4f 	dsb	sy
 800ee7e:	61bb      	str	r3, [r7, #24]
 800ee80:	e7fe      	b.n	800ee80 <prvProcessReceivedCommands+0x10c>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800ee82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee84:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee88:	f023 0301 	bic.w	r3, r3, #1
 800ee8c:	b2da      	uxtb	r2, r3
 800ee8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee90:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 800ee94:	e039      	b.n	800ef0a <prvProcessReceivedCommands+0x196>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 800ee96:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ee98:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ee9c:	f043 0301 	orr.w	r3, r3, #1
 800eea0:	b2da      	uxtb	r2, r3
 800eea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eea4:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 800eea8:	68ba      	ldr	r2, [r7, #8]
 800eeaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeac:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 800eeae:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eeb0:	699b      	ldr	r3, [r3, #24]
 800eeb2:	2b00      	cmp	r3, #0
 800eeb4:	d109      	bne.n	800eeca <prvProcessReceivedCommands+0x156>
 800eeb6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800eeba:	f383 8811 	msr	BASEPRI, r3
 800eebe:	f3bf 8f6f 	isb	sy
 800eec2:	f3bf 8f4f 	dsb	sy
 800eec6:	617b      	str	r3, [r7, #20]
 800eec8:	e7fe      	b.n	800eec8 <prvProcessReceivedCommands+0x154>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 800eeca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eecc:	699a      	ldr	r2, [r3, #24]
 800eece:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed0:	18d1      	adds	r1, r2, r3
 800eed2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eed4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800eed6:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eed8:	f7ff ff0a 	bl	800ecf0 <prvInsertTimerInActiveList>
					break;
 800eedc:	e015      	b.n	800ef0a <prvProcessReceivedCommands+0x196>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 800eede:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eee0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eee4:	f003 0302 	and.w	r3, r3, #2
 800eee8:	2b00      	cmp	r3, #0
 800eeea:	d103      	bne.n	800eef4 <prvProcessReceivedCommands+0x180>
						{
							vPortFree( pxTimer );
 800eeec:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800eeee:	f000 fbc1 	bl	800f674 <vPortFree>
 800eef2:	e00a      	b.n	800ef0a <prvProcessReceivedCommands+0x196>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 800eef4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800eef6:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800eefa:	f023 0301 	bic.w	r3, r3, #1
 800eefe:	b2da      	uxtb	r2, r3
 800ef00:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ef02:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 800ef06:	e000      	b.n	800ef0a <prvProcessReceivedCommands+0x196>

				default	:
					/* Don't expect to get here. */
					break;
			}
		}
 800ef08:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 800ef0a:	4b07      	ldr	r3, [pc, #28]	; (800ef28 <prvProcessReceivedCommands+0x1b4>)
 800ef0c:	681b      	ldr	r3, [r3, #0]
 800ef0e:	1d39      	adds	r1, r7, #4
 800ef10:	2200      	movs	r2, #0
 800ef12:	4618      	mov	r0, r3
 800ef14:	f7fe fc3a 	bl	800d78c <xQueueReceive>
 800ef18:	4603      	mov	r3, r0
 800ef1a:	2b00      	cmp	r3, #0
 800ef1c:	f47f af2e 	bne.w	800ed7c <prvProcessReceivedCommands+0x8>
	}
}
 800ef20:	bf00      	nop
 800ef22:	3730      	adds	r7, #48	; 0x30
 800ef24:	46bd      	mov	sp, r7
 800ef26:	bd80      	pop	{r7, pc}
 800ef28:	2000166c 	.word	0x2000166c

0800ef2c <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 800ef2c:	b580      	push	{r7, lr}
 800ef2e:	b088      	sub	sp, #32
 800ef30:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800ef32:	e047      	b.n	800efc4 <prvSwitchTimerLists+0x98>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 800ef34:	4b2d      	ldr	r3, [pc, #180]	; (800efec <prvSwitchTimerLists+0xc0>)
 800ef36:	681b      	ldr	r3, [r3, #0]
 800ef38:	68db      	ldr	r3, [r3, #12]
 800ef3a:	681b      	ldr	r3, [r3, #0]
 800ef3c:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800ef3e:	4b2b      	ldr	r3, [pc, #172]	; (800efec <prvSwitchTimerLists+0xc0>)
 800ef40:	681b      	ldr	r3, [r3, #0]
 800ef42:	68db      	ldr	r3, [r3, #12]
 800ef44:	68db      	ldr	r3, [r3, #12]
 800ef46:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 800ef48:	68fb      	ldr	r3, [r7, #12]
 800ef4a:	3304      	adds	r3, #4
 800ef4c:	4618      	mov	r0, r3
 800ef4e:	f7fe f967 	bl	800d220 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 800ef52:	68fb      	ldr	r3, [r7, #12]
 800ef54:	6a1b      	ldr	r3, [r3, #32]
 800ef56:	68f8      	ldr	r0, [r7, #12]
 800ef58:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 800ef60:	f003 0304 	and.w	r3, r3, #4
 800ef64:	2b00      	cmp	r3, #0
 800ef66:	d02d      	beq.n	800efc4 <prvSwitchTimerLists+0x98>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 800ef68:	68fb      	ldr	r3, [r7, #12]
 800ef6a:	699b      	ldr	r3, [r3, #24]
 800ef6c:	693a      	ldr	r2, [r7, #16]
 800ef6e:	4413      	add	r3, r2
 800ef70:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 800ef72:	68ba      	ldr	r2, [r7, #8]
 800ef74:	693b      	ldr	r3, [r7, #16]
 800ef76:	429a      	cmp	r2, r3
 800ef78:	d90e      	bls.n	800ef98 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	68ba      	ldr	r2, [r7, #8]
 800ef7e:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	68fa      	ldr	r2, [r7, #12]
 800ef84:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 800ef86:	4b19      	ldr	r3, [pc, #100]	; (800efec <prvSwitchTimerLists+0xc0>)
 800ef88:	681a      	ldr	r2, [r3, #0]
 800ef8a:	68fb      	ldr	r3, [r7, #12]
 800ef8c:	3304      	adds	r3, #4
 800ef8e:	4619      	mov	r1, r3
 800ef90:	4610      	mov	r0, r2
 800ef92:	f7fe f90c 	bl	800d1ae <vListInsert>
 800ef96:	e015      	b.n	800efc4 <prvSwitchTimerLists+0x98>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 800ef98:	2300      	movs	r3, #0
 800ef9a:	9300      	str	r3, [sp, #0]
 800ef9c:	2300      	movs	r3, #0
 800ef9e:	693a      	ldr	r2, [r7, #16]
 800efa0:	2100      	movs	r1, #0
 800efa2:	68f8      	ldr	r0, [r7, #12]
 800efa4:	f7ff fd68 	bl	800ea78 <xTimerGenericCommand>
 800efa8:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 800efaa:	687b      	ldr	r3, [r7, #4]
 800efac:	2b00      	cmp	r3, #0
 800efae:	d109      	bne.n	800efc4 <prvSwitchTimerLists+0x98>
 800efb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800efb4:	f383 8811 	msr	BASEPRI, r3
 800efb8:	f3bf 8f6f 	isb	sy
 800efbc:	f3bf 8f4f 	dsb	sy
 800efc0:	603b      	str	r3, [r7, #0]
 800efc2:	e7fe      	b.n	800efc2 <prvSwitchTimerLists+0x96>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 800efc4:	4b09      	ldr	r3, [pc, #36]	; (800efec <prvSwitchTimerLists+0xc0>)
 800efc6:	681b      	ldr	r3, [r3, #0]
 800efc8:	681b      	ldr	r3, [r3, #0]
 800efca:	2b00      	cmp	r3, #0
 800efcc:	d1b2      	bne.n	800ef34 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 800efce:	4b07      	ldr	r3, [pc, #28]	; (800efec <prvSwitchTimerLists+0xc0>)
 800efd0:	681b      	ldr	r3, [r3, #0]
 800efd2:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 800efd4:	4b06      	ldr	r3, [pc, #24]	; (800eff0 <prvSwitchTimerLists+0xc4>)
 800efd6:	681b      	ldr	r3, [r3, #0]
 800efd8:	4a04      	ldr	r2, [pc, #16]	; (800efec <prvSwitchTimerLists+0xc0>)
 800efda:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 800efdc:	4a04      	ldr	r2, [pc, #16]	; (800eff0 <prvSwitchTimerLists+0xc4>)
 800efde:	697b      	ldr	r3, [r7, #20]
 800efe0:	6013      	str	r3, [r2, #0]
}
 800efe2:	bf00      	nop
 800efe4:	3718      	adds	r7, #24
 800efe6:	46bd      	mov	sp, r7
 800efe8:	bd80      	pop	{r7, pc}
 800efea:	bf00      	nop
 800efec:	20001664 	.word	0x20001664
 800eff0:	20001668 	.word	0x20001668

0800eff4 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 800eff4:	b580      	push	{r7, lr}
 800eff6:	b082      	sub	sp, #8
 800eff8:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 800effa:	f000 f95f 	bl	800f2bc <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 800effe:	4b15      	ldr	r3, [pc, #84]	; (800f054 <prvCheckForValidListAndQueue+0x60>)
 800f000:	681b      	ldr	r3, [r3, #0]
 800f002:	2b00      	cmp	r3, #0
 800f004:	d120      	bne.n	800f048 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 800f006:	4814      	ldr	r0, [pc, #80]	; (800f058 <prvCheckForValidListAndQueue+0x64>)
 800f008:	f7fe f880 	bl	800d10c <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 800f00c:	4813      	ldr	r0, [pc, #76]	; (800f05c <prvCheckForValidListAndQueue+0x68>)
 800f00e:	f7fe f87d 	bl	800d10c <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 800f012:	4b13      	ldr	r3, [pc, #76]	; (800f060 <prvCheckForValidListAndQueue+0x6c>)
 800f014:	4a10      	ldr	r2, [pc, #64]	; (800f058 <prvCheckForValidListAndQueue+0x64>)
 800f016:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 800f018:	4b12      	ldr	r3, [pc, #72]	; (800f064 <prvCheckForValidListAndQueue+0x70>)
 800f01a:	4a10      	ldr	r2, [pc, #64]	; (800f05c <prvCheckForValidListAndQueue+0x68>)
 800f01c:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 800f01e:	2300      	movs	r3, #0
 800f020:	9300      	str	r3, [sp, #0]
 800f022:	4b11      	ldr	r3, [pc, #68]	; (800f068 <prvCheckForValidListAndQueue+0x74>)
 800f024:	4a11      	ldr	r2, [pc, #68]	; (800f06c <prvCheckForValidListAndQueue+0x78>)
 800f026:	2110      	movs	r1, #16
 800f028:	200a      	movs	r0, #10
 800f02a:	f7fe f98b 	bl	800d344 <xQueueGenericCreateStatic>
 800f02e:	4602      	mov	r2, r0
 800f030:	4b08      	ldr	r3, [pc, #32]	; (800f054 <prvCheckForValidListAndQueue+0x60>)
 800f032:	601a      	str	r2, [r3, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 800f034:	4b07      	ldr	r3, [pc, #28]	; (800f054 <prvCheckForValidListAndQueue+0x60>)
 800f036:	681b      	ldr	r3, [r3, #0]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d005      	beq.n	800f048 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 800f03c:	4b05      	ldr	r3, [pc, #20]	; (800f054 <prvCheckForValidListAndQueue+0x60>)
 800f03e:	681b      	ldr	r3, [r3, #0]
 800f040:	490b      	ldr	r1, [pc, #44]	; (800f070 <prvCheckForValidListAndQueue+0x7c>)
 800f042:	4618      	mov	r0, r3
 800f044:	f7fe fd8e 	bl	800db64 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 800f048:	f000 f966 	bl	800f318 <vPortExitCritical>
}
 800f04c:	bf00      	nop
 800f04e:	46bd      	mov	sp, r7
 800f050:	bd80      	pop	{r7, pc}
 800f052:	bf00      	nop
 800f054:	2000166c 	.word	0x2000166c
 800f058:	2000163c 	.word	0x2000163c
 800f05c:	20001650 	.word	0x20001650
 800f060:	20001664 	.word	0x20001664
 800f064:	20001668 	.word	0x20001668
 800f068:	20001718 	.word	0x20001718
 800f06c:	20001678 	.word	0x20001678
 800f070:	08011ae4 	.word	0x08011ae4

0800f074 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 800f074:	b480      	push	{r7}
 800f076:	b085      	sub	sp, #20
 800f078:	af00      	add	r7, sp, #0
 800f07a:	60f8      	str	r0, [r7, #12]
 800f07c:	60b9      	str	r1, [r7, #8]
 800f07e:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	3b04      	subs	r3, #4
 800f084:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 800f086:	68fb      	ldr	r3, [r7, #12]
 800f088:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 800f08c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	3b04      	subs	r3, #4
 800f092:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 800f094:	68bb      	ldr	r3, [r7, #8]
 800f096:	f023 0201 	bic.w	r2, r3, #1
 800f09a:	68fb      	ldr	r3, [r7, #12]
 800f09c:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 800f09e:	68fb      	ldr	r3, [r7, #12]
 800f0a0:	3b04      	subs	r3, #4
 800f0a2:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 800f0a4:	4a0c      	ldr	r2, [pc, #48]	; (800f0d8 <pxPortInitialiseStack+0x64>)
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	3b14      	subs	r3, #20
 800f0ae:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 800f0b0:	687a      	ldr	r2, [r7, #4]
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	3b04      	subs	r3, #4
 800f0ba:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 800f0bc:	68fb      	ldr	r3, [r7, #12]
 800f0be:	f06f 0202 	mvn.w	r2, #2
 800f0c2:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 800f0c4:	68fb      	ldr	r3, [r7, #12]
 800f0c6:	3b20      	subs	r3, #32
 800f0c8:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 800f0ca:	68fb      	ldr	r3, [r7, #12]
}
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	3714      	adds	r7, #20
 800f0d0:	46bd      	mov	sp, r7
 800f0d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f0d6:	4770      	bx	lr
 800f0d8:	0800f0dd 	.word	0x0800f0dd

0800f0dc <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 800f0dc:	b480      	push	{r7}
 800f0de:	b085      	sub	sp, #20
 800f0e0:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 800f0e2:	2300      	movs	r3, #0
 800f0e4:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 800f0e6:	4b11      	ldr	r3, [pc, #68]	; (800f12c <prvTaskExitError+0x50>)
 800f0e8:	681b      	ldr	r3, [r3, #0]
 800f0ea:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 800f0ee:	d009      	beq.n	800f104 <prvTaskExitError+0x28>
 800f0f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f0f4:	f383 8811 	msr	BASEPRI, r3
 800f0f8:	f3bf 8f6f 	isb	sy
 800f0fc:	f3bf 8f4f 	dsb	sy
 800f100:	60fb      	str	r3, [r7, #12]
 800f102:	e7fe      	b.n	800f102 <prvTaskExitError+0x26>
 800f104:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f108:	f383 8811 	msr	BASEPRI, r3
 800f10c:	f3bf 8f6f 	isb	sy
 800f110:	f3bf 8f4f 	dsb	sy
 800f114:	60bb      	str	r3, [r7, #8]
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 800f116:	bf00      	nop
 800f118:	687b      	ldr	r3, [r7, #4]
 800f11a:	2b00      	cmp	r3, #0
 800f11c:	d0fc      	beq.n	800f118 <prvTaskExitError+0x3c>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 800f11e:	bf00      	nop
 800f120:	3714      	adds	r7, #20
 800f122:	46bd      	mov	sp, r7
 800f124:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f128:	4770      	bx	lr
 800f12a:	bf00      	nop
 800f12c:	20000010 	.word	0x20000010

0800f130 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 800f130:	4b07      	ldr	r3, [pc, #28]	; (800f150 <pxCurrentTCBConst2>)
 800f132:	6819      	ldr	r1, [r3, #0]
 800f134:	6808      	ldr	r0, [r1, #0]
 800f136:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f13a:	f380 8809 	msr	PSP, r0
 800f13e:	f3bf 8f6f 	isb	sy
 800f142:	f04f 0000 	mov.w	r0, #0
 800f146:	f380 8811 	msr	BASEPRI, r0
 800f14a:	4770      	bx	lr
 800f14c:	f3af 8000 	nop.w

0800f150 <pxCurrentTCBConst2>:
 800f150:	2000113c 	.word	0x2000113c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 800f154:	bf00      	nop
 800f156:	bf00      	nop

0800f158 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 800f158:	4808      	ldr	r0, [pc, #32]	; (800f17c <prvPortStartFirstTask+0x24>)
 800f15a:	6800      	ldr	r0, [r0, #0]
 800f15c:	6800      	ldr	r0, [r0, #0]
 800f15e:	f380 8808 	msr	MSP, r0
 800f162:	f04f 0000 	mov.w	r0, #0
 800f166:	f380 8814 	msr	CONTROL, r0
 800f16a:	b662      	cpsie	i
 800f16c:	b661      	cpsie	f
 800f16e:	f3bf 8f4f 	dsb	sy
 800f172:	f3bf 8f6f 	isb	sy
 800f176:	df00      	svc	0
 800f178:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 800f17a:	bf00      	nop
 800f17c:	e000ed08 	.word	0xe000ed08

0800f180 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 800f180:	b580      	push	{r7, lr}
 800f182:	b086      	sub	sp, #24
 800f184:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 800f186:	4b44      	ldr	r3, [pc, #272]	; (800f298 <xPortStartScheduler+0x118>)
 800f188:	681b      	ldr	r3, [r3, #0]
 800f18a:	4a44      	ldr	r2, [pc, #272]	; (800f29c <xPortStartScheduler+0x11c>)
 800f18c:	4293      	cmp	r3, r2
 800f18e:	d109      	bne.n	800f1a4 <xPortStartScheduler+0x24>
 800f190:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f194:	f383 8811 	msr	BASEPRI, r3
 800f198:	f3bf 8f6f 	isb	sy
 800f19c:	f3bf 8f4f 	dsb	sy
 800f1a0:	613b      	str	r3, [r7, #16]
 800f1a2:	e7fe      	b.n	800f1a2 <xPortStartScheduler+0x22>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 800f1a4:	4b3c      	ldr	r3, [pc, #240]	; (800f298 <xPortStartScheduler+0x118>)
 800f1a6:	681b      	ldr	r3, [r3, #0]
 800f1a8:	4a3d      	ldr	r2, [pc, #244]	; (800f2a0 <xPortStartScheduler+0x120>)
 800f1aa:	4293      	cmp	r3, r2
 800f1ac:	d109      	bne.n	800f1c2 <xPortStartScheduler+0x42>
 800f1ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1b2:	f383 8811 	msr	BASEPRI, r3
 800f1b6:	f3bf 8f6f 	isb	sy
 800f1ba:	f3bf 8f4f 	dsb	sy
 800f1be:	60fb      	str	r3, [r7, #12]
 800f1c0:	e7fe      	b.n	800f1c0 <xPortStartScheduler+0x40>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 800f1c2:	4b38      	ldr	r3, [pc, #224]	; (800f2a4 <xPortStartScheduler+0x124>)
 800f1c4:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 800f1c6:	697b      	ldr	r3, [r7, #20]
 800f1c8:	781b      	ldrb	r3, [r3, #0]
 800f1ca:	b2db      	uxtb	r3, r3
 800f1cc:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 800f1ce:	697b      	ldr	r3, [r7, #20]
 800f1d0:	22ff      	movs	r2, #255	; 0xff
 800f1d2:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 800f1d4:	697b      	ldr	r3, [r7, #20]
 800f1d6:	781b      	ldrb	r3, [r3, #0]
 800f1d8:	b2db      	uxtb	r3, r3
 800f1da:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 800f1dc:	78fb      	ldrb	r3, [r7, #3]
 800f1de:	b2db      	uxtb	r3, r3
 800f1e0:	f003 0350 	and.w	r3, r3, #80	; 0x50
 800f1e4:	b2da      	uxtb	r2, r3
 800f1e6:	4b30      	ldr	r3, [pc, #192]	; (800f2a8 <xPortStartScheduler+0x128>)
 800f1e8:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 800f1ea:	4b30      	ldr	r3, [pc, #192]	; (800f2ac <xPortStartScheduler+0x12c>)
 800f1ec:	2207      	movs	r2, #7
 800f1ee:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f1f0:	e009      	b.n	800f206 <xPortStartScheduler+0x86>
		{
			ulMaxPRIGROUPValue--;
 800f1f2:	4b2e      	ldr	r3, [pc, #184]	; (800f2ac <xPortStartScheduler+0x12c>)
 800f1f4:	681b      	ldr	r3, [r3, #0]
 800f1f6:	3b01      	subs	r3, #1
 800f1f8:	4a2c      	ldr	r2, [pc, #176]	; (800f2ac <xPortStartScheduler+0x12c>)
 800f1fa:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 800f1fc:	78fb      	ldrb	r3, [r7, #3]
 800f1fe:	b2db      	uxtb	r3, r3
 800f200:	005b      	lsls	r3, r3, #1
 800f202:	b2db      	uxtb	r3, r3
 800f204:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 800f206:	78fb      	ldrb	r3, [r7, #3]
 800f208:	b2db      	uxtb	r3, r3
 800f20a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800f20e:	2b80      	cmp	r3, #128	; 0x80
 800f210:	d0ef      	beq.n	800f1f2 <xPortStartScheduler+0x72>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 800f212:	4b26      	ldr	r3, [pc, #152]	; (800f2ac <xPortStartScheduler+0x12c>)
 800f214:	681b      	ldr	r3, [r3, #0]
 800f216:	f1c3 0307 	rsb	r3, r3, #7
 800f21a:	2b04      	cmp	r3, #4
 800f21c:	d009      	beq.n	800f232 <xPortStartScheduler+0xb2>
 800f21e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f222:	f383 8811 	msr	BASEPRI, r3
 800f226:	f3bf 8f6f 	isb	sy
 800f22a:	f3bf 8f4f 	dsb	sy
 800f22e:	60bb      	str	r3, [r7, #8]
 800f230:	e7fe      	b.n	800f230 <xPortStartScheduler+0xb0>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 800f232:	4b1e      	ldr	r3, [pc, #120]	; (800f2ac <xPortStartScheduler+0x12c>)
 800f234:	681b      	ldr	r3, [r3, #0]
 800f236:	021b      	lsls	r3, r3, #8
 800f238:	4a1c      	ldr	r2, [pc, #112]	; (800f2ac <xPortStartScheduler+0x12c>)
 800f23a:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 800f23c:	4b1b      	ldr	r3, [pc, #108]	; (800f2ac <xPortStartScheduler+0x12c>)
 800f23e:	681b      	ldr	r3, [r3, #0]
 800f240:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 800f244:	4a19      	ldr	r2, [pc, #100]	; (800f2ac <xPortStartScheduler+0x12c>)
 800f246:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 800f248:	687b      	ldr	r3, [r7, #4]
 800f24a:	b2da      	uxtb	r2, r3
 800f24c:	697b      	ldr	r3, [r7, #20]
 800f24e:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 800f250:	4b17      	ldr	r3, [pc, #92]	; (800f2b0 <xPortStartScheduler+0x130>)
 800f252:	681b      	ldr	r3, [r3, #0]
 800f254:	4a16      	ldr	r2, [pc, #88]	; (800f2b0 <xPortStartScheduler+0x130>)
 800f256:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 800f25a:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 800f25c:	4b14      	ldr	r3, [pc, #80]	; (800f2b0 <xPortStartScheduler+0x130>)
 800f25e:	681b      	ldr	r3, [r3, #0]
 800f260:	4a13      	ldr	r2, [pc, #76]	; (800f2b0 <xPortStartScheduler+0x130>)
 800f262:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 800f266:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 800f268:	f000 f8d6 	bl	800f418 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 800f26c:	4b11      	ldr	r3, [pc, #68]	; (800f2b4 <xPortStartScheduler+0x134>)
 800f26e:	2200      	movs	r2, #0
 800f270:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 800f272:	f000 f8f5 	bl	800f460 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 800f276:	4b10      	ldr	r3, [pc, #64]	; (800f2b8 <xPortStartScheduler+0x138>)
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	4a0f      	ldr	r2, [pc, #60]	; (800f2b8 <xPortStartScheduler+0x138>)
 800f27c:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 800f280:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 800f282:	f7ff ff69 	bl	800f158 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 800f286:	f7ff f871 	bl	800e36c <vTaskSwitchContext>
	prvTaskExitError();
 800f28a:	f7ff ff27 	bl	800f0dc <prvTaskExitError>

	/* Should not get here! */
	return 0;
 800f28e:	2300      	movs	r3, #0
}
 800f290:	4618      	mov	r0, r3
 800f292:	3718      	adds	r7, #24
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}
 800f298:	e000ed00 	.word	0xe000ed00
 800f29c:	410fc271 	.word	0x410fc271
 800f2a0:	410fc270 	.word	0x410fc270
 800f2a4:	e000e400 	.word	0xe000e400
 800f2a8:	20001768 	.word	0x20001768
 800f2ac:	2000176c 	.word	0x2000176c
 800f2b0:	e000ed20 	.word	0xe000ed20
 800f2b4:	20000010 	.word	0x20000010
 800f2b8:	e000ef34 	.word	0xe000ef34

0800f2bc <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 800f2bc:	b480      	push	{r7}
 800f2be:	b083      	sub	sp, #12
 800f2c0:	af00      	add	r7, sp, #0
 800f2c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2c6:	f383 8811 	msr	BASEPRI, r3
 800f2ca:	f3bf 8f6f 	isb	sy
 800f2ce:	f3bf 8f4f 	dsb	sy
 800f2d2:	607b      	str	r3, [r7, #4]
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800f2d4:	4b0e      	ldr	r3, [pc, #56]	; (800f310 <vPortEnterCritical+0x54>)
 800f2d6:	681b      	ldr	r3, [r3, #0]
 800f2d8:	3301      	adds	r3, #1
 800f2da:	4a0d      	ldr	r2, [pc, #52]	; (800f310 <vPortEnterCritical+0x54>)
 800f2dc:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 800f2de:	4b0c      	ldr	r3, [pc, #48]	; (800f310 <vPortEnterCritical+0x54>)
 800f2e0:	681b      	ldr	r3, [r3, #0]
 800f2e2:	2b01      	cmp	r3, #1
 800f2e4:	d10e      	bne.n	800f304 <vPortEnterCritical+0x48>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 800f2e6:	4b0b      	ldr	r3, [pc, #44]	; (800f314 <vPortEnterCritical+0x58>)
 800f2e8:	681b      	ldr	r3, [r3, #0]
 800f2ea:	b2db      	uxtb	r3, r3
 800f2ec:	2b00      	cmp	r3, #0
 800f2ee:	d009      	beq.n	800f304 <vPortEnterCritical+0x48>
 800f2f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f2f4:	f383 8811 	msr	BASEPRI, r3
 800f2f8:	f3bf 8f6f 	isb	sy
 800f2fc:	f3bf 8f4f 	dsb	sy
 800f300:	603b      	str	r3, [r7, #0]
 800f302:	e7fe      	b.n	800f302 <vPortEnterCritical+0x46>
	}
}
 800f304:	bf00      	nop
 800f306:	370c      	adds	r7, #12
 800f308:	46bd      	mov	sp, r7
 800f30a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f30e:	4770      	bx	lr
 800f310:	20000010 	.word	0x20000010
 800f314:	e000ed04 	.word	0xe000ed04

0800f318 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 800f318:	b480      	push	{r7}
 800f31a:	b083      	sub	sp, #12
 800f31c:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800f31e:	4b11      	ldr	r3, [pc, #68]	; (800f364 <vPortExitCritical+0x4c>)
 800f320:	681b      	ldr	r3, [r3, #0]
 800f322:	2b00      	cmp	r3, #0
 800f324:	d109      	bne.n	800f33a <vPortExitCritical+0x22>
 800f326:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f32a:	f383 8811 	msr	BASEPRI, r3
 800f32e:	f3bf 8f6f 	isb	sy
 800f332:	f3bf 8f4f 	dsb	sy
 800f336:	607b      	str	r3, [r7, #4]
 800f338:	e7fe      	b.n	800f338 <vPortExitCritical+0x20>
	uxCriticalNesting--;
 800f33a:	4b0a      	ldr	r3, [pc, #40]	; (800f364 <vPortExitCritical+0x4c>)
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	3b01      	subs	r3, #1
 800f340:	4a08      	ldr	r2, [pc, #32]	; (800f364 <vPortExitCritical+0x4c>)
 800f342:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 800f344:	4b07      	ldr	r3, [pc, #28]	; (800f364 <vPortExitCritical+0x4c>)
 800f346:	681b      	ldr	r3, [r3, #0]
 800f348:	2b00      	cmp	r3, #0
 800f34a:	d104      	bne.n	800f356 <vPortExitCritical+0x3e>
 800f34c:	2300      	movs	r3, #0
 800f34e:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f350:	683b      	ldr	r3, [r7, #0]
 800f352:	f383 8811 	msr	BASEPRI, r3
	{
		portENABLE_INTERRUPTS();
	}
}
 800f356:	bf00      	nop
 800f358:	370c      	adds	r7, #12
 800f35a:	46bd      	mov	sp, r7
 800f35c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f360:	4770      	bx	lr
 800f362:	bf00      	nop
 800f364:	20000010 	.word	0x20000010
	...

0800f370 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 800f370:	f3ef 8009 	mrs	r0, PSP
 800f374:	f3bf 8f6f 	isb	sy
 800f378:	4b15      	ldr	r3, [pc, #84]	; (800f3d0 <pxCurrentTCBConst>)
 800f37a:	681a      	ldr	r2, [r3, #0]
 800f37c:	f01e 0f10 	tst.w	lr, #16
 800f380:	bf08      	it	eq
 800f382:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 800f386:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f38a:	6010      	str	r0, [r2, #0]
 800f38c:	e92d 0009 	stmdb	sp!, {r0, r3}
 800f390:	f04f 0050 	mov.w	r0, #80	; 0x50
 800f394:	f380 8811 	msr	BASEPRI, r0
 800f398:	f3bf 8f4f 	dsb	sy
 800f39c:	f3bf 8f6f 	isb	sy
 800f3a0:	f7fe ffe4 	bl	800e36c <vTaskSwitchContext>
 800f3a4:	f04f 0000 	mov.w	r0, #0
 800f3a8:	f380 8811 	msr	BASEPRI, r0
 800f3ac:	bc09      	pop	{r0, r3}
 800f3ae:	6819      	ldr	r1, [r3, #0]
 800f3b0:	6808      	ldr	r0, [r1, #0]
 800f3b2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f3b6:	f01e 0f10 	tst.w	lr, #16
 800f3ba:	bf08      	it	eq
 800f3bc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 800f3c0:	f380 8809 	msr	PSP, r0
 800f3c4:	f3bf 8f6f 	isb	sy
 800f3c8:	4770      	bx	lr
 800f3ca:	bf00      	nop
 800f3cc:	f3af 8000 	nop.w

0800f3d0 <pxCurrentTCBConst>:
 800f3d0:	2000113c 	.word	0x2000113c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 800f3d4:	bf00      	nop
 800f3d6:	bf00      	nop

0800f3d8 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 800f3d8:	b580      	push	{r7, lr}
 800f3da:	b082      	sub	sp, #8
 800f3dc:	af00      	add	r7, sp, #0
	__asm volatile
 800f3de:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3e2:	f383 8811 	msr	BASEPRI, r3
 800f3e6:	f3bf 8f6f 	isb	sy
 800f3ea:	f3bf 8f4f 	dsb	sy
 800f3ee:	607b      	str	r3, [r7, #4]
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 800f3f0:	f7fe ff04 	bl	800e1fc <xTaskIncrementTick>
 800f3f4:	4603      	mov	r3, r0
 800f3f6:	2b00      	cmp	r3, #0
 800f3f8:	d003      	beq.n	800f402 <SysTick_Handler+0x2a>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800f3fa:	4b06      	ldr	r3, [pc, #24]	; (800f414 <SysTick_Handler+0x3c>)
 800f3fc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f400:	601a      	str	r2, [r3, #0]
 800f402:	2300      	movs	r3, #0
 800f404:	603b      	str	r3, [r7, #0]
	__asm volatile
 800f406:	683b      	ldr	r3, [r7, #0]
 800f408:	f383 8811 	msr	BASEPRI, r3
		}
	}
	portENABLE_INTERRUPTS();
}
 800f40c:	bf00      	nop
 800f40e:	3708      	adds	r7, #8
 800f410:	46bd      	mov	sp, r7
 800f412:	bd80      	pop	{r7, pc}
 800f414:	e000ed04 	.word	0xe000ed04

0800f418 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800f418:	b480      	push	{r7}
 800f41a:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 800f41c:	4b0b      	ldr	r3, [pc, #44]	; (800f44c <vPortSetupTimerInterrupt+0x34>)
 800f41e:	2200      	movs	r2, #0
 800f420:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 800f422:	4b0b      	ldr	r3, [pc, #44]	; (800f450 <vPortSetupTimerInterrupt+0x38>)
 800f424:	2200      	movs	r2, #0
 800f426:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800f428:	4b0a      	ldr	r3, [pc, #40]	; (800f454 <vPortSetupTimerInterrupt+0x3c>)
 800f42a:	681b      	ldr	r3, [r3, #0]
 800f42c:	4a0a      	ldr	r2, [pc, #40]	; (800f458 <vPortSetupTimerInterrupt+0x40>)
 800f42e:	fba2 2303 	umull	r2, r3, r2, r3
 800f432:	099b      	lsrs	r3, r3, #6
 800f434:	4a09      	ldr	r2, [pc, #36]	; (800f45c <vPortSetupTimerInterrupt+0x44>)
 800f436:	3b01      	subs	r3, #1
 800f438:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800f43a:	4b04      	ldr	r3, [pc, #16]	; (800f44c <vPortSetupTimerInterrupt+0x34>)
 800f43c:	2207      	movs	r2, #7
 800f43e:	601a      	str	r2, [r3, #0]
}
 800f440:	bf00      	nop
 800f442:	46bd      	mov	sp, r7
 800f444:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f448:	4770      	bx	lr
 800f44a:	bf00      	nop
 800f44c:	e000e010 	.word	0xe000e010
 800f450:	e000e018 	.word	0xe000e018
 800f454:	20000004 	.word	0x20000004
 800f458:	10624dd3 	.word	0x10624dd3
 800f45c:	e000e014 	.word	0xe000e014

0800f460 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 800f460:	f8df 000c 	ldr.w	r0, [pc, #12]	; 800f470 <vPortEnableVFP+0x10>
 800f464:	6801      	ldr	r1, [r0, #0]
 800f466:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800f46a:	6001      	str	r1, [r0, #0]
 800f46c:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 800f46e:	bf00      	nop
 800f470:	e000ed88 	.word	0xe000ed88

0800f474 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 800f474:	b480      	push	{r7}
 800f476:	b085      	sub	sp, #20
 800f478:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 800f47a:	f3ef 8305 	mrs	r3, IPSR
 800f47e:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 800f480:	68fb      	ldr	r3, [r7, #12]
 800f482:	2b0f      	cmp	r3, #15
 800f484:	d913      	bls.n	800f4ae <vPortValidateInterruptPriority+0x3a>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 800f486:	4a16      	ldr	r2, [pc, #88]	; (800f4e0 <vPortValidateInterruptPriority+0x6c>)
 800f488:	68fb      	ldr	r3, [r7, #12]
 800f48a:	4413      	add	r3, r2
 800f48c:	781b      	ldrb	r3, [r3, #0]
 800f48e:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 800f490:	4b14      	ldr	r3, [pc, #80]	; (800f4e4 <vPortValidateInterruptPriority+0x70>)
 800f492:	781b      	ldrb	r3, [r3, #0]
 800f494:	7afa      	ldrb	r2, [r7, #11]
 800f496:	429a      	cmp	r2, r3
 800f498:	d209      	bcs.n	800f4ae <vPortValidateInterruptPriority+0x3a>
	__asm volatile
 800f49a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f49e:	f383 8811 	msr	BASEPRI, r3
 800f4a2:	f3bf 8f6f 	isb	sy
 800f4a6:	f3bf 8f4f 	dsb	sy
 800f4aa:	607b      	str	r3, [r7, #4]
 800f4ac:	e7fe      	b.n	800f4ac <vPortValidateInterruptPriority+0x38>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 800f4ae:	4b0e      	ldr	r3, [pc, #56]	; (800f4e8 <vPortValidateInterruptPriority+0x74>)
 800f4b0:	681b      	ldr	r3, [r3, #0]
 800f4b2:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 800f4b6:	4b0d      	ldr	r3, [pc, #52]	; (800f4ec <vPortValidateInterruptPriority+0x78>)
 800f4b8:	681b      	ldr	r3, [r3, #0]
 800f4ba:	429a      	cmp	r2, r3
 800f4bc:	d909      	bls.n	800f4d2 <vPortValidateInterruptPriority+0x5e>
 800f4be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f4c2:	f383 8811 	msr	BASEPRI, r3
 800f4c6:	f3bf 8f6f 	isb	sy
 800f4ca:	f3bf 8f4f 	dsb	sy
 800f4ce:	603b      	str	r3, [r7, #0]
 800f4d0:	e7fe      	b.n	800f4d0 <vPortValidateInterruptPriority+0x5c>
	}
 800f4d2:	bf00      	nop
 800f4d4:	3714      	adds	r7, #20
 800f4d6:	46bd      	mov	sp, r7
 800f4d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f4dc:	4770      	bx	lr
 800f4de:	bf00      	nop
 800f4e0:	e000e3f0 	.word	0xe000e3f0
 800f4e4:	20001768 	.word	0x20001768
 800f4e8:	e000ed0c 	.word	0xe000ed0c
 800f4ec:	2000176c 	.word	0x2000176c

0800f4f0 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b08a      	sub	sp, #40	; 0x28
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 800f4f8:	2300      	movs	r3, #0
 800f4fa:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 800f4fc:	f7fe fdc4 	bl	800e088 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 800f500:	4b57      	ldr	r3, [pc, #348]	; (800f660 <pvPortMalloc+0x170>)
 800f502:	681b      	ldr	r3, [r3, #0]
 800f504:	2b00      	cmp	r3, #0
 800f506:	d101      	bne.n	800f50c <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 800f508:	f000 f90c 	bl	800f724 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 800f50c:	4b55      	ldr	r3, [pc, #340]	; (800f664 <pvPortMalloc+0x174>)
 800f50e:	681a      	ldr	r2, [r3, #0]
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	4013      	ands	r3, r2
 800f514:	2b00      	cmp	r3, #0
 800f516:	f040 808c 	bne.w	800f632 <pvPortMalloc+0x142>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 800f51a:	687b      	ldr	r3, [r7, #4]
 800f51c:	2b00      	cmp	r3, #0
 800f51e:	d01c      	beq.n	800f55a <pvPortMalloc+0x6a>
			{
				xWantedSize += xHeapStructSize;
 800f520:	2208      	movs	r2, #8
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	4413      	add	r3, r2
 800f526:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 800f528:	687b      	ldr	r3, [r7, #4]
 800f52a:	f003 0307 	and.w	r3, r3, #7
 800f52e:	2b00      	cmp	r3, #0
 800f530:	d013      	beq.n	800f55a <pvPortMalloc+0x6a>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	f023 0307 	bic.w	r3, r3, #7
 800f538:	3308      	adds	r3, #8
 800f53a:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	f003 0307 	and.w	r3, r3, #7
 800f542:	2b00      	cmp	r3, #0
 800f544:	d009      	beq.n	800f55a <pvPortMalloc+0x6a>
 800f546:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f54a:	f383 8811 	msr	BASEPRI, r3
 800f54e:	f3bf 8f6f 	isb	sy
 800f552:	f3bf 8f4f 	dsb	sy
 800f556:	617b      	str	r3, [r7, #20]
 800f558:	e7fe      	b.n	800f558 <pvPortMalloc+0x68>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	2b00      	cmp	r3, #0
 800f55e:	d068      	beq.n	800f632 <pvPortMalloc+0x142>
 800f560:	4b41      	ldr	r3, [pc, #260]	; (800f668 <pvPortMalloc+0x178>)
 800f562:	681b      	ldr	r3, [r3, #0]
 800f564:	687a      	ldr	r2, [r7, #4]
 800f566:	429a      	cmp	r2, r3
 800f568:	d863      	bhi.n	800f632 <pvPortMalloc+0x142>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 800f56a:	4b40      	ldr	r3, [pc, #256]	; (800f66c <pvPortMalloc+0x17c>)
 800f56c:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 800f56e:	4b3f      	ldr	r3, [pc, #252]	; (800f66c <pvPortMalloc+0x17c>)
 800f570:	681b      	ldr	r3, [r3, #0]
 800f572:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f574:	e004      	b.n	800f580 <pvPortMalloc+0x90>
				{
					pxPreviousBlock = pxBlock;
 800f576:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f578:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 800f57a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f57c:	681b      	ldr	r3, [r3, #0]
 800f57e:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 800f580:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f582:	685b      	ldr	r3, [r3, #4]
 800f584:	687a      	ldr	r2, [r7, #4]
 800f586:	429a      	cmp	r2, r3
 800f588:	d903      	bls.n	800f592 <pvPortMalloc+0xa2>
 800f58a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f58c:	681b      	ldr	r3, [r3, #0]
 800f58e:	2b00      	cmp	r3, #0
 800f590:	d1f1      	bne.n	800f576 <pvPortMalloc+0x86>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 800f592:	4b33      	ldr	r3, [pc, #204]	; (800f660 <pvPortMalloc+0x170>)
 800f594:	681b      	ldr	r3, [r3, #0]
 800f596:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f598:	429a      	cmp	r2, r3
 800f59a:	d04a      	beq.n	800f632 <pvPortMalloc+0x142>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 800f59c:	6a3b      	ldr	r3, [r7, #32]
 800f59e:	681b      	ldr	r3, [r3, #0]
 800f5a0:	2208      	movs	r2, #8
 800f5a2:	4413      	add	r3, r2
 800f5a4:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 800f5a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5a8:	681a      	ldr	r2, [r3, #0]
 800f5aa:	6a3b      	ldr	r3, [r7, #32]
 800f5ac:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 800f5ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5b0:	685a      	ldr	r2, [r3, #4]
 800f5b2:	687b      	ldr	r3, [r7, #4]
 800f5b4:	1ad2      	subs	r2, r2, r3
 800f5b6:	2308      	movs	r3, #8
 800f5b8:	005b      	lsls	r3, r3, #1
 800f5ba:	429a      	cmp	r2, r3
 800f5bc:	d91e      	bls.n	800f5fc <pvPortMalloc+0x10c>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 800f5be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f5c0:	687b      	ldr	r3, [r7, #4]
 800f5c2:	4413      	add	r3, r2
 800f5c4:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 800f5c6:	69bb      	ldr	r3, [r7, #24]
 800f5c8:	f003 0307 	and.w	r3, r3, #7
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d009      	beq.n	800f5e4 <pvPortMalloc+0xf4>
 800f5d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5d4:	f383 8811 	msr	BASEPRI, r3
 800f5d8:	f3bf 8f6f 	isb	sy
 800f5dc:	f3bf 8f4f 	dsb	sy
 800f5e0:	613b      	str	r3, [r7, #16]
 800f5e2:	e7fe      	b.n	800f5e2 <pvPortMalloc+0xf2>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 800f5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5e6:	685a      	ldr	r2, [r3, #4]
 800f5e8:	687b      	ldr	r3, [r7, #4]
 800f5ea:	1ad2      	subs	r2, r2, r3
 800f5ec:	69bb      	ldr	r3, [r7, #24]
 800f5ee:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800f5f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f5f2:	687a      	ldr	r2, [r7, #4]
 800f5f4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 800f5f6:	69b8      	ldr	r0, [r7, #24]
 800f5f8:	f000 f8f6 	bl	800f7e8 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 800f5fc:	4b1a      	ldr	r3, [pc, #104]	; (800f668 <pvPortMalloc+0x178>)
 800f5fe:	681a      	ldr	r2, [r3, #0]
 800f600:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f602:	685b      	ldr	r3, [r3, #4]
 800f604:	1ad3      	subs	r3, r2, r3
 800f606:	4a18      	ldr	r2, [pc, #96]	; (800f668 <pvPortMalloc+0x178>)
 800f608:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 800f60a:	4b17      	ldr	r3, [pc, #92]	; (800f668 <pvPortMalloc+0x178>)
 800f60c:	681a      	ldr	r2, [r3, #0]
 800f60e:	4b18      	ldr	r3, [pc, #96]	; (800f670 <pvPortMalloc+0x180>)
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	429a      	cmp	r2, r3
 800f614:	d203      	bcs.n	800f61e <pvPortMalloc+0x12e>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 800f616:	4b14      	ldr	r3, [pc, #80]	; (800f668 <pvPortMalloc+0x178>)
 800f618:	681b      	ldr	r3, [r3, #0]
 800f61a:	4a15      	ldr	r2, [pc, #84]	; (800f670 <pvPortMalloc+0x180>)
 800f61c:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800f61e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f620:	685a      	ldr	r2, [r3, #4]
 800f622:	4b10      	ldr	r3, [pc, #64]	; (800f664 <pvPortMalloc+0x174>)
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	431a      	orrs	r2, r3
 800f628:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f62a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 800f62c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f62e:	2200      	movs	r2, #0
 800f630:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 800f632:	f7fe fd37 	bl	800e0a4 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800f636:	69fb      	ldr	r3, [r7, #28]
 800f638:	f003 0307 	and.w	r3, r3, #7
 800f63c:	2b00      	cmp	r3, #0
 800f63e:	d009      	beq.n	800f654 <pvPortMalloc+0x164>
 800f640:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f644:	f383 8811 	msr	BASEPRI, r3
 800f648:	f3bf 8f6f 	isb	sy
 800f64c:	f3bf 8f4f 	dsb	sy
 800f650:	60fb      	str	r3, [r7, #12]
 800f652:	e7fe      	b.n	800f652 <pvPortMalloc+0x162>
	return pvReturn;
 800f654:	69fb      	ldr	r3, [r7, #28]
}
 800f656:	4618      	mov	r0, r3
 800f658:	3728      	adds	r7, #40	; 0x28
 800f65a:	46bd      	mov	sp, r7
 800f65c:	bd80      	pop	{r7, pc}
 800f65e:	bf00      	nop
 800f660:	20005378 	.word	0x20005378
 800f664:	20005384 	.word	0x20005384
 800f668:	2000537c 	.word	0x2000537c
 800f66c:	20005370 	.word	0x20005370
 800f670:	20005380 	.word	0x20005380

0800f674 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 800f674:	b580      	push	{r7, lr}
 800f676:	b086      	sub	sp, #24
 800f678:	af00      	add	r7, sp, #0
 800f67a:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 800f67c:	687b      	ldr	r3, [r7, #4]
 800f67e:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 800f680:	687b      	ldr	r3, [r7, #4]
 800f682:	2b00      	cmp	r3, #0
 800f684:	d046      	beq.n	800f714 <vPortFree+0xa0>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 800f686:	2308      	movs	r3, #8
 800f688:	425b      	negs	r3, r3
 800f68a:	697a      	ldr	r2, [r7, #20]
 800f68c:	4413      	add	r3, r2
 800f68e:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 800f690:	697b      	ldr	r3, [r7, #20]
 800f692:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 800f694:	693b      	ldr	r3, [r7, #16]
 800f696:	685a      	ldr	r2, [r3, #4]
 800f698:	4b20      	ldr	r3, [pc, #128]	; (800f71c <vPortFree+0xa8>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	4013      	ands	r3, r2
 800f69e:	2b00      	cmp	r3, #0
 800f6a0:	d109      	bne.n	800f6b6 <vPortFree+0x42>
 800f6a2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6a6:	f383 8811 	msr	BASEPRI, r3
 800f6aa:	f3bf 8f6f 	isb	sy
 800f6ae:	f3bf 8f4f 	dsb	sy
 800f6b2:	60fb      	str	r3, [r7, #12]
 800f6b4:	e7fe      	b.n	800f6b4 <vPortFree+0x40>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 800f6b6:	693b      	ldr	r3, [r7, #16]
 800f6b8:	681b      	ldr	r3, [r3, #0]
 800f6ba:	2b00      	cmp	r3, #0
 800f6bc:	d009      	beq.n	800f6d2 <vPortFree+0x5e>
 800f6be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6c2:	f383 8811 	msr	BASEPRI, r3
 800f6c6:	f3bf 8f6f 	isb	sy
 800f6ca:	f3bf 8f4f 	dsb	sy
 800f6ce:	60bb      	str	r3, [r7, #8]
 800f6d0:	e7fe      	b.n	800f6d0 <vPortFree+0x5c>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 800f6d2:	693b      	ldr	r3, [r7, #16]
 800f6d4:	685a      	ldr	r2, [r3, #4]
 800f6d6:	4b11      	ldr	r3, [pc, #68]	; (800f71c <vPortFree+0xa8>)
 800f6d8:	681b      	ldr	r3, [r3, #0]
 800f6da:	4013      	ands	r3, r2
 800f6dc:	2b00      	cmp	r3, #0
 800f6de:	d019      	beq.n	800f714 <vPortFree+0xa0>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 800f6e0:	693b      	ldr	r3, [r7, #16]
 800f6e2:	681b      	ldr	r3, [r3, #0]
 800f6e4:	2b00      	cmp	r3, #0
 800f6e6:	d115      	bne.n	800f714 <vPortFree+0xa0>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 800f6e8:	693b      	ldr	r3, [r7, #16]
 800f6ea:	685a      	ldr	r2, [r3, #4]
 800f6ec:	4b0b      	ldr	r3, [pc, #44]	; (800f71c <vPortFree+0xa8>)
 800f6ee:	681b      	ldr	r3, [r3, #0]
 800f6f0:	43db      	mvns	r3, r3
 800f6f2:	401a      	ands	r2, r3
 800f6f4:	693b      	ldr	r3, [r7, #16]
 800f6f6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 800f6f8:	f7fe fcc6 	bl	800e088 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800f6fc:	693b      	ldr	r3, [r7, #16]
 800f6fe:	685a      	ldr	r2, [r3, #4]
 800f700:	4b07      	ldr	r3, [pc, #28]	; (800f720 <vPortFree+0xac>)
 800f702:	681b      	ldr	r3, [r3, #0]
 800f704:	4413      	add	r3, r2
 800f706:	4a06      	ldr	r2, [pc, #24]	; (800f720 <vPortFree+0xac>)
 800f708:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800f70a:	6938      	ldr	r0, [r7, #16]
 800f70c:	f000 f86c 	bl	800f7e8 <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 800f710:	f7fe fcc8 	bl	800e0a4 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800f714:	bf00      	nop
 800f716:	3718      	adds	r7, #24
 800f718:	46bd      	mov	sp, r7
 800f71a:	bd80      	pop	{r7, pc}
 800f71c:	20005384 	.word	0x20005384
 800f720:	2000537c 	.word	0x2000537c

0800f724 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 800f724:	b480      	push	{r7}
 800f726:	b085      	sub	sp, #20
 800f728:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800f72a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800f72e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 800f730:	4b27      	ldr	r3, [pc, #156]	; (800f7d0 <prvHeapInit+0xac>)
 800f732:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 800f734:	68fb      	ldr	r3, [r7, #12]
 800f736:	f003 0307 	and.w	r3, r3, #7
 800f73a:	2b00      	cmp	r3, #0
 800f73c:	d00c      	beq.n	800f758 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 800f73e:	68fb      	ldr	r3, [r7, #12]
 800f740:	3307      	adds	r3, #7
 800f742:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f744:	68fb      	ldr	r3, [r7, #12]
 800f746:	f023 0307 	bic.w	r3, r3, #7
 800f74a:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 800f74c:	68ba      	ldr	r2, [r7, #8]
 800f74e:	68fb      	ldr	r3, [r7, #12]
 800f750:	1ad3      	subs	r3, r2, r3
 800f752:	4a1f      	ldr	r2, [pc, #124]	; (800f7d0 <prvHeapInit+0xac>)
 800f754:	4413      	add	r3, r2
 800f756:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 800f758:	68fb      	ldr	r3, [r7, #12]
 800f75a:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 800f75c:	4a1d      	ldr	r2, [pc, #116]	; (800f7d4 <prvHeapInit+0xb0>)
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 800f762:	4b1c      	ldr	r3, [pc, #112]	; (800f7d4 <prvHeapInit+0xb0>)
 800f764:	2200      	movs	r2, #0
 800f766:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 800f768:	687b      	ldr	r3, [r7, #4]
 800f76a:	68ba      	ldr	r2, [r7, #8]
 800f76c:	4413      	add	r3, r2
 800f76e:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 800f770:	2208      	movs	r2, #8
 800f772:	68fb      	ldr	r3, [r7, #12]
 800f774:	1a9b      	subs	r3, r3, r2
 800f776:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 800f778:	68fb      	ldr	r3, [r7, #12]
 800f77a:	f023 0307 	bic.w	r3, r3, #7
 800f77e:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 800f780:	68fb      	ldr	r3, [r7, #12]
 800f782:	4a15      	ldr	r2, [pc, #84]	; (800f7d8 <prvHeapInit+0xb4>)
 800f784:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 800f786:	4b14      	ldr	r3, [pc, #80]	; (800f7d8 <prvHeapInit+0xb4>)
 800f788:	681b      	ldr	r3, [r3, #0]
 800f78a:	2200      	movs	r2, #0
 800f78c:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 800f78e:	4b12      	ldr	r3, [pc, #72]	; (800f7d8 <prvHeapInit+0xb4>)
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	2200      	movs	r2, #0
 800f794:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 800f796:	687b      	ldr	r3, [r7, #4]
 800f798:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800f79a:	683b      	ldr	r3, [r7, #0]
 800f79c:	68fa      	ldr	r2, [r7, #12]
 800f79e:	1ad2      	subs	r2, r2, r3
 800f7a0:	683b      	ldr	r3, [r7, #0]
 800f7a2:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 800f7a4:	4b0c      	ldr	r3, [pc, #48]	; (800f7d8 <prvHeapInit+0xb4>)
 800f7a6:	681a      	ldr	r2, [r3, #0]
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f7ac:	683b      	ldr	r3, [r7, #0]
 800f7ae:	685b      	ldr	r3, [r3, #4]
 800f7b0:	4a0a      	ldr	r2, [pc, #40]	; (800f7dc <prvHeapInit+0xb8>)
 800f7b2:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800f7b4:	683b      	ldr	r3, [r7, #0]
 800f7b6:	685b      	ldr	r3, [r3, #4]
 800f7b8:	4a09      	ldr	r2, [pc, #36]	; (800f7e0 <prvHeapInit+0xbc>)
 800f7ba:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800f7bc:	4b09      	ldr	r3, [pc, #36]	; (800f7e4 <prvHeapInit+0xc0>)
 800f7be:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 800f7c2:	601a      	str	r2, [r3, #0]
}
 800f7c4:	bf00      	nop
 800f7c6:	3714      	adds	r7, #20
 800f7c8:	46bd      	mov	sp, r7
 800f7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f7ce:	4770      	bx	lr
 800f7d0:	20001770 	.word	0x20001770
 800f7d4:	20005370 	.word	0x20005370
 800f7d8:	20005378 	.word	0x20005378
 800f7dc:	20005380 	.word	0x20005380
 800f7e0:	2000537c 	.word	0x2000537c
 800f7e4:	20005384 	.word	0x20005384

0800f7e8 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 800f7e8:	b480      	push	{r7}
 800f7ea:	b085      	sub	sp, #20
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 800f7f0:	4b28      	ldr	r3, [pc, #160]	; (800f894 <prvInsertBlockIntoFreeList+0xac>)
 800f7f2:	60fb      	str	r3, [r7, #12]
 800f7f4:	e002      	b.n	800f7fc <prvInsertBlockIntoFreeList+0x14>
 800f7f6:	68fb      	ldr	r3, [r7, #12]
 800f7f8:	681b      	ldr	r3, [r3, #0]
 800f7fa:	60fb      	str	r3, [r7, #12]
 800f7fc:	68fb      	ldr	r3, [r7, #12]
 800f7fe:	681b      	ldr	r3, [r3, #0]
 800f800:	687a      	ldr	r2, [r7, #4]
 800f802:	429a      	cmp	r2, r3
 800f804:	d8f7      	bhi.n	800f7f6 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 800f806:	68fb      	ldr	r3, [r7, #12]
 800f808:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800f80a:	68fb      	ldr	r3, [r7, #12]
 800f80c:	685b      	ldr	r3, [r3, #4]
 800f80e:	68ba      	ldr	r2, [r7, #8]
 800f810:	4413      	add	r3, r2
 800f812:	687a      	ldr	r2, [r7, #4]
 800f814:	429a      	cmp	r2, r3
 800f816:	d108      	bne.n	800f82a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 800f818:	68fb      	ldr	r3, [r7, #12]
 800f81a:	685a      	ldr	r2, [r3, #4]
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	685b      	ldr	r3, [r3, #4]
 800f820:	441a      	add	r2, r3
 800f822:	68fb      	ldr	r3, [r7, #12]
 800f824:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800f82a:	687b      	ldr	r3, [r7, #4]
 800f82c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	685b      	ldr	r3, [r3, #4]
 800f832:	68ba      	ldr	r2, [r7, #8]
 800f834:	441a      	add	r2, r3
 800f836:	68fb      	ldr	r3, [r7, #12]
 800f838:	681b      	ldr	r3, [r3, #0]
 800f83a:	429a      	cmp	r2, r3
 800f83c:	d118      	bne.n	800f870 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	681a      	ldr	r2, [r3, #0]
 800f842:	4b15      	ldr	r3, [pc, #84]	; (800f898 <prvInsertBlockIntoFreeList+0xb0>)
 800f844:	681b      	ldr	r3, [r3, #0]
 800f846:	429a      	cmp	r2, r3
 800f848:	d00d      	beq.n	800f866 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 800f84a:	687b      	ldr	r3, [r7, #4]
 800f84c:	685a      	ldr	r2, [r3, #4]
 800f84e:	68fb      	ldr	r3, [r7, #12]
 800f850:	681b      	ldr	r3, [r3, #0]
 800f852:	685b      	ldr	r3, [r3, #4]
 800f854:	441a      	add	r2, r3
 800f856:	687b      	ldr	r3, [r7, #4]
 800f858:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 800f85a:	68fb      	ldr	r3, [r7, #12]
 800f85c:	681b      	ldr	r3, [r3, #0]
 800f85e:	681a      	ldr	r2, [r3, #0]
 800f860:	687b      	ldr	r3, [r7, #4]
 800f862:	601a      	str	r2, [r3, #0]
 800f864:	e008      	b.n	800f878 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 800f866:	4b0c      	ldr	r3, [pc, #48]	; (800f898 <prvInsertBlockIntoFreeList+0xb0>)
 800f868:	681a      	ldr	r2, [r3, #0]
 800f86a:	687b      	ldr	r3, [r7, #4]
 800f86c:	601a      	str	r2, [r3, #0]
 800f86e:	e003      	b.n	800f878 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 800f870:	68fb      	ldr	r3, [r7, #12]
 800f872:	681a      	ldr	r2, [r3, #0]
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 800f878:	68fa      	ldr	r2, [r7, #12]
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	429a      	cmp	r2, r3
 800f87e:	d002      	beq.n	800f886 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 800f880:	68fb      	ldr	r3, [r7, #12]
 800f882:	687a      	ldr	r2, [r7, #4]
 800f884:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 800f886:	bf00      	nop
 800f888:	3714      	adds	r7, #20
 800f88a:	46bd      	mov	sp, r7
 800f88c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f890:	4770      	bx	lr
 800f892:	bf00      	nop
 800f894:	20005370 	.word	0x20005370
 800f898:	20005378 	.word	0x20005378

0800f89c <atof>:
 800f89c:	2100      	movs	r1, #0
 800f89e:	f000 be4f 	b.w	8010540 <strtod>
	...

0800f8a4 <__errno>:
 800f8a4:	4b01      	ldr	r3, [pc, #4]	; (800f8ac <__errno+0x8>)
 800f8a6:	6818      	ldr	r0, [r3, #0]
 800f8a8:	4770      	bx	lr
 800f8aa:	bf00      	nop
 800f8ac:	20000014 	.word	0x20000014

0800f8b0 <__libc_init_array>:
 800f8b0:	b570      	push	{r4, r5, r6, lr}
 800f8b2:	4e0d      	ldr	r6, [pc, #52]	; (800f8e8 <__libc_init_array+0x38>)
 800f8b4:	4c0d      	ldr	r4, [pc, #52]	; (800f8ec <__libc_init_array+0x3c>)
 800f8b6:	1ba4      	subs	r4, r4, r6
 800f8b8:	10a4      	asrs	r4, r4, #2
 800f8ba:	2500      	movs	r5, #0
 800f8bc:	42a5      	cmp	r5, r4
 800f8be:	d109      	bne.n	800f8d4 <__libc_init_array+0x24>
 800f8c0:	4e0b      	ldr	r6, [pc, #44]	; (800f8f0 <__libc_init_array+0x40>)
 800f8c2:	4c0c      	ldr	r4, [pc, #48]	; (800f8f4 <__libc_init_array+0x44>)
 800f8c4:	f001 fe2c 	bl	8011520 <_init>
 800f8c8:	1ba4      	subs	r4, r4, r6
 800f8ca:	10a4      	asrs	r4, r4, #2
 800f8cc:	2500      	movs	r5, #0
 800f8ce:	42a5      	cmp	r5, r4
 800f8d0:	d105      	bne.n	800f8de <__libc_init_array+0x2e>
 800f8d2:	bd70      	pop	{r4, r5, r6, pc}
 800f8d4:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f8d8:	4798      	blx	r3
 800f8da:	3501      	adds	r5, #1
 800f8dc:	e7ee      	b.n	800f8bc <__libc_init_array+0xc>
 800f8de:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
 800f8e2:	4798      	blx	r3
 800f8e4:	3501      	adds	r5, #1
 800f8e6:	e7f2      	b.n	800f8ce <__libc_init_array+0x1e>
 800f8e8:	08052418 	.word	0x08052418
 800f8ec:	08052418 	.word	0x08052418
 800f8f0:	08052418 	.word	0x08052418
 800f8f4:	0805241c 	.word	0x0805241c

0800f8f8 <memcpy>:
 800f8f8:	b510      	push	{r4, lr}
 800f8fa:	1e43      	subs	r3, r0, #1
 800f8fc:	440a      	add	r2, r1
 800f8fe:	4291      	cmp	r1, r2
 800f900:	d100      	bne.n	800f904 <memcpy+0xc>
 800f902:	bd10      	pop	{r4, pc}
 800f904:	f811 4b01 	ldrb.w	r4, [r1], #1
 800f908:	f803 4f01 	strb.w	r4, [r3, #1]!
 800f90c:	e7f7      	b.n	800f8fe <memcpy+0x6>

0800f90e <memset>:
 800f90e:	4402      	add	r2, r0
 800f910:	4603      	mov	r3, r0
 800f912:	4293      	cmp	r3, r2
 800f914:	d100      	bne.n	800f918 <memset+0xa>
 800f916:	4770      	bx	lr
 800f918:	f803 1b01 	strb.w	r1, [r3], #1
 800f91c:	e7f9      	b.n	800f912 <memset+0x4>

0800f91e <sulp>:
 800f91e:	b570      	push	{r4, r5, r6, lr}
 800f920:	4604      	mov	r4, r0
 800f922:	460d      	mov	r5, r1
 800f924:	ec45 4b10 	vmov	d0, r4, r5
 800f928:	4616      	mov	r6, r2
 800f92a:	f001 fc23 	bl	8011174 <__ulp>
 800f92e:	ec51 0b10 	vmov	r0, r1, d0
 800f932:	b17e      	cbz	r6, 800f954 <sulp+0x36>
 800f934:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800f938:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	dd09      	ble.n	800f954 <sulp+0x36>
 800f940:	051b      	lsls	r3, r3, #20
 800f942:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800f946:	2400      	movs	r4, #0
 800f948:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800f94c:	4622      	mov	r2, r4
 800f94e:	462b      	mov	r3, r5
 800f950:	f7f0 fe0a 	bl	8000568 <__aeabi_dmul>
 800f954:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f958 <_strtod_l>:
 800f958:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800f95c:	461f      	mov	r7, r3
 800f95e:	b0a1      	sub	sp, #132	; 0x84
 800f960:	2300      	movs	r3, #0
 800f962:	4681      	mov	r9, r0
 800f964:	4638      	mov	r0, r7
 800f966:	460e      	mov	r6, r1
 800f968:	9217      	str	r2, [sp, #92]	; 0x5c
 800f96a:	931c      	str	r3, [sp, #112]	; 0x70
 800f96c:	f001 f922 	bl	8010bb4 <__localeconv_l>
 800f970:	4680      	mov	r8, r0
 800f972:	6800      	ldr	r0, [r0, #0]
 800f974:	f7f0 fc34 	bl	80001e0 <strlen>
 800f978:	f04f 0a00 	mov.w	sl, #0
 800f97c:	4604      	mov	r4, r0
 800f97e:	f04f 0b00 	mov.w	fp, #0
 800f982:	961b      	str	r6, [sp, #108]	; 0x6c
 800f984:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800f986:	781a      	ldrb	r2, [r3, #0]
 800f988:	2a0d      	cmp	r2, #13
 800f98a:	d832      	bhi.n	800f9f2 <_strtod_l+0x9a>
 800f98c:	2a09      	cmp	r2, #9
 800f98e:	d236      	bcs.n	800f9fe <_strtod_l+0xa6>
 800f990:	2a00      	cmp	r2, #0
 800f992:	d03e      	beq.n	800fa12 <_strtod_l+0xba>
 800f994:	2300      	movs	r3, #0
 800f996:	930d      	str	r3, [sp, #52]	; 0x34
 800f998:	9d1b      	ldr	r5, [sp, #108]	; 0x6c
 800f99a:	782b      	ldrb	r3, [r5, #0]
 800f99c:	2b30      	cmp	r3, #48	; 0x30
 800f99e:	f040 80ac 	bne.w	800fafa <_strtod_l+0x1a2>
 800f9a2:	786b      	ldrb	r3, [r5, #1]
 800f9a4:	2b58      	cmp	r3, #88	; 0x58
 800f9a6:	d001      	beq.n	800f9ac <_strtod_l+0x54>
 800f9a8:	2b78      	cmp	r3, #120	; 0x78
 800f9aa:	d167      	bne.n	800fa7c <_strtod_l+0x124>
 800f9ac:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f9ae:	9301      	str	r3, [sp, #4]
 800f9b0:	ab1c      	add	r3, sp, #112	; 0x70
 800f9b2:	9300      	str	r3, [sp, #0]
 800f9b4:	9702      	str	r7, [sp, #8]
 800f9b6:	ab1d      	add	r3, sp, #116	; 0x74
 800f9b8:	4a88      	ldr	r2, [pc, #544]	; (800fbdc <_strtod_l+0x284>)
 800f9ba:	a91b      	add	r1, sp, #108	; 0x6c
 800f9bc:	4648      	mov	r0, r9
 800f9be:	f000 fe22 	bl	8010606 <__gethex>
 800f9c2:	f010 0407 	ands.w	r4, r0, #7
 800f9c6:	4606      	mov	r6, r0
 800f9c8:	d005      	beq.n	800f9d6 <_strtod_l+0x7e>
 800f9ca:	2c06      	cmp	r4, #6
 800f9cc:	d12b      	bne.n	800fa26 <_strtod_l+0xce>
 800f9ce:	3501      	adds	r5, #1
 800f9d0:	2300      	movs	r3, #0
 800f9d2:	951b      	str	r5, [sp, #108]	; 0x6c
 800f9d4:	930d      	str	r3, [sp, #52]	; 0x34
 800f9d6:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800f9d8:	2b00      	cmp	r3, #0
 800f9da:	f040 859a 	bne.w	8010512 <_strtod_l+0xbba>
 800f9de:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800f9e0:	b1e3      	cbz	r3, 800fa1c <_strtod_l+0xc4>
 800f9e2:	4652      	mov	r2, sl
 800f9e4:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800f9e8:	ec43 2b10 	vmov	d0, r2, r3
 800f9ec:	b021      	add	sp, #132	; 0x84
 800f9ee:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800f9f2:	2a2b      	cmp	r2, #43	; 0x2b
 800f9f4:	d015      	beq.n	800fa22 <_strtod_l+0xca>
 800f9f6:	2a2d      	cmp	r2, #45	; 0x2d
 800f9f8:	d004      	beq.n	800fa04 <_strtod_l+0xac>
 800f9fa:	2a20      	cmp	r2, #32
 800f9fc:	d1ca      	bne.n	800f994 <_strtod_l+0x3c>
 800f9fe:	3301      	adds	r3, #1
 800fa00:	931b      	str	r3, [sp, #108]	; 0x6c
 800fa02:	e7bf      	b.n	800f984 <_strtod_l+0x2c>
 800fa04:	2201      	movs	r2, #1
 800fa06:	920d      	str	r2, [sp, #52]	; 0x34
 800fa08:	1c5a      	adds	r2, r3, #1
 800fa0a:	921b      	str	r2, [sp, #108]	; 0x6c
 800fa0c:	785b      	ldrb	r3, [r3, #1]
 800fa0e:	2b00      	cmp	r3, #0
 800fa10:	d1c2      	bne.n	800f998 <_strtod_l+0x40>
 800fa12:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800fa14:	961b      	str	r6, [sp, #108]	; 0x6c
 800fa16:	2b00      	cmp	r3, #0
 800fa18:	f040 8579 	bne.w	801050e <_strtod_l+0xbb6>
 800fa1c:	4652      	mov	r2, sl
 800fa1e:	465b      	mov	r3, fp
 800fa20:	e7e2      	b.n	800f9e8 <_strtod_l+0x90>
 800fa22:	2200      	movs	r2, #0
 800fa24:	e7ef      	b.n	800fa06 <_strtod_l+0xae>
 800fa26:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 800fa28:	b13a      	cbz	r2, 800fa3a <_strtod_l+0xe2>
 800fa2a:	2135      	movs	r1, #53	; 0x35
 800fa2c:	a81e      	add	r0, sp, #120	; 0x78
 800fa2e:	f001 fc99 	bl	8011364 <__copybits>
 800fa32:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fa34:	4648      	mov	r0, r9
 800fa36:	f001 f905 	bl	8010c44 <_Bfree>
 800fa3a:	3c01      	subs	r4, #1
 800fa3c:	2c04      	cmp	r4, #4
 800fa3e:	d806      	bhi.n	800fa4e <_strtod_l+0xf6>
 800fa40:	e8df f004 	tbb	[pc, r4]
 800fa44:	1714030a 	.word	0x1714030a
 800fa48:	0a          	.byte	0x0a
 800fa49:	00          	.byte	0x00
 800fa4a:	e9dd ab1e 	ldrd	sl, fp, [sp, #120]	; 0x78
 800fa4e:	0730      	lsls	r0, r6, #28
 800fa50:	d5c1      	bpl.n	800f9d6 <_strtod_l+0x7e>
 800fa52:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800fa56:	e7be      	b.n	800f9d6 <_strtod_l+0x7e>
 800fa58:	e9dd a31e 	ldrd	sl, r3, [sp, #120]	; 0x78
 800fa5c:	9a1d      	ldr	r2, [sp, #116]	; 0x74
 800fa5e:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800fa62:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800fa66:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800fa6a:	e7f0      	b.n	800fa4e <_strtod_l+0xf6>
 800fa6c:	f8df b170 	ldr.w	fp, [pc, #368]	; 800fbe0 <_strtod_l+0x288>
 800fa70:	e7ed      	b.n	800fa4e <_strtod_l+0xf6>
 800fa72:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800fa76:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 800fa7a:	e7e8      	b.n	800fa4e <_strtod_l+0xf6>
 800fa7c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fa7e:	1c5a      	adds	r2, r3, #1
 800fa80:	921b      	str	r2, [sp, #108]	; 0x6c
 800fa82:	785b      	ldrb	r3, [r3, #1]
 800fa84:	2b30      	cmp	r3, #48	; 0x30
 800fa86:	d0f9      	beq.n	800fa7c <_strtod_l+0x124>
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d0a4      	beq.n	800f9d6 <_strtod_l+0x7e>
 800fa8c:	2301      	movs	r3, #1
 800fa8e:	2500      	movs	r5, #0
 800fa90:	9306      	str	r3, [sp, #24]
 800fa92:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fa94:	9308      	str	r3, [sp, #32]
 800fa96:	9507      	str	r5, [sp, #28]
 800fa98:	9505      	str	r5, [sp, #20]
 800fa9a:	220a      	movs	r2, #10
 800fa9c:	981b      	ldr	r0, [sp, #108]	; 0x6c
 800fa9e:	7807      	ldrb	r7, [r0, #0]
 800faa0:	f1a7 0330 	sub.w	r3, r7, #48	; 0x30
 800faa4:	b2d9      	uxtb	r1, r3
 800faa6:	2909      	cmp	r1, #9
 800faa8:	d929      	bls.n	800fafe <_strtod_l+0x1a6>
 800faaa:	4622      	mov	r2, r4
 800faac:	f8d8 1000 	ldr.w	r1, [r8]
 800fab0:	f001 fd0c 	bl	80114cc <strncmp>
 800fab4:	2800      	cmp	r0, #0
 800fab6:	d031      	beq.n	800fb1c <_strtod_l+0x1c4>
 800fab8:	2000      	movs	r0, #0
 800faba:	9c05      	ldr	r4, [sp, #20]
 800fabc:	9004      	str	r0, [sp, #16]
 800fabe:	463b      	mov	r3, r7
 800fac0:	4602      	mov	r2, r0
 800fac2:	2b65      	cmp	r3, #101	; 0x65
 800fac4:	d001      	beq.n	800faca <_strtod_l+0x172>
 800fac6:	2b45      	cmp	r3, #69	; 0x45
 800fac8:	d114      	bne.n	800faf4 <_strtod_l+0x19c>
 800faca:	b924      	cbnz	r4, 800fad6 <_strtod_l+0x17e>
 800facc:	b910      	cbnz	r0, 800fad4 <_strtod_l+0x17c>
 800face:	9b06      	ldr	r3, [sp, #24]
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d09e      	beq.n	800fa12 <_strtod_l+0xba>
 800fad4:	2400      	movs	r4, #0
 800fad6:	9e1b      	ldr	r6, [sp, #108]	; 0x6c
 800fad8:	1c73      	adds	r3, r6, #1
 800fada:	931b      	str	r3, [sp, #108]	; 0x6c
 800fadc:	7873      	ldrb	r3, [r6, #1]
 800fade:	2b2b      	cmp	r3, #43	; 0x2b
 800fae0:	d078      	beq.n	800fbd4 <_strtod_l+0x27c>
 800fae2:	2b2d      	cmp	r3, #45	; 0x2d
 800fae4:	d070      	beq.n	800fbc8 <_strtod_l+0x270>
 800fae6:	f04f 0c00 	mov.w	ip, #0
 800faea:	f1a3 0730 	sub.w	r7, r3, #48	; 0x30
 800faee:	2f09      	cmp	r7, #9
 800faf0:	d97c      	bls.n	800fbec <_strtod_l+0x294>
 800faf2:	961b      	str	r6, [sp, #108]	; 0x6c
 800faf4:	f04f 0e00 	mov.w	lr, #0
 800faf8:	e09a      	b.n	800fc30 <_strtod_l+0x2d8>
 800fafa:	2300      	movs	r3, #0
 800fafc:	e7c7      	b.n	800fa8e <_strtod_l+0x136>
 800fafe:	9905      	ldr	r1, [sp, #20]
 800fb00:	2908      	cmp	r1, #8
 800fb02:	bfdd      	ittte	le
 800fb04:	9907      	ldrle	r1, [sp, #28]
 800fb06:	fb02 3301 	mlale	r3, r2, r1, r3
 800fb0a:	9307      	strle	r3, [sp, #28]
 800fb0c:	fb02 3505 	mlagt	r5, r2, r5, r3
 800fb10:	9b05      	ldr	r3, [sp, #20]
 800fb12:	3001      	adds	r0, #1
 800fb14:	3301      	adds	r3, #1
 800fb16:	9305      	str	r3, [sp, #20]
 800fb18:	901b      	str	r0, [sp, #108]	; 0x6c
 800fb1a:	e7bf      	b.n	800fa9c <_strtod_l+0x144>
 800fb1c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fb1e:	191a      	adds	r2, r3, r4
 800fb20:	921b      	str	r2, [sp, #108]	; 0x6c
 800fb22:	9a05      	ldr	r2, [sp, #20]
 800fb24:	5d1b      	ldrb	r3, [r3, r4]
 800fb26:	2a00      	cmp	r2, #0
 800fb28:	d037      	beq.n	800fb9a <_strtod_l+0x242>
 800fb2a:	9c05      	ldr	r4, [sp, #20]
 800fb2c:	4602      	mov	r2, r0
 800fb2e:	f1a3 0130 	sub.w	r1, r3, #48	; 0x30
 800fb32:	2909      	cmp	r1, #9
 800fb34:	d913      	bls.n	800fb5e <_strtod_l+0x206>
 800fb36:	2101      	movs	r1, #1
 800fb38:	9104      	str	r1, [sp, #16]
 800fb3a:	e7c2      	b.n	800fac2 <_strtod_l+0x16a>
 800fb3c:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fb3e:	1c5a      	adds	r2, r3, #1
 800fb40:	921b      	str	r2, [sp, #108]	; 0x6c
 800fb42:	785b      	ldrb	r3, [r3, #1]
 800fb44:	3001      	adds	r0, #1
 800fb46:	2b30      	cmp	r3, #48	; 0x30
 800fb48:	d0f8      	beq.n	800fb3c <_strtod_l+0x1e4>
 800fb4a:	f1a3 0231 	sub.w	r2, r3, #49	; 0x31
 800fb4e:	2a08      	cmp	r2, #8
 800fb50:	f200 84e4 	bhi.w	801051c <_strtod_l+0xbc4>
 800fb54:	9a1b      	ldr	r2, [sp, #108]	; 0x6c
 800fb56:	9208      	str	r2, [sp, #32]
 800fb58:	4602      	mov	r2, r0
 800fb5a:	2000      	movs	r0, #0
 800fb5c:	4604      	mov	r4, r0
 800fb5e:	f1b3 0e30 	subs.w	lr, r3, #48	; 0x30
 800fb62:	f100 0101 	add.w	r1, r0, #1
 800fb66:	d012      	beq.n	800fb8e <_strtod_l+0x236>
 800fb68:	440a      	add	r2, r1
 800fb6a:	eb00 0c04 	add.w	ip, r0, r4
 800fb6e:	4621      	mov	r1, r4
 800fb70:	270a      	movs	r7, #10
 800fb72:	458c      	cmp	ip, r1
 800fb74:	d113      	bne.n	800fb9e <_strtod_l+0x246>
 800fb76:	1821      	adds	r1, r4, r0
 800fb78:	2908      	cmp	r1, #8
 800fb7a:	f104 0401 	add.w	r4, r4, #1
 800fb7e:	4404      	add	r4, r0
 800fb80:	dc19      	bgt.n	800fbb6 <_strtod_l+0x25e>
 800fb82:	9b07      	ldr	r3, [sp, #28]
 800fb84:	210a      	movs	r1, #10
 800fb86:	fb01 e303 	mla	r3, r1, r3, lr
 800fb8a:	9307      	str	r3, [sp, #28]
 800fb8c:	2100      	movs	r1, #0
 800fb8e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fb90:	1c58      	adds	r0, r3, #1
 800fb92:	901b      	str	r0, [sp, #108]	; 0x6c
 800fb94:	785b      	ldrb	r3, [r3, #1]
 800fb96:	4608      	mov	r0, r1
 800fb98:	e7c9      	b.n	800fb2e <_strtod_l+0x1d6>
 800fb9a:	9805      	ldr	r0, [sp, #20]
 800fb9c:	e7d3      	b.n	800fb46 <_strtod_l+0x1ee>
 800fb9e:	2908      	cmp	r1, #8
 800fba0:	f101 0101 	add.w	r1, r1, #1
 800fba4:	dc03      	bgt.n	800fbae <_strtod_l+0x256>
 800fba6:	9b07      	ldr	r3, [sp, #28]
 800fba8:	437b      	muls	r3, r7
 800fbaa:	9307      	str	r3, [sp, #28]
 800fbac:	e7e1      	b.n	800fb72 <_strtod_l+0x21a>
 800fbae:	2910      	cmp	r1, #16
 800fbb0:	bfd8      	it	le
 800fbb2:	437d      	mulle	r5, r7
 800fbb4:	e7dd      	b.n	800fb72 <_strtod_l+0x21a>
 800fbb6:	2c10      	cmp	r4, #16
 800fbb8:	bfdc      	itt	le
 800fbba:	210a      	movle	r1, #10
 800fbbc:	fb01 e505 	mlale	r5, r1, r5, lr
 800fbc0:	e7e4      	b.n	800fb8c <_strtod_l+0x234>
 800fbc2:	2301      	movs	r3, #1
 800fbc4:	9304      	str	r3, [sp, #16]
 800fbc6:	e781      	b.n	800facc <_strtod_l+0x174>
 800fbc8:	f04f 0c01 	mov.w	ip, #1
 800fbcc:	1cb3      	adds	r3, r6, #2
 800fbce:	931b      	str	r3, [sp, #108]	; 0x6c
 800fbd0:	78b3      	ldrb	r3, [r6, #2]
 800fbd2:	e78a      	b.n	800faea <_strtod_l+0x192>
 800fbd4:	f04f 0c00 	mov.w	ip, #0
 800fbd8:	e7f8      	b.n	800fbcc <_strtod_l+0x274>
 800fbda:	bf00      	nop
 800fbdc:	0805214c 	.word	0x0805214c
 800fbe0:	7ff00000 	.word	0x7ff00000
 800fbe4:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fbe6:	1c5f      	adds	r7, r3, #1
 800fbe8:	971b      	str	r7, [sp, #108]	; 0x6c
 800fbea:	785b      	ldrb	r3, [r3, #1]
 800fbec:	2b30      	cmp	r3, #48	; 0x30
 800fbee:	d0f9      	beq.n	800fbe4 <_strtod_l+0x28c>
 800fbf0:	f1a3 0731 	sub.w	r7, r3, #49	; 0x31
 800fbf4:	2f08      	cmp	r7, #8
 800fbf6:	f63f af7d 	bhi.w	800faf4 <_strtod_l+0x19c>
 800fbfa:	f1a3 0e30 	sub.w	lr, r3, #48	; 0x30
 800fbfe:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fc00:	930a      	str	r3, [sp, #40]	; 0x28
 800fc02:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fc04:	1c5f      	adds	r7, r3, #1
 800fc06:	971b      	str	r7, [sp, #108]	; 0x6c
 800fc08:	785b      	ldrb	r3, [r3, #1]
 800fc0a:	f1a3 0830 	sub.w	r8, r3, #48	; 0x30
 800fc0e:	f1b8 0f09 	cmp.w	r8, #9
 800fc12:	d937      	bls.n	800fc84 <_strtod_l+0x32c>
 800fc14:	990a      	ldr	r1, [sp, #40]	; 0x28
 800fc16:	1a7f      	subs	r7, r7, r1
 800fc18:	2f08      	cmp	r7, #8
 800fc1a:	f644 671f 	movw	r7, #19999	; 0x4e1f
 800fc1e:	dc37      	bgt.n	800fc90 <_strtod_l+0x338>
 800fc20:	45be      	cmp	lr, r7
 800fc22:	bfa8      	it	ge
 800fc24:	46be      	movge	lr, r7
 800fc26:	f1bc 0f00 	cmp.w	ip, #0
 800fc2a:	d001      	beq.n	800fc30 <_strtod_l+0x2d8>
 800fc2c:	f1ce 0e00 	rsb	lr, lr, #0
 800fc30:	2c00      	cmp	r4, #0
 800fc32:	d151      	bne.n	800fcd8 <_strtod_l+0x380>
 800fc34:	2800      	cmp	r0, #0
 800fc36:	f47f aece 	bne.w	800f9d6 <_strtod_l+0x7e>
 800fc3a:	9a06      	ldr	r2, [sp, #24]
 800fc3c:	2a00      	cmp	r2, #0
 800fc3e:	f47f aeca 	bne.w	800f9d6 <_strtod_l+0x7e>
 800fc42:	9a04      	ldr	r2, [sp, #16]
 800fc44:	2a00      	cmp	r2, #0
 800fc46:	f47f aee4 	bne.w	800fa12 <_strtod_l+0xba>
 800fc4a:	2b4e      	cmp	r3, #78	; 0x4e
 800fc4c:	d027      	beq.n	800fc9e <_strtod_l+0x346>
 800fc4e:	dc21      	bgt.n	800fc94 <_strtod_l+0x33c>
 800fc50:	2b49      	cmp	r3, #73	; 0x49
 800fc52:	f47f aede 	bne.w	800fa12 <_strtod_l+0xba>
 800fc56:	49a0      	ldr	r1, [pc, #640]	; (800fed8 <_strtod_l+0x580>)
 800fc58:	a81b      	add	r0, sp, #108	; 0x6c
 800fc5a:	f000 ff07 	bl	8010a6c <__match>
 800fc5e:	2800      	cmp	r0, #0
 800fc60:	f43f aed7 	beq.w	800fa12 <_strtod_l+0xba>
 800fc64:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fc66:	499d      	ldr	r1, [pc, #628]	; (800fedc <_strtod_l+0x584>)
 800fc68:	3b01      	subs	r3, #1
 800fc6a:	a81b      	add	r0, sp, #108	; 0x6c
 800fc6c:	931b      	str	r3, [sp, #108]	; 0x6c
 800fc6e:	f000 fefd 	bl	8010a6c <__match>
 800fc72:	b910      	cbnz	r0, 800fc7a <_strtod_l+0x322>
 800fc74:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fc76:	3301      	adds	r3, #1
 800fc78:	931b      	str	r3, [sp, #108]	; 0x6c
 800fc7a:	f8df b274 	ldr.w	fp, [pc, #628]	; 800fef0 <_strtod_l+0x598>
 800fc7e:	f04f 0a00 	mov.w	sl, #0
 800fc82:	e6a8      	b.n	800f9d6 <_strtod_l+0x7e>
 800fc84:	210a      	movs	r1, #10
 800fc86:	fb01 3e0e 	mla	lr, r1, lr, r3
 800fc8a:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800fc8e:	e7b8      	b.n	800fc02 <_strtod_l+0x2aa>
 800fc90:	46be      	mov	lr, r7
 800fc92:	e7c8      	b.n	800fc26 <_strtod_l+0x2ce>
 800fc94:	2b69      	cmp	r3, #105	; 0x69
 800fc96:	d0de      	beq.n	800fc56 <_strtod_l+0x2fe>
 800fc98:	2b6e      	cmp	r3, #110	; 0x6e
 800fc9a:	f47f aeba 	bne.w	800fa12 <_strtod_l+0xba>
 800fc9e:	4990      	ldr	r1, [pc, #576]	; (800fee0 <_strtod_l+0x588>)
 800fca0:	a81b      	add	r0, sp, #108	; 0x6c
 800fca2:	f000 fee3 	bl	8010a6c <__match>
 800fca6:	2800      	cmp	r0, #0
 800fca8:	f43f aeb3 	beq.w	800fa12 <_strtod_l+0xba>
 800fcac:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800fcae:	781b      	ldrb	r3, [r3, #0]
 800fcb0:	2b28      	cmp	r3, #40	; 0x28
 800fcb2:	d10e      	bne.n	800fcd2 <_strtod_l+0x37a>
 800fcb4:	aa1e      	add	r2, sp, #120	; 0x78
 800fcb6:	498b      	ldr	r1, [pc, #556]	; (800fee4 <_strtod_l+0x58c>)
 800fcb8:	a81b      	add	r0, sp, #108	; 0x6c
 800fcba:	f000 feeb 	bl	8010a94 <__hexnan>
 800fcbe:	2805      	cmp	r0, #5
 800fcc0:	d107      	bne.n	800fcd2 <_strtod_l+0x37a>
 800fcc2:	9b1f      	ldr	r3, [sp, #124]	; 0x7c
 800fcc4:	f8dd a078 	ldr.w	sl, [sp, #120]	; 0x78
 800fcc8:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800fccc:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800fcd0:	e681      	b.n	800f9d6 <_strtod_l+0x7e>
 800fcd2:	f8df b224 	ldr.w	fp, [pc, #548]	; 800fef8 <_strtod_l+0x5a0>
 800fcd6:	e7d2      	b.n	800fc7e <_strtod_l+0x326>
 800fcd8:	ebae 0302 	sub.w	r3, lr, r2
 800fcdc:	9306      	str	r3, [sp, #24]
 800fcde:	9b05      	ldr	r3, [sp, #20]
 800fce0:	9807      	ldr	r0, [sp, #28]
 800fce2:	2b00      	cmp	r3, #0
 800fce4:	bf08      	it	eq
 800fce6:	4623      	moveq	r3, r4
 800fce8:	2c10      	cmp	r4, #16
 800fcea:	9305      	str	r3, [sp, #20]
 800fcec:	46a0      	mov	r8, r4
 800fcee:	bfa8      	it	ge
 800fcf0:	f04f 0810 	movge.w	r8, #16
 800fcf4:	f7f0 fbbe 	bl	8000474 <__aeabi_ui2d>
 800fcf8:	2c09      	cmp	r4, #9
 800fcfa:	4682      	mov	sl, r0
 800fcfc:	468b      	mov	fp, r1
 800fcfe:	dc13      	bgt.n	800fd28 <_strtod_l+0x3d0>
 800fd00:	9b06      	ldr	r3, [sp, #24]
 800fd02:	2b00      	cmp	r3, #0
 800fd04:	f43f ae67 	beq.w	800f9d6 <_strtod_l+0x7e>
 800fd08:	9b06      	ldr	r3, [sp, #24]
 800fd0a:	dd7a      	ble.n	800fe02 <_strtod_l+0x4aa>
 800fd0c:	2b16      	cmp	r3, #22
 800fd0e:	dc61      	bgt.n	800fdd4 <_strtod_l+0x47c>
 800fd10:	4a75      	ldr	r2, [pc, #468]	; (800fee8 <_strtod_l+0x590>)
 800fd12:	eb02 0ec3 	add.w	lr, r2, r3, lsl #3
 800fd16:	e9de 0100 	ldrd	r0, r1, [lr]
 800fd1a:	4652      	mov	r2, sl
 800fd1c:	465b      	mov	r3, fp
 800fd1e:	f7f0 fc23 	bl	8000568 <__aeabi_dmul>
 800fd22:	4682      	mov	sl, r0
 800fd24:	468b      	mov	fp, r1
 800fd26:	e656      	b.n	800f9d6 <_strtod_l+0x7e>
 800fd28:	4b6f      	ldr	r3, [pc, #444]	; (800fee8 <_strtod_l+0x590>)
 800fd2a:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800fd2e:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800fd32:	f7f0 fc19 	bl	8000568 <__aeabi_dmul>
 800fd36:	4606      	mov	r6, r0
 800fd38:	4628      	mov	r0, r5
 800fd3a:	460f      	mov	r7, r1
 800fd3c:	f7f0 fb9a 	bl	8000474 <__aeabi_ui2d>
 800fd40:	4602      	mov	r2, r0
 800fd42:	460b      	mov	r3, r1
 800fd44:	4630      	mov	r0, r6
 800fd46:	4639      	mov	r1, r7
 800fd48:	f7f0 fa58 	bl	80001fc <__adddf3>
 800fd4c:	2c0f      	cmp	r4, #15
 800fd4e:	4682      	mov	sl, r0
 800fd50:	468b      	mov	fp, r1
 800fd52:	ddd5      	ble.n	800fd00 <_strtod_l+0x3a8>
 800fd54:	9b06      	ldr	r3, [sp, #24]
 800fd56:	eba4 0808 	sub.w	r8, r4, r8
 800fd5a:	4498      	add	r8, r3
 800fd5c:	f1b8 0f00 	cmp.w	r8, #0
 800fd60:	f340 8096 	ble.w	800fe90 <_strtod_l+0x538>
 800fd64:	f018 030f 	ands.w	r3, r8, #15
 800fd68:	d00a      	beq.n	800fd80 <_strtod_l+0x428>
 800fd6a:	495f      	ldr	r1, [pc, #380]	; (800fee8 <_strtod_l+0x590>)
 800fd6c:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800fd70:	4652      	mov	r2, sl
 800fd72:	465b      	mov	r3, fp
 800fd74:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fd78:	f7f0 fbf6 	bl	8000568 <__aeabi_dmul>
 800fd7c:	4682      	mov	sl, r0
 800fd7e:	468b      	mov	fp, r1
 800fd80:	f038 080f 	bics.w	r8, r8, #15
 800fd84:	d073      	beq.n	800fe6e <_strtod_l+0x516>
 800fd86:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800fd8a:	dd47      	ble.n	800fe1c <_strtod_l+0x4c4>
 800fd8c:	2400      	movs	r4, #0
 800fd8e:	46a0      	mov	r8, r4
 800fd90:	9407      	str	r4, [sp, #28]
 800fd92:	9405      	str	r4, [sp, #20]
 800fd94:	2322      	movs	r3, #34	; 0x22
 800fd96:	f8df b158 	ldr.w	fp, [pc, #344]	; 800fef0 <_strtod_l+0x598>
 800fd9a:	f8c9 3000 	str.w	r3, [r9]
 800fd9e:	f04f 0a00 	mov.w	sl, #0
 800fda2:	9b07      	ldr	r3, [sp, #28]
 800fda4:	2b00      	cmp	r3, #0
 800fda6:	f43f ae16 	beq.w	800f9d6 <_strtod_l+0x7e>
 800fdaa:	991c      	ldr	r1, [sp, #112]	; 0x70
 800fdac:	4648      	mov	r0, r9
 800fdae:	f000 ff49 	bl	8010c44 <_Bfree>
 800fdb2:	9905      	ldr	r1, [sp, #20]
 800fdb4:	4648      	mov	r0, r9
 800fdb6:	f000 ff45 	bl	8010c44 <_Bfree>
 800fdba:	4641      	mov	r1, r8
 800fdbc:	4648      	mov	r0, r9
 800fdbe:	f000 ff41 	bl	8010c44 <_Bfree>
 800fdc2:	9907      	ldr	r1, [sp, #28]
 800fdc4:	4648      	mov	r0, r9
 800fdc6:	f000 ff3d 	bl	8010c44 <_Bfree>
 800fdca:	4621      	mov	r1, r4
 800fdcc:	4648      	mov	r0, r9
 800fdce:	f000 ff39 	bl	8010c44 <_Bfree>
 800fdd2:	e600      	b.n	800f9d6 <_strtod_l+0x7e>
 800fdd4:	9a06      	ldr	r2, [sp, #24]
 800fdd6:	f1c4 0325 	rsb	r3, r4, #37	; 0x25
 800fdda:	4293      	cmp	r3, r2
 800fddc:	dbba      	blt.n	800fd54 <_strtod_l+0x3fc>
 800fdde:	4d42      	ldr	r5, [pc, #264]	; (800fee8 <_strtod_l+0x590>)
 800fde0:	f1c4 040f 	rsb	r4, r4, #15
 800fde4:	eb05 01c4 	add.w	r1, r5, r4, lsl #3
 800fde8:	4652      	mov	r2, sl
 800fdea:	465b      	mov	r3, fp
 800fdec:	e9d1 0100 	ldrd	r0, r1, [r1]
 800fdf0:	f7f0 fbba 	bl	8000568 <__aeabi_dmul>
 800fdf4:	9b06      	ldr	r3, [sp, #24]
 800fdf6:	1b1c      	subs	r4, r3, r4
 800fdf8:	eb05 05c4 	add.w	r5, r5, r4, lsl #3
 800fdfc:	e9d5 2300 	ldrd	r2, r3, [r5]
 800fe00:	e78d      	b.n	800fd1e <_strtod_l+0x3c6>
 800fe02:	f113 0f16 	cmn.w	r3, #22
 800fe06:	dba5      	blt.n	800fd54 <_strtod_l+0x3fc>
 800fe08:	4a37      	ldr	r2, [pc, #220]	; (800fee8 <_strtod_l+0x590>)
 800fe0a:	eba2 02c3 	sub.w	r2, r2, r3, lsl #3
 800fe0e:	e9d2 2300 	ldrd	r2, r3, [r2]
 800fe12:	4650      	mov	r0, sl
 800fe14:	4659      	mov	r1, fp
 800fe16:	f7f0 fcd1 	bl	80007bc <__aeabi_ddiv>
 800fe1a:	e782      	b.n	800fd22 <_strtod_l+0x3ca>
 800fe1c:	2300      	movs	r3, #0
 800fe1e:	4e33      	ldr	r6, [pc, #204]	; (800feec <_strtod_l+0x594>)
 800fe20:	ea4f 1828 	mov.w	r8, r8, asr #4
 800fe24:	4650      	mov	r0, sl
 800fe26:	4659      	mov	r1, fp
 800fe28:	461d      	mov	r5, r3
 800fe2a:	f1b8 0f01 	cmp.w	r8, #1
 800fe2e:	dc21      	bgt.n	800fe74 <_strtod_l+0x51c>
 800fe30:	b10b      	cbz	r3, 800fe36 <_strtod_l+0x4de>
 800fe32:	4682      	mov	sl, r0
 800fe34:	468b      	mov	fp, r1
 800fe36:	4b2d      	ldr	r3, [pc, #180]	; (800feec <_strtod_l+0x594>)
 800fe38:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800fe3c:	eb03 05c5 	add.w	r5, r3, r5, lsl #3
 800fe40:	4652      	mov	r2, sl
 800fe42:	465b      	mov	r3, fp
 800fe44:	e9d5 0100 	ldrd	r0, r1, [r5]
 800fe48:	f7f0 fb8e 	bl	8000568 <__aeabi_dmul>
 800fe4c:	4b28      	ldr	r3, [pc, #160]	; (800fef0 <_strtod_l+0x598>)
 800fe4e:	460a      	mov	r2, r1
 800fe50:	400b      	ands	r3, r1
 800fe52:	4928      	ldr	r1, [pc, #160]	; (800fef4 <_strtod_l+0x59c>)
 800fe54:	428b      	cmp	r3, r1
 800fe56:	4682      	mov	sl, r0
 800fe58:	d898      	bhi.n	800fd8c <_strtod_l+0x434>
 800fe5a:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800fe5e:	428b      	cmp	r3, r1
 800fe60:	bf86      	itte	hi
 800fe62:	f8df b098 	ldrhi.w	fp, [pc, #152]	; 800fefc <_strtod_l+0x5a4>
 800fe66:	f04f 3aff 	movhi.w	sl, #4294967295	; 0xffffffff
 800fe6a:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800fe6e:	2300      	movs	r3, #0
 800fe70:	9304      	str	r3, [sp, #16]
 800fe72:	e077      	b.n	800ff64 <_strtod_l+0x60c>
 800fe74:	f018 0f01 	tst.w	r8, #1
 800fe78:	d006      	beq.n	800fe88 <_strtod_l+0x530>
 800fe7a:	eb06 03c5 	add.w	r3, r6, r5, lsl #3
 800fe7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800fe82:	f7f0 fb71 	bl	8000568 <__aeabi_dmul>
 800fe86:	2301      	movs	r3, #1
 800fe88:	3501      	adds	r5, #1
 800fe8a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800fe8e:	e7cc      	b.n	800fe2a <_strtod_l+0x4d2>
 800fe90:	d0ed      	beq.n	800fe6e <_strtod_l+0x516>
 800fe92:	f1c8 0800 	rsb	r8, r8, #0
 800fe96:	f018 020f 	ands.w	r2, r8, #15
 800fe9a:	d00a      	beq.n	800feb2 <_strtod_l+0x55a>
 800fe9c:	4b12      	ldr	r3, [pc, #72]	; (800fee8 <_strtod_l+0x590>)
 800fe9e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800fea2:	4650      	mov	r0, sl
 800fea4:	4659      	mov	r1, fp
 800fea6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800feaa:	f7f0 fc87 	bl	80007bc <__aeabi_ddiv>
 800feae:	4682      	mov	sl, r0
 800feb0:	468b      	mov	fp, r1
 800feb2:	ea5f 1828 	movs.w	r8, r8, asr #4
 800feb6:	d0da      	beq.n	800fe6e <_strtod_l+0x516>
 800feb8:	f1b8 0f1f 	cmp.w	r8, #31
 800febc:	dd20      	ble.n	800ff00 <_strtod_l+0x5a8>
 800febe:	2400      	movs	r4, #0
 800fec0:	46a0      	mov	r8, r4
 800fec2:	9407      	str	r4, [sp, #28]
 800fec4:	9405      	str	r4, [sp, #20]
 800fec6:	2322      	movs	r3, #34	; 0x22
 800fec8:	f04f 0a00 	mov.w	sl, #0
 800fecc:	f04f 0b00 	mov.w	fp, #0
 800fed0:	f8c9 3000 	str.w	r3, [r9]
 800fed4:	e765      	b.n	800fda2 <_strtod_l+0x44a>
 800fed6:	bf00      	nop
 800fed8:	08052140 	.word	0x08052140
 800fedc:	08052143 	.word	0x08052143
 800fee0:	08052149 	.word	0x08052149
 800fee4:	08052160 	.word	0x08052160
 800fee8:	08052238 	.word	0x08052238
 800feec:	08052210 	.word	0x08052210
 800fef0:	7ff00000 	.word	0x7ff00000
 800fef4:	7ca00000 	.word	0x7ca00000
 800fef8:	fff80000 	.word	0xfff80000
 800fefc:	7fefffff 	.word	0x7fefffff
 800ff00:	f018 0310 	ands.w	r3, r8, #16
 800ff04:	bf18      	it	ne
 800ff06:	236a      	movne	r3, #106	; 0x6a
 800ff08:	4da0      	ldr	r5, [pc, #640]	; (801018c <_strtod_l+0x834>)
 800ff0a:	9304      	str	r3, [sp, #16]
 800ff0c:	4650      	mov	r0, sl
 800ff0e:	4659      	mov	r1, fp
 800ff10:	2300      	movs	r3, #0
 800ff12:	f1b8 0f00 	cmp.w	r8, #0
 800ff16:	f300 810a 	bgt.w	801012e <_strtod_l+0x7d6>
 800ff1a:	b10b      	cbz	r3, 800ff20 <_strtod_l+0x5c8>
 800ff1c:	4682      	mov	sl, r0
 800ff1e:	468b      	mov	fp, r1
 800ff20:	9b04      	ldr	r3, [sp, #16]
 800ff22:	b1bb      	cbz	r3, 800ff54 <_strtod_l+0x5fc>
 800ff24:	f3cb 530a 	ubfx	r3, fp, #20, #11
 800ff28:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	4659      	mov	r1, fp
 800ff30:	dd10      	ble.n	800ff54 <_strtod_l+0x5fc>
 800ff32:	2b1f      	cmp	r3, #31
 800ff34:	f340 8107 	ble.w	8010146 <_strtod_l+0x7ee>
 800ff38:	2b34      	cmp	r3, #52	; 0x34
 800ff3a:	bfde      	ittt	le
 800ff3c:	3b20      	suble	r3, #32
 800ff3e:	f04f 32ff 	movle.w	r2, #4294967295	; 0xffffffff
 800ff42:	fa02 f303 	lslle.w	r3, r2, r3
 800ff46:	f04f 0a00 	mov.w	sl, #0
 800ff4a:	bfcc      	ite	gt
 800ff4c:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800ff50:	ea03 0b01 	andle.w	fp, r3, r1
 800ff54:	2200      	movs	r2, #0
 800ff56:	2300      	movs	r3, #0
 800ff58:	4650      	mov	r0, sl
 800ff5a:	4659      	mov	r1, fp
 800ff5c:	f7f0 fd6c 	bl	8000a38 <__aeabi_dcmpeq>
 800ff60:	2800      	cmp	r0, #0
 800ff62:	d1ac      	bne.n	800febe <_strtod_l+0x566>
 800ff64:	9b07      	ldr	r3, [sp, #28]
 800ff66:	9300      	str	r3, [sp, #0]
 800ff68:	9a05      	ldr	r2, [sp, #20]
 800ff6a:	9908      	ldr	r1, [sp, #32]
 800ff6c:	4623      	mov	r3, r4
 800ff6e:	4648      	mov	r0, r9
 800ff70:	f000 feba 	bl	8010ce8 <__s2b>
 800ff74:	9007      	str	r0, [sp, #28]
 800ff76:	2800      	cmp	r0, #0
 800ff78:	f43f af08 	beq.w	800fd8c <_strtod_l+0x434>
 800ff7c:	9a06      	ldr	r2, [sp, #24]
 800ff7e:	9b06      	ldr	r3, [sp, #24]
 800ff80:	2a00      	cmp	r2, #0
 800ff82:	f1c3 0300 	rsb	r3, r3, #0
 800ff86:	bfa8      	it	ge
 800ff88:	2300      	movge	r3, #0
 800ff8a:	930e      	str	r3, [sp, #56]	; 0x38
 800ff8c:	2400      	movs	r4, #0
 800ff8e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800ff92:	9316      	str	r3, [sp, #88]	; 0x58
 800ff94:	46a0      	mov	r8, r4
 800ff96:	9b07      	ldr	r3, [sp, #28]
 800ff98:	4648      	mov	r0, r9
 800ff9a:	6859      	ldr	r1, [r3, #4]
 800ff9c:	f000 fe1e 	bl	8010bdc <_Balloc>
 800ffa0:	9005      	str	r0, [sp, #20]
 800ffa2:	2800      	cmp	r0, #0
 800ffa4:	f43f aef6 	beq.w	800fd94 <_strtod_l+0x43c>
 800ffa8:	9b07      	ldr	r3, [sp, #28]
 800ffaa:	691a      	ldr	r2, [r3, #16]
 800ffac:	3202      	adds	r2, #2
 800ffae:	f103 010c 	add.w	r1, r3, #12
 800ffb2:	0092      	lsls	r2, r2, #2
 800ffb4:	300c      	adds	r0, #12
 800ffb6:	f7ff fc9f 	bl	800f8f8 <memcpy>
 800ffba:	aa1e      	add	r2, sp, #120	; 0x78
 800ffbc:	a91d      	add	r1, sp, #116	; 0x74
 800ffbe:	ec4b ab10 	vmov	d0, sl, fp
 800ffc2:	4648      	mov	r0, r9
 800ffc4:	e9cd ab08 	strd	sl, fp, [sp, #32]
 800ffc8:	f001 f94a 	bl	8011260 <__d2b>
 800ffcc:	901c      	str	r0, [sp, #112]	; 0x70
 800ffce:	2800      	cmp	r0, #0
 800ffd0:	f43f aee0 	beq.w	800fd94 <_strtod_l+0x43c>
 800ffd4:	2101      	movs	r1, #1
 800ffd6:	4648      	mov	r0, r9
 800ffd8:	f000 ff12 	bl	8010e00 <__i2b>
 800ffdc:	4680      	mov	r8, r0
 800ffde:	2800      	cmp	r0, #0
 800ffe0:	f43f aed8 	beq.w	800fd94 <_strtod_l+0x43c>
 800ffe4:	9e1d      	ldr	r6, [sp, #116]	; 0x74
 800ffe6:	9a1e      	ldr	r2, [sp, #120]	; 0x78
 800ffe8:	2e00      	cmp	r6, #0
 800ffea:	bfab      	itete	ge
 800ffec:	9b0e      	ldrge	r3, [sp, #56]	; 0x38
 800ffee:	9b16      	ldrlt	r3, [sp, #88]	; 0x58
 800fff0:	9d16      	ldrge	r5, [sp, #88]	; 0x58
 800fff2:	9f0e      	ldrlt	r7, [sp, #56]	; 0x38
 800fff4:	bfac      	ite	ge
 800fff6:	18f7      	addge	r7, r6, r3
 800fff8:	1b9d      	sublt	r5, r3, r6
 800fffa:	9b04      	ldr	r3, [sp, #16]
 800fffc:	1af6      	subs	r6, r6, r3
 800fffe:	4416      	add	r6, r2
 8010000:	4b63      	ldr	r3, [pc, #396]	; (8010190 <_strtod_l+0x838>)
 8010002:	3e01      	subs	r6, #1
 8010004:	429e      	cmp	r6, r3
 8010006:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 801000a:	f280 80af 	bge.w	801016c <_strtod_l+0x814>
 801000e:	1b9b      	subs	r3, r3, r6
 8010010:	2b1f      	cmp	r3, #31
 8010012:	eba2 0203 	sub.w	r2, r2, r3
 8010016:	f04f 0101 	mov.w	r1, #1
 801001a:	f300 809b 	bgt.w	8010154 <_strtod_l+0x7fc>
 801001e:	fa01 f303 	lsl.w	r3, r1, r3
 8010022:	930f      	str	r3, [sp, #60]	; 0x3c
 8010024:	2300      	movs	r3, #0
 8010026:	930a      	str	r3, [sp, #40]	; 0x28
 8010028:	18be      	adds	r6, r7, r2
 801002a:	9b04      	ldr	r3, [sp, #16]
 801002c:	42b7      	cmp	r7, r6
 801002e:	4415      	add	r5, r2
 8010030:	441d      	add	r5, r3
 8010032:	463b      	mov	r3, r7
 8010034:	bfa8      	it	ge
 8010036:	4633      	movge	r3, r6
 8010038:	42ab      	cmp	r3, r5
 801003a:	bfa8      	it	ge
 801003c:	462b      	movge	r3, r5
 801003e:	2b00      	cmp	r3, #0
 8010040:	bfc2      	ittt	gt
 8010042:	1af6      	subgt	r6, r6, r3
 8010044:	1aed      	subgt	r5, r5, r3
 8010046:	1aff      	subgt	r7, r7, r3
 8010048:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 801004a:	b1bb      	cbz	r3, 801007c <_strtod_l+0x724>
 801004c:	4641      	mov	r1, r8
 801004e:	461a      	mov	r2, r3
 8010050:	4648      	mov	r0, r9
 8010052:	f000 ff75 	bl	8010f40 <__pow5mult>
 8010056:	4680      	mov	r8, r0
 8010058:	2800      	cmp	r0, #0
 801005a:	f43f ae9b 	beq.w	800fd94 <_strtod_l+0x43c>
 801005e:	4601      	mov	r1, r0
 8010060:	9a1c      	ldr	r2, [sp, #112]	; 0x70
 8010062:	4648      	mov	r0, r9
 8010064:	f000 fed5 	bl	8010e12 <__multiply>
 8010068:	900c      	str	r0, [sp, #48]	; 0x30
 801006a:	2800      	cmp	r0, #0
 801006c:	f43f ae92 	beq.w	800fd94 <_strtod_l+0x43c>
 8010070:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010072:	4648      	mov	r0, r9
 8010074:	f000 fde6 	bl	8010c44 <_Bfree>
 8010078:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801007a:	931c      	str	r3, [sp, #112]	; 0x70
 801007c:	2e00      	cmp	r6, #0
 801007e:	dc7a      	bgt.n	8010176 <_strtod_l+0x81e>
 8010080:	9b06      	ldr	r3, [sp, #24]
 8010082:	2b00      	cmp	r3, #0
 8010084:	dd08      	ble.n	8010098 <_strtod_l+0x740>
 8010086:	9a16      	ldr	r2, [sp, #88]	; 0x58
 8010088:	9905      	ldr	r1, [sp, #20]
 801008a:	4648      	mov	r0, r9
 801008c:	f000 ff58 	bl	8010f40 <__pow5mult>
 8010090:	9005      	str	r0, [sp, #20]
 8010092:	2800      	cmp	r0, #0
 8010094:	f43f ae7e 	beq.w	800fd94 <_strtod_l+0x43c>
 8010098:	2d00      	cmp	r5, #0
 801009a:	dd08      	ble.n	80100ae <_strtod_l+0x756>
 801009c:	462a      	mov	r2, r5
 801009e:	9905      	ldr	r1, [sp, #20]
 80100a0:	4648      	mov	r0, r9
 80100a2:	f000 ff9b 	bl	8010fdc <__lshift>
 80100a6:	9005      	str	r0, [sp, #20]
 80100a8:	2800      	cmp	r0, #0
 80100aa:	f43f ae73 	beq.w	800fd94 <_strtod_l+0x43c>
 80100ae:	2f00      	cmp	r7, #0
 80100b0:	dd08      	ble.n	80100c4 <_strtod_l+0x76c>
 80100b2:	4641      	mov	r1, r8
 80100b4:	463a      	mov	r2, r7
 80100b6:	4648      	mov	r0, r9
 80100b8:	f000 ff90 	bl	8010fdc <__lshift>
 80100bc:	4680      	mov	r8, r0
 80100be:	2800      	cmp	r0, #0
 80100c0:	f43f ae68 	beq.w	800fd94 <_strtod_l+0x43c>
 80100c4:	9a05      	ldr	r2, [sp, #20]
 80100c6:	991c      	ldr	r1, [sp, #112]	; 0x70
 80100c8:	4648      	mov	r0, r9
 80100ca:	f000 fff5 	bl	80110b8 <__mdiff>
 80100ce:	4604      	mov	r4, r0
 80100d0:	2800      	cmp	r0, #0
 80100d2:	f43f ae5f 	beq.w	800fd94 <_strtod_l+0x43c>
 80100d6:	68c3      	ldr	r3, [r0, #12]
 80100d8:	930c      	str	r3, [sp, #48]	; 0x30
 80100da:	2300      	movs	r3, #0
 80100dc:	60c3      	str	r3, [r0, #12]
 80100de:	4641      	mov	r1, r8
 80100e0:	f000 ffd0 	bl	8011084 <__mcmp>
 80100e4:	2800      	cmp	r0, #0
 80100e6:	da55      	bge.n	8010194 <_strtod_l+0x83c>
 80100e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80100ea:	b9e3      	cbnz	r3, 8010126 <_strtod_l+0x7ce>
 80100ec:	f1ba 0f00 	cmp.w	sl, #0
 80100f0:	d119      	bne.n	8010126 <_strtod_l+0x7ce>
 80100f2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80100f6:	b9b3      	cbnz	r3, 8010126 <_strtod_l+0x7ce>
 80100f8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80100fc:	0d1b      	lsrs	r3, r3, #20
 80100fe:	051b      	lsls	r3, r3, #20
 8010100:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8010104:	d90f      	bls.n	8010126 <_strtod_l+0x7ce>
 8010106:	6963      	ldr	r3, [r4, #20]
 8010108:	b913      	cbnz	r3, 8010110 <_strtod_l+0x7b8>
 801010a:	6923      	ldr	r3, [r4, #16]
 801010c:	2b01      	cmp	r3, #1
 801010e:	dd0a      	ble.n	8010126 <_strtod_l+0x7ce>
 8010110:	4621      	mov	r1, r4
 8010112:	2201      	movs	r2, #1
 8010114:	4648      	mov	r0, r9
 8010116:	f000 ff61 	bl	8010fdc <__lshift>
 801011a:	4641      	mov	r1, r8
 801011c:	4604      	mov	r4, r0
 801011e:	f000 ffb1 	bl	8011084 <__mcmp>
 8010122:	2800      	cmp	r0, #0
 8010124:	dc67      	bgt.n	80101f6 <_strtod_l+0x89e>
 8010126:	9b04      	ldr	r3, [sp, #16]
 8010128:	2b00      	cmp	r3, #0
 801012a:	d171      	bne.n	8010210 <_strtod_l+0x8b8>
 801012c:	e63d      	b.n	800fdaa <_strtod_l+0x452>
 801012e:	f018 0f01 	tst.w	r8, #1
 8010132:	d004      	beq.n	801013e <_strtod_l+0x7e6>
 8010134:	e9d5 2300 	ldrd	r2, r3, [r5]
 8010138:	f7f0 fa16 	bl	8000568 <__aeabi_dmul>
 801013c:	2301      	movs	r3, #1
 801013e:	ea4f 0868 	mov.w	r8, r8, asr #1
 8010142:	3508      	adds	r5, #8
 8010144:	e6e5      	b.n	800ff12 <_strtod_l+0x5ba>
 8010146:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 801014a:	fa02 f303 	lsl.w	r3, r2, r3
 801014e:	ea03 0a0a 	and.w	sl, r3, sl
 8010152:	e6ff      	b.n	800ff54 <_strtod_l+0x5fc>
 8010154:	f1c6 467f 	rsb	r6, r6, #4278190080	; 0xff000000
 8010158:	f506 067f 	add.w	r6, r6, #16711680	; 0xff0000
 801015c:	f506 467b 	add.w	r6, r6, #64256	; 0xfb00
 8010160:	36e2      	adds	r6, #226	; 0xe2
 8010162:	fa01 f306 	lsl.w	r3, r1, r6
 8010166:	930a      	str	r3, [sp, #40]	; 0x28
 8010168:	910f      	str	r1, [sp, #60]	; 0x3c
 801016a:	e75d      	b.n	8010028 <_strtod_l+0x6d0>
 801016c:	2300      	movs	r3, #0
 801016e:	930a      	str	r3, [sp, #40]	; 0x28
 8010170:	2301      	movs	r3, #1
 8010172:	930f      	str	r3, [sp, #60]	; 0x3c
 8010174:	e758      	b.n	8010028 <_strtod_l+0x6d0>
 8010176:	4632      	mov	r2, r6
 8010178:	991c      	ldr	r1, [sp, #112]	; 0x70
 801017a:	4648      	mov	r0, r9
 801017c:	f000 ff2e 	bl	8010fdc <__lshift>
 8010180:	901c      	str	r0, [sp, #112]	; 0x70
 8010182:	2800      	cmp	r0, #0
 8010184:	f47f af7c 	bne.w	8010080 <_strtod_l+0x728>
 8010188:	e604      	b.n	800fd94 <_strtod_l+0x43c>
 801018a:	bf00      	nop
 801018c:	08052178 	.word	0x08052178
 8010190:	fffffc02 	.word	0xfffffc02
 8010194:	465d      	mov	r5, fp
 8010196:	f040 8086 	bne.w	80102a6 <_strtod_l+0x94e>
 801019a:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 801019c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80101a0:	b32a      	cbz	r2, 80101ee <_strtod_l+0x896>
 80101a2:	4aaf      	ldr	r2, [pc, #700]	; (8010460 <_strtod_l+0xb08>)
 80101a4:	4293      	cmp	r3, r2
 80101a6:	d153      	bne.n	8010250 <_strtod_l+0x8f8>
 80101a8:	9b04      	ldr	r3, [sp, #16]
 80101aa:	4650      	mov	r0, sl
 80101ac:	b1d3      	cbz	r3, 80101e4 <_strtod_l+0x88c>
 80101ae:	4aad      	ldr	r2, [pc, #692]	; (8010464 <_strtod_l+0xb0c>)
 80101b0:	402a      	ands	r2, r5
 80101b2:	f1b2 6fd4 	cmp.w	r2, #111149056	; 0x6a00000
 80101b6:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80101ba:	d816      	bhi.n	80101ea <_strtod_l+0x892>
 80101bc:	0d12      	lsrs	r2, r2, #20
 80101be:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80101c2:	fa01 f303 	lsl.w	r3, r1, r3
 80101c6:	4298      	cmp	r0, r3
 80101c8:	d142      	bne.n	8010250 <_strtod_l+0x8f8>
 80101ca:	4ba7      	ldr	r3, [pc, #668]	; (8010468 <_strtod_l+0xb10>)
 80101cc:	429d      	cmp	r5, r3
 80101ce:	d102      	bne.n	80101d6 <_strtod_l+0x87e>
 80101d0:	3001      	adds	r0, #1
 80101d2:	f43f addf 	beq.w	800fd94 <_strtod_l+0x43c>
 80101d6:	4ba3      	ldr	r3, [pc, #652]	; (8010464 <_strtod_l+0xb0c>)
 80101d8:	402b      	ands	r3, r5
 80101da:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 80101de:	f04f 0a00 	mov.w	sl, #0
 80101e2:	e7a0      	b.n	8010126 <_strtod_l+0x7ce>
 80101e4:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80101e8:	e7ed      	b.n	80101c6 <_strtod_l+0x86e>
 80101ea:	460b      	mov	r3, r1
 80101ec:	e7eb      	b.n	80101c6 <_strtod_l+0x86e>
 80101ee:	bb7b      	cbnz	r3, 8010250 <_strtod_l+0x8f8>
 80101f0:	f1ba 0f00 	cmp.w	sl, #0
 80101f4:	d12c      	bne.n	8010250 <_strtod_l+0x8f8>
 80101f6:	9904      	ldr	r1, [sp, #16]
 80101f8:	4a9a      	ldr	r2, [pc, #616]	; (8010464 <_strtod_l+0xb0c>)
 80101fa:	465b      	mov	r3, fp
 80101fc:	b1f1      	cbz	r1, 801023c <_strtod_l+0x8e4>
 80101fe:	ea02 010b 	and.w	r1, r2, fp
 8010202:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8010206:	dc19      	bgt.n	801023c <_strtod_l+0x8e4>
 8010208:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 801020c:	f77f ae5b 	ble.w	800fec6 <_strtod_l+0x56e>
 8010210:	4a96      	ldr	r2, [pc, #600]	; (801046c <_strtod_l+0xb14>)
 8010212:	2300      	movs	r3, #0
 8010214:	e9cd 3214 	strd	r3, r2, [sp, #80]	; 0x50
 8010218:	4650      	mov	r0, sl
 801021a:	4659      	mov	r1, fp
 801021c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8010220:	f7f0 f9a2 	bl	8000568 <__aeabi_dmul>
 8010224:	4682      	mov	sl, r0
 8010226:	468b      	mov	fp, r1
 8010228:	2900      	cmp	r1, #0
 801022a:	f47f adbe 	bne.w	800fdaa <_strtod_l+0x452>
 801022e:	2800      	cmp	r0, #0
 8010230:	f47f adbb 	bne.w	800fdaa <_strtod_l+0x452>
 8010234:	2322      	movs	r3, #34	; 0x22
 8010236:	f8c9 3000 	str.w	r3, [r9]
 801023a:	e5b6      	b.n	800fdaa <_strtod_l+0x452>
 801023c:	4013      	ands	r3, r2
 801023e:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8010242:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8010246:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 801024a:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 801024e:	e76a      	b.n	8010126 <_strtod_l+0x7ce>
 8010250:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8010252:	b193      	cbz	r3, 801027a <_strtod_l+0x922>
 8010254:	422b      	tst	r3, r5
 8010256:	f43f af66 	beq.w	8010126 <_strtod_l+0x7ce>
 801025a:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 801025c:	9a04      	ldr	r2, [sp, #16]
 801025e:	4650      	mov	r0, sl
 8010260:	4659      	mov	r1, fp
 8010262:	b173      	cbz	r3, 8010282 <_strtod_l+0x92a>
 8010264:	f7ff fb5b 	bl	800f91e <sulp>
 8010268:	4602      	mov	r2, r0
 801026a:	460b      	mov	r3, r1
 801026c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8010270:	f7ef ffc4 	bl	80001fc <__adddf3>
 8010274:	4682      	mov	sl, r0
 8010276:	468b      	mov	fp, r1
 8010278:	e755      	b.n	8010126 <_strtod_l+0x7ce>
 801027a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801027c:	ea13 0f0a 	tst.w	r3, sl
 8010280:	e7e9      	b.n	8010256 <_strtod_l+0x8fe>
 8010282:	f7ff fb4c 	bl	800f91e <sulp>
 8010286:	4602      	mov	r2, r0
 8010288:	460b      	mov	r3, r1
 801028a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 801028e:	f7ef ffb3 	bl	80001f8 <__aeabi_dsub>
 8010292:	2200      	movs	r2, #0
 8010294:	2300      	movs	r3, #0
 8010296:	4682      	mov	sl, r0
 8010298:	468b      	mov	fp, r1
 801029a:	f7f0 fbcd 	bl	8000a38 <__aeabi_dcmpeq>
 801029e:	2800      	cmp	r0, #0
 80102a0:	f47f ae11 	bne.w	800fec6 <_strtod_l+0x56e>
 80102a4:	e73f      	b.n	8010126 <_strtod_l+0x7ce>
 80102a6:	4641      	mov	r1, r8
 80102a8:	4620      	mov	r0, r4
 80102aa:	f001 f828 	bl	80112fe <__ratio>
 80102ae:	ec57 6b10 	vmov	r6, r7, d0
 80102b2:	2200      	movs	r2, #0
 80102b4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80102b8:	ee10 0a10 	vmov	r0, s0
 80102bc:	4639      	mov	r1, r7
 80102be:	f7f0 fbcf 	bl	8000a60 <__aeabi_dcmple>
 80102c2:	2800      	cmp	r0, #0
 80102c4:	d077      	beq.n	80103b6 <_strtod_l+0xa5e>
 80102c6:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80102c8:	2b00      	cmp	r3, #0
 80102ca:	d04a      	beq.n	8010362 <_strtod_l+0xa0a>
 80102cc:	4b68      	ldr	r3, [pc, #416]	; (8010470 <_strtod_l+0xb18>)
 80102ce:	2200      	movs	r2, #0
 80102d0:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80102d4:	4f66      	ldr	r7, [pc, #408]	; (8010470 <_strtod_l+0xb18>)
 80102d6:	2600      	movs	r6, #0
 80102d8:	4b62      	ldr	r3, [pc, #392]	; (8010464 <_strtod_l+0xb0c>)
 80102da:	402b      	ands	r3, r5
 80102dc:	930f      	str	r3, [sp, #60]	; 0x3c
 80102de:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80102e0:	4b64      	ldr	r3, [pc, #400]	; (8010474 <_strtod_l+0xb1c>)
 80102e2:	429a      	cmp	r2, r3
 80102e4:	f040 80ce 	bne.w	8010484 <_strtod_l+0xb2c>
 80102e8:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80102ec:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 80102f0:	f1a5 7b54 	sub.w	fp, r5, #55574528	; 0x3500000
 80102f4:	ec4b ab10 	vmov	d0, sl, fp
 80102f8:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80102fc:	e9cd 010a 	strd	r0, r1, [sp, #40]	; 0x28
 8010300:	f000 ff38 	bl	8011174 <__ulp>
 8010304:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	; 0x28
 8010308:	ec53 2b10 	vmov	r2, r3, d0
 801030c:	f7f0 f92c 	bl	8000568 <__aeabi_dmul>
 8010310:	4652      	mov	r2, sl
 8010312:	465b      	mov	r3, fp
 8010314:	f7ef ff72 	bl	80001fc <__adddf3>
 8010318:	460b      	mov	r3, r1
 801031a:	4952      	ldr	r1, [pc, #328]	; (8010464 <_strtod_l+0xb0c>)
 801031c:	4a56      	ldr	r2, [pc, #344]	; (8010478 <_strtod_l+0xb20>)
 801031e:	4019      	ands	r1, r3
 8010320:	4291      	cmp	r1, r2
 8010322:	4682      	mov	sl, r0
 8010324:	d95b      	bls.n	80103de <_strtod_l+0xa86>
 8010326:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8010328:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 801032c:	4293      	cmp	r3, r2
 801032e:	d103      	bne.n	8010338 <_strtod_l+0x9e0>
 8010330:	9b08      	ldr	r3, [sp, #32]
 8010332:	3301      	adds	r3, #1
 8010334:	f43f ad2e 	beq.w	800fd94 <_strtod_l+0x43c>
 8010338:	f8df b12c 	ldr.w	fp, [pc, #300]	; 8010468 <_strtod_l+0xb10>
 801033c:	f04f 3aff 	mov.w	sl, #4294967295	; 0xffffffff
 8010340:	991c      	ldr	r1, [sp, #112]	; 0x70
 8010342:	4648      	mov	r0, r9
 8010344:	f000 fc7e 	bl	8010c44 <_Bfree>
 8010348:	9905      	ldr	r1, [sp, #20]
 801034a:	4648      	mov	r0, r9
 801034c:	f000 fc7a 	bl	8010c44 <_Bfree>
 8010350:	4641      	mov	r1, r8
 8010352:	4648      	mov	r0, r9
 8010354:	f000 fc76 	bl	8010c44 <_Bfree>
 8010358:	4621      	mov	r1, r4
 801035a:	4648      	mov	r0, r9
 801035c:	f000 fc72 	bl	8010c44 <_Bfree>
 8010360:	e619      	b.n	800ff96 <_strtod_l+0x63e>
 8010362:	f1ba 0f00 	cmp.w	sl, #0
 8010366:	d11a      	bne.n	801039e <_strtod_l+0xa46>
 8010368:	f3cb 0313 	ubfx	r3, fp, #0, #20
 801036c:	b9eb      	cbnz	r3, 80103aa <_strtod_l+0xa52>
 801036e:	2200      	movs	r2, #0
 8010370:	4b3f      	ldr	r3, [pc, #252]	; (8010470 <_strtod_l+0xb18>)
 8010372:	4630      	mov	r0, r6
 8010374:	4639      	mov	r1, r7
 8010376:	f7f0 fb69 	bl	8000a4c <__aeabi_dcmplt>
 801037a:	b9c8      	cbnz	r0, 80103b0 <_strtod_l+0xa58>
 801037c:	4630      	mov	r0, r6
 801037e:	4639      	mov	r1, r7
 8010380:	2200      	movs	r2, #0
 8010382:	4b3e      	ldr	r3, [pc, #248]	; (801047c <_strtod_l+0xb24>)
 8010384:	f7f0 f8f0 	bl	8000568 <__aeabi_dmul>
 8010388:	4606      	mov	r6, r0
 801038a:	460f      	mov	r7, r1
 801038c:	f107 4300 	add.w	r3, r7, #2147483648	; 0x80000000
 8010390:	9618      	str	r6, [sp, #96]	; 0x60
 8010392:	9319      	str	r3, [sp, #100]	; 0x64
 8010394:	e9dd 2318 	ldrd	r2, r3, [sp, #96]	; 0x60
 8010398:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 801039c:	e79c      	b.n	80102d8 <_strtod_l+0x980>
 801039e:	f1ba 0f01 	cmp.w	sl, #1
 80103a2:	d102      	bne.n	80103aa <_strtod_l+0xa52>
 80103a4:	2d00      	cmp	r5, #0
 80103a6:	f43f ad8e 	beq.w	800fec6 <_strtod_l+0x56e>
 80103aa:	2200      	movs	r2, #0
 80103ac:	4b34      	ldr	r3, [pc, #208]	; (8010480 <_strtod_l+0xb28>)
 80103ae:	e78f      	b.n	80102d0 <_strtod_l+0x978>
 80103b0:	2600      	movs	r6, #0
 80103b2:	4f32      	ldr	r7, [pc, #200]	; (801047c <_strtod_l+0xb24>)
 80103b4:	e7ea      	b.n	801038c <_strtod_l+0xa34>
 80103b6:	4b31      	ldr	r3, [pc, #196]	; (801047c <_strtod_l+0xb24>)
 80103b8:	4630      	mov	r0, r6
 80103ba:	4639      	mov	r1, r7
 80103bc:	2200      	movs	r2, #0
 80103be:	f7f0 f8d3 	bl	8000568 <__aeabi_dmul>
 80103c2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80103c4:	4606      	mov	r6, r0
 80103c6:	460f      	mov	r7, r1
 80103c8:	b933      	cbnz	r3, 80103d8 <_strtod_l+0xa80>
 80103ca:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80103ce:	9010      	str	r0, [sp, #64]	; 0x40
 80103d0:	9311      	str	r3, [sp, #68]	; 0x44
 80103d2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80103d6:	e7df      	b.n	8010398 <_strtod_l+0xa40>
 80103d8:	e9cd 6710 	strd	r6, r7, [sp, #64]	; 0x40
 80103dc:	e7f9      	b.n	80103d2 <_strtod_l+0xa7a>
 80103de:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80103e2:	9b04      	ldr	r3, [sp, #16]
 80103e4:	2b00      	cmp	r3, #0
 80103e6:	d1ab      	bne.n	8010340 <_strtod_l+0x9e8>
 80103e8:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80103ec:	0d1b      	lsrs	r3, r3, #20
 80103ee:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80103f0:	051b      	lsls	r3, r3, #20
 80103f2:	429a      	cmp	r2, r3
 80103f4:	465d      	mov	r5, fp
 80103f6:	d1a3      	bne.n	8010340 <_strtod_l+0x9e8>
 80103f8:	4639      	mov	r1, r7
 80103fa:	4630      	mov	r0, r6
 80103fc:	f7f0 fb4e 	bl	8000a9c <__aeabi_d2iz>
 8010400:	f7f0 f848 	bl	8000494 <__aeabi_i2d>
 8010404:	460b      	mov	r3, r1
 8010406:	4602      	mov	r2, r0
 8010408:	4639      	mov	r1, r7
 801040a:	4630      	mov	r0, r6
 801040c:	f7ef fef4 	bl	80001f8 <__aeabi_dsub>
 8010410:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8010412:	4606      	mov	r6, r0
 8010414:	460f      	mov	r7, r1
 8010416:	b933      	cbnz	r3, 8010426 <_strtod_l+0xace>
 8010418:	f1ba 0f00 	cmp.w	sl, #0
 801041c:	d103      	bne.n	8010426 <_strtod_l+0xace>
 801041e:	f3cb 0513 	ubfx	r5, fp, #0, #20
 8010422:	2d00      	cmp	r5, #0
 8010424:	d06d      	beq.n	8010502 <_strtod_l+0xbaa>
 8010426:	a30a      	add	r3, pc, #40	; (adr r3, 8010450 <_strtod_l+0xaf8>)
 8010428:	e9d3 2300 	ldrd	r2, r3, [r3]
 801042c:	4630      	mov	r0, r6
 801042e:	4639      	mov	r1, r7
 8010430:	f7f0 fb0c 	bl	8000a4c <__aeabi_dcmplt>
 8010434:	2800      	cmp	r0, #0
 8010436:	f47f acb8 	bne.w	800fdaa <_strtod_l+0x452>
 801043a:	a307      	add	r3, pc, #28	; (adr r3, 8010458 <_strtod_l+0xb00>)
 801043c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010440:	4630      	mov	r0, r6
 8010442:	4639      	mov	r1, r7
 8010444:	f7f0 fb20 	bl	8000a88 <__aeabi_dcmpgt>
 8010448:	2800      	cmp	r0, #0
 801044a:	f43f af79 	beq.w	8010340 <_strtod_l+0x9e8>
 801044e:	e4ac      	b.n	800fdaa <_strtod_l+0x452>
 8010450:	94a03595 	.word	0x94a03595
 8010454:	3fdfffff 	.word	0x3fdfffff
 8010458:	35afe535 	.word	0x35afe535
 801045c:	3fe00000 	.word	0x3fe00000
 8010460:	000fffff 	.word	0x000fffff
 8010464:	7ff00000 	.word	0x7ff00000
 8010468:	7fefffff 	.word	0x7fefffff
 801046c:	39500000 	.word	0x39500000
 8010470:	3ff00000 	.word	0x3ff00000
 8010474:	7fe00000 	.word	0x7fe00000
 8010478:	7c9fffff 	.word	0x7c9fffff
 801047c:	3fe00000 	.word	0x3fe00000
 8010480:	bff00000 	.word	0xbff00000
 8010484:	9b04      	ldr	r3, [sp, #16]
 8010486:	b333      	cbz	r3, 80104d6 <_strtod_l+0xb7e>
 8010488:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 801048a:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 801048e:	d822      	bhi.n	80104d6 <_strtod_l+0xb7e>
 8010490:	a327      	add	r3, pc, #156	; (adr r3, 8010530 <_strtod_l+0xbd8>)
 8010492:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010496:	4630      	mov	r0, r6
 8010498:	4639      	mov	r1, r7
 801049a:	f7f0 fae1 	bl	8000a60 <__aeabi_dcmple>
 801049e:	b1a0      	cbz	r0, 80104ca <_strtod_l+0xb72>
 80104a0:	4639      	mov	r1, r7
 80104a2:	4630      	mov	r0, r6
 80104a4:	f7f0 fb22 	bl	8000aec <__aeabi_d2uiz>
 80104a8:	2800      	cmp	r0, #0
 80104aa:	bf08      	it	eq
 80104ac:	2001      	moveq	r0, #1
 80104ae:	f7ef ffe1 	bl	8000474 <__aeabi_ui2d>
 80104b2:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80104b4:	4606      	mov	r6, r0
 80104b6:	460f      	mov	r7, r1
 80104b8:	bb03      	cbnz	r3, 80104fc <_strtod_l+0xba4>
 80104ba:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80104be:	9012      	str	r0, [sp, #72]	; 0x48
 80104c0:	9313      	str	r3, [sp, #76]	; 0x4c
 80104c2:	e9dd 2312 	ldrd	r2, r3, [sp, #72]	; 0x48
 80104c6:	e9cd 230a 	strd	r2, r3, [sp, #40]	; 0x28
 80104ca:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80104cc:	9a0f      	ldr	r2, [sp, #60]	; 0x3c
 80104ce:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 80104d2:	1a9b      	subs	r3, r3, r2
 80104d4:	930b      	str	r3, [sp, #44]	; 0x2c
 80104d6:	ed9d 0b08 	vldr	d0, [sp, #32]
 80104da:	e9dd ab0a 	ldrd	sl, fp, [sp, #40]	; 0x28
 80104de:	f000 fe49 	bl	8011174 <__ulp>
 80104e2:	4650      	mov	r0, sl
 80104e4:	ec53 2b10 	vmov	r2, r3, d0
 80104e8:	4659      	mov	r1, fp
 80104ea:	f7f0 f83d 	bl	8000568 <__aeabi_dmul>
 80104ee:	e9dd 2308 	ldrd	r2, r3, [sp, #32]
 80104f2:	f7ef fe83 	bl	80001fc <__adddf3>
 80104f6:	4682      	mov	sl, r0
 80104f8:	468b      	mov	fp, r1
 80104fa:	e772      	b.n	80103e2 <_strtod_l+0xa8a>
 80104fc:	e9cd 6712 	strd	r6, r7, [sp, #72]	; 0x48
 8010500:	e7df      	b.n	80104c2 <_strtod_l+0xb6a>
 8010502:	a30d      	add	r3, pc, #52	; (adr r3, 8010538 <_strtod_l+0xbe0>)
 8010504:	e9d3 2300 	ldrd	r2, r3, [r3]
 8010508:	f7f0 faa0 	bl	8000a4c <__aeabi_dcmplt>
 801050c:	e79c      	b.n	8010448 <_strtod_l+0xaf0>
 801050e:	2300      	movs	r3, #0
 8010510:	930d      	str	r3, [sp, #52]	; 0x34
 8010512:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8010514:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8010516:	6013      	str	r3, [r2, #0]
 8010518:	f7ff ba61 	b.w	800f9de <_strtod_l+0x86>
 801051c:	2b65      	cmp	r3, #101	; 0x65
 801051e:	f04f 0200 	mov.w	r2, #0
 8010522:	f43f ab4e 	beq.w	800fbc2 <_strtod_l+0x26a>
 8010526:	2101      	movs	r1, #1
 8010528:	4614      	mov	r4, r2
 801052a:	9104      	str	r1, [sp, #16]
 801052c:	f7ff bacb 	b.w	800fac6 <_strtod_l+0x16e>
 8010530:	ffc00000 	.word	0xffc00000
 8010534:	41dfffff 	.word	0x41dfffff
 8010538:	94a03595 	.word	0x94a03595
 801053c:	3fcfffff 	.word	0x3fcfffff

08010540 <strtod>:
 8010540:	4b07      	ldr	r3, [pc, #28]	; (8010560 <strtod+0x20>)
 8010542:	4a08      	ldr	r2, [pc, #32]	; (8010564 <strtod+0x24>)
 8010544:	b410      	push	{r4}
 8010546:	681c      	ldr	r4, [r3, #0]
 8010548:	6a23      	ldr	r3, [r4, #32]
 801054a:	2b00      	cmp	r3, #0
 801054c:	bf08      	it	eq
 801054e:	4613      	moveq	r3, r2
 8010550:	460a      	mov	r2, r1
 8010552:	4601      	mov	r1, r0
 8010554:	4620      	mov	r0, r4
 8010556:	f85d 4b04 	ldr.w	r4, [sp], #4
 801055a:	f7ff b9fd 	b.w	800f958 <_strtod_l>
 801055e:	bf00      	nop
 8010560:	20000014 	.word	0x20000014
 8010564:	20000078 	.word	0x20000078

08010568 <rshift>:
 8010568:	b5f0      	push	{r4, r5, r6, r7, lr}
 801056a:	6906      	ldr	r6, [r0, #16]
 801056c:	114b      	asrs	r3, r1, #5
 801056e:	429e      	cmp	r6, r3
 8010570:	f100 0414 	add.w	r4, r0, #20
 8010574:	dd30      	ble.n	80105d8 <rshift+0x70>
 8010576:	f011 011f 	ands.w	r1, r1, #31
 801057a:	eb04 0686 	add.w	r6, r4, r6, lsl #2
 801057e:	eb04 0283 	add.w	r2, r4, r3, lsl #2
 8010582:	d108      	bne.n	8010596 <rshift+0x2e>
 8010584:	4621      	mov	r1, r4
 8010586:	42b2      	cmp	r2, r6
 8010588:	460b      	mov	r3, r1
 801058a:	d211      	bcs.n	80105b0 <rshift+0x48>
 801058c:	f852 3b04 	ldr.w	r3, [r2], #4
 8010590:	f841 3b04 	str.w	r3, [r1], #4
 8010594:	e7f7      	b.n	8010586 <rshift+0x1e>
 8010596:	f854 5023 	ldr.w	r5, [r4, r3, lsl #2]
 801059a:	f1c1 0c20 	rsb	ip, r1, #32
 801059e:	40cd      	lsrs	r5, r1
 80105a0:	3204      	adds	r2, #4
 80105a2:	4623      	mov	r3, r4
 80105a4:	42b2      	cmp	r2, r6
 80105a6:	4617      	mov	r7, r2
 80105a8:	d30c      	bcc.n	80105c4 <rshift+0x5c>
 80105aa:	601d      	str	r5, [r3, #0]
 80105ac:	b105      	cbz	r5, 80105b0 <rshift+0x48>
 80105ae:	3304      	adds	r3, #4
 80105b0:	1b1a      	subs	r2, r3, r4
 80105b2:	42a3      	cmp	r3, r4
 80105b4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 80105b8:	bf08      	it	eq
 80105ba:	2300      	moveq	r3, #0
 80105bc:	6102      	str	r2, [r0, #16]
 80105be:	bf08      	it	eq
 80105c0:	6143      	streq	r3, [r0, #20]
 80105c2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80105c4:	683f      	ldr	r7, [r7, #0]
 80105c6:	fa07 f70c 	lsl.w	r7, r7, ip
 80105ca:	433d      	orrs	r5, r7
 80105cc:	f843 5b04 	str.w	r5, [r3], #4
 80105d0:	f852 5b04 	ldr.w	r5, [r2], #4
 80105d4:	40cd      	lsrs	r5, r1
 80105d6:	e7e5      	b.n	80105a4 <rshift+0x3c>
 80105d8:	4623      	mov	r3, r4
 80105da:	e7e9      	b.n	80105b0 <rshift+0x48>

080105dc <__hexdig_fun>:
 80105dc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 80105e0:	2b09      	cmp	r3, #9
 80105e2:	d802      	bhi.n	80105ea <__hexdig_fun+0xe>
 80105e4:	3820      	subs	r0, #32
 80105e6:	b2c0      	uxtb	r0, r0
 80105e8:	4770      	bx	lr
 80105ea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 80105ee:	2b05      	cmp	r3, #5
 80105f0:	d801      	bhi.n	80105f6 <__hexdig_fun+0x1a>
 80105f2:	3847      	subs	r0, #71	; 0x47
 80105f4:	e7f7      	b.n	80105e6 <__hexdig_fun+0xa>
 80105f6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 80105fa:	2b05      	cmp	r3, #5
 80105fc:	d801      	bhi.n	8010602 <__hexdig_fun+0x26>
 80105fe:	3827      	subs	r0, #39	; 0x27
 8010600:	e7f1      	b.n	80105e6 <__hexdig_fun+0xa>
 8010602:	2000      	movs	r0, #0
 8010604:	4770      	bx	lr

08010606 <__gethex>:
 8010606:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801060a:	b08b      	sub	sp, #44	; 0x2c
 801060c:	468a      	mov	sl, r1
 801060e:	9002      	str	r0, [sp, #8]
 8010610:	9816      	ldr	r0, [sp, #88]	; 0x58
 8010612:	9306      	str	r3, [sp, #24]
 8010614:	4690      	mov	r8, r2
 8010616:	f000 facd 	bl	8010bb4 <__localeconv_l>
 801061a:	6803      	ldr	r3, [r0, #0]
 801061c:	9303      	str	r3, [sp, #12]
 801061e:	4618      	mov	r0, r3
 8010620:	f7ef fdde 	bl	80001e0 <strlen>
 8010624:	9b03      	ldr	r3, [sp, #12]
 8010626:	9001      	str	r0, [sp, #4]
 8010628:	4403      	add	r3, r0
 801062a:	f04f 0b00 	mov.w	fp, #0
 801062e:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 8010632:	9307      	str	r3, [sp, #28]
 8010634:	f8da 3000 	ldr.w	r3, [sl]
 8010638:	3302      	adds	r3, #2
 801063a:	461f      	mov	r7, r3
 801063c:	f813 0b01 	ldrb.w	r0, [r3], #1
 8010640:	2830      	cmp	r0, #48	; 0x30
 8010642:	d06c      	beq.n	801071e <__gethex+0x118>
 8010644:	f7ff ffca 	bl	80105dc <__hexdig_fun>
 8010648:	4604      	mov	r4, r0
 801064a:	2800      	cmp	r0, #0
 801064c:	d16a      	bne.n	8010724 <__gethex+0x11e>
 801064e:	9a01      	ldr	r2, [sp, #4]
 8010650:	9903      	ldr	r1, [sp, #12]
 8010652:	4638      	mov	r0, r7
 8010654:	f000 ff3a 	bl	80114cc <strncmp>
 8010658:	2800      	cmp	r0, #0
 801065a:	d166      	bne.n	801072a <__gethex+0x124>
 801065c:	9b01      	ldr	r3, [sp, #4]
 801065e:	5cf8      	ldrb	r0, [r7, r3]
 8010660:	18fe      	adds	r6, r7, r3
 8010662:	f7ff ffbb 	bl	80105dc <__hexdig_fun>
 8010666:	2800      	cmp	r0, #0
 8010668:	d062      	beq.n	8010730 <__gethex+0x12a>
 801066a:	4633      	mov	r3, r6
 801066c:	7818      	ldrb	r0, [r3, #0]
 801066e:	2830      	cmp	r0, #48	; 0x30
 8010670:	461f      	mov	r7, r3
 8010672:	f103 0301 	add.w	r3, r3, #1
 8010676:	d0f9      	beq.n	801066c <__gethex+0x66>
 8010678:	f7ff ffb0 	bl	80105dc <__hexdig_fun>
 801067c:	fab0 f580 	clz	r5, r0
 8010680:	096d      	lsrs	r5, r5, #5
 8010682:	4634      	mov	r4, r6
 8010684:	f04f 0b01 	mov.w	fp, #1
 8010688:	463a      	mov	r2, r7
 801068a:	4616      	mov	r6, r2
 801068c:	3201      	adds	r2, #1
 801068e:	7830      	ldrb	r0, [r6, #0]
 8010690:	f7ff ffa4 	bl	80105dc <__hexdig_fun>
 8010694:	2800      	cmp	r0, #0
 8010696:	d1f8      	bne.n	801068a <__gethex+0x84>
 8010698:	9a01      	ldr	r2, [sp, #4]
 801069a:	9903      	ldr	r1, [sp, #12]
 801069c:	4630      	mov	r0, r6
 801069e:	f000 ff15 	bl	80114cc <strncmp>
 80106a2:	b950      	cbnz	r0, 80106ba <__gethex+0xb4>
 80106a4:	b954      	cbnz	r4, 80106bc <__gethex+0xb6>
 80106a6:	9b01      	ldr	r3, [sp, #4]
 80106a8:	18f4      	adds	r4, r6, r3
 80106aa:	4622      	mov	r2, r4
 80106ac:	4616      	mov	r6, r2
 80106ae:	3201      	adds	r2, #1
 80106b0:	7830      	ldrb	r0, [r6, #0]
 80106b2:	f7ff ff93 	bl	80105dc <__hexdig_fun>
 80106b6:	2800      	cmp	r0, #0
 80106b8:	d1f8      	bne.n	80106ac <__gethex+0xa6>
 80106ba:	b10c      	cbz	r4, 80106c0 <__gethex+0xba>
 80106bc:	1ba4      	subs	r4, r4, r6
 80106be:	00a4      	lsls	r4, r4, #2
 80106c0:	7833      	ldrb	r3, [r6, #0]
 80106c2:	2b50      	cmp	r3, #80	; 0x50
 80106c4:	d001      	beq.n	80106ca <__gethex+0xc4>
 80106c6:	2b70      	cmp	r3, #112	; 0x70
 80106c8:	d140      	bne.n	801074c <__gethex+0x146>
 80106ca:	7873      	ldrb	r3, [r6, #1]
 80106cc:	2b2b      	cmp	r3, #43	; 0x2b
 80106ce:	d031      	beq.n	8010734 <__gethex+0x12e>
 80106d0:	2b2d      	cmp	r3, #45	; 0x2d
 80106d2:	d033      	beq.n	801073c <__gethex+0x136>
 80106d4:	1c71      	adds	r1, r6, #1
 80106d6:	f04f 0900 	mov.w	r9, #0
 80106da:	7808      	ldrb	r0, [r1, #0]
 80106dc:	f7ff ff7e 	bl	80105dc <__hexdig_fun>
 80106e0:	1e43      	subs	r3, r0, #1
 80106e2:	b2db      	uxtb	r3, r3
 80106e4:	2b18      	cmp	r3, #24
 80106e6:	d831      	bhi.n	801074c <__gethex+0x146>
 80106e8:	f1a0 0210 	sub.w	r2, r0, #16
 80106ec:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 80106f0:	f7ff ff74 	bl	80105dc <__hexdig_fun>
 80106f4:	1e43      	subs	r3, r0, #1
 80106f6:	b2db      	uxtb	r3, r3
 80106f8:	2b18      	cmp	r3, #24
 80106fa:	d922      	bls.n	8010742 <__gethex+0x13c>
 80106fc:	f1b9 0f00 	cmp.w	r9, #0
 8010700:	d000      	beq.n	8010704 <__gethex+0xfe>
 8010702:	4252      	negs	r2, r2
 8010704:	4414      	add	r4, r2
 8010706:	f8ca 1000 	str.w	r1, [sl]
 801070a:	b30d      	cbz	r5, 8010750 <__gethex+0x14a>
 801070c:	f1bb 0f00 	cmp.w	fp, #0
 8010710:	bf0c      	ite	eq
 8010712:	2706      	moveq	r7, #6
 8010714:	2700      	movne	r7, #0
 8010716:	4638      	mov	r0, r7
 8010718:	b00b      	add	sp, #44	; 0x2c
 801071a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801071e:	f10b 0b01 	add.w	fp, fp, #1
 8010722:	e78a      	b.n	801063a <__gethex+0x34>
 8010724:	2500      	movs	r5, #0
 8010726:	462c      	mov	r4, r5
 8010728:	e7ae      	b.n	8010688 <__gethex+0x82>
 801072a:	463e      	mov	r6, r7
 801072c:	2501      	movs	r5, #1
 801072e:	e7c7      	b.n	80106c0 <__gethex+0xba>
 8010730:	4604      	mov	r4, r0
 8010732:	e7fb      	b.n	801072c <__gethex+0x126>
 8010734:	f04f 0900 	mov.w	r9, #0
 8010738:	1cb1      	adds	r1, r6, #2
 801073a:	e7ce      	b.n	80106da <__gethex+0xd4>
 801073c:	f04f 0901 	mov.w	r9, #1
 8010740:	e7fa      	b.n	8010738 <__gethex+0x132>
 8010742:	230a      	movs	r3, #10
 8010744:	fb03 0202 	mla	r2, r3, r2, r0
 8010748:	3a10      	subs	r2, #16
 801074a:	e7cf      	b.n	80106ec <__gethex+0xe6>
 801074c:	4631      	mov	r1, r6
 801074e:	e7da      	b.n	8010706 <__gethex+0x100>
 8010750:	1bf3      	subs	r3, r6, r7
 8010752:	3b01      	subs	r3, #1
 8010754:	4629      	mov	r1, r5
 8010756:	2b07      	cmp	r3, #7
 8010758:	dc49      	bgt.n	80107ee <__gethex+0x1e8>
 801075a:	9802      	ldr	r0, [sp, #8]
 801075c:	f000 fa3e 	bl	8010bdc <_Balloc>
 8010760:	9b01      	ldr	r3, [sp, #4]
 8010762:	f100 0914 	add.w	r9, r0, #20
 8010766:	f04f 0b00 	mov.w	fp, #0
 801076a:	f1c3 0301 	rsb	r3, r3, #1
 801076e:	4605      	mov	r5, r0
 8010770:	f8cd 9010 	str.w	r9, [sp, #16]
 8010774:	46da      	mov	sl, fp
 8010776:	9308      	str	r3, [sp, #32]
 8010778:	42b7      	cmp	r7, r6
 801077a:	d33b      	bcc.n	80107f4 <__gethex+0x1ee>
 801077c:	9804      	ldr	r0, [sp, #16]
 801077e:	f840 ab04 	str.w	sl, [r0], #4
 8010782:	eba0 0009 	sub.w	r0, r0, r9
 8010786:	1080      	asrs	r0, r0, #2
 8010788:	6128      	str	r0, [r5, #16]
 801078a:	0147      	lsls	r7, r0, #5
 801078c:	4650      	mov	r0, sl
 801078e:	f000 fae9 	bl	8010d64 <__hi0bits>
 8010792:	f8d8 6000 	ldr.w	r6, [r8]
 8010796:	1a3f      	subs	r7, r7, r0
 8010798:	42b7      	cmp	r7, r6
 801079a:	dd64      	ble.n	8010866 <__gethex+0x260>
 801079c:	1bbf      	subs	r7, r7, r6
 801079e:	4639      	mov	r1, r7
 80107a0:	4628      	mov	r0, r5
 80107a2:	f000 fdf9 	bl	8011398 <__any_on>
 80107a6:	4682      	mov	sl, r0
 80107a8:	b178      	cbz	r0, 80107ca <__gethex+0x1c4>
 80107aa:	1e7b      	subs	r3, r7, #1
 80107ac:	1159      	asrs	r1, r3, #5
 80107ae:	f003 021f 	and.w	r2, r3, #31
 80107b2:	f04f 0a01 	mov.w	sl, #1
 80107b6:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 80107ba:	fa0a f202 	lsl.w	r2, sl, r2
 80107be:	420a      	tst	r2, r1
 80107c0:	d003      	beq.n	80107ca <__gethex+0x1c4>
 80107c2:	4553      	cmp	r3, sl
 80107c4:	dc46      	bgt.n	8010854 <__gethex+0x24e>
 80107c6:	f04f 0a02 	mov.w	sl, #2
 80107ca:	4639      	mov	r1, r7
 80107cc:	4628      	mov	r0, r5
 80107ce:	f7ff fecb 	bl	8010568 <rshift>
 80107d2:	443c      	add	r4, r7
 80107d4:	f8d8 3008 	ldr.w	r3, [r8, #8]
 80107d8:	42a3      	cmp	r3, r4
 80107da:	da52      	bge.n	8010882 <__gethex+0x27c>
 80107dc:	4629      	mov	r1, r5
 80107de:	9802      	ldr	r0, [sp, #8]
 80107e0:	f000 fa30 	bl	8010c44 <_Bfree>
 80107e4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80107e6:	2300      	movs	r3, #0
 80107e8:	6013      	str	r3, [r2, #0]
 80107ea:	27a3      	movs	r7, #163	; 0xa3
 80107ec:	e793      	b.n	8010716 <__gethex+0x110>
 80107ee:	3101      	adds	r1, #1
 80107f0:	105b      	asrs	r3, r3, #1
 80107f2:	e7b0      	b.n	8010756 <__gethex+0x150>
 80107f4:	1e73      	subs	r3, r6, #1
 80107f6:	9305      	str	r3, [sp, #20]
 80107f8:	9a07      	ldr	r2, [sp, #28]
 80107fa:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80107fe:	4293      	cmp	r3, r2
 8010800:	d018      	beq.n	8010834 <__gethex+0x22e>
 8010802:	f1bb 0f20 	cmp.w	fp, #32
 8010806:	d107      	bne.n	8010818 <__gethex+0x212>
 8010808:	9b04      	ldr	r3, [sp, #16]
 801080a:	f8c3 a000 	str.w	sl, [r3]
 801080e:	3304      	adds	r3, #4
 8010810:	f04f 0a00 	mov.w	sl, #0
 8010814:	9304      	str	r3, [sp, #16]
 8010816:	46d3      	mov	fp, sl
 8010818:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 801081c:	f7ff fede 	bl	80105dc <__hexdig_fun>
 8010820:	f000 000f 	and.w	r0, r0, #15
 8010824:	fa00 f00b 	lsl.w	r0, r0, fp
 8010828:	ea4a 0a00 	orr.w	sl, sl, r0
 801082c:	f10b 0b04 	add.w	fp, fp, #4
 8010830:	9b05      	ldr	r3, [sp, #20]
 8010832:	e00d      	b.n	8010850 <__gethex+0x24a>
 8010834:	9b05      	ldr	r3, [sp, #20]
 8010836:	9a08      	ldr	r2, [sp, #32]
 8010838:	4413      	add	r3, r2
 801083a:	42bb      	cmp	r3, r7
 801083c:	d3e1      	bcc.n	8010802 <__gethex+0x1fc>
 801083e:	4618      	mov	r0, r3
 8010840:	9a01      	ldr	r2, [sp, #4]
 8010842:	9903      	ldr	r1, [sp, #12]
 8010844:	9309      	str	r3, [sp, #36]	; 0x24
 8010846:	f000 fe41 	bl	80114cc <strncmp>
 801084a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801084c:	2800      	cmp	r0, #0
 801084e:	d1d8      	bne.n	8010802 <__gethex+0x1fc>
 8010850:	461e      	mov	r6, r3
 8010852:	e791      	b.n	8010778 <__gethex+0x172>
 8010854:	1eb9      	subs	r1, r7, #2
 8010856:	4628      	mov	r0, r5
 8010858:	f000 fd9e 	bl	8011398 <__any_on>
 801085c:	2800      	cmp	r0, #0
 801085e:	d0b2      	beq.n	80107c6 <__gethex+0x1c0>
 8010860:	f04f 0a03 	mov.w	sl, #3
 8010864:	e7b1      	b.n	80107ca <__gethex+0x1c4>
 8010866:	da09      	bge.n	801087c <__gethex+0x276>
 8010868:	1bf7      	subs	r7, r6, r7
 801086a:	4629      	mov	r1, r5
 801086c:	463a      	mov	r2, r7
 801086e:	9802      	ldr	r0, [sp, #8]
 8010870:	f000 fbb4 	bl	8010fdc <__lshift>
 8010874:	1be4      	subs	r4, r4, r7
 8010876:	4605      	mov	r5, r0
 8010878:	f100 0914 	add.w	r9, r0, #20
 801087c:	f04f 0a00 	mov.w	sl, #0
 8010880:	e7a8      	b.n	80107d4 <__gethex+0x1ce>
 8010882:	f8d8 0004 	ldr.w	r0, [r8, #4]
 8010886:	42a0      	cmp	r0, r4
 8010888:	dd6a      	ble.n	8010960 <__gethex+0x35a>
 801088a:	1b04      	subs	r4, r0, r4
 801088c:	42a6      	cmp	r6, r4
 801088e:	dc2e      	bgt.n	80108ee <__gethex+0x2e8>
 8010890:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010894:	2b02      	cmp	r3, #2
 8010896:	d022      	beq.n	80108de <__gethex+0x2d8>
 8010898:	2b03      	cmp	r3, #3
 801089a:	d024      	beq.n	80108e6 <__gethex+0x2e0>
 801089c:	2b01      	cmp	r3, #1
 801089e:	d115      	bne.n	80108cc <__gethex+0x2c6>
 80108a0:	42a6      	cmp	r6, r4
 80108a2:	d113      	bne.n	80108cc <__gethex+0x2c6>
 80108a4:	2e01      	cmp	r6, #1
 80108a6:	dc0b      	bgt.n	80108c0 <__gethex+0x2ba>
 80108a8:	9a06      	ldr	r2, [sp, #24]
 80108aa:	f8d8 3004 	ldr.w	r3, [r8, #4]
 80108ae:	6013      	str	r3, [r2, #0]
 80108b0:	2301      	movs	r3, #1
 80108b2:	612b      	str	r3, [r5, #16]
 80108b4:	f8c9 3000 	str.w	r3, [r9]
 80108b8:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80108ba:	2762      	movs	r7, #98	; 0x62
 80108bc:	601d      	str	r5, [r3, #0]
 80108be:	e72a      	b.n	8010716 <__gethex+0x110>
 80108c0:	1e71      	subs	r1, r6, #1
 80108c2:	4628      	mov	r0, r5
 80108c4:	f000 fd68 	bl	8011398 <__any_on>
 80108c8:	2800      	cmp	r0, #0
 80108ca:	d1ed      	bne.n	80108a8 <__gethex+0x2a2>
 80108cc:	4629      	mov	r1, r5
 80108ce:	9802      	ldr	r0, [sp, #8]
 80108d0:	f000 f9b8 	bl	8010c44 <_Bfree>
 80108d4:	9a14      	ldr	r2, [sp, #80]	; 0x50
 80108d6:	2300      	movs	r3, #0
 80108d8:	6013      	str	r3, [r2, #0]
 80108da:	2750      	movs	r7, #80	; 0x50
 80108dc:	e71b      	b.n	8010716 <__gethex+0x110>
 80108de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80108e0:	2b00      	cmp	r3, #0
 80108e2:	d0e1      	beq.n	80108a8 <__gethex+0x2a2>
 80108e4:	e7f2      	b.n	80108cc <__gethex+0x2c6>
 80108e6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 80108e8:	2b00      	cmp	r3, #0
 80108ea:	d1dd      	bne.n	80108a8 <__gethex+0x2a2>
 80108ec:	e7ee      	b.n	80108cc <__gethex+0x2c6>
 80108ee:	1e67      	subs	r7, r4, #1
 80108f0:	f1ba 0f00 	cmp.w	sl, #0
 80108f4:	d131      	bne.n	801095a <__gethex+0x354>
 80108f6:	b127      	cbz	r7, 8010902 <__gethex+0x2fc>
 80108f8:	4639      	mov	r1, r7
 80108fa:	4628      	mov	r0, r5
 80108fc:	f000 fd4c 	bl	8011398 <__any_on>
 8010900:	4682      	mov	sl, r0
 8010902:	117a      	asrs	r2, r7, #5
 8010904:	2301      	movs	r3, #1
 8010906:	f007 071f 	and.w	r7, r7, #31
 801090a:	fa03 f707 	lsl.w	r7, r3, r7
 801090e:	f859 3022 	ldr.w	r3, [r9, r2, lsl #2]
 8010912:	4621      	mov	r1, r4
 8010914:	421f      	tst	r7, r3
 8010916:	4628      	mov	r0, r5
 8010918:	bf18      	it	ne
 801091a:	f04a 0a02 	orrne.w	sl, sl, #2
 801091e:	1b36      	subs	r6, r6, r4
 8010920:	f7ff fe22 	bl	8010568 <rshift>
 8010924:	f8d8 4004 	ldr.w	r4, [r8, #4]
 8010928:	2702      	movs	r7, #2
 801092a:	f1ba 0f00 	cmp.w	sl, #0
 801092e:	d048      	beq.n	80109c2 <__gethex+0x3bc>
 8010930:	f8d8 300c 	ldr.w	r3, [r8, #12]
 8010934:	2b02      	cmp	r3, #2
 8010936:	d015      	beq.n	8010964 <__gethex+0x35e>
 8010938:	2b03      	cmp	r3, #3
 801093a:	d017      	beq.n	801096c <__gethex+0x366>
 801093c:	2b01      	cmp	r3, #1
 801093e:	d109      	bne.n	8010954 <__gethex+0x34e>
 8010940:	f01a 0f02 	tst.w	sl, #2
 8010944:	d006      	beq.n	8010954 <__gethex+0x34e>
 8010946:	f8d9 3000 	ldr.w	r3, [r9]
 801094a:	ea4a 0a03 	orr.w	sl, sl, r3
 801094e:	f01a 0f01 	tst.w	sl, #1
 8010952:	d10e      	bne.n	8010972 <__gethex+0x36c>
 8010954:	f047 0710 	orr.w	r7, r7, #16
 8010958:	e033      	b.n	80109c2 <__gethex+0x3bc>
 801095a:	f04f 0a01 	mov.w	sl, #1
 801095e:	e7d0      	b.n	8010902 <__gethex+0x2fc>
 8010960:	2701      	movs	r7, #1
 8010962:	e7e2      	b.n	801092a <__gethex+0x324>
 8010964:	9b15      	ldr	r3, [sp, #84]	; 0x54
 8010966:	f1c3 0301 	rsb	r3, r3, #1
 801096a:	9315      	str	r3, [sp, #84]	; 0x54
 801096c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 801096e:	2b00      	cmp	r3, #0
 8010970:	d0f0      	beq.n	8010954 <__gethex+0x34e>
 8010972:	f8d5 9010 	ldr.w	r9, [r5, #16]
 8010976:	f105 0314 	add.w	r3, r5, #20
 801097a:	ea4f 0a89 	mov.w	sl, r9, lsl #2
 801097e:	eb03 010a 	add.w	r1, r3, sl
 8010982:	f04f 0c00 	mov.w	ip, #0
 8010986:	4618      	mov	r0, r3
 8010988:	f853 2b04 	ldr.w	r2, [r3], #4
 801098c:	f1b2 3fff 	cmp.w	r2, #4294967295	; 0xffffffff
 8010990:	d01c      	beq.n	80109cc <__gethex+0x3c6>
 8010992:	3201      	adds	r2, #1
 8010994:	6002      	str	r2, [r0, #0]
 8010996:	2f02      	cmp	r7, #2
 8010998:	f105 0314 	add.w	r3, r5, #20
 801099c:	d138      	bne.n	8010a10 <__gethex+0x40a>
 801099e:	f8d8 2000 	ldr.w	r2, [r8]
 80109a2:	3a01      	subs	r2, #1
 80109a4:	42b2      	cmp	r2, r6
 80109a6:	d10a      	bne.n	80109be <__gethex+0x3b8>
 80109a8:	1171      	asrs	r1, r6, #5
 80109aa:	2201      	movs	r2, #1
 80109ac:	f006 061f 	and.w	r6, r6, #31
 80109b0:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 80109b4:	fa02 f606 	lsl.w	r6, r2, r6
 80109b8:	421e      	tst	r6, r3
 80109ba:	bf18      	it	ne
 80109bc:	4617      	movne	r7, r2
 80109be:	f047 0720 	orr.w	r7, r7, #32
 80109c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 80109c4:	601d      	str	r5, [r3, #0]
 80109c6:	9b06      	ldr	r3, [sp, #24]
 80109c8:	601c      	str	r4, [r3, #0]
 80109ca:	e6a4      	b.n	8010716 <__gethex+0x110>
 80109cc:	4299      	cmp	r1, r3
 80109ce:	f843 cc04 	str.w	ip, [r3, #-4]
 80109d2:	d8d8      	bhi.n	8010986 <__gethex+0x380>
 80109d4:	68ab      	ldr	r3, [r5, #8]
 80109d6:	4599      	cmp	r9, r3
 80109d8:	db12      	blt.n	8010a00 <__gethex+0x3fa>
 80109da:	6869      	ldr	r1, [r5, #4]
 80109dc:	9802      	ldr	r0, [sp, #8]
 80109de:	3101      	adds	r1, #1
 80109e0:	f000 f8fc 	bl	8010bdc <_Balloc>
 80109e4:	692a      	ldr	r2, [r5, #16]
 80109e6:	3202      	adds	r2, #2
 80109e8:	f105 010c 	add.w	r1, r5, #12
 80109ec:	4683      	mov	fp, r0
 80109ee:	0092      	lsls	r2, r2, #2
 80109f0:	300c      	adds	r0, #12
 80109f2:	f7fe ff81 	bl	800f8f8 <memcpy>
 80109f6:	4629      	mov	r1, r5
 80109f8:	9802      	ldr	r0, [sp, #8]
 80109fa:	f000 f923 	bl	8010c44 <_Bfree>
 80109fe:	465d      	mov	r5, fp
 8010a00:	692b      	ldr	r3, [r5, #16]
 8010a02:	1c5a      	adds	r2, r3, #1
 8010a04:	eb05 0383 	add.w	r3, r5, r3, lsl #2
 8010a08:	612a      	str	r2, [r5, #16]
 8010a0a:	2201      	movs	r2, #1
 8010a0c:	615a      	str	r2, [r3, #20]
 8010a0e:	e7c2      	b.n	8010996 <__gethex+0x390>
 8010a10:	692a      	ldr	r2, [r5, #16]
 8010a12:	454a      	cmp	r2, r9
 8010a14:	dd0b      	ble.n	8010a2e <__gethex+0x428>
 8010a16:	2101      	movs	r1, #1
 8010a18:	4628      	mov	r0, r5
 8010a1a:	f7ff fda5 	bl	8010568 <rshift>
 8010a1e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010a22:	3401      	adds	r4, #1
 8010a24:	42a3      	cmp	r3, r4
 8010a26:	f6ff aed9 	blt.w	80107dc <__gethex+0x1d6>
 8010a2a:	2701      	movs	r7, #1
 8010a2c:	e7c7      	b.n	80109be <__gethex+0x3b8>
 8010a2e:	f016 061f 	ands.w	r6, r6, #31
 8010a32:	d0fa      	beq.n	8010a2a <__gethex+0x424>
 8010a34:	449a      	add	sl, r3
 8010a36:	f1c6 0620 	rsb	r6, r6, #32
 8010a3a:	f85a 0c04 	ldr.w	r0, [sl, #-4]
 8010a3e:	f000 f991 	bl	8010d64 <__hi0bits>
 8010a42:	42b0      	cmp	r0, r6
 8010a44:	dbe7      	blt.n	8010a16 <__gethex+0x410>
 8010a46:	e7f0      	b.n	8010a2a <__gethex+0x424>

08010a48 <L_shift>:
 8010a48:	f1c2 0208 	rsb	r2, r2, #8
 8010a4c:	0092      	lsls	r2, r2, #2
 8010a4e:	b570      	push	{r4, r5, r6, lr}
 8010a50:	f1c2 0620 	rsb	r6, r2, #32
 8010a54:	6843      	ldr	r3, [r0, #4]
 8010a56:	6804      	ldr	r4, [r0, #0]
 8010a58:	fa03 f506 	lsl.w	r5, r3, r6
 8010a5c:	432c      	orrs	r4, r5
 8010a5e:	40d3      	lsrs	r3, r2
 8010a60:	6004      	str	r4, [r0, #0]
 8010a62:	f840 3f04 	str.w	r3, [r0, #4]!
 8010a66:	4288      	cmp	r0, r1
 8010a68:	d3f4      	bcc.n	8010a54 <L_shift+0xc>
 8010a6a:	bd70      	pop	{r4, r5, r6, pc}

08010a6c <__match>:
 8010a6c:	b530      	push	{r4, r5, lr}
 8010a6e:	6803      	ldr	r3, [r0, #0]
 8010a70:	3301      	adds	r3, #1
 8010a72:	f811 4b01 	ldrb.w	r4, [r1], #1
 8010a76:	b914      	cbnz	r4, 8010a7e <__match+0x12>
 8010a78:	6003      	str	r3, [r0, #0]
 8010a7a:	2001      	movs	r0, #1
 8010a7c:	bd30      	pop	{r4, r5, pc}
 8010a7e:	f813 2b01 	ldrb.w	r2, [r3], #1
 8010a82:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 8010a86:	2d19      	cmp	r5, #25
 8010a88:	bf98      	it	ls
 8010a8a:	3220      	addls	r2, #32
 8010a8c:	42a2      	cmp	r2, r4
 8010a8e:	d0f0      	beq.n	8010a72 <__match+0x6>
 8010a90:	2000      	movs	r0, #0
 8010a92:	e7f3      	b.n	8010a7c <__match+0x10>

08010a94 <__hexnan>:
 8010a94:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010a98:	680b      	ldr	r3, [r1, #0]
 8010a9a:	6801      	ldr	r1, [r0, #0]
 8010a9c:	115f      	asrs	r7, r3, #5
 8010a9e:	eb02 0787 	add.w	r7, r2, r7, lsl #2
 8010aa2:	f013 031f 	ands.w	r3, r3, #31
 8010aa6:	b087      	sub	sp, #28
 8010aa8:	bf18      	it	ne
 8010aaa:	3704      	addne	r7, #4
 8010aac:	2500      	movs	r5, #0
 8010aae:	1f3e      	subs	r6, r7, #4
 8010ab0:	4682      	mov	sl, r0
 8010ab2:	4690      	mov	r8, r2
 8010ab4:	9301      	str	r3, [sp, #4]
 8010ab6:	f847 5c04 	str.w	r5, [r7, #-4]
 8010aba:	46b1      	mov	r9, r6
 8010abc:	4634      	mov	r4, r6
 8010abe:	9502      	str	r5, [sp, #8]
 8010ac0:	46ab      	mov	fp, r5
 8010ac2:	784a      	ldrb	r2, [r1, #1]
 8010ac4:	1c4b      	adds	r3, r1, #1
 8010ac6:	9303      	str	r3, [sp, #12]
 8010ac8:	b342      	cbz	r2, 8010b1c <__hexnan+0x88>
 8010aca:	4610      	mov	r0, r2
 8010acc:	9105      	str	r1, [sp, #20]
 8010ace:	9204      	str	r2, [sp, #16]
 8010ad0:	f7ff fd84 	bl	80105dc <__hexdig_fun>
 8010ad4:	2800      	cmp	r0, #0
 8010ad6:	d143      	bne.n	8010b60 <__hexnan+0xcc>
 8010ad8:	9a04      	ldr	r2, [sp, #16]
 8010ada:	9905      	ldr	r1, [sp, #20]
 8010adc:	2a20      	cmp	r2, #32
 8010ade:	d818      	bhi.n	8010b12 <__hexnan+0x7e>
 8010ae0:	9b02      	ldr	r3, [sp, #8]
 8010ae2:	459b      	cmp	fp, r3
 8010ae4:	dd13      	ble.n	8010b0e <__hexnan+0x7a>
 8010ae6:	454c      	cmp	r4, r9
 8010ae8:	d206      	bcs.n	8010af8 <__hexnan+0x64>
 8010aea:	2d07      	cmp	r5, #7
 8010aec:	dc04      	bgt.n	8010af8 <__hexnan+0x64>
 8010aee:	462a      	mov	r2, r5
 8010af0:	4649      	mov	r1, r9
 8010af2:	4620      	mov	r0, r4
 8010af4:	f7ff ffa8 	bl	8010a48 <L_shift>
 8010af8:	4544      	cmp	r4, r8
 8010afa:	d944      	bls.n	8010b86 <__hexnan+0xf2>
 8010afc:	2300      	movs	r3, #0
 8010afe:	f1a4 0904 	sub.w	r9, r4, #4
 8010b02:	f844 3c04 	str.w	r3, [r4, #-4]
 8010b06:	f8cd b008 	str.w	fp, [sp, #8]
 8010b0a:	464c      	mov	r4, r9
 8010b0c:	461d      	mov	r5, r3
 8010b0e:	9903      	ldr	r1, [sp, #12]
 8010b10:	e7d7      	b.n	8010ac2 <__hexnan+0x2e>
 8010b12:	2a29      	cmp	r2, #41	; 0x29
 8010b14:	d14a      	bne.n	8010bac <__hexnan+0x118>
 8010b16:	3102      	adds	r1, #2
 8010b18:	f8ca 1000 	str.w	r1, [sl]
 8010b1c:	f1bb 0f00 	cmp.w	fp, #0
 8010b20:	d044      	beq.n	8010bac <__hexnan+0x118>
 8010b22:	454c      	cmp	r4, r9
 8010b24:	d206      	bcs.n	8010b34 <__hexnan+0xa0>
 8010b26:	2d07      	cmp	r5, #7
 8010b28:	dc04      	bgt.n	8010b34 <__hexnan+0xa0>
 8010b2a:	462a      	mov	r2, r5
 8010b2c:	4649      	mov	r1, r9
 8010b2e:	4620      	mov	r0, r4
 8010b30:	f7ff ff8a 	bl	8010a48 <L_shift>
 8010b34:	4544      	cmp	r4, r8
 8010b36:	d928      	bls.n	8010b8a <__hexnan+0xf6>
 8010b38:	4643      	mov	r3, r8
 8010b3a:	f854 2b04 	ldr.w	r2, [r4], #4
 8010b3e:	f843 2b04 	str.w	r2, [r3], #4
 8010b42:	42a6      	cmp	r6, r4
 8010b44:	d2f9      	bcs.n	8010b3a <__hexnan+0xa6>
 8010b46:	2200      	movs	r2, #0
 8010b48:	f843 2b04 	str.w	r2, [r3], #4
 8010b4c:	429e      	cmp	r6, r3
 8010b4e:	d2fb      	bcs.n	8010b48 <__hexnan+0xb4>
 8010b50:	6833      	ldr	r3, [r6, #0]
 8010b52:	b91b      	cbnz	r3, 8010b5c <__hexnan+0xc8>
 8010b54:	4546      	cmp	r6, r8
 8010b56:	d127      	bne.n	8010ba8 <__hexnan+0x114>
 8010b58:	2301      	movs	r3, #1
 8010b5a:	6033      	str	r3, [r6, #0]
 8010b5c:	2005      	movs	r0, #5
 8010b5e:	e026      	b.n	8010bae <__hexnan+0x11a>
 8010b60:	3501      	adds	r5, #1
 8010b62:	2d08      	cmp	r5, #8
 8010b64:	f10b 0b01 	add.w	fp, fp, #1
 8010b68:	dd06      	ble.n	8010b78 <__hexnan+0xe4>
 8010b6a:	4544      	cmp	r4, r8
 8010b6c:	d9cf      	bls.n	8010b0e <__hexnan+0x7a>
 8010b6e:	2300      	movs	r3, #0
 8010b70:	f844 3c04 	str.w	r3, [r4, #-4]
 8010b74:	2501      	movs	r5, #1
 8010b76:	3c04      	subs	r4, #4
 8010b78:	6822      	ldr	r2, [r4, #0]
 8010b7a:	f000 000f 	and.w	r0, r0, #15
 8010b7e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 8010b82:	6020      	str	r0, [r4, #0]
 8010b84:	e7c3      	b.n	8010b0e <__hexnan+0x7a>
 8010b86:	2508      	movs	r5, #8
 8010b88:	e7c1      	b.n	8010b0e <__hexnan+0x7a>
 8010b8a:	9b01      	ldr	r3, [sp, #4]
 8010b8c:	2b00      	cmp	r3, #0
 8010b8e:	d0df      	beq.n	8010b50 <__hexnan+0xbc>
 8010b90:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8010b94:	f1c3 0320 	rsb	r3, r3, #32
 8010b98:	fa22 f303 	lsr.w	r3, r2, r3
 8010b9c:	f857 2c04 	ldr.w	r2, [r7, #-4]
 8010ba0:	401a      	ands	r2, r3
 8010ba2:	f847 2c04 	str.w	r2, [r7, #-4]
 8010ba6:	e7d3      	b.n	8010b50 <__hexnan+0xbc>
 8010ba8:	3e04      	subs	r6, #4
 8010baa:	e7d1      	b.n	8010b50 <__hexnan+0xbc>
 8010bac:	2004      	movs	r0, #4
 8010bae:	b007      	add	sp, #28
 8010bb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08010bb4 <__localeconv_l>:
 8010bb4:	30f0      	adds	r0, #240	; 0xf0
 8010bb6:	4770      	bx	lr

08010bb8 <__ascii_mbtowc>:
 8010bb8:	b082      	sub	sp, #8
 8010bba:	b901      	cbnz	r1, 8010bbe <__ascii_mbtowc+0x6>
 8010bbc:	a901      	add	r1, sp, #4
 8010bbe:	b142      	cbz	r2, 8010bd2 <__ascii_mbtowc+0x1a>
 8010bc0:	b14b      	cbz	r3, 8010bd6 <__ascii_mbtowc+0x1e>
 8010bc2:	7813      	ldrb	r3, [r2, #0]
 8010bc4:	600b      	str	r3, [r1, #0]
 8010bc6:	7812      	ldrb	r2, [r2, #0]
 8010bc8:	1c10      	adds	r0, r2, #0
 8010bca:	bf18      	it	ne
 8010bcc:	2001      	movne	r0, #1
 8010bce:	b002      	add	sp, #8
 8010bd0:	4770      	bx	lr
 8010bd2:	4610      	mov	r0, r2
 8010bd4:	e7fb      	b.n	8010bce <__ascii_mbtowc+0x16>
 8010bd6:	f06f 0001 	mvn.w	r0, #1
 8010bda:	e7f8      	b.n	8010bce <__ascii_mbtowc+0x16>

08010bdc <_Balloc>:
 8010bdc:	b570      	push	{r4, r5, r6, lr}
 8010bde:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8010be0:	4604      	mov	r4, r0
 8010be2:	460e      	mov	r6, r1
 8010be4:	b93d      	cbnz	r5, 8010bf6 <_Balloc+0x1a>
 8010be6:	2010      	movs	r0, #16
 8010be8:	f000 fc90 	bl	801150c <malloc>
 8010bec:	6260      	str	r0, [r4, #36]	; 0x24
 8010bee:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8010bf2:	6005      	str	r5, [r0, #0]
 8010bf4:	60c5      	str	r5, [r0, #12]
 8010bf6:	6a65      	ldr	r5, [r4, #36]	; 0x24
 8010bf8:	68eb      	ldr	r3, [r5, #12]
 8010bfa:	b183      	cbz	r3, 8010c1e <_Balloc+0x42>
 8010bfc:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010bfe:	68db      	ldr	r3, [r3, #12]
 8010c00:	f853 0026 	ldr.w	r0, [r3, r6, lsl #2]
 8010c04:	b9b8      	cbnz	r0, 8010c36 <_Balloc+0x5a>
 8010c06:	2101      	movs	r1, #1
 8010c08:	fa01 f506 	lsl.w	r5, r1, r6
 8010c0c:	1d6a      	adds	r2, r5, #5
 8010c0e:	0092      	lsls	r2, r2, #2
 8010c10:	4620      	mov	r0, r4
 8010c12:	f000 fbe2 	bl	80113da <_calloc_r>
 8010c16:	b160      	cbz	r0, 8010c32 <_Balloc+0x56>
 8010c18:	e9c0 6501 	strd	r6, r5, [r0, #4]
 8010c1c:	e00e      	b.n	8010c3c <_Balloc+0x60>
 8010c1e:	2221      	movs	r2, #33	; 0x21
 8010c20:	2104      	movs	r1, #4
 8010c22:	4620      	mov	r0, r4
 8010c24:	f000 fbd9 	bl	80113da <_calloc_r>
 8010c28:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8010c2a:	60e8      	str	r0, [r5, #12]
 8010c2c:	68db      	ldr	r3, [r3, #12]
 8010c2e:	2b00      	cmp	r3, #0
 8010c30:	d1e4      	bne.n	8010bfc <_Balloc+0x20>
 8010c32:	2000      	movs	r0, #0
 8010c34:	bd70      	pop	{r4, r5, r6, pc}
 8010c36:	6802      	ldr	r2, [r0, #0]
 8010c38:	f843 2026 	str.w	r2, [r3, r6, lsl #2]
 8010c3c:	2300      	movs	r3, #0
 8010c3e:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8010c42:	e7f7      	b.n	8010c34 <_Balloc+0x58>

08010c44 <_Bfree>:
 8010c44:	b570      	push	{r4, r5, r6, lr}
 8010c46:	6a44      	ldr	r4, [r0, #36]	; 0x24
 8010c48:	4606      	mov	r6, r0
 8010c4a:	460d      	mov	r5, r1
 8010c4c:	b93c      	cbnz	r4, 8010c5e <_Bfree+0x1a>
 8010c4e:	2010      	movs	r0, #16
 8010c50:	f000 fc5c 	bl	801150c <malloc>
 8010c54:	6270      	str	r0, [r6, #36]	; 0x24
 8010c56:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010c5a:	6004      	str	r4, [r0, #0]
 8010c5c:	60c4      	str	r4, [r0, #12]
 8010c5e:	b13d      	cbz	r5, 8010c70 <_Bfree+0x2c>
 8010c60:	6a73      	ldr	r3, [r6, #36]	; 0x24
 8010c62:	686a      	ldr	r2, [r5, #4]
 8010c64:	68db      	ldr	r3, [r3, #12]
 8010c66:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8010c6a:	6029      	str	r1, [r5, #0]
 8010c6c:	f843 5022 	str.w	r5, [r3, r2, lsl #2]
 8010c70:	bd70      	pop	{r4, r5, r6, pc}

08010c72 <__multadd>:
 8010c72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8010c76:	690d      	ldr	r5, [r1, #16]
 8010c78:	461f      	mov	r7, r3
 8010c7a:	4606      	mov	r6, r0
 8010c7c:	460c      	mov	r4, r1
 8010c7e:	f101 0c14 	add.w	ip, r1, #20
 8010c82:	2300      	movs	r3, #0
 8010c84:	f8dc 0000 	ldr.w	r0, [ip]
 8010c88:	b281      	uxth	r1, r0
 8010c8a:	fb02 7101 	mla	r1, r2, r1, r7
 8010c8e:	0c0f      	lsrs	r7, r1, #16
 8010c90:	0c00      	lsrs	r0, r0, #16
 8010c92:	fb02 7000 	mla	r0, r2, r0, r7
 8010c96:	b289      	uxth	r1, r1
 8010c98:	3301      	adds	r3, #1
 8010c9a:	eb01 4100 	add.w	r1, r1, r0, lsl #16
 8010c9e:	429d      	cmp	r5, r3
 8010ca0:	ea4f 4710 	mov.w	r7, r0, lsr #16
 8010ca4:	f84c 1b04 	str.w	r1, [ip], #4
 8010ca8:	dcec      	bgt.n	8010c84 <__multadd+0x12>
 8010caa:	b1d7      	cbz	r7, 8010ce2 <__multadd+0x70>
 8010cac:	68a3      	ldr	r3, [r4, #8]
 8010cae:	42ab      	cmp	r3, r5
 8010cb0:	dc12      	bgt.n	8010cd8 <__multadd+0x66>
 8010cb2:	6861      	ldr	r1, [r4, #4]
 8010cb4:	4630      	mov	r0, r6
 8010cb6:	3101      	adds	r1, #1
 8010cb8:	f7ff ff90 	bl	8010bdc <_Balloc>
 8010cbc:	6922      	ldr	r2, [r4, #16]
 8010cbe:	3202      	adds	r2, #2
 8010cc0:	f104 010c 	add.w	r1, r4, #12
 8010cc4:	4680      	mov	r8, r0
 8010cc6:	0092      	lsls	r2, r2, #2
 8010cc8:	300c      	adds	r0, #12
 8010cca:	f7fe fe15 	bl	800f8f8 <memcpy>
 8010cce:	4621      	mov	r1, r4
 8010cd0:	4630      	mov	r0, r6
 8010cd2:	f7ff ffb7 	bl	8010c44 <_Bfree>
 8010cd6:	4644      	mov	r4, r8
 8010cd8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8010cdc:	3501      	adds	r5, #1
 8010cde:	615f      	str	r7, [r3, #20]
 8010ce0:	6125      	str	r5, [r4, #16]
 8010ce2:	4620      	mov	r0, r4
 8010ce4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

08010ce8 <__s2b>:
 8010ce8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010cec:	460c      	mov	r4, r1
 8010cee:	4615      	mov	r5, r2
 8010cf0:	461f      	mov	r7, r3
 8010cf2:	2209      	movs	r2, #9
 8010cf4:	3308      	adds	r3, #8
 8010cf6:	4606      	mov	r6, r0
 8010cf8:	fb93 f3f2 	sdiv	r3, r3, r2
 8010cfc:	2100      	movs	r1, #0
 8010cfe:	2201      	movs	r2, #1
 8010d00:	429a      	cmp	r2, r3
 8010d02:	db20      	blt.n	8010d46 <__s2b+0x5e>
 8010d04:	4630      	mov	r0, r6
 8010d06:	f7ff ff69 	bl	8010bdc <_Balloc>
 8010d0a:	9b08      	ldr	r3, [sp, #32]
 8010d0c:	6143      	str	r3, [r0, #20]
 8010d0e:	2d09      	cmp	r5, #9
 8010d10:	f04f 0301 	mov.w	r3, #1
 8010d14:	6103      	str	r3, [r0, #16]
 8010d16:	dd19      	ble.n	8010d4c <__s2b+0x64>
 8010d18:	f104 0809 	add.w	r8, r4, #9
 8010d1c:	46c1      	mov	r9, r8
 8010d1e:	442c      	add	r4, r5
 8010d20:	f819 3b01 	ldrb.w	r3, [r9], #1
 8010d24:	4601      	mov	r1, r0
 8010d26:	3b30      	subs	r3, #48	; 0x30
 8010d28:	220a      	movs	r2, #10
 8010d2a:	4630      	mov	r0, r6
 8010d2c:	f7ff ffa1 	bl	8010c72 <__multadd>
 8010d30:	45a1      	cmp	r9, r4
 8010d32:	d1f5      	bne.n	8010d20 <__s2b+0x38>
 8010d34:	eb08 0405 	add.w	r4, r8, r5
 8010d38:	3c08      	subs	r4, #8
 8010d3a:	1b2d      	subs	r5, r5, r4
 8010d3c:	1963      	adds	r3, r4, r5
 8010d3e:	42bb      	cmp	r3, r7
 8010d40:	db07      	blt.n	8010d52 <__s2b+0x6a>
 8010d42:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010d46:	0052      	lsls	r2, r2, #1
 8010d48:	3101      	adds	r1, #1
 8010d4a:	e7d9      	b.n	8010d00 <__s2b+0x18>
 8010d4c:	340a      	adds	r4, #10
 8010d4e:	2509      	movs	r5, #9
 8010d50:	e7f3      	b.n	8010d3a <__s2b+0x52>
 8010d52:	f814 3b01 	ldrb.w	r3, [r4], #1
 8010d56:	4601      	mov	r1, r0
 8010d58:	3b30      	subs	r3, #48	; 0x30
 8010d5a:	220a      	movs	r2, #10
 8010d5c:	4630      	mov	r0, r6
 8010d5e:	f7ff ff88 	bl	8010c72 <__multadd>
 8010d62:	e7eb      	b.n	8010d3c <__s2b+0x54>

08010d64 <__hi0bits>:
 8010d64:	0c02      	lsrs	r2, r0, #16
 8010d66:	0412      	lsls	r2, r2, #16
 8010d68:	4603      	mov	r3, r0
 8010d6a:	b9b2      	cbnz	r2, 8010d9a <__hi0bits+0x36>
 8010d6c:	0403      	lsls	r3, r0, #16
 8010d6e:	2010      	movs	r0, #16
 8010d70:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8010d74:	bf04      	itt	eq
 8010d76:	021b      	lsleq	r3, r3, #8
 8010d78:	3008      	addeq	r0, #8
 8010d7a:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 8010d7e:	bf04      	itt	eq
 8010d80:	011b      	lsleq	r3, r3, #4
 8010d82:	3004      	addeq	r0, #4
 8010d84:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8010d88:	bf04      	itt	eq
 8010d8a:	009b      	lsleq	r3, r3, #2
 8010d8c:	3002      	addeq	r0, #2
 8010d8e:	2b00      	cmp	r3, #0
 8010d90:	db06      	blt.n	8010da0 <__hi0bits+0x3c>
 8010d92:	005b      	lsls	r3, r3, #1
 8010d94:	d503      	bpl.n	8010d9e <__hi0bits+0x3a>
 8010d96:	3001      	adds	r0, #1
 8010d98:	4770      	bx	lr
 8010d9a:	2000      	movs	r0, #0
 8010d9c:	e7e8      	b.n	8010d70 <__hi0bits+0xc>
 8010d9e:	2020      	movs	r0, #32
 8010da0:	4770      	bx	lr

08010da2 <__lo0bits>:
 8010da2:	6803      	ldr	r3, [r0, #0]
 8010da4:	f013 0207 	ands.w	r2, r3, #7
 8010da8:	4601      	mov	r1, r0
 8010daa:	d00b      	beq.n	8010dc4 <__lo0bits+0x22>
 8010dac:	07da      	lsls	r2, r3, #31
 8010dae:	d423      	bmi.n	8010df8 <__lo0bits+0x56>
 8010db0:	0798      	lsls	r0, r3, #30
 8010db2:	bf49      	itett	mi
 8010db4:	085b      	lsrmi	r3, r3, #1
 8010db6:	089b      	lsrpl	r3, r3, #2
 8010db8:	2001      	movmi	r0, #1
 8010dba:	600b      	strmi	r3, [r1, #0]
 8010dbc:	bf5c      	itt	pl
 8010dbe:	600b      	strpl	r3, [r1, #0]
 8010dc0:	2002      	movpl	r0, #2
 8010dc2:	4770      	bx	lr
 8010dc4:	b298      	uxth	r0, r3
 8010dc6:	b9a8      	cbnz	r0, 8010df4 <__lo0bits+0x52>
 8010dc8:	0c1b      	lsrs	r3, r3, #16
 8010dca:	2010      	movs	r0, #16
 8010dcc:	f013 0fff 	tst.w	r3, #255	; 0xff
 8010dd0:	bf04      	itt	eq
 8010dd2:	0a1b      	lsreq	r3, r3, #8
 8010dd4:	3008      	addeq	r0, #8
 8010dd6:	071a      	lsls	r2, r3, #28
 8010dd8:	bf04      	itt	eq
 8010dda:	091b      	lsreq	r3, r3, #4
 8010ddc:	3004      	addeq	r0, #4
 8010dde:	079a      	lsls	r2, r3, #30
 8010de0:	bf04      	itt	eq
 8010de2:	089b      	lsreq	r3, r3, #2
 8010de4:	3002      	addeq	r0, #2
 8010de6:	07da      	lsls	r2, r3, #31
 8010de8:	d402      	bmi.n	8010df0 <__lo0bits+0x4e>
 8010dea:	085b      	lsrs	r3, r3, #1
 8010dec:	d006      	beq.n	8010dfc <__lo0bits+0x5a>
 8010dee:	3001      	adds	r0, #1
 8010df0:	600b      	str	r3, [r1, #0]
 8010df2:	4770      	bx	lr
 8010df4:	4610      	mov	r0, r2
 8010df6:	e7e9      	b.n	8010dcc <__lo0bits+0x2a>
 8010df8:	2000      	movs	r0, #0
 8010dfa:	4770      	bx	lr
 8010dfc:	2020      	movs	r0, #32
 8010dfe:	4770      	bx	lr

08010e00 <__i2b>:
 8010e00:	b510      	push	{r4, lr}
 8010e02:	460c      	mov	r4, r1
 8010e04:	2101      	movs	r1, #1
 8010e06:	f7ff fee9 	bl	8010bdc <_Balloc>
 8010e0a:	2201      	movs	r2, #1
 8010e0c:	6144      	str	r4, [r0, #20]
 8010e0e:	6102      	str	r2, [r0, #16]
 8010e10:	bd10      	pop	{r4, pc}

08010e12 <__multiply>:
 8010e12:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8010e16:	4614      	mov	r4, r2
 8010e18:	690a      	ldr	r2, [r1, #16]
 8010e1a:	6923      	ldr	r3, [r4, #16]
 8010e1c:	429a      	cmp	r2, r3
 8010e1e:	bfb8      	it	lt
 8010e20:	460b      	movlt	r3, r1
 8010e22:	4688      	mov	r8, r1
 8010e24:	bfbc      	itt	lt
 8010e26:	46a0      	movlt	r8, r4
 8010e28:	461c      	movlt	r4, r3
 8010e2a:	f8d8 7010 	ldr.w	r7, [r8, #16]
 8010e2e:	f8d4 9010 	ldr.w	r9, [r4, #16]
 8010e32:	f8d8 3008 	ldr.w	r3, [r8, #8]
 8010e36:	f8d8 1004 	ldr.w	r1, [r8, #4]
 8010e3a:	eb07 0609 	add.w	r6, r7, r9
 8010e3e:	42b3      	cmp	r3, r6
 8010e40:	bfb8      	it	lt
 8010e42:	3101      	addlt	r1, #1
 8010e44:	f7ff feca 	bl	8010bdc <_Balloc>
 8010e48:	f100 0514 	add.w	r5, r0, #20
 8010e4c:	eb05 0e86 	add.w	lr, r5, r6, lsl #2
 8010e50:	462b      	mov	r3, r5
 8010e52:	2200      	movs	r2, #0
 8010e54:	4573      	cmp	r3, lr
 8010e56:	d316      	bcc.n	8010e86 <__multiply+0x74>
 8010e58:	f104 0214 	add.w	r2, r4, #20
 8010e5c:	f108 0114 	add.w	r1, r8, #20
 8010e60:	eb02 0389 	add.w	r3, r2, r9, lsl #2
 8010e64:	eb01 0787 	add.w	r7, r1, r7, lsl #2
 8010e68:	9300      	str	r3, [sp, #0]
 8010e6a:	9b00      	ldr	r3, [sp, #0]
 8010e6c:	9201      	str	r2, [sp, #4]
 8010e6e:	4293      	cmp	r3, r2
 8010e70:	d80c      	bhi.n	8010e8c <__multiply+0x7a>
 8010e72:	2e00      	cmp	r6, #0
 8010e74:	dd03      	ble.n	8010e7e <__multiply+0x6c>
 8010e76:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8010e7a:	2b00      	cmp	r3, #0
 8010e7c:	d05d      	beq.n	8010f3a <__multiply+0x128>
 8010e7e:	6106      	str	r6, [r0, #16]
 8010e80:	b003      	add	sp, #12
 8010e82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8010e86:	f843 2b04 	str.w	r2, [r3], #4
 8010e8a:	e7e3      	b.n	8010e54 <__multiply+0x42>
 8010e8c:	f8b2 b000 	ldrh.w	fp, [r2]
 8010e90:	f1bb 0f00 	cmp.w	fp, #0
 8010e94:	d023      	beq.n	8010ede <__multiply+0xcc>
 8010e96:	4689      	mov	r9, r1
 8010e98:	46ac      	mov	ip, r5
 8010e9a:	f04f 0800 	mov.w	r8, #0
 8010e9e:	f859 4b04 	ldr.w	r4, [r9], #4
 8010ea2:	f8dc a000 	ldr.w	sl, [ip]
 8010ea6:	b2a3      	uxth	r3, r4
 8010ea8:	fa1f fa8a 	uxth.w	sl, sl
 8010eac:	fb0b a303 	mla	r3, fp, r3, sl
 8010eb0:	ea4f 4a14 	mov.w	sl, r4, lsr #16
 8010eb4:	f8dc 4000 	ldr.w	r4, [ip]
 8010eb8:	4443      	add	r3, r8
 8010eba:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010ebe:	fb0b 840a 	mla	r4, fp, sl, r8
 8010ec2:	eb04 4413 	add.w	r4, r4, r3, lsr #16
 8010ec6:	46e2      	mov	sl, ip
 8010ec8:	b29b      	uxth	r3, r3
 8010eca:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010ece:	454f      	cmp	r7, r9
 8010ed0:	ea4f 4814 	mov.w	r8, r4, lsr #16
 8010ed4:	f84a 3b04 	str.w	r3, [sl], #4
 8010ed8:	d82b      	bhi.n	8010f32 <__multiply+0x120>
 8010eda:	f8cc 8004 	str.w	r8, [ip, #4]
 8010ede:	9b01      	ldr	r3, [sp, #4]
 8010ee0:	f8b3 a002 	ldrh.w	sl, [r3, #2]
 8010ee4:	3204      	adds	r2, #4
 8010ee6:	f1ba 0f00 	cmp.w	sl, #0
 8010eea:	d020      	beq.n	8010f2e <__multiply+0x11c>
 8010eec:	682b      	ldr	r3, [r5, #0]
 8010eee:	4689      	mov	r9, r1
 8010ef0:	46a8      	mov	r8, r5
 8010ef2:	f04f 0b00 	mov.w	fp, #0
 8010ef6:	f8b9 c000 	ldrh.w	ip, [r9]
 8010efa:	f8b8 4002 	ldrh.w	r4, [r8, #2]
 8010efe:	fb0a 440c 	mla	r4, sl, ip, r4
 8010f02:	445c      	add	r4, fp
 8010f04:	46c4      	mov	ip, r8
 8010f06:	b29b      	uxth	r3, r3
 8010f08:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8010f0c:	f84c 3b04 	str.w	r3, [ip], #4
 8010f10:	f859 3b04 	ldr.w	r3, [r9], #4
 8010f14:	f8b8 b004 	ldrh.w	fp, [r8, #4]
 8010f18:	0c1b      	lsrs	r3, r3, #16
 8010f1a:	fb0a b303 	mla	r3, sl, r3, fp
 8010f1e:	eb03 4314 	add.w	r3, r3, r4, lsr #16
 8010f22:	454f      	cmp	r7, r9
 8010f24:	ea4f 4b13 	mov.w	fp, r3, lsr #16
 8010f28:	d805      	bhi.n	8010f36 <__multiply+0x124>
 8010f2a:	f8c8 3004 	str.w	r3, [r8, #4]
 8010f2e:	3504      	adds	r5, #4
 8010f30:	e79b      	b.n	8010e6a <__multiply+0x58>
 8010f32:	46d4      	mov	ip, sl
 8010f34:	e7b3      	b.n	8010e9e <__multiply+0x8c>
 8010f36:	46e0      	mov	r8, ip
 8010f38:	e7dd      	b.n	8010ef6 <__multiply+0xe4>
 8010f3a:	3e01      	subs	r6, #1
 8010f3c:	e799      	b.n	8010e72 <__multiply+0x60>
	...

08010f40 <__pow5mult>:
 8010f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8010f44:	4615      	mov	r5, r2
 8010f46:	f012 0203 	ands.w	r2, r2, #3
 8010f4a:	4606      	mov	r6, r0
 8010f4c:	460f      	mov	r7, r1
 8010f4e:	d007      	beq.n	8010f60 <__pow5mult+0x20>
 8010f50:	3a01      	subs	r2, #1
 8010f52:	4c21      	ldr	r4, [pc, #132]	; (8010fd8 <__pow5mult+0x98>)
 8010f54:	2300      	movs	r3, #0
 8010f56:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8010f5a:	f7ff fe8a 	bl	8010c72 <__multadd>
 8010f5e:	4607      	mov	r7, r0
 8010f60:	10ad      	asrs	r5, r5, #2
 8010f62:	d035      	beq.n	8010fd0 <__pow5mult+0x90>
 8010f64:	6a74      	ldr	r4, [r6, #36]	; 0x24
 8010f66:	b93c      	cbnz	r4, 8010f78 <__pow5mult+0x38>
 8010f68:	2010      	movs	r0, #16
 8010f6a:	f000 facf 	bl	801150c <malloc>
 8010f6e:	6270      	str	r0, [r6, #36]	; 0x24
 8010f70:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8010f74:	6004      	str	r4, [r0, #0]
 8010f76:	60c4      	str	r4, [r0, #12]
 8010f78:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 8010f7c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8010f80:	b94c      	cbnz	r4, 8010f96 <__pow5mult+0x56>
 8010f82:	f240 2171 	movw	r1, #625	; 0x271
 8010f86:	4630      	mov	r0, r6
 8010f88:	f7ff ff3a 	bl	8010e00 <__i2b>
 8010f8c:	2300      	movs	r3, #0
 8010f8e:	f8c8 0008 	str.w	r0, [r8, #8]
 8010f92:	4604      	mov	r4, r0
 8010f94:	6003      	str	r3, [r0, #0]
 8010f96:	f04f 0800 	mov.w	r8, #0
 8010f9a:	07eb      	lsls	r3, r5, #31
 8010f9c:	d50a      	bpl.n	8010fb4 <__pow5mult+0x74>
 8010f9e:	4639      	mov	r1, r7
 8010fa0:	4622      	mov	r2, r4
 8010fa2:	4630      	mov	r0, r6
 8010fa4:	f7ff ff35 	bl	8010e12 <__multiply>
 8010fa8:	4639      	mov	r1, r7
 8010faa:	4681      	mov	r9, r0
 8010fac:	4630      	mov	r0, r6
 8010fae:	f7ff fe49 	bl	8010c44 <_Bfree>
 8010fb2:	464f      	mov	r7, r9
 8010fb4:	106d      	asrs	r5, r5, #1
 8010fb6:	d00b      	beq.n	8010fd0 <__pow5mult+0x90>
 8010fb8:	6820      	ldr	r0, [r4, #0]
 8010fba:	b938      	cbnz	r0, 8010fcc <__pow5mult+0x8c>
 8010fbc:	4622      	mov	r2, r4
 8010fbe:	4621      	mov	r1, r4
 8010fc0:	4630      	mov	r0, r6
 8010fc2:	f7ff ff26 	bl	8010e12 <__multiply>
 8010fc6:	6020      	str	r0, [r4, #0]
 8010fc8:	f8c0 8000 	str.w	r8, [r0]
 8010fcc:	4604      	mov	r4, r0
 8010fce:	e7e4      	b.n	8010f9a <__pow5mult+0x5a>
 8010fd0:	4638      	mov	r0, r7
 8010fd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8010fd6:	bf00      	nop
 8010fd8:	08052300 	.word	0x08052300

08010fdc <__lshift>:
 8010fdc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8010fe0:	460c      	mov	r4, r1
 8010fe2:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8010fe6:	6923      	ldr	r3, [r4, #16]
 8010fe8:	6849      	ldr	r1, [r1, #4]
 8010fea:	eb0a 0903 	add.w	r9, sl, r3
 8010fee:	68a3      	ldr	r3, [r4, #8]
 8010ff0:	4607      	mov	r7, r0
 8010ff2:	4616      	mov	r6, r2
 8010ff4:	f109 0501 	add.w	r5, r9, #1
 8010ff8:	42ab      	cmp	r3, r5
 8010ffa:	db32      	blt.n	8011062 <__lshift+0x86>
 8010ffc:	4638      	mov	r0, r7
 8010ffe:	f7ff fded 	bl	8010bdc <_Balloc>
 8011002:	2300      	movs	r3, #0
 8011004:	4680      	mov	r8, r0
 8011006:	f100 0114 	add.w	r1, r0, #20
 801100a:	461a      	mov	r2, r3
 801100c:	4553      	cmp	r3, sl
 801100e:	db2b      	blt.n	8011068 <__lshift+0x8c>
 8011010:	6920      	ldr	r0, [r4, #16]
 8011012:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8011016:	f104 0314 	add.w	r3, r4, #20
 801101a:	f016 021f 	ands.w	r2, r6, #31
 801101e:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8011022:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8011026:	d025      	beq.n	8011074 <__lshift+0x98>
 8011028:	f1c2 0e20 	rsb	lr, r2, #32
 801102c:	2000      	movs	r0, #0
 801102e:	681e      	ldr	r6, [r3, #0]
 8011030:	468a      	mov	sl, r1
 8011032:	4096      	lsls	r6, r2
 8011034:	4330      	orrs	r0, r6
 8011036:	f84a 0b04 	str.w	r0, [sl], #4
 801103a:	f853 0b04 	ldr.w	r0, [r3], #4
 801103e:	459c      	cmp	ip, r3
 8011040:	fa20 f00e 	lsr.w	r0, r0, lr
 8011044:	d814      	bhi.n	8011070 <__lshift+0x94>
 8011046:	6048      	str	r0, [r1, #4]
 8011048:	b108      	cbz	r0, 801104e <__lshift+0x72>
 801104a:	f109 0502 	add.w	r5, r9, #2
 801104e:	3d01      	subs	r5, #1
 8011050:	4638      	mov	r0, r7
 8011052:	f8c8 5010 	str.w	r5, [r8, #16]
 8011056:	4621      	mov	r1, r4
 8011058:	f7ff fdf4 	bl	8010c44 <_Bfree>
 801105c:	4640      	mov	r0, r8
 801105e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8011062:	3101      	adds	r1, #1
 8011064:	005b      	lsls	r3, r3, #1
 8011066:	e7c7      	b.n	8010ff8 <__lshift+0x1c>
 8011068:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
 801106c:	3301      	adds	r3, #1
 801106e:	e7cd      	b.n	801100c <__lshift+0x30>
 8011070:	4651      	mov	r1, sl
 8011072:	e7dc      	b.n	801102e <__lshift+0x52>
 8011074:	3904      	subs	r1, #4
 8011076:	f853 2b04 	ldr.w	r2, [r3], #4
 801107a:	f841 2f04 	str.w	r2, [r1, #4]!
 801107e:	459c      	cmp	ip, r3
 8011080:	d8f9      	bhi.n	8011076 <__lshift+0x9a>
 8011082:	e7e4      	b.n	801104e <__lshift+0x72>

08011084 <__mcmp>:
 8011084:	6903      	ldr	r3, [r0, #16]
 8011086:	690a      	ldr	r2, [r1, #16]
 8011088:	1a9b      	subs	r3, r3, r2
 801108a:	b530      	push	{r4, r5, lr}
 801108c:	d10c      	bne.n	80110a8 <__mcmp+0x24>
 801108e:	0092      	lsls	r2, r2, #2
 8011090:	3014      	adds	r0, #20
 8011092:	3114      	adds	r1, #20
 8011094:	1884      	adds	r4, r0, r2
 8011096:	4411      	add	r1, r2
 8011098:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 801109c:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80110a0:	4295      	cmp	r5, r2
 80110a2:	d003      	beq.n	80110ac <__mcmp+0x28>
 80110a4:	d305      	bcc.n	80110b2 <__mcmp+0x2e>
 80110a6:	2301      	movs	r3, #1
 80110a8:	4618      	mov	r0, r3
 80110aa:	bd30      	pop	{r4, r5, pc}
 80110ac:	42a0      	cmp	r0, r4
 80110ae:	d3f3      	bcc.n	8011098 <__mcmp+0x14>
 80110b0:	e7fa      	b.n	80110a8 <__mcmp+0x24>
 80110b2:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 80110b6:	e7f7      	b.n	80110a8 <__mcmp+0x24>

080110b8 <__mdiff>:
 80110b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80110bc:	460d      	mov	r5, r1
 80110be:	4607      	mov	r7, r0
 80110c0:	4611      	mov	r1, r2
 80110c2:	4628      	mov	r0, r5
 80110c4:	4614      	mov	r4, r2
 80110c6:	f7ff ffdd 	bl	8011084 <__mcmp>
 80110ca:	1e06      	subs	r6, r0, #0
 80110cc:	d108      	bne.n	80110e0 <__mdiff+0x28>
 80110ce:	4631      	mov	r1, r6
 80110d0:	4638      	mov	r0, r7
 80110d2:	f7ff fd83 	bl	8010bdc <_Balloc>
 80110d6:	2301      	movs	r3, #1
 80110d8:	e9c0 3604 	strd	r3, r6, [r0, #16]
 80110dc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80110e0:	bfa4      	itt	ge
 80110e2:	4623      	movge	r3, r4
 80110e4:	462c      	movge	r4, r5
 80110e6:	4638      	mov	r0, r7
 80110e8:	6861      	ldr	r1, [r4, #4]
 80110ea:	bfa6      	itte	ge
 80110ec:	461d      	movge	r5, r3
 80110ee:	2600      	movge	r6, #0
 80110f0:	2601      	movlt	r6, #1
 80110f2:	f7ff fd73 	bl	8010bdc <_Balloc>
 80110f6:	692b      	ldr	r3, [r5, #16]
 80110f8:	60c6      	str	r6, [r0, #12]
 80110fa:	6926      	ldr	r6, [r4, #16]
 80110fc:	f105 0914 	add.w	r9, r5, #20
 8011100:	f104 0214 	add.w	r2, r4, #20
 8011104:	eb02 0786 	add.w	r7, r2, r6, lsl #2
 8011108:	eb09 0883 	add.w	r8, r9, r3, lsl #2
 801110c:	f100 0514 	add.w	r5, r0, #20
 8011110:	f04f 0e00 	mov.w	lr, #0
 8011114:	f852 ab04 	ldr.w	sl, [r2], #4
 8011118:	f859 4b04 	ldr.w	r4, [r9], #4
 801111c:	fa1e f18a 	uxtah	r1, lr, sl
 8011120:	b2a3      	uxth	r3, r4
 8011122:	1ac9      	subs	r1, r1, r3
 8011124:	0c23      	lsrs	r3, r4, #16
 8011126:	ebc3 431a 	rsb	r3, r3, sl, lsr #16
 801112a:	eb03 4321 	add.w	r3, r3, r1, asr #16
 801112e:	b289      	uxth	r1, r1
 8011130:	ea4f 4e23 	mov.w	lr, r3, asr #16
 8011134:	45c8      	cmp	r8, r9
 8011136:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 801113a:	4694      	mov	ip, r2
 801113c:	f845 3b04 	str.w	r3, [r5], #4
 8011140:	d8e8      	bhi.n	8011114 <__mdiff+0x5c>
 8011142:	45bc      	cmp	ip, r7
 8011144:	d304      	bcc.n	8011150 <__mdiff+0x98>
 8011146:	f855 3d04 	ldr.w	r3, [r5, #-4]!
 801114a:	b183      	cbz	r3, 801116e <__mdiff+0xb6>
 801114c:	6106      	str	r6, [r0, #16]
 801114e:	e7c5      	b.n	80110dc <__mdiff+0x24>
 8011150:	f85c 1b04 	ldr.w	r1, [ip], #4
 8011154:	fa1e f381 	uxtah	r3, lr, r1
 8011158:	141a      	asrs	r2, r3, #16
 801115a:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 801115e:	b29b      	uxth	r3, r3
 8011160:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8011164:	ea4f 4e22 	mov.w	lr, r2, asr #16
 8011168:	f845 3b04 	str.w	r3, [r5], #4
 801116c:	e7e9      	b.n	8011142 <__mdiff+0x8a>
 801116e:	3e01      	subs	r6, #1
 8011170:	e7e9      	b.n	8011146 <__mdiff+0x8e>
	...

08011174 <__ulp>:
 8011174:	4b12      	ldr	r3, [pc, #72]	; (80111c0 <__ulp+0x4c>)
 8011176:	ee10 2a90 	vmov	r2, s1
 801117a:	401a      	ands	r2, r3
 801117c:	f1a2 7350 	sub.w	r3, r2, #54525952	; 0x3400000
 8011180:	2b00      	cmp	r3, #0
 8011182:	dd04      	ble.n	801118e <__ulp+0x1a>
 8011184:	2000      	movs	r0, #0
 8011186:	4619      	mov	r1, r3
 8011188:	ec41 0b10 	vmov	d0, r0, r1
 801118c:	4770      	bx	lr
 801118e:	425b      	negs	r3, r3
 8011190:	151b      	asrs	r3, r3, #20
 8011192:	2b13      	cmp	r3, #19
 8011194:	f04f 0000 	mov.w	r0, #0
 8011198:	f04f 0100 	mov.w	r1, #0
 801119c:	dc04      	bgt.n	80111a8 <__ulp+0x34>
 801119e:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80111a2:	fa42 f103 	asr.w	r1, r2, r3
 80111a6:	e7ef      	b.n	8011188 <__ulp+0x14>
 80111a8:	3b14      	subs	r3, #20
 80111aa:	2b1e      	cmp	r3, #30
 80111ac:	f04f 0201 	mov.w	r2, #1
 80111b0:	bfda      	itte	le
 80111b2:	f1c3 031f 	rsble	r3, r3, #31
 80111b6:	fa02 f303 	lslle.w	r3, r2, r3
 80111ba:	4613      	movgt	r3, r2
 80111bc:	4618      	mov	r0, r3
 80111be:	e7e3      	b.n	8011188 <__ulp+0x14>
 80111c0:	7ff00000 	.word	0x7ff00000

080111c4 <__b2d>:
 80111c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80111c6:	6905      	ldr	r5, [r0, #16]
 80111c8:	f100 0714 	add.w	r7, r0, #20
 80111cc:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 80111d0:	1f2e      	subs	r6, r5, #4
 80111d2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 80111d6:	4620      	mov	r0, r4
 80111d8:	f7ff fdc4 	bl	8010d64 <__hi0bits>
 80111dc:	f1c0 0320 	rsb	r3, r0, #32
 80111e0:	280a      	cmp	r0, #10
 80111e2:	600b      	str	r3, [r1, #0]
 80111e4:	f8df c074 	ldr.w	ip, [pc, #116]	; 801125c <__b2d+0x98>
 80111e8:	dc14      	bgt.n	8011214 <__b2d+0x50>
 80111ea:	f1c0 0e0b 	rsb	lr, r0, #11
 80111ee:	fa24 f10e 	lsr.w	r1, r4, lr
 80111f2:	42b7      	cmp	r7, r6
 80111f4:	ea41 030c 	orr.w	r3, r1, ip
 80111f8:	bf34      	ite	cc
 80111fa:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 80111fe:	2100      	movcs	r1, #0
 8011200:	3015      	adds	r0, #21
 8011202:	fa04 f000 	lsl.w	r0, r4, r0
 8011206:	fa21 f10e 	lsr.w	r1, r1, lr
 801120a:	ea40 0201 	orr.w	r2, r0, r1
 801120e:	ec43 2b10 	vmov	d0, r2, r3
 8011212:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8011214:	42b7      	cmp	r7, r6
 8011216:	bf3a      	itte	cc
 8011218:	f1a5 0608 	subcc.w	r6, r5, #8
 801121c:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 8011220:	2100      	movcs	r1, #0
 8011222:	380b      	subs	r0, #11
 8011224:	d015      	beq.n	8011252 <__b2d+0x8e>
 8011226:	4084      	lsls	r4, r0
 8011228:	f1c0 0520 	rsb	r5, r0, #32
 801122c:	f044 547f 	orr.w	r4, r4, #1069547520	; 0x3fc00000
 8011230:	f444 1440 	orr.w	r4, r4, #3145728	; 0x300000
 8011234:	42be      	cmp	r6, r7
 8011236:	fa21 fc05 	lsr.w	ip, r1, r5
 801123a:	ea44 030c 	orr.w	r3, r4, ip
 801123e:	bf8c      	ite	hi
 8011240:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 8011244:	2400      	movls	r4, #0
 8011246:	fa01 f000 	lsl.w	r0, r1, r0
 801124a:	40ec      	lsrs	r4, r5
 801124c:	ea40 0204 	orr.w	r2, r0, r4
 8011250:	e7dd      	b.n	801120e <__b2d+0x4a>
 8011252:	ea44 030c 	orr.w	r3, r4, ip
 8011256:	460a      	mov	r2, r1
 8011258:	e7d9      	b.n	801120e <__b2d+0x4a>
 801125a:	bf00      	nop
 801125c:	3ff00000 	.word	0x3ff00000

08011260 <__d2b>:
 8011260:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8011264:	460e      	mov	r6, r1
 8011266:	2101      	movs	r1, #1
 8011268:	ec59 8b10 	vmov	r8, r9, d0
 801126c:	4615      	mov	r5, r2
 801126e:	f7ff fcb5 	bl	8010bdc <_Balloc>
 8011272:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8011276:	4607      	mov	r7, r0
 8011278:	f3c9 0313 	ubfx	r3, r9, #0, #20
 801127c:	bb34      	cbnz	r4, 80112cc <__d2b+0x6c>
 801127e:	9301      	str	r3, [sp, #4]
 8011280:	f1b8 0300 	subs.w	r3, r8, #0
 8011284:	d027      	beq.n	80112d6 <__d2b+0x76>
 8011286:	a802      	add	r0, sp, #8
 8011288:	f840 3d08 	str.w	r3, [r0, #-8]!
 801128c:	f7ff fd89 	bl	8010da2 <__lo0bits>
 8011290:	9900      	ldr	r1, [sp, #0]
 8011292:	b1f0      	cbz	r0, 80112d2 <__d2b+0x72>
 8011294:	9a01      	ldr	r2, [sp, #4]
 8011296:	f1c0 0320 	rsb	r3, r0, #32
 801129a:	fa02 f303 	lsl.w	r3, r2, r3
 801129e:	430b      	orrs	r3, r1
 80112a0:	40c2      	lsrs	r2, r0
 80112a2:	617b      	str	r3, [r7, #20]
 80112a4:	9201      	str	r2, [sp, #4]
 80112a6:	9b01      	ldr	r3, [sp, #4]
 80112a8:	61bb      	str	r3, [r7, #24]
 80112aa:	2b00      	cmp	r3, #0
 80112ac:	bf14      	ite	ne
 80112ae:	2102      	movne	r1, #2
 80112b0:	2101      	moveq	r1, #1
 80112b2:	6139      	str	r1, [r7, #16]
 80112b4:	b1c4      	cbz	r4, 80112e8 <__d2b+0x88>
 80112b6:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80112ba:	4404      	add	r4, r0
 80112bc:	6034      	str	r4, [r6, #0]
 80112be:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80112c2:	6028      	str	r0, [r5, #0]
 80112c4:	4638      	mov	r0, r7
 80112c6:	b003      	add	sp, #12
 80112c8:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 80112cc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80112d0:	e7d5      	b.n	801127e <__d2b+0x1e>
 80112d2:	6179      	str	r1, [r7, #20]
 80112d4:	e7e7      	b.n	80112a6 <__d2b+0x46>
 80112d6:	a801      	add	r0, sp, #4
 80112d8:	f7ff fd63 	bl	8010da2 <__lo0bits>
 80112dc:	9b01      	ldr	r3, [sp, #4]
 80112de:	617b      	str	r3, [r7, #20]
 80112e0:	2101      	movs	r1, #1
 80112e2:	6139      	str	r1, [r7, #16]
 80112e4:	3020      	adds	r0, #32
 80112e6:	e7e5      	b.n	80112b4 <__d2b+0x54>
 80112e8:	eb07 0381 	add.w	r3, r7, r1, lsl #2
 80112ec:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80112f0:	6030      	str	r0, [r6, #0]
 80112f2:	6918      	ldr	r0, [r3, #16]
 80112f4:	f7ff fd36 	bl	8010d64 <__hi0bits>
 80112f8:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80112fc:	e7e1      	b.n	80112c2 <__d2b+0x62>

080112fe <__ratio>:
 80112fe:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011302:	4688      	mov	r8, r1
 8011304:	4669      	mov	r1, sp
 8011306:	4681      	mov	r9, r0
 8011308:	f7ff ff5c 	bl	80111c4 <__b2d>
 801130c:	a901      	add	r1, sp, #4
 801130e:	4640      	mov	r0, r8
 8011310:	ec57 6b10 	vmov	r6, r7, d0
 8011314:	f7ff ff56 	bl	80111c4 <__b2d>
 8011318:	f8d9 3010 	ldr.w	r3, [r9, #16]
 801131c:	f8d8 2010 	ldr.w	r2, [r8, #16]
 8011320:	eba3 0c02 	sub.w	ip, r3, r2
 8011324:	e9dd 3200 	ldrd	r3, r2, [sp]
 8011328:	1a9b      	subs	r3, r3, r2
 801132a:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 801132e:	ec5b ab10 	vmov	sl, fp, d0
 8011332:	2b00      	cmp	r3, #0
 8011334:	bfce      	itee	gt
 8011336:	463a      	movgt	r2, r7
 8011338:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 801133c:	465a      	movle	r2, fp
 801133e:	4659      	mov	r1, fp
 8011340:	463d      	mov	r5, r7
 8011342:	bfd4      	ite	le
 8011344:	eb02 5103 	addle.w	r1, r2, r3, lsl #20
 8011348:	eb02 5503 	addgt.w	r5, r2, r3, lsl #20
 801134c:	4630      	mov	r0, r6
 801134e:	ee10 2a10 	vmov	r2, s0
 8011352:	460b      	mov	r3, r1
 8011354:	4629      	mov	r1, r5
 8011356:	f7ef fa31 	bl	80007bc <__aeabi_ddiv>
 801135a:	ec41 0b10 	vmov	d0, r0, r1
 801135e:	b003      	add	sp, #12
 8011360:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08011364 <__copybits>:
 8011364:	3901      	subs	r1, #1
 8011366:	b510      	push	{r4, lr}
 8011368:	1149      	asrs	r1, r1, #5
 801136a:	6914      	ldr	r4, [r2, #16]
 801136c:	3101      	adds	r1, #1
 801136e:	f102 0314 	add.w	r3, r2, #20
 8011372:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8011376:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 801137a:	42a3      	cmp	r3, r4
 801137c:	4602      	mov	r2, r0
 801137e:	d303      	bcc.n	8011388 <__copybits+0x24>
 8011380:	2300      	movs	r3, #0
 8011382:	428a      	cmp	r2, r1
 8011384:	d305      	bcc.n	8011392 <__copybits+0x2e>
 8011386:	bd10      	pop	{r4, pc}
 8011388:	f853 2b04 	ldr.w	r2, [r3], #4
 801138c:	f840 2b04 	str.w	r2, [r0], #4
 8011390:	e7f3      	b.n	801137a <__copybits+0x16>
 8011392:	f842 3b04 	str.w	r3, [r2], #4
 8011396:	e7f4      	b.n	8011382 <__copybits+0x1e>

08011398 <__any_on>:
 8011398:	f100 0214 	add.w	r2, r0, #20
 801139c:	6900      	ldr	r0, [r0, #16]
 801139e:	114b      	asrs	r3, r1, #5
 80113a0:	4298      	cmp	r0, r3
 80113a2:	b510      	push	{r4, lr}
 80113a4:	db11      	blt.n	80113ca <__any_on+0x32>
 80113a6:	dd0a      	ble.n	80113be <__any_on+0x26>
 80113a8:	f011 011f 	ands.w	r1, r1, #31
 80113ac:	d007      	beq.n	80113be <__any_on+0x26>
 80113ae:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 80113b2:	fa24 f001 	lsr.w	r0, r4, r1
 80113b6:	fa00 f101 	lsl.w	r1, r0, r1
 80113ba:	428c      	cmp	r4, r1
 80113bc:	d10b      	bne.n	80113d6 <__any_on+0x3e>
 80113be:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 80113c2:	4293      	cmp	r3, r2
 80113c4:	d803      	bhi.n	80113ce <__any_on+0x36>
 80113c6:	2000      	movs	r0, #0
 80113c8:	bd10      	pop	{r4, pc}
 80113ca:	4603      	mov	r3, r0
 80113cc:	e7f7      	b.n	80113be <__any_on+0x26>
 80113ce:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80113d2:	2900      	cmp	r1, #0
 80113d4:	d0f5      	beq.n	80113c2 <__any_on+0x2a>
 80113d6:	2001      	movs	r0, #1
 80113d8:	e7f6      	b.n	80113c8 <__any_on+0x30>

080113da <_calloc_r>:
 80113da:	b538      	push	{r3, r4, r5, lr}
 80113dc:	fb02 f401 	mul.w	r4, r2, r1
 80113e0:	4621      	mov	r1, r4
 80113e2:	f000 f809 	bl	80113f8 <_malloc_r>
 80113e6:	4605      	mov	r5, r0
 80113e8:	b118      	cbz	r0, 80113f2 <_calloc_r+0x18>
 80113ea:	4622      	mov	r2, r4
 80113ec:	2100      	movs	r1, #0
 80113ee:	f7fe fa8e 	bl	800f90e <memset>
 80113f2:	4628      	mov	r0, r5
 80113f4:	bd38      	pop	{r3, r4, r5, pc}
	...

080113f8 <_malloc_r>:
 80113f8:	b570      	push	{r4, r5, r6, lr}
 80113fa:	1ccd      	adds	r5, r1, #3
 80113fc:	f025 0503 	bic.w	r5, r5, #3
 8011400:	3508      	adds	r5, #8
 8011402:	2d0c      	cmp	r5, #12
 8011404:	bf38      	it	cc
 8011406:	250c      	movcc	r5, #12
 8011408:	2d00      	cmp	r5, #0
 801140a:	4606      	mov	r6, r0
 801140c:	db01      	blt.n	8011412 <_malloc_r+0x1a>
 801140e:	42a9      	cmp	r1, r5
 8011410:	d903      	bls.n	801141a <_malloc_r+0x22>
 8011412:	230c      	movs	r3, #12
 8011414:	6033      	str	r3, [r6, #0]
 8011416:	2000      	movs	r0, #0
 8011418:	bd70      	pop	{r4, r5, r6, pc}
 801141a:	f000 f87f 	bl	801151c <__malloc_lock>
 801141e:	4a21      	ldr	r2, [pc, #132]	; (80114a4 <_malloc_r+0xac>)
 8011420:	6814      	ldr	r4, [r2, #0]
 8011422:	4621      	mov	r1, r4
 8011424:	b991      	cbnz	r1, 801144c <_malloc_r+0x54>
 8011426:	4c20      	ldr	r4, [pc, #128]	; (80114a8 <_malloc_r+0xb0>)
 8011428:	6823      	ldr	r3, [r4, #0]
 801142a:	b91b      	cbnz	r3, 8011434 <_malloc_r+0x3c>
 801142c:	4630      	mov	r0, r6
 801142e:	f000 f83d 	bl	80114ac <_sbrk_r>
 8011432:	6020      	str	r0, [r4, #0]
 8011434:	4629      	mov	r1, r5
 8011436:	4630      	mov	r0, r6
 8011438:	f000 f838 	bl	80114ac <_sbrk_r>
 801143c:	1c43      	adds	r3, r0, #1
 801143e:	d124      	bne.n	801148a <_malloc_r+0x92>
 8011440:	230c      	movs	r3, #12
 8011442:	6033      	str	r3, [r6, #0]
 8011444:	4630      	mov	r0, r6
 8011446:	f000 f86a 	bl	801151e <__malloc_unlock>
 801144a:	e7e4      	b.n	8011416 <_malloc_r+0x1e>
 801144c:	680b      	ldr	r3, [r1, #0]
 801144e:	1b5b      	subs	r3, r3, r5
 8011450:	d418      	bmi.n	8011484 <_malloc_r+0x8c>
 8011452:	2b0b      	cmp	r3, #11
 8011454:	d90f      	bls.n	8011476 <_malloc_r+0x7e>
 8011456:	600b      	str	r3, [r1, #0]
 8011458:	50cd      	str	r5, [r1, r3]
 801145a:	18cc      	adds	r4, r1, r3
 801145c:	4630      	mov	r0, r6
 801145e:	f000 f85e 	bl	801151e <__malloc_unlock>
 8011462:	f104 000b 	add.w	r0, r4, #11
 8011466:	1d23      	adds	r3, r4, #4
 8011468:	f020 0007 	bic.w	r0, r0, #7
 801146c:	1ac3      	subs	r3, r0, r3
 801146e:	d0d3      	beq.n	8011418 <_malloc_r+0x20>
 8011470:	425a      	negs	r2, r3
 8011472:	50e2      	str	r2, [r4, r3]
 8011474:	e7d0      	b.n	8011418 <_malloc_r+0x20>
 8011476:	428c      	cmp	r4, r1
 8011478:	684b      	ldr	r3, [r1, #4]
 801147a:	bf16      	itet	ne
 801147c:	6063      	strne	r3, [r4, #4]
 801147e:	6013      	streq	r3, [r2, #0]
 8011480:	460c      	movne	r4, r1
 8011482:	e7eb      	b.n	801145c <_malloc_r+0x64>
 8011484:	460c      	mov	r4, r1
 8011486:	6849      	ldr	r1, [r1, #4]
 8011488:	e7cc      	b.n	8011424 <_malloc_r+0x2c>
 801148a:	1cc4      	adds	r4, r0, #3
 801148c:	f024 0403 	bic.w	r4, r4, #3
 8011490:	42a0      	cmp	r0, r4
 8011492:	d005      	beq.n	80114a0 <_malloc_r+0xa8>
 8011494:	1a21      	subs	r1, r4, r0
 8011496:	4630      	mov	r0, r6
 8011498:	f000 f808 	bl	80114ac <_sbrk_r>
 801149c:	3001      	adds	r0, #1
 801149e:	d0cf      	beq.n	8011440 <_malloc_r+0x48>
 80114a0:	6025      	str	r5, [r4, #0]
 80114a2:	e7db      	b.n	801145c <_malloc_r+0x64>
 80114a4:	20005388 	.word	0x20005388
 80114a8:	2000538c 	.word	0x2000538c

080114ac <_sbrk_r>:
 80114ac:	b538      	push	{r3, r4, r5, lr}
 80114ae:	4c06      	ldr	r4, [pc, #24]	; (80114c8 <_sbrk_r+0x1c>)
 80114b0:	2300      	movs	r3, #0
 80114b2:	4605      	mov	r5, r0
 80114b4:	4608      	mov	r0, r1
 80114b6:	6023      	str	r3, [r4, #0]
 80114b8:	f7f7 fb1c 	bl	8008af4 <_sbrk>
 80114bc:	1c43      	adds	r3, r0, #1
 80114be:	d102      	bne.n	80114c6 <_sbrk_r+0x1a>
 80114c0:	6823      	ldr	r3, [r4, #0]
 80114c2:	b103      	cbz	r3, 80114c6 <_sbrk_r+0x1a>
 80114c4:	602b      	str	r3, [r5, #0]
 80114c6:	bd38      	pop	{r3, r4, r5, pc}
 80114c8:	20005788 	.word	0x20005788

080114cc <strncmp>:
 80114cc:	b510      	push	{r4, lr}
 80114ce:	b16a      	cbz	r2, 80114ec <strncmp+0x20>
 80114d0:	3901      	subs	r1, #1
 80114d2:	1884      	adds	r4, r0, r2
 80114d4:	f810 3b01 	ldrb.w	r3, [r0], #1
 80114d8:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 80114dc:	4293      	cmp	r3, r2
 80114de:	d103      	bne.n	80114e8 <strncmp+0x1c>
 80114e0:	42a0      	cmp	r0, r4
 80114e2:	d001      	beq.n	80114e8 <strncmp+0x1c>
 80114e4:	2b00      	cmp	r3, #0
 80114e6:	d1f5      	bne.n	80114d4 <strncmp+0x8>
 80114e8:	1a98      	subs	r0, r3, r2
 80114ea:	bd10      	pop	{r4, pc}
 80114ec:	4610      	mov	r0, r2
 80114ee:	e7fc      	b.n	80114ea <strncmp+0x1e>

080114f0 <__ascii_wctomb>:
 80114f0:	b149      	cbz	r1, 8011506 <__ascii_wctomb+0x16>
 80114f2:	2aff      	cmp	r2, #255	; 0xff
 80114f4:	bf85      	ittet	hi
 80114f6:	238a      	movhi	r3, #138	; 0x8a
 80114f8:	6003      	strhi	r3, [r0, #0]
 80114fa:	700a      	strbls	r2, [r1, #0]
 80114fc:	f04f 30ff 	movhi.w	r0, #4294967295	; 0xffffffff
 8011500:	bf98      	it	ls
 8011502:	2001      	movls	r0, #1
 8011504:	4770      	bx	lr
 8011506:	4608      	mov	r0, r1
 8011508:	4770      	bx	lr
	...

0801150c <malloc>:
 801150c:	4b02      	ldr	r3, [pc, #8]	; (8011518 <malloc+0xc>)
 801150e:	4601      	mov	r1, r0
 8011510:	6818      	ldr	r0, [r3, #0]
 8011512:	f7ff bf71 	b.w	80113f8 <_malloc_r>
 8011516:	bf00      	nop
 8011518:	20000014 	.word	0x20000014

0801151c <__malloc_lock>:
 801151c:	4770      	bx	lr

0801151e <__malloc_unlock>:
 801151e:	4770      	bx	lr

08011520 <_init>:
 8011520:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8011522:	bf00      	nop
 8011524:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011526:	bc08      	pop	{r3}
 8011528:	469e      	mov	lr, r3
 801152a:	4770      	bx	lr

0801152c <_fini>:
 801152c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801152e:	bf00      	nop
 8011530:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8011532:	bc08      	pop	{r3}
 8011534:	469e      	mov	lr, r3
 8011536:	4770      	bx	lr
